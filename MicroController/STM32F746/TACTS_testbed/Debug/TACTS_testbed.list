
TACTS_testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000153b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a14  08015588  08015588  00025588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f9c  08015f9c  0003049c  2**0
                  CONTENTS
  4 .ARM          00000008  08015f9c  08015f9c  00025f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015fa4  08015fa4  0003049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015fa4  08015fa4  00025fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015fa8  08015fa8  00025fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000049c  20000000  08015fac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000049c  08016448  0003049c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  08016448  00030778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003049c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002156f  00000000  00000000  000304cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b8f  00000000  00000000  00051a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  000555d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e8  00000000  00000000  00056d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002985d  00000000  00000000  00058348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002225a  00000000  00000000  00081ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f97f0  00000000  00000000  000a3dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019d5ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a84  00000000  00000000  0019d640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000049c 	.word	0x2000049c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801556c 	.word	0x0801556c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004a0 	.word	0x200004a0
 800020c:	0801556c 	.word	0x0801556c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b51      	ldr	r3, [pc, #324]	; (8001194 <MX_GPIO_Init+0x15c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a50      	ldr	r2, [pc, #320]	; (8001194 <MX_GPIO_Init+0x15c>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b4e      	ldr	r3, [pc, #312]	; (8001194 <MX_GPIO_Init+0x15c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b4b      	ldr	r3, [pc, #300]	; (8001194 <MX_GPIO_Init+0x15c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a4a      	ldr	r2, [pc, #296]	; (8001194 <MX_GPIO_Init+0x15c>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b48      	ldr	r3, [pc, #288]	; (8001194 <MX_GPIO_Init+0x15c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800107e:	4b45      	ldr	r3, [pc, #276]	; (8001194 <MX_GPIO_Init+0x15c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a44      	ldr	r2, [pc, #272]	; (8001194 <MX_GPIO_Init+0x15c>)
 8001084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b42      	ldr	r3, [pc, #264]	; (8001194 <MX_GPIO_Init+0x15c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001096:	4b3f      	ldr	r3, [pc, #252]	; (8001194 <MX_GPIO_Init+0x15c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a3e      	ldr	r2, [pc, #248]	; (8001194 <MX_GPIO_Init+0x15c>)
 800109c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b3c      	ldr	r3, [pc, #240]	; (8001194 <MX_GPIO_Init+0x15c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ae:	4b39      	ldr	r3, [pc, #228]	; (8001194 <MX_GPIO_Init+0x15c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a38      	ldr	r2, [pc, #224]	; (8001194 <MX_GPIO_Init+0x15c>)
 80010b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b36      	ldr	r3, [pc, #216]	; (8001194 <MX_GPIO_Init+0x15c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2110      	movs	r1, #16
 80010ca:	4833      	ldr	r0, [pc, #204]	; (8001198 <MX_GPIO_Init+0x160>)
 80010cc:	f003 f8d2 	bl	8004274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	210f      	movs	r1, #15
 80010d4:	4831      	ldr	r0, [pc, #196]	; (800119c <MX_GPIO_Init+0x164>)
 80010d6:	f003 f8cd 	bl	8004274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	21c0      	movs	r1, #192	; 0xc0
 80010de:	4830      	ldr	r0, [pc, #192]	; (80011a0 <MX_GPIO_Init+0x168>)
 80010e0:	f003 f8c8 	bl	8004274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010e4:	2310      	movs	r3, #16
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	4827      	ldr	r0, [pc, #156]	; (8001198 <MX_GPIO_Init+0x160>)
 80010fc:	f002 fd2a 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001100:	230f      	movs	r3, #15
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4821      	ldr	r0, [pc, #132]	; (800119c <MX_GPIO_Init+0x164>)
 8001118:	f002 fd1c 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800111c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001122:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001128:	2301      	movs	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	481c      	ldr	r0, [pc, #112]	; (80011a4 <MX_GPIO_Init+0x16c>)
 8001134:	f002 fd0e 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001138:	23c0      	movs	r3, #192	; 0xc0
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4814      	ldr	r0, [pc, #80]	; (80011a0 <MX_GPIO_Init+0x168>)
 8001150:	f002 fd00 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001154:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <MX_GPIO_Init+0x160>)
 800116a:	f002 fcf3 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800116e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001174:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117a:	2301      	movs	r3, #1
 800117c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_GPIO_Init+0x160>)
 8001186:	f002 fce5 	bl	8003b54 <HAL_GPIO_Init>

}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40020400 	.word	0x40020400
 800119c:	40022000 	.word	0x40022000
 80011a0:	40021800 	.word	0x40021800
 80011a4:	40020000 	.word	0x40020000

080011a8 <HX711_Init>:




void HX711_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2102      	movs	r1, #2
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <HX711_Init+0x14>)
 80011b2:	f003 f85f 	bl	8004274 <HAL_GPIO_WritePin>
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40022000 	.word	0x40022000

080011c0 <Read_HX711>:

int32_t Read_HX711(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  int32_t data = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]

  // Wait until the DT pin goes low
  while (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET);
 80011ca:	bf00      	nop
 80011cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d0:	4820      	ldr	r0, [pc, #128]	; (8001254 <Read_HX711+0x94>)
 80011d2:	f003 f82f 	bl	8004234 <HAL_GPIO_ReadPin>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d0f7      	beq.n	80011cc <Read_HX711+0xc>

  // Read the 24-bit data
  for (int i = 0; i < 24; i++)
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	e020      	b.n	8001224 <Read_HX711+0x64>
  {
    // Generate a clock pulse on SCK pin
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	2102      	movs	r1, #2
 80011e6:	481c      	ldr	r0, [pc, #112]	; (8001258 <Read_HX711+0x98>)
 80011e8:	f003 f844 	bl	8004274 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f000 f86f 	bl	80012d0 <DelayMicroseconds>
    data = (data << 1);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET)
 80011f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011fc:	4815      	ldr	r0, [pc, #84]	; (8001254 <Read_HX711+0x94>)
 80011fe:	f003 f819 	bl	8004234 <HAL_GPIO_ReadPin>
 8001202:	4603      	mov	r3, r0
 8001204:	2b01      	cmp	r3, #1
 8001206:	d102      	bne.n	800120e <Read_HX711+0x4e>
    {
      data++;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3301      	adds	r3, #1
 800120c:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2102      	movs	r1, #2
 8001212:	4811      	ldr	r0, [pc, #68]	; (8001258 <Read_HX711+0x98>)
 8001214:	f003 f82e 	bl	8004274 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 8001218:	2001      	movs	r0, #1
 800121a:	f000 f859 	bl	80012d0 <DelayMicroseconds>
  for (int i = 0; i < 24; i++)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b17      	cmp	r3, #23
 8001228:	dddb      	ble.n	80011e2 <Read_HX711+0x22>
  }

  // Generate an additional 25th pulse to set the HX711 back to idle mode
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	2102      	movs	r1, #2
 800122e:	480a      	ldr	r0, [pc, #40]	; (8001258 <Read_HX711+0x98>)
 8001230:	f003 f820 	bl	8004274 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f000 f84b 	bl	80012d0 <DelayMicroseconds>
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2102      	movs	r1, #2
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <Read_HX711+0x98>)
 8001240:	f003 f818 	bl	8004274 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 8001244:	2001      	movs	r0, #1
 8001246:	f000 f843 	bl	80012d0 <DelayMicroseconds>


  // Return the 24-bit data
  return data;
 800124a:	687b      	ldr	r3, [r7, #4]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40020400 	.word	0x40020400
 8001258:	40022000 	.word	0x40022000

0800125c <UART_SendWeight_g>:

void UART_SendWeight_g(float rawData,float loadcell_slope,float loadcell_bias)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b090      	sub	sp, #64	; 0x40
 8001260:	af00      	add	r7, sp, #0
 8001262:	ed87 0a03 	vstr	s0, [r7, #12]
 8001266:	edc7 0a02 	vstr	s1, [r7, #8]
 800126a:	ed87 1a01 	vstr	s2, [r7, #4]
  float weight = loadcell_slope * rawData  + loadcell_bias;
 800126e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001272:	edd7 7a03 	vldr	s15, [r7, #12]
 8001276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127a:	ed97 7a01 	vldr	s14, [r7, #4]
 800127e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001282:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  char buffer[32];
  int len = sprintf(buffer, "Weight(g):");
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	490e      	ldr	r1, [pc, #56]	; (80012c4 <UART_SendWeight_g+0x68>)
 800128c:	4618      	mov	r0, r3
 800128e:	f00f ff4b 	bl	8011128 <siprintf>
 8001292:	63b8      	str	r0, [r7, #56]	; 0x38
  int data = sprintf(buffer, "%.2f", weight);
 8001294:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001296:	f7ff f977 	bl	8000588 <__aeabi_f2d>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	f107 0014 	add.w	r0, r7, #20
 80012a2:	4909      	ldr	r1, [pc, #36]	; (80012c8 <UART_SendWeight_g+0x6c>)
 80012a4:	f00f ff40 	bl	8011128 <siprintf>
 80012a8:	6378      	str	r0, [r7, #52]	; 0x34

  // Send the buffer content via UART
#if 0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
#endif
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, data, 1000);
 80012aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	f107 0114 	add.w	r1, r7, #20
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <UART_SendWeight_g+0x70>)
 80012b8:	f008 fc72 	bl	8009ba0 <HAL_UART_Transmit>
}
 80012bc:	bf00      	nop
 80012be:	3740      	adds	r7, #64	; 0x40
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	08015588 	.word	0x08015588
 80012c8:	08015594 	.word	0x08015594
 80012cc:	2000069c 	.word	0x2000069c

080012d0 <DelayMicroseconds>:

  // Send the buffer content via UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
}
void DelayMicroseconds(uint32_t microseconds)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t ticks = microseconds;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	60fb      	str	r3, [r7, #12]
  while (ticks--)
 80012dc:	e000      	b.n	80012e0 <DelayMicroseconds+0x10>
  {
    __NOP();
 80012de:	bf00      	nop
  while (ticks--)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	1e5a      	subs	r2, r3, #1
 80012e4:	60fa      	str	r2, [r7, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f9      	bne.n	80012de <DelayMicroseconds+0xe>
  }
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_I2C1_Init+0x74>)
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <MX_I2C1_Init+0x78>)
 8001300:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_I2C1_Init+0x74>)
 8001304:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <MX_I2C1_Init+0x7c>)
 8001306:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_I2C1_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <MX_I2C1_Init+0x74>)
 8001310:	2201      	movs	r2, #1
 8001312:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_I2C1_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_I2C1_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <MX_I2C1_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_I2C1_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_I2C1_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001332:	480e      	ldr	r0, [pc, #56]	; (800136c <MX_I2C1_Init+0x74>)
 8001334:	f002 ffe2 	bl	80042fc <HAL_I2C_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800133e:	f001 fcfb 	bl	8002d38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001342:	2100      	movs	r1, #0
 8001344:	4809      	ldr	r0, [pc, #36]	; (800136c <MX_I2C1_Init+0x74>)
 8001346:	f004 fb0f 	bl	8005968 <HAL_I2CEx_ConfigAnalogFilter>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001350:	f001 fcf2 	bl	8002d38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001354:	2100      	movs	r1, #0
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_I2C1_Init+0x74>)
 8001358:	f004 fb7c 	bl	8005a54 <HAL_I2CEx_ConfigDigitalFilter>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001362:	f001 fce9 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200004b8 	.word	0x200004b8
 8001370:	40005400 	.word	0x40005400
 8001374:	6000030d 	.word	0x6000030d

08001378 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b0aa      	sub	sp, #168	; 0xa8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	2284      	movs	r2, #132	; 0x84
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f00f f83d 	bl	8010418 <memset>
  if(i2cHandle->Instance==I2C1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a22      	ldr	r2, [pc, #136]	; (800142c <HAL_I2C_MspInit+0xb4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d13c      	bne.n	8001422 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	4618      	mov	r0, r3
 80013b8:	f005 fa0c 	bl	80067d4 <HAL_RCCEx_PeriphCLKConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013c2:	f001 fcb9 	bl	8002d38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <HAL_I2C_MspInit+0xb8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a19      	ldr	r2, [pc, #100]	; (8001430 <HAL_I2C_MspInit+0xb8>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_I2C_MspInit+0xb8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e6:	2312      	movs	r3, #18
 80013e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013f8:	2304      	movs	r3, #4
 80013fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001402:	4619      	mov	r1, r3
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <HAL_I2C_MspInit+0xbc>)
 8001406:	f002 fba5 	bl	8003b54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_I2C_MspInit+0xb8>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a08      	ldr	r2, [pc, #32]	; (8001430 <HAL_I2C_MspInit+0xb8>)
 8001410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_I2C_MspInit+0xb8>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001422:	bf00      	nop
 8001424:	37a8      	adds	r7, #168	; 0xa8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40005400 	.word	0x40005400
 8001430:	40023800 	.word	0x40023800
 8001434:	40020400 	.word	0x40020400

08001438 <Kalman_Init>:
 */


#include "kalman.h"

void Kalman_Init(KalmanFilter *kf, float Q, float R, float P, float initial_value) {
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6178      	str	r0, [r7, #20]
 8001440:	ed87 0a04 	vstr	s0, [r7, #16]
 8001444:	edc7 0a03 	vstr	s1, [r7, #12]
 8001448:	ed87 1a02 	vstr	s2, [r7, #8]
 800144c:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->Q = Q;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	601a      	str	r2, [r3, #0]
    kf->R = R;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	605a      	str	r2, [r3, #4]
    kf->P = P;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	609a      	str	r2, [r3, #8]
    kf->X = initial_value;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	60da      	str	r2, [r3, #12]
}
 8001468:	bf00      	nop
 800146a:	371c      	adds	r7, #28
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <Kalman_Estimate>:

float Kalman_Estimate(KalmanFilter *kf, float measurement) {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	ed87 0a00 	vstr	s0, [r7]
    // Prediction step: Update the error covariance 'P'
    // This is adding process noise to our uncertainty in the estimated state.
    kf->P = kf->P + kf->Q;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	ed93 7a02 	vldr	s14, [r3, #8]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update step: Compute the Kalman Gain 'K'
    // Kalman Gain balances the ratio between the prediction and the new measurement
    kf->K = kf->P / (kf->P + kf->R);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	edd3 6a02 	vldr	s13, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	ed93 7a02 	vldr	s14, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	edc3 7a04 	vstr	s15, [r3, #16]

    // Update step: Update the state estimate 'X'
    // Here we adjust our state estimate based on the new measurement,
    // scaling the "innovation" by the Kalman Gain
    kf->X = kf->X + kf->K * (measurement - kf->X);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	ed93 7a03 	vldr	s14, [r3, #12]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	edd3 6a04 	vldr	s13, [r3, #16]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80014c8:	ed97 6a00 	vldr	s12, [r7]
 80014cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80014d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update step: Update the error covariance 'P'
    // We've used our observation, so we adjust our uncertainty accordingly
    kf->P = (1 - kf->K) * kf->P;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80014e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80014f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	edc3 7a02 	vstr	s15, [r3, #8]

    // Return the updated state estimate
    return kf->X;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	ee07 3a90 	vmov	s15, r3
}
 8001504:	eeb0 0a67 	vmov.f32	s0, s15
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	0000      	movs	r0, r0
 8001514:	0000      	movs	r0, r0
	...

08001518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	f5ad 5d6f 	sub.w	sp, sp, #15296	; 0x3bc0
 800151e:	b086      	sub	sp, #24
 8001520:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001522:	f002 f8b6 	bl	8003692 <HAL_Init>

  /* USER CODE BEGIN Init */

	// VL53L0X initialization stuff
	uint32_t refSpadCount = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 800152c:	6013      	str	r3, [r2, #0]
	uint8_t isApertureSpads = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	f643 323f 	movw	r2, #15167	; 0x3b3f
 8001534:	443a      	add	r2, r7
 8001536:	7013      	strb	r3, [r2, #0]
	uint8_t VhvSettings = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	f643 323e 	movw	r2, #15166	; 0x3b3e
 800153e:	443a      	add	r2, r7
 8001540:	7013      	strb	r3, [r2, #0]
	uint8_t PhaseCal = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	f643 323d 	movw	r2, #15165	; 0x3b3d
 8001548:	443a      	add	r2, r7
 800154a:	7013      	strb	r3, [r2, #0]

	VL53L0X_Dev_t vl53l0x_s[NUM_SENSOR];
	VL53L0X_DEV Dev;

	uint8_t tca_ch[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}; // control register of TCA9548A
 800154c:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001550:	f6a3 03dc 	subw	r3, r3, #2268	; 0x8dc
 8001554:	4a68      	ldr	r2, [pc, #416]	; (80016f8 <main+0x1e0>)
 8001556:	e892 0003 	ldmia.w	r2, {r0, r1}
 800155a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tca_ch_reset = 0x00;
 800155e:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001562:	f6a3 03dd 	subw	r3, r3, #2269	; 0x8dd
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]

#if NUM_SENSOR == 24
    uint8_t tca_addr[] = {0x70,0x71,0x72,0x73}; // 2 line
#elif NUM_SENSOR == 36
    uint8_t tca_addr[] = {0x70,0x71,0x72,0x73,0x74,0x75}; // 3 line
 800156a:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 800156e:	f6a3 03e4 	subw	r3, r3, #2276	; 0x8e4
 8001572:	4a62      	ldr	r2, [pc, #392]	; (80016fc <main+0x1e4>)
 8001574:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001578:	6018      	str	r0, [r3, #0]
 800157a:	3304      	adds	r3, #4
 800157c:	8019      	strh	r1, [r3, #0]




    KalmanFilter filters[NUM_SENSOR];
	float Q = 0.001f; // Process noise covariance
 800157e:	4b60      	ldr	r3, [pc, #384]	; (8001700 <main+0x1e8>)
 8001580:	f643 3290 	movw	r2, #15248	; 0x3b90
 8001584:	443a      	add	r2, r7
 8001586:	6013      	str	r3, [r2, #0]
	float R = 0.03f;   // Measurement noise covariance
 8001588:	4b5e      	ldr	r3, [pc, #376]	; (8001704 <main+0x1ec>)
 800158a:	f643 328c 	movw	r2, #15244	; 0x3b8c
 800158e:	443a      	add	r2, r7
 8001590:	6013      	str	r3, [r2, #0]
	float P = 0.001f;
 8001592:	4b5b      	ldr	r3, [pc, #364]	; (8001700 <main+0x1e8>)
 8001594:	f643 3288 	movw	r2, #15240	; 0x3b88
 8001598:	443a      	add	r2, r7
 800159a:	6013      	str	r3, [r2, #0]



    HAL_UART_Receive_IT(&huart1,&rxData,1);
 800159c:	2201      	movs	r2, #1
 800159e:	495a      	ldr	r1, [pc, #360]	; (8001708 <main+0x1f0>)
 80015a0:	485a      	ldr	r0, [pc, #360]	; (800170c <main+0x1f4>)
 80015a2:	f008 fb80 	bl	8009ca6 <HAL_UART_Receive_IT>
  int32_t rawData;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a6:	f001 faa1 	bl	8002aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015aa:	f7ff fd45 	bl	8001038 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015ae:	f7ff fea3 	bl	80012f8 <MX_I2C1_Init>
  MX_TIM7_Init();
 80015b2:	f001 fef5 	bl	80033a0 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80015b6:	f001 ff91 	bl	80034dc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80015ba:	f001 fe7b 	bl	80032b4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80015be:	f001 fb03 	bl	8002bc8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80015c2:	2100      	movs	r1, #0
 80015c4:	4852      	ldr	r0, [pc, #328]	; (8001710 <main+0x1f8>)
 80015c6:	f006 fb33 	bl	8007c30 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80015ca:	2201      	movs	r2, #1
 80015cc:	494e      	ldr	r1, [pc, #312]	; (8001708 <main+0x1f0>)
 80015ce:	484f      	ldr	r0, [pc, #316]	; (800170c <main+0x1f4>)
 80015d0:	f008 fb69 	bl	8009ca6 <HAL_UART_Receive_IT>

  // Initialize the HX711
  HX711_Init();
 80015d4:	f7ff fde8 	bl	80011a8 <HX711_Init>

  /* UART interrupt initialization */
  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "JH TACTS test\n\r"), 100);
 80015d8:	494e      	ldr	r1, [pc, #312]	; (8001714 <main+0x1fc>)
 80015da:	484f      	ldr	r0, [pc, #316]	; (8001718 <main+0x200>)
 80015dc:	f00f fda4 	bl	8011128 <siprintf>
 80015e0:	4603      	mov	r3, r0
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	2364      	movs	r3, #100	; 0x64
 80015e6:	494c      	ldr	r1, [pc, #304]	; (8001718 <main+0x200>)
 80015e8:	4848      	ldr	r0, [pc, #288]	; (800170c <main+0x1f4>)
 80015ea:	f008 fad9 	bl	8009ba0 <HAL_UART_Transmit>

  for (int j = 0; j < sizeof(tca_addr); ++j) {
 80015ee:	2300      	movs	r3, #0
 80015f0:	f643 32cc 	movw	r2, #15308	; 0x3bcc
 80015f4:	443a      	add	r2, r7
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e021      	b.n	800163e <main+0x126>
      HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 80015fa:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80015fe:	f6a3 02e4 	subw	r2, r3, #2276	; 0x8e4
 8001602:	f643 33cc 	movw	r3, #15308	; 0x3bcc
 8001606:	443b      	add	r3, r7
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	b29b      	uxth	r3, r3
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	b299      	uxth	r1, r3
 8001614:	4a41      	ldr	r2, [pc, #260]	; (800171c <main+0x204>)
 8001616:	f643 33d0 	movw	r3, #15312	; 0x3bd0
 800161a:	4413      	add	r3, r2
 800161c:	19da      	adds	r2, r3, r7
 800161e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2301      	movs	r3, #1
 8001626:	483e      	ldr	r0, [pc, #248]	; (8001720 <main+0x208>)
 8001628:	f002 ff8a 	bl	8004540 <HAL_I2C_Master_Transmit>
  for (int j = 0; j < sizeof(tca_addr); ++j) {
 800162c:	f643 33cc 	movw	r3, #15308	; 0x3bcc
 8001630:	443b      	add	r3, r7
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	f643 32cc 	movw	r2, #15308	; 0x3bcc
 800163a:	443a      	add	r2, r7
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	f643 33cc 	movw	r3, #15308	; 0x3bcc
 8001642:	443b      	add	r3, r7
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b05      	cmp	r3, #5
 8001648:	d9d7      	bls.n	80015fa <main+0xe2>
  }

	for (int i = 0; i < NUM_SENSOR; i++) {
 800164a:	2300      	movs	r3, #0
 800164c:	f643 32c8 	movw	r2, #15304	; 0x3bc8
 8001650:	443a      	add	r2, r7
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	e17f      	b.n	8001956 <main+0x43e>

	    uint8_t q = i / 12;
 8001656:	f643 33c8 	movw	r3, #15304	; 0x3bc8
 800165a:	443b      	add	r3, r7
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a31      	ldr	r2, [pc, #196]	; (8001724 <main+0x20c>)
 8001660:	fb82 1203 	smull	r1, r2, r2, r3
 8001664:	1052      	asrs	r2, r2, #1
 8001666:	17db      	asrs	r3, r3, #31
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f643 3247 	movw	r2, #15175	; 0x3b47
 800166e:	443a      	add	r2, r7
 8001670:	7013      	strb	r3, [r2, #0]
	    uint8_t r = i % 12;
 8001672:	f643 33c8 	movw	r3, #15304	; 0x3bc8
 8001676:	443b      	add	r3, r7
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <main+0x20c>)
 800167c:	fb83 1302 	smull	r1, r3, r3, r2
 8001680:	1059      	asrs	r1, r3, #1
 8001682:	17d3      	asrs	r3, r2, #31
 8001684:	1ac9      	subs	r1, r1, r3
 8001686:	460b      	mov	r3, r1
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	440b      	add	r3, r1
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	1ad1      	subs	r1, r2, r3
 8001690:	460b      	mov	r3, r1
 8001692:	f643 3246 	movw	r2, #15174	; 0x3b46
 8001696:	443a      	add	r2, r7
 8001698:	7013      	strb	r3, [r2, #0]
	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 800169a:	f643 3347 	movw	r3, #15175	; 0x3b47
 800169e:	443b      	add	r3, r7
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	f643 3246 	movw	r2, #15174	; 0x3b46
 80016aa:	443a      	add	r2, r7
 80016ac:	7812      	ldrb	r2, [r2, #0]
 80016ae:	2a07      	cmp	r2, #7
 80016b0:	bf8c      	ite	hi
 80016b2:	2201      	movhi	r2, #1
 80016b4:	2200      	movls	r2, #0
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	4413      	add	r3, r2
 80016ba:	f643 3245 	movw	r2, #15173	; 0x3b45
 80016be:	443a      	add	r2, r7
 80016c0:	7013      	strb	r3, [r2, #0]
	    uint8_t channel = (r >= 8) ? r - 8 : r;
 80016c2:	f643 3346 	movw	r3, #15174	; 0x3b46
 80016c6:	443b      	add	r3, r7
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b07      	cmp	r3, #7
 80016cc:	d906      	bls.n	80016dc <main+0x1c4>
 80016ce:	f643 3346 	movw	r3, #15174	; 0x3b46
 80016d2:	443b      	add	r3, r7
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	3b08      	subs	r3, #8
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	e003      	b.n	80016e4 <main+0x1cc>
 80016dc:	f643 3346 	movw	r3, #15174	; 0x3b46
 80016e0:	443b      	add	r3, r7
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	f643 3244 	movw	r2, #15172	; 0x3b44
 80016e8:	443a      	add	r2, r7
 80016ea:	7013      	strb	r3, [r2, #0]

	    //Reset device except active
	    for (int j = 0; j < sizeof(tca_addr); ++j) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	f643 32c4 	movw	r2, #15300	; 0x3bc4
 80016f2:	443a      	add	r2, r7
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e043      	b.n	8001780 <main+0x268>
 80016f8:	0801589c 	.word	0x0801589c
 80016fc:	080158a4 	.word	0x080158a4
 8001700:	3a83126f 	.word	0x3a83126f
 8001704:	3cf5c28f 	.word	0x3cf5c28f
 8001708:	2000058e 	.word	0x2000058e
 800170c:	2000069c 	.word	0x2000069c
 8001710:	20000604 	.word	0x20000604
 8001714:	080155b0 	.word	0x080155b0
 8001718:	200005a0 	.word	0x200005a0
 800171c:	ffffc723 	.word	0xffffc723
 8001720:	200004b8 	.word	0x200004b8
 8001724:	2aaaaaab 	.word	0x2aaaaaab
	           if (j != active_device) {
 8001728:	f643 3345 	movw	r3, #15173	; 0x3b45
 800172c:	443b      	add	r3, r7
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	f643 32c4 	movw	r2, #15300	; 0x3bc4
 8001734:	443a      	add	r2, r7
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d018      	beq.n	800176e <main+0x256>
	               HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 800173c:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001740:	f6a3 02e4 	subw	r2, r3, #2276	; 0x8e4
 8001744:	f643 33c4 	movw	r3, #15300	; 0x3bc4
 8001748:	443b      	add	r3, r7
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4413      	add	r3, r2
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b29b      	uxth	r3, r3
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	b299      	uxth	r1, r3
 8001756:	4ab9      	ldr	r2, [pc, #740]	; (8001a3c <main+0x524>)
 8001758:	f643 33d0 	movw	r3, #15312	; 0x3bd0
 800175c:	4413      	add	r3, r2
 800175e:	19da      	adds	r2, r3, r7
 8001760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2301      	movs	r3, #1
 8001768:	48b5      	ldr	r0, [pc, #724]	; (8001a40 <main+0x528>)
 800176a:	f002 fee9 	bl	8004540 <HAL_I2C_Master_Transmit>
	    for (int j = 0; j < sizeof(tca_addr); ++j) {
 800176e:	f643 33c4 	movw	r3, #15300	; 0x3bc4
 8001772:	443b      	add	r3, r7
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	f643 32c4 	movw	r2, #15300	; 0x3bc4
 800177c:	443a      	add	r2, r7
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	f643 33c4 	movw	r3, #15300	; 0x3bc4
 8001784:	443b      	add	r3, r7
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b05      	cmp	r3, #5
 800178a:	d9cd      	bls.n	8001728 <main+0x210>
	           }
	       }

	    // set channel of active device
	    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 800178c:	f643 3345 	movw	r3, #15173	; 0x3b45
 8001790:	443b      	add	r3, r7
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	f507 623d 	add.w	r2, r7, #3024	; 0xbd0
 8001798:	f6a2 02e4 	subw	r2, r2, #2276	; 0x8e4
 800179c:	5cd3      	ldrb	r3, [r2, r3]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	b299      	uxth	r1, r3
 80017a4:	f643 3344 	movw	r3, #15172	; 0x3b44
 80017a8:	443b      	add	r3, r7
 80017aa:	781a      	ldrb	r2, [r3, #0]
 80017ac:	4ba5      	ldr	r3, [pc, #660]	; (8001a44 <main+0x52c>)
 80017ae:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 80017b2:	f103 0310 	add.w	r3, r3, #16
 80017b6:	443b      	add	r3, r7
 80017b8:	441a      	add	r2, r3
 80017ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2301      	movs	r3, #1
 80017c2:	489f      	ldr	r0, [pc, #636]	; (8001a40 <main+0x528>)
 80017c4:	f002 febc 	bl	8004540 <HAL_I2C_Master_Transmit>


		Dev = &vl53l0x_s[i];
 80017c8:	4b9f      	ldr	r3, [pc, #636]	; (8001a48 <main+0x530>)
 80017ca:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 80017ce:	f103 0310 	add.w	r3, r3, #16
 80017d2:	443b      	add	r3, r7
 80017d4:	f643 32c8 	movw	r2, #15304	; 0x3bc8
 80017d8:	443a      	add	r2, r7
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80017e0:	fb01 f202 	mul.w	r2, r1, r2
 80017e4:	4413      	add	r3, r2
 80017e6:	f643 3264 	movw	r2, #15204	; 0x3b64
 80017ea:	443a      	add	r2, r7
 80017ec:	6013      	str	r3, [r2, #0]
		Dev->I2cHandle = &hi2c1;
 80017ee:	f643 3364 	movw	r3, #15204	; 0x3b64
 80017f2:	443b      	add	r3, r7
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a92      	ldr	r2, [pc, #584]	; (8001a40 <main+0x528>)
 80017f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
		Dev->I2cDevAddr = VL53L0X_ADDR;
 80017fc:	f643 3364 	movw	r3, #15204	; 0x3b64
 8001800:	443b      	add	r3, r7
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2252      	movs	r2, #82	; 0x52
 8001806:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

		VL53L0X_WaitDeviceBooted( Dev );
 800180a:	f643 3364 	movw	r3, #15204	; 0x3b64
 800180e:	443b      	add	r3, r7
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	f00a f895 	bl	800b940 <VL53L0X_WaitDeviceBooted>
		VL53L0X_DataInit( Dev );
 8001816:	f643 3364 	movw	r3, #15204	; 0x3b64
 800181a:	443b      	add	r3, r7
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	f009 fda9 	bl	800b374 <VL53L0X_DataInit>
		VL53L0X_StaticInit( Dev );
 8001822:	f643 3364 	movw	r3, #15204	; 0x3b64
 8001826:	443b      	add	r3, r7
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	f009 ff07 	bl	800b63c <VL53L0X_StaticInit>
		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800182e:	2101      	movs	r1, #1
 8001830:	f643 3364 	movw	r3, #15204	; 0x3b64
 8001834:	443b      	add	r3, r7
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	f00a f920 	bl	800ba7c <VL53L0X_SetDeviceMode>
		VL53L0X_PerformRefCalibration( Dev, &VhvSettings, &PhaseCal);
 800183c:	f643 323d 	movw	r2, #15165	; 0x3b3d
 8001840:	443a      	add	r2, r7
 8001842:	f643 333e 	movw	r3, #15166	; 0x3b3e
 8001846:	443b      	add	r3, r7
 8001848:	4619      	mov	r1, r3
 800184a:	f643 3364 	movw	r3, #15204	; 0x3b64
 800184e:	443b      	add	r3, r7
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	f00a fd95 	bl	800c380 <VL53L0X_PerformRefCalibration>
		VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount, &isApertureSpads);
 8001856:	f643 323f 	movw	r2, #15167	; 0x3b3f
 800185a:	443a      	add	r2, r7
 800185c:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001860:	4619      	mov	r1, r3
 8001862:	f643 3364 	movw	r3, #15204	; 0x3b64
 8001866:	443b      	add	r3, r7
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	f00b fa17 	bl	800cc9c <VL53L0X_PerformRefSpadManagement>
		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 800186e:	2201      	movs	r2, #1
 8001870:	2100      	movs	r1, #0
 8001872:	f643 3364 	movw	r3, #15204	; 0x3b64
 8001876:	443b      	add	r3, r7
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	f00a fb7b 	bl	800bf74 <VL53L0X_SetLimitCheckEnable>
		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 800187e:	2201      	movs	r2, #1
 8001880:	2101      	movs	r1, #1
 8001882:	f643 3364 	movw	r3, #15204	; 0x3b64
 8001886:	443b      	add	r3, r7
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	f00a fb73 	bl	800bf74 <VL53L0X_SetLimitCheckEnable>
		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 800188e:	f641 1299 	movw	r2, #6553	; 0x1999
 8001892:	2101      	movs	r1, #1
 8001894:	f643 3364 	movw	r3, #15204	; 0x3b64
 8001898:	443b      	add	r3, r7
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	f00a fc1a 	bl	800c0d4 <VL53L0X_SetLimitCheckValue>
		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80018a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80018a4:	2100      	movs	r1, #0
 80018a6:	f643 3364 	movw	r3, #15204	; 0x3b64
 80018aa:	443b      	add	r3, r7
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	f00a fc11 	bl	800c0d4 <VL53L0X_SetLimitCheckValue>
		VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 80018b2:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80018b6:	f643 3364 	movw	r3, #15204	; 0x3b64
 80018ba:	443b      	add	r3, r7
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	f00a f93b 	bl	800bb38 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80018c2:	2212      	movs	r2, #18
 80018c4:	2100      	movs	r1, #0
 80018c6:	f643 3364 	movw	r3, #15204	; 0x3b64
 80018ca:	443b      	add	r3, r7
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	f00a f959 	bl	800bb84 <VL53L0X_SetVcselPulsePeriod>
		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80018d2:	220e      	movs	r2, #14
 80018d4:	2101      	movs	r1, #1
 80018d6:	f643 3364 	movw	r3, #15204	; 0x3b64
 80018da:	443b      	add	r3, r7
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	f00a f951 	bl	800bb84 <VL53L0X_SetVcselPulsePeriod>


		// KalmanFilter initializer BEGIN //
        Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기값
 80018e2:	4a5a      	ldr	r2, [pc, #360]	; (8001a4c <main+0x534>)
 80018e4:	f643 33d0 	movw	r3, #15312	; 0x3bd0
 80018e8:	4413      	add	r3, r2
 80018ea:	19da      	adds	r2, r3, r7
 80018ec:	f643 33c8 	movw	r3, #15304	; 0x3bc8
 80018f0:	443b      	add	r3, r7
 80018f2:	6819      	ldr	r1, [r3, #0]
 80018f4:	460b      	mov	r3, r1
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	eddf 1a54 	vldr	s3, [pc, #336]	; 8001a50 <main+0x538>
 8001902:	f643 3288 	movw	r2, #15240	; 0x3b88
 8001906:	443a      	add	r2, r7
 8001908:	ed92 1a00 	vldr	s2, [r2]
 800190c:	f643 328c 	movw	r2, #15244	; 0x3b8c
 8001910:	443a      	add	r2, r7
 8001912:	edd2 0a00 	vldr	s1, [r2]
 8001916:	f643 3290 	movw	r2, #15248	; 0x3b90
 800191a:	443a      	add	r2, r7
 800191c:	ed92 0a00 	vldr	s0, [r2]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fd89 	bl	8001438 <Kalman_Init>
		// KalmanFilter initializer END //
		HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d complete \n\r",i), 100);
 8001926:	f643 33c8 	movw	r3, #15304	; 0x3bc8
 800192a:	443b      	add	r3, r7
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4949      	ldr	r1, [pc, #292]	; (8001a54 <main+0x53c>)
 8001930:	4849      	ldr	r0, [pc, #292]	; (8001a58 <main+0x540>)
 8001932:	f00f fbf9 	bl	8011128 <siprintf>
 8001936:	4603      	mov	r3, r0
 8001938:	b29a      	uxth	r2, r3
 800193a:	2364      	movs	r3, #100	; 0x64
 800193c:	4946      	ldr	r1, [pc, #280]	; (8001a58 <main+0x540>)
 800193e:	4847      	ldr	r0, [pc, #284]	; (8001a5c <main+0x544>)
 8001940:	f008 f92e 	bl	8009ba0 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++) {
 8001944:	f643 33c8 	movw	r3, #15304	; 0x3bc8
 8001948:	443b      	add	r3, r7
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	f643 32c8 	movw	r2, #15304	; 0x3bc8
 8001952:	443a      	add	r2, r7
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	f643 33c8 	movw	r3, #15304	; 0x3bc8
 800195a:	443b      	add	r3, r7
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b23      	cmp	r3, #35	; 0x23
 8001960:	f77f ae79 	ble.w	8001656 <main+0x13e>



  while (1)
  {
	  if(startMessage==0){
 8001964:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <main+0x548>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d15a      	bne.n	8001a22 <main+0x50a>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "--------------------------------------------------------------\n"), 100);
 800196c:	493d      	ldr	r1, [pc, #244]	; (8001a64 <main+0x54c>)
 800196e:	483a      	ldr	r0, [pc, #232]	; (8001a58 <main+0x540>)
 8001970:	f00f fbda 	bl	8011128 <siprintf>
 8001974:	4603      	mov	r3, r0
 8001976:	b29a      	uxth	r2, r3
 8001978:	2364      	movs	r3, #100	; 0x64
 800197a:	4937      	ldr	r1, [pc, #220]	; (8001a58 <main+0x540>)
 800197c:	4837      	ldr	r0, [pc, #220]	; (8001a5c <main+0x544>)
 800197e:	f008 f90f 	bl	8009ba0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "----- Auto Data Logging Device for TACTS made by JaeHyeong----\n"), 100);
 8001982:	4939      	ldr	r1, [pc, #228]	; (8001a68 <main+0x550>)
 8001984:	4834      	ldr	r0, [pc, #208]	; (8001a58 <main+0x540>)
 8001986:	f00f fbcf 	bl	8011128 <siprintf>
 800198a:	4603      	mov	r3, r0
 800198c:	b29a      	uxth	r2, r3
 800198e:	2364      	movs	r3, #100	; 0x64
 8001990:	4931      	ldr	r1, [pc, #196]	; (8001a58 <main+0x540>)
 8001992:	4832      	ldr	r0, [pc, #200]	; (8001a5c <main+0x544>)
 8001994:	f008 f904 	bl	8009ba0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-----------rev XX : Rotaing Revolution Motor (Deg)------------\n"), 100);
 8001998:	4934      	ldr	r1, [pc, #208]	; (8001a6c <main+0x554>)
 800199a:	482f      	ldr	r0, [pc, #188]	; (8001a58 <main+0x540>)
 800199c:	f00f fbc4 	bl	8011128 <siprintf>
 80019a0:	4603      	mov	r3, r0
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	2364      	movs	r3, #100	; 0x64
 80019a6:	492c      	ldr	r1, [pc, #176]	; (8001a58 <main+0x540>)
 80019a8:	482c      	ldr	r0, [pc, #176]	; (8001a5c <main+0x544>)
 80019aa:	f008 f8f9 	bl	8009ba0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-----------lin XX : Moving Linear Motor (mm)------------------\n"), 100);
 80019ae:	4930      	ldr	r1, [pc, #192]	; (8001a70 <main+0x558>)
 80019b0:	4829      	ldr	r0, [pc, #164]	; (8001a58 <main+0x540>)
 80019b2:	f00f fbb9 	bl	8011128 <siprintf>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	2364      	movs	r3, #100	; 0x64
 80019bc:	4926      	ldr	r1, [pc, #152]	; (8001a58 <main+0x540>)
 80019be:	4827      	ldr	r0, [pc, #156]	; (8001a5c <main+0x544>)
 80019c0:	f008 f8ee 	bl	8009ba0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-----------servo XX : Poking XX * 0.8 (mm)--------------------\n"), 100);
 80019c4:	492b      	ldr	r1, [pc, #172]	; (8001a74 <main+0x55c>)
 80019c6:	4824      	ldr	r0, [pc, #144]	; (8001a58 <main+0x540>)
 80019c8:	f00f fbae 	bl	8011128 <siprintf>
 80019cc:	4603      	mov	r3, r0
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	2364      	movs	r3, #100	; 0x64
 80019d2:	4921      	ldr	r1, [pc, #132]	; (8001a58 <main+0x540>)
 80019d4:	4821      	ldr	r0, [pc, #132]	; (8001a5c <main+0x544>)
 80019d6:	f008 f8e3 	bl	8009ba0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-----------auto : Poking the designed point and data logging--\n"), 100);
 80019da:	4927      	ldr	r1, [pc, #156]	; (8001a78 <main+0x560>)
 80019dc:	481e      	ldr	r0, [pc, #120]	; (8001a58 <main+0x540>)
 80019de:	f00f fba3 	bl	8011128 <siprintf>
 80019e2:	4603      	mov	r3, r0
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	2364      	movs	r3, #100	; 0x64
 80019e8:	491b      	ldr	r1, [pc, #108]	; (8001a58 <main+0x540>)
 80019ea:	481c      	ldr	r0, [pc, #112]	; (8001a5c <main+0x544>)
 80019ec:	f008 f8d8 	bl	8009ba0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-------------------------testbed_axial------------------------\n"), 100);
 80019f0:	4922      	ldr	r1, [pc, #136]	; (8001a7c <main+0x564>)
 80019f2:	4819      	ldr	r0, [pc, #100]	; (8001a58 <main+0x540>)
 80019f4:	f00f fb98 	bl	8011128 <siprintf>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	2364      	movs	r3, #100	; 0x64
 80019fe:	4916      	ldr	r1, [pc, #88]	; (8001a58 <main+0x540>)
 8001a00:	4816      	ldr	r0, [pc, #88]	; (8001a5c <main+0x544>)
 8001a02:	f008 f8cd 	bl	8009ba0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "--------------------------------------------------------------\n"), 100);
 8001a06:	4917      	ldr	r1, [pc, #92]	; (8001a64 <main+0x54c>)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <main+0x540>)
 8001a0a:	f00f fb8d 	bl	8011128 <siprintf>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	2364      	movs	r3, #100	; 0x64
 8001a14:	4910      	ldr	r1, [pc, #64]	; (8001a58 <main+0x540>)
 8001a16:	4811      	ldr	r0, [pc, #68]	; (8001a5c <main+0x544>)
 8001a18:	f008 f8c2 	bl	8009ba0 <HAL_UART_Transmit>
		  startMessage =1;
 8001a1c:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <main+0x548>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
	  }

	  if(receivedFlag)
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <main+0x568>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d09c      	beq.n	8001964 <main+0x44c>
	  {
		  ///////////////////// Step rev /////////////////////

		  char* command = "all";
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <main+0x56c>)
 8001a2c:	f643 3284 	movw	r2, #15236	; 0x3b84
 8001a30:	443a      	add	r2, r7
 8001a32:	6013      	str	r3, [r2, #0]
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 8001a34:	f643 3384 	movw	r3, #15236	; 0x3b84
 8001a38:	443b      	add	r3, r7
 8001a3a:	e025      	b.n	8001a88 <main+0x570>
 8001a3c:	ffffc723 	.word	0xffffc723
 8001a40:	200004b8 	.word	0x200004b8
 8001a44:	ffffc724 	.word	0xffffc724
 8001a48:	ffffc72c 	.word	0xffffc72c
 8001a4c:	ffffc44c 	.word	0xffffc44c
 8001a50:	00000000 	.word	0x00000000
 8001a54:	080155c0 	.word	0x080155c0
 8001a58:	200005a0 	.word	0x200005a0
 8001a5c:	2000069c 	.word	0x2000069c
 8001a60:	2000059c 	.word	0x2000059c
 8001a64:	080155d0 	.word	0x080155d0
 8001a68:	08015610 	.word	0x08015610
 8001a6c:	08015650 	.word	0x08015650
 8001a70:	08015690 	.word	0x08015690
 8001a74:	080156d0 	.word	0x080156d0
 8001a78:	08015710 	.word	0x08015710
 8001a7c:	08015750 	.word	0x08015750
 8001a80:	2000058f 	.word	0x2000058f
 8001a84:	08015790 	.word	0x08015790
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	f7fe fbc1 	bl	8000210 <strlen>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	f643 3384 	movw	r3, #15236	; 0x3b84
 8001a96:	443b      	add	r3, r7
 8001a98:	6819      	ldr	r1, [r3, #0]
 8001a9a:	488b      	ldr	r0, [pc, #556]	; (8001cc8 <main+0x7b0>)
 8001a9c:	f00f fbdd 	bl	801125a <strncmp>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 80be 	bne.w	8001c24 <main+0x70c>
		     {
		         float servo_dist=0;
 8001aa8:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001aac:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
		         int step_rev_angle=0;
 8001ab6:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001aba:	f6a3 33bc 	subw	r3, r3, #3004	; 0xbbc
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
		         int step_lin_dist=0;
 8001ac2:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001ac6:	f5a3 633c 	sub.w	r3, r3, #3008	; 0xbc0
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]

		         // Check if three integers are successfully parsed
		         if(sscanf((char*)rxBuffer + strlen(command)+1, "%f,%d,%d",&servo_dist, &step_rev_angle, &step_lin_dist) == 3)
 8001ace:	f643 3384 	movw	r3, #15236	; 0x3b84
 8001ad2:	443b      	add	r3, r7
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	f7fe fb9b 	bl	8000210 <strlen>
 8001ada:	4603      	mov	r3, r0
 8001adc:	3301      	adds	r3, #1
 8001ade:	4a7a      	ldr	r2, [pc, #488]	; (8001cc8 <main+0x7b0>)
 8001ae0:	1898      	adds	r0, r3, r2
 8001ae2:	4b7a      	ldr	r3, [pc, #488]	; (8001ccc <main+0x7b4>)
 8001ae4:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 8001ae8:	f103 0310 	add.w	r3, r3, #16
 8001aec:	443b      	add	r3, r7
 8001aee:	4a78      	ldr	r2, [pc, #480]	; (8001cd0 <main+0x7b8>)
 8001af0:	f502 526f 	add.w	r2, r2, #15296	; 0x3bc0
 8001af4:	f102 0210 	add.w	r2, r2, #16
 8001af8:	443a      	add	r2, r7
 8001afa:	f107 0110 	add.w	r1, r7, #16
 8001afe:	9100      	str	r1, [sp, #0]
 8001b00:	4974      	ldr	r1, [pc, #464]	; (8001cd4 <main+0x7bc>)
 8001b02:	f00f fb31 	bl	8011168 <siscanf>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d179      	bne.n	8001c00 <main+0x6e8>
		         {
		             stepRev(step_rev_angle);
 8001b0c:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001b10:	f6a3 33bc 	subw	r3, r3, #3004	; 0xbbc
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f001 f91e 	bl	8002d58 <stepRev>
		             stepLin(step_lin_dist);
 8001b1c:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001b20:	f5a3 633c 	sub.w	r3, r3, #3008	; 0xbc0
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f001 f980 	bl	8002e2c <stepLin>
		             servo_angle(&htim2, TIM_CHANNEL_1, servo_dist);
 8001b2c:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001b30:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b3c:	ee17 2a90 	vmov	r2, s15
 8001b40:	2100      	movs	r1, #0
 8001b42:	4865      	ldr	r0, [pc, #404]	; (8001cd8 <main+0x7c0>)
 8001b44:	f001 fa0c 	bl	8002f60 <servo_angle>
		             servo_dist *=0.8;
 8001b48:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001b4c:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fd18 	bl	8000588 <__aeabi_f2d>
 8001b58:	a359      	add	r3, pc, #356	; (adr r3, 8001cc0 <main+0x7a8>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fd6b 	bl	8000638 <__aeabi_dmul>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f7ff f85d 	bl	8000c28 <__aeabi_d2f>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001b74:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8001b78:	601a      	str	r2, [r3, #0]

		 			HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d deg rev \n\r",step_rev_angle), 100);
 8001b7a:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001b7e:	f6a3 33bc 	subw	r3, r3, #3004	; 0xbbc
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4955      	ldr	r1, [pc, #340]	; (8001cdc <main+0x7c4>)
 8001b88:	4855      	ldr	r0, [pc, #340]	; (8001ce0 <main+0x7c8>)
 8001b8a:	f00f facd 	bl	8011128 <siprintf>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	2364      	movs	r3, #100	; 0x64
 8001b94:	4952      	ldr	r1, [pc, #328]	; (8001ce0 <main+0x7c8>)
 8001b96:	4853      	ldr	r0, [pc, #332]	; (8001ce4 <main+0x7cc>)
 8001b98:	f008 f802 	bl	8009ba0 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d mm lin \n\r",step_lin_dist), 100);
 8001b9c:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001ba0:	f5a3 633c 	sub.w	r3, r3, #3008	; 0xbc0
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	494f      	ldr	r1, [pc, #316]	; (8001ce8 <main+0x7d0>)
 8001baa:	484d      	ldr	r0, [pc, #308]	; (8001ce0 <main+0x7c8>)
 8001bac:	f00f fabc 	bl	8011128 <siprintf>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	2364      	movs	r3, #100	; 0x64
 8001bb6:	494a      	ldr	r1, [pc, #296]	; (8001ce0 <main+0x7c8>)
 8001bb8:	484a      	ldr	r0, [pc, #296]	; (8001ce4 <main+0x7cc>)
 8001bba:	f007 fff1 	bl	8009ba0 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%.2f servo \n\r",servo_dist), 100);
 8001bbe:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001bc2:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fcdd 	bl	8000588 <__aeabi_f2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4946      	ldr	r1, [pc, #280]	; (8001cec <main+0x7d4>)
 8001bd4:	4842      	ldr	r0, [pc, #264]	; (8001ce0 <main+0x7c8>)
 8001bd6:	f00f faa7 	bl	8011128 <siprintf>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	2364      	movs	r3, #100	; 0x64
 8001be0:	493f      	ldr	r1, [pc, #252]	; (8001ce0 <main+0x7c8>)
 8001be2:	4840      	ldr	r0, [pc, #256]	; (8001ce4 <main+0x7cc>)
 8001be4:	f007 ffdc 	bl	8009ba0 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "vaild data\r\n"), 100);
 8001be8:	4941      	ldr	r1, [pc, #260]	; (8001cf0 <main+0x7d8>)
 8001bea:	483d      	ldr	r0, [pc, #244]	; (8001ce0 <main+0x7c8>)
 8001bec:	f00f fa9c 	bl	8011128 <siprintf>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	2364      	movs	r3, #100	; 0x64
 8001bf6:	493a      	ldr	r1, [pc, #232]	; (8001ce0 <main+0x7c8>)
 8001bf8:	483a      	ldr	r0, [pc, #232]	; (8001ce4 <main+0x7cc>)
 8001bfa:	f007 ffd1 	bl	8009ba0 <HAL_UART_Transmit>
 8001bfe:	e00a      	b.n	8001c16 <main+0x6fe>

		         }
		         else
		         {
		        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "invalid data\r\n"), 100);
 8001c00:	493c      	ldr	r1, [pc, #240]	; (8001cf4 <main+0x7dc>)
 8001c02:	4837      	ldr	r0, [pc, #220]	; (8001ce0 <main+0x7c8>)
 8001c04:	f00f fa90 	bl	8011128 <siprintf>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	2364      	movs	r3, #100	; 0x64
 8001c0e:	4934      	ldr	r1, [pc, #208]	; (8001ce0 <main+0x7c8>)
 8001c10:	4834      	ldr	r0, [pc, #208]	; (8001ce4 <main+0x7cc>)
 8001c12:	f007 ffc5 	bl	8009ba0 <HAL_UART_Transmit>
		         }
		         HAL_Delay(1000); // Delay for 1 second
 8001c16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1a:	f001 fd97 	bl	800374c <HAL_Delay>
		         receivedFlag = 0;
 8001c1e:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <main+0x7e0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
		     }
		  command = "rev";
 8001c24:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <main+0x7e4>)
 8001c26:	f643 3284 	movw	r2, #15236	; 0x3b84
 8001c2a:	443a      	add	r2, r7
 8001c2c:	6013      	str	r3, [r2, #0]
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 8001c2e:	f643 3384 	movw	r3, #15236	; 0x3b84
 8001c32:	443b      	add	r3, r7
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	f7fe faeb 	bl	8000210 <strlen>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	f643 3384 	movw	r3, #15236	; 0x3b84
 8001c42:	443b      	add	r3, r7
 8001c44:	6819      	ldr	r1, [r3, #0]
 8001c46:	4820      	ldr	r0, [pc, #128]	; (8001cc8 <main+0x7b0>)
 8001c48:	f00f fb07 	bl	801125a <strncmp>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d16c      	bne.n	8001d2c <main+0x814>
		     {
		         int step_rev_angle=0;
 8001c52:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001c56:	f6a3 33c4 	subw	r3, r3, #3012	; 0xbc4
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
		         if(sscanf((char*)rxBuffer + strlen(command) + 1, "%d",&step_rev_angle) == 1)
 8001c5e:	f643 3384 	movw	r3, #15236	; 0x3b84
 8001c62:	443b      	add	r3, r7
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	f7fe fad3 	bl	8000210 <strlen>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <main+0x7b0>)
 8001c70:	1898      	adds	r0, r3, r2
 8001c72:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <main+0x7e8>)
 8001c74:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 8001c78:	f103 0310 	add.w	r3, r3, #16
 8001c7c:	443b      	add	r3, r7
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4920      	ldr	r1, [pc, #128]	; (8001d04 <main+0x7ec>)
 8001c82:	f00f fa71 	bl	8011168 <siscanf>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d13d      	bne.n	8001d08 <main+0x7f0>
		         {
					 stepRev(step_rev_angle);
 8001c8c:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001c90:	f6a3 33c4 	subw	r3, r3, #3012	; 0xbc4
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f001 f85e 	bl	8002d58 <stepRev>
		 			HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d deg rev \n\r",step_rev_angle), 100);
 8001c9c:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001ca0:	f6a3 33c4 	subw	r3, r3, #3012	; 0xbc4
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	; (8001cdc <main+0x7c4>)
 8001caa:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <main+0x7c8>)
 8001cac:	f00f fa3c 	bl	8011128 <siprintf>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	2364      	movs	r3, #100	; 0x64
 8001cb6:	490a      	ldr	r1, [pc, #40]	; (8001ce0 <main+0x7c8>)
 8001cb8:	480a      	ldr	r0, [pc, #40]	; (8001ce4 <main+0x7cc>)
 8001cba:	f007 ff71 	bl	8009ba0 <HAL_UART_Transmit>
 8001cbe:	e02e      	b.n	8001d1e <main+0x806>
 8001cc0:	9999999a 	.word	0x9999999a
 8001cc4:	3fe99999 	.word	0x3fe99999
 8001cc8:	2000050c 	.word	0x2000050c
 8001ccc:	ffffc444 	.word	0xffffc444
 8001cd0:	ffffc448 	.word	0xffffc448
 8001cd4:	08015794 	.word	0x08015794
 8001cd8:	20000604 	.word	0x20000604
 8001cdc:	080157a0 	.word	0x080157a0
 8001ce0:	200005a0 	.word	0x200005a0
 8001ce4:	2000069c 	.word	0x2000069c
 8001ce8:	080157b0 	.word	0x080157b0
 8001cec:	080157c0 	.word	0x080157c0
 8001cf0:	080157d0 	.word	0x080157d0
 8001cf4:	080157e0 	.word	0x080157e0
 8001cf8:	2000058f 	.word	0x2000058f
 8001cfc:	080157f0 	.word	0x080157f0
 8001d00:	ffffc43c 	.word	0xffffc43c
 8001d04:	080157f4 	.word	0x080157f4
		         }
		         else
		         {
		        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "invalid data\r\n"), 100);
 8001d08:	49a7      	ldr	r1, [pc, #668]	; (8001fa8 <main+0xa90>)
 8001d0a:	48a8      	ldr	r0, [pc, #672]	; (8001fac <main+0xa94>)
 8001d0c:	f00f fa0c 	bl	8011128 <siprintf>
 8001d10:	4603      	mov	r3, r0
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	2364      	movs	r3, #100	; 0x64
 8001d16:	49a5      	ldr	r1, [pc, #660]	; (8001fac <main+0xa94>)
 8001d18:	48a5      	ldr	r0, [pc, #660]	; (8001fb0 <main+0xa98>)
 8001d1a:	f007 ff41 	bl	8009ba0 <HAL_UART_Transmit>
		         }
		         HAL_Delay(1000); // Delay for 1 second
 8001d1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d22:	f001 fd13 	bl	800374c <HAL_Delay>
		         receivedFlag = 0;
 8001d26:	4ba3      	ldr	r3, [pc, #652]	; (8001fb4 <main+0xa9c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
		     }

		  command = "lin";
 8001d2c:	4ba2      	ldr	r3, [pc, #648]	; (8001fb8 <main+0xaa0>)
 8001d2e:	f643 3284 	movw	r2, #15236	; 0x3b84
 8001d32:	443a      	add	r2, r7
 8001d34:	6013      	str	r3, [r2, #0]
		  if (strncmp((char*)rxBuffer, command, strlen(command)) == 0) {
 8001d36:	f643 3384 	movw	r3, #15236	; 0x3b84
 8001d3a:	443b      	add	r3, r7
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	f7fe fa67 	bl	8000210 <strlen>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	f643 3384 	movw	r3, #15236	; 0x3b84
 8001d4a:	443b      	add	r3, r7
 8001d4c:	6819      	ldr	r1, [r3, #0]
 8001d4e:	489b      	ldr	r0, [pc, #620]	; (8001fbc <main+0xaa4>)
 8001d50:	f00f fa83 	bl	801125a <strncmp>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d156      	bne.n	8001e08 <main+0x8f0>
		      int step_lin_dist = 0;
 8001d5a:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001d5e:	f6a3 33c8 	subw	r3, r3, #3016	; 0xbc8
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
		      if (sscanf((char*)rxBuffer + strlen(command) + 1, "%d", &step_lin_dist) == 1) {
 8001d66:	f643 3384 	movw	r3, #15236	; 0x3b84
 8001d6a:	443b      	add	r3, r7
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	f7fe fa4f 	bl	8000210 <strlen>
 8001d72:	4603      	mov	r3, r0
 8001d74:	3301      	adds	r3, #1
 8001d76:	4a91      	ldr	r2, [pc, #580]	; (8001fbc <main+0xaa4>)
 8001d78:	1898      	adds	r0, r3, r2
 8001d7a:	4b91      	ldr	r3, [pc, #580]	; (8001fc0 <main+0xaa8>)
 8001d7c:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 8001d80:	f103 0310 	add.w	r3, r3, #16
 8001d84:	443b      	add	r3, r7
 8001d86:	461a      	mov	r2, r3
 8001d88:	498e      	ldr	r1, [pc, #568]	; (8001fc4 <main+0xaac>)
 8001d8a:	f00f f9ed 	bl	8011168 <siscanf>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d127      	bne.n	8001de4 <main+0x8cc>
		          stepLin(step_lin_dist);
 8001d94:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001d98:	f6a3 33c8 	subw	r3, r3, #3016	; 0xbc8
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f001 f844 	bl	8002e2c <stepLin>
		          HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d mm %s \n\r", step_lin_dist, command), 100);
 8001da4:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001da8:	f6a3 33c8 	subw	r3, r3, #3016	; 0xbc8
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	f643 3384 	movw	r3, #15236	; 0x3b84
 8001db2:	443b      	add	r3, r7
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4984      	ldr	r1, [pc, #528]	; (8001fc8 <main+0xab0>)
 8001db8:	487c      	ldr	r0, [pc, #496]	; (8001fac <main+0xa94>)
 8001dba:	f00f f9b5 	bl	8011128 <siprintf>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	2364      	movs	r3, #100	; 0x64
 8001dc4:	4979      	ldr	r1, [pc, #484]	; (8001fac <main+0xa94>)
 8001dc6:	487a      	ldr	r0, [pc, #488]	; (8001fb0 <main+0xa98>)
 8001dc8:	f007 feea 	bl	8009ba0 <HAL_UART_Transmit>
		          HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "valid data\r\n"), 100);
 8001dcc:	497f      	ldr	r1, [pc, #508]	; (8001fcc <main+0xab4>)
 8001dce:	4877      	ldr	r0, [pc, #476]	; (8001fac <main+0xa94>)
 8001dd0:	f00f f9aa 	bl	8011128 <siprintf>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	2364      	movs	r3, #100	; 0x64
 8001dda:	4974      	ldr	r1, [pc, #464]	; (8001fac <main+0xa94>)
 8001ddc:	4874      	ldr	r0, [pc, #464]	; (8001fb0 <main+0xa98>)
 8001dde:	f007 fedf 	bl	8009ba0 <HAL_UART_Transmit>
 8001de2:	e00a      	b.n	8001dfa <main+0x8e2>
		      } else {
		          HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "invalid data\r\n"), 100);
 8001de4:	4970      	ldr	r1, [pc, #448]	; (8001fa8 <main+0xa90>)
 8001de6:	4871      	ldr	r0, [pc, #452]	; (8001fac <main+0xa94>)
 8001de8:	f00f f99e 	bl	8011128 <siprintf>
 8001dec:	4603      	mov	r3, r0
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	2364      	movs	r3, #100	; 0x64
 8001df2:	496e      	ldr	r1, [pc, #440]	; (8001fac <main+0xa94>)
 8001df4:	486e      	ldr	r0, [pc, #440]	; (8001fb0 <main+0xa98>)
 8001df6:	f007 fed3 	bl	8009ba0 <HAL_UART_Transmit>
		      }
		      HAL_Delay(1000);
 8001dfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dfe:	f001 fca5 	bl	800374c <HAL_Delay>
		      receivedFlag = 0;
 8001e02:	4b6c      	ldr	r3, [pc, #432]	; (8001fb4 <main+0xa9c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
		  }

		  command = "servo";
 8001e08:	4b71      	ldr	r3, [pc, #452]	; (8001fd0 <main+0xab8>)
 8001e0a:	f643 3284 	movw	r2, #15236	; 0x3b84
 8001e0e:	443a      	add	r2, r7
 8001e10:	6013      	str	r3, [r2, #0]
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 8001e12:	f643 3384 	movw	r3, #15236	; 0x3b84
 8001e16:	443b      	add	r3, r7
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	f7fe f9f9 	bl	8000210 <strlen>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461a      	mov	r2, r3
 8001e22:	f643 3384 	movw	r3, #15236	; 0x3b84
 8001e26:	443b      	add	r3, r7
 8001e28:	6819      	ldr	r1, [r3, #0]
 8001e2a:	4864      	ldr	r0, [pc, #400]	; (8001fbc <main+0xaa4>)
 8001e2c:	f00f fa15 	bl	801125a <strncmp>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d17c      	bne.n	8001f30 <main+0xa18>
		     {
		         float servo_dist=0;
 8001e36:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001e3a:	f6a3 33cc 	subw	r3, r3, #3020	; 0xbcc
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
		         if(sscanf((char*)rxBuffer + strlen(command)+1, "%f",&servo_dist) == 1)
 8001e44:	f643 3384 	movw	r3, #15236	; 0x3b84
 8001e48:	443b      	add	r3, r7
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	f7fe f9e0 	bl	8000210 <strlen>
 8001e50:	4603      	mov	r3, r0
 8001e52:	3301      	adds	r3, #1
 8001e54:	4a59      	ldr	r2, [pc, #356]	; (8001fbc <main+0xaa4>)
 8001e56:	1898      	adds	r0, r3, r2
 8001e58:	4b5e      	ldr	r3, [pc, #376]	; (8001fd4 <main+0xabc>)
 8001e5a:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 8001e5e:	f103 0310 	add.w	r3, r3, #16
 8001e62:	443b      	add	r3, r7
 8001e64:	461a      	mov	r2, r3
 8001e66:	495c      	ldr	r1, [pc, #368]	; (8001fd8 <main+0xac0>)
 8001e68:	f00f f97e 	bl	8011168 <siscanf>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d147      	bne.n	8001f02 <main+0x9ea>
		         {
		            servo_angle(&htim2, TIM_CHANNEL_1, servo_dist);
 8001e72:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001e76:	f6a3 33cc 	subw	r3, r3, #3020	; 0xbcc
 8001e7a:	edd3 7a00 	vldr	s15, [r3]
 8001e7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e82:	ee17 2a90 	vmov	r2, s15
 8001e86:	2100      	movs	r1, #0
 8001e88:	4854      	ldr	r0, [pc, #336]	; (8001fdc <main+0xac4>)
 8001e8a:	f001 f869 	bl	8002f60 <servo_angle>
		            servo_dist *=0.8;
 8001e8e:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001e92:	f6a3 33cc 	subw	r3, r3, #3020	; 0xbcc
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb75 	bl	8000588 <__aeabi_f2d>
 8001e9e:	a340      	add	r3, pc, #256	; (adr r3, 8001fa0 <main+0xa88>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	f7fe fbc8 	bl	8000638 <__aeabi_dmul>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4610      	mov	r0, r2
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f7fe feba 	bl	8000c28 <__aeabi_d2f>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001eba:	f6a3 33cc 	subw	r3, r3, #3020	; 0xbcc
 8001ebe:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%.2f servo \n\r",servo_dist), 100);
 8001ec0:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8001ec4:	f6a3 33cc 	subw	r3, r3, #3020	; 0xbcc
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fb5c 	bl	8000588 <__aeabi_f2d>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4942      	ldr	r1, [pc, #264]	; (8001fe0 <main+0xac8>)
 8001ed6:	4835      	ldr	r0, [pc, #212]	; (8001fac <main+0xa94>)
 8001ed8:	f00f f926 	bl	8011128 <siprintf>
 8001edc:	4603      	mov	r3, r0
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	2364      	movs	r3, #100	; 0x64
 8001ee2:	4932      	ldr	r1, [pc, #200]	; (8001fac <main+0xa94>)
 8001ee4:	4832      	ldr	r0, [pc, #200]	; (8001fb0 <main+0xa98>)
 8001ee6:	f007 fe5b 	bl	8009ba0 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "vaild data\r\n"), 100);
 8001eea:	493e      	ldr	r1, [pc, #248]	; (8001fe4 <main+0xacc>)
 8001eec:	482f      	ldr	r0, [pc, #188]	; (8001fac <main+0xa94>)
 8001eee:	f00f f91b 	bl	8011128 <siprintf>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	2364      	movs	r3, #100	; 0x64
 8001ef8:	492c      	ldr	r1, [pc, #176]	; (8001fac <main+0xa94>)
 8001efa:	482d      	ldr	r0, [pc, #180]	; (8001fb0 <main+0xa98>)
 8001efc:	f007 fe50 	bl	8009ba0 <HAL_UART_Transmit>
 8001f00:	e00a      	b.n	8001f18 <main+0xa00>
		         }
		         else
		         {
		        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "invalid data\r\n"), 100);
 8001f02:	4929      	ldr	r1, [pc, #164]	; (8001fa8 <main+0xa90>)
 8001f04:	4829      	ldr	r0, [pc, #164]	; (8001fac <main+0xa94>)
 8001f06:	f00f f90f 	bl	8011128 <siprintf>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	2364      	movs	r3, #100	; 0x64
 8001f10:	4926      	ldr	r1, [pc, #152]	; (8001fac <main+0xa94>)
 8001f12:	4827      	ldr	r0, [pc, #156]	; (8001fb0 <main+0xa98>)
 8001f14:	f007 fe44 	bl	8009ba0 <HAL_UART_Transmit>
		         }
		         HAL_Delay(2000); // Delay for 1 second
 8001f18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f1c:	f001 fc16 	bl	800374c <HAL_Delay>
		         servo_angle(&htim2, TIM_CHANNEL_1, 0); // return to servo origin
 8001f20:	2200      	movs	r2, #0
 8001f22:	2100      	movs	r1, #0
 8001f24:	482d      	ldr	r0, [pc, #180]	; (8001fdc <main+0xac4>)
 8001f26:	f001 f81b 	bl	8002f60 <servo_angle>
		         receivedFlag = 0;
 8001f2a:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <main+0xa9c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
		     }

		  command = "sensor";
 8001f30:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <main+0xad0>)
 8001f32:	f643 3284 	movw	r2, #15236	; 0x3b84
 8001f36:	443a      	add	r2, r7
 8001f38:	6013      	str	r3, [r2, #0]
		  if (strncmp((char*)rxBuffer, command,strlen(command)) == 0) {
 8001f3a:	f643 3384 	movw	r3, #15236	; 0x3b84
 8001f3e:	443b      	add	r3, r7
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	f7fe f965 	bl	8000210 <strlen>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f643 3384 	movw	r3, #15236	; 0x3b84
 8001f4e:	443b      	add	r3, r7
 8001f50:	6819      	ldr	r1, [r3, #0]
 8001f52:	481a      	ldr	r0, [pc, #104]	; (8001fbc <main+0xaa4>)
 8001f54:	f00f f981 	bl	801125a <strncmp>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f040 81c3 	bne.w	80022e6 <main+0xdce>


			  uint32_t start_section_time, end_section_time,elapsed_section_time;


		      HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "sensor test\r\n"), 100);
 8001f60:	4922      	ldr	r1, [pc, #136]	; (8001fec <main+0xad4>)
 8001f62:	4812      	ldr	r0, [pc, #72]	; (8001fac <main+0xa94>)
 8001f64:	f00f f8e0 	bl	8011128 <siprintf>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	2364      	movs	r3, #100	; 0x64
 8001f6e:	490f      	ldr	r1, [pc, #60]	; (8001fac <main+0xa94>)
 8001f70:	480f      	ldr	r0, [pc, #60]	; (8001fb0 <main+0xa98>)
 8001f72:	f007 fe15 	bl	8009ba0 <HAL_UART_Transmit>

		      ///////////////////////////////////////////////////////
		      ////////////////////Logging Start//////////////////////
		      ///////////////////////////////////////////////////////
		      start_time = HAL_GetTick();
 8001f76:	f001 fbdd 	bl	8003734 <HAL_GetTick>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <main+0xad8>)
 8001f7e:	6013      	str	r3, [r2, #0]
		      uint8_t count =0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f643 32c3 	movw	r2, #15299	; 0x3bc3
 8001f86:	443a      	add	r2, r7
 8001f88:	7013      	strb	r3, [r2, #0]
		      do {
		    	  start_section_time = HAL_GetTick();
 8001f8a:	f001 fbd3 	bl	8003734 <HAL_GetTick>
 8001f8e:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 8001f92:	6018      	str	r0, [r3, #0]

		    	  /// Read the VL53l0x data ///
		          for (int i = 0; i < NUM_SENSOR; i++) {
 8001f94:	2300      	movs	r3, #0
 8001f96:	f643 32bc 	movw	r2, #15292	; 0x3bbc
 8001f9a:	443a      	add	r2, r7
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e12a      	b.n	80021f6 <main+0xcde>
 8001fa0:	9999999a 	.word	0x9999999a
 8001fa4:	3fe99999 	.word	0x3fe99999
 8001fa8:	080157e0 	.word	0x080157e0
 8001fac:	200005a0 	.word	0x200005a0
 8001fb0:	2000069c 	.word	0x2000069c
 8001fb4:	2000058f 	.word	0x2000058f
 8001fb8:	080157f8 	.word	0x080157f8
 8001fbc:	2000050c 	.word	0x2000050c
 8001fc0:	ffffc438 	.word	0xffffc438
 8001fc4:	080157f4 	.word	0x080157f4
 8001fc8:	080157fc 	.word	0x080157fc
 8001fcc:	08015808 	.word	0x08015808
 8001fd0:	08015818 	.word	0x08015818
 8001fd4:	ffffc434 	.word	0xffffc434
 8001fd8:	08015820 	.word	0x08015820
 8001fdc:	20000604 	.word	0x20000604
 8001fe0:	080157c0 	.word	0x080157c0
 8001fe4:	080157d0 	.word	0x080157d0
 8001fe8:	08015824 	.word	0x08015824
 8001fec:	0801582c 	.word	0x0801582c
 8001ff0:	20000594 	.word	0x20000594

		      	    uint8_t q = i / 12;
 8001ff4:	f643 33bc 	movw	r3, #15292	; 0x3bbc
 8001ff8:	443b      	add	r3, r7
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a26      	ldr	r2, [pc, #152]	; (8002098 <main+0xb80>)
 8001ffe:	fb82 1203 	smull	r1, r2, r2, r3
 8002002:	1052      	asrs	r2, r2, #1
 8002004:	17db      	asrs	r3, r3, #31
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f643 326b 	movw	r2, #15211	; 0x3b6b
 800200c:	443a      	add	r2, r7
 800200e:	7013      	strb	r3, [r2, #0]
		      	    uint8_t r = i % 12;
 8002010:	f643 33bc 	movw	r3, #15292	; 0x3bbc
 8002014:	443b      	add	r3, r7
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b1f      	ldr	r3, [pc, #124]	; (8002098 <main+0xb80>)
 800201a:	fb83 1302 	smull	r1, r3, r3, r2
 800201e:	1059      	asrs	r1, r3, #1
 8002020:	17d3      	asrs	r3, r2, #31
 8002022:	1ac9      	subs	r1, r1, r3
 8002024:	460b      	mov	r3, r1
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	440b      	add	r3, r1
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	1ad1      	subs	r1, r2, r3
 800202e:	460b      	mov	r3, r1
 8002030:	f643 326a 	movw	r2, #15210	; 0x3b6a
 8002034:	443a      	add	r2, r7
 8002036:	7013      	strb	r3, [r2, #0]
		      	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8002038:	f643 336b 	movw	r3, #15211	; 0x3b6b
 800203c:	443b      	add	r3, r7
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f643 326a 	movw	r2, #15210	; 0x3b6a
 8002048:	443a      	add	r2, r7
 800204a:	7812      	ldrb	r2, [r2, #0]
 800204c:	2a07      	cmp	r2, #7
 800204e:	bf8c      	ite	hi
 8002050:	2201      	movhi	r2, #1
 8002052:	2200      	movls	r2, #0
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	4413      	add	r3, r2
 8002058:	f643 3269 	movw	r2, #15209	; 0x3b69
 800205c:	443a      	add	r2, r7
 800205e:	7013      	strb	r3, [r2, #0]
		      	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8002060:	f643 336a 	movw	r3, #15210	; 0x3b6a
 8002064:	443b      	add	r3, r7
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b07      	cmp	r3, #7
 800206a:	d906      	bls.n	800207a <main+0xb62>
 800206c:	f643 336a 	movw	r3, #15210	; 0x3b6a
 8002070:	443b      	add	r3, r7
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	3b08      	subs	r3, #8
 8002076:	b2db      	uxtb	r3, r3
 8002078:	e003      	b.n	8002082 <main+0xb6a>
 800207a:	f643 336a 	movw	r3, #15210	; 0x3b6a
 800207e:	443b      	add	r3, r7
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	f643 3268 	movw	r2, #15208	; 0x3b68
 8002086:	443a      	add	r2, r7
 8002088:	7013      	strb	r3, [r2, #0]

		      	    //Reset device except active
		      	    for (int j = 0; j < sizeof(tca_addr); ++j) {
 800208a:	2300      	movs	r3, #0
 800208c:	f643 32b8 	movw	r2, #15288	; 0x3bb8
 8002090:	443a      	add	r2, r7
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	e02e      	b.n	80020f4 <main+0xbdc>
 8002096:	bf00      	nop
 8002098:	2aaaaaab 	.word	0x2aaaaaab
		      	           if (j != active_device) {
 800209c:	f643 3369 	movw	r3, #15209	; 0x3b69
 80020a0:	443b      	add	r3, r7
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	f643 32b8 	movw	r2, #15288	; 0x3bb8
 80020a8:	443a      	add	r2, r7
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d018      	beq.n	80020e2 <main+0xbca>
		      	               HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 80020b0:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80020b4:	f6a3 02e4 	subw	r2, r3, #2276	; 0x8e4
 80020b8:	f643 33b8 	movw	r3, #15288	; 0x3bb8
 80020bc:	443b      	add	r3, r7
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4413      	add	r3, r2
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	b299      	uxth	r1, r3
 80020ca:	4aa0      	ldr	r2, [pc, #640]	; (800234c <main+0xe34>)
 80020cc:	f643 33d0 	movw	r3, #15312	; 0x3bd0
 80020d0:	4413      	add	r3, r2
 80020d2:	19da      	adds	r2, r3, r7
 80020d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2301      	movs	r3, #1
 80020dc:	489c      	ldr	r0, [pc, #624]	; (8002350 <main+0xe38>)
 80020de:	f002 fa2f 	bl	8004540 <HAL_I2C_Master_Transmit>
		      	    for (int j = 0; j < sizeof(tca_addr); ++j) {
 80020e2:	f643 33b8 	movw	r3, #15288	; 0x3bb8
 80020e6:	443b      	add	r3, r7
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3301      	adds	r3, #1
 80020ec:	f643 32b8 	movw	r2, #15288	; 0x3bb8
 80020f0:	443a      	add	r2, r7
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	f643 33b8 	movw	r3, #15288	; 0x3bb8
 80020f8:	443b      	add	r3, r7
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d9cd      	bls.n	800209c <main+0xb84>
		      	           }
		      	       }

		      	    // set channel of active device
		      	    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 8002100:	f643 3369 	movw	r3, #15209	; 0x3b69
 8002104:	443b      	add	r3, r7
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	f507 623d 	add.w	r2, r7, #3024	; 0xbd0
 800210c:	f6a2 02e4 	subw	r2, r2, #2276	; 0x8e4
 8002110:	5cd3      	ldrb	r3, [r2, r3]
 8002112:	b29b      	uxth	r3, r3
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	b299      	uxth	r1, r3
 8002118:	f643 3368 	movw	r3, #15208	; 0x3b68
 800211c:	443b      	add	r3, r7
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	4b8c      	ldr	r3, [pc, #560]	; (8002354 <main+0xe3c>)
 8002122:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 8002126:	f103 0310 	add.w	r3, r3, #16
 800212a:	443b      	add	r3, r7
 800212c:	441a      	add	r2, r3
 800212e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2301      	movs	r3, #1
 8002136:	4886      	ldr	r0, [pc, #536]	; (8002350 <main+0xe38>)
 8002138:	f002 fa02 	bl	8004540 <HAL_I2C_Master_Transmit>
		              Dev = &vl53l0x_s[i];
 800213c:	4b86      	ldr	r3, [pc, #536]	; (8002358 <main+0xe40>)
 800213e:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 8002142:	f103 0310 	add.w	r3, r3, #16
 8002146:	443b      	add	r3, r7
 8002148:	f643 32bc 	movw	r2, #15292	; 0x3bbc
 800214c:	443a      	add	r2, r7
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002154:	fb01 f202 	mul.w	r2, r1, r2
 8002158:	4413      	add	r3, r2
 800215a:	f643 3264 	movw	r2, #15204	; 0x3b64
 800215e:	443a      	add	r2, r7
 8002160:	6013      	str	r3, [r2, #0]
		              VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8002162:	497e      	ldr	r1, [pc, #504]	; (800235c <main+0xe44>)
 8002164:	f643 3364 	movw	r3, #15204	; 0x3b64
 8002168:	443b      	add	r3, r7
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	f00a fdab 	bl	800ccc6 <VL53L0X_PerformContinuousRangingMeasurement>

		              if (RangingData.RangeStatus == 0) {
 8002170:	4b7a      	ldr	r3, [pc, #488]	; (800235c <main+0xe44>)
 8002172:	7e1b      	ldrb	r3, [r3, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d135      	bne.n	80021e4 <main+0xccc>
		                  if (RangingData.RangeMilliMeter < 80) {
 8002178:	4b78      	ldr	r3, [pc, #480]	; (800235c <main+0xe44>)
 800217a:	891b      	ldrh	r3, [r3, #8]
 800217c:	2b4f      	cmp	r3, #79	; 0x4f
 800217e:	d831      	bhi.n	80021e4 <main+0xccc>
			                  float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8002180:	4a77      	ldr	r2, [pc, #476]	; (8002360 <main+0xe48>)
 8002182:	f643 33d0 	movw	r3, #15312	; 0x3bd0
 8002186:	4413      	add	r3, r2
 8002188:	19da      	adds	r2, r3, r7
 800218a:	f643 33bc 	movw	r3, #15292	; 0x3bbc
 800218e:	443b      	add	r3, r7
 8002190:	6819      	ldr	r1, [r3, #0]
 8002192:	460b      	mov	r3, r1
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	4a6f      	ldr	r2, [pc, #444]	; (800235c <main+0xe44>)
 800219e:	8912      	ldrh	r2, [r2, #8]
 80021a0:	ee07 2a90 	vmov	s15, r2
 80021a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021a8:	eeb0 0a67 	vmov.f32	s0, s15
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff f961 	bl	8001474 <Kalman_Estimate>
 80021b2:	f643 3360 	movw	r3, #15200	; 0x3b60
 80021b6:	443b      	add	r3, r7
 80021b8:	ed83 0a00 	vstr	s0, [r3]
			                  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%.1f ", filteredValue), 500);
 80021bc:	f643 3360 	movw	r3, #15200	; 0x3b60
 80021c0:	443b      	add	r3, r7
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	f7fe f9e0 	bl	8000588 <__aeabi_f2d>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4965      	ldr	r1, [pc, #404]	; (8002364 <main+0xe4c>)
 80021ce:	4866      	ldr	r0, [pc, #408]	; (8002368 <main+0xe50>)
 80021d0:	f00e ffaa 	bl	8011128 <siprintf>
 80021d4:	4603      	mov	r3, r0
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021dc:	4962      	ldr	r1, [pc, #392]	; (8002368 <main+0xe50>)
 80021de:	4863      	ldr	r0, [pc, #396]	; (800236c <main+0xe54>)
 80021e0:	f007 fcde 	bl	8009ba0 <HAL_UART_Transmit>
		          for (int i = 0; i < NUM_SENSOR; i++) {
 80021e4:	f643 33bc 	movw	r3, #15292	; 0x3bbc
 80021e8:	443b      	add	r3, r7
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3301      	adds	r3, #1
 80021ee:	f643 32bc 	movw	r2, #15292	; 0x3bbc
 80021f2:	443a      	add	r2, r7
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	f643 33bc 	movw	r3, #15292	; 0x3bbc
 80021fa:	443b      	add	r3, r7
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b23      	cmp	r3, #35	; 0x23
 8002200:	f77f aef8 	ble.w	8001ff4 <main+0xadc>
		                  }
		              }

		          }

				  end_section_time = HAL_GetTick();
 8002204:	f001 fa96 	bl	8003734 <HAL_GetTick>
 8002208:	f643 337c 	movw	r3, #15228	; 0x3b7c
 800220c:	443b      	add	r3, r7
 800220e:	6018      	str	r0, [r3, #0]
				  elapsed_section_time = end_section_time - start_section_time;
 8002210:	f643 337c 	movw	r3, #15228	; 0x3b7c
 8002214:	443b      	add	r3, r7
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	f507 536e 	add.w	r3, r7, #15232	; 0x3b80
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f643 3278 	movw	r2, #15224	; 0x3b78
 8002224:	443a      	add	r2, r7
 8002226:	6013      	str	r3, [r2, #0]
				  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%lu ms ", elapsed_section_time), 100);
 8002228:	f643 3378 	movw	r3, #15224	; 0x3b78
 800222c:	443b      	add	r3, r7
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	494f      	ldr	r1, [pc, #316]	; (8002370 <main+0xe58>)
 8002232:	484d      	ldr	r0, [pc, #308]	; (8002368 <main+0xe50>)
 8002234:	f00e ff78 	bl	8011128 <siprintf>
 8002238:	4603      	mov	r3, r0
 800223a:	b29a      	uxth	r2, r3
 800223c:	2364      	movs	r3, #100	; 0x64
 800223e:	494a      	ldr	r1, [pc, #296]	; (8002368 <main+0xe50>)
 8002240:	484a      	ldr	r0, [pc, #296]	; (800236c <main+0xe54>)
 8002242:	f007 fcad 	bl	8009ba0 <HAL_UART_Transmit>


		          /// End of Reading and Filtering Vl53l0x data ///

				  /// Read the raw data from HX711 ///
				  rawData = Read_HX711();
 8002246:	f7fe ffbb 	bl	80011c0 <Read_HX711>
 800224a:	f643 3374 	movw	r3, #15220	; 0x3b74
 800224e:	443b      	add	r3, r7
 8002250:	6018      	str	r0, [r3, #0]
				  float loadcell_slope = -1/1600.00f; // Convert the raw data to weight (replace the calibration factor with your own)
 8002252:	4b48      	ldr	r3, [pc, #288]	; (8002374 <main+0xe5c>)
 8002254:	f643 3270 	movw	r2, #15216	; 0x3b70
 8002258:	443a      	add	r2, r7
 800225a:	6013      	str	r3, [r2, #0]
				  float loadcell_bias = 10002;
 800225c:	4b46      	ldr	r3, [pc, #280]	; (8002378 <main+0xe60>)
 800225e:	f643 326c 	movw	r2, #15212	; 0x3b6c
 8002262:	443a      	add	r2, r7
 8002264:	6013      	str	r3, [r2, #0]
				  UART_SendWeight_g(rawData,loadcell_slope,loadcell_bias); // Send the weight data over UART
 8002266:	f643 3374 	movw	r3, #15220	; 0x3b74
 800226a:	443b      	add	r3, r7
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002276:	f643 336c 	movw	r3, #15212	; 0x3b6c
 800227a:	443b      	add	r3, r7
 800227c:	ed93 1a00 	vldr	s2, [r3]
 8002280:	f643 3370 	movw	r3, #15216	; 0x3b70
 8002284:	443b      	add	r3, r7
 8002286:	edd3 0a00 	vldr	s1, [r3]
 800228a:	eeb0 0a67 	vmov.f32	s0, s15
 800228e:	f7fe ffe5 	bl	800125c <UART_SendWeight_g>
				  /// End of Reading HX711 data ///

		          end_time = HAL_GetTick(); // 종료 ?���??? 측정
 8002292:	f001 fa4f 	bl	8003734 <HAL_GetTick>
 8002296:	4603      	mov	r3, r0
 8002298:	4a38      	ldr	r2, [pc, #224]	; (800237c <main+0xe64>)
 800229a:	6013      	str	r3, [r2, #0]
		          time_diff = end_time - start_time; // ?���??? 차이 계산
 800229c:	4b37      	ldr	r3, [pc, #220]	; (800237c <main+0xe64>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b37      	ldr	r3, [pc, #220]	; (8002380 <main+0xe68>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	4a37      	ldr	r2, [pc, #220]	; (8002384 <main+0xe6c>)
 80022a8:	6013      	str	r3, [r2, #0]

		          HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "\n"), 100);
 80022aa:	4937      	ldr	r1, [pc, #220]	; (8002388 <main+0xe70>)
 80022ac:	482e      	ldr	r0, [pc, #184]	; (8002368 <main+0xe50>)
 80022ae:	f00e ff3b 	bl	8011128 <siprintf>
 80022b2:	4603      	mov	r3, r0
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	2364      	movs	r3, #100	; 0x64
 80022b8:	492b      	ldr	r1, [pc, #172]	; (8002368 <main+0xe50>)
 80022ba:	482c      	ldr	r0, [pc, #176]	; (800236c <main+0xe54>)
 80022bc:	f007 fc70 	bl	8009ba0 <HAL_UART_Transmit>
		          count++;
 80022c0:	f643 33c3 	movw	r3, #15299	; 0x3bc3
 80022c4:	443b      	add	r3, r7
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	3301      	adds	r3, #1
 80022ca:	f643 32c3 	movw	r2, #15299	; 0x3bc3
 80022ce:	443a      	add	r2, r7
 80022d0:	7013      	strb	r3, [r2, #0]

		      } while (count < 100);
 80022d2:	f643 33c3 	movw	r3, #15299	; 0x3bc3
 80022d6:	443b      	add	r3, r7
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b63      	cmp	r3, #99	; 0x63
 80022dc:	f67f ae55 	bls.w	8001f8a <main+0xa72>

		      receivedFlag = 0;
 80022e0:	4b2a      	ldr	r3, [pc, #168]	; (800238c <main+0xe74>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
		  }

		  command = "auto";
 80022e6:	4b2a      	ldr	r3, [pc, #168]	; (8002390 <main+0xe78>)
 80022e8:	f643 3284 	movw	r2, #15236	; 0x3b84
 80022ec:	443a      	add	r2, r7
 80022ee:	6013      	str	r3, [r2, #0]
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 80022f0:	f643 3384 	movw	r3, #15236	; 0x3b84
 80022f4:	443b      	add	r3, r7
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	f7fd ff8a 	bl	8000210 <strlen>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	f643 3384 	movw	r3, #15236	; 0x3b84
 8002304:	443b      	add	r3, r7
 8002306:	6819      	ldr	r1, [r3, #0]
 8002308:	4822      	ldr	r0, [pc, #136]	; (8002394 <main+0xe7c>)
 800230a:	f00e ffa6 	bl	801125a <strncmp>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	f040 83d5 	bne.w	8002ac0 <main+0x15a8>
		     {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "kalman steady state\r\n"), 100);
 8002316:	4920      	ldr	r1, [pc, #128]	; (8002398 <main+0xe80>)
 8002318:	4813      	ldr	r0, [pc, #76]	; (8002368 <main+0xe50>)
 800231a:	f00e ff05 	bl	8011128 <siprintf>
 800231e:	4603      	mov	r3, r0
 8002320:	b29a      	uxth	r2, r3
 8002322:	2364      	movs	r3, #100	; 0x64
 8002324:	4910      	ldr	r1, [pc, #64]	; (8002368 <main+0xe50>)
 8002326:	4811      	ldr	r0, [pc, #68]	; (800236c <main+0xe54>)
 8002328:	f007 fc3a 	bl	8009ba0 <HAL_UART_Transmit>
	    	  start_time = HAL_GetTick();
 800232c:	f001 fa02 	bl	8003734 <HAL_GetTick>
 8002330:	4603      	mov	r3, r0
 8002332:	4a13      	ldr	r2, [pc, #76]	; (8002380 <main+0xe68>)
 8002334:	6013      	str	r3, [r2, #0]
	    	  uint8_t count = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	f643 32b7 	movw	r2, #15287	; 0x3bb7
 800233c:	443a      	add	r2, r7
 800233e:	7013      	strb	r3, [r2, #0]
		      do {
		    	  /// Read the VL53l0x data ///
		          for (int i = 0; i < NUM_SENSOR; i++) {
 8002340:	2300      	movs	r3, #0
 8002342:	f643 32b0 	movw	r2, #15280	; 0x3bb0
 8002346:	443a      	add	r2, r7
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	e125      	b.n	8002598 <main+0x1080>
 800234c:	ffffc723 	.word	0xffffc723
 8002350:	200004b8 	.word	0x200004b8
 8002354:	ffffc724 	.word	0xffffc724
 8002358:	ffffc72c 	.word	0xffffc72c
 800235c:	200005e0 	.word	0x200005e0
 8002360:	ffffc44c 	.word	0xffffc44c
 8002364:	0801583c 	.word	0x0801583c
 8002368:	200005a0 	.word	0x200005a0
 800236c:	2000069c 	.word	0x2000069c
 8002370:	08015844 	.word	0x08015844
 8002374:	ba23d70a 	.word	0xba23d70a
 8002378:	461c4800 	.word	0x461c4800
 800237c:	20000598 	.word	0x20000598
 8002380:	20000594 	.word	0x20000594
 8002384:	20000590 	.word	0x20000590
 8002388:	0801584c 	.word	0x0801584c
 800238c:	2000058f 	.word	0x2000058f
 8002390:	08015850 	.word	0x08015850
 8002394:	2000050c 	.word	0x2000050c
 8002398:	08015858 	.word	0x08015858
		      	    uint8_t q = i / 12;
 800239c:	f643 33b0 	movw	r3, #15280	; 0x3bb0
 80023a0:	443b      	add	r3, r7
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4ab1      	ldr	r2, [pc, #708]	; (800266c <main+0x1154>)
 80023a6:	fb82 1203 	smull	r1, r2, r2, r3
 80023aa:	1052      	asrs	r2, r2, #1
 80023ac:	17db      	asrs	r3, r3, #31
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f643 324f 	movw	r2, #15183	; 0x3b4f
 80023b4:	443a      	add	r2, r7
 80023b6:	7013      	strb	r3, [r2, #0]
		      	    uint8_t r = i % 12;
 80023b8:	f643 33b0 	movw	r3, #15280	; 0x3bb0
 80023bc:	443b      	add	r3, r7
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4baa      	ldr	r3, [pc, #680]	; (800266c <main+0x1154>)
 80023c2:	fb83 1302 	smull	r1, r3, r3, r2
 80023c6:	1059      	asrs	r1, r3, #1
 80023c8:	17d3      	asrs	r3, r2, #31
 80023ca:	1ac9      	subs	r1, r1, r3
 80023cc:	460b      	mov	r3, r1
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	440b      	add	r3, r1
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	1ad1      	subs	r1, r2, r3
 80023d6:	460b      	mov	r3, r1
 80023d8:	f643 324e 	movw	r2, #15182	; 0x3b4e
 80023dc:	443a      	add	r2, r7
 80023de:	7013      	strb	r3, [r2, #0]
		      	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 80023e0:	f643 334f 	movw	r3, #15183	; 0x3b4f
 80023e4:	443b      	add	r3, r7
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f643 324e 	movw	r2, #15182	; 0x3b4e
 80023f0:	443a      	add	r2, r7
 80023f2:	7812      	ldrb	r2, [r2, #0]
 80023f4:	2a07      	cmp	r2, #7
 80023f6:	bf8c      	ite	hi
 80023f8:	2201      	movhi	r2, #1
 80023fa:	2200      	movls	r2, #0
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	4413      	add	r3, r2
 8002400:	f643 324d 	movw	r2, #15181	; 0x3b4d
 8002404:	443a      	add	r2, r7
 8002406:	7013      	strb	r3, [r2, #0]
		      	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8002408:	f643 334e 	movw	r3, #15182	; 0x3b4e
 800240c:	443b      	add	r3, r7
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b07      	cmp	r3, #7
 8002412:	d906      	bls.n	8002422 <main+0xf0a>
 8002414:	f643 334e 	movw	r3, #15182	; 0x3b4e
 8002418:	443b      	add	r3, r7
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	3b08      	subs	r3, #8
 800241e:	b2db      	uxtb	r3, r3
 8002420:	e003      	b.n	800242a <main+0xf12>
 8002422:	f643 334e 	movw	r3, #15182	; 0x3b4e
 8002426:	443b      	add	r3, r7
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	f643 324c 	movw	r2, #15180	; 0x3b4c
 800242e:	443a      	add	r2, r7
 8002430:	7013      	strb	r3, [r2, #0]

		      	    //Reset device except active
		      	    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8002432:	2300      	movs	r3, #0
 8002434:	f643 32ac 	movw	r2, #15276	; 0x3bac
 8002438:	443a      	add	r2, r7
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	e02b      	b.n	8002496 <main+0xf7e>
		      	           if (j != active_device) {
 800243e:	f643 334d 	movw	r3, #15181	; 0x3b4d
 8002442:	443b      	add	r3, r7
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	f643 32ac 	movw	r2, #15276	; 0x3bac
 800244a:	443a      	add	r2, r7
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d018      	beq.n	8002484 <main+0xf6c>
		      	               HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8002452:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002456:	f6a3 02e4 	subw	r2, r3, #2276	; 0x8e4
 800245a:	f643 33ac 	movw	r3, #15276	; 0x3bac
 800245e:	443b      	add	r3, r7
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4413      	add	r3, r2
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	b299      	uxth	r1, r3
 800246c:	4a80      	ldr	r2, [pc, #512]	; (8002670 <main+0x1158>)
 800246e:	f643 33d0 	movw	r3, #15312	; 0x3bd0
 8002472:	4413      	add	r3, r2
 8002474:	19da      	adds	r2, r3, r7
 8002476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2301      	movs	r3, #1
 800247e:	487d      	ldr	r0, [pc, #500]	; (8002674 <main+0x115c>)
 8002480:	f002 f85e 	bl	8004540 <HAL_I2C_Master_Transmit>
		      	    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8002484:	f643 33ac 	movw	r3, #15276	; 0x3bac
 8002488:	443b      	add	r3, r7
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	3301      	adds	r3, #1
 800248e:	f643 32ac 	movw	r2, #15276	; 0x3bac
 8002492:	443a      	add	r2, r7
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	f643 33ac 	movw	r3, #15276	; 0x3bac
 800249a:	443b      	add	r3, r7
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b05      	cmp	r3, #5
 80024a0:	d9cd      	bls.n	800243e <main+0xf26>
		      	           }
		      	       }
		      	    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000); 	    // set channel of active device
 80024a2:	f643 334d 	movw	r3, #15181	; 0x3b4d
 80024a6:	443b      	add	r3, r7
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	f507 623d 	add.w	r2, r7, #3024	; 0xbd0
 80024ae:	f6a2 02e4 	subw	r2, r2, #2276	; 0x8e4
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	b299      	uxth	r1, r3
 80024ba:	f643 334c 	movw	r3, #15180	; 0x3b4c
 80024be:	443b      	add	r3, r7
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	4b6d      	ldr	r3, [pc, #436]	; (8002678 <main+0x1160>)
 80024c4:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 80024c8:	f103 0310 	add.w	r3, r3, #16
 80024cc:	443b      	add	r3, r7
 80024ce:	441a      	add	r2, r3
 80024d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2301      	movs	r3, #1
 80024d8:	4866      	ldr	r0, [pc, #408]	; (8002674 <main+0x115c>)
 80024da:	f002 f831 	bl	8004540 <HAL_I2C_Master_Transmit>
		      	    Dev = &vl53l0x_s[i];
 80024de:	4b67      	ldr	r3, [pc, #412]	; (800267c <main+0x1164>)
 80024e0:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 80024e4:	f103 0310 	add.w	r3, r3, #16
 80024e8:	443b      	add	r3, r7
 80024ea:	f643 32b0 	movw	r2, #15280	; 0x3bb0
 80024ee:	443a      	add	r2, r7
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80024f6:	fb01 f202 	mul.w	r2, r1, r2
 80024fa:	4413      	add	r3, r2
 80024fc:	f643 3264 	movw	r2, #15204	; 0x3b64
 8002500:	443a      	add	r2, r7
 8002502:	6013      	str	r3, [r2, #0]
		            VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8002504:	495e      	ldr	r1, [pc, #376]	; (8002680 <main+0x1168>)
 8002506:	f643 3364 	movw	r3, #15204	; 0x3b64
 800250a:	443b      	add	r3, r7
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	f00a fbda 	bl	800ccc6 <VL53L0X_PerformContinuousRangingMeasurement>

		              if (RangingData.RangeStatus == 0) {
 8002512:	4b5b      	ldr	r3, [pc, #364]	; (8002680 <main+0x1168>)
 8002514:	7e1b      	ldrb	r3, [r3, #24]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d135      	bne.n	8002586 <main+0x106e>
		                  if (RangingData.RangeMilliMeter < 80) {
 800251a:	4b59      	ldr	r3, [pc, #356]	; (8002680 <main+0x1168>)
 800251c:	891b      	ldrh	r3, [r3, #8]
 800251e:	2b4f      	cmp	r3, #79	; 0x4f
 8002520:	d831      	bhi.n	8002586 <main+0x106e>
			                  float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8002522:	4a58      	ldr	r2, [pc, #352]	; (8002684 <main+0x116c>)
 8002524:	f643 33d0 	movw	r3, #15312	; 0x3bd0
 8002528:	4413      	add	r3, r2
 800252a:	19da      	adds	r2, r3, r7
 800252c:	f643 33b0 	movw	r3, #15280	; 0x3bb0
 8002530:	443b      	add	r3, r7
 8002532:	6819      	ldr	r1, [r3, #0]
 8002534:	460b      	mov	r3, r1
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	4a50      	ldr	r2, [pc, #320]	; (8002680 <main+0x1168>)
 8002540:	8912      	ldrh	r2, [r2, #8]
 8002542:	ee07 2a90 	vmov	s15, r2
 8002546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800254a:	eeb0 0a67 	vmov.f32	s0, s15
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe ff90 	bl	8001474 <Kalman_Estimate>
 8002554:	f643 3348 	movw	r3, #15176	; 0x3b48
 8002558:	443b      	add	r3, r7
 800255a:	ed83 0a00 	vstr	s0, [r3]
			                  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%.1f ", filteredValue), 500);
 800255e:	f643 3348 	movw	r3, #15176	; 0x3b48
 8002562:	443b      	add	r3, r7
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	f7fe f80f 	bl	8000588 <__aeabi_f2d>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4946      	ldr	r1, [pc, #280]	; (8002688 <main+0x1170>)
 8002570:	4846      	ldr	r0, [pc, #280]	; (800268c <main+0x1174>)
 8002572:	f00e fdd9 	bl	8011128 <siprintf>
 8002576:	4603      	mov	r3, r0
 8002578:	b29a      	uxth	r2, r3
 800257a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800257e:	4943      	ldr	r1, [pc, #268]	; (800268c <main+0x1174>)
 8002580:	4843      	ldr	r0, [pc, #268]	; (8002690 <main+0x1178>)
 8002582:	f007 fb0d 	bl	8009ba0 <HAL_UART_Transmit>
		          for (int i = 0; i < NUM_SENSOR; i++) {
 8002586:	f643 33b0 	movw	r3, #15280	; 0x3bb0
 800258a:	443b      	add	r3, r7
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3301      	adds	r3, #1
 8002590:	f643 32b0 	movw	r2, #15280	; 0x3bb0
 8002594:	443a      	add	r2, r7
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	f643 33b0 	movw	r3, #15280	; 0x3bb0
 800259c:	443b      	add	r3, r7
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b23      	cmp	r3, #35	; 0x23
 80025a2:	f77f aefb 	ble.w	800239c <main+0xe84>
		              }
		          }

		          /// End of Reading and Filtering Vl53l0x data ///

		          end_time = HAL_GetTick(); // 종료 ?���??? 측정
 80025a6:	f001 f8c5 	bl	8003734 <HAL_GetTick>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4a39      	ldr	r2, [pc, #228]	; (8002694 <main+0x117c>)
 80025ae:	6013      	str	r3, [r2, #0]
		          time_diff = end_time - start_time; // ?���??? 차이 계산
 80025b0:	4b38      	ldr	r3, [pc, #224]	; (8002694 <main+0x117c>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b38      	ldr	r3, [pc, #224]	; (8002698 <main+0x1180>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	4a38      	ldr	r2, [pc, #224]	; (800269c <main+0x1184>)
 80025bc:	6013      	str	r3, [r2, #0]
		          HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "\n"), 100);
 80025be:	4938      	ldr	r1, [pc, #224]	; (80026a0 <main+0x1188>)
 80025c0:	4832      	ldr	r0, [pc, #200]	; (800268c <main+0x1174>)
 80025c2:	f00e fdb1 	bl	8011128 <siprintf>
 80025c6:	4603      	mov	r3, r0
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	2364      	movs	r3, #100	; 0x64
 80025cc:	492f      	ldr	r1, [pc, #188]	; (800268c <main+0x1174>)
 80025ce:	4830      	ldr	r0, [pc, #192]	; (8002690 <main+0x1178>)
 80025d0:	f007 fae6 	bl	8009ba0 <HAL_UART_Transmit>
		          count++;
 80025d4:	f643 33b7 	movw	r3, #15287	; 0x3bb7
 80025d8:	443b      	add	r3, r7
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	3301      	adds	r3, #1
 80025de:	f643 32b7 	movw	r2, #15287	; 0x3bb7
 80025e2:	443a      	add	r2, r7
 80025e4:	7013      	strb	r3, [r2, #0]
		      } while (count < 100);
 80025e6:	f643 33b7 	movw	r3, #15287	; 0x3bb7
 80025ea:	443b      	add	r3, r7
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b63      	cmp	r3, #99	; 0x63
 80025f0:	f67f aea6 	bls.w	8002340 <main+0xe28>


	        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "autoMode\r\n"), 100);
 80025f4:	492b      	ldr	r1, [pc, #172]	; (80026a4 <main+0x118c>)
 80025f6:	4825      	ldr	r0, [pc, #148]	; (800268c <main+0x1174>)
 80025f8:	f00e fd96 	bl	8011128 <siprintf>
 80025fc:	4603      	mov	r3, r0
 80025fe:	b29a      	uxth	r2, r3
 8002600:	2364      	movs	r3, #100	; 0x64
 8002602:	4922      	ldr	r1, [pc, #136]	; (800268c <main+0x1174>)
 8002604:	4822      	ldr	r0, [pc, #136]	; (8002690 <main+0x1178>)
 8002606:	f007 facb 	bl	8009ba0 <HAL_UART_Transmit>

				 servo_angle(&htim2, TIM_CHANNEL_1, 1); // poking
 800260a:	2201      	movs	r2, #1
 800260c:	2100      	movs	r1, #0
 800260e:	4826      	ldr	r0, [pc, #152]	; (80026a8 <main+0x1190>)
 8002610:	f000 fca6 	bl	8002f60 <servo_angle>
	        	 for(int lin = 0; lin < 21;lin ++){
 8002614:	2300      	movs	r3, #0
 8002616:	f643 32a8 	movw	r2, #15272	; 0x3ba8
 800261a:	443a      	add	r2, r7
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e245      	b.n	8002aac <main+0x1594>
					 for(int rev = 0; rev<18; rev++){
 8002620:	2300      	movs	r3, #0
 8002622:	f643 32a4 	movw	r2, #15268	; 0x3ba4
 8002626:	443a      	add	r2, r7
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e1fe      	b.n	8002a2a <main+0x1512>
						 for(int r = 1;r<8;r++){
 800262c:	2301      	movs	r3, #1
 800262e:	f643 32a0 	movw	r2, #15264	; 0x3ba0
 8002632:	443a      	add	r2, r7
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e1e5      	b.n	8002a04 <main+0x14ec>

							 servo_angle(&htim2, TIM_CHANNEL_1, r+2); // poking
 8002638:	f643 33a0 	movw	r3, #15264	; 0x3ba0
 800263c:	443b      	add	r3, r7
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3302      	adds	r3, #2
 8002642:	461a      	mov	r2, r3
 8002644:	2100      	movs	r1, #0
 8002646:	4818      	ldr	r0, [pc, #96]	; (80026a8 <main+0x1190>)
 8002648:	f000 fc8a 	bl	8002f60 <servo_angle>
							 HAL_Delay(500);
 800264c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002650:	f001 f87c 	bl	800374c <HAL_Delay>

							 ///////////////////////////////////////////////////////
							 ////////////////////Logging Start//////////////////////
							 ///////////////////////////////////////////////////////

							 uint8_t count =0;
 8002654:	2300      	movs	r3, #0
 8002656:	f643 329f 	movw	r2, #15263	; 0x3b9f
 800265a:	443a      	add	r2, r7
 800265c:	7013      	strb	r3, [r2, #0]
							 do{
						          for (int i = 0; i < NUM_SENSOR; i++) {
 800265e:	2300      	movs	r3, #0
 8002660:	f643 3298 	movw	r2, #15256	; 0x3b98
 8002664:	443a      	add	r2, r7
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	e121      	b.n	80028ae <main+0x1396>
 800266a:	bf00      	nop
 800266c:	2aaaaaab 	.word	0x2aaaaaab
 8002670:	ffffc723 	.word	0xffffc723
 8002674:	200004b8 	.word	0x200004b8
 8002678:	ffffc724 	.word	0xffffc724
 800267c:	ffffc72c 	.word	0xffffc72c
 8002680:	200005e0 	.word	0x200005e0
 8002684:	ffffc44c 	.word	0xffffc44c
 8002688:	0801583c 	.word	0x0801583c
 800268c:	200005a0 	.word	0x200005a0
 8002690:	2000069c 	.word	0x2000069c
 8002694:	20000598 	.word	0x20000598
 8002698:	20000594 	.word	0x20000594
 800269c:	20000590 	.word	0x20000590
 80026a0:	0801584c 	.word	0x0801584c
 80026a4:	08015870 	.word	0x08015870
 80026a8:	20000604 	.word	0x20000604

						      	    uint8_t q = i / 12;
 80026ac:	f643 3398 	movw	r3, #15256	; 0x3b98
 80026b0:	443b      	add	r3, r7
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a26      	ldr	r2, [pc, #152]	; (8002750 <main+0x1238>)
 80026b6:	fb82 1203 	smull	r1, r2, r2, r3
 80026ba:	1052      	asrs	r2, r2, #1
 80026bc:	17db      	asrs	r3, r3, #31
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f643 3257 	movw	r2, #15191	; 0x3b57
 80026c4:	443a      	add	r2, r7
 80026c6:	7013      	strb	r3, [r2, #0]
						      	    uint8_t r = i % 12;
 80026c8:	f643 3398 	movw	r3, #15256	; 0x3b98
 80026cc:	443b      	add	r3, r7
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <main+0x1238>)
 80026d2:	fb83 1302 	smull	r1, r3, r3, r2
 80026d6:	1059      	asrs	r1, r3, #1
 80026d8:	17d3      	asrs	r3, r2, #31
 80026da:	1ac9      	subs	r1, r1, r3
 80026dc:	460b      	mov	r3, r1
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	440b      	add	r3, r1
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	1ad1      	subs	r1, r2, r3
 80026e6:	460b      	mov	r3, r1
 80026e8:	f643 3256 	movw	r2, #15190	; 0x3b56
 80026ec:	443a      	add	r2, r7
 80026ee:	7013      	strb	r3, [r2, #0]
						      	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 80026f0:	f643 3357 	movw	r3, #15191	; 0x3b57
 80026f4:	443b      	add	r3, r7
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f643 3256 	movw	r2, #15190	; 0x3b56
 8002700:	443a      	add	r2, r7
 8002702:	7812      	ldrb	r2, [r2, #0]
 8002704:	2a07      	cmp	r2, #7
 8002706:	bf8c      	ite	hi
 8002708:	2201      	movhi	r2, #1
 800270a:	2200      	movls	r2, #0
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	4413      	add	r3, r2
 8002710:	f643 3255 	movw	r2, #15189	; 0x3b55
 8002714:	443a      	add	r2, r7
 8002716:	7013      	strb	r3, [r2, #0]
						      	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8002718:	f643 3356 	movw	r3, #15190	; 0x3b56
 800271c:	443b      	add	r3, r7
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b07      	cmp	r3, #7
 8002722:	d906      	bls.n	8002732 <main+0x121a>
 8002724:	f643 3356 	movw	r3, #15190	; 0x3b56
 8002728:	443b      	add	r3, r7
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	3b08      	subs	r3, #8
 800272e:	b2db      	uxtb	r3, r3
 8002730:	e003      	b.n	800273a <main+0x1222>
 8002732:	f643 3356 	movw	r3, #15190	; 0x3b56
 8002736:	443b      	add	r3, r7
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	f643 3254 	movw	r2, #15188	; 0x3b54
 800273e:	443a      	add	r2, r7
 8002740:	7013      	strb	r3, [r2, #0]

						      	    //Reset device except active
						      	    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8002742:	2300      	movs	r3, #0
 8002744:	f643 3294 	movw	r2, #15252	; 0x3b94
 8002748:	443a      	add	r2, r7
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	e02e      	b.n	80027ac <main+0x1294>
 800274e:	bf00      	nop
 8002750:	2aaaaaab 	.word	0x2aaaaaab
						      	           if (j != active_device) {
 8002754:	f643 3355 	movw	r3, #15189	; 0x3b55
 8002758:	443b      	add	r3, r7
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	f643 3294 	movw	r2, #15252	; 0x3b94
 8002760:	443a      	add	r2, r7
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d018      	beq.n	800279a <main+0x1282>
						      	               HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8002768:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 800276c:	f6a3 02e4 	subw	r2, r3, #2276	; 0x8e4
 8002770:	f643 3394 	movw	r3, #15252	; 0x3b94
 8002774:	443b      	add	r3, r7
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4413      	add	r3, r2
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	b29b      	uxth	r3, r3
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	b299      	uxth	r1, r3
 8002782:	4ab9      	ldr	r2, [pc, #740]	; (8002a68 <main+0x1550>)
 8002784:	f643 33d0 	movw	r3, #15312	; 0x3bd0
 8002788:	4413      	add	r3, r2
 800278a:	19da      	adds	r2, r3, r7
 800278c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	2301      	movs	r3, #1
 8002794:	48b5      	ldr	r0, [pc, #724]	; (8002a6c <main+0x1554>)
 8002796:	f001 fed3 	bl	8004540 <HAL_I2C_Master_Transmit>
						      	    for (int j = 0; j < sizeof(tca_addr); ++j) {
 800279a:	f643 3394 	movw	r3, #15252	; 0x3b94
 800279e:	443b      	add	r3, r7
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	f643 3294 	movw	r2, #15252	; 0x3b94
 80027a8:	443a      	add	r2, r7
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	f643 3394 	movw	r3, #15252	; 0x3b94
 80027b0:	443b      	add	r3, r7
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	d9cd      	bls.n	8002754 <main+0x123c>
						      	           }
						      	       }

						      	    // set channel of active device
						      	    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 80027b8:	f643 3355 	movw	r3, #15189	; 0x3b55
 80027bc:	443b      	add	r3, r7
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	f507 623d 	add.w	r2, r7, #3024	; 0xbd0
 80027c4:	f6a2 02e4 	subw	r2, r2, #2276	; 0x8e4
 80027c8:	5cd3      	ldrb	r3, [r2, r3]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	b299      	uxth	r1, r3
 80027d0:	f643 3354 	movw	r3, #15188	; 0x3b54
 80027d4:	443b      	add	r3, r7
 80027d6:	781a      	ldrb	r2, [r3, #0]
 80027d8:	4ba5      	ldr	r3, [pc, #660]	; (8002a70 <main+0x1558>)
 80027da:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 80027de:	f103 0310 	add.w	r3, r3, #16
 80027e2:	443b      	add	r3, r7
 80027e4:	441a      	add	r2, r3
 80027e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2301      	movs	r3, #1
 80027ee:	489f      	ldr	r0, [pc, #636]	; (8002a6c <main+0x1554>)
 80027f0:	f001 fea6 	bl	8004540 <HAL_I2C_Master_Transmit>
						              Dev = &vl53l0x_s[i];
 80027f4:	4b9f      	ldr	r3, [pc, #636]	; (8002a74 <main+0x155c>)
 80027f6:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 80027fa:	f103 0310 	add.w	r3, r3, #16
 80027fe:	443b      	add	r3, r7
 8002800:	f643 3298 	movw	r2, #15256	; 0x3b98
 8002804:	443a      	add	r2, r7
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800280c:	fb01 f202 	mul.w	r2, r1, r2
 8002810:	4413      	add	r3, r2
 8002812:	f643 3264 	movw	r2, #15204	; 0x3b64
 8002816:	443a      	add	r2, r7
 8002818:	6013      	str	r3, [r2, #0]
						              VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 800281a:	4997      	ldr	r1, [pc, #604]	; (8002a78 <main+0x1560>)
 800281c:	f643 3364 	movw	r3, #15204	; 0x3b64
 8002820:	443b      	add	r3, r7
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	f00a fa4f 	bl	800ccc6 <VL53L0X_PerformContinuousRangingMeasurement>


						              if (RangingData.RangeStatus == 0) {
 8002828:	4b93      	ldr	r3, [pc, #588]	; (8002a78 <main+0x1560>)
 800282a:	7e1b      	ldrb	r3, [r3, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d135      	bne.n	800289c <main+0x1384>
						                  if (RangingData.RangeMilliMeter < 80) {
 8002830:	4b91      	ldr	r3, [pc, #580]	; (8002a78 <main+0x1560>)
 8002832:	891b      	ldrh	r3, [r3, #8]
 8002834:	2b4f      	cmp	r3, #79	; 0x4f
 8002836:	d831      	bhi.n	800289c <main+0x1384>
							                  float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8002838:	4a90      	ldr	r2, [pc, #576]	; (8002a7c <main+0x1564>)
 800283a:	f643 33d0 	movw	r3, #15312	; 0x3bd0
 800283e:	4413      	add	r3, r2
 8002840:	19da      	adds	r2, r3, r7
 8002842:	f643 3398 	movw	r3, #15256	; 0x3b98
 8002846:	443b      	add	r3, r7
 8002848:	6819      	ldr	r1, [r3, #0]
 800284a:	460b      	mov	r3, r1
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	4a88      	ldr	r2, [pc, #544]	; (8002a78 <main+0x1560>)
 8002856:	8912      	ldrh	r2, [r2, #8]
 8002858:	ee07 2a90 	vmov	s15, r2
 800285c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002860:	eeb0 0a67 	vmov.f32	s0, s15
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe fe05 	bl	8001474 <Kalman_Estimate>
 800286a:	f643 3350 	movw	r3, #15184	; 0x3b50
 800286e:	443b      	add	r3, r7
 8002870:	ed83 0a00 	vstr	s0, [r3]
							                  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%.1f ", filteredValue), 500);
 8002874:	f643 3350 	movw	r3, #15184	; 0x3b50
 8002878:	443b      	add	r3, r7
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	f7fd fe84 	bl	8000588 <__aeabi_f2d>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	497e      	ldr	r1, [pc, #504]	; (8002a80 <main+0x1568>)
 8002886:	487f      	ldr	r0, [pc, #508]	; (8002a84 <main+0x156c>)
 8002888:	f00e fc4e 	bl	8011128 <siprintf>
 800288c:	4603      	mov	r3, r0
 800288e:	b29a      	uxth	r2, r3
 8002890:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002894:	497b      	ldr	r1, [pc, #492]	; (8002a84 <main+0x156c>)
 8002896:	487c      	ldr	r0, [pc, #496]	; (8002a88 <main+0x1570>)
 8002898:	f007 f982 	bl	8009ba0 <HAL_UART_Transmit>
						          for (int i = 0; i < NUM_SENSOR; i++) {
 800289c:	f643 3398 	movw	r3, #15256	; 0x3b98
 80028a0:	443b      	add	r3, r7
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3301      	adds	r3, #1
 80028a6:	f643 3298 	movw	r2, #15256	; 0x3b98
 80028aa:	443a      	add	r2, r7
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	f643 3398 	movw	r3, #15256	; 0x3b98
 80028b2:	443b      	add	r3, r7
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b23      	cmp	r3, #35	; 0x23
 80028b8:	f77f aef8 	ble.w	80026ac <main+0x1194>
						              }
						          }


						  /// Read the raw data from HX711 ///
						  rawData = Read_HX711();
 80028bc:	f7fe fc80 	bl	80011c0 <Read_HX711>
 80028c0:	f643 3374 	movw	r3, #15220	; 0x3b74
 80028c4:	443b      	add	r3, r7
 80028c6:	6018      	str	r0, [r3, #0]
						  float loadcell_slope = -1/1600.00f; // Convert the raw data to weight (replace the calibration factor with your own)
 80028c8:	4b70      	ldr	r3, [pc, #448]	; (8002a8c <main+0x1574>)
 80028ca:	f643 325c 	movw	r2, #15196	; 0x3b5c
 80028ce:	443a      	add	r2, r7
 80028d0:	6013      	str	r3, [r2, #0]
						  float loadcell_bias = 10030;
 80028d2:	4b6f      	ldr	r3, [pc, #444]	; (8002a90 <main+0x1578>)
 80028d4:	f643 3258 	movw	r2, #15192	; 0x3b58
 80028d8:	443a      	add	r2, r7
 80028da:	6013      	str	r3, [r2, #0]
						  UART_SendWeight_g(rawData,loadcell_slope,loadcell_bias); // Send the weight data over UART
 80028dc:	f643 3374 	movw	r3, #15220	; 0x3b74
 80028e0:	443b      	add	r3, r7
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	ee07 3a90 	vmov	s15, r3
 80028e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ec:	f643 3358 	movw	r3, #15192	; 0x3b58
 80028f0:	443b      	add	r3, r7
 80028f2:	ed93 1a00 	vldr	s2, [r3]
 80028f6:	f643 335c 	movw	r3, #15196	; 0x3b5c
 80028fa:	443b      	add	r3, r7
 80028fc:	edd3 0a00 	vldr	s1, [r3]
 8002900:	eeb0 0a67 	vmov.f32	s0, s15
 8002904:	f7fe fcaa 	bl	800125c <UART_SendWeight_g>
						  /// End of Reading HX711 data ///

						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, " "), 500);
 8002908:	4962      	ldr	r1, [pc, #392]	; (8002a94 <main+0x157c>)
 800290a:	485e      	ldr	r0, [pc, #376]	; (8002a84 <main+0x156c>)
 800290c:	f00e fc0c 	bl	8011128 <siprintf>
 8002910:	4603      	mov	r3, r0
 8002912:	b29a      	uxth	r2, r3
 8002914:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002918:	495a      	ldr	r1, [pc, #360]	; (8002a84 <main+0x156c>)
 800291a:	485b      	ldr	r0, [pc, #364]	; (8002a88 <main+0x1570>)
 800291c:	f007 f940 	bl	8009ba0 <HAL_UART_Transmit>
						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d ",8*lin), 500);
 8002920:	f643 33a8 	movw	r3, #15272	; 0x3ba8
 8002924:	443b      	add	r3, r7
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	461a      	mov	r2, r3
 800292c:	495a      	ldr	r1, [pc, #360]	; (8002a98 <main+0x1580>)
 800292e:	4855      	ldr	r0, [pc, #340]	; (8002a84 <main+0x156c>)
 8002930:	f00e fbfa 	bl	8011128 <siprintf>
 8002934:	4603      	mov	r3, r0
 8002936:	b29a      	uxth	r2, r3
 8002938:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800293c:	4951      	ldr	r1, [pc, #324]	; (8002a84 <main+0x156c>)
 800293e:	4852      	ldr	r0, [pc, #328]	; (8002a88 <main+0x1570>)
 8002940:	f007 f92e 	bl	8009ba0 <HAL_UART_Transmit>
						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d ",20*rev), 500);
 8002944:	f643 33a4 	movw	r3, #15268	; 0x3ba4
 8002948:	443b      	add	r3, r7
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	461a      	mov	r2, r3
 8002956:	4950      	ldr	r1, [pc, #320]	; (8002a98 <main+0x1580>)
 8002958:	484a      	ldr	r0, [pc, #296]	; (8002a84 <main+0x156c>)
 800295a:	f00e fbe5 	bl	8011128 <siprintf>
 800295e:	4603      	mov	r3, r0
 8002960:	b29a      	uxth	r2, r3
 8002962:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002966:	4947      	ldr	r1, [pc, #284]	; (8002a84 <main+0x156c>)
 8002968:	4847      	ldr	r0, [pc, #284]	; (8002a88 <main+0x1570>)
 800296a:	f007 f919 	bl	8009ba0 <HAL_UART_Transmit>
						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%.2f",r*0.8), 500);
 800296e:	f643 33a0 	movw	r3, #15264	; 0x3ba0
 8002972:	443b      	add	r3, r7
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	f7fd fdf5 	bl	8000564 <__aeabi_i2d>
 800297a:	a339      	add	r3, pc, #228	; (adr r3, 8002a60 <main+0x1548>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f7fd fe5a 	bl	8000638 <__aeabi_dmul>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4944      	ldr	r1, [pc, #272]	; (8002a9c <main+0x1584>)
 800298a:	483e      	ldr	r0, [pc, #248]	; (8002a84 <main+0x156c>)
 800298c:	f00e fbcc 	bl	8011128 <siprintf>
 8002990:	4603      	mov	r3, r0
 8002992:	b29a      	uxth	r2, r3
 8002994:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002998:	493a      	ldr	r1, [pc, #232]	; (8002a84 <main+0x156c>)
 800299a:	483b      	ldr	r0, [pc, #236]	; (8002a88 <main+0x1570>)
 800299c:	f007 f900 	bl	8009ba0 <HAL_UART_Transmit>
						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "\n"), 500);
 80029a0:	493f      	ldr	r1, [pc, #252]	; (8002aa0 <main+0x1588>)
 80029a2:	4838      	ldr	r0, [pc, #224]	; (8002a84 <main+0x156c>)
 80029a4:	f00e fbc0 	bl	8011128 <siprintf>
 80029a8:	4603      	mov	r3, r0
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029b0:	4934      	ldr	r1, [pc, #208]	; (8002a84 <main+0x156c>)
 80029b2:	4835      	ldr	r0, [pc, #212]	; (8002a88 <main+0x1570>)
 80029b4:	f007 f8f4 	bl	8009ba0 <HAL_UART_Transmit>
						 count++;
 80029b8:	f643 339f 	movw	r3, #15263	; 0x3b9f
 80029bc:	443b      	add	r3, r7
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	3301      	adds	r3, #1
 80029c2:	f643 329f 	movw	r2, #15263	; 0x3b9f
 80029c6:	443a      	add	r2, r7
 80029c8:	7013      	strb	r3, [r2, #0]
						 }while(count<40);
 80029ca:	f643 339f 	movw	r3, #15263	; 0x3b9f
 80029ce:	443b      	add	r3, r7
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b27      	cmp	r3, #39	; 0x27
 80029d4:	f67f ae43 	bls.w	800265e <main+0x1146>
						 ///////////////////////////////////////////////////////
						 ////////////////////Logging End////////////////////////
						 ///////////////////////////////////////////////////////
						 HAL_Delay(500);
 80029d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029dc:	f000 feb6 	bl	800374c <HAL_Delay>
						 servo_angle(&htim2, TIM_CHANNEL_1, 0); // turn to origin
 80029e0:	2200      	movs	r2, #0
 80029e2:	2100      	movs	r1, #0
 80029e4:	482f      	ldr	r0, [pc, #188]	; (8002aa4 <main+0x158c>)
 80029e6:	f000 fabb 	bl	8002f60 <servo_angle>
						 HAL_Delay(500);
 80029ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029ee:	f000 fead 	bl	800374c <HAL_Delay>
						 for(int r = 1;r<8;r++){
 80029f2:	f643 33a0 	movw	r3, #15264	; 0x3ba0
 80029f6:	443b      	add	r3, r7
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3301      	adds	r3, #1
 80029fc:	f643 32a0 	movw	r2, #15264	; 0x3ba0
 8002a00:	443a      	add	r2, r7
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	f643 33a0 	movw	r3, #15264	; 0x3ba0
 8002a08:	443b      	add	r3, r7
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b07      	cmp	r3, #7
 8002a0e:	f77f ae13 	ble.w	8002638 <main+0x1120>
						 }
						 stepRev(20); // revolution
 8002a12:	2014      	movs	r0, #20
 8002a14:	f000 f9a0 	bl	8002d58 <stepRev>
					 for(int rev = 0; rev<18; rev++){
 8002a18:	f643 33a4 	movw	r3, #15268	; 0x3ba4
 8002a1c:	443b      	add	r3, r7
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3301      	adds	r3, #1
 8002a22:	f643 32a4 	movw	r2, #15268	; 0x3ba4
 8002a26:	443a      	add	r2, r7
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	f643 33a4 	movw	r3, #15268	; 0x3ba4
 8002a2e:	443b      	add	r3, r7
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b11      	cmp	r3, #17
 8002a34:	f77f adfa 	ble.w	800262c <main+0x1114>

					 }
					 stepRev(-360);
 8002a38:	481b      	ldr	r0, [pc, #108]	; (8002aa8 <main+0x1590>)
 8002a3a:	f000 f98d 	bl	8002d58 <stepRev>
	        		 stepLin(-8); // moving horizontal
 8002a3e:	f06f 0007 	mvn.w	r0, #7
 8002a42:	f000 f9f3 	bl	8002e2c <stepLin>
	        	 for(int lin = 0; lin < 21;lin ++){
 8002a46:	f643 33a8 	movw	r3, #15272	; 0x3ba8
 8002a4a:	443b      	add	r3, r7
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f643 32a8 	movw	r2, #15272	; 0x3ba8
 8002a54:	443a      	add	r2, r7
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	e028      	b.n	8002aac <main+0x1594>
 8002a5a:	bf00      	nop
 8002a5c:	f3af 8000 	nop.w
 8002a60:	9999999a 	.word	0x9999999a
 8002a64:	3fe99999 	.word	0x3fe99999
 8002a68:	ffffc723 	.word	0xffffc723
 8002a6c:	200004b8 	.word	0x200004b8
 8002a70:	ffffc724 	.word	0xffffc724
 8002a74:	ffffc72c 	.word	0xffffc72c
 8002a78:	200005e0 	.word	0x200005e0
 8002a7c:	ffffc44c 	.word	0xffffc44c
 8002a80:	0801583c 	.word	0x0801583c
 8002a84:	200005a0 	.word	0x200005a0
 8002a88:	2000069c 	.word	0x2000069c
 8002a8c:	ba23d70a 	.word	0xba23d70a
 8002a90:	461cb800 	.word	0x461cb800
 8002a94:	0801587c 	.word	0x0801587c
 8002a98:	08015880 	.word	0x08015880
 8002a9c:	08015884 	.word	0x08015884
 8002aa0:	0801584c 	.word	0x0801584c
 8002aa4:	20000604 	.word	0x20000604
 8002aa8:	fffffe98 	.word	0xfffffe98
 8002aac:	f643 33a8 	movw	r3, #15272	; 0x3ba8
 8002ab0:	443b      	add	r3, r7
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b14      	cmp	r3, #20
 8002ab6:	f77f adb3 	ble.w	8002620 <main+0x1108>
	        	 }


		         receivedFlag = 0;
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <main+0x15c4>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
		     }

     	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "Message end\r\n"), 100);
 8002ac0:	4907      	ldr	r1, [pc, #28]	; (8002ae0 <main+0x15c8>)
 8002ac2:	4808      	ldr	r0, [pc, #32]	; (8002ae4 <main+0x15cc>)
 8002ac4:	f00e fb30 	bl	8011128 <siprintf>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	2364      	movs	r3, #100	; 0x64
 8002ace:	4905      	ldr	r1, [pc, #20]	; (8002ae4 <main+0x15cc>)
 8002ad0:	4805      	ldr	r0, [pc, #20]	; (8002ae8 <main+0x15d0>)
 8002ad2:	f007 f865 	bl	8009ba0 <HAL_UART_Transmit>
	  if(startMessage==0){
 8002ad6:	f7fe bf45 	b.w	8001964 <main+0x44c>
 8002ada:	bf00      	nop
 8002adc:	2000058f 	.word	0x2000058f
 8002ae0:	0801588c 	.word	0x0801588c
 8002ae4:	200005a0 	.word	0x200005a0
 8002ae8:	2000069c 	.word	0x2000069c

08002aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b094      	sub	sp, #80	; 0x50
 8002af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002af2:	f107 0320 	add.w	r3, r7, #32
 8002af6:	2230      	movs	r2, #48	; 0x30
 8002af8:	2100      	movs	r1, #0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f00d fc8c 	bl	8010418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b00:	f107 030c 	add.w	r3, r7, #12
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b10:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <SystemClock_Config+0xd4>)
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <SystemClock_Config+0xd4>)
 8002b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1c:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <SystemClock_Config+0xd4>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b28:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <SystemClock_Config+0xd8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a25      	ldr	r2, [pc, #148]	; (8002bc4 <SystemClock_Config+0xd8>)
 8002b2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b23      	ldr	r3, [pc, #140]	; (8002bc4 <SystemClock_Config+0xd8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b40:	2301      	movs	r3, #1
 8002b42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002b54:	2319      	movs	r3, #25
 8002b56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002b58:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002b5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002b62:	2302      	movs	r3, #2
 8002b64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b66:	f107 0320 	add.w	r3, r7, #32
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f003 f836 	bl	8005bdc <HAL_RCC_OscConfig>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002b76:	f000 f8df 	bl	8002d38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002b7a:	f002 ffdf 	bl	8005b3c <HAL_PWREx_EnableOverDrive>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002b84:	f000 f8d8 	bl	8002d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b88:	230f      	movs	r3, #15
 8002b8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	2107      	movs	r1, #7
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f003 fb72 	bl	8006290 <HAL_RCC_ClockConfig>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002bb2:	f000 f8c1 	bl	8002d38 <Error_Handler>
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	3750      	adds	r7, #80	; 0x50
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40007000 	.word	0x40007000

08002bc8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2100      	movs	r1, #0
 8002bd0:	2025      	movs	r0, #37	; 0x25
 8002bd2:	f000 fecf 	bl	8003974 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bd6:	2025      	movs	r0, #37	; 0x25
 8002bd8:	f000 fef8 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2100      	movs	r1, #0
 8002be0:	2020      	movs	r0, #32
 8002be2:	f000 fec7 	bl	8003974 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002be6:	2020      	movs	r0, #32
 8002be8:	f000 fef0 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002bec:	2200      	movs	r2, #0
 8002bee:	2100      	movs	r1, #0
 8002bf0:	201f      	movs	r0, #31
 8002bf2:	f000 febf 	bl	8003974 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002bf6:	201f      	movs	r0, #31
 8002bf8:	f000 fee8 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2100      	movs	r1, #0
 8002c00:	2028      	movs	r0, #40	; 0x28
 8002c02:	f000 feb7 	bl	8003974 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c06:	2028      	movs	r0, #40	; 0x28
 8002c08:	f000 fee0 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2100      	movs	r1, #0
 8002c10:	2017      	movs	r0, #23
 8002c12:	f000 feaf 	bl	8003974 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c16:	2017      	movs	r0, #23
 8002c18:	f000 fed8 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2100      	movs	r1, #0
 8002c20:	2037      	movs	r0, #55	; 0x37
 8002c22:	f000 fea7 	bl	8003974 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002c26:	2037      	movs	r0, #55	; 0x37
 8002c28:	f000 fed0 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2100      	movs	r1, #0
 8002c30:	201c      	movs	r0, #28
 8002c32:	f000 fe9f 	bl	8003974 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c36:	201c      	movs	r0, #28
 8002c38:	f000 fec8 	bl	80039cc <HAL_NVIC_EnableIRQ>
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a15      	ldr	r2, [pc, #84]	; (8002ca4 <HAL_UART_RxCpltCallback+0x64>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d124      	bne.n	8002c9c <HAL_UART_RxCpltCallback+0x5c>
  {
    if (rxData != '\n' && rxBufferIndex < RX_BUFFER_SIZE - 1)
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <HAL_UART_RxCpltCallback+0x68>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b0a      	cmp	r3, #10
 8002c58:	d00f      	beq.n	8002c7a <HAL_UART_RxCpltCallback+0x3a>
 8002c5a:	4b14      	ldr	r3, [pc, #80]	; (8002cac <HAL_UART_RxCpltCallback+0x6c>)
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	2b7e      	cmp	r3, #126	; 0x7e
 8002c60:	d80b      	bhi.n	8002c7a <HAL_UART_RxCpltCallback+0x3a>
    {
      rxBuffer[rxBufferIndex++] = rxData;
 8002c62:	4b12      	ldr	r3, [pc, #72]	; (8002cac <HAL_UART_RxCpltCallback+0x6c>)
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	b291      	uxth	r1, r2
 8002c6a:	4a10      	ldr	r2, [pc, #64]	; (8002cac <HAL_UART_RxCpltCallback+0x6c>)
 8002c6c:	8011      	strh	r1, [r2, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <HAL_UART_RxCpltCallback+0x68>)
 8002c72:	7819      	ldrb	r1, [r3, #0]
 8002c74:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <HAL_UART_RxCpltCallback+0x70>)
 8002c76:	5499      	strb	r1, [r3, r2]
 8002c78:	e00b      	b.n	8002c92 <HAL_UART_RxCpltCallback+0x52>
    }
    else
    {
      rxBuffer[rxBufferIndex] = '\0';
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <HAL_UART_RxCpltCallback+0x6c>)
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_UART_RxCpltCallback+0x70>)
 8002c82:	2100      	movs	r1, #0
 8002c84:	5499      	strb	r1, [r3, r2]
      rxBufferIndex = 0;
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <HAL_UART_RxCpltCallback+0x6c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	801a      	strh	r2, [r3, #0]
      receivedFlag = 1; // 문자?��?�� ?��?��?��?��?��?�� ?��리는 ?��?��그�?? ?��?��?��?��?��.
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_UART_RxCpltCallback+0x74>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8002c92:	2201      	movs	r2, #1
 8002c94:	4904      	ldr	r1, [pc, #16]	; (8002ca8 <HAL_UART_RxCpltCallback+0x68>)
 8002c96:	4808      	ldr	r0, [pc, #32]	; (8002cb8 <HAL_UART_RxCpltCallback+0x78>)
 8002c98:	f007 f805 	bl	8009ca6 <HAL_UART_Receive_IT>
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40011000 	.word	0x40011000
 8002ca8:	2000058e 	.word	0x2000058e
 8002cac:	2000058c 	.word	0x2000058c
 8002cb0:	2000050c 	.word	0x2000050c
 8002cb4:	2000058f 	.word	0x2000058f
 8002cb8:	2000069c 	.word	0x2000069c

08002cbc <HAL_GPIO_EXTI_Callback>:


#if 1
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_8) // A?��?�� ???�� ?��?��?��?��
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ccc:	d113      	bne.n	8002cf6 <HAL_GPIO_EXTI_Callback+0x3a>
  {
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) // B?�� 값을 ?��?��
 8002cce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cd2:	4816      	ldr	r0, [pc, #88]	; (8002d2c <HAL_GPIO_EXTI_Callback+0x70>)
 8002cd4:	f001 faae 	bl	8004234 <HAL_GPIO_ReadPin>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_GPIO_EXTI_Callback+0x2e>
    {
      encoderCount++;
 8002cde:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <HAL_GPIO_EXTI_Callback+0x74>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	4a12      	ldr	r2, [pc, #72]	; (8002d30 <HAL_GPIO_EXTI_Callback+0x74>)
 8002ce6:	6013      	str	r3, [r2, #0]
    else
    {
      encoderCount++;
    }
  }
}
 8002ce8:	e01c      	b.n	8002d24 <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount--;
 8002cea:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <HAL_GPIO_EXTI_Callback+0x74>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <HAL_GPIO_EXTI_Callback+0x74>)
 8002cf2:	6013      	str	r3, [r2, #0]
}
 8002cf4:	e016      	b.n	8002d24 <HAL_GPIO_EXTI_Callback+0x68>
  else if (GPIO_Pin == GPIO_PIN_15) // B?��?�� ???�� ?��?��?��?��
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cfc:	d112      	bne.n	8002d24 <HAL_GPIO_EXTI_Callback+0x68>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) // A?�� 값을 ?��?��
 8002cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d02:	480c      	ldr	r0, [pc, #48]	; (8002d34 <HAL_GPIO_EXTI_Callback+0x78>)
 8002d04:	f001 fa96 	bl	8004234 <HAL_GPIO_ReadPin>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_GPIO_EXTI_Callback+0x5e>
      encoderCount--;
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <HAL_GPIO_EXTI_Callback+0x74>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	4a06      	ldr	r2, [pc, #24]	; (8002d30 <HAL_GPIO_EXTI_Callback+0x74>)
 8002d16:	6013      	str	r3, [r2, #0]
}
 8002d18:	e004      	b.n	8002d24 <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount++;
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_GPIO_EXTI_Callback+0x74>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	4a03      	ldr	r2, [pc, #12]	; (8002d30 <HAL_GPIO_EXTI_Callback+0x74>)
 8002d22:	6013      	str	r3, [r2, #0]
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40020400 	.word	0x40020400
 8002d30:	200005fc 	.word	0x200005fc
 8002d34:	40020000 	.word	0x40020000

08002d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d3c:	b672      	cpsid	i
}
 8002d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <Error_Handler+0x8>

08002d42 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <stepRev>:
#include "tim.h"

#define PULSE 200
#define GEAR 139

void stepRev(int ANG) {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 8002d60:	2200      	movs	r2, #0
 8002d62:	2140      	movs	r1, #64	; 0x40
 8002d64:	482e      	ldr	r0, [pc, #184]	; (8002e20 <stepRev+0xc8>)
 8002d66:	f001 fa85 	bl	8004274 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d04e      	beq.n	8002e0e <stepRev+0xb6>
    int direction = (ANG > 0) ? 1 : -1;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	dd01      	ble.n	8002d7a <stepRev+0x22>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e001      	b.n	8002d7e <stepRev+0x26>
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7e:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	fb02 f303 	mul.w	r3, r2, r3
 8002d88:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	2180      	movs	r1, #128	; 0x80
 8002d9a:	4821      	ldr	r0, [pc, #132]	; (8002e20 <stepRev+0xc8>)
 8002d9c:	f001 fa6a 	bl	8004274 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8002da0:	2200      	movs	r2, #0
 8002da2:	2140      	movs	r1, #64	; 0x40
 8002da4:	481e      	ldr	r0, [pc, #120]	; (8002e20 <stepRev+0xc8>)
 8002da6:	f001 fa65 	bl	8004274 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * GEAR * ANG / 360.0;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f646 4298 	movw	r2, #27800	; 0x6c98
 8002db0:	fb02 f303 	mul.w	r3, r2, r3
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fbd5 	bl	8000564 <__aeabi_i2d>
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <stepRev+0xcc>)
 8002dc0:	f7fd fd64 	bl	800088c <__aeabi_ddiv>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	f7fd ff0c 	bl	8000be8 <__aeabi_d2uiz>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	60fb      	str	r3, [r7, #12]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < steps; i++) {
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	e012      	b.n	8002e04 <stepRev+0xac>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 8002dde:	2201      	movs	r2, #1
 8002de0:	2110      	movs	r1, #16
 8002de2:	4811      	ldr	r0, [pc, #68]	; (8002e28 <stepRev+0xd0>)
 8002de4:	f001 fa46 	bl	8004274 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002de8:	68b8      	ldr	r0, [r7, #8]
 8002dea:	f000 fcaf 	bl	800374c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 8002dee:	2200      	movs	r2, #0
 8002df0:	2110      	movs	r1, #16
 8002df2:	480d      	ldr	r0, [pc, #52]	; (8002e28 <stepRev+0xd0>)
 8002df4:	f001 fa3e 	bl	8004274 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002df8:	68b8      	ldr	r0, [r7, #8]
 8002dfa:	f000 fca7 	bl	800374c <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	3301      	adds	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d8e8      	bhi.n	8002dde <stepRev+0x86>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 8002e0c:	e004      	b.n	8002e18 <stepRev+0xc0>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2140      	movs	r1, #64	; 0x40
 8002e12:	4803      	ldr	r0, [pc, #12]	; (8002e20 <stepRev+0xc8>)
 8002e14:	f001 fa2e 	bl	8004274 <HAL_GPIO_WritePin>
}
 8002e18:	bf00      	nop
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40021800 	.word	0x40021800
 8002e24:	40768000 	.word	0x40768000
 8002e28:	40020400 	.word	0x40020400

08002e2c <stepLin>:

void stepLin(int DIST) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D8 PI2 GPIOI GPIO_PIN_2
	// DIR D7 PI3 GPIOI GPIO_PIN_3

	float ANG = DIST * 360.0 / 8; // 1 rev -> 8 mm
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7fd fb95 	bl	8000564 <__aeabi_i2d>
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	4b44      	ldr	r3, [pc, #272]	; (8002f50 <stepLin+0x124>)
 8002e40:	f7fd fbfa 	bl	8000638 <__aeabi_dmul>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	4b40      	ldr	r3, [pc, #256]	; (8002f54 <stepLin+0x128>)
 8002e52:	f7fd fd1b 	bl	800088c <__aeabi_ddiv>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f7fd fee3 	bl	8000c28 <__aeabi_d2f>
 8002e62:	4603      	mov	r3, r0
 8002e64:	61bb      	str	r3, [r7, #24]


  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8002e66:	2201      	movs	r2, #1
 8002e68:	2101      	movs	r1, #1
 8002e6a:	483b      	ldr	r0, [pc, #236]	; (8002f58 <stepLin+0x12c>)
 8002e6c:	f001 fa02 	bl	8004274 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8002e70:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7c:	d05a      	beq.n	8002f34 <stepLin+0x108>
    int direction = (ANG > 0) ? 1 : -1;
 8002e7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8a:	dd01      	ble.n	8002e90 <stepLin+0x64>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e001      	b.n	8002e94 <stepLin+0x68>
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295
 8002e94:	617b      	str	r3, [r7, #20]
    ANG *= direction;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	ee07 3a90 	vmov	s15, r3
 8002e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ea0:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea8:	edc7 7a06 	vstr	s15, [r7, #24]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	bf0c      	ite	eq
 8002eb2:	2301      	moveq	r3, #1
 8002eb4:	2300      	movne	r3, #0
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2108      	movs	r1, #8
 8002ebc:	4826      	ldr	r0, [pc, #152]	; (8002f58 <stepLin+0x12c>)
 8002ebe:	f001 f9d9 	bl	8004274 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4824      	ldr	r0, [pc, #144]	; (8002f58 <stepLin+0x12c>)
 8002ec8:	f001 f9d4 	bl	8004274 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 8002ecc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ed0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002f5c <stepLin+0x130>
 8002ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ed8:	ee17 0a90 	vmov	r0, s15
 8002edc:	f7fd fb54 	bl	8000588 <__aeabi_f2d>
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <stepLin+0x124>)
 8002ee6:	f7fd fcd1 	bl	800088c <__aeabi_ddiv>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4610      	mov	r0, r2
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f7fd fe79 	bl	8000be8 <__aeabi_d2uiz>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	613b      	str	r3, [r7, #16]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 8002efa:	2301      	movs	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	e012      	b.n	8002f2a <stepLin+0xfe>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET); // CLK
 8002f04:	2201      	movs	r2, #1
 8002f06:	2104      	movs	r1, #4
 8002f08:	4813      	ldr	r0, [pc, #76]	; (8002f58 <stepLin+0x12c>)
 8002f0a:	f001 f9b3 	bl	8004274 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fc1c 	bl	800374c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET); // CLK
 8002f14:	2200      	movs	r2, #0
 8002f16:	2104      	movs	r1, #4
 8002f18:	480f      	ldr	r0, [pc, #60]	; (8002f58 <stepLin+0x12c>)
 8002f1a:	f001 f9ab 	bl	8004274 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 fc14 	bl	800374c <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	3301      	adds	r3, #1
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d8e8      	bhi.n	8002f04 <stepLin+0xd8>
 8002f32:	e004      	b.n	8002f3e <stepLin+0x112>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8002f34:	2200      	movs	r2, #0
 8002f36:	2101      	movs	r1, #1
 8002f38:	4807      	ldr	r0, [pc, #28]	; (8002f58 <stepLin+0x12c>)
 8002f3a:	f001 f99b 	bl	8004274 <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8002f3e:	2201      	movs	r2, #1
 8002f40:	2101      	movs	r1, #1
 8002f42:	4805      	ldr	r0, [pc, #20]	; (8002f58 <stepLin+0x12c>)
 8002f44:	f001 f996 	bl	8004274 <HAL_GPIO_WritePin>

}
 8002f48:	bf00      	nop
 8002f4a:	3720      	adds	r7, #32
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40768000 	.word	0x40768000
 8002f54:	40200000 	.word	0x40200000
 8002f58:	40022000 	.word	0x40022000
 8002f5c:	43480000 	.word	0x43480000

08002f60 <servo_angle>:

void servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, int step) {
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]

	// 1 step is 0.8 mm
    if (step > 17)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b11      	cmp	r3, #17
 8002f70:	dd01      	ble.n	8002f76 <servo_angle+0x16>
    	step = 17; // 최대 각도 제한
 8002f72:	2311      	movs	r3, #17
 8002f74:	607b      	str	r3, [r7, #4]

    int pulse_width = 21-step; // 듀티 사이클 계산 (0도에서 180도까지)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f1c3 0315 	rsb	r3, r3, #21
 8002f7c:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d104      	bne.n	8002f8e <servo_angle+0x2e>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002f8c:	e023      	b.n	8002fd6 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d104      	bne.n	8002f9e <servo_angle+0x3e>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002f9c:	e01b      	b.n	8002fd6 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d104      	bne.n	8002fae <servo_angle+0x4e>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002fac:	e013      	b.n	8002fd6 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b0c      	cmp	r3, #12
 8002fb2:	d104      	bne.n	8002fbe <servo_angle+0x5e>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002fbc:	e00b      	b.n	8002fd6 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b10      	cmp	r3, #16
 8002fc2:	d104      	bne.n	8002fce <servo_angle+0x6e>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002fcc:	e003      	b.n	8002fd6 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fea:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <HAL_MspInit+0x44>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <HAL_MspInit+0x44>)
 8002ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <HAL_MspInit+0x44>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	607b      	str	r3, [r7, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003002:	4b09      	ldr	r3, [pc, #36]	; (8003028 <HAL_MspInit+0x44>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	4a08      	ldr	r2, [pc, #32]	; (8003028 <HAL_MspInit+0x44>)
 8003008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800300c:	6453      	str	r3, [r2, #68]	; 0x44
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_MspInit+0x44>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800

0800302c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003030:	e7fe      	b.n	8003030 <NMI_Handler+0x4>

08003032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003036:	e7fe      	b.n	8003036 <HardFault_Handler+0x4>

08003038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800303c:	e7fe      	b.n	800303c <MemManage_Handler+0x4>

0800303e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003042:	e7fe      	b.n	8003042 <BusFault_Handler+0x4>

08003044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003048:	e7fe      	b.n	8003048 <UsageFault_Handler+0x4>

0800304a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003078:	f000 fb48 	bl	800370c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800307c:	bf00      	nop
 800307e:	bd80      	pop	{r7, pc}

08003080 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003084:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003088:	f001 f920 	bl	80042cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800308c:	bf00      	nop
 800308e:	bd80      	pop	{r7, pc}

08003090 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003094:	4802      	ldr	r0, [pc, #8]	; (80030a0 <TIM2_IRQHandler+0x10>)
 8003096:	f004 ff95 	bl	8007fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000604 	.word	0x20000604

080030a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80030a8:	4802      	ldr	r0, [pc, #8]	; (80030b4 <I2C1_EV_IRQHandler+0x10>)
 80030aa:	f001 fc33 	bl	8004914 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	200004b8 	.word	0x200004b8

080030b8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <I2C1_ER_IRQHandler+0x10>)
 80030be:	f001 fc43 	bl	8004948 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	200004b8 	.word	0x200004b8

080030cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <USART1_IRQHandler+0x10>)
 80030d2:	f006 fe2d 	bl	8009d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	2000069c 	.word	0x2000069c

080030e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80030e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80030e8:	f001 f8f0 	bl	80042cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030ec:	bf00      	nop
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80030f4:	4802      	ldr	r0, [pc, #8]	; (8003100 <TIM7_IRQHandler+0x10>)
 80030f6:	f004 ff65 	bl	8007fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000650 	.word	0x20000650

08003104 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return 1;
 8003108:	2301      	movs	r3, #1
}
 800310a:	4618      	mov	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <_kill>:

int _kill(int pid, int sig)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800311e:	f00d f943 	bl	80103a8 <__errno>
 8003122:	4603      	mov	r3, r0
 8003124:	2216      	movs	r2, #22
 8003126:	601a      	str	r2, [r3, #0]
  return -1;
 8003128:	f04f 33ff 	mov.w	r3, #4294967295
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <_exit>:

void _exit (int status)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800313c:	f04f 31ff 	mov.w	r1, #4294967295
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ffe7 	bl	8003114 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003146:	e7fe      	b.n	8003146 <_exit+0x12>

08003148 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	e00a      	b.n	8003170 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800315a:	f3af 8000 	nop.w
 800315e:	4601      	mov	r1, r0
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	60ba      	str	r2, [r7, #8]
 8003166:	b2ca      	uxtb	r2, r1
 8003168:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	3301      	adds	r3, #1
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	429a      	cmp	r2, r3
 8003176:	dbf0      	blt.n	800315a <_read+0x12>
  }

  return len;
 8003178:	687b      	ldr	r3, [r7, #4]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b086      	sub	sp, #24
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	e009      	b.n	80031a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	60ba      	str	r2, [r7, #8]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	3301      	adds	r3, #1
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	dbf1      	blt.n	8003194 <_write+0x12>
  }
  return len;
 80031b0:	687b      	ldr	r3, [r7, #4]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <_close>:

int _close(int file)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031e2:	605a      	str	r2, [r3, #4]
  return 0;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <_isatty>:

int _isatty(int file)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031fa:	2301      	movs	r3, #1
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800322c:	4a14      	ldr	r2, [pc, #80]	; (8003280 <_sbrk+0x5c>)
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <_sbrk+0x60>)
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003238:	4b13      	ldr	r3, [pc, #76]	; (8003288 <_sbrk+0x64>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d102      	bne.n	8003246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003240:	4b11      	ldr	r3, [pc, #68]	; (8003288 <_sbrk+0x64>)
 8003242:	4a12      	ldr	r2, [pc, #72]	; (800328c <_sbrk+0x68>)
 8003244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <_sbrk+0x64>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	429a      	cmp	r2, r3
 8003252:	d207      	bcs.n	8003264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003254:	f00d f8a8 	bl	80103a8 <__errno>
 8003258:	4603      	mov	r3, r0
 800325a:	220c      	movs	r2, #12
 800325c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800325e:	f04f 33ff 	mov.w	r3, #4294967295
 8003262:	e009      	b.n	8003278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003264:	4b08      	ldr	r3, [pc, #32]	; (8003288 <_sbrk+0x64>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800326a:	4b07      	ldr	r3, [pc, #28]	; (8003288 <_sbrk+0x64>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	4a05      	ldr	r2, [pc, #20]	; (8003288 <_sbrk+0x64>)
 8003274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003276:	68fb      	ldr	r3, [r7, #12]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20050000 	.word	0x20050000
 8003284:	00000400 	.word	0x00000400
 8003288:	20000600 	.word	0x20000600
 800328c:	20000778 	.word	0x20000778

08003290 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <SystemInit+0x20>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	4a05      	ldr	r2, [pc, #20]	; (80032b0 <SystemInit+0x20>)
 800329c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08e      	sub	sp, #56	; 0x38
 80032b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032c8:	f107 031c 	add.w	r3, r7, #28
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032d4:	463b      	mov	r3, r7
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	605a      	str	r2, [r3, #4]
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	60da      	str	r2, [r3, #12]
 80032e0:	611a      	str	r2, [r3, #16]
 80032e2:	615a      	str	r2, [r3, #20]
 80032e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032e6:	4b2d      	ldr	r3, [pc, #180]	; (800339c <MX_TIM2_Init+0xe8>)
 80032e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 80032ee:	4b2b      	ldr	r3, [pc, #172]	; (800339c <MX_TIM2_Init+0xe8>)
 80032f0:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80032f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f6:	4b29      	ldr	r3, [pc, #164]	; (800339c <MX_TIM2_Init+0xe8>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 80032fc:	4b27      	ldr	r3, [pc, #156]	; (800339c <MX_TIM2_Init+0xe8>)
 80032fe:	2231      	movs	r2, #49	; 0x31
 8003300:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003302:	4b26      	ldr	r3, [pc, #152]	; (800339c <MX_TIM2_Init+0xe8>)
 8003304:	2200      	movs	r2, #0
 8003306:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003308:	4b24      	ldr	r3, [pc, #144]	; (800339c <MX_TIM2_Init+0xe8>)
 800330a:	2200      	movs	r2, #0
 800330c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800330e:	4823      	ldr	r0, [pc, #140]	; (800339c <MX_TIM2_Init+0xe8>)
 8003310:	f004 fa44 	bl	800779c <HAL_TIM_Base_Init>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800331a:	f7ff fd0d 	bl	8002d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800331e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003324:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003328:	4619      	mov	r1, r3
 800332a:	481c      	ldr	r0, [pc, #112]	; (800339c <MX_TIM2_Init+0xe8>)
 800332c:	f005 f9d2 	bl	80086d4 <HAL_TIM_ConfigClockSource>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003336:	f7ff fcff 	bl	8002d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800333a:	4818      	ldr	r0, [pc, #96]	; (800339c <MX_TIM2_Init+0xe8>)
 800333c:	f004 fb4e 	bl	80079dc <HAL_TIM_PWM_Init>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003346:	f7ff fcf7 	bl	8002d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800334e:	2300      	movs	r3, #0
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003352:	f107 031c 	add.w	r3, r7, #28
 8003356:	4619      	mov	r1, r3
 8003358:	4810      	ldr	r0, [pc, #64]	; (800339c <MX_TIM2_Init+0xe8>)
 800335a:	f006 f9eb 	bl	8009734 <HAL_TIMEx_MasterConfigSynchronization>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003364:	f7ff fce8 	bl	8002d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003368:	2360      	movs	r3, #96	; 0x60
 800336a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003370:	2300      	movs	r3, #0
 8003372:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003374:	2300      	movs	r3, #0
 8003376:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003378:	463b      	mov	r3, r7
 800337a:	2200      	movs	r2, #0
 800337c:	4619      	mov	r1, r3
 800337e:	4807      	ldr	r0, [pc, #28]	; (800339c <MX_TIM2_Init+0xe8>)
 8003380:	f004 ff40 	bl	8008204 <HAL_TIM_PWM_ConfigChannel>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800338a:	f7ff fcd5 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800338e:	4803      	ldr	r0, [pc, #12]	; (800339c <MX_TIM2_Init+0xe8>)
 8003390:	f000 f86e 	bl	8003470 <HAL_TIM_MspPostInit>

}
 8003394:	bf00      	nop
 8003396:	3738      	adds	r7, #56	; 0x38
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000604 	.word	0x20000604

080033a0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80033b0:	4b14      	ldr	r3, [pc, #80]	; (8003404 <MX_TIM7_Init+0x64>)
 80033b2:	4a15      	ldr	r2, [pc, #84]	; (8003408 <MX_TIM7_Init+0x68>)
 80033b4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 80033b6:	4b13      	ldr	r3, [pc, #76]	; (8003404 <MX_TIM7_Init+0x64>)
 80033b8:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80033bc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033be:	4b11      	ldr	r3, [pc, #68]	; (8003404 <MX_TIM7_Init+0x64>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50-1;
 80033c4:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <MX_TIM7_Init+0x64>)
 80033c6:	2231      	movs	r2, #49	; 0x31
 80033c8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ca:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <MX_TIM7_Init+0x64>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80033d0:	480c      	ldr	r0, [pc, #48]	; (8003404 <MX_TIM7_Init+0x64>)
 80033d2:	f004 f9e3 	bl	800779c <HAL_TIM_Base_Init>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80033dc:	f7ff fcac 	bl	8002d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033e0:	2300      	movs	r3, #0
 80033e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80033e8:	1d3b      	adds	r3, r7, #4
 80033ea:	4619      	mov	r1, r3
 80033ec:	4805      	ldr	r0, [pc, #20]	; (8003404 <MX_TIM7_Init+0x64>)
 80033ee:	f006 f9a1 	bl	8009734 <HAL_TIMEx_MasterConfigSynchronization>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80033f8:	f7ff fc9e 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80033fc:	bf00      	nop
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20000650 	.word	0x20000650
 8003408:	40001400 	.word	0x40001400

0800340c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341c:	d10c      	bne.n	8003438 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800341e:	4b12      	ldr	r3, [pc, #72]	; (8003468 <HAL_TIM_Base_MspInit+0x5c>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	4a11      	ldr	r2, [pc, #68]	; (8003468 <HAL_TIM_Base_MspInit+0x5c>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	6413      	str	r3, [r2, #64]	; 0x40
 800342a:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <HAL_TIM_Base_MspInit+0x5c>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003436:	e010      	b.n	800345a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0b      	ldr	r2, [pc, #44]	; (800346c <HAL_TIM_Base_MspInit+0x60>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d10b      	bne.n	800345a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <HAL_TIM_Base_MspInit+0x5c>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	4a08      	ldr	r2, [pc, #32]	; (8003468 <HAL_TIM_Base_MspInit+0x5c>)
 8003448:	f043 0320 	orr.w	r3, r3, #32
 800344c:	6413      	str	r3, [r2, #64]	; 0x40
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <HAL_TIM_Base_MspInit+0x5c>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40023800 	.word	0x40023800
 800346c:	40001400 	.word	0x40001400

08003470 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 030c 	add.w	r3, r7, #12
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003490:	d11c      	bne.n	80034cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003492:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <HAL_TIM_MspPostInit+0x64>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a0f      	ldr	r2, [pc, #60]	; (80034d4 <HAL_TIM_MspPostInit+0x64>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <HAL_TIM_MspPostInit+0x64>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	60bb      	str	r3, [r7, #8]
 80034a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80034aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034bc:	2301      	movs	r3, #1
 80034be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	4619      	mov	r1, r3
 80034c6:	4804      	ldr	r0, [pc, #16]	; (80034d8 <HAL_TIM_MspPostInit+0x68>)
 80034c8:	f000 fb44 	bl	8003b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80034cc:	bf00      	nop
 80034ce:	3720      	adds	r7, #32
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40023800 	.word	0x40023800
 80034d8:	40020000 	.word	0x40020000

080034dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80034e0:	4b14      	ldr	r3, [pc, #80]	; (8003534 <MX_USART1_UART_Init+0x58>)
 80034e2:	4a15      	ldr	r2, [pc, #84]	; (8003538 <MX_USART1_UART_Init+0x5c>)
 80034e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80034e6:	4b13      	ldr	r3, [pc, #76]	; (8003534 <MX_USART1_UART_Init+0x58>)
 80034e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034ee:	4b11      	ldr	r3, [pc, #68]	; (8003534 <MX_USART1_UART_Init+0x58>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034f4:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <MX_USART1_UART_Init+0x58>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034fa:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <MX_USART1_UART_Init+0x58>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <MX_USART1_UART_Init+0x58>)
 8003502:	220c      	movs	r2, #12
 8003504:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003506:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <MX_USART1_UART_Init+0x58>)
 8003508:	2200      	movs	r2, #0
 800350a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <MX_USART1_UART_Init+0x58>)
 800350e:	2200      	movs	r2, #0
 8003510:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003512:	4b08      	ldr	r3, [pc, #32]	; (8003534 <MX_USART1_UART_Init+0x58>)
 8003514:	2200      	movs	r2, #0
 8003516:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <MX_USART1_UART_Init+0x58>)
 800351a:	2200      	movs	r2, #0
 800351c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800351e:	4805      	ldr	r0, [pc, #20]	; (8003534 <MX_USART1_UART_Init+0x58>)
 8003520:	f006 fa7e 	bl	8009a20 <HAL_UART_Init>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800352a:	f7ff fc05 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	2000069c 	.word	0x2000069c
 8003538:	40011000 	.word	0x40011000

0800353c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b0ac      	sub	sp, #176	; 0xb0
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003544:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003554:	f107 0318 	add.w	r3, r7, #24
 8003558:	2284      	movs	r2, #132	; 0x84
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f00c ff5b 	bl	8010418 <memset>
  if(uartHandle->Instance==USART1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a32      	ldr	r2, [pc, #200]	; (8003630 <HAL_UART_MspInit+0xf4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d15c      	bne.n	8003626 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800356c:	2340      	movs	r3, #64	; 0x40
 800356e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003570:	2300      	movs	r3, #0
 8003572:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003574:	f107 0318 	add.w	r3, r7, #24
 8003578:	4618      	mov	r0, r3
 800357a:	f003 f92b 	bl	80067d4 <HAL_RCCEx_PeriphCLKConfig>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003584:	f7ff fbd8 	bl	8002d38 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003588:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <HAL_UART_MspInit+0xf8>)
 800358a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358c:	4a29      	ldr	r2, [pc, #164]	; (8003634 <HAL_UART_MspInit+0xf8>)
 800358e:	f043 0310 	orr.w	r3, r3, #16
 8003592:	6453      	str	r3, [r2, #68]	; 0x44
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <HAL_UART_MspInit+0xf8>)
 8003596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a0:	4b24      	ldr	r3, [pc, #144]	; (8003634 <HAL_UART_MspInit+0xf8>)
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	4a23      	ldr	r2, [pc, #140]	; (8003634 <HAL_UART_MspInit+0xf8>)
 80035a6:	f043 0302 	orr.w	r3, r3, #2
 80035aa:	6313      	str	r3, [r2, #48]	; 0x30
 80035ac:	4b21      	ldr	r3, [pc, #132]	; (8003634 <HAL_UART_MspInit+0xf8>)
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b8:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <HAL_UART_MspInit+0xf8>)
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <HAL_UART_MspInit+0xf8>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6313      	str	r3, [r2, #48]	; 0x30
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_UART_MspInit+0xf8>)
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	2302      	movs	r3, #2
 80035d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e2:	2303      	movs	r3, #3
 80035e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035e8:	2307      	movs	r3, #7
 80035ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80035f2:	4619      	mov	r1, r3
 80035f4:	4810      	ldr	r0, [pc, #64]	; (8003638 <HAL_UART_MspInit+0xfc>)
 80035f6:	f000 faad 	bl	8003b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80035fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003602:	2302      	movs	r3, #2
 8003604:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360e:	2303      	movs	r3, #3
 8003610:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003614:	2307      	movs	r3, #7
 8003616:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800361e:	4619      	mov	r1, r3
 8003620:	4806      	ldr	r0, [pc, #24]	; (800363c <HAL_UART_MspInit+0x100>)
 8003622:	f000 fa97 	bl	8003b54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003626:	bf00      	nop
 8003628:	37b0      	adds	r7, #176	; 0xb0
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40011000 	.word	0x40011000
 8003634:	40023800 	.word	0x40023800
 8003638:	40020400 	.word	0x40020400
 800363c:	40020000 	.word	0x40020000

08003640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 8003640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003678 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003644:	480d      	ldr	r0, [pc, #52]	; (800367c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003646:	490e      	ldr	r1, [pc, #56]	; (8003680 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003648:	4a0e      	ldr	r2, [pc, #56]	; (8003684 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800364a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800364c:	e002      	b.n	8003654 <LoopCopyDataInit>

0800364e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800364e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003652:	3304      	adds	r3, #4

08003654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003658:	d3f9      	bcc.n	800364e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800365a:	4a0b      	ldr	r2, [pc, #44]	; (8003688 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800365c:	4c0b      	ldr	r4, [pc, #44]	; (800368c <LoopFillZerobss+0x26>)
  movs r3, #0
 800365e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003660:	e001      	b.n	8003666 <LoopFillZerobss>

08003662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003664:	3204      	adds	r2, #4

08003666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003668:	d3fb      	bcc.n	8003662 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800366a:	f7ff fe11 	bl	8003290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800366e:	f00c fea1 	bl	80103b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003672:	f7fd ff51 	bl	8001518 <main>
  bx  lr    
 8003676:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8003678:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800367c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003680:	2000049c 	.word	0x2000049c
  ldr r2, =_sidata
 8003684:	08015fac 	.word	0x08015fac
  ldr r2, =_sbss
 8003688:	2000049c 	.word	0x2000049c
  ldr r4, =_ebss
 800368c:	20000778 	.word	0x20000778

08003690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003690:	e7fe      	b.n	8003690 <ADC_IRQHandler>

08003692 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003696:	2003      	movs	r0, #3
 8003698:	f000 f94c 	bl	8003934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800369c:	200f      	movs	r0, #15
 800369e:	f000 f805 	bl	80036ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036a2:	f7ff fc9f 	bl	8002fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036b4:	4b12      	ldr	r3, [pc, #72]	; (8003700 <HAL_InitTick+0x54>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4b12      	ldr	r3, [pc, #72]	; (8003704 <HAL_InitTick+0x58>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	4619      	mov	r1, r3
 80036be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80036c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f996 	bl	80039fc <HAL_SYSTICK_Config>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e00e      	b.n	80036f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b0f      	cmp	r3, #15
 80036de:	d80a      	bhi.n	80036f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036e0:	2200      	movs	r2, #0
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	f04f 30ff 	mov.w	r0, #4294967295
 80036e8:	f000 f944 	bl	8003974 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036ec:	4a06      	ldr	r2, [pc, #24]	; (8003708 <HAL_InitTick+0x5c>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e000      	b.n	80036f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20000000 	.word	0x20000000
 8003704:	20000008 	.word	0x20000008
 8003708:	20000004 	.word	0x20000004

0800370c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_IncTick+0x20>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_IncTick+0x24>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4413      	add	r3, r2
 800371c:	4a04      	ldr	r2, [pc, #16]	; (8003730 <HAL_IncTick+0x24>)
 800371e:	6013      	str	r3, [r2, #0]
}
 8003720:	bf00      	nop
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20000008 	.word	0x20000008
 8003730:	20000724 	.word	0x20000724

08003734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return uwTick;
 8003738:	4b03      	ldr	r3, [pc, #12]	; (8003748 <HAL_GetTick+0x14>)
 800373a:	681b      	ldr	r3, [r3, #0]
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20000724 	.word	0x20000724

0800374c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003754:	f7ff ffee 	bl	8003734 <HAL_GetTick>
 8003758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d005      	beq.n	8003772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003766:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <HAL_Delay+0x44>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4413      	add	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003772:	bf00      	nop
 8003774:	f7ff ffde 	bl	8003734 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	429a      	cmp	r2, r3
 8003782:	d8f7      	bhi.n	8003774 <HAL_Delay+0x28>
  {
  }
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000008 	.word	0x20000008

08003794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <__NVIC_SetPriorityGrouping+0x40>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037b0:	4013      	ands	r3, r2
 80037b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037bc:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <__NVIC_SetPriorityGrouping+0x44>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037c2:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <__NVIC_SetPriorityGrouping+0x40>)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	60d3      	str	r3, [r2, #12]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000ed00 	.word	0xe000ed00
 80037d8:	05fa0000 	.word	0x05fa0000

080037dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e0:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <__NVIC_GetPriorityGrouping+0x18>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	0a1b      	lsrs	r3, r3, #8
 80037e6:	f003 0307 	and.w	r3, r3, #7
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	2b00      	cmp	r3, #0
 8003808:	db0b      	blt.n	8003822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	f003 021f 	and.w	r2, r3, #31
 8003810:	4907      	ldr	r1, [pc, #28]	; (8003830 <__NVIC_EnableIRQ+0x38>)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	2001      	movs	r0, #1
 800381a:	fa00 f202 	lsl.w	r2, r0, r2
 800381e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	e000e100 	.word	0xe000e100

08003834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	6039      	str	r1, [r7, #0]
 800383e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003844:	2b00      	cmp	r3, #0
 8003846:	db0a      	blt.n	800385e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	b2da      	uxtb	r2, r3
 800384c:	490c      	ldr	r1, [pc, #48]	; (8003880 <__NVIC_SetPriority+0x4c>)
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	0112      	lsls	r2, r2, #4
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	440b      	add	r3, r1
 8003858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800385c:	e00a      	b.n	8003874 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	b2da      	uxtb	r2, r3
 8003862:	4908      	ldr	r1, [pc, #32]	; (8003884 <__NVIC_SetPriority+0x50>)
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	3b04      	subs	r3, #4
 800386c:	0112      	lsls	r2, r2, #4
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	440b      	add	r3, r1
 8003872:	761a      	strb	r2, [r3, #24]
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000e100 	.word	0xe000e100
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003888:	b480      	push	{r7}
 800388a:	b089      	sub	sp, #36	; 0x24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f1c3 0307 	rsb	r3, r3, #7
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	bf28      	it	cs
 80038a6:	2304      	movcs	r3, #4
 80038a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3304      	adds	r3, #4
 80038ae:	2b06      	cmp	r3, #6
 80038b0:	d902      	bls.n	80038b8 <NVIC_EncodePriority+0x30>
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3b03      	subs	r3, #3
 80038b6:	e000      	b.n	80038ba <NVIC_EncodePriority+0x32>
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038bc:	f04f 32ff 	mov.w	r2, #4294967295
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43da      	mvns	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	401a      	ands	r2, r3
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d0:	f04f 31ff 	mov.w	r1, #4294967295
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	fa01 f303 	lsl.w	r3, r1, r3
 80038da:	43d9      	mvns	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e0:	4313      	orrs	r3, r2
         );
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3724      	adds	r7, #36	; 0x24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003900:	d301      	bcc.n	8003906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003902:	2301      	movs	r3, #1
 8003904:	e00f      	b.n	8003926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003906:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <SysTick_Config+0x40>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800390e:	210f      	movs	r1, #15
 8003910:	f04f 30ff 	mov.w	r0, #4294967295
 8003914:	f7ff ff8e 	bl	8003834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <SysTick_Config+0x40>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800391e:	4b04      	ldr	r3, [pc, #16]	; (8003930 <SysTick_Config+0x40>)
 8003920:	2207      	movs	r2, #7
 8003922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	e000e010 	.word	0xe000e010

08003934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b07      	cmp	r3, #7
 8003940:	d00f      	beq.n	8003962 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b06      	cmp	r3, #6
 8003946:	d00c      	beq.n	8003962 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b05      	cmp	r3, #5
 800394c:	d009      	beq.n	8003962 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b04      	cmp	r3, #4
 8003952:	d006      	beq.n	8003962 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b03      	cmp	r3, #3
 8003958:	d003      	beq.n	8003962 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800395a:	2191      	movs	r1, #145	; 0x91
 800395c:	4804      	ldr	r0, [pc, #16]	; (8003970 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800395e:	f7ff f9f0 	bl	8002d42 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff ff16 	bl	8003794 <__NVIC_SetPriorityGrouping>
}
 8003968:	bf00      	nop
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	080158ac 	.word	0x080158ac

08003974 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b0f      	cmp	r3, #15
 800398a:	d903      	bls.n	8003994 <HAL_NVIC_SetPriority+0x20>
 800398c:	21a9      	movs	r1, #169	; 0xa9
 800398e:	480e      	ldr	r0, [pc, #56]	; (80039c8 <HAL_NVIC_SetPriority+0x54>)
 8003990:	f7ff f9d7 	bl	8002d42 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b0f      	cmp	r3, #15
 8003998:	d903      	bls.n	80039a2 <HAL_NVIC_SetPriority+0x2e>
 800399a:	21aa      	movs	r1, #170	; 0xaa
 800399c:	480a      	ldr	r0, [pc, #40]	; (80039c8 <HAL_NVIC_SetPriority+0x54>)
 800399e:	f7ff f9d0 	bl	8002d42 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039a2:	f7ff ff1b 	bl	80037dc <__NVIC_GetPriorityGrouping>
 80039a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	6978      	ldr	r0, [r7, #20]
 80039ae:	f7ff ff6b 	bl	8003888 <NVIC_EncodePriority>
 80039b2:	4602      	mov	r2, r0
 80039b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff ff3a 	bl	8003834 <__NVIC_SetPriority>
}
 80039c0:	bf00      	nop
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	080158ac 	.word	0x080158ac

080039cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80039d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	da03      	bge.n	80039e6 <HAL_NVIC_EnableIRQ+0x1a>
 80039de:	21bd      	movs	r1, #189	; 0xbd
 80039e0:	4805      	ldr	r0, [pc, #20]	; (80039f8 <HAL_NVIC_EnableIRQ+0x2c>)
 80039e2:	f7ff f9ae 	bl	8002d42 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff ff04 	bl	80037f8 <__NVIC_EnableIRQ>
}
 80039f0:	bf00      	nop
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	080158ac 	.word	0x080158ac

080039fc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff ff73 	bl	80038f0 <SysTick_Config>
 8003a0a:	4603      	mov	r3, r0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a22:	f7ff fe87 	bl	8003734 <HAL_GetTick>
 8003a26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d008      	beq.n	8003a46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2280      	movs	r2, #128	; 0x80
 8003a38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e052      	b.n	8003aec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0216 	bic.w	r2, r2, #22
 8003a54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <HAL_DMA_Abort+0x62>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d007      	beq.n	8003a86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0208 	bic.w	r2, r2, #8
 8003a84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0201 	bic.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a96:	e013      	b.n	8003ac0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a98:	f7ff fe4c 	bl	8003734 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b05      	cmp	r3, #5
 8003aa4:	d90c      	bls.n	8003ac0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2203      	movs	r2, #3
 8003ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e015      	b.n	8003aec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e4      	bne.n	8003a98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad2:	223f      	movs	r2, #63	; 0x3f
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d004      	beq.n	8003b12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2280      	movs	r2, #128	; 0x80
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e00c      	b.n	8003b2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2205      	movs	r2, #5
 8003b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b46:	b2db      	uxtb	r3, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a3a      	ldr	r2, [pc, #232]	; (8003c5c <HAL_GPIO_Init+0x108>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d02b      	beq.n	8003bce <HAL_GPIO_Init+0x7a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a39      	ldr	r2, [pc, #228]	; (8003c60 <HAL_GPIO_Init+0x10c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d027      	beq.n	8003bce <HAL_GPIO_Init+0x7a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a38      	ldr	r2, [pc, #224]	; (8003c64 <HAL_GPIO_Init+0x110>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d023      	beq.n	8003bce <HAL_GPIO_Init+0x7a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a37      	ldr	r2, [pc, #220]	; (8003c68 <HAL_GPIO_Init+0x114>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01f      	beq.n	8003bce <HAL_GPIO_Init+0x7a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a36      	ldr	r2, [pc, #216]	; (8003c6c <HAL_GPIO_Init+0x118>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d01b      	beq.n	8003bce <HAL_GPIO_Init+0x7a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a35      	ldr	r2, [pc, #212]	; (8003c70 <HAL_GPIO_Init+0x11c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d017      	beq.n	8003bce <HAL_GPIO_Init+0x7a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a34      	ldr	r2, [pc, #208]	; (8003c74 <HAL_GPIO_Init+0x120>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d013      	beq.n	8003bce <HAL_GPIO_Init+0x7a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a33      	ldr	r2, [pc, #204]	; (8003c78 <HAL_GPIO_Init+0x124>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00f      	beq.n	8003bce <HAL_GPIO_Init+0x7a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a32      	ldr	r2, [pc, #200]	; (8003c7c <HAL_GPIO_Init+0x128>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00b      	beq.n	8003bce <HAL_GPIO_Init+0x7a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a31      	ldr	r2, [pc, #196]	; (8003c80 <HAL_GPIO_Init+0x12c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d007      	beq.n	8003bce <HAL_GPIO_Init+0x7a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a30      	ldr	r2, [pc, #192]	; (8003c84 <HAL_GPIO_Init+0x130>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d003      	beq.n	8003bce <HAL_GPIO_Init+0x7a>
 8003bc6:	21aa      	movs	r1, #170	; 0xaa
 8003bc8:	482f      	ldr	r0, [pc, #188]	; (8003c88 <HAL_GPIO_Init+0x134>)
 8003bca:	f7ff f8ba 	bl	8002d42 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d103      	bne.n	8003be0 <HAL_GPIO_Init+0x8c>
 8003bd8:	21ab      	movs	r1, #171	; 0xab
 8003bda:	482b      	ldr	r0, [pc, #172]	; (8003c88 <HAL_GPIO_Init+0x134>)
 8003bdc:	f7ff f8b1 	bl	8002d42 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d035      	beq.n	8003c54 <HAL_GPIO_Init+0x100>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d031      	beq.n	8003c54 <HAL_GPIO_Init+0x100>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b11      	cmp	r3, #17
 8003bf6:	d02d      	beq.n	8003c54 <HAL_GPIO_Init+0x100>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d029      	beq.n	8003c54 <HAL_GPIO_Init+0x100>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b12      	cmp	r3, #18
 8003c06:	d025      	beq.n	8003c54 <HAL_GPIO_Init+0x100>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003c10:	d020      	beq.n	8003c54 <HAL_GPIO_Init+0x100>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003c1a:	d01b      	beq.n	8003c54 <HAL_GPIO_Init+0x100>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003c24:	d016      	beq.n	8003c54 <HAL_GPIO_Init+0x100>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003c2e:	d011      	beq.n	8003c54 <HAL_GPIO_Init+0x100>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8003c38:	d00c      	beq.n	8003c54 <HAL_GPIO_Init+0x100>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003c42:	d007      	beq.n	8003c54 <HAL_GPIO_Init+0x100>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d003      	beq.n	8003c54 <HAL_GPIO_Init+0x100>
 8003c4c:	21ac      	movs	r1, #172	; 0xac
 8003c4e:	480e      	ldr	r0, [pc, #56]	; (8003c88 <HAL_GPIO_Init+0x134>)
 8003c50:	f7ff f877 	bl	8002d42 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c54:	2300      	movs	r3, #0
 8003c56:	61fb      	str	r3, [r7, #28]
 8003c58:	e2c7      	b.n	80041ea <HAL_GPIO_Init+0x696>
 8003c5a:	bf00      	nop
 8003c5c:	40020000 	.word	0x40020000
 8003c60:	40020400 	.word	0x40020400
 8003c64:	40020800 	.word	0x40020800
 8003c68:	40020c00 	.word	0x40020c00
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40021400 	.word	0x40021400
 8003c74:	40021800 	.word	0x40021800
 8003c78:	40021c00 	.word	0x40021c00
 8003c7c:	40022000 	.word	0x40022000
 8003c80:	40022400 	.word	0x40022400
 8003c84:	40022800 	.word	0x40022800
 8003c88:	080158e8 	.word	0x080158e8
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	f040 829d 	bne.w	80041e4 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d005      	beq.n	8003cc2 <HAL_GPIO_Init+0x16e>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d144      	bne.n	8003d4c <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00f      	beq.n	8003cea <HAL_GPIO_Init+0x196>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d00b      	beq.n	8003cea <HAL_GPIO_Init+0x196>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d007      	beq.n	8003cea <HAL_GPIO_Init+0x196>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_Init+0x196>
 8003ce2:	21bd      	movs	r1, #189	; 0xbd
 8003ce4:	4831      	ldr	r0, [pc, #196]	; (8003dac <HAL_GPIO_Init+0x258>)
 8003ce6:	f7ff f82c 	bl	8002d42 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d20:	2201      	movs	r2, #1
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	f003 0201 	and.w	r2, r3, #1
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d02b      	beq.n	8003db0 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00b      	beq.n	8003d78 <HAL_GPIO_Init+0x224>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d007      	beq.n	8003d78 <HAL_GPIO_Init+0x224>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d003      	beq.n	8003d78 <HAL_GPIO_Init+0x224>
 8003d70:	21ce      	movs	r1, #206	; 0xce
 8003d72:	480e      	ldr	r0, [pc, #56]	; (8003dac <HAL_GPIO_Init+0x258>)
 8003d74:	f7fe ffe5 	bl	8002d42 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	2203      	movs	r2, #3
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	60da      	str	r2, [r3, #12]
 8003da8:	e002      	b.n	8003db0 <HAL_GPIO_Init+0x25c>
 8003daa:	bf00      	nop
 8003dac:	080158e8 	.word	0x080158e8
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	f040 8134 	bne.w	8004026 <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 810b 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	f000 8106 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8101 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80fc 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80f7 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	f000 80f2 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	f000 80ed 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	f000 80e8 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	f000 80e3 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	f000 80de 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	f000 80d9 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	f000 80d4 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	f000 80cf 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	f000 80ca 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	f000 80c5 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	f000 80c0 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	f000 80bb 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	f000 80b6 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	f000 80b1 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	f000 80ac 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b05      	cmp	r3, #5
 8003e8c:	f000 80a7 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	2b05      	cmp	r3, #5
 8003e96:	f000 80a2 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	f000 809d 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	2b05      	cmp	r3, #5
 8003eaa:	f000 8098 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	f000 8093 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b05      	cmp	r3, #5
 8003ebe:	f000 808e 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b06      	cmp	r3, #6
 8003ec8:	f000 8089 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	2b06      	cmp	r3, #6
 8003ed2:	f000 8084 	beq.w	8003fde <HAL_GPIO_Init+0x48a>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b07      	cmp	r3, #7
 8003edc:	d07f      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b07      	cmp	r3, #7
 8003ee4:	d07b      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b07      	cmp	r3, #7
 8003eec:	d077      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b07      	cmp	r3, #7
 8003ef4:	d073      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b07      	cmp	r3, #7
 8003efc:	d06f      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b07      	cmp	r3, #7
 8003f04:	d06b      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b07      	cmp	r3, #7
 8003f0c:	d067      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d063      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d05f      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d05b      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d057      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d053      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d04f      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d04b      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b09      	cmp	r3, #9
 8003f4c:	d047      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b09      	cmp	r3, #9
 8003f54:	d043      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b09      	cmp	r3, #9
 8003f5c:	d03f      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b09      	cmp	r3, #9
 8003f64:	d03b      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b09      	cmp	r3, #9
 8003f6c:	d037      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	2b09      	cmp	r3, #9
 8003f74:	d033      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b09      	cmp	r3, #9
 8003f7c:	d02f      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	2b0a      	cmp	r3, #10
 8003f84:	d02b      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	2b0a      	cmp	r3, #10
 8003f8c:	d027      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b0a      	cmp	r3, #10
 8003f94:	d023      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b0a      	cmp	r3, #10
 8003f9c:	d01f      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b0b      	cmp	r3, #11
 8003fa4:	d01b      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b0c      	cmp	r3, #12
 8003fac:	d017      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b0c      	cmp	r3, #12
 8003fb4:	d013      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b0c      	cmp	r3, #12
 8003fbc:	d00f      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b0f      	cmp	r3, #15
 8003fc4:	d00b      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b0d      	cmp	r3, #13
 8003fcc:	d007      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b0e      	cmp	r3, #14
 8003fd4:	d003      	beq.n	8003fde <HAL_GPIO_Init+0x48a>
 8003fd6:	21db      	movs	r1, #219	; 0xdb
 8003fd8:	4888      	ldr	r0, [pc, #544]	; (80041fc <HAL_GPIO_Init+0x6a8>)
 8003fda:	f7fe feb2 	bl	8002d42 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	08da      	lsrs	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3208      	adds	r2, #8
 8003fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	220f      	movs	r2, #15
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4313      	orrs	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	08da      	lsrs	r2, r3, #3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3208      	adds	r2, #8
 8004020:	69b9      	ldr	r1, [r7, #24]
 8004022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	2203      	movs	r2, #3
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4013      	ands	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f003 0203 	and.w	r2, r3, #3
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 80be 	beq.w	80041e4 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004068:	4b65      	ldr	r3, [pc, #404]	; (8004200 <HAL_GPIO_Init+0x6ac>)
 800406a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406c:	4a64      	ldr	r2, [pc, #400]	; (8004200 <HAL_GPIO_Init+0x6ac>)
 800406e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004072:	6453      	str	r3, [r2, #68]	; 0x44
 8004074:	4b62      	ldr	r3, [pc, #392]	; (8004200 <HAL_GPIO_Init+0x6ac>)
 8004076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004080:	4a60      	ldr	r2, [pc, #384]	; (8004204 <HAL_GPIO_Init+0x6b0>)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	089b      	lsrs	r3, r3, #2
 8004086:	3302      	adds	r3, #2
 8004088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800408c:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	220f      	movs	r2, #15
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	4013      	ands	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a58      	ldr	r2, [pc, #352]	; (8004208 <HAL_GPIO_Init+0x6b4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d037      	beq.n	800411c <HAL_GPIO_Init+0x5c8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a57      	ldr	r2, [pc, #348]	; (800420c <HAL_GPIO_Init+0x6b8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d031      	beq.n	8004118 <HAL_GPIO_Init+0x5c4>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a56      	ldr	r2, [pc, #344]	; (8004210 <HAL_GPIO_Init+0x6bc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d02b      	beq.n	8004114 <HAL_GPIO_Init+0x5c0>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a55      	ldr	r2, [pc, #340]	; (8004214 <HAL_GPIO_Init+0x6c0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d025      	beq.n	8004110 <HAL_GPIO_Init+0x5bc>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a54      	ldr	r2, [pc, #336]	; (8004218 <HAL_GPIO_Init+0x6c4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d01f      	beq.n	800410c <HAL_GPIO_Init+0x5b8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a53      	ldr	r2, [pc, #332]	; (800421c <HAL_GPIO_Init+0x6c8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d019      	beq.n	8004108 <HAL_GPIO_Init+0x5b4>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a52      	ldr	r2, [pc, #328]	; (8004220 <HAL_GPIO_Init+0x6cc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <HAL_GPIO_Init+0x5b0>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a51      	ldr	r2, [pc, #324]	; (8004224 <HAL_GPIO_Init+0x6d0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00d      	beq.n	8004100 <HAL_GPIO_Init+0x5ac>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a50      	ldr	r2, [pc, #320]	; (8004228 <HAL_GPIO_Init+0x6d4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d007      	beq.n	80040fc <HAL_GPIO_Init+0x5a8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a4f      	ldr	r2, [pc, #316]	; (800422c <HAL_GPIO_Init+0x6d8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d101      	bne.n	80040f8 <HAL_GPIO_Init+0x5a4>
 80040f4:	2309      	movs	r3, #9
 80040f6:	e012      	b.n	800411e <HAL_GPIO_Init+0x5ca>
 80040f8:	230a      	movs	r3, #10
 80040fa:	e010      	b.n	800411e <HAL_GPIO_Init+0x5ca>
 80040fc:	2308      	movs	r3, #8
 80040fe:	e00e      	b.n	800411e <HAL_GPIO_Init+0x5ca>
 8004100:	2307      	movs	r3, #7
 8004102:	e00c      	b.n	800411e <HAL_GPIO_Init+0x5ca>
 8004104:	2306      	movs	r3, #6
 8004106:	e00a      	b.n	800411e <HAL_GPIO_Init+0x5ca>
 8004108:	2305      	movs	r3, #5
 800410a:	e008      	b.n	800411e <HAL_GPIO_Init+0x5ca>
 800410c:	2304      	movs	r3, #4
 800410e:	e006      	b.n	800411e <HAL_GPIO_Init+0x5ca>
 8004110:	2303      	movs	r3, #3
 8004112:	e004      	b.n	800411e <HAL_GPIO_Init+0x5ca>
 8004114:	2302      	movs	r3, #2
 8004116:	e002      	b.n	800411e <HAL_GPIO_Init+0x5ca>
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <HAL_GPIO_Init+0x5ca>
 800411c:	2300      	movs	r3, #0
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	f002 0203 	and.w	r2, r2, #3
 8004124:	0092      	lsls	r2, r2, #2
 8004126:	4093      	lsls	r3, r2
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800412e:	4935      	ldr	r1, [pc, #212]	; (8004204 <HAL_GPIO_Init+0x6b0>)
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	3302      	adds	r3, #2
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800413c:	4b3c      	ldr	r3, [pc, #240]	; (8004230 <HAL_GPIO_Init+0x6dc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004160:	4a33      	ldr	r2, [pc, #204]	; (8004230 <HAL_GPIO_Init+0x6dc>)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004166:	4b32      	ldr	r3, [pc, #200]	; (8004230 <HAL_GPIO_Init+0x6dc>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	43db      	mvns	r3, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4013      	ands	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800418a:	4a29      	ldr	r2, [pc, #164]	; (8004230 <HAL_GPIO_Init+0x6dc>)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004190:	4b27      	ldr	r3, [pc, #156]	; (8004230 <HAL_GPIO_Init+0x6dc>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041b4:	4a1e      	ldr	r2, [pc, #120]	; (8004230 <HAL_GPIO_Init+0x6dc>)
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041ba:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <HAL_GPIO_Init+0x6dc>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	43db      	mvns	r3, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4013      	ands	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041de:	4a14      	ldr	r2, [pc, #80]	; (8004230 <HAL_GPIO_Init+0x6dc>)
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	3301      	adds	r3, #1
 80041e8:	61fb      	str	r3, [r7, #28]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	2b0f      	cmp	r3, #15
 80041ee:	f67f ad4d 	bls.w	8003c8c <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 80041f2:	bf00      	nop
 80041f4:	bf00      	nop
 80041f6:	3720      	adds	r7, #32
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	080158e8 	.word	0x080158e8
 8004200:	40023800 	.word	0x40023800
 8004204:	40013800 	.word	0x40013800
 8004208:	40020000 	.word	0x40020000
 800420c:	40020400 	.word	0x40020400
 8004210:	40020800 	.word	0x40020800
 8004214:	40020c00 	.word	0x40020c00
 8004218:	40021000 	.word	0x40021000
 800421c:	40021400 	.word	0x40021400
 8004220:	40021800 	.word	0x40021800
 8004224:	40021c00 	.word	0x40021c00
 8004228:	40022000 	.word	0x40022000
 800422c:	40022400 	.word	0x40022400
 8004230:	40013c00 	.word	0x40013c00

08004234 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004240:	887b      	ldrh	r3, [r7, #2]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d104      	bne.n	8004250 <HAL_GPIO_ReadPin+0x1c>
 8004246:	f240 1177 	movw	r1, #375	; 0x177
 800424a:	4809      	ldr	r0, [pc, #36]	; (8004270 <HAL_GPIO_ReadPin+0x3c>)
 800424c:	f7fe fd79 	bl	8002d42 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	887b      	ldrh	r3, [r7, #2]
 8004256:	4013      	ands	r3, r2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
 8004260:	e001      	b.n	8004266 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004262:	2300      	movs	r3, #0
 8004264:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004266:	7bfb      	ldrb	r3, [r7, #15]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	080158e8 	.word	0x080158e8

08004274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	807b      	strh	r3, [r7, #2]
 8004280:	4613      	mov	r3, r2
 8004282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004284:	887b      	ldrh	r3, [r7, #2]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d104      	bne.n	8004294 <HAL_GPIO_WritePin+0x20>
 800428a:	f240 1197 	movw	r1, #407	; 0x197
 800428e:	480e      	ldr	r0, [pc, #56]	; (80042c8 <HAL_GPIO_WritePin+0x54>)
 8004290:	f7fe fd57 	bl	8002d42 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004294:	787b      	ldrb	r3, [r7, #1]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <HAL_GPIO_WritePin+0x36>
 800429a:	787b      	ldrb	r3, [r7, #1]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d004      	beq.n	80042aa <HAL_GPIO_WritePin+0x36>
 80042a0:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80042a4:	4808      	ldr	r0, [pc, #32]	; (80042c8 <HAL_GPIO_WritePin+0x54>)
 80042a6:	f7fe fd4c 	bl	8002d42 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80042aa:	787b      	ldrb	r3, [r7, #1]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042b0:	887a      	ldrh	r2, [r7, #2]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80042b6:	e003      	b.n	80042c0 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80042b8:	887b      	ldrh	r3, [r7, #2]
 80042ba:	041a      	lsls	r2, r3, #16
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	619a      	str	r2, [r3, #24]
}
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	080158e8 	.word	0x080158e8

080042cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042d6:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	88fb      	ldrh	r3, [r7, #6]
 80042dc:	4013      	ands	r3, r2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d006      	beq.n	80042f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042e2:	4a05      	ldr	r2, [pc, #20]	; (80042f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042e4:	88fb      	ldrh	r3, [r7, #6]
 80042e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042e8:	88fb      	ldrh	r3, [r7, #6]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe fce6 	bl	8002cbc <HAL_GPIO_EXTI_Callback>
  }
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40013c00 	.word	0x40013c00

080042fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e107      	b.n	800451e <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a85      	ldr	r2, [pc, #532]	; (8004528 <HAL_I2C_Init+0x22c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d013      	beq.n	8004340 <HAL_I2C_Init+0x44>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a83      	ldr	r2, [pc, #524]	; (800452c <HAL_I2C_Init+0x230>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00e      	beq.n	8004340 <HAL_I2C_Init+0x44>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a82      	ldr	r2, [pc, #520]	; (8004530 <HAL_I2C_Init+0x234>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d009      	beq.n	8004340 <HAL_I2C_Init+0x44>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a80      	ldr	r2, [pc, #512]	; (8004534 <HAL_I2C_Init+0x238>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d004      	beq.n	8004340 <HAL_I2C_Init+0x44>
 8004336:	f240 2119 	movw	r1, #537	; 0x219
 800433a:	487f      	ldr	r0, [pc, #508]	; (8004538 <HAL_I2C_Init+0x23c>)
 800433c:	f7fe fd01 	bl	8002d42 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004348:	d304      	bcc.n	8004354 <HAL_I2C_Init+0x58>
 800434a:	f240 211a 	movw	r1, #538	; 0x21a
 800434e:	487a      	ldr	r0, [pc, #488]	; (8004538 <HAL_I2C_Init+0x23c>)
 8004350:	f7fe fcf7 	bl	8002d42 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d008      	beq.n	800436e <HAL_I2C_Init+0x72>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	2b02      	cmp	r3, #2
 8004362:	d004      	beq.n	800436e <HAL_I2C_Init+0x72>
 8004364:	f240 211b 	movw	r1, #539	; 0x21b
 8004368:	4873      	ldr	r0, [pc, #460]	; (8004538 <HAL_I2C_Init+0x23c>)
 800436a:	f7fe fcea 	bl	8002d42 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d009      	beq.n	800438a <HAL_I2C_Init+0x8e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437e:	d004      	beq.n	800438a <HAL_I2C_Init+0x8e>
 8004380:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8004384:	486c      	ldr	r0, [pc, #432]	; (8004538 <HAL_I2C_Init+0x23c>)
 8004386:	f7fe fcdc 	bl	8002d42 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	2bff      	cmp	r3, #255	; 0xff
 8004390:	d904      	bls.n	800439c <HAL_I2C_Init+0xa0>
 8004392:	f240 211d 	movw	r1, #541	; 0x21d
 8004396:	4868      	ldr	r0, [pc, #416]	; (8004538 <HAL_I2C_Init+0x23c>)
 8004398:	f7fe fcd3 	bl	8002d42 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d020      	beq.n	80043e6 <HAL_I2C_Init+0xea>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d01c      	beq.n	80043e6 <HAL_I2C_Init+0xea>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d018      	beq.n	80043e6 <HAL_I2C_Init+0xea>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d014      	beq.n	80043e6 <HAL_I2C_Init+0xea>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d010      	beq.n	80043e6 <HAL_I2C_Init+0xea>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	2b05      	cmp	r3, #5
 80043ca:	d00c      	beq.n	80043e6 <HAL_I2C_Init+0xea>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b06      	cmp	r3, #6
 80043d2:	d008      	beq.n	80043e6 <HAL_I2C_Init+0xea>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	2b07      	cmp	r3, #7
 80043da:	d004      	beq.n	80043e6 <HAL_I2C_Init+0xea>
 80043dc:	f240 211e 	movw	r1, #542	; 0x21e
 80043e0:	4855      	ldr	r0, [pc, #340]	; (8004538 <HAL_I2C_Init+0x23c>)
 80043e2:	f7fe fcae 	bl	8002d42 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d009      	beq.n	8004402 <HAL_I2C_Init+0x106>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043f6:	d004      	beq.n	8004402 <HAL_I2C_Init+0x106>
 80043f8:	f240 211f 	movw	r1, #543	; 0x21f
 80043fc:	484e      	ldr	r0, [pc, #312]	; (8004538 <HAL_I2C_Init+0x23c>)
 80043fe:	f7fe fca0 	bl	8002d42 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_I2C_Init+0x122>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004412:	d004      	beq.n	800441e <HAL_I2C_Init+0x122>
 8004414:	f44f 7108 	mov.w	r1, #544	; 0x220
 8004418:	4847      	ldr	r0, [pc, #284]	; (8004538 <HAL_I2C_Init+0x23c>)
 800441a:	f7fe fc92 	bl	8002d42 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc ffa0 	bl	8001378 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2224      	movs	r2, #36	; 0x24
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800445c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800446c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d107      	bne.n	8004486 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	e006      	b.n	8004494 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004492:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d104      	bne.n	80044a6 <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6859      	ldr	r1, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4b22      	ldr	r3, [pc, #136]	; (800453c <HAL_I2C_Init+0x240>)
 80044b2:	430b      	orrs	r3, r1
 80044b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69d9      	ldr	r1, [r3, #28]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1a      	ldr	r2, [r3, #32]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40005400 	.word	0x40005400
 800452c:	40005800 	.word	0x40005800
 8004530:	40005c00 	.word	0x40005c00
 8004534:	40006000 	.word	0x40006000
 8004538:	08015924 	.word	0x08015924
 800453c:	02008000 	.word	0x02008000

08004540 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	607a      	str	r2, [r7, #4]
 800454a:	461a      	mov	r2, r3
 800454c:	460b      	mov	r3, r1
 800454e:	817b      	strh	r3, [r7, #10]
 8004550:	4613      	mov	r3, r2
 8004552:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b20      	cmp	r3, #32
 800455e:	f040 80da 	bne.w	8004716 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_I2C_Master_Transmit+0x30>
 800456c:	2302      	movs	r3, #2
 800456e:	e0d3      	b.n	8004718 <HAL_I2C_Master_Transmit+0x1d8>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004578:	f7ff f8dc 	bl	8003734 <HAL_GetTick>
 800457c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	2319      	movs	r3, #25
 8004584:	2201      	movs	r2, #1
 8004586:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 fefb 	bl	8005386 <I2C_WaitOnFlagUntilTimeout>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e0be      	b.n	8004718 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2221      	movs	r2, #33	; 0x21
 800459e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2210      	movs	r2, #16
 80045a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	893a      	ldrh	r2, [r7, #8]
 80045ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2bff      	cmp	r3, #255	; 0xff
 80045ca:	d90e      	bls.n	80045ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	22ff      	movs	r2, #255	; 0xff
 80045d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	8979      	ldrh	r1, [r7, #10]
 80045da:	4b51      	ldr	r3, [pc, #324]	; (8004720 <HAL_I2C_Master_Transmit+0x1e0>)
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f001 f8e6 	bl	80057b4 <I2C_TransferConfig>
 80045e8:	e06c      	b.n	80046c4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	8979      	ldrh	r1, [r7, #10]
 80045fc:	4b48      	ldr	r3, [pc, #288]	; (8004720 <HAL_I2C_Master_Transmit+0x1e0>)
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f001 f8d5 	bl	80057b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800460a:	e05b      	b.n	80046c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	6a39      	ldr	r1, [r7, #32]
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fef8 	bl	8005406 <I2C_WaitOnTXISFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e07b      	b.n	8004718 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	781a      	ldrb	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d034      	beq.n	80046c4 <HAL_I2C_Master_Transmit+0x184>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465e:	2b00      	cmp	r3, #0
 8004660:	d130      	bne.n	80046c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	2200      	movs	r2, #0
 800466a:	2180      	movs	r1, #128	; 0x80
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 fe8a 	bl	8005386 <I2C_WaitOnFlagUntilTimeout>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e04d      	b.n	8004718 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	2bff      	cmp	r3, #255	; 0xff
 8004684:	d90e      	bls.n	80046a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	22ff      	movs	r2, #255	; 0xff
 800468a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004690:	b2da      	uxtb	r2, r3
 8004692:	8979      	ldrh	r1, [r7, #10]
 8004694:	2300      	movs	r3, #0
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f001 f889 	bl	80057b4 <I2C_TransferConfig>
 80046a2:	e00f      	b.n	80046c4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	8979      	ldrh	r1, [r7, #10]
 80046b6:	2300      	movs	r3, #0
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f001 f878 	bl	80057b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d19e      	bne.n	800460c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	6a39      	ldr	r1, [r7, #32]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 fed7 	bl	8005486 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e01a      	b.n	8004718 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2220      	movs	r2, #32
 80046e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6859      	ldr	r1, [r3, #4]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <HAL_I2C_Master_Transmit+0x1e4>)
 80046f6:	400b      	ands	r3, r1
 80046f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	e000      	b.n	8004718 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004716:	2302      	movs	r3, #2
  }
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	80002000 	.word	0x80002000
 8004724:	fe00e800 	.word	0xfe00e800

08004728 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af02      	add	r7, sp, #8
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	607a      	str	r2, [r7, #4]
 8004732:	461a      	mov	r2, r3
 8004734:	460b      	mov	r3, r1
 8004736:	817b      	strh	r3, [r7, #10]
 8004738:	4613      	mov	r3, r2
 800473a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b20      	cmp	r3, #32
 8004746:	f040 80db 	bne.w	8004900 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_I2C_Master_Receive+0x30>
 8004754:	2302      	movs	r3, #2
 8004756:	e0d4      	b.n	8004902 <HAL_I2C_Master_Receive+0x1da>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004760:	f7fe ffe8 	bl	8003734 <HAL_GetTick>
 8004764:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	2319      	movs	r3, #25
 800476c:	2201      	movs	r2, #1
 800476e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fe07 	bl	8005386 <I2C_WaitOnFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e0bf      	b.n	8004902 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2222      	movs	r2, #34	; 0x22
 8004786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2210      	movs	r2, #16
 800478e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	893a      	ldrh	r2, [r7, #8]
 80047a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2bff      	cmp	r3, #255	; 0xff
 80047b2:	d90e      	bls.n	80047d2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	22ff      	movs	r2, #255	; 0xff
 80047b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	8979      	ldrh	r1, [r7, #10]
 80047c2:	4b52      	ldr	r3, [pc, #328]	; (800490c <HAL_I2C_Master_Receive+0x1e4>)
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fff2 	bl	80057b4 <I2C_TransferConfig>
 80047d0:	e06d      	b.n	80048ae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	8979      	ldrh	r1, [r7, #10]
 80047e4:	4b49      	ldr	r3, [pc, #292]	; (800490c <HAL_I2C_Master_Receive+0x1e4>)
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 ffe1 	bl	80057b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80047f2:	e05c      	b.n	80048ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	6a39      	ldr	r1, [r7, #32]
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fe81 	bl	8005500 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e07c      	b.n	8004902 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d034      	beq.n	80048ae <HAL_I2C_Master_Receive+0x186>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004848:	2b00      	cmp	r3, #0
 800484a:	d130      	bne.n	80048ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	2200      	movs	r2, #0
 8004854:	2180      	movs	r1, #128	; 0x80
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 fd95 	bl	8005386 <I2C_WaitOnFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e04d      	b.n	8004902 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	2bff      	cmp	r3, #255	; 0xff
 800486e:	d90e      	bls.n	800488e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	22ff      	movs	r2, #255	; 0xff
 8004874:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487a:	b2da      	uxtb	r2, r3
 800487c:	8979      	ldrh	r1, [r7, #10]
 800487e:	2300      	movs	r3, #0
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 ff94 	bl	80057b4 <I2C_TransferConfig>
 800488c:	e00f      	b.n	80048ae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489c:	b2da      	uxtb	r2, r3
 800489e:	8979      	ldrh	r1, [r7, #10]
 80048a0:	2300      	movs	r3, #0
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 ff83 	bl	80057b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d19d      	bne.n	80047f4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	6a39      	ldr	r1, [r7, #32]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fde2 	bl	8005486 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e01a      	b.n	8004902 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2220      	movs	r2, #32
 80048d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6859      	ldr	r1, [r3, #4]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <HAL_I2C_Master_Receive+0x1e8>)
 80048e0:	400b      	ands	r3, r1
 80048e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	e000      	b.n	8004902 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004900:	2302      	movs	r3, #2
  }
}
 8004902:	4618      	mov	r0, r3
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	80002400 	.word	0x80002400
 8004910:	fe00e800 	.word	0xfe00e800

08004914 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	68f9      	ldr	r1, [r7, #12]
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	4798      	blx	r3
  }
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	0a1b      	lsrs	r3, r3, #8
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d010      	beq.n	800498e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	09db      	lsrs	r3, r3, #7
 8004970:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497c:	f043 0201 	orr.w	r2, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800498c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	0a9b      	lsrs	r3, r3, #10
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d010      	beq.n	80049bc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	09db      	lsrs	r3, r3, #7
 800499e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049aa:	f043 0208 	orr.w	r2, r3, #8
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049ba:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	0a5b      	lsrs	r3, r3, #9
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d010      	beq.n	80049ea <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	09db      	lsrs	r3, r3, #7
 80049cc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d8:	f043 0202 	orr.w	r2, r3, #2
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 030b 	and.w	r3, r3, #11
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80049fa:	68f9      	ldr	r1, [r7, #12]
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fb89 	bl	8005114 <I2C_ITError>
  }
}
 8004a02:	bf00      	nop
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	70fb      	strb	r3, [r7, #3]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <I2C_Slave_ISR_IT+0x24>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e0ec      	b.n	8004c88 <I2C_Slave_ISR_IT+0x1fe>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	095b      	lsrs	r3, r3, #5
 8004ac6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004ace:	6939      	ldr	r1, [r7, #16]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f9bf 	bl	8004e54 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	091b      	lsrs	r3, r3, #4
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d04d      	beq.n	8004b7e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d047      	beq.n	8004b7e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d128      	bne.n	8004b4a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b28      	cmp	r3, #40	; 0x28
 8004b02:	d108      	bne.n	8004b16 <I2C_Slave_ISR_IT+0x8c>
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b0a:	d104      	bne.n	8004b16 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b0c:	6939      	ldr	r1, [r7, #16]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 faaa 	bl	8005068 <I2C_ITListenCplt>
 8004b14:	e032      	b.n	8004b7c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b29      	cmp	r3, #41	; 0x29
 8004b20:	d10e      	bne.n	8004b40 <I2C_Slave_ISR_IT+0xb6>
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b28:	d00a      	beq.n	8004b40 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2210      	movs	r2, #16
 8004b30:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fbe5 	bl	8005302 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f92d 	bl	8004d98 <I2C_ITSlaveSeqCplt>
 8004b3e:	e01d      	b.n	8004b7c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2210      	movs	r2, #16
 8004b46:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004b48:	e096      	b.n	8004c78 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2210      	movs	r2, #16
 8004b50:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b56:	f043 0204 	orr.w	r2, r3, #4
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d004      	beq.n	8004b6e <I2C_Slave_ISR_IT+0xe4>
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b6a:	f040 8085 	bne.w	8004c78 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b72:	4619      	mov	r1, r3
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 facd 	bl	8005114 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004b7a:	e07d      	b.n	8004c78 <I2C_Slave_ISR_IT+0x1ee>
 8004b7c:	e07c      	b.n	8004c78 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	089b      	lsrs	r3, r3, #2
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d030      	beq.n	8004bec <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	089b      	lsrs	r3, r3, #2
 8004b8e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d02a      	beq.n	8004bec <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d018      	beq.n	8004bd2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d14f      	bne.n	8004c7c <I2C_Slave_ISR_IT+0x1f2>
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004be2:	d04b      	beq.n	8004c7c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f8d7 	bl	8004d98 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004bea:	e047      	b.n	8004c7c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	08db      	lsrs	r3, r3, #3
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	08db      	lsrs	r3, r3, #3
 8004bfc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d004      	beq.n	8004c0e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004c04:	6939      	ldr	r1, [r7, #16]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f842 	bl	8004c90 <I2C_ITAddrCplt>
 8004c0c:	e037      	b.n	8004c7e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	085b      	lsrs	r3, r3, #1
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d031      	beq.n	8004c7e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d02b      	beq.n	8004c7e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d018      	beq.n	8004c62 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	781a      	ldrb	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004c60:	e00d      	b.n	8004c7e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c68:	d002      	beq.n	8004c70 <I2C_Slave_ISR_IT+0x1e6>
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f891 	bl	8004d98 <I2C_ITSlaveSeqCplt>
 8004c76:	e002      	b.n	8004c7e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004c78:	bf00      	nop
 8004c7a:	e000      	b.n	8004c7e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004c7c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ca6:	2b28      	cmp	r3, #40	; 0x28
 8004ca8:	d16a      	bne.n	8004d80 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	0c1b      	lsrs	r3, r3, #16
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	0c1b      	lsrs	r3, r3, #16
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004cc8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cd6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004ce4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d138      	bne.n	8004d60 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004cee:	897b      	ldrh	r3, [r7, #10]
 8004cf0:	09db      	lsrs	r3, r3, #7
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	89bb      	ldrh	r3, [r7, #12]
 8004cf6:	4053      	eors	r3, r2
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f003 0306 	and.w	r3, r3, #6
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d11c      	bne.n	8004d3c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004d02:	897b      	ldrh	r3, [r7, #10]
 8004d04:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d13b      	bne.n	8004d90 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2208      	movs	r2, #8
 8004d24:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d2e:	89ba      	ldrh	r2, [r7, #12]
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	4619      	mov	r1, r3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff fe7c 	bl	8004a32 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d3a:	e029      	b.n	8004d90 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004d3c:	893b      	ldrh	r3, [r7, #8]
 8004d3e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fdb1 	bl	80058ac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d52:	89ba      	ldrh	r2, [r7, #12]
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	4619      	mov	r1, r3
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff fe6a 	bl	8004a32 <HAL_I2C_AddrCallback>
}
 8004d5e:	e017      	b.n	8004d90 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fda1 	bl	80058ac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d72:	89ba      	ldrh	r2, [r7, #12]
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	4619      	mov	r1, r3
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff fe5a 	bl	8004a32 <HAL_I2C_AddrCallback>
}
 8004d7e:	e007      	b.n	8004d90 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2208      	movs	r2, #8
 8004d86:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004d90:	bf00      	nop
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	0b9b      	lsrs	r3, r3, #14
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	e00d      	b.n	8004dea <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	0bdb      	lsrs	r3, r3, #15
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004de8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b29      	cmp	r3, #41	; 0x29
 8004df4:	d112      	bne.n	8004e1c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2228      	movs	r2, #40	; 0x28
 8004dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2221      	movs	r2, #33	; 0x21
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e04:	2101      	movs	r1, #1
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fd50 	bl	80058ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff fdf8 	bl	8004a0a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e1a:	e017      	b.n	8004e4c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b2a      	cmp	r3, #42	; 0x2a
 8004e26:	d111      	bne.n	8004e4c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2228      	movs	r2, #40	; 0x28
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2222      	movs	r2, #34	; 0x22
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004e36:	2102      	movs	r1, #2
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fd37 	bl	80058ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff fde9 	bl	8004a1e <HAL_I2C_SlaveRxCpltCallback>
}
 8004e4c:	bf00      	nop
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e70:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2220      	movs	r2, #32
 8004e78:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	2b21      	cmp	r3, #33	; 0x21
 8004e7e:	d002      	beq.n	8004e86 <I2C_ITSlaveCplt+0x32>
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	2b29      	cmp	r3, #41	; 0x29
 8004e84:	d108      	bne.n	8004e98 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004e86:	f248 0101 	movw	r1, #32769	; 0x8001
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fd0e 	bl	80058ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2221      	movs	r2, #33	; 0x21
 8004e94:	631a      	str	r2, [r3, #48]	; 0x30
 8004e96:	e00d      	b.n	8004eb4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
 8004e9a:	2b22      	cmp	r3, #34	; 0x22
 8004e9c:	d002      	beq.n	8004ea4 <I2C_ITSlaveCplt+0x50>
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ea2:	d107      	bne.n	8004eb4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004ea4:	f248 0102 	movw	r1, #32770	; 0x8002
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fcff 	bl	80058ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2222      	movs	r2, #34	; 0x22
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ec2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6859      	ldr	r1, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4b64      	ldr	r3, [pc, #400]	; (8005060 <I2C_ITSlaveCplt+0x20c>)
 8004ed0:	400b      	ands	r3, r1
 8004ed2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fa14 	bl	8005302 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	0b9b      	lsrs	r3, r3, #14
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d013      	beq.n	8004f0e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ef4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d020      	beq.n	8004f40 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f0c:	e018      	b.n	8004f40 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	0bdb      	lsrs	r3, r3, #15
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d012      	beq.n	8004f40 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f28:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d006      	beq.n	8004f40 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	089b      	lsrs	r3, r3, #2
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d020      	beq.n	8004f8e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f023 0304 	bic.w	r3, r3, #4
 8004f52:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00c      	beq.n	8004f8e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d005      	beq.n	8004fa4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9c:	f043 0204 	orr.w	r2, r3, #4
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d010      	beq.n	8004fdc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f8a7 	bl	8005114 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b28      	cmp	r3, #40	; 0x28
 8004fd0:	d141      	bne.n	8005056 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004fd2:	6979      	ldr	r1, [r7, #20]
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f847 	bl	8005068 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fda:	e03c      	b.n	8005056 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fe4:	d014      	beq.n	8005010 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff fed6 	bl	8004d98 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a1d      	ldr	r2, [pc, #116]	; (8005064 <I2C_ITSlaveCplt+0x210>)
 8004ff0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff fd20 	bl	8004a4e <HAL_I2C_ListenCpltCallback>
}
 800500e:	e022      	b.n	8005056 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b22      	cmp	r3, #34	; 0x22
 800501a:	d10e      	bne.n	800503a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff fcf3 	bl	8004a1e <HAL_I2C_SlaveRxCpltCallback>
}
 8005038:	e00d      	b.n	8005056 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff fcda 	bl	8004a0a <HAL_I2C_SlaveTxCpltCallback>
}
 8005056:	bf00      	nop
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	fe00e800 	.word	0xfe00e800
 8005064:	ffff0000 	.word	0xffff0000

08005068 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a26      	ldr	r2, [pc, #152]	; (8005110 <I2C_ITListenCplt+0xa8>)
 8005076:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	089b      	lsrs	r3, r3, #2
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d022      	beq.n	80050e6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d012      	beq.n	80050e6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050de:	f043 0204 	orr.w	r2, r3, #4
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80050e6:	f248 0103 	movw	r1, #32771	; 0x8003
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fbde 	bl	80058ac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2210      	movs	r2, #16
 80050f6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff fca4 	bl	8004a4e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005106:	bf00      	nop
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	ffff0000 	.word	0xffff0000

08005114 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005124:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a5d      	ldr	r2, [pc, #372]	; (80052a8 <I2C_ITError+0x194>)
 8005132:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	2b28      	cmp	r3, #40	; 0x28
 800514a:	d005      	beq.n	8005158 <I2C_ITError+0x44>
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	2b29      	cmp	r3, #41	; 0x29
 8005150:	d002      	beq.n	8005158 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	2b2a      	cmp	r3, #42	; 0x2a
 8005156:	d10b      	bne.n	8005170 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005158:	2103      	movs	r1, #3
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fba6 	bl	80058ac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2228      	movs	r2, #40	; 0x28
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a50      	ldr	r2, [pc, #320]	; (80052ac <I2C_ITError+0x198>)
 800516c:	635a      	str	r2, [r3, #52]	; 0x34
 800516e:	e011      	b.n	8005194 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005170:	f248 0103 	movw	r1, #32771	; 0x8003
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fb99 	bl	80058ac <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b60      	cmp	r3, #96	; 0x60
 8005184:	d003      	beq.n	800518e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005198:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d039      	beq.n	8005216 <I2C_ITError+0x102>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b11      	cmp	r3, #17
 80051a6:	d002      	beq.n	80051ae <I2C_ITError+0x9a>
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b21      	cmp	r3, #33	; 0x21
 80051ac:	d133      	bne.n	8005216 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051bc:	d107      	bne.n	80051ce <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051cc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe fcb0 	bl	8003b38 <HAL_DMA_GetState>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d017      	beq.n	800520e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	4a33      	ldr	r2, [pc, #204]	; (80052b0 <I2C_ITError+0x19c>)
 80051e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fe fc7e 	bl	8003af4 <HAL_DMA_Abort_IT>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d04d      	beq.n	800529a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005208:	4610      	mov	r0, r2
 800520a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800520c:	e045      	b.n	800529a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f850 	bl	80052b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005214:	e041      	b.n	800529a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d039      	beq.n	8005292 <I2C_ITError+0x17e>
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b12      	cmp	r3, #18
 8005222:	d002      	beq.n	800522a <I2C_ITError+0x116>
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b22      	cmp	r3, #34	; 0x22
 8005228:	d133      	bne.n	8005292 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005238:	d107      	bne.n	800524a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005248:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe fc72 	bl	8003b38 <HAL_DMA_GetState>
 8005254:	4603      	mov	r3, r0
 8005256:	2b01      	cmp	r3, #1
 8005258:	d017      	beq.n	800528a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525e:	4a14      	ldr	r2, [pc, #80]	; (80052b0 <I2C_ITError+0x19c>)
 8005260:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526e:	4618      	mov	r0, r3
 8005270:	f7fe fc40 	bl	8003af4 <HAL_DMA_Abort_IT>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d011      	beq.n	800529e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005284:	4610      	mov	r0, r2
 8005286:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005288:	e009      	b.n	800529e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f812 	bl	80052b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005290:	e005      	b.n	800529e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f80e 	bl	80052b4 <I2C_TreatErrorCallback>
  }
}
 8005298:	e002      	b.n	80052a0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800529a:	bf00      	nop
 800529c:	e000      	b.n	80052a0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800529e:	bf00      	nop
}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	ffff0000 	.word	0xffff0000
 80052ac:	08004a8b 	.word	0x08004a8b
 80052b0:	0800534b 	.word	0x0800534b

080052b4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b60      	cmp	r3, #96	; 0x60
 80052c6:	d10e      	bne.n	80052e6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff fbc9 	bl	8004a76 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052e4:	e009      	b.n	80052fa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7ff fbb4 	bl	8004a62 <HAL_I2C_ErrorCallback>
}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b02      	cmp	r3, #2
 8005316:	d103      	bne.n	8005320 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2200      	movs	r2, #0
 800531e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b01      	cmp	r3, #1
 800532c:	d007      	beq.n	800533e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0201 	orr.w	r2, r2, #1
 800533c:	619a      	str	r2, [r3, #24]
  }
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	2200      	movs	r2, #0
 8005366:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005374:	2200      	movs	r2, #0
 8005376:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff ff9b 	bl	80052b4 <I2C_TreatErrorCallback>
}
 800537e:	bf00      	nop
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	603b      	str	r3, [r7, #0]
 8005392:	4613      	mov	r3, r2
 8005394:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005396:	e022      	b.n	80053de <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539e:	d01e      	beq.n	80053de <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a0:	f7fe f9c8 	bl	8003734 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d302      	bcc.n	80053b6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d113      	bne.n	80053de <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ba:	f043 0220 	orr.w	r2, r3, #32
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e00f      	b.n	80053fe <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699a      	ldr	r2, [r3, #24]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4013      	ands	r3, r2
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	bf0c      	ite	eq
 80053ee:	2301      	moveq	r3, #1
 80053f0:	2300      	movne	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d0cd      	beq.n	8005398 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005412:	e02c      	b.n	800546e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f8eb 	bl	80055f4 <I2C_IsErrorOccurred>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e02a      	b.n	800547e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542e:	d01e      	beq.n	800546e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005430:	f7fe f980 	bl	8003734 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	429a      	cmp	r2, r3
 800543e:	d302      	bcc.n	8005446 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d113      	bne.n	800546e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	f043 0220 	orr.w	r2, r3, #32
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e007      	b.n	800547e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b02      	cmp	r3, #2
 800547a:	d1cb      	bne.n	8005414 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005492:	e028      	b.n	80054e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	68b9      	ldr	r1, [r7, #8]
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 f8ab 	bl	80055f4 <I2C_IsErrorOccurred>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e026      	b.n	80054f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a8:	f7fe f944 	bl	8003734 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d302      	bcc.n	80054be <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d113      	bne.n	80054e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c2:	f043 0220 	orr.w	r2, r3, #32
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e007      	b.n	80054f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d1cf      	bne.n	8005494 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800550c:	e064      	b.n	80055d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f86e 	bl	80055f4 <I2C_IsErrorOccurred>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e062      	b.n	80055e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	2b20      	cmp	r3, #32
 800552e:	d138      	bne.n	80055a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b04      	cmp	r3, #4
 800553c:	d105      	bne.n	800554a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	e04e      	b.n	80055e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b10      	cmp	r3, #16
 8005556:	d107      	bne.n	8005568 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2210      	movs	r2, #16
 800555e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2204      	movs	r2, #4
 8005564:	645a      	str	r2, [r3, #68]	; 0x44
 8005566:	e002      	b.n	800556e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2220      	movs	r2, #32
 8005574:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6859      	ldr	r1, [r3, #4]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	4b1b      	ldr	r3, [pc, #108]	; (80055f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005582:	400b      	ands	r3, r1
 8005584:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e022      	b.n	80055e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a2:	f7fe f8c7 	bl	8003734 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d302      	bcc.n	80055b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10f      	bne.n	80055d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055bc:	f043 0220 	orr.w	r2, r3, #32
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e007      	b.n	80055e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d193      	bne.n	800550e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	fe00e800 	.word	0xfe00e800

080055f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08a      	sub	sp, #40	; 0x28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b00      	cmp	r3, #0
 800561e:	d068      	beq.n	80056f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2210      	movs	r2, #16
 8005626:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005628:	e049      	b.n	80056be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d045      	beq.n	80056be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005632:	f7fe f87f 	bl	8003734 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	429a      	cmp	r2, r3
 8005640:	d302      	bcc.n	8005648 <I2C_IsErrorOccurred+0x54>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d13a      	bne.n	80056be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005652:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800565a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566a:	d121      	bne.n	80056b0 <I2C_IsErrorOccurred+0xbc>
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005672:	d01d      	beq.n	80056b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005674:	7cfb      	ldrb	r3, [r7, #19]
 8005676:	2b20      	cmp	r3, #32
 8005678:	d01a      	beq.n	80056b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005688:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800568a:	f7fe f853 	bl	8003734 <HAL_GetTick>
 800568e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005690:	e00e      	b.n	80056b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005692:	f7fe f84f 	bl	8003734 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b19      	cmp	r3, #25
 800569e:	d907      	bls.n	80056b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	f043 0320 	orr.w	r3, r3, #32
 80056a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80056ae:	e006      	b.n	80056be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d1e9      	bne.n	8005692 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	d003      	beq.n	80056d4 <I2C_IsErrorOccurred+0xe0>
 80056cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0aa      	beq.n	800562a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80056d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d103      	bne.n	80056e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2220      	movs	r2, #32
 80056e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	f043 0304 	orr.w	r3, r3, #4
 80056ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00b      	beq.n	800571c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	f043 0301 	orr.w	r3, r3, #1
 800570a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005714:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00b      	beq.n	800573e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	f043 0308 	orr.w	r3, r3, #8
 800572c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005736:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00b      	beq.n	8005760 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	f043 0302 	orr.w	r3, r3, #2
 800574e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005758:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01c      	beq.n	80057a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f7ff fdca 	bl	8005302 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6859      	ldr	r1, [r3, #4]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	4b0d      	ldr	r3, [pc, #52]	; (80057b0 <I2C_IsErrorOccurred+0x1bc>)
 800577a:	400b      	ands	r3, r1
 800577c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	431a      	orrs	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80057a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3728      	adds	r7, #40	; 0x28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	fe00e800 	.word	0xfe00e800

080057b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	607b      	str	r3, [r7, #4]
 80057be:	460b      	mov	r3, r1
 80057c0:	817b      	strh	r3, [r7, #10]
 80057c2:	4613      	mov	r3, r2
 80057c4:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a2f      	ldr	r2, [pc, #188]	; (8005888 <I2C_TransferConfig+0xd4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d013      	beq.n	80057f8 <I2C_TransferConfig+0x44>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a2d      	ldr	r2, [pc, #180]	; (800588c <I2C_TransferConfig+0xd8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00e      	beq.n	80057f8 <I2C_TransferConfig+0x44>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a2c      	ldr	r2, [pc, #176]	; (8005890 <I2C_TransferConfig+0xdc>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d009      	beq.n	80057f8 <I2C_TransferConfig+0x44>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a2a      	ldr	r2, [pc, #168]	; (8005894 <I2C_TransferConfig+0xe0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d004      	beq.n	80057f8 <I2C_TransferConfig+0x44>
 80057ee:	f641 3147 	movw	r1, #6983	; 0x1b47
 80057f2:	4829      	ldr	r0, [pc, #164]	; (8005898 <I2C_TransferConfig+0xe4>)
 80057f4:	f7fd faa5 	bl	8002d42 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057fe:	d00b      	beq.n	8005818 <I2C_TransferConfig+0x64>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005806:	d007      	beq.n	8005818 <I2C_TransferConfig+0x64>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d004      	beq.n	8005818 <I2C_TransferConfig+0x64>
 800580e:	f641 3148 	movw	r1, #6984	; 0x1b48
 8005812:	4821      	ldr	r0, [pc, #132]	; (8005898 <I2C_TransferConfig+0xe4>)
 8005814:	f7fd fa95 	bl	8002d42 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	4a20      	ldr	r2, [pc, #128]	; (800589c <I2C_TransferConfig+0xe8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00f      	beq.n	8005840 <I2C_TransferConfig+0x8c>
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	4a1f      	ldr	r2, [pc, #124]	; (80058a0 <I2C_TransferConfig+0xec>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00b      	beq.n	8005840 <I2C_TransferConfig+0x8c>
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	4a1e      	ldr	r2, [pc, #120]	; (80058a4 <I2C_TransferConfig+0xf0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d007      	beq.n	8005840 <I2C_TransferConfig+0x8c>
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d004      	beq.n	8005840 <I2C_TransferConfig+0x8c>
 8005836:	f641 3149 	movw	r1, #6985	; 0x1b49
 800583a:	4817      	ldr	r0, [pc, #92]	; (8005898 <I2C_TransferConfig+0xe4>)
 800583c:	f7fd fa81 	bl	8002d42 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005840:	897b      	ldrh	r3, [r7, #10]
 8005842:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005846:	7a7b      	ldrb	r3, [r7, #9]
 8005848:	041b      	lsls	r3, r3, #16
 800584a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800584e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	4313      	orrs	r3, r2
 8005858:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800585c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	0d5b      	lsrs	r3, r3, #21
 8005868:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800586c:	4b0e      	ldr	r3, [pc, #56]	; (80058a8 <I2C_TransferConfig+0xf4>)
 800586e:	430b      	orrs	r3, r1
 8005870:	43db      	mvns	r3, r3
 8005872:	ea02 0103 	and.w	r1, r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	430a      	orrs	r2, r1
 800587e:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005880:	bf00      	nop
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40005400 	.word	0x40005400
 800588c:	40005800 	.word	0x40005800
 8005890:	40005c00 	.word	0x40005c00
 8005894:	40006000 	.word	0x40006000
 8005898:	08015924 	.word	0x08015924
 800589c:	80004000 	.word	0x80004000
 80058a0:	80002400 	.word	0x80002400
 80058a4:	80002000 	.word	0x80002000
 80058a8:	03ff63ff 	.word	0x03ff63ff

080058ac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	460b      	mov	r3, r1
 80058b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80058bc:	887b      	ldrh	r3, [r7, #2]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00f      	beq.n	80058e6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80058cc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058da:	2b28      	cmp	r3, #40	; 0x28
 80058dc:	d003      	beq.n	80058e6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80058e4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80058e6:	887b      	ldrh	r3, [r7, #2]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00f      	beq.n	8005910 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80058f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005904:	2b28      	cmp	r3, #40	; 0x28
 8005906:	d003      	beq.n	8005910 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800590e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005910:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005914:	2b00      	cmp	r3, #0
 8005916:	da03      	bge.n	8005920 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800591e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005920:	887b      	ldrh	r3, [r7, #2]
 8005922:	2b10      	cmp	r3, #16
 8005924:	d103      	bne.n	800592e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800592c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800592e:	887b      	ldrh	r3, [r7, #2]
 8005930:	2b20      	cmp	r3, #32
 8005932:	d103      	bne.n	800593c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f043 0320 	orr.w	r3, r3, #32
 800593a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800593c:	887b      	ldrh	r3, [r7, #2]
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	d103      	bne.n	800594a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005948:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6819      	ldr	r1, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	43da      	mvns	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	400a      	ands	r2, r1
 800595a:	601a      	str	r2, [r3, #0]
}
 800595c:	bf00      	nop
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a32      	ldr	r2, [pc, #200]	; (8005a40 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d012      	beq.n	80059a2 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a30      	ldr	r2, [pc, #192]	; (8005a44 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d00d      	beq.n	80059a2 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a2f      	ldr	r2, [pc, #188]	; (8005a48 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d008      	beq.n	80059a2 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a2d      	ldr	r2, [pc, #180]	; (8005a4c <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d003      	beq.n	80059a2 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800599a:	215e      	movs	r1, #94	; 0x5e
 800599c:	482c      	ldr	r0, [pc, #176]	; (8005a50 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800599e:	f7fd f9d0 	bl	8002d42 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d007      	beq.n	80059b8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ae:	d003      	beq.n	80059b8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80059b0:	215f      	movs	r1, #95	; 0x5f
 80059b2:	4827      	ldr	r0, [pc, #156]	; (8005a50 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80059b4:	f7fd f9c5 	bl	8002d42 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d138      	bne.n	8005a36 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e032      	b.n	8005a38 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2224      	movs	r2, #36	; 0x24
 80059de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0201 	bic.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a00:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6819      	ldr	r1, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f042 0201 	orr.w	r2, r2, #1
 8005a20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	e000      	b.n	8005a38 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8005a36:	2302      	movs	r3, #2
  }
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	40005400 	.word	0x40005400
 8005a44:	40005800 	.word	0x40005800
 8005a48:	40005c00 	.word	0x40005c00
 8005a4c:	40006000 	.word	0x40006000
 8005a50:	0801595c 	.word	0x0801595c

08005a54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a31      	ldr	r2, [pc, #196]	; (8005b28 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d012      	beq.n	8005a8e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a2f      	ldr	r2, [pc, #188]	; (8005b2c <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00d      	beq.n	8005a8e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a2e      	ldr	r2, [pc, #184]	; (8005b30 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d008      	beq.n	8005a8e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a2c      	ldr	r2, [pc, #176]	; (8005b34 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d003      	beq.n	8005a8e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005a86:	218c      	movs	r1, #140	; 0x8c
 8005a88:	482b      	ldr	r0, [pc, #172]	; (8005b38 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8005a8a:	f7fd f95a 	bl	8002d42 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b0f      	cmp	r3, #15
 8005a92:	d903      	bls.n	8005a9c <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8005a94:	218d      	movs	r1, #141	; 0x8d
 8005a96:	4828      	ldr	r0, [pc, #160]	; (8005b38 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8005a98:	f7fd f953 	bl	8002d42 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d139      	bne.n	8005b1c <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e033      	b.n	8005b1e <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2224      	movs	r2, #36	; 0x24
 8005ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0201 	bic.w	r2, r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ae4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	021b      	lsls	r3, r3, #8
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0201 	orr.w	r2, r2, #1
 8005b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e000      	b.n	8005b1e <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005b1c:	2302      	movs	r3, #2
  }
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40005400 	.word	0x40005400
 8005b2c:	40005800 	.word	0x40005800
 8005b30:	40005c00 	.word	0x40005c00
 8005b34:	40006000 	.word	0x40006000
 8005b38:	0801595c 	.word	0x0801595c

08005b3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b46:	4b23      	ldr	r3, [pc, #140]	; (8005bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	4a22      	ldr	r2, [pc, #136]	; (8005bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b50:	6413      	str	r3, [r2, #64]	; 0x40
 8005b52:	4b20      	ldr	r3, [pc, #128]	; (8005bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b5e:	4b1e      	ldr	r3, [pc, #120]	; (8005bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a1d      	ldr	r2, [pc, #116]	; (8005bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b6a:	f7fd fde3 	bl	8003734 <HAL_GetTick>
 8005b6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b70:	e009      	b.n	8005b86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b72:	f7fd fddf 	bl	8003734 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b80:	d901      	bls.n	8005b86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e022      	b.n	8005bcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b86:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b92:	d1ee      	bne.n	8005b72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005b94:	4b10      	ldr	r3, [pc, #64]	; (8005bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a0f      	ldr	r2, [pc, #60]	; (8005bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ba0:	f7fd fdc8 	bl	8003734 <HAL_GetTick>
 8005ba4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ba6:	e009      	b.n	8005bbc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ba8:	f7fd fdc4 	bl	8003734 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bb6:	d901      	bls.n	8005bbc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e007      	b.n	8005bcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005bbc:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bc8:	d1ee      	bne.n	8005ba8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	40007000 	.word	0x40007000

08005bdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005be4:	2300      	movs	r3, #0
 8005be6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e345      	b.n	800627e <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d904      	bls.n	8005c04 <HAL_RCC_OscConfig+0x28>
 8005bfa:	f240 1163 	movw	r1, #355	; 0x163
 8005bfe:	4892      	ldr	r0, [pc, #584]	; (8005e48 <HAL_RCC_OscConfig+0x26c>)
 8005c00:	f7fd f89f 	bl	8002d42 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 809a 	beq.w	8005d46 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00e      	beq.n	8005c38 <HAL_RCC_OscConfig+0x5c>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c22:	d009      	beq.n	8005c38 <HAL_RCC_OscConfig+0x5c>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c2c:	d004      	beq.n	8005c38 <HAL_RCC_OscConfig+0x5c>
 8005c2e:	f240 1169 	movw	r1, #361	; 0x169
 8005c32:	4885      	ldr	r0, [pc, #532]	; (8005e48 <HAL_RCC_OscConfig+0x26c>)
 8005c34:	f7fd f885 	bl	8002d42 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c38:	4b84      	ldr	r3, [pc, #528]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f003 030c 	and.w	r3, r3, #12
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d00c      	beq.n	8005c5e <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c44:	4b81      	ldr	r3, [pc, #516]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 030c 	and.w	r3, r3, #12
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d112      	bne.n	8005c76 <HAL_RCC_OscConfig+0x9a>
 8005c50:	4b7e      	ldr	r3, [pc, #504]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c5c:	d10b      	bne.n	8005c76 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c5e:	4b7b      	ldr	r3, [pc, #492]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d06c      	beq.n	8005d44 <HAL_RCC_OscConfig+0x168>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d168      	bne.n	8005d44 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e303      	b.n	800627e <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c7e:	d106      	bne.n	8005c8e <HAL_RCC_OscConfig+0xb2>
 8005c80:	4b72      	ldr	r3, [pc, #456]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a71      	ldr	r2, [pc, #452]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	e02e      	b.n	8005cec <HAL_RCC_OscConfig+0x110>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10c      	bne.n	8005cb0 <HAL_RCC_OscConfig+0xd4>
 8005c96:	4b6d      	ldr	r3, [pc, #436]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a6c      	ldr	r2, [pc, #432]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	4b6a      	ldr	r3, [pc, #424]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a69      	ldr	r2, [pc, #420]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	e01d      	b.n	8005cec <HAL_RCC_OscConfig+0x110>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cb8:	d10c      	bne.n	8005cd4 <HAL_RCC_OscConfig+0xf8>
 8005cba:	4b64      	ldr	r3, [pc, #400]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a63      	ldr	r2, [pc, #396]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	4b61      	ldr	r3, [pc, #388]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a60      	ldr	r2, [pc, #384]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	e00b      	b.n	8005cec <HAL_RCC_OscConfig+0x110>
 8005cd4:	4b5d      	ldr	r3, [pc, #372]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a5c      	ldr	r2, [pc, #368]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	4b5a      	ldr	r3, [pc, #360]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a59      	ldr	r2, [pc, #356]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d013      	beq.n	8005d1c <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf4:	f7fd fd1e 	bl	8003734 <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cfc:	f7fd fd1a 	bl	8003734 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b64      	cmp	r3, #100	; 0x64
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e2b7      	b.n	800627e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0e:	4b4f      	ldr	r3, [pc, #316]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d0f0      	beq.n	8005cfc <HAL_RCC_OscConfig+0x120>
 8005d1a:	e014      	b.n	8005d46 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1c:	f7fd fd0a 	bl	8003734 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d24:	f7fd fd06 	bl	8003734 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b64      	cmp	r3, #100	; 0x64
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e2a3      	b.n	800627e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d36:	4b45      	ldr	r3, [pc, #276]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f0      	bne.n	8005d24 <HAL_RCC_OscConfig+0x148>
 8005d42:	e000      	b.n	8005d46 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 8084 	beq.w	8005e5c <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_RCC_OscConfig+0x192>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d004      	beq.n	8005d6e <HAL_RCC_OscConfig+0x192>
 8005d64:	f240 119b 	movw	r1, #411	; 0x19b
 8005d68:	4837      	ldr	r0, [pc, #220]	; (8005e48 <HAL_RCC_OscConfig+0x26c>)
 8005d6a:	f7fc ffea 	bl	8002d42 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b1f      	cmp	r3, #31
 8005d74:	d904      	bls.n	8005d80 <HAL_RCC_OscConfig+0x1a4>
 8005d76:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8005d7a:	4833      	ldr	r0, [pc, #204]	; (8005e48 <HAL_RCC_OscConfig+0x26c>)
 8005d7c:	f7fc ffe1 	bl	8002d42 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d80:	4b32      	ldr	r3, [pc, #200]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f003 030c 	and.w	r3, r3, #12
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d8c:	4b2f      	ldr	r3, [pc, #188]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 030c 	and.w	r3, r3, #12
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d11c      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x1f6>
 8005d98:	4b2c      	ldr	r3, [pc, #176]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d116      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005da4:	4b29      	ldr	r3, [pc, #164]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <HAL_RCC_OscConfig+0x1e0>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d001      	beq.n	8005dbc <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e260      	b.n	800627e <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dbc:	4b23      	ldr	r3, [pc, #140]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	4920      	ldr	r1, [pc, #128]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dd0:	e044      	b.n	8005e5c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d023      	beq.n	8005e22 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dda:	4b1c      	ldr	r3, [pc, #112]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1b      	ldr	r2, [pc, #108]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005de0:	f043 0301 	orr.w	r3, r3, #1
 8005de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de6:	f7fd fca5 	bl	8003734 <HAL_GetTick>
 8005dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dec:	e008      	b.n	8005e00 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dee:	f7fd fca1 	bl	8003734 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e23e      	b.n	800627e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e00:	4b12      	ldr	r3, [pc, #72]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0f0      	beq.n	8005dee <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e0c:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	00db      	lsls	r3, r3, #3
 8005e1a:	490c      	ldr	r1, [pc, #48]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	600b      	str	r3, [r1, #0]
 8005e20:	e01c      	b.n	8005e5c <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e22:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a09      	ldr	r2, [pc, #36]	; (8005e4c <HAL_RCC_OscConfig+0x270>)
 8005e28:	f023 0301 	bic.w	r3, r3, #1
 8005e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2e:	f7fd fc81 	bl	8003734 <HAL_GetTick>
 8005e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e34:	e00c      	b.n	8005e50 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e36:	f7fd fc7d 	bl	8003734 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d905      	bls.n	8005e50 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e21a      	b.n	800627e <HAL_RCC_OscConfig+0x6a2>
 8005e48:	08015998 	.word	0x08015998
 8005e4c:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e50:	4b7e      	ldr	r3, [pc, #504]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1ec      	bne.n	8005e36 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0308 	and.w	r3, r3, #8
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d043      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d008      	beq.n	8005e82 <HAL_RCC_OscConfig+0x2a6>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d004      	beq.n	8005e82 <HAL_RCC_OscConfig+0x2a6>
 8005e78:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8005e7c:	4874      	ldr	r0, [pc, #464]	; (8006050 <HAL_RCC_OscConfig+0x474>)
 8005e7e:	f7fc ff60 	bl	8002d42 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d019      	beq.n	8005ebe <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e8a:	4b70      	ldr	r3, [pc, #448]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e8e:	4a6f      	ldr	r2, [pc, #444]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005e90:	f043 0301 	orr.w	r3, r3, #1
 8005e94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e96:	f7fd fc4d 	bl	8003734 <HAL_GetTick>
 8005e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e9e:	f7fd fc49 	bl	8003734 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d901      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e1e6      	b.n	800627e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eb0:	4b66      	ldr	r3, [pc, #408]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d0f0      	beq.n	8005e9e <HAL_RCC_OscConfig+0x2c2>
 8005ebc:	e018      	b.n	8005ef0 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ebe:	4b63      	ldr	r3, [pc, #396]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec2:	4a62      	ldr	r2, [pc, #392]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005ec4:	f023 0301 	bic.w	r3, r3, #1
 8005ec8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eca:	f7fd fc33 	bl	8003734 <HAL_GetTick>
 8005ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ed2:	f7fd fc2f 	bl	8003734 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e1cc      	b.n	800627e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ee4:	4b59      	ldr	r3, [pc, #356]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1f0      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80bc 	beq.w	8006076 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00c      	beq.n	8005f20 <HAL_RCC_OscConfig+0x344>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d008      	beq.n	8005f20 <HAL_RCC_OscConfig+0x344>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	2b05      	cmp	r3, #5
 8005f14:	d004      	beq.n	8005f20 <HAL_RCC_OscConfig+0x344>
 8005f16:	f240 2106 	movw	r1, #518	; 0x206
 8005f1a:	484d      	ldr	r0, [pc, #308]	; (8006050 <HAL_RCC_OscConfig+0x474>)
 8005f1c:	f7fc ff11 	bl	8002d42 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f20:	4b4a      	ldr	r3, [pc, #296]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10d      	bne.n	8005f48 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f2c:	4b47      	ldr	r3, [pc, #284]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	4a46      	ldr	r2, [pc, #280]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f36:	6413      	str	r3, [r2, #64]	; 0x40
 8005f38:	4b44      	ldr	r3, [pc, #272]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f40:	60bb      	str	r3, [r7, #8]
 8005f42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f44:	2301      	movs	r3, #1
 8005f46:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f48:	4b42      	ldr	r3, [pc, #264]	; (8006054 <HAL_RCC_OscConfig+0x478>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d118      	bne.n	8005f86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005f54:	4b3f      	ldr	r3, [pc, #252]	; (8006054 <HAL_RCC_OscConfig+0x478>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a3e      	ldr	r2, [pc, #248]	; (8006054 <HAL_RCC_OscConfig+0x478>)
 8005f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f60:	f7fd fbe8 	bl	8003734 <HAL_GetTick>
 8005f64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f66:	e008      	b.n	8005f7a <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f68:	f7fd fbe4 	bl	8003734 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b64      	cmp	r3, #100	; 0x64
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e181      	b.n	800627e <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f7a:	4b36      	ldr	r3, [pc, #216]	; (8006054 <HAL_RCC_OscConfig+0x478>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0f0      	beq.n	8005f68 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d106      	bne.n	8005f9c <HAL_RCC_OscConfig+0x3c0>
 8005f8e:	4b2f      	ldr	r3, [pc, #188]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f92:	4a2e      	ldr	r2, [pc, #184]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005f94:	f043 0301 	orr.w	r3, r3, #1
 8005f98:	6713      	str	r3, [r2, #112]	; 0x70
 8005f9a:	e02d      	b.n	8005ff8 <HAL_RCC_OscConfig+0x41c>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10c      	bne.n	8005fbe <HAL_RCC_OscConfig+0x3e2>
 8005fa4:	4b29      	ldr	r3, [pc, #164]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa8:	4a28      	ldr	r2, [pc, #160]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005faa:	f023 0301 	bic.w	r3, r3, #1
 8005fae:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb0:	4b26      	ldr	r3, [pc, #152]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb4:	4a25      	ldr	r2, [pc, #148]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005fb6:	f023 0304 	bic.w	r3, r3, #4
 8005fba:	6713      	str	r3, [r2, #112]	; 0x70
 8005fbc:	e01c      	b.n	8005ff8 <HAL_RCC_OscConfig+0x41c>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	2b05      	cmp	r3, #5
 8005fc4:	d10c      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x404>
 8005fc6:	4b21      	ldr	r3, [pc, #132]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fca:	4a20      	ldr	r2, [pc, #128]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005fcc:	f043 0304 	orr.w	r3, r3, #4
 8005fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd2:	4b1e      	ldr	r3, [pc, #120]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd6:	4a1d      	ldr	r2, [pc, #116]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005fd8:	f043 0301 	orr.w	r3, r3, #1
 8005fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8005fde:	e00b      	b.n	8005ff8 <HAL_RCC_OscConfig+0x41c>
 8005fe0:	4b1a      	ldr	r3, [pc, #104]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe4:	4a19      	ldr	r2, [pc, #100]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005fe6:	f023 0301 	bic.w	r3, r3, #1
 8005fea:	6713      	str	r3, [r2, #112]	; 0x70
 8005fec:	4b17      	ldr	r3, [pc, #92]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff0:	4a16      	ldr	r2, [pc, #88]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005ff2:	f023 0304 	bic.w	r3, r3, #4
 8005ff6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d015      	beq.n	800602c <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006000:	f7fd fb98 	bl	8003734 <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006006:	e00a      	b.n	800601e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006008:	f7fd fb94 	bl	8003734 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	f241 3288 	movw	r2, #5000	; 0x1388
 8006016:	4293      	cmp	r3, r2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e12f      	b.n	800627e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800601e:	4b0b      	ldr	r3, [pc, #44]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8006020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0ee      	beq.n	8006008 <HAL_RCC_OscConfig+0x42c>
 800602a:	e01b      	b.n	8006064 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602c:	f7fd fb82 	bl	8003734 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006032:	e011      	b.n	8006058 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006034:	f7fd fb7e 	bl	8003734 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006042:	4293      	cmp	r3, r2
 8006044:	d908      	bls.n	8006058 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e119      	b.n	800627e <HAL_RCC_OscConfig+0x6a2>
 800604a:	bf00      	nop
 800604c:	40023800 	.word	0x40023800
 8006050:	08015998 	.word	0x08015998
 8006054:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006058:	4b8b      	ldr	r3, [pc, #556]	; (8006288 <HAL_RCC_OscConfig+0x6ac>)
 800605a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e7      	bne.n	8006034 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006064:	7dfb      	ldrb	r3, [r7, #23]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d105      	bne.n	8006076 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800606a:	4b87      	ldr	r3, [pc, #540]	; (8006288 <HAL_RCC_OscConfig+0x6ac>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	4a86      	ldr	r2, [pc, #536]	; (8006288 <HAL_RCC_OscConfig+0x6ac>)
 8006070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006074:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00c      	beq.n	8006098 <HAL_RCC_OscConfig+0x4bc>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d008      	beq.n	8006098 <HAL_RCC_OscConfig+0x4bc>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	2b02      	cmp	r3, #2
 800608c:	d004      	beq.n	8006098 <HAL_RCC_OscConfig+0x4bc>
 800608e:	f240 214a 	movw	r1, #586	; 0x24a
 8006092:	487e      	ldr	r0, [pc, #504]	; (800628c <HAL_RCC_OscConfig+0x6b0>)
 8006094:	f7fc fe55 	bl	8002d42 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 80ed 	beq.w	800627c <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060a2:	4b79      	ldr	r3, [pc, #484]	; (8006288 <HAL_RCC_OscConfig+0x6ac>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f003 030c 	and.w	r3, r3, #12
 80060aa:	2b08      	cmp	r3, #8
 80060ac:	f000 80b4 	beq.w	8006218 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	f040 8095 	bne.w	80061e4 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d009      	beq.n	80060d6 <HAL_RCC_OscConfig+0x4fa>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060ca:	d004      	beq.n	80060d6 <HAL_RCC_OscConfig+0x4fa>
 80060cc:	f240 2153 	movw	r1, #595	; 0x253
 80060d0:	486e      	ldr	r0, [pc, #440]	; (800628c <HAL_RCC_OscConfig+0x6b0>)
 80060d2:	f7fc fe36 	bl	8002d42 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d903      	bls.n	80060e6 <HAL_RCC_OscConfig+0x50a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	2b3f      	cmp	r3, #63	; 0x3f
 80060e4:	d904      	bls.n	80060f0 <HAL_RCC_OscConfig+0x514>
 80060e6:	f44f 7115 	mov.w	r1, #596	; 0x254
 80060ea:	4868      	ldr	r0, [pc, #416]	; (800628c <HAL_RCC_OscConfig+0x6b0>)
 80060ec:	f7fc fe29 	bl	8002d42 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	2b31      	cmp	r3, #49	; 0x31
 80060f6:	d904      	bls.n	8006102 <HAL_RCC_OscConfig+0x526>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006100:	d904      	bls.n	800610c <HAL_RCC_OscConfig+0x530>
 8006102:	f240 2155 	movw	r1, #597	; 0x255
 8006106:	4861      	ldr	r0, [pc, #388]	; (800628c <HAL_RCC_OscConfig+0x6b0>)
 8006108:	f7fc fe1b 	bl	8002d42 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006110:	2b02      	cmp	r3, #2
 8006112:	d010      	beq.n	8006136 <HAL_RCC_OscConfig+0x55a>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006118:	2b04      	cmp	r3, #4
 800611a:	d00c      	beq.n	8006136 <HAL_RCC_OscConfig+0x55a>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006120:	2b06      	cmp	r3, #6
 8006122:	d008      	beq.n	8006136 <HAL_RCC_OscConfig+0x55a>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006128:	2b08      	cmp	r3, #8
 800612a:	d004      	beq.n	8006136 <HAL_RCC_OscConfig+0x55a>
 800612c:	f240 2156 	movw	r1, #598	; 0x256
 8006130:	4856      	ldr	r0, [pc, #344]	; (800628c <HAL_RCC_OscConfig+0x6b0>)
 8006132:	f7fc fe06 	bl	8002d42 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613a:	2b01      	cmp	r3, #1
 800613c:	d903      	bls.n	8006146 <HAL_RCC_OscConfig+0x56a>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006142:	2b0f      	cmp	r3, #15
 8006144:	d904      	bls.n	8006150 <HAL_RCC_OscConfig+0x574>
 8006146:	f240 2157 	movw	r1, #599	; 0x257
 800614a:	4850      	ldr	r0, [pc, #320]	; (800628c <HAL_RCC_OscConfig+0x6b0>)
 800614c:	f7fc fdf9 	bl	8002d42 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006150:	4b4d      	ldr	r3, [pc, #308]	; (8006288 <HAL_RCC_OscConfig+0x6ac>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a4c      	ldr	r2, [pc, #304]	; (8006288 <HAL_RCC_OscConfig+0x6ac>)
 8006156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800615a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615c:	f7fd faea 	bl	8003734 <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006164:	f7fd fae6 	bl	8003734 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e083      	b.n	800627e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006176:	4b44      	ldr	r3, [pc, #272]	; (8006288 <HAL_RCC_OscConfig+0x6ac>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1f0      	bne.n	8006164 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69da      	ldr	r2, [r3, #28]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	019b      	lsls	r3, r3, #6
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006198:	085b      	lsrs	r3, r3, #1
 800619a:	3b01      	subs	r3, #1
 800619c:	041b      	lsls	r3, r3, #16
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	061b      	lsls	r3, r3, #24
 80061a6:	4313      	orrs	r3, r2
 80061a8:	4a37      	ldr	r2, [pc, #220]	; (8006288 <HAL_RCC_OscConfig+0x6ac>)
 80061aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061ae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061b0:	4b35      	ldr	r3, [pc, #212]	; (8006288 <HAL_RCC_OscConfig+0x6ac>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a34      	ldr	r2, [pc, #208]	; (8006288 <HAL_RCC_OscConfig+0x6ac>)
 80061b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061bc:	f7fd faba 	bl	8003734 <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061c4:	f7fd fab6 	bl	8003734 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e053      	b.n	800627e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061d6:	4b2c      	ldr	r3, [pc, #176]	; (8006288 <HAL_RCC_OscConfig+0x6ac>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0f0      	beq.n	80061c4 <HAL_RCC_OscConfig+0x5e8>
 80061e2:	e04b      	b.n	800627c <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061e4:	4b28      	ldr	r3, [pc, #160]	; (8006288 <HAL_RCC_OscConfig+0x6ac>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a27      	ldr	r2, [pc, #156]	; (8006288 <HAL_RCC_OscConfig+0x6ac>)
 80061ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f0:	f7fd faa0 	bl	8003734 <HAL_GetTick>
 80061f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061f6:	e008      	b.n	800620a <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061f8:	f7fd fa9c 	bl	8003734 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e039      	b.n	800627e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800620a:	4b1f      	ldr	r3, [pc, #124]	; (8006288 <HAL_RCC_OscConfig+0x6ac>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1f0      	bne.n	80061f8 <HAL_RCC_OscConfig+0x61c>
 8006216:	e031      	b.n	800627c <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006218:	4b1b      	ldr	r3, [pc, #108]	; (8006288 <HAL_RCC_OscConfig+0x6ac>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d028      	beq.n	8006278 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006230:	429a      	cmp	r2, r3
 8006232:	d121      	bne.n	8006278 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800623e:	429a      	cmp	r2, r3
 8006240:	d11a      	bne.n	8006278 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006248:	4013      	ands	r3, r2
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800624e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006250:	4293      	cmp	r3, r2
 8006252:	d111      	bne.n	8006278 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625e:	085b      	lsrs	r3, r3, #1
 8006260:	3b01      	subs	r3, #1
 8006262:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006264:	429a      	cmp	r2, r3
 8006266:	d107      	bne.n	8006278 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006274:	429a      	cmp	r2, r3
 8006276:	d001      	beq.n	800627c <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e000      	b.n	800627e <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3718      	adds	r7, #24
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	40023800 	.word	0x40023800
 800628c:	08015998 	.word	0x08015998

08006290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e18c      	b.n	80065c2 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x28>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b0f      	cmp	r3, #15
 80062b6:	d904      	bls.n	80062c2 <HAL_RCC_ClockConfig+0x32>
 80062b8:	f240 21dd 	movw	r1, #733	; 0x2dd
 80062bc:	4887      	ldr	r0, [pc, #540]	; (80064dc <HAL_RCC_ClockConfig+0x24c>)
 80062be:	f7fc fd40 	bl	8002d42 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d031      	beq.n	800632c <HAL_RCC_ClockConfig+0x9c>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d02e      	beq.n	800632c <HAL_RCC_ClockConfig+0x9c>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d02b      	beq.n	800632c <HAL_RCC_ClockConfig+0x9c>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d028      	beq.n	800632c <HAL_RCC_ClockConfig+0x9c>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b04      	cmp	r3, #4
 80062de:	d025      	beq.n	800632c <HAL_RCC_ClockConfig+0x9c>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b05      	cmp	r3, #5
 80062e4:	d022      	beq.n	800632c <HAL_RCC_ClockConfig+0x9c>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b06      	cmp	r3, #6
 80062ea:	d01f      	beq.n	800632c <HAL_RCC_ClockConfig+0x9c>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b07      	cmp	r3, #7
 80062f0:	d01c      	beq.n	800632c <HAL_RCC_ClockConfig+0x9c>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d019      	beq.n	800632c <HAL_RCC_ClockConfig+0x9c>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b09      	cmp	r3, #9
 80062fc:	d016      	beq.n	800632c <HAL_RCC_ClockConfig+0x9c>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b0a      	cmp	r3, #10
 8006302:	d013      	beq.n	800632c <HAL_RCC_ClockConfig+0x9c>
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	2b0b      	cmp	r3, #11
 8006308:	d010      	beq.n	800632c <HAL_RCC_ClockConfig+0x9c>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b0c      	cmp	r3, #12
 800630e:	d00d      	beq.n	800632c <HAL_RCC_ClockConfig+0x9c>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b0d      	cmp	r3, #13
 8006314:	d00a      	beq.n	800632c <HAL_RCC_ClockConfig+0x9c>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b0e      	cmp	r3, #14
 800631a:	d007      	beq.n	800632c <HAL_RCC_ClockConfig+0x9c>
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2b0f      	cmp	r3, #15
 8006320:	d004      	beq.n	800632c <HAL_RCC_ClockConfig+0x9c>
 8006322:	f240 21de 	movw	r1, #734	; 0x2de
 8006326:	486d      	ldr	r0, [pc, #436]	; (80064dc <HAL_RCC_ClockConfig+0x24c>)
 8006328:	f7fc fd0b 	bl	8002d42 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800632c:	4b6c      	ldr	r3, [pc, #432]	; (80064e0 <HAL_RCC_ClockConfig+0x250>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d910      	bls.n	800635c <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633a:	4b69      	ldr	r3, [pc, #420]	; (80064e0 <HAL_RCC_ClockConfig+0x250>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f023 020f 	bic.w	r2, r3, #15
 8006342:	4967      	ldr	r1, [pc, #412]	; (80064e0 <HAL_RCC_ClockConfig+0x250>)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	4313      	orrs	r3, r2
 8006348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800634a:	4b65      	ldr	r3, [pc, #404]	; (80064e0 <HAL_RCC_ClockConfig+0x250>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d001      	beq.n	800635c <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e132      	b.n	80065c2 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d049      	beq.n	80063fc <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006374:	4b5b      	ldr	r3, [pc, #364]	; (80064e4 <HAL_RCC_ClockConfig+0x254>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	4a5a      	ldr	r2, [pc, #360]	; (80064e4 <HAL_RCC_ClockConfig+0x254>)
 800637a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800637e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0308 	and.w	r3, r3, #8
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800638c:	4b55      	ldr	r3, [pc, #340]	; (80064e4 <HAL_RCC_ClockConfig+0x254>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	4a54      	ldr	r2, [pc, #336]	; (80064e4 <HAL_RCC_ClockConfig+0x254>)
 8006392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006396:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d024      	beq.n	80063ea <HAL_RCC_ClockConfig+0x15a>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2b80      	cmp	r3, #128	; 0x80
 80063a6:	d020      	beq.n	80063ea <HAL_RCC_ClockConfig+0x15a>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2b90      	cmp	r3, #144	; 0x90
 80063ae:	d01c      	beq.n	80063ea <HAL_RCC_ClockConfig+0x15a>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2ba0      	cmp	r3, #160	; 0xa0
 80063b6:	d018      	beq.n	80063ea <HAL_RCC_ClockConfig+0x15a>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2bb0      	cmp	r3, #176	; 0xb0
 80063be:	d014      	beq.n	80063ea <HAL_RCC_ClockConfig+0x15a>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2bc0      	cmp	r3, #192	; 0xc0
 80063c6:	d010      	beq.n	80063ea <HAL_RCC_ClockConfig+0x15a>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	2bd0      	cmp	r3, #208	; 0xd0
 80063ce:	d00c      	beq.n	80063ea <HAL_RCC_ClockConfig+0x15a>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	2be0      	cmp	r3, #224	; 0xe0
 80063d6:	d008      	beq.n	80063ea <HAL_RCC_ClockConfig+0x15a>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2bf0      	cmp	r3, #240	; 0xf0
 80063de:	d004      	beq.n	80063ea <HAL_RCC_ClockConfig+0x15a>
 80063e0:	f240 3102 	movw	r1, #770	; 0x302
 80063e4:	483d      	ldr	r0, [pc, #244]	; (80064dc <HAL_RCC_ClockConfig+0x24c>)
 80063e6:	f7fc fcac 	bl	8002d42 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063ea:	4b3e      	ldr	r3, [pc, #248]	; (80064e4 <HAL_RCC_ClockConfig+0x254>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	493b      	ldr	r1, [pc, #236]	; (80064e4 <HAL_RCC_ClockConfig+0x254>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d051      	beq.n	80064ac <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00c      	beq.n	800642a <HAL_RCC_ClockConfig+0x19a>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d008      	beq.n	800642a <HAL_RCC_ClockConfig+0x19a>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b02      	cmp	r3, #2
 800641e:	d004      	beq.n	800642a <HAL_RCC_ClockConfig+0x19a>
 8006420:	f240 3109 	movw	r1, #777	; 0x309
 8006424:	482d      	ldr	r0, [pc, #180]	; (80064dc <HAL_RCC_ClockConfig+0x24c>)
 8006426:	f7fc fc8c 	bl	8002d42 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d107      	bne.n	8006442 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006432:	4b2c      	ldr	r3, [pc, #176]	; (80064e4 <HAL_RCC_ClockConfig+0x254>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d115      	bne.n	800646a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e0bf      	b.n	80065c2 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d107      	bne.n	800645a <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800644a:	4b26      	ldr	r3, [pc, #152]	; (80064e4 <HAL_RCC_ClockConfig+0x254>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e0b3      	b.n	80065c2 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800645a:	4b22      	ldr	r3, [pc, #136]	; (80064e4 <HAL_RCC_ClockConfig+0x254>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e0ab      	b.n	80065c2 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800646a:	4b1e      	ldr	r3, [pc, #120]	; (80064e4 <HAL_RCC_ClockConfig+0x254>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f023 0203 	bic.w	r2, r3, #3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	491b      	ldr	r1, [pc, #108]	; (80064e4 <HAL_RCC_ClockConfig+0x254>)
 8006478:	4313      	orrs	r3, r2
 800647a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800647c:	f7fd f95a 	bl	8003734 <HAL_GetTick>
 8006480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006482:	e00a      	b.n	800649a <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006484:	f7fd f956 	bl	8003734 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006492:	4293      	cmp	r3, r2
 8006494:	d901      	bls.n	800649a <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e093      	b.n	80065c2 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800649a:	4b12      	ldr	r3, [pc, #72]	; (80064e4 <HAL_RCC_ClockConfig+0x254>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 020c 	and.w	r2, r3, #12
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d1eb      	bne.n	8006484 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064ac:	4b0c      	ldr	r3, [pc, #48]	; (80064e0 <HAL_RCC_ClockConfig+0x250>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 030f 	and.w	r3, r3, #15
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d216      	bcs.n	80064e8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ba:	4b09      	ldr	r3, [pc, #36]	; (80064e0 <HAL_RCC_ClockConfig+0x250>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f023 020f 	bic.w	r2, r3, #15
 80064c2:	4907      	ldr	r1, [pc, #28]	; (80064e0 <HAL_RCC_ClockConfig+0x250>)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ca:	4b05      	ldr	r3, [pc, #20]	; (80064e0 <HAL_RCC_ClockConfig+0x250>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 030f 	and.w	r3, r3, #15
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d007      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e072      	b.n	80065c2 <HAL_RCC_ClockConfig+0x332>
 80064dc:	08015998 	.word	0x08015998
 80064e0:	40023c00 	.word	0x40023c00
 80064e4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d025      	beq.n	8006540 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d018      	beq.n	800652e <HAL_RCC_ClockConfig+0x29e>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006504:	d013      	beq.n	800652e <HAL_RCC_ClockConfig+0x29e>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800650e:	d00e      	beq.n	800652e <HAL_RCC_ClockConfig+0x29e>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006518:	d009      	beq.n	800652e <HAL_RCC_ClockConfig+0x29e>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006522:	d004      	beq.n	800652e <HAL_RCC_ClockConfig+0x29e>
 8006524:	f240 3146 	movw	r1, #838	; 0x346
 8006528:	4828      	ldr	r0, [pc, #160]	; (80065cc <HAL_RCC_ClockConfig+0x33c>)
 800652a:	f7fc fc0a 	bl	8002d42 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800652e:	4b28      	ldr	r3, [pc, #160]	; (80065d0 <HAL_RCC_ClockConfig+0x340>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	4925      	ldr	r1, [pc, #148]	; (80065d0 <HAL_RCC_ClockConfig+0x340>)
 800653c:	4313      	orrs	r3, r2
 800653e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0308 	and.w	r3, r3, #8
 8006548:	2b00      	cmp	r3, #0
 800654a:	d026      	beq.n	800659a <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d018      	beq.n	8006586 <HAL_RCC_ClockConfig+0x2f6>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655c:	d013      	beq.n	8006586 <HAL_RCC_ClockConfig+0x2f6>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006566:	d00e      	beq.n	8006586 <HAL_RCC_ClockConfig+0x2f6>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006570:	d009      	beq.n	8006586 <HAL_RCC_ClockConfig+0x2f6>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800657a:	d004      	beq.n	8006586 <HAL_RCC_ClockConfig+0x2f6>
 800657c:	f240 314d 	movw	r1, #845	; 0x34d
 8006580:	4812      	ldr	r0, [pc, #72]	; (80065cc <HAL_RCC_ClockConfig+0x33c>)
 8006582:	f7fc fbde 	bl	8002d42 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006586:	4b12      	ldr	r3, [pc, #72]	; (80065d0 <HAL_RCC_ClockConfig+0x340>)
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	490e      	ldr	r1, [pc, #56]	; (80065d0 <HAL_RCC_ClockConfig+0x340>)
 8006596:	4313      	orrs	r3, r2
 8006598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800659a:	f000 f821 	bl	80065e0 <HAL_RCC_GetSysClockFreq>
 800659e:	4602      	mov	r2, r0
 80065a0:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <HAL_RCC_ClockConfig+0x340>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	091b      	lsrs	r3, r3, #4
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	490a      	ldr	r1, [pc, #40]	; (80065d4 <HAL_RCC_ClockConfig+0x344>)
 80065ac:	5ccb      	ldrb	r3, [r1, r3]
 80065ae:	fa22 f303 	lsr.w	r3, r2, r3
 80065b2:	4a09      	ldr	r2, [pc, #36]	; (80065d8 <HAL_RCC_ClockConfig+0x348>)
 80065b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80065b6:	4b09      	ldr	r3, [pc, #36]	; (80065dc <HAL_RCC_ClockConfig+0x34c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fd f876 	bl	80036ac <HAL_InitTick>

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	08015998 	.word	0x08015998
 80065d0:	40023800 	.word	0x40023800
 80065d4:	08015ac8 	.word	0x08015ac8
 80065d8:	20000000 	.word	0x20000000
 80065dc:	20000004 	.word	0x20000004

080065e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065e4:	b090      	sub	sp, #64	; 0x40
 80065e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	637b      	str	r3, [r7, #52]	; 0x34
 80065ec:	2300      	movs	r3, #0
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065f0:	2300      	movs	r3, #0
 80065f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065f8:	4b59      	ldr	r3, [pc, #356]	; (8006760 <HAL_RCC_GetSysClockFreq+0x180>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f003 030c 	and.w	r3, r3, #12
 8006600:	2b08      	cmp	r3, #8
 8006602:	d00d      	beq.n	8006620 <HAL_RCC_GetSysClockFreq+0x40>
 8006604:	2b08      	cmp	r3, #8
 8006606:	f200 80a1 	bhi.w	800674c <HAL_RCC_GetSysClockFreq+0x16c>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <HAL_RCC_GetSysClockFreq+0x34>
 800660e:	2b04      	cmp	r3, #4
 8006610:	d003      	beq.n	800661a <HAL_RCC_GetSysClockFreq+0x3a>
 8006612:	e09b      	b.n	800674c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006614:	4b53      	ldr	r3, [pc, #332]	; (8006764 <HAL_RCC_GetSysClockFreq+0x184>)
 8006616:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006618:	e09b      	b.n	8006752 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800661a:	4b53      	ldr	r3, [pc, #332]	; (8006768 <HAL_RCC_GetSysClockFreq+0x188>)
 800661c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800661e:	e098      	b.n	8006752 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006620:	4b4f      	ldr	r3, [pc, #316]	; (8006760 <HAL_RCC_GetSysClockFreq+0x180>)
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800662a:	4b4d      	ldr	r3, [pc, #308]	; (8006760 <HAL_RCC_GetSysClockFreq+0x180>)
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d028      	beq.n	8006688 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006636:	4b4a      	ldr	r3, [pc, #296]	; (8006760 <HAL_RCC_GetSysClockFreq+0x180>)
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	099b      	lsrs	r3, r3, #6
 800663c:	2200      	movs	r2, #0
 800663e:	623b      	str	r3, [r7, #32]
 8006640:	627a      	str	r2, [r7, #36]	; 0x24
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006648:	2100      	movs	r1, #0
 800664a:	4b47      	ldr	r3, [pc, #284]	; (8006768 <HAL_RCC_GetSysClockFreq+0x188>)
 800664c:	fb03 f201 	mul.w	r2, r3, r1
 8006650:	2300      	movs	r3, #0
 8006652:	fb00 f303 	mul.w	r3, r0, r3
 8006656:	4413      	add	r3, r2
 8006658:	4a43      	ldr	r2, [pc, #268]	; (8006768 <HAL_RCC_GetSysClockFreq+0x188>)
 800665a:	fba0 1202 	umull	r1, r2, r0, r2
 800665e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006660:	460a      	mov	r2, r1
 8006662:	62ba      	str	r2, [r7, #40]	; 0x28
 8006664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006666:	4413      	add	r3, r2
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800666a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666c:	2200      	movs	r2, #0
 800666e:	61bb      	str	r3, [r7, #24]
 8006670:	61fa      	str	r2, [r7, #28]
 8006672:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006676:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800667a:	f7fa fb25 	bl	8000cc8 <__aeabi_uldivmod>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	4613      	mov	r3, r2
 8006684:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006686:	e053      	b.n	8006730 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006688:	4b35      	ldr	r3, [pc, #212]	; (8006760 <HAL_RCC_GetSysClockFreq+0x180>)
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	099b      	lsrs	r3, r3, #6
 800668e:	2200      	movs	r2, #0
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	617a      	str	r2, [r7, #20]
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800669a:	f04f 0b00 	mov.w	fp, #0
 800669e:	4652      	mov	r2, sl
 80066a0:	465b      	mov	r3, fp
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f04f 0100 	mov.w	r1, #0
 80066aa:	0159      	lsls	r1, r3, #5
 80066ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066b0:	0150      	lsls	r0, r2, #5
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	ebb2 080a 	subs.w	r8, r2, sl
 80066ba:	eb63 090b 	sbc.w	r9, r3, fp
 80066be:	f04f 0200 	mov.w	r2, #0
 80066c2:	f04f 0300 	mov.w	r3, #0
 80066c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80066ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80066ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80066d2:	ebb2 0408 	subs.w	r4, r2, r8
 80066d6:	eb63 0509 	sbc.w	r5, r3, r9
 80066da:	f04f 0200 	mov.w	r2, #0
 80066de:	f04f 0300 	mov.w	r3, #0
 80066e2:	00eb      	lsls	r3, r5, #3
 80066e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066e8:	00e2      	lsls	r2, r4, #3
 80066ea:	4614      	mov	r4, r2
 80066ec:	461d      	mov	r5, r3
 80066ee:	eb14 030a 	adds.w	r3, r4, sl
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	eb45 030b 	adc.w	r3, r5, fp
 80066f8:	607b      	str	r3, [r7, #4]
 80066fa:	f04f 0200 	mov.w	r2, #0
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006706:	4629      	mov	r1, r5
 8006708:	028b      	lsls	r3, r1, #10
 800670a:	4621      	mov	r1, r4
 800670c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006710:	4621      	mov	r1, r4
 8006712:	028a      	lsls	r2, r1, #10
 8006714:	4610      	mov	r0, r2
 8006716:	4619      	mov	r1, r3
 8006718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671a:	2200      	movs	r2, #0
 800671c:	60bb      	str	r3, [r7, #8]
 800671e:	60fa      	str	r2, [r7, #12]
 8006720:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006724:	f7fa fad0 	bl	8000cc8 <__aeabi_uldivmod>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	4613      	mov	r3, r2
 800672e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006730:	4b0b      	ldr	r3, [pc, #44]	; (8006760 <HAL_RCC_GetSysClockFreq+0x180>)
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	0c1b      	lsrs	r3, r3, #16
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	3301      	adds	r3, #1
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8006740:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	fbb2 f3f3 	udiv	r3, r2, r3
 8006748:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800674a:	e002      	b.n	8006752 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800674c:	4b05      	ldr	r3, [pc, #20]	; (8006764 <HAL_RCC_GetSysClockFreq+0x184>)
 800674e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006754:	4618      	mov	r0, r3
 8006756:	3740      	adds	r7, #64	; 0x40
 8006758:	46bd      	mov	sp, r7
 800675a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800675e:	bf00      	nop
 8006760:	40023800 	.word	0x40023800
 8006764:	00f42400 	.word	0x00f42400
 8006768:	017d7840 	.word	0x017d7840

0800676c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800676c:	b480      	push	{r7}
 800676e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006770:	4b03      	ldr	r3, [pc, #12]	; (8006780 <HAL_RCC_GetHCLKFreq+0x14>)
 8006772:	681b      	ldr	r3, [r3, #0]
}
 8006774:	4618      	mov	r0, r3
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	20000000 	.word	0x20000000

08006784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006788:	f7ff fff0 	bl	800676c <HAL_RCC_GetHCLKFreq>
 800678c:	4602      	mov	r2, r0
 800678e:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	0a9b      	lsrs	r3, r3, #10
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	4903      	ldr	r1, [pc, #12]	; (80067a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800679a:	5ccb      	ldrb	r3, [r1, r3]
 800679c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40023800 	.word	0x40023800
 80067a8:	08015ad8 	.word	0x08015ad8

080067ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80067b0:	f7ff ffdc 	bl	800676c <HAL_RCC_GetHCLKFreq>
 80067b4:	4602      	mov	r2, r0
 80067b6:	4b05      	ldr	r3, [pc, #20]	; (80067cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	0b5b      	lsrs	r3, r3, #13
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	4903      	ldr	r1, [pc, #12]	; (80067d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067c2:	5ccb      	ldrb	r3, [r1, r3]
 80067c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	40023800 	.word	0x40023800
 80067d0:	08015ad8 	.word	0x08015ad8

080067d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f040 8089 	bne.w	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0308 	and.w	r3, r3, #8
 8006806:	2b00      	cmp	r3, #0
 8006808:	f040 8082 	bne.w	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0310 	and.w	r3, r3, #16
 8006814:	2b00      	cmp	r3, #0
 8006816:	d17b      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006820:	2b00      	cmp	r3, #0
 8006822:	d175      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682c:	2b00      	cmp	r3, #0
 800682e:	d16f      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006838:	2b00      	cmp	r3, #0
 800683a:	d169      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006844:	2b00      	cmp	r3, #0
 8006846:	d163      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006850:	2b00      	cmp	r3, #0
 8006852:	d15d      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800685c:	2b00      	cmp	r3, #0
 800685e:	d157      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d151      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d14b      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d145      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d13f      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d139      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d133      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d12d      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d127      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d121      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d11b      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d115      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10f      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d109      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0320 	and.w	r3, r3, #32
 8006904:	2b00      	cmp	r3, #0
 8006906:	d103      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006908:	2172      	movs	r1, #114	; 0x72
 800690a:	4895      	ldr	r0, [pc, #596]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800690c:	f7fc fa19 	bl	8002d42 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d01f      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006920:	2b00      	cmp	r3, #0
 8006922:	d008      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006928:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800692c:	d003      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800692e:	2178      	movs	r1, #120	; 0x78
 8006930:	488b      	ldr	r0, [pc, #556]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006932:	f7fc fa06 	bl	8002d42 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006936:	4b8b      	ldr	r3, [pc, #556]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	4a8a      	ldr	r2, [pc, #552]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800693c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006940:	6093      	str	r3, [r2, #8]
 8006942:	4b88      	ldr	r3, [pc, #544]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694a:	4986      	ldr	r1, [pc, #536]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800694c:	4313      	orrs	r3, r2
 800694e:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8006958:	2301      	movs	r3, #1
 800695a:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d029      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00d      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006974:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006978:	d008      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800697e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006982:	d003      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006984:	2188      	movs	r1, #136	; 0x88
 8006986:	4876      	ldr	r0, [pc, #472]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006988:	f7fc f9db 	bl	8002d42 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800698c:	4b75      	ldr	r3, [pc, #468]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800698e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006992:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699a:	4972      	ldr	r1, [pc, #456]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800699c:	4313      	orrs	r3, r2
 800699e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069aa:	d101      	bne.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 80069ac:	2301      	movs	r3, #1
 80069ae:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 80069b8:	2301      	movs	r3, #1
 80069ba:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d029      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00d      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x218>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069d8:	d008      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x218>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069e2:	d003      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x218>
 80069e4:	219c      	movs	r1, #156	; 0x9c
 80069e6:	485e      	ldr	r0, [pc, #376]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80069e8:	f7fc f9ab 	bl	8002d42 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80069ec:	4b5d      	ldr	r3, [pc, #372]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80069ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	495a      	ldr	r1, [pc, #360]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a0a:	d101      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 8186 	beq.w	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a42:	f000 80e4 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a4e:	f000 80de 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a56:	4a44      	ldr	r2, [pc, #272]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	f000 80d8 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a62:	4a42      	ldr	r2, [pc, #264]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	f000 80d2 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	4a40      	ldr	r2, [pc, #256]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	f000 80cc 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	4a3e      	ldr	r2, [pc, #248]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	f000 80c6 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	4a3c      	ldr	r2, [pc, #240]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	f000 80c0 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a92:	4a3a      	ldr	r2, [pc, #232]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	f000 80ba 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9e:	4a38      	ldr	r2, [pc, #224]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	f000 80b4 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aaa:	4a36      	ldr	r2, [pc, #216]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	f000 80ae 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab6:	4a34      	ldr	r2, [pc, #208]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	f000 80a8 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac2:	4a32      	ldr	r2, [pc, #200]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	f000 80a2 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ace:	4a30      	ldr	r2, [pc, #192]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	f000 809c 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ada:	4a2e      	ldr	r2, [pc, #184]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	f000 8096 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	4a2c      	ldr	r2, [pc, #176]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	f000 8090 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af2:	4a2a      	ldr	r2, [pc, #168]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	f000 808a 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	4a28      	ldr	r2, [pc, #160]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	f000 8084 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0a:	4a26      	ldr	r2, [pc, #152]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d07e      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b14:	4a24      	ldr	r2, [pc, #144]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d079      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1e:	4a23      	ldr	r2, [pc, #140]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d074      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b28:	4a21      	ldr	r2, [pc, #132]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d06f      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	4a20      	ldr	r2, [pc, #128]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d06a      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3c:	4a1e      	ldr	r2, [pc, #120]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d065      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b46:	4a1d      	ldr	r2, [pc, #116]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d060      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b50:	4a1b      	ldr	r2, [pc, #108]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d05b      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5a:	4a1a      	ldr	r2, [pc, #104]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	e033      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006b60:	080159d0 	.word	0x080159d0
 8006b64:	40023800 	.word	0x40023800
 8006b68:	00020300 	.word	0x00020300
 8006b6c:	00030300 	.word	0x00030300
 8006b70:	00040300 	.word	0x00040300
 8006b74:	00050300 	.word	0x00050300
 8006b78:	00060300 	.word	0x00060300
 8006b7c:	00070300 	.word	0x00070300
 8006b80:	00080300 	.word	0x00080300
 8006b84:	00090300 	.word	0x00090300
 8006b88:	000a0300 	.word	0x000a0300
 8006b8c:	000b0300 	.word	0x000b0300
 8006b90:	000c0300 	.word	0x000c0300
 8006b94:	000d0300 	.word	0x000d0300
 8006b98:	000e0300 	.word	0x000e0300
 8006b9c:	000f0300 	.word	0x000f0300
 8006ba0:	00100300 	.word	0x00100300
 8006ba4:	00110300 	.word	0x00110300
 8006ba8:	00120300 	.word	0x00120300
 8006bac:	00130300 	.word	0x00130300
 8006bb0:	00140300 	.word	0x00140300
 8006bb4:	00150300 	.word	0x00150300
 8006bb8:	00160300 	.word	0x00160300
 8006bbc:	00170300 	.word	0x00170300
 8006bc0:	00180300 	.word	0x00180300
 8006bc4:	00190300 	.word	0x00190300
 8006bc8:	d021      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bce:	4a4c      	ldr	r2, [pc, #304]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d01c      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd8:	4a4a      	ldr	r2, [pc, #296]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d017      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be2:	4a49      	ldr	r2, [pc, #292]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d012      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bec:	4a47      	ldr	r2, [pc, #284]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d00d      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf6:	4a46      	ldr	r2, [pc, #280]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d008      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c00:	4a44      	ldr	r2, [pc, #272]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d003      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006c06:	21b7      	movs	r1, #183	; 0xb7
 8006c08:	4843      	ldr	r0, [pc, #268]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8006c0a:	f7fc f89a 	bl	8002d42 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c0e:	4b43      	ldr	r3, [pc, #268]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	4a42      	ldr	r2, [pc, #264]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c18:	6413      	str	r3, [r2, #64]	; 0x40
 8006c1a:	4b40      	ldr	r3, [pc, #256]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c22:	60bb      	str	r3, [r7, #8]
 8006c24:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c26:	4b3e      	ldr	r3, [pc, #248]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a3d      	ldr	r2, [pc, #244]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c32:	f7fc fd7f 	bl	8003734 <HAL_GetTick>
 8006c36:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c38:	e009      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c3a:	f7fc fd7b 	bl	8003734 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b64      	cmp	r3, #100	; 0x64
 8006c46:	d902      	bls.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	f000 bd9f 	b.w	800778c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c4e:	4b34      	ldr	r3, [pc, #208]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0ef      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c5a:	4b30      	ldr	r3, [pc, #192]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c62:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d036      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d02f      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c78:	4b28      	ldr	r3, [pc, #160]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c80:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c82:	4b26      	ldr	r3, [pc, #152]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c86:	4a25      	ldr	r2, [pc, #148]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c8c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c8e:	4b23      	ldr	r3, [pc, #140]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c92:	4a22      	ldr	r2, [pc, #136]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006c9a:	4a20      	ldr	r2, [pc, #128]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ca0:	4b1e      	ldr	r3, [pc, #120]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d115      	bne.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cac:	f7fc fd42 	bl	8003734 <HAL_GetTick>
 8006cb0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cb2:	e00b      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cb4:	f7fc fd3e 	bl	8003734 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d902      	bls.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	f000 bd60 	b.w	800778c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ccc:	4b13      	ldr	r3, [pc, #76]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d0ed      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ce4:	d120      	bne.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8006ce6:	4b0d      	ldr	r3, [pc, #52]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cf2:	4b0c      	ldr	r3, [pc, #48]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006cf4:	400b      	ands	r3, r1
 8006cf6:	4909      	ldr	r1, [pc, #36]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	608b      	str	r3, [r1, #8]
 8006cfc:	e01a      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8006cfe:	bf00      	nop
 8006d00:	001a0300 	.word	0x001a0300
 8006d04:	001b0300 	.word	0x001b0300
 8006d08:	001c0300 	.word	0x001c0300
 8006d0c:	001d0300 	.word	0x001d0300
 8006d10:	001e0300 	.word	0x001e0300
 8006d14:	001f0300 	.word	0x001f0300
 8006d18:	080159d0 	.word	0x080159d0
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	40007000 	.word	0x40007000
 8006d24:	0ffffcff 	.word	0x0ffffcff
 8006d28:	4b9a      	ldr	r3, [pc, #616]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	4a99      	ldr	r2, [pc, #612]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d32:	6093      	str	r3, [r2, #8]
 8006d34:	4b97      	ldr	r3, [pc, #604]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d40:	4994      	ldr	r1, [pc, #592]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0310 	and.w	r3, r3, #16
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d01d      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d008      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d62:	d003      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006d64:	21f1      	movs	r1, #241	; 0xf1
 8006d66:	488c      	ldr	r0, [pc, #560]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006d68:	f7fb ffeb 	bl	8002d42 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d6c:	4b89      	ldr	r3, [pc, #548]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d72:	4a88      	ldr	r2, [pc, #544]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d78:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006d7c:	4b85      	ldr	r3, [pc, #532]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d7e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d86:	4983      	ldr	r1, [pc, #524]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d01c      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00d      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006daa:	d008      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006db0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006db4:	d003      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006db6:	21fb      	movs	r1, #251	; 0xfb
 8006db8:	4877      	ldr	r0, [pc, #476]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006dba:	f7fb ffc2 	bl	8002d42 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006dbe:	4b75      	ldr	r3, [pc, #468]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dcc:	4971      	ldr	r1, [pc, #452]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01d      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00e      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006df0:	d009      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006df6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006dfa:	d004      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006dfc:	f240 1105 	movw	r1, #261	; 0x105
 8006e00:	4865      	ldr	r0, [pc, #404]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006e02:	f7fb ff9e 	bl	8002d42 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e06:	4b63      	ldr	r3, [pc, #396]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e14:	495f      	ldr	r1, [pc, #380]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d01d      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00e      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e38:	d009      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e42:	d004      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006e44:	f240 110f 	movw	r1, #271	; 0x10f
 8006e48:	4853      	ldr	r0, [pc, #332]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006e4a:	f7fb ff7a 	bl	8002d42 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e4e:	4b51      	ldr	r3, [pc, #324]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e5c:	494d      	ldr	r1, [pc, #308]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01d      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00e      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e80:	d009      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e8a:	d004      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006e8c:	f240 1119 	movw	r1, #281	; 0x119
 8006e90:	4841      	ldr	r0, [pc, #260]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006e92:	f7fb ff56 	bl	8002d42 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e96:	4b3f      	ldr	r3, [pc, #252]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea4:	493b      	ldr	r1, [pc, #236]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d01f      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d010      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d00c      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ecc:	2b03      	cmp	r3, #3
 8006ece:	d008      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d004      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006ed8:	f240 1123 	movw	r1, #291	; 0x123
 8006edc:	482e      	ldr	r0, [pc, #184]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006ede:	f7fb ff30 	bl	8002d42 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ee2:	4b2c      	ldr	r3, [pc, #176]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee8:	f023 0203 	bic.w	r2, r3, #3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef0:	4928      	ldr	r1, [pc, #160]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01f      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d010      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f10:	2b04      	cmp	r3, #4
 8006f12:	d00c      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f18:	2b0c      	cmp	r3, #12
 8006f1a:	d008      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d004      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006f24:	f240 112d 	movw	r1, #301	; 0x12d
 8006f28:	481b      	ldr	r0, [pc, #108]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006f2a:	f7fb ff0a 	bl	8002d42 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f2e:	4b19      	ldr	r3, [pc, #100]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f34:	f023 020c 	bic.w	r2, r3, #12
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f3c:	4915      	ldr	r1, [pc, #84]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d025      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d010      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5c:	2b10      	cmp	r3, #16
 8006f5e:	d00c      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f64:	2b30      	cmp	r3, #48	; 0x30
 8006f66:	d008      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f6c:	2b20      	cmp	r3, #32
 8006f6e:	d004      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006f70:	f240 1137 	movw	r1, #311	; 0x137
 8006f74:	4808      	ldr	r0, [pc, #32]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006f76:	f7fb fee4 	bl	8002d42 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f7a:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f88:	4902      	ldr	r1, [pc, #8]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006f90:	e004      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8006f92:	bf00      	nop
 8006f94:	40023800 	.word	0x40023800
 8006f98:	080159d0 	.word	0x080159d0
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d01f      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d010      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb4:	2b40      	cmp	r3, #64	; 0x40
 8006fb6:	d00c      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fbc:	2bc0      	cmp	r3, #192	; 0xc0
 8006fbe:	d008      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc4:	2b80      	cmp	r3, #128	; 0x80
 8006fc6:	d004      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006fc8:	f240 1141 	movw	r1, #321	; 0x141
 8006fcc:	48a0      	ldr	r0, [pc, #640]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006fce:	f7fb feb8 	bl	8002d42 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006fd2:	4ba0      	ldr	r3, [pc, #640]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe0:	499c      	ldr	r1, [pc, #624]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d022      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d013      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007004:	d00e      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800700e:	d009      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007018:	d004      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800701a:	f240 114b 	movw	r1, #331	; 0x14b
 800701e:	488c      	ldr	r0, [pc, #560]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007020:	f7fb fe8f 	bl	8002d42 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007024:	4b8b      	ldr	r3, [pc, #556]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800702a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007032:	4988      	ldr	r1, [pc, #544]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007034:	4313      	orrs	r3, r2
 8007036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007042:	2b00      	cmp	r3, #0
 8007044:	d022      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704a:	2b00      	cmp	r3, #0
 800704c:	d013      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007056:	d00e      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800705c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007060:	d009      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800706a:	d004      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800706c:	f240 1155 	movw	r1, #341	; 0x155
 8007070:	4877      	ldr	r0, [pc, #476]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007072:	f7fb fe66 	bl	8002d42 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007076:	4b77      	ldr	r3, [pc, #476]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800707c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007084:	4973      	ldr	r1, [pc, #460]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007086:	4313      	orrs	r3, r2
 8007088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d022      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d013      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a8:	d00e      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070b2:	d009      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070bc:	d004      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80070be:	f240 115f 	movw	r1, #351	; 0x15f
 80070c2:	4863      	ldr	r0, [pc, #396]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80070c4:	f7fb fe3d 	bl	8002d42 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80070c8:	4b62      	ldr	r3, [pc, #392]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80070ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d6:	495f      	ldr	r1, [pc, #380]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d022      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d013      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x946>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070fa:	d00e      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x946>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007100:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007104:	d009      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x946>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800710a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800710e:	d004      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x946>
 8007110:	f240 1169 	movw	r1, #361	; 0x169
 8007114:	484e      	ldr	r0, [pc, #312]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007116:	f7fb fe14 	bl	8002d42 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800711a:	4b4e      	ldr	r3, [pc, #312]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800711c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007120:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007128:	494a      	ldr	r1, [pc, #296]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800712a:	4313      	orrs	r3, r2
 800712c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d018      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007144:	d008      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800714a:	2b00      	cmp	r3, #0
 800714c:	d004      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800714e:	f240 1173 	movw	r1, #371	; 0x173
 8007152:	483f      	ldr	r0, [pc, #252]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007154:	f7fb fdf5 	bl	8002d42 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007158:	4b3e      	ldr	r3, [pc, #248]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800715a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007166:	493b      	ldr	r1, [pc, #236]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007168:	4313      	orrs	r3, r2
 800716a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d01f      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800717e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007182:	d008      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007188:	2b00      	cmp	r3, #0
 800718a:	d004      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800718c:	f240 117d 	movw	r1, #381	; 0x17d
 8007190:	482f      	ldr	r0, [pc, #188]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007192:	f7fb fdd6 	bl	8002d42 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007196:	4b2f      	ldr	r3, [pc, #188]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071a4:	492b      	ldr	r1, [pc, #172]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071b4:	d101      	bne.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 80071b6:	2301      	movs	r3, #1
 80071b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0308 	and.w	r3, r3, #8
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 80071c6:	2301      	movs	r3, #1
 80071c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d022      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d013      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071e6:	d00e      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071f0:	d009      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071fa:	d004      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80071fc:	f240 1195 	movw	r1, #405	; 0x195
 8007200:	4813      	ldr	r0, [pc, #76]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007202:	f7fb fd9e 	bl	8002d42 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007206:	4b13      	ldr	r3, [pc, #76]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800720c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007214:	490f      	ldr	r1, [pc, #60]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007216:	4313      	orrs	r3, r2
 8007218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d020      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800722e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007232:	d009      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800723a:	2b00      	cmp	r3, #0
 800723c:	d004      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800723e:	f240 119f 	movw	r1, #415	; 0x19f
 8007242:	4803      	ldr	r0, [pc, #12]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007244:	f7fb fd7d 	bl	8002d42 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007248:	4b02      	ldr	r3, [pc, #8]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800724a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724e:	e003      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8007250:	080159d0 	.word	0x080159d0
 8007254:	40023800 	.word	0x40023800
 8007258:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007262:	4910      	ldr	r1, [pc, #64]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8007264:	4313      	orrs	r3, r2
 8007266:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d006      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 8155 	beq.w	8007528 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800727e:	4b09      	ldr	r3, [pc, #36]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a08      	ldr	r2, [pc, #32]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8007284:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800728a:	f7fc fa53 	bl	8003734 <HAL_GetTick>
 800728e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007290:	e00a      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007292:	f7fc fa4f 	bl	8003734 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	2b64      	cmp	r3, #100	; 0x64
 800729e:	d903      	bls.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e273      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80072a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072a8:	4b9a      	ldr	r3, [pc, #616]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1ee      	bne.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	2b31      	cmp	r3, #49	; 0x31
 80072ba:	d904      	bls.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80072c4:	d904      	bls.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 80072c6:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80072ca:	4893      	ldr	r0, [pc, #588]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80072cc:	f7fb fd39 	bl	8002d42 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d02e      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xb66>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d12a      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d903      	bls.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	2b07      	cmp	r3, #7
 80072f2:	d904      	bls.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80072f4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80072f8:	4887      	ldr	r0, [pc, #540]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80072fa:	f7fb fd22 	bl	8002d42 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80072fe:	4b85      	ldr	r3, [pc, #532]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007304:	0c1b      	lsrs	r3, r3, #16
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800730c:	4b81      	ldr	r3, [pc, #516]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800730e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007312:	0e1b      	lsrs	r3, r3, #24
 8007314:	f003 030f 	and.w	r3, r3, #15
 8007318:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	019a      	lsls	r2, r3, #6
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	041b      	lsls	r3, r3, #16
 8007324:	431a      	orrs	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	061b      	lsls	r3, r3, #24
 800732a:	431a      	orrs	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	071b      	lsls	r3, r3, #28
 8007332:	4978      	ldr	r1, [pc, #480]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007334:	4313      	orrs	r3, r2
 8007336:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d004      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800734e:	d00a      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007358:	2b00      	cmp	r3, #0
 800735a:	d048      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007364:	d143      	bne.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d903      	bls.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	2b0f      	cmp	r3, #15
 8007374:	d904      	bls.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007376:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800737a:	4867      	ldr	r0, [pc, #412]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800737c:	f7fb fce1 	bl	8002d42 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	2b20      	cmp	r3, #32
 800738e:	d904      	bls.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8007390:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8007394:	4860      	ldr	r0, [pc, #384]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007396:	f7fb fcd4 	bl	8002d42 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800739a:	4b5e      	ldr	r3, [pc, #376]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800739c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073a0:	0c1b      	lsrs	r3, r3, #16
 80073a2:	f003 0303 	and.w	r3, r3, #3
 80073a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073a8:	4b5a      	ldr	r3, [pc, #360]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80073aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ae:	0f1b      	lsrs	r3, r3, #28
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	019a      	lsls	r2, r3, #6
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	041b      	lsls	r3, r3, #16
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	061b      	lsls	r3, r3, #24
 80073c8:	431a      	orrs	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	071b      	lsls	r3, r3, #28
 80073ce:	4951      	ldr	r1, [pc, #324]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80073d6:	4b4f      	ldr	r3, [pc, #316]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80073d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073dc:	f023 021f 	bic.w	r2, r3, #31
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e4:	3b01      	subs	r3, #1
 80073e6:	494b      	ldr	r1, [pc, #300]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d032      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d010      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d00c      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	2b02      	cmp	r3, #2
 8007410:	d008      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	2b03      	cmp	r3, #3
 8007418:	d004      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800741a:	f240 2105 	movw	r1, #517	; 0x205
 800741e:	483e      	ldr	r0, [pc, #248]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007420:	f7fb fc8f 	bl	8002d42 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007424:	4b3b      	ldr	r3, [pc, #236]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800742a:	0e1b      	lsrs	r3, r3, #24
 800742c:	f003 030f 	and.w	r3, r3, #15
 8007430:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007432:	4b38      	ldr	r3, [pc, #224]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007438:	0f1b      	lsrs	r3, r3, #28
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	019a      	lsls	r2, r3, #6
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	041b      	lsls	r3, r3, #16
 800744c:	431a      	orrs	r2, r3
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	061b      	lsls	r3, r3, #24
 8007452:	431a      	orrs	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	071b      	lsls	r3, r3, #28
 8007458:	492e      	ldr	r1, [pc, #184]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800745a:	4313      	orrs	r3, r2
 800745c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d040      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d010      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d00c      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	2b02      	cmp	r3, #2
 8007482:	d008      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	2b03      	cmp	r3, #3
 800748a:	d004      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800748c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8007490:	4821      	ldr	r0, [pc, #132]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007492:	f7fb fc56 	bl	8002d42 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d903      	bls.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	2b07      	cmp	r3, #7
 80074a4:	d904      	bls.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80074a6:	f240 2115 	movw	r1, #533	; 0x215
 80074aa:	481b      	ldr	r0, [pc, #108]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80074ac:	f7fb fc49 	bl	8002d42 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d903      	bls.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	2b0f      	cmp	r3, #15
 80074be:	d904      	bls.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 80074c0:	f240 2116 	movw	r1, #534	; 0x216
 80074c4:	4814      	ldr	r0, [pc, #80]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80074c6:	f7fb fc3c 	bl	8002d42 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	019a      	lsls	r2, r3, #6
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	041b      	lsls	r3, r3, #16
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	061b      	lsls	r3, r3, #24
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	071b      	lsls	r3, r3, #28
 80074e6:	490b      	ldr	r1, [pc, #44]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074ee:	4b09      	ldr	r3, [pc, #36]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a08      	ldr	r2, [pc, #32]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80074f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074fa:	f7fc f91b 	bl	8003734 <HAL_GetTick>
 80074fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007500:	e00c      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007502:	f7fc f917 	bl	8003734 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	2b64      	cmp	r3, #100	; 0x64
 800750e:	d905      	bls.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e13b      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8007514:	40023800 	.word	0x40023800
 8007518:	080159d0 	.word	0x080159d0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800751c:	4b9d      	ldr	r3, [pc, #628]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d0ec      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	2b01      	cmp	r3, #1
 800752c:	f040 812d 	bne.w	800778a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007530:	4b98      	ldr	r3, [pc, #608]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a97      	ldr	r2, [pc, #604]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800753a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800753c:	f7fc f8fa 	bl	8003734 <HAL_GetTick>
 8007540:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007542:	e008      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007544:	f7fc f8f6 	bl	8003734 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b64      	cmp	r3, #100	; 0x64
 8007550:	d901      	bls.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e11a      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007556:	4b8f      	ldr	r3, [pc, #572]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800755e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007562:	d0ef      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	2b31      	cmp	r3, #49	; 0x31
 800756a:	d904      	bls.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007574:	d904      	bls.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8007576:	f44f 7111 	mov.w	r1, #580	; 0x244
 800757a:	4887      	ldr	r0, [pc, #540]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800757c:	f7fb fbe1 	bl	8002d42 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007590:	2b00      	cmp	r3, #0
 8007592:	d009      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800759c:	2b00      	cmp	r3, #0
 800759e:	d048      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d144      	bne.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d903      	bls.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	2b0f      	cmp	r3, #15
 80075b6:	d904      	bls.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xdee>
 80075b8:	f240 214b 	movw	r1, #587	; 0x24b
 80075bc:	4876      	ldr	r0, [pc, #472]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80075be:	f7fb fbc0 	bl	8002d42 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d904      	bls.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80075d2:	f240 214d 	movw	r1, #589	; 0x24d
 80075d6:	4870      	ldr	r0, [pc, #448]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80075d8:	f7fb fbb3 	bl	8002d42 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075dc:	4b6d      	ldr	r3, [pc, #436]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80075de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e2:	0c1b      	lsrs	r3, r3, #16
 80075e4:	f003 0303 	and.w	r3, r3, #3
 80075e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075ea:	4b6a      	ldr	r3, [pc, #424]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80075ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f0:	0f1b      	lsrs	r3, r3, #28
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	019a      	lsls	r2, r3, #6
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	041b      	lsls	r3, r3, #16
 8007602:	431a      	orrs	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	061b      	lsls	r3, r3, #24
 800760a:	431a      	orrs	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	071b      	lsls	r3, r3, #28
 8007610:	4960      	ldr	r1, [pc, #384]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007612:	4313      	orrs	r3, r2
 8007614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007618:	4b5e      	ldr	r3, [pc, #376]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800761a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800761e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007626:	3b01      	subs	r3, #1
 8007628:	021b      	lsls	r3, r3, #8
 800762a:	495a      	ldr	r1, [pc, #360]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800762c:	4313      	orrs	r3, r2
 800762e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d037      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xeda>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007642:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007646:	d132      	bne.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a1b      	ldr	r3, [r3, #32]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d010      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d00c      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d008      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a1b      	ldr	r3, [r3, #32]
 8007664:	2b03      	cmp	r3, #3
 8007666:	d004      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8007668:	f44f 7118 	mov.w	r1, #608	; 0x260
 800766c:	484a      	ldr	r0, [pc, #296]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800766e:	f7fb fb68 	bl	8002d42 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007672:	4b48      	ldr	r3, [pc, #288]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007678:	0e1b      	lsrs	r3, r3, #24
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007680:	4b44      	ldr	r3, [pc, #272]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007686:	0f1b      	lsrs	r3, r3, #28
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	019a      	lsls	r2, r3, #6
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	041b      	lsls	r3, r3, #16
 800769a:	431a      	orrs	r2, r3
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	061b      	lsls	r3, r3, #24
 80076a0:	431a      	orrs	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	071b      	lsls	r3, r3, #28
 80076a6:	493b      	ldr	r1, [pc, #236]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0308 	and.w	r3, r3, #8
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d04d      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d903      	bls.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xef6>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	2b07      	cmp	r3, #7
 80076c8:	d904      	bls.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 80076ca:	f240 216f 	movw	r1, #623	; 0x26f
 80076ce:	4832      	ldr	r0, [pc, #200]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80076d0:	f7fb fb37 	bl	8002d42 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d013      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076e4:	d00e      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076ee:	d009      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076f8:	d004      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80076fa:	f44f 711c 	mov.w	r1, #624	; 0x270
 80076fe:	4826      	ldr	r0, [pc, #152]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007700:	f7fb fb1f 	bl	8002d42 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007704:	4b23      	ldr	r3, [pc, #140]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800770a:	0e1b      	lsrs	r3, r3, #24
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007712:	4b20      	ldr	r3, [pc, #128]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007718:	0c1b      	lsrs	r3, r3, #16
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	019a      	lsls	r2, r3, #6
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	041b      	lsls	r3, r3, #16
 800772a:	431a      	orrs	r2, r3
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	061b      	lsls	r3, r3, #24
 8007730:	431a      	orrs	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	071b      	lsls	r3, r3, #28
 8007738:	4916      	ldr	r1, [pc, #88]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800773a:	4313      	orrs	r3, r2
 800773c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007740:	4b14      	ldr	r3, [pc, #80]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007746:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774e:	4911      	ldr	r1, [pc, #68]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007750:	4313      	orrs	r3, r2
 8007752:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007756:	4b0f      	ldr	r3, [pc, #60]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a0e      	ldr	r2, [pc, #56]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800775c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007762:	f7fb ffe7 	bl	8003734 <HAL_GetTick>
 8007766:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007768:	e008      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800776a:	f7fb ffe3 	bl	8003734 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	2b64      	cmp	r3, #100	; 0x64
 8007776:	d901      	bls.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e007      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800777c:	4b05      	ldr	r3, [pc, #20]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007788:	d1ef      	bne.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3720      	adds	r7, #32
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	40023800 	.word	0x40023800
 8007798:	080159d0 	.word	0x080159d0

0800779c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e0f5      	b.n	800799a <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a7c      	ldr	r2, [pc, #496]	; (80079a4 <HAL_TIM_Base_Init+0x208>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d045      	beq.n	8007844 <HAL_TIM_Base_Init+0xa8>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c0:	d040      	beq.n	8007844 <HAL_TIM_Base_Init+0xa8>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a78      	ldr	r2, [pc, #480]	; (80079a8 <HAL_TIM_Base_Init+0x20c>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d03b      	beq.n	8007844 <HAL_TIM_Base_Init+0xa8>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a76      	ldr	r2, [pc, #472]	; (80079ac <HAL_TIM_Base_Init+0x210>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d036      	beq.n	8007844 <HAL_TIM_Base_Init+0xa8>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a75      	ldr	r2, [pc, #468]	; (80079b0 <HAL_TIM_Base_Init+0x214>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d031      	beq.n	8007844 <HAL_TIM_Base_Init+0xa8>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a73      	ldr	r2, [pc, #460]	; (80079b4 <HAL_TIM_Base_Init+0x218>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d02c      	beq.n	8007844 <HAL_TIM_Base_Init+0xa8>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a72      	ldr	r2, [pc, #456]	; (80079b8 <HAL_TIM_Base_Init+0x21c>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d027      	beq.n	8007844 <HAL_TIM_Base_Init+0xa8>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a70      	ldr	r2, [pc, #448]	; (80079bc <HAL_TIM_Base_Init+0x220>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d022      	beq.n	8007844 <HAL_TIM_Base_Init+0xa8>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a6f      	ldr	r2, [pc, #444]	; (80079c0 <HAL_TIM_Base_Init+0x224>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d01d      	beq.n	8007844 <HAL_TIM_Base_Init+0xa8>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a6d      	ldr	r2, [pc, #436]	; (80079c4 <HAL_TIM_Base_Init+0x228>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d018      	beq.n	8007844 <HAL_TIM_Base_Init+0xa8>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a6c      	ldr	r2, [pc, #432]	; (80079c8 <HAL_TIM_Base_Init+0x22c>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d013      	beq.n	8007844 <HAL_TIM_Base_Init+0xa8>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a6a      	ldr	r2, [pc, #424]	; (80079cc <HAL_TIM_Base_Init+0x230>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d00e      	beq.n	8007844 <HAL_TIM_Base_Init+0xa8>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a69      	ldr	r2, [pc, #420]	; (80079d0 <HAL_TIM_Base_Init+0x234>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d009      	beq.n	8007844 <HAL_TIM_Base_Init+0xa8>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a67      	ldr	r2, [pc, #412]	; (80079d4 <HAL_TIM_Base_Init+0x238>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d004      	beq.n	8007844 <HAL_TIM_Base_Init+0xa8>
 800783a:	f44f 718b 	mov.w	r1, #278	; 0x116
 800783e:	4866      	ldr	r0, [pc, #408]	; (80079d8 <HAL_TIM_Base_Init+0x23c>)
 8007840:	f7fb fa7f 	bl	8002d42 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d014      	beq.n	8007876 <HAL_TIM_Base_Init+0xda>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	2b10      	cmp	r3, #16
 8007852:	d010      	beq.n	8007876 <HAL_TIM_Base_Init+0xda>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	2b20      	cmp	r3, #32
 800785a:	d00c      	beq.n	8007876 <HAL_TIM_Base_Init+0xda>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	2b40      	cmp	r3, #64	; 0x40
 8007862:	d008      	beq.n	8007876 <HAL_TIM_Base_Init+0xda>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	2b60      	cmp	r3, #96	; 0x60
 800786a:	d004      	beq.n	8007876 <HAL_TIM_Base_Init+0xda>
 800786c:	f240 1117 	movw	r1, #279	; 0x117
 8007870:	4859      	ldr	r0, [pc, #356]	; (80079d8 <HAL_TIM_Base_Init+0x23c>)
 8007872:	f7fb fa66 	bl	8002d42 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00e      	beq.n	800789c <HAL_TIM_Base_Init+0x100>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007886:	d009      	beq.n	800789c <HAL_TIM_Base_Init+0x100>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007890:	d004      	beq.n	800789c <HAL_TIM_Base_Init+0x100>
 8007892:	f44f 718c 	mov.w	r1, #280	; 0x118
 8007896:	4850      	ldr	r0, [pc, #320]	; (80079d8 <HAL_TIM_Base_Init+0x23c>)
 8007898:	f7fb fa53 	bl	8002d42 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a4:	d004      	beq.n	80078b0 <HAL_TIM_Base_Init+0x114>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a41      	ldr	r2, [pc, #260]	; (80079b0 <HAL_TIM_Base_Init+0x214>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d107      	bne.n	80078c0 <HAL_TIM_Base_Init+0x124>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bf14      	ite	ne
 80078b8:	2301      	movne	r3, #1
 80078ba:	2300      	moveq	r3, #0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	e00e      	b.n	80078de <HAL_TIM_Base_Init+0x142>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d006      	beq.n	80078d6 <HAL_TIM_Base_Init+0x13a>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078d0:	d201      	bcs.n	80078d6 <HAL_TIM_Base_Init+0x13a>
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <HAL_TIM_Base_Init+0x13c>
 80078d6:	2300      	movs	r3, #0
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d104      	bne.n	80078ec <HAL_TIM_Base_Init+0x150>
 80078e2:	f240 1119 	movw	r1, #281	; 0x119
 80078e6:	483c      	ldr	r0, [pc, #240]	; (80079d8 <HAL_TIM_Base_Init+0x23c>)
 80078e8:	f7fb fa2b 	bl	8002d42 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d008      	beq.n	8007906 <HAL_TIM_Base_Init+0x16a>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	2b80      	cmp	r3, #128	; 0x80
 80078fa:	d004      	beq.n	8007906 <HAL_TIM_Base_Init+0x16a>
 80078fc:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8007900:	4835      	ldr	r0, [pc, #212]	; (80079d8 <HAL_TIM_Base_Init+0x23c>)
 8007902:	f7fb fa1e 	bl	8002d42 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d106      	bne.n	8007920 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fb fd76 	bl	800340c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3304      	adds	r3, #4
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f001 fa52 	bl	8008ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	40010000 	.word	0x40010000
 80079a8:	40000400 	.word	0x40000400
 80079ac:	40000800 	.word	0x40000800
 80079b0:	40000c00 	.word	0x40000c00
 80079b4:	40001000 	.word	0x40001000
 80079b8:	40001400 	.word	0x40001400
 80079bc:	40010400 	.word	0x40010400
 80079c0:	40014000 	.word	0x40014000
 80079c4:	40014400 	.word	0x40014400
 80079c8:	40014800 	.word	0x40014800
 80079cc:	40001800 	.word	0x40001800
 80079d0:	40001c00 	.word	0x40001c00
 80079d4:	40002000 	.word	0x40002000
 80079d8:	08015a0c 	.word	0x08015a0c

080079dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e0f5      	b.n	8007bda <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a7c      	ldr	r2, [pc, #496]	; (8007be4 <HAL_TIM_PWM_Init+0x208>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d045      	beq.n	8007a84 <HAL_TIM_PWM_Init+0xa8>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a00:	d040      	beq.n	8007a84 <HAL_TIM_PWM_Init+0xa8>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a78      	ldr	r2, [pc, #480]	; (8007be8 <HAL_TIM_PWM_Init+0x20c>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d03b      	beq.n	8007a84 <HAL_TIM_PWM_Init+0xa8>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a76      	ldr	r2, [pc, #472]	; (8007bec <HAL_TIM_PWM_Init+0x210>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d036      	beq.n	8007a84 <HAL_TIM_PWM_Init+0xa8>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a75      	ldr	r2, [pc, #468]	; (8007bf0 <HAL_TIM_PWM_Init+0x214>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d031      	beq.n	8007a84 <HAL_TIM_PWM_Init+0xa8>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a73      	ldr	r2, [pc, #460]	; (8007bf4 <HAL_TIM_PWM_Init+0x218>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d02c      	beq.n	8007a84 <HAL_TIM_PWM_Init+0xa8>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a72      	ldr	r2, [pc, #456]	; (8007bf8 <HAL_TIM_PWM_Init+0x21c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d027      	beq.n	8007a84 <HAL_TIM_PWM_Init+0xa8>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a70      	ldr	r2, [pc, #448]	; (8007bfc <HAL_TIM_PWM_Init+0x220>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d022      	beq.n	8007a84 <HAL_TIM_PWM_Init+0xa8>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a6f      	ldr	r2, [pc, #444]	; (8007c00 <HAL_TIM_PWM_Init+0x224>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d01d      	beq.n	8007a84 <HAL_TIM_PWM_Init+0xa8>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a6d      	ldr	r2, [pc, #436]	; (8007c04 <HAL_TIM_PWM_Init+0x228>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d018      	beq.n	8007a84 <HAL_TIM_PWM_Init+0xa8>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a6c      	ldr	r2, [pc, #432]	; (8007c08 <HAL_TIM_PWM_Init+0x22c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d013      	beq.n	8007a84 <HAL_TIM_PWM_Init+0xa8>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a6a      	ldr	r2, [pc, #424]	; (8007c0c <HAL_TIM_PWM_Init+0x230>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d00e      	beq.n	8007a84 <HAL_TIM_PWM_Init+0xa8>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a69      	ldr	r2, [pc, #420]	; (8007c10 <HAL_TIM_PWM_Init+0x234>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d009      	beq.n	8007a84 <HAL_TIM_PWM_Init+0xa8>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a67      	ldr	r2, [pc, #412]	; (8007c14 <HAL_TIM_PWM_Init+0x238>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d004      	beq.n	8007a84 <HAL_TIM_PWM_Init+0xa8>
 8007a7a:	f240 5133 	movw	r1, #1331	; 0x533
 8007a7e:	4866      	ldr	r0, [pc, #408]	; (8007c18 <HAL_TIM_PWM_Init+0x23c>)
 8007a80:	f7fb f95f 	bl	8002d42 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d014      	beq.n	8007ab6 <HAL_TIM_PWM_Init+0xda>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	2b10      	cmp	r3, #16
 8007a92:	d010      	beq.n	8007ab6 <HAL_TIM_PWM_Init+0xda>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	2b20      	cmp	r3, #32
 8007a9a:	d00c      	beq.n	8007ab6 <HAL_TIM_PWM_Init+0xda>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	2b40      	cmp	r3, #64	; 0x40
 8007aa2:	d008      	beq.n	8007ab6 <HAL_TIM_PWM_Init+0xda>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	2b60      	cmp	r3, #96	; 0x60
 8007aaa:	d004      	beq.n	8007ab6 <HAL_TIM_PWM_Init+0xda>
 8007aac:	f240 5134 	movw	r1, #1332	; 0x534
 8007ab0:	4859      	ldr	r0, [pc, #356]	; (8007c18 <HAL_TIM_PWM_Init+0x23c>)
 8007ab2:	f7fb f946 	bl	8002d42 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00e      	beq.n	8007adc <HAL_TIM_PWM_Init+0x100>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ac6:	d009      	beq.n	8007adc <HAL_TIM_PWM_Init+0x100>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ad0:	d004      	beq.n	8007adc <HAL_TIM_PWM_Init+0x100>
 8007ad2:	f240 5135 	movw	r1, #1333	; 0x535
 8007ad6:	4850      	ldr	r0, [pc, #320]	; (8007c18 <HAL_TIM_PWM_Init+0x23c>)
 8007ad8:	f7fb f933 	bl	8002d42 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae4:	d004      	beq.n	8007af0 <HAL_TIM_PWM_Init+0x114>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a41      	ldr	r2, [pc, #260]	; (8007bf0 <HAL_TIM_PWM_Init+0x214>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d107      	bne.n	8007b00 <HAL_TIM_PWM_Init+0x124>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bf14      	ite	ne
 8007af8:	2301      	movne	r3, #1
 8007afa:	2300      	moveq	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	e00e      	b.n	8007b1e <HAL_TIM_PWM_Init+0x142>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d006      	beq.n	8007b16 <HAL_TIM_PWM_Init+0x13a>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b10:	d201      	bcs.n	8007b16 <HAL_TIM_PWM_Init+0x13a>
 8007b12:	2301      	movs	r3, #1
 8007b14:	e000      	b.n	8007b18 <HAL_TIM_PWM_Init+0x13c>
 8007b16:	2300      	movs	r3, #0
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d104      	bne.n	8007b2c <HAL_TIM_PWM_Init+0x150>
 8007b22:	f240 5136 	movw	r1, #1334	; 0x536
 8007b26:	483c      	ldr	r0, [pc, #240]	; (8007c18 <HAL_TIM_PWM_Init+0x23c>)
 8007b28:	f7fb f90b 	bl	8002d42 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d008      	beq.n	8007b46 <HAL_TIM_PWM_Init+0x16a>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	2b80      	cmp	r3, #128	; 0x80
 8007b3a:	d004      	beq.n	8007b46 <HAL_TIM_PWM_Init+0x16a>
 8007b3c:	f240 5137 	movw	r1, #1335	; 0x537
 8007b40:	4835      	ldr	r0, [pc, #212]	; (8007c18 <HAL_TIM_PWM_Init+0x23c>)
 8007b42:	f7fb f8fe 	bl	8002d42 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d106      	bne.n	8007b60 <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f85e 	bl	8007c1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4619      	mov	r1, r3
 8007b72:	4610      	mov	r0, r2
 8007b74:	f001 f932 	bl	8008ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	40010000 	.word	0x40010000
 8007be8:	40000400 	.word	0x40000400
 8007bec:	40000800 	.word	0x40000800
 8007bf0:	40000c00 	.word	0x40000c00
 8007bf4:	40001000 	.word	0x40001000
 8007bf8:	40001400 	.word	0x40001400
 8007bfc:	40010400 	.word	0x40010400
 8007c00:	40014000 	.word	0x40014000
 8007c04:	40014400 	.word	0x40014400
 8007c08:	40014800 	.word	0x40014800
 8007c0c:	40001800 	.word	0x40001800
 8007c10:	40001c00 	.word	0x40001c00
 8007c14:	40002000 	.word	0x40002000
 8007c18:	08015a0c 	.word	0x08015a0c

08007c1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a89      	ldr	r2, [pc, #548]	; (8007e64 <HAL_TIM_PWM_Start+0x234>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d117      	bne.n	8007c74 <HAL_TIM_PWM_Start+0x44>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 80ae 	beq.w	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	f000 80aa 	beq.w	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2b08      	cmp	r3, #8
 8007c58:	f000 80a6 	beq.w	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	2b0c      	cmp	r3, #12
 8007c60:	f000 80a2 	beq.w	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2b10      	cmp	r3, #16
 8007c68:	f000 809e 	beq.w	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2b14      	cmp	r3, #20
 8007c70:	f000 809a 	beq.w	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c7c:	d10f      	bne.n	8007c9e <HAL_TIM_PWM_Start+0x6e>
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 8091 	beq.w	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	f000 808d 	beq.w	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b08      	cmp	r3, #8
 8007c92:	f000 8089 	beq.w	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2b0c      	cmp	r3, #12
 8007c9a:	f000 8085 	beq.w	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a71      	ldr	r2, [pc, #452]	; (8007e68 <HAL_TIM_PWM_Start+0x238>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d10b      	bne.n	8007cc0 <HAL_TIM_PWM_Start+0x90>
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d07c      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b04      	cmp	r3, #4
 8007cb2:	d079      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2b08      	cmp	r3, #8
 8007cb8:	d076      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b0c      	cmp	r3, #12
 8007cbe:	d073      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a69      	ldr	r2, [pc, #420]	; (8007e6c <HAL_TIM_PWM_Start+0x23c>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d10b      	bne.n	8007ce2 <HAL_TIM_PWM_Start+0xb2>
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d06b      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2b04      	cmp	r3, #4
 8007cd4:	d068      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b08      	cmp	r3, #8
 8007cda:	d065      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2b0c      	cmp	r3, #12
 8007ce0:	d062      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a62      	ldr	r2, [pc, #392]	; (8007e70 <HAL_TIM_PWM_Start+0x240>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d10b      	bne.n	8007d04 <HAL_TIM_PWM_Start+0xd4>
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d05a      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b04      	cmp	r3, #4
 8007cf6:	d057      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b08      	cmp	r3, #8
 8007cfc:	d054      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b0c      	cmp	r3, #12
 8007d02:	d051      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a5a      	ldr	r2, [pc, #360]	; (8007e74 <HAL_TIM_PWM_Start+0x244>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d111      	bne.n	8007d32 <HAL_TIM_PWM_Start+0x102>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d049      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d046      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b08      	cmp	r3, #8
 8007d1e:	d043      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	2b0c      	cmp	r3, #12
 8007d24:	d040      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b10      	cmp	r3, #16
 8007d2a:	d03d      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b14      	cmp	r3, #20
 8007d30:	d03a      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a50      	ldr	r2, [pc, #320]	; (8007e78 <HAL_TIM_PWM_Start+0x248>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d105      	bne.n	8007d48 <HAL_TIM_PWM_Start+0x118>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d032      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	d02f      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a4b      	ldr	r2, [pc, #300]	; (8007e7c <HAL_TIM_PWM_Start+0x24c>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d102      	bne.n	8007d58 <HAL_TIM_PWM_Start+0x128>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d027      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a48      	ldr	r2, [pc, #288]	; (8007e80 <HAL_TIM_PWM_Start+0x250>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d102      	bne.n	8007d68 <HAL_TIM_PWM_Start+0x138>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d01f      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a45      	ldr	r2, [pc, #276]	; (8007e84 <HAL_TIM_PWM_Start+0x254>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d105      	bne.n	8007d7e <HAL_TIM_PWM_Start+0x14e>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d017      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	d014      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a41      	ldr	r2, [pc, #260]	; (8007e88 <HAL_TIM_PWM_Start+0x258>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d102      	bne.n	8007d8e <HAL_TIM_PWM_Start+0x15e>
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00c      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a3e      	ldr	r2, [pc, #248]	; (8007e8c <HAL_TIM_PWM_Start+0x25c>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d102      	bne.n	8007d9e <HAL_TIM_PWM_Start+0x16e>
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d004      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x178>
 8007d9e:	f240 51bc 	movw	r1, #1468	; 0x5bc
 8007da2:	483b      	ldr	r0, [pc, #236]	; (8007e90 <HAL_TIM_PWM_Start+0x260>)
 8007da4:	f7fa ffcd 	bl	8002d42 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d109      	bne.n	8007dc2 <HAL_TIM_PWM_Start+0x192>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	bf14      	ite	ne
 8007dba:	2301      	movne	r3, #1
 8007dbc:	2300      	moveq	r3, #0
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	e03c      	b.n	8007e3c <HAL_TIM_PWM_Start+0x20c>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d109      	bne.n	8007ddc <HAL_TIM_PWM_Start+0x1ac>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	bf14      	ite	ne
 8007dd4:	2301      	movne	r3, #1
 8007dd6:	2300      	moveq	r3, #0
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	e02f      	b.n	8007e3c <HAL_TIM_PWM_Start+0x20c>
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	2b08      	cmp	r3, #8
 8007de0:	d109      	bne.n	8007df6 <HAL_TIM_PWM_Start+0x1c6>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	bf14      	ite	ne
 8007dee:	2301      	movne	r3, #1
 8007df0:	2300      	moveq	r3, #0
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	e022      	b.n	8007e3c <HAL_TIM_PWM_Start+0x20c>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b0c      	cmp	r3, #12
 8007dfa:	d109      	bne.n	8007e10 <HAL_TIM_PWM_Start+0x1e0>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	bf14      	ite	ne
 8007e08:	2301      	movne	r3, #1
 8007e0a:	2300      	moveq	r3, #0
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	e015      	b.n	8007e3c <HAL_TIM_PWM_Start+0x20c>
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	2b10      	cmp	r3, #16
 8007e14:	d109      	bne.n	8007e2a <HAL_TIM_PWM_Start+0x1fa>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	bf14      	ite	ne
 8007e22:	2301      	movne	r3, #1
 8007e24:	2300      	moveq	r3, #0
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	e008      	b.n	8007e3c <HAL_TIM_PWM_Start+0x20c>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	bf14      	ite	ne
 8007e36:	2301      	movne	r3, #1
 8007e38:	2300      	moveq	r3, #0
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e0aa      	b.n	8007f9a <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d104      	bne.n	8007e54 <HAL_TIM_PWM_Start+0x224>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e52:	e03b      	b.n	8007ecc <HAL_TIM_PWM_Start+0x29c>
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2b04      	cmp	r3, #4
 8007e58:	d11c      	bne.n	8007e94 <HAL_TIM_PWM_Start+0x264>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e62:	e033      	b.n	8007ecc <HAL_TIM_PWM_Start+0x29c>
 8007e64:	40010000 	.word	0x40010000
 8007e68:	40000400 	.word	0x40000400
 8007e6c:	40000800 	.word	0x40000800
 8007e70:	40000c00 	.word	0x40000c00
 8007e74:	40010400 	.word	0x40010400
 8007e78:	40014000 	.word	0x40014000
 8007e7c:	40014400 	.word	0x40014400
 8007e80:	40014800 	.word	0x40014800
 8007e84:	40001800 	.word	0x40001800
 8007e88:	40001c00 	.word	0x40001c00
 8007e8c:	40002000 	.word	0x40002000
 8007e90:	08015a0c 	.word	0x08015a0c
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2b08      	cmp	r3, #8
 8007e98:	d104      	bne.n	8007ea4 <HAL_TIM_PWM_Start+0x274>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ea2:	e013      	b.n	8007ecc <HAL_TIM_PWM_Start+0x29c>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2b0c      	cmp	r3, #12
 8007ea8:	d104      	bne.n	8007eb4 <HAL_TIM_PWM_Start+0x284>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2202      	movs	r2, #2
 8007eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007eb2:	e00b      	b.n	8007ecc <HAL_TIM_PWM_Start+0x29c>
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2b10      	cmp	r3, #16
 8007eb8:	d104      	bne.n	8007ec4 <HAL_TIM_PWM_Start+0x294>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ec2:	e003      	b.n	8007ecc <HAL_TIM_PWM_Start+0x29c>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f001 fba3 	bl	8009620 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a31      	ldr	r2, [pc, #196]	; (8007fa4 <HAL_TIM_PWM_Start+0x374>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d004      	beq.n	8007eee <HAL_TIM_PWM_Start+0x2be>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a2f      	ldr	r2, [pc, #188]	; (8007fa8 <HAL_TIM_PWM_Start+0x378>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d101      	bne.n	8007ef2 <HAL_TIM_PWM_Start+0x2c2>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e000      	b.n	8007ef4 <HAL_TIM_PWM_Start+0x2c4>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d007      	beq.n	8007f08 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a25      	ldr	r2, [pc, #148]	; (8007fa4 <HAL_TIM_PWM_Start+0x374>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d022      	beq.n	8007f58 <HAL_TIM_PWM_Start+0x328>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1a:	d01d      	beq.n	8007f58 <HAL_TIM_PWM_Start+0x328>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a22      	ldr	r2, [pc, #136]	; (8007fac <HAL_TIM_PWM_Start+0x37c>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d018      	beq.n	8007f58 <HAL_TIM_PWM_Start+0x328>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a21      	ldr	r2, [pc, #132]	; (8007fb0 <HAL_TIM_PWM_Start+0x380>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d013      	beq.n	8007f58 <HAL_TIM_PWM_Start+0x328>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a1f      	ldr	r2, [pc, #124]	; (8007fb4 <HAL_TIM_PWM_Start+0x384>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d00e      	beq.n	8007f58 <HAL_TIM_PWM_Start+0x328>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a1a      	ldr	r2, [pc, #104]	; (8007fa8 <HAL_TIM_PWM_Start+0x378>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d009      	beq.n	8007f58 <HAL_TIM_PWM_Start+0x328>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a1b      	ldr	r2, [pc, #108]	; (8007fb8 <HAL_TIM_PWM_Start+0x388>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d004      	beq.n	8007f58 <HAL_TIM_PWM_Start+0x328>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a1a      	ldr	r2, [pc, #104]	; (8007fbc <HAL_TIM_PWM_Start+0x38c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d115      	bne.n	8007f84 <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689a      	ldr	r2, [r3, #8]
 8007f5e:	4b18      	ldr	r3, [pc, #96]	; (8007fc0 <HAL_TIM_PWM_Start+0x390>)
 8007f60:	4013      	ands	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2b06      	cmp	r3, #6
 8007f68:	d015      	beq.n	8007f96 <HAL_TIM_PWM_Start+0x366>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f70:	d011      	beq.n	8007f96 <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f042 0201 	orr.w	r2, r2, #1
 8007f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f82:	e008      	b.n	8007f96 <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f042 0201 	orr.w	r2, r2, #1
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	e000      	b.n	8007f98 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	40010000 	.word	0x40010000
 8007fa8:	40010400 	.word	0x40010400
 8007fac:	40000400 	.word	0x40000400
 8007fb0:	40000800 	.word	0x40000800
 8007fb4:	40000c00 	.word	0x40000c00
 8007fb8:	40014000 	.word	0x40014000
 8007fbc:	40001800 	.word	0x40001800
 8007fc0:	00010007 	.word	0x00010007

08007fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d122      	bne.n	8008020 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f003 0302 	and.w	r3, r3, #2
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d11b      	bne.n	8008020 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f06f 0202 	mvn.w	r2, #2
 8007ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	f003 0303 	and.w	r3, r3, #3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 feca 	bl	8008da0 <HAL_TIM_IC_CaptureCallback>
 800800c:	e005      	b.n	800801a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 febc 	bl	8008d8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fecd 	bl	8008db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f003 0304 	and.w	r3, r3, #4
 800802a:	2b04      	cmp	r3, #4
 800802c:	d122      	bne.n	8008074 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	f003 0304 	and.w	r3, r3, #4
 8008038:	2b04      	cmp	r3, #4
 800803a:	d11b      	bne.n	8008074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f06f 0204 	mvn.w	r2, #4
 8008044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2202      	movs	r2, #2
 800804a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fea0 	bl	8008da0 <HAL_TIM_IC_CaptureCallback>
 8008060:	e005      	b.n	800806e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fe92 	bl	8008d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fea3 	bl	8008db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f003 0308 	and.w	r3, r3, #8
 800807e:	2b08      	cmp	r3, #8
 8008080:	d122      	bne.n	80080c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f003 0308 	and.w	r3, r3, #8
 800808c:	2b08      	cmp	r3, #8
 800808e:	d11b      	bne.n	80080c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f06f 0208 	mvn.w	r2, #8
 8008098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2204      	movs	r2, #4
 800809e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	f003 0303 	and.w	r3, r3, #3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fe76 	bl	8008da0 <HAL_TIM_IC_CaptureCallback>
 80080b4:	e005      	b.n	80080c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fe68 	bl	8008d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fe79 	bl	8008db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	f003 0310 	and.w	r3, r3, #16
 80080d2:	2b10      	cmp	r3, #16
 80080d4:	d122      	bne.n	800811c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	f003 0310 	and.w	r3, r3, #16
 80080e0:	2b10      	cmp	r3, #16
 80080e2:	d11b      	bne.n	800811c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f06f 0210 	mvn.w	r2, #16
 80080ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2208      	movs	r2, #8
 80080f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fe4c 	bl	8008da0 <HAL_TIM_IC_CaptureCallback>
 8008108:	e005      	b.n	8008116 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fe3e 	bl	8008d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fe4f 	bl	8008db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b01      	cmp	r3, #1
 8008128:	d10e      	bne.n	8008148 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	2b01      	cmp	r3, #1
 8008136:	d107      	bne.n	8008148 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f06f 0201 	mvn.w	r2, #1
 8008140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fe18 	bl	8008d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008152:	2b80      	cmp	r3, #128	; 0x80
 8008154:	d10e      	bne.n	8008174 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008160:	2b80      	cmp	r3, #128	; 0x80
 8008162:	d107      	bne.n	8008174 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800816c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f001 fc42 	bl	80099f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008182:	d10e      	bne.n	80081a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800818e:	2b80      	cmp	r3, #128	; 0x80
 8008190:	d107      	bne.n	80081a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800819a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 fc35 	bl	8009a0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ac:	2b40      	cmp	r3, #64	; 0x40
 80081ae:	d10e      	bne.n	80081ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ba:	2b40      	cmp	r3, #64	; 0x40
 80081bc:	d107      	bne.n	80081ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fdfd 	bl	8008dc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	f003 0320 	and.w	r3, r3, #32
 80081d8:	2b20      	cmp	r3, #32
 80081da:	d10e      	bne.n	80081fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	f003 0320 	and.w	r3, r3, #32
 80081e6:	2b20      	cmp	r3, #32
 80081e8:	d107      	bne.n	80081fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f06f 0220 	mvn.w	r2, #32
 80081f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 fbf5 	bl	80099e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081fa:	bf00      	nop
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
	...

08008204 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d016      	beq.n	8008248 <HAL_TIM_PWM_ConfigChannel+0x44>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b04      	cmp	r3, #4
 800821e:	d013      	beq.n	8008248 <HAL_TIM_PWM_ConfigChannel+0x44>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b08      	cmp	r3, #8
 8008224:	d010      	beq.n	8008248 <HAL_TIM_PWM_ConfigChannel+0x44>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2b0c      	cmp	r3, #12
 800822a:	d00d      	beq.n	8008248 <HAL_TIM_PWM_ConfigChannel+0x44>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b10      	cmp	r3, #16
 8008230:	d00a      	beq.n	8008248 <HAL_TIM_PWM_ConfigChannel+0x44>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b14      	cmp	r3, #20
 8008236:	d007      	beq.n	8008248 <HAL_TIM_PWM_ConfigChannel+0x44>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b3c      	cmp	r3, #60	; 0x3c
 800823c:	d004      	beq.n	8008248 <HAL_TIM_PWM_ConfigChannel+0x44>
 800823e:	f241 01af 	movw	r1, #4271	; 0x10af
 8008242:	4895      	ldr	r0, [pc, #596]	; (8008498 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008244:	f7fa fd7d 	bl	8002d42 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b60      	cmp	r3, #96	; 0x60
 800824e:	d01c      	beq.n	800828a <HAL_TIM_PWM_ConfigChannel+0x86>
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b70      	cmp	r3, #112	; 0x70
 8008256:	d018      	beq.n	800828a <HAL_TIM_PWM_ConfigChannel+0x86>
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a8f      	ldr	r2, [pc, #572]	; (800849c <HAL_TIM_PWM_ConfigChannel+0x298>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d013      	beq.n	800828a <HAL_TIM_PWM_ConfigChannel+0x86>
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a8e      	ldr	r2, [pc, #568]	; (80084a0 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d00e      	beq.n	800828a <HAL_TIM_PWM_ConfigChannel+0x86>
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a8c      	ldr	r2, [pc, #560]	; (80084a4 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d009      	beq.n	800828a <HAL_TIM_PWM_ConfigChannel+0x86>
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a8b      	ldr	r2, [pc, #556]	; (80084a8 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d004      	beq.n	800828a <HAL_TIM_PWM_ConfigChannel+0x86>
 8008280:	f241 01b0 	movw	r1, #4272	; 0x10b0
 8008284:	4884      	ldr	r0, [pc, #528]	; (8008498 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008286:	f7fa fd5c 	bl	8002d42 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d008      	beq.n	80082a4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	2b02      	cmp	r3, #2
 8008298:	d004      	beq.n	80082a4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800829a:	f241 01b1 	movw	r1, #4273	; 0x10b1
 800829e:	487e      	ldr	r0, [pc, #504]	; (8008498 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80082a0:	f7fa fd4f 	bl	8002d42 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d008      	beq.n	80082be <HAL_TIM_PWM_ConfigChannel+0xba>
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	2b04      	cmp	r3, #4
 80082b2:	d004      	beq.n	80082be <HAL_TIM_PWM_ConfigChannel+0xba>
 80082b4:	f241 01b2 	movw	r1, #4274	; 0x10b2
 80082b8:	4877      	ldr	r0, [pc, #476]	; (8008498 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80082ba:	f7fa fd42 	bl	8002d42 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d101      	bne.n	80082cc <HAL_TIM_PWM_ConfigChannel+0xc8>
 80082c8:	2302      	movs	r3, #2
 80082ca:	e1f3      	b.n	80086b4 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b14      	cmp	r3, #20
 80082d8:	f200 81e4 	bhi.w	80086a4 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 80082dc:	a201      	add	r2, pc, #4	; (adr r2, 80082e4 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 80082de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e2:	bf00      	nop
 80082e4:	08008339 	.word	0x08008339
 80082e8:	080086a5 	.word	0x080086a5
 80082ec:	080086a5 	.word	0x080086a5
 80082f0:	080086a5 	.word	0x080086a5
 80082f4:	080083fb 	.word	0x080083fb
 80082f8:	080086a5 	.word	0x080086a5
 80082fc:	080086a5 	.word	0x080086a5
 8008300:	080086a5 	.word	0x080086a5
 8008304:	080084d9 	.word	0x080084d9
 8008308:	080086a5 	.word	0x080086a5
 800830c:	080086a5 	.word	0x080086a5
 8008310:	080086a5 	.word	0x080086a5
 8008314:	0800855f 	.word	0x0800855f
 8008318:	080086a5 	.word	0x080086a5
 800831c:	080086a5 	.word	0x080086a5
 8008320:	080086a5 	.word	0x080086a5
 8008324:	080085e7 	.word	0x080085e7
 8008328:	080086a5 	.word	0x080086a5
 800832c:	080086a5 	.word	0x080086a5
 8008330:	080086a5 	.word	0x080086a5
 8008334:	08008645 	.word	0x08008645
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a5b      	ldr	r2, [pc, #364]	; (80084ac <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d03b      	beq.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800834a:	d036      	beq.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a57      	ldr	r2, [pc, #348]	; (80084b0 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d031      	beq.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a56      	ldr	r2, [pc, #344]	; (80084b4 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d02c      	beq.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a54      	ldr	r2, [pc, #336]	; (80084b8 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d027      	beq.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a53      	ldr	r2, [pc, #332]	; (80084bc <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d022      	beq.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a51      	ldr	r2, [pc, #324]	; (80084c0 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d01d      	beq.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a50      	ldr	r2, [pc, #320]	; (80084c4 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d018      	beq.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a4e      	ldr	r2, [pc, #312]	; (80084c8 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d013      	beq.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a4d      	ldr	r2, [pc, #308]	; (80084cc <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d00e      	beq.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a4b      	ldr	r2, [pc, #300]	; (80084d0 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d009      	beq.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a4a      	ldr	r2, [pc, #296]	; (80084d4 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d004      	beq.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80083b0:	f241 01bc 	movw	r1, #4284	; 0x10bc
 80083b4:	4838      	ldr	r0, [pc, #224]	; (8008498 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80083b6:	f7fa fcc4 	bl	8002d42 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68b9      	ldr	r1, [r7, #8]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fdab 	bl	8008f1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	699a      	ldr	r2, [r3, #24]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f042 0208 	orr.w	r2, r2, #8
 80083d4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	699a      	ldr	r2, [r3, #24]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 0204 	bic.w	r2, r2, #4
 80083e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6999      	ldr	r1, [r3, #24]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	691a      	ldr	r2, [r3, #16]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	430a      	orrs	r2, r1
 80083f6:	619a      	str	r2, [r3, #24]
      break;
 80083f8:	e157      	b.n	80086aa <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a2b      	ldr	r2, [pc, #172]	; (80084ac <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d027      	beq.n	8008454 <HAL_TIM_PWM_ConfigChannel+0x250>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800840c:	d022      	beq.n	8008454 <HAL_TIM_PWM_ConfigChannel+0x250>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a27      	ldr	r2, [pc, #156]	; (80084b0 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d01d      	beq.n	8008454 <HAL_TIM_PWM_ConfigChannel+0x250>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a25      	ldr	r2, [pc, #148]	; (80084b4 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d018      	beq.n	8008454 <HAL_TIM_PWM_ConfigChannel+0x250>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a24      	ldr	r2, [pc, #144]	; (80084b8 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d013      	beq.n	8008454 <HAL_TIM_PWM_ConfigChannel+0x250>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a22      	ldr	r2, [pc, #136]	; (80084bc <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d00e      	beq.n	8008454 <HAL_TIM_PWM_ConfigChannel+0x250>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a21      	ldr	r2, [pc, #132]	; (80084c0 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d009      	beq.n	8008454 <HAL_TIM_PWM_ConfigChannel+0x250>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a21      	ldr	r2, [pc, #132]	; (80084cc <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d004      	beq.n	8008454 <HAL_TIM_PWM_ConfigChannel+0x250>
 800844a:	f241 01cd 	movw	r1, #4301	; 0x10cd
 800844e:	4812      	ldr	r0, [pc, #72]	; (8008498 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008450:	f7fa fc77 	bl	8002d42 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68b9      	ldr	r1, [r7, #8]
 800845a:	4618      	mov	r0, r3
 800845c:	f000 fdfa 	bl	8009054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	699a      	ldr	r2, [r3, #24]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800846e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	699a      	ldr	r2, [r3, #24]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800847e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6999      	ldr	r1, [r3, #24]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	021a      	lsls	r2, r3, #8
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	619a      	str	r2, [r3, #24]
      break;
 8008494:	e109      	b.n	80086aa <HAL_TIM_PWM_ConfigChannel+0x4a6>
 8008496:	bf00      	nop
 8008498:	08015a0c 	.word	0x08015a0c
 800849c:	00010040 	.word	0x00010040
 80084a0:	00010050 	.word	0x00010050
 80084a4:	00010060 	.word	0x00010060
 80084a8:	00010070 	.word	0x00010070
 80084ac:	40010000 	.word	0x40010000
 80084b0:	40000400 	.word	0x40000400
 80084b4:	40000800 	.word	0x40000800
 80084b8:	40000c00 	.word	0x40000c00
 80084bc:	40010400 	.word	0x40010400
 80084c0:	40014000 	.word	0x40014000
 80084c4:	40014400 	.word	0x40014400
 80084c8:	40014800 	.word	0x40014800
 80084cc:	40001800 	.word	0x40001800
 80084d0:	40001c00 	.word	0x40001c00
 80084d4:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a77      	ldr	r2, [pc, #476]	; (80086bc <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d01d      	beq.n	800851e <HAL_TIM_PWM_ConfigChannel+0x31a>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ea:	d018      	beq.n	800851e <HAL_TIM_PWM_ConfigChannel+0x31a>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a73      	ldr	r2, [pc, #460]	; (80086c0 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d013      	beq.n	800851e <HAL_TIM_PWM_ConfigChannel+0x31a>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a72      	ldr	r2, [pc, #456]	; (80086c4 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d00e      	beq.n	800851e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a70      	ldr	r2, [pc, #448]	; (80086c8 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d009      	beq.n	800851e <HAL_TIM_PWM_ConfigChannel+0x31a>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a6f      	ldr	r2, [pc, #444]	; (80086cc <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d004      	beq.n	800851e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8008514:	f241 01de 	movw	r1, #4318	; 0x10de
 8008518:	486d      	ldr	r0, [pc, #436]	; (80086d0 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800851a:	f7fa fc12 	bl	8002d42 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68b9      	ldr	r1, [r7, #8]
 8008524:	4618      	mov	r0, r3
 8008526:	f000 fe35 	bl	8009194 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	69da      	ldr	r2, [r3, #28]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f042 0208 	orr.w	r2, r2, #8
 8008538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69da      	ldr	r2, [r3, #28]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f022 0204 	bic.w	r2, r2, #4
 8008548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69d9      	ldr	r1, [r3, #28]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	691a      	ldr	r2, [r3, #16]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	430a      	orrs	r2, r1
 800855a:	61da      	str	r2, [r3, #28]
      break;
 800855c:	e0a5      	b.n	80086aa <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a56      	ldr	r2, [pc, #344]	; (80086bc <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d01d      	beq.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008570:	d018      	beq.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a52      	ldr	r2, [pc, #328]	; (80086c0 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d013      	beq.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a50      	ldr	r2, [pc, #320]	; (80086c4 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d00e      	beq.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a4f      	ldr	r2, [pc, #316]	; (80086c8 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d009      	beq.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a4d      	ldr	r2, [pc, #308]	; (80086cc <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d004      	beq.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800859a:	f241 01ef 	movw	r1, #4335	; 0x10ef
 800859e:	484c      	ldr	r0, [pc, #304]	; (80086d0 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80085a0:	f7fa fbcf 	bl	8002d42 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68b9      	ldr	r1, [r7, #8]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fe92 	bl	80092d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	69da      	ldr	r2, [r3, #28]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	69da      	ldr	r2, [r3, #28]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	69d9      	ldr	r1, [r3, #28]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	021a      	lsls	r2, r3, #8
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	61da      	str	r2, [r3, #28]
      break;
 80085e4:	e061      	b.n	80086aa <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a34      	ldr	r2, [pc, #208]	; (80086bc <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d009      	beq.n	8008604 <HAL_TIM_PWM_ConfigChannel+0x400>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a35      	ldr	r2, [pc, #212]	; (80086cc <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d004      	beq.n	8008604 <HAL_TIM_PWM_ConfigChannel+0x400>
 80085fa:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 80085fe:	4834      	ldr	r0, [pc, #208]	; (80086d0 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8008600:	f7fa fb9f 	bl	8002d42 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68b9      	ldr	r1, [r7, #8]
 800860a:	4618      	mov	r0, r3
 800860c:	f000 fec8 	bl	80093a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f042 0208 	orr.w	r2, r2, #8
 800861e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f022 0204 	bic.w	r2, r2, #4
 800862e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	691a      	ldr	r2, [r3, #16]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	430a      	orrs	r2, r1
 8008640:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008642:	e032      	b.n	80086aa <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a1c      	ldr	r2, [pc, #112]	; (80086bc <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d009      	beq.n	8008662 <HAL_TIM_PWM_ConfigChannel+0x45e>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a1e      	ldr	r2, [pc, #120]	; (80086cc <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d004      	beq.n	8008662 <HAL_TIM_PWM_ConfigChannel+0x45e>
 8008658:	f241 1111 	movw	r1, #4369	; 0x1111
 800865c:	481c      	ldr	r0, [pc, #112]	; (80086d0 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800865e:	f7fa fb70 	bl	8002d42 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68b9      	ldr	r1, [r7, #8]
 8008668:	4618      	mov	r0, r3
 800866a:	f000 feeb 	bl	8009444 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800867c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800868c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	021a      	lsls	r2, r3, #8
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80086a2:	e002      	b.n	80086aa <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	75fb      	strb	r3, [r7, #23]
      break;
 80086a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3718      	adds	r7, #24
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	40010000 	.word	0x40010000
 80086c0:	40000400 	.word	0x40000400
 80086c4:	40000800 	.word	0x40000800
 80086c8:	40000c00 	.word	0x40000c00
 80086cc:	40010400 	.word	0x40010400
 80086d0:	08015a0c 	.word	0x08015a0c

080086d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d101      	bne.n	80086f0 <HAL_TIM_ConfigClockSource+0x1c>
 80086ec:	2302      	movs	r3, #2
 80086ee:	e332      	b.n	8008d56 <HAL_TIM_ConfigClockSource+0x682>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2202      	movs	r2, #2
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008708:	d029      	beq.n	800875e <HAL_TIM_ConfigClockSource+0x8a>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b70      	cmp	r3, #112	; 0x70
 8008710:	d025      	beq.n	800875e <HAL_TIM_ConfigClockSource+0x8a>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800871a:	d020      	beq.n	800875e <HAL_TIM_ConfigClockSource+0x8a>
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b40      	cmp	r3, #64	; 0x40
 8008722:	d01c      	beq.n	800875e <HAL_TIM_ConfigClockSource+0x8a>
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b50      	cmp	r3, #80	; 0x50
 800872a:	d018      	beq.n	800875e <HAL_TIM_ConfigClockSource+0x8a>
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b60      	cmp	r3, #96	; 0x60
 8008732:	d014      	beq.n	800875e <HAL_TIM_ConfigClockSource+0x8a>
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d010      	beq.n	800875e <HAL_TIM_ConfigClockSource+0x8a>
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b10      	cmp	r3, #16
 8008742:	d00c      	beq.n	800875e <HAL_TIM_ConfigClockSource+0x8a>
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2b20      	cmp	r3, #32
 800874a:	d008      	beq.n	800875e <HAL_TIM_ConfigClockSource+0x8a>
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b30      	cmp	r3, #48	; 0x30
 8008752:	d004      	beq.n	800875e <HAL_TIM_ConfigClockSource+0x8a>
 8008754:	f241 514c 	movw	r1, #5452	; 0x154c
 8008758:	4893      	ldr	r0, [pc, #588]	; (80089a8 <HAL_TIM_ConfigClockSource+0x2d4>)
 800875a:	f7fa faf2 	bl	8002d42 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	4b90      	ldr	r3, [pc, #576]	; (80089ac <HAL_TIM_ConfigClockSource+0x2d8>)
 800876a:	4013      	ands	r3, r2
 800876c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008774:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008786:	f000 812d 	beq.w	80089e4 <HAL_TIM_ConfigClockSource+0x310>
 800878a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800878e:	f200 82d5 	bhi.w	8008d3c <HAL_TIM_ConfigClockSource+0x668>
 8008792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008796:	d02e      	beq.n	80087f6 <HAL_TIM_ConfigClockSource+0x122>
 8008798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800879c:	f200 82ce 	bhi.w	8008d3c <HAL_TIM_ConfigClockSource+0x668>
 80087a0:	2b70      	cmp	r3, #112	; 0x70
 80087a2:	f000 8082 	beq.w	80088aa <HAL_TIM_ConfigClockSource+0x1d6>
 80087a6:	2b70      	cmp	r3, #112	; 0x70
 80087a8:	f200 82c8 	bhi.w	8008d3c <HAL_TIM_ConfigClockSource+0x668>
 80087ac:	2b60      	cmp	r3, #96	; 0x60
 80087ae:	f000 81e0 	beq.w	8008b72 <HAL_TIM_ConfigClockSource+0x49e>
 80087b2:	2b60      	cmp	r3, #96	; 0x60
 80087b4:	f200 82c2 	bhi.w	8008d3c <HAL_TIM_ConfigClockSource+0x668>
 80087b8:	2b50      	cmp	r3, #80	; 0x50
 80087ba:	f000 8184 	beq.w	8008ac6 <HAL_TIM_ConfigClockSource+0x3f2>
 80087be:	2b50      	cmp	r3, #80	; 0x50
 80087c0:	f200 82bc 	bhi.w	8008d3c <HAL_TIM_ConfigClockSource+0x668>
 80087c4:	2b40      	cmp	r3, #64	; 0x40
 80087c6:	f000 8237 	beq.w	8008c38 <HAL_TIM_ConfigClockSource+0x564>
 80087ca:	2b40      	cmp	r3, #64	; 0x40
 80087cc:	f200 82b6 	bhi.w	8008d3c <HAL_TIM_ConfigClockSource+0x668>
 80087d0:	2b30      	cmp	r3, #48	; 0x30
 80087d2:	f000 8287 	beq.w	8008ce4 <HAL_TIM_ConfigClockSource+0x610>
 80087d6:	2b30      	cmp	r3, #48	; 0x30
 80087d8:	f200 82b0 	bhi.w	8008d3c <HAL_TIM_ConfigClockSource+0x668>
 80087dc:	2b20      	cmp	r3, #32
 80087de:	f000 8281 	beq.w	8008ce4 <HAL_TIM_ConfigClockSource+0x610>
 80087e2:	2b20      	cmp	r3, #32
 80087e4:	f200 82aa 	bhi.w	8008d3c <HAL_TIM_ConfigClockSource+0x668>
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 827b 	beq.w	8008ce4 <HAL_TIM_ConfigClockSource+0x610>
 80087ee:	2b10      	cmp	r3, #16
 80087f0:	f000 8278 	beq.w	8008ce4 <HAL_TIM_ConfigClockSource+0x610>
 80087f4:	e2a2      	b.n	8008d3c <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a6d      	ldr	r2, [pc, #436]	; (80089b0 <HAL_TIM_ConfigClockSource+0x2dc>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	f000 82a0 	beq.w	8008d42 <HAL_TIM_ConfigClockSource+0x66e>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800880a:	f000 829a 	beq.w	8008d42 <HAL_TIM_ConfigClockSource+0x66e>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a68      	ldr	r2, [pc, #416]	; (80089b4 <HAL_TIM_ConfigClockSource+0x2e0>)
 8008814:	4293      	cmp	r3, r2
 8008816:	f000 8294 	beq.w	8008d42 <HAL_TIM_ConfigClockSource+0x66e>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a66      	ldr	r2, [pc, #408]	; (80089b8 <HAL_TIM_ConfigClockSource+0x2e4>)
 8008820:	4293      	cmp	r3, r2
 8008822:	f000 828e 	beq.w	8008d42 <HAL_TIM_ConfigClockSource+0x66e>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a64      	ldr	r2, [pc, #400]	; (80089bc <HAL_TIM_ConfigClockSource+0x2e8>)
 800882c:	4293      	cmp	r3, r2
 800882e:	f000 8288 	beq.w	8008d42 <HAL_TIM_ConfigClockSource+0x66e>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a62      	ldr	r2, [pc, #392]	; (80089c0 <HAL_TIM_ConfigClockSource+0x2ec>)
 8008838:	4293      	cmp	r3, r2
 800883a:	f000 8282 	beq.w	8008d42 <HAL_TIM_ConfigClockSource+0x66e>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a60      	ldr	r2, [pc, #384]	; (80089c4 <HAL_TIM_ConfigClockSource+0x2f0>)
 8008844:	4293      	cmp	r3, r2
 8008846:	f000 827c 	beq.w	8008d42 <HAL_TIM_ConfigClockSource+0x66e>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a5e      	ldr	r2, [pc, #376]	; (80089c8 <HAL_TIM_ConfigClockSource+0x2f4>)
 8008850:	4293      	cmp	r3, r2
 8008852:	f000 8276 	beq.w	8008d42 <HAL_TIM_ConfigClockSource+0x66e>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a5c      	ldr	r2, [pc, #368]	; (80089cc <HAL_TIM_ConfigClockSource+0x2f8>)
 800885c:	4293      	cmp	r3, r2
 800885e:	f000 8270 	beq.w	8008d42 <HAL_TIM_ConfigClockSource+0x66e>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a5a      	ldr	r2, [pc, #360]	; (80089d0 <HAL_TIM_ConfigClockSource+0x2fc>)
 8008868:	4293      	cmp	r3, r2
 800886a:	f000 826a 	beq.w	8008d42 <HAL_TIM_ConfigClockSource+0x66e>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a58      	ldr	r2, [pc, #352]	; (80089d4 <HAL_TIM_ConfigClockSource+0x300>)
 8008874:	4293      	cmp	r3, r2
 8008876:	f000 8264 	beq.w	8008d42 <HAL_TIM_ConfigClockSource+0x66e>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a56      	ldr	r2, [pc, #344]	; (80089d8 <HAL_TIM_ConfigClockSource+0x304>)
 8008880:	4293      	cmp	r3, r2
 8008882:	f000 825e 	beq.w	8008d42 <HAL_TIM_ConfigClockSource+0x66e>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a54      	ldr	r2, [pc, #336]	; (80089dc <HAL_TIM_ConfigClockSource+0x308>)
 800888c:	4293      	cmp	r3, r2
 800888e:	f000 8258 	beq.w	8008d42 <HAL_TIM_ConfigClockSource+0x66e>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a52      	ldr	r2, [pc, #328]	; (80089e0 <HAL_TIM_ConfigClockSource+0x30c>)
 8008898:	4293      	cmp	r3, r2
 800889a:	f000 8252 	beq.w	8008d42 <HAL_TIM_ConfigClockSource+0x66e>
 800889e:	f241 5158 	movw	r1, #5464	; 0x1558
 80088a2:	4841      	ldr	r0, [pc, #260]	; (80089a8 <HAL_TIM_ConfigClockSource+0x2d4>)
 80088a4:	f7fa fa4d 	bl	8002d42 <assert_failed>
      break;
 80088a8:	e24b      	b.n	8008d42 <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a40      	ldr	r2, [pc, #256]	; (80089b0 <HAL_TIM_ConfigClockSource+0x2dc>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d027      	beq.n	8008904 <HAL_TIM_ConfigClockSource+0x230>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088bc:	d022      	beq.n	8008904 <HAL_TIM_ConfigClockSource+0x230>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a3c      	ldr	r2, [pc, #240]	; (80089b4 <HAL_TIM_ConfigClockSource+0x2e0>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d01d      	beq.n	8008904 <HAL_TIM_ConfigClockSource+0x230>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a3a      	ldr	r2, [pc, #232]	; (80089b8 <HAL_TIM_ConfigClockSource+0x2e4>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d018      	beq.n	8008904 <HAL_TIM_ConfigClockSource+0x230>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a39      	ldr	r2, [pc, #228]	; (80089bc <HAL_TIM_ConfigClockSource+0x2e8>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d013      	beq.n	8008904 <HAL_TIM_ConfigClockSource+0x230>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a39      	ldr	r2, [pc, #228]	; (80089c8 <HAL_TIM_ConfigClockSource+0x2f4>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d00e      	beq.n	8008904 <HAL_TIM_ConfigClockSource+0x230>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a38      	ldr	r2, [pc, #224]	; (80089cc <HAL_TIM_ConfigClockSource+0x2f8>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d009      	beq.n	8008904 <HAL_TIM_ConfigClockSource+0x230>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a38      	ldr	r2, [pc, #224]	; (80089d8 <HAL_TIM_ConfigClockSource+0x304>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d004      	beq.n	8008904 <HAL_TIM_ConfigClockSource+0x230>
 80088fa:	f241 515f 	movw	r1, #5471	; 0x155f
 80088fe:	482a      	ldr	r0, [pc, #168]	; (80089a8 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008900:	f7fa fa1f 	bl	8002d42 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d013      	beq.n	8008934 <HAL_TIM_ConfigClockSource+0x260>
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008914:	d00e      	beq.n	8008934 <HAL_TIM_ConfigClockSource+0x260>
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800891e:	d009      	beq.n	8008934 <HAL_TIM_ConfigClockSource+0x260>
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008928:	d004      	beq.n	8008934 <HAL_TIM_ConfigClockSource+0x260>
 800892a:	f241 5162 	movw	r1, #5474	; 0x1562
 800892e:	481e      	ldr	r0, [pc, #120]	; (80089a8 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008930:	f7fa fa07 	bl	8002d42 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800893c:	d014      	beq.n	8008968 <HAL_TIM_ConfigClockSource+0x294>
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d010      	beq.n	8008968 <HAL_TIM_ConfigClockSource+0x294>
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00c      	beq.n	8008968 <HAL_TIM_ConfigClockSource+0x294>
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	2b02      	cmp	r3, #2
 8008954:	d008      	beq.n	8008968 <HAL_TIM_ConfigClockSource+0x294>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	2b0a      	cmp	r3, #10
 800895c:	d004      	beq.n	8008968 <HAL_TIM_ConfigClockSource+0x294>
 800895e:	f241 5163 	movw	r1, #5475	; 0x1563
 8008962:	4811      	ldr	r0, [pc, #68]	; (80089a8 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008964:	f7fa f9ed 	bl	8002d42 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	2b0f      	cmp	r3, #15
 800896e:	d904      	bls.n	800897a <HAL_TIM_ConfigClockSource+0x2a6>
 8008970:	f241 5164 	movw	r1, #5476	; 0x1564
 8008974:	480c      	ldr	r0, [pc, #48]	; (80089a8 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008976:	f7fa f9e4 	bl	8002d42 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6818      	ldr	r0, [r3, #0]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	6899      	ldr	r1, [r3, #8]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	685a      	ldr	r2, [r3, #4]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f000 fe29 	bl	80095e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800899c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	609a      	str	r2, [r3, #8]
      break;
 80089a6:	e1cd      	b.n	8008d44 <HAL_TIM_ConfigClockSource+0x670>
 80089a8:	08015a0c 	.word	0x08015a0c
 80089ac:	fffeff88 	.word	0xfffeff88
 80089b0:	40010000 	.word	0x40010000
 80089b4:	40000400 	.word	0x40000400
 80089b8:	40000800 	.word	0x40000800
 80089bc:	40000c00 	.word	0x40000c00
 80089c0:	40001000 	.word	0x40001000
 80089c4:	40001400 	.word	0x40001400
 80089c8:	40010400 	.word	0x40010400
 80089cc:	40014000 	.word	0x40014000
 80089d0:	40014400 	.word	0x40014400
 80089d4:	40014800 	.word	0x40014800
 80089d8:	40001800 	.word	0x40001800
 80089dc:	40001c00 	.word	0x40001c00
 80089e0:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a8d      	ldr	r2, [pc, #564]	; (8008c20 <HAL_TIM_ConfigClockSource+0x54c>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d01d      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0x356>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f6:	d018      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0x356>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a89      	ldr	r2, [pc, #548]	; (8008c24 <HAL_TIM_ConfigClockSource+0x550>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d013      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0x356>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a88      	ldr	r2, [pc, #544]	; (8008c28 <HAL_TIM_ConfigClockSource+0x554>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d00e      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0x356>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a86      	ldr	r2, [pc, #536]	; (8008c2c <HAL_TIM_ConfigClockSource+0x558>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d009      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0x356>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a85      	ldr	r2, [pc, #532]	; (8008c30 <HAL_TIM_ConfigClockSource+0x55c>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d004      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0x356>
 8008a20:	f241 5177 	movw	r1, #5495	; 0x1577
 8008a24:	4883      	ldr	r0, [pc, #524]	; (8008c34 <HAL_TIM_ConfigClockSource+0x560>)
 8008a26:	f7fa f98c 	bl	8002d42 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d013      	beq.n	8008a5a <HAL_TIM_ConfigClockSource+0x386>
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a3a:	d00e      	beq.n	8008a5a <HAL_TIM_ConfigClockSource+0x386>
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a44:	d009      	beq.n	8008a5a <HAL_TIM_ConfigClockSource+0x386>
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a4e:	d004      	beq.n	8008a5a <HAL_TIM_ConfigClockSource+0x386>
 8008a50:	f241 517a 	movw	r1, #5498	; 0x157a
 8008a54:	4877      	ldr	r0, [pc, #476]	; (8008c34 <HAL_TIM_ConfigClockSource+0x560>)
 8008a56:	f7fa f974 	bl	8002d42 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a62:	d014      	beq.n	8008a8e <HAL_TIM_ConfigClockSource+0x3ba>
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d010      	beq.n	8008a8e <HAL_TIM_ConfigClockSource+0x3ba>
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00c      	beq.n	8008a8e <HAL_TIM_ConfigClockSource+0x3ba>
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d008      	beq.n	8008a8e <HAL_TIM_ConfigClockSource+0x3ba>
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	2b0a      	cmp	r3, #10
 8008a82:	d004      	beq.n	8008a8e <HAL_TIM_ConfigClockSource+0x3ba>
 8008a84:	f241 517b 	movw	r1, #5499	; 0x157b
 8008a88:	486a      	ldr	r0, [pc, #424]	; (8008c34 <HAL_TIM_ConfigClockSource+0x560>)
 8008a8a:	f7fa f95a 	bl	8002d42 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	2b0f      	cmp	r3, #15
 8008a94:	d904      	bls.n	8008aa0 <HAL_TIM_ConfigClockSource+0x3cc>
 8008a96:	f241 517c 	movw	r1, #5500	; 0x157c
 8008a9a:	4866      	ldr	r0, [pc, #408]	; (8008c34 <HAL_TIM_ConfigClockSource+0x560>)
 8008a9c:	f7fa f951 	bl	8002d42 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6818      	ldr	r0, [r3, #0]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	6899      	ldr	r1, [r3, #8]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	685a      	ldr	r2, [r3, #4]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f000 fd96 	bl	80095e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689a      	ldr	r2, [r3, #8]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ac2:	609a      	str	r2, [r3, #8]
      break;
 8008ac4:	e13e      	b.n	8008d44 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a55      	ldr	r2, [pc, #340]	; (8008c20 <HAL_TIM_ConfigClockSource+0x54c>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d01d      	beq.n	8008b0c <HAL_TIM_ConfigClockSource+0x438>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ad8:	d018      	beq.n	8008b0c <HAL_TIM_ConfigClockSource+0x438>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a51      	ldr	r2, [pc, #324]	; (8008c24 <HAL_TIM_ConfigClockSource+0x550>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d013      	beq.n	8008b0c <HAL_TIM_ConfigClockSource+0x438>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a4f      	ldr	r2, [pc, #316]	; (8008c28 <HAL_TIM_ConfigClockSource+0x554>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d00e      	beq.n	8008b0c <HAL_TIM_ConfigClockSource+0x438>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a4e      	ldr	r2, [pc, #312]	; (8008c2c <HAL_TIM_ConfigClockSource+0x558>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d009      	beq.n	8008b0c <HAL_TIM_ConfigClockSource+0x438>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a4c      	ldr	r2, [pc, #304]	; (8008c30 <HAL_TIM_ConfigClockSource+0x55c>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d004      	beq.n	8008b0c <HAL_TIM_ConfigClockSource+0x438>
 8008b02:	f241 518b 	movw	r1, #5515	; 0x158b
 8008b06:	484b      	ldr	r0, [pc, #300]	; (8008c34 <HAL_TIM_ConfigClockSource+0x560>)
 8008b08:	f7fa f91b 	bl	8002d42 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b14:	d014      	beq.n	8008b40 <HAL_TIM_ConfigClockSource+0x46c>
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d010      	beq.n	8008b40 <HAL_TIM_ConfigClockSource+0x46c>
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00c      	beq.n	8008b40 <HAL_TIM_ConfigClockSource+0x46c>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d008      	beq.n	8008b40 <HAL_TIM_ConfigClockSource+0x46c>
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	2b0a      	cmp	r3, #10
 8008b34:	d004      	beq.n	8008b40 <HAL_TIM_ConfigClockSource+0x46c>
 8008b36:	f241 518e 	movw	r1, #5518	; 0x158e
 8008b3a:	483e      	ldr	r0, [pc, #248]	; (8008c34 <HAL_TIM_ConfigClockSource+0x560>)
 8008b3c:	f7fa f901 	bl	8002d42 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	2b0f      	cmp	r3, #15
 8008b46:	d904      	bls.n	8008b52 <HAL_TIM_ConfigClockSource+0x47e>
 8008b48:	f241 518f 	movw	r1, #5519	; 0x158f
 8008b4c:	4839      	ldr	r0, [pc, #228]	; (8008c34 <HAL_TIM_ConfigClockSource+0x560>)
 8008b4e:	f7fa f8f8 	bl	8002d42 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6818      	ldr	r0, [r3, #0]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	6859      	ldr	r1, [r3, #4]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f000 fcc4 	bl	80094ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2150      	movs	r1, #80	; 0x50
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 fd1d 	bl	80095aa <TIM_ITRx_SetConfig>
      break;
 8008b70:	e0e8      	b.n	8008d44 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a2a      	ldr	r2, [pc, #168]	; (8008c20 <HAL_TIM_ConfigClockSource+0x54c>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d01d      	beq.n	8008bb8 <HAL_TIM_ConfigClockSource+0x4e4>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b84:	d018      	beq.n	8008bb8 <HAL_TIM_ConfigClockSource+0x4e4>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a26      	ldr	r2, [pc, #152]	; (8008c24 <HAL_TIM_ConfigClockSource+0x550>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d013      	beq.n	8008bb8 <HAL_TIM_ConfigClockSource+0x4e4>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a24      	ldr	r2, [pc, #144]	; (8008c28 <HAL_TIM_ConfigClockSource+0x554>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d00e      	beq.n	8008bb8 <HAL_TIM_ConfigClockSource+0x4e4>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a23      	ldr	r2, [pc, #140]	; (8008c2c <HAL_TIM_ConfigClockSource+0x558>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d009      	beq.n	8008bb8 <HAL_TIM_ConfigClockSource+0x4e4>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a21      	ldr	r2, [pc, #132]	; (8008c30 <HAL_TIM_ConfigClockSource+0x55c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d004      	beq.n	8008bb8 <HAL_TIM_ConfigClockSource+0x4e4>
 8008bae:	f241 519b 	movw	r1, #5531	; 0x159b
 8008bb2:	4820      	ldr	r0, [pc, #128]	; (8008c34 <HAL_TIM_ConfigClockSource+0x560>)
 8008bb4:	f7fa f8c5 	bl	8002d42 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bc0:	d014      	beq.n	8008bec <HAL_TIM_ConfigClockSource+0x518>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d010      	beq.n	8008bec <HAL_TIM_ConfigClockSource+0x518>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00c      	beq.n	8008bec <HAL_TIM_ConfigClockSource+0x518>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d008      	beq.n	8008bec <HAL_TIM_ConfigClockSource+0x518>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	2b0a      	cmp	r3, #10
 8008be0:	d004      	beq.n	8008bec <HAL_TIM_ConfigClockSource+0x518>
 8008be2:	f241 519e 	movw	r1, #5534	; 0x159e
 8008be6:	4813      	ldr	r0, [pc, #76]	; (8008c34 <HAL_TIM_ConfigClockSource+0x560>)
 8008be8:	f7fa f8ab 	bl	8002d42 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	2b0f      	cmp	r3, #15
 8008bf2:	d904      	bls.n	8008bfe <HAL_TIM_ConfigClockSource+0x52a>
 8008bf4:	f241 519f 	movw	r1, #5535	; 0x159f
 8008bf8:	480e      	ldr	r0, [pc, #56]	; (8008c34 <HAL_TIM_ConfigClockSource+0x560>)
 8008bfa:	f7fa f8a2 	bl	8002d42 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6818      	ldr	r0, [r3, #0]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	6859      	ldr	r1, [r3, #4]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f000 fc9d 	bl	800954a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2160      	movs	r1, #96	; 0x60
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fcc7 	bl	80095aa <TIM_ITRx_SetConfig>
      break;
 8008c1c:	e092      	b.n	8008d44 <HAL_TIM_ConfigClockSource+0x670>
 8008c1e:	bf00      	nop
 8008c20:	40010000 	.word	0x40010000
 8008c24:	40000400 	.word	0x40000400
 8008c28:	40000800 	.word	0x40000800
 8008c2c:	40000c00 	.word	0x40000c00
 8008c30:	40010400 	.word	0x40010400
 8008c34:	08015a0c 	.word	0x08015a0c
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a48      	ldr	r2, [pc, #288]	; (8008d60 <HAL_TIM_ConfigClockSource+0x68c>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d01d      	beq.n	8008c7e <HAL_TIM_ConfigClockSource+0x5aa>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c4a:	d018      	beq.n	8008c7e <HAL_TIM_ConfigClockSource+0x5aa>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a44      	ldr	r2, [pc, #272]	; (8008d64 <HAL_TIM_ConfigClockSource+0x690>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d013      	beq.n	8008c7e <HAL_TIM_ConfigClockSource+0x5aa>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a43      	ldr	r2, [pc, #268]	; (8008d68 <HAL_TIM_ConfigClockSource+0x694>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d00e      	beq.n	8008c7e <HAL_TIM_ConfigClockSource+0x5aa>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a41      	ldr	r2, [pc, #260]	; (8008d6c <HAL_TIM_ConfigClockSource+0x698>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d009      	beq.n	8008c7e <HAL_TIM_ConfigClockSource+0x5aa>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a40      	ldr	r2, [pc, #256]	; (8008d70 <HAL_TIM_ConfigClockSource+0x69c>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d004      	beq.n	8008c7e <HAL_TIM_ConfigClockSource+0x5aa>
 8008c74:	f241 51ab 	movw	r1, #5547	; 0x15ab
 8008c78:	483e      	ldr	r0, [pc, #248]	; (8008d74 <HAL_TIM_ConfigClockSource+0x6a0>)
 8008c7a:	f7fa f862 	bl	8002d42 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c86:	d014      	beq.n	8008cb2 <HAL_TIM_ConfigClockSource+0x5de>
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d010      	beq.n	8008cb2 <HAL_TIM_ConfigClockSource+0x5de>
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00c      	beq.n	8008cb2 <HAL_TIM_ConfigClockSource+0x5de>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d008      	beq.n	8008cb2 <HAL_TIM_ConfigClockSource+0x5de>
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	2b0a      	cmp	r3, #10
 8008ca6:	d004      	beq.n	8008cb2 <HAL_TIM_ConfigClockSource+0x5de>
 8008ca8:	f241 51ae 	movw	r1, #5550	; 0x15ae
 8008cac:	4831      	ldr	r0, [pc, #196]	; (8008d74 <HAL_TIM_ConfigClockSource+0x6a0>)
 8008cae:	f7fa f848 	bl	8002d42 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	2b0f      	cmp	r3, #15
 8008cb8:	d904      	bls.n	8008cc4 <HAL_TIM_ConfigClockSource+0x5f0>
 8008cba:	f241 51af 	movw	r1, #5551	; 0x15af
 8008cbe:	482d      	ldr	r0, [pc, #180]	; (8008d74 <HAL_TIM_ConfigClockSource+0x6a0>)
 8008cc0:	f7fa f83f 	bl	8002d42 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6818      	ldr	r0, [r3, #0]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	6859      	ldr	r1, [r3, #4]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	f000 fc0b 	bl	80094ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2140      	movs	r1, #64	; 0x40
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 fc64 	bl	80095aa <TIM_ITRx_SetConfig>
      break;
 8008ce2:	e02f      	b.n	8008d44 <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a1d      	ldr	r2, [pc, #116]	; (8008d60 <HAL_TIM_ConfigClockSource+0x68c>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d01d      	beq.n	8008d2a <HAL_TIM_ConfigClockSource+0x656>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cf6:	d018      	beq.n	8008d2a <HAL_TIM_ConfigClockSource+0x656>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a19      	ldr	r2, [pc, #100]	; (8008d64 <HAL_TIM_ConfigClockSource+0x690>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d013      	beq.n	8008d2a <HAL_TIM_ConfigClockSource+0x656>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a18      	ldr	r2, [pc, #96]	; (8008d68 <HAL_TIM_ConfigClockSource+0x694>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d00e      	beq.n	8008d2a <HAL_TIM_ConfigClockSource+0x656>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a16      	ldr	r2, [pc, #88]	; (8008d6c <HAL_TIM_ConfigClockSource+0x698>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d009      	beq.n	8008d2a <HAL_TIM_ConfigClockSource+0x656>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a15      	ldr	r2, [pc, #84]	; (8008d70 <HAL_TIM_ConfigClockSource+0x69c>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d004      	beq.n	8008d2a <HAL_TIM_ConfigClockSource+0x656>
 8008d20:	f241 51be 	movw	r1, #5566	; 0x15be
 8008d24:	4813      	ldr	r0, [pc, #76]	; (8008d74 <HAL_TIM_ConfigClockSource+0x6a0>)
 8008d26:	f7fa f80c 	bl	8002d42 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4619      	mov	r1, r3
 8008d34:	4610      	mov	r0, r2
 8008d36:	f000 fc38 	bl	80095aa <TIM_ITRx_SetConfig>
      break;
 8008d3a:	e003      	b.n	8008d44 <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d40:	e000      	b.n	8008d44 <HAL_TIM_ConfigClockSource+0x670>
      break;
 8008d42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	40010000 	.word	0x40010000
 8008d64:	40000400 	.word	0x40000400
 8008d68:	40000800 	.word	0x40000800
 8008d6c:	40000c00 	.word	0x40000c00
 8008d70:	40010400 	.word	0x40010400
 8008d74:	08015a0c 	.word	0x08015a0c

08008d78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a40      	ldr	r2, [pc, #256]	; (8008ef0 <TIM_Base_SetConfig+0x114>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d013      	beq.n	8008e1c <TIM_Base_SetConfig+0x40>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dfa:	d00f      	beq.n	8008e1c <TIM_Base_SetConfig+0x40>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a3d      	ldr	r2, [pc, #244]	; (8008ef4 <TIM_Base_SetConfig+0x118>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d00b      	beq.n	8008e1c <TIM_Base_SetConfig+0x40>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a3c      	ldr	r2, [pc, #240]	; (8008ef8 <TIM_Base_SetConfig+0x11c>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d007      	beq.n	8008e1c <TIM_Base_SetConfig+0x40>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a3b      	ldr	r2, [pc, #236]	; (8008efc <TIM_Base_SetConfig+0x120>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d003      	beq.n	8008e1c <TIM_Base_SetConfig+0x40>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a3a      	ldr	r2, [pc, #232]	; (8008f00 <TIM_Base_SetConfig+0x124>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d108      	bne.n	8008e2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a2f      	ldr	r2, [pc, #188]	; (8008ef0 <TIM_Base_SetConfig+0x114>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d02b      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e3c:	d027      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a2c      	ldr	r2, [pc, #176]	; (8008ef4 <TIM_Base_SetConfig+0x118>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d023      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a2b      	ldr	r2, [pc, #172]	; (8008ef8 <TIM_Base_SetConfig+0x11c>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d01f      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a2a      	ldr	r2, [pc, #168]	; (8008efc <TIM_Base_SetConfig+0x120>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d01b      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a29      	ldr	r2, [pc, #164]	; (8008f00 <TIM_Base_SetConfig+0x124>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d017      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a28      	ldr	r2, [pc, #160]	; (8008f04 <TIM_Base_SetConfig+0x128>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d013      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a27      	ldr	r2, [pc, #156]	; (8008f08 <TIM_Base_SetConfig+0x12c>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d00f      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a26      	ldr	r2, [pc, #152]	; (8008f0c <TIM_Base_SetConfig+0x130>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d00b      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a25      	ldr	r2, [pc, #148]	; (8008f10 <TIM_Base_SetConfig+0x134>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d007      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a24      	ldr	r2, [pc, #144]	; (8008f14 <TIM_Base_SetConfig+0x138>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d003      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a23      	ldr	r2, [pc, #140]	; (8008f18 <TIM_Base_SetConfig+0x13c>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d108      	bne.n	8008ea0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a0a      	ldr	r2, [pc, #40]	; (8008ef0 <TIM_Base_SetConfig+0x114>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d003      	beq.n	8008ed4 <TIM_Base_SetConfig+0xf8>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a0c      	ldr	r2, [pc, #48]	; (8008f00 <TIM_Base_SetConfig+0x124>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d103      	bne.n	8008edc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	691a      	ldr	r2, [r3, #16]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	615a      	str	r2, [r3, #20]
}
 8008ee2:	bf00      	nop
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	40010000 	.word	0x40010000
 8008ef4:	40000400 	.word	0x40000400
 8008ef8:	40000800 	.word	0x40000800
 8008efc:	40000c00 	.word	0x40000c00
 8008f00:	40010400 	.word	0x40010400
 8008f04:	40014000 	.word	0x40014000
 8008f08:	40014400 	.word	0x40014400
 8008f0c:	40014800 	.word	0x40014800
 8008f10:	40001800 	.word	0x40001800
 8008f14:	40001c00 	.word	0x40001c00
 8008f18:	40002000 	.word	0x40002000

08008f1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	f023 0201 	bic.w	r2, r3, #1
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	699b      	ldr	r3, [r3, #24]
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	4b3f      	ldr	r3, [pc, #252]	; (8009044 <TIM_OC1_SetConfig+0x128>)
 8008f48:	4013      	ands	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f023 0303 	bic.w	r3, r3, #3
 8008f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f023 0302 	bic.w	r3, r3, #2
 8008f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a35      	ldr	r2, [pc, #212]	; (8009048 <TIM_OC1_SetConfig+0x12c>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d003      	beq.n	8008f80 <TIM_OC1_SetConfig+0x64>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a34      	ldr	r2, [pc, #208]	; (800904c <TIM_OC1_SetConfig+0x130>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d119      	bne.n	8008fb4 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d008      	beq.n	8008f9a <TIM_OC1_SetConfig+0x7e>
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	2b08      	cmp	r3, #8
 8008f8e:	d004      	beq.n	8008f9a <TIM_OC1_SetConfig+0x7e>
 8008f90:	f641 3167 	movw	r1, #7015	; 0x1b67
 8008f94:	482e      	ldr	r0, [pc, #184]	; (8009050 <TIM_OC1_SetConfig+0x134>)
 8008f96:	f7f9 fed4 	bl	8002d42 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	f023 0308 	bic.w	r3, r3, #8
 8008fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f023 0304 	bic.w	r3, r3, #4
 8008fb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a24      	ldr	r2, [pc, #144]	; (8009048 <TIM_OC1_SetConfig+0x12c>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d003      	beq.n	8008fc4 <TIM_OC1_SetConfig+0xa8>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a23      	ldr	r2, [pc, #140]	; (800904c <TIM_OC1_SetConfig+0x130>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d12d      	bne.n	8009020 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fcc:	d008      	beq.n	8008fe0 <TIM_OC1_SetConfig+0xc4>
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d004      	beq.n	8008fe0 <TIM_OC1_SetConfig+0xc4>
 8008fd6:	f641 3174 	movw	r1, #7028	; 0x1b74
 8008fda:	481d      	ldr	r0, [pc, #116]	; (8009050 <TIM_OC1_SetConfig+0x134>)
 8008fdc:	f7f9 feb1 	bl	8002d42 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	695b      	ldr	r3, [r3, #20]
 8008fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fe8:	d008      	beq.n	8008ffc <TIM_OC1_SetConfig+0xe0>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d004      	beq.n	8008ffc <TIM_OC1_SetConfig+0xe0>
 8008ff2:	f641 3175 	movw	r1, #7029	; 0x1b75
 8008ff6:	4816      	ldr	r0, [pc, #88]	; (8009050 <TIM_OC1_SetConfig+0x134>)
 8008ff8:	f7f9 fea3 	bl	8002d42 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009002:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800900a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	4313      	orrs	r3, r2
 8009014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	4313      	orrs	r3, r2
 800901e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	621a      	str	r2, [r3, #32]
}
 800903a:	bf00      	nop
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	fffeff8f 	.word	0xfffeff8f
 8009048:	40010000 	.word	0x40010000
 800904c:	40010400 	.word	0x40010400
 8009050:	08015a0c 	.word	0x08015a0c

08009054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	f023 0210 	bic.w	r2, r3, #16
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4b41      	ldr	r3, [pc, #260]	; (8009184 <TIM_OC2_SetConfig+0x130>)
 8009080:	4013      	ands	r3, r2
 8009082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800908a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	021b      	lsls	r3, r3, #8
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	4313      	orrs	r3, r2
 8009096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	f023 0320 	bic.w	r3, r3, #32
 800909e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	011b      	lsls	r3, r3, #4
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a36      	ldr	r2, [pc, #216]	; (8009188 <TIM_OC2_SetConfig+0x134>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d003      	beq.n	80090bc <TIM_OC2_SetConfig+0x68>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a35      	ldr	r2, [pc, #212]	; (800918c <TIM_OC2_SetConfig+0x138>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d11a      	bne.n	80090f2 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d008      	beq.n	80090d6 <TIM_OC2_SetConfig+0x82>
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	2b08      	cmp	r3, #8
 80090ca:	d004      	beq.n	80090d6 <TIM_OC2_SetConfig+0x82>
 80090cc:	f641 31b2 	movw	r1, #7090	; 0x1bb2
 80090d0:	482f      	ldr	r0, [pc, #188]	; (8009190 <TIM_OC2_SetConfig+0x13c>)
 80090d2:	f7f9 fe36 	bl	8002d42 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	011b      	lsls	r3, r3, #4
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090f0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a24      	ldr	r2, [pc, #144]	; (8009188 <TIM_OC2_SetConfig+0x134>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d003      	beq.n	8009102 <TIM_OC2_SetConfig+0xae>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a23      	ldr	r2, [pc, #140]	; (800918c <TIM_OC2_SetConfig+0x138>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d12f      	bne.n	8009162 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800910a:	d008      	beq.n	800911e <TIM_OC2_SetConfig+0xca>
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	699b      	ldr	r3, [r3, #24]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d004      	beq.n	800911e <TIM_OC2_SetConfig+0xca>
 8009114:	f44f 51de 	mov.w	r1, #7104	; 0x1bc0
 8009118:	481d      	ldr	r0, [pc, #116]	; (8009190 <TIM_OC2_SetConfig+0x13c>)
 800911a:	f7f9 fe12 	bl	8002d42 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009126:	d008      	beq.n	800913a <TIM_OC2_SetConfig+0xe6>
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d004      	beq.n	800913a <TIM_OC2_SetConfig+0xe6>
 8009130:	f641 31c1 	movw	r1, #7105	; 0x1bc1
 8009134:	4816      	ldr	r0, [pc, #88]	; (8009190 <TIM_OC2_SetConfig+0x13c>)
 8009136:	f7f9 fe04 	bl	8002d42 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	4313      	orrs	r3, r2
 8009154:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	693a      	ldr	r2, [r7, #16]
 800915e:	4313      	orrs	r3, r2
 8009160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	685a      	ldr	r2, [r3, #4]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	697a      	ldr	r2, [r7, #20]
 800917a:	621a      	str	r2, [r3, #32]
}
 800917c:	bf00      	nop
 800917e:	3718      	adds	r7, #24
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	feff8fff 	.word	0xfeff8fff
 8009188:	40010000 	.word	0x40010000
 800918c:	40010400 	.word	0x40010400
 8009190:	08015a0c 	.word	0x08015a0c

08009194 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a1b      	ldr	r3, [r3, #32]
 80091ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	69db      	ldr	r3, [r3, #28]
 80091ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	4b41      	ldr	r3, [pc, #260]	; (80092c4 <TIM_OC3_SetConfig+0x130>)
 80091c0:	4013      	ands	r3, r2
 80091c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f023 0303 	bic.w	r3, r3, #3
 80091ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	021b      	lsls	r3, r3, #8
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a36      	ldr	r2, [pc, #216]	; (80092c8 <TIM_OC3_SetConfig+0x134>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d003      	beq.n	80091fa <TIM_OC3_SetConfig+0x66>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a35      	ldr	r2, [pc, #212]	; (80092cc <TIM_OC3_SetConfig+0x138>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d11a      	bne.n	8009230 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d008      	beq.n	8009214 <TIM_OC3_SetConfig+0x80>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	2b08      	cmp	r3, #8
 8009208:	d004      	beq.n	8009214 <TIM_OC3_SetConfig+0x80>
 800920a:	f641 31fd 	movw	r1, #7165	; 0x1bfd
 800920e:	4830      	ldr	r0, [pc, #192]	; (80092d0 <TIM_OC3_SetConfig+0x13c>)
 8009210:	f7f9 fd97 	bl	8002d42 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800921a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	021b      	lsls	r3, r3, #8
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	4313      	orrs	r3, r2
 8009226:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800922e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a25      	ldr	r2, [pc, #148]	; (80092c8 <TIM_OC3_SetConfig+0x134>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d003      	beq.n	8009240 <TIM_OC3_SetConfig+0xac>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a24      	ldr	r2, [pc, #144]	; (80092cc <TIM_OC3_SetConfig+0x138>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d12f      	bne.n	80092a0 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009248:	d008      	beq.n	800925c <TIM_OC3_SetConfig+0xc8>
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d004      	beq.n	800925c <TIM_OC3_SetConfig+0xc8>
 8009252:	f641 410a 	movw	r1, #7178	; 0x1c0a
 8009256:	481e      	ldr	r0, [pc, #120]	; (80092d0 <TIM_OC3_SetConfig+0x13c>)
 8009258:	f7f9 fd73 	bl	8002d42 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	695b      	ldr	r3, [r3, #20]
 8009260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009264:	d008      	beq.n	8009278 <TIM_OC3_SetConfig+0xe4>
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d004      	beq.n	8009278 <TIM_OC3_SetConfig+0xe4>
 800926e:	f641 410b 	movw	r1, #7179	; 0x1c0b
 8009272:	4817      	ldr	r0, [pc, #92]	; (80092d0 <TIM_OC3_SetConfig+0x13c>)
 8009274:	f7f9 fd65 	bl	8002d42 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800927e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009286:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	695b      	ldr	r3, [r3, #20]
 800928c:	011b      	lsls	r3, r3, #4
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	4313      	orrs	r3, r2
 8009292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	011b      	lsls	r3, r3, #4
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	4313      	orrs	r3, r2
 800929e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	621a      	str	r2, [r3, #32]
}
 80092ba:	bf00      	nop
 80092bc:	3718      	adds	r7, #24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	fffeff8f 	.word	0xfffeff8f
 80092c8:	40010000 	.word	0x40010000
 80092cc:	40010400 	.word	0x40010400
 80092d0:	08015a0c 	.word	0x08015a0c

080092d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	69db      	ldr	r3, [r3, #28]
 80092fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	4b24      	ldr	r3, [pc, #144]	; (8009390 <TIM_OC4_SetConfig+0xbc>)
 8009300:	4013      	ands	r3, r2
 8009302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800930a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	021b      	lsls	r3, r3, #8
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	4313      	orrs	r3, r2
 8009316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800931e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	031b      	lsls	r3, r3, #12
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	4313      	orrs	r3, r2
 800932a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a19      	ldr	r2, [pc, #100]	; (8009394 <TIM_OC4_SetConfig+0xc0>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d003      	beq.n	800933c <TIM_OC4_SetConfig+0x68>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a18      	ldr	r2, [pc, #96]	; (8009398 <TIM_OC4_SetConfig+0xc4>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d117      	bne.n	800936c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	695b      	ldr	r3, [r3, #20]
 8009340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009344:	d008      	beq.n	8009358 <TIM_OC4_SetConfig+0x84>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d004      	beq.n	8009358 <TIM_OC4_SetConfig+0x84>
 800934e:	f641 4149 	movw	r1, #7241	; 0x1c49
 8009352:	4812      	ldr	r0, [pc, #72]	; (800939c <TIM_OC4_SetConfig+0xc8>)
 8009354:	f7f9 fcf5 	bl	8002d42 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800935e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	695b      	ldr	r3, [r3, #20]
 8009364:	019b      	lsls	r3, r3, #6
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	4313      	orrs	r3, r2
 800936a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	693a      	ldr	r2, [r7, #16]
 8009384:	621a      	str	r2, [r3, #32]
}
 8009386:	bf00      	nop
 8009388:	3718      	adds	r7, #24
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	feff8fff 	.word	0xfeff8fff
 8009394:	40010000 	.word	0x40010000
 8009398:	40010400 	.word	0x40010400
 800939c:	08015a0c 	.word	0x08015a0c

080093a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b087      	sub	sp, #28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	4b1b      	ldr	r3, [pc, #108]	; (8009438 <TIM_OC5_SetConfig+0x98>)
 80093cc:	4013      	ands	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80093e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	041b      	lsls	r3, r3, #16
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a12      	ldr	r2, [pc, #72]	; (800943c <TIM_OC5_SetConfig+0x9c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d003      	beq.n	80093fe <TIM_OC5_SetConfig+0x5e>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a11      	ldr	r2, [pc, #68]	; (8009440 <TIM_OC5_SetConfig+0xa0>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d109      	bne.n	8009412 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009404:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	021b      	lsls	r3, r3, #8
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	4313      	orrs	r3, r2
 8009410:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	685a      	ldr	r2, [r3, #4]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	621a      	str	r2, [r3, #32]
}
 800942c:	bf00      	nop
 800942e:	371c      	adds	r7, #28
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr
 8009438:	fffeff8f 	.word	0xfffeff8f
 800943c:	40010000 	.word	0x40010000
 8009440:	40010400 	.word	0x40010400

08009444 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009444:	b480      	push	{r7}
 8009446:	b087      	sub	sp, #28
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800946a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	4b1c      	ldr	r3, [pc, #112]	; (80094e0 <TIM_OC6_SetConfig+0x9c>)
 8009470:	4013      	ands	r3, r2
 8009472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	021b      	lsls	r3, r3, #8
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	4313      	orrs	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	051b      	lsls	r3, r3, #20
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	4313      	orrs	r3, r2
 8009492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a13      	ldr	r2, [pc, #76]	; (80094e4 <TIM_OC6_SetConfig+0xa0>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d003      	beq.n	80094a4 <TIM_OC6_SetConfig+0x60>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a12      	ldr	r2, [pc, #72]	; (80094e8 <TIM_OC6_SetConfig+0xa4>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d109      	bne.n	80094b8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	029b      	lsls	r3, r3, #10
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	621a      	str	r2, [r3, #32]
}
 80094d2:	bf00      	nop
 80094d4:	371c      	adds	r7, #28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	feff8fff 	.word	0xfeff8fff
 80094e4:	40010000 	.word	0x40010000
 80094e8:	40010400 	.word	0x40010400

080094ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b087      	sub	sp, #28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6a1b      	ldr	r3, [r3, #32]
 80094fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	f023 0201 	bic.w	r2, r3, #1
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	011b      	lsls	r3, r3, #4
 800951c:	693a      	ldr	r2, [r7, #16]
 800951e:	4313      	orrs	r3, r2
 8009520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f023 030a 	bic.w	r3, r3, #10
 8009528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	4313      	orrs	r3, r2
 8009530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	621a      	str	r2, [r3, #32]
}
 800953e:	bf00      	nop
 8009540:	371c      	adds	r7, #28
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr

0800954a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800954a:	b480      	push	{r7}
 800954c:	b087      	sub	sp, #28
 800954e:	af00      	add	r7, sp, #0
 8009550:	60f8      	str	r0, [r7, #12]
 8009552:	60b9      	str	r1, [r7, #8]
 8009554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	f023 0210 	bic.w	r2, r3, #16
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6a1b      	ldr	r3, [r3, #32]
 800956c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009574:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	031b      	lsls	r3, r3, #12
 800957a:	697a      	ldr	r2, [r7, #20]
 800957c:	4313      	orrs	r3, r2
 800957e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009586:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	011b      	lsls	r3, r3, #4
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	4313      	orrs	r3, r2
 8009590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	621a      	str	r2, [r3, #32]
}
 800959e:	bf00      	nop
 80095a0:	371c      	adds	r7, #28
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095aa:	b480      	push	{r7}
 80095ac:	b085      	sub	sp, #20
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	f043 0307 	orr.w	r3, r3, #7
 80095cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	609a      	str	r2, [r3, #8]
}
 80095d4:	bf00      	nop
 80095d6:	3714      	adds	r7, #20
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
 80095ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	021a      	lsls	r2, r3, #8
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	431a      	orrs	r2, r3
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	4313      	orrs	r3, r2
 8009608:	697a      	ldr	r2, [r7, #20]
 800960a:	4313      	orrs	r3, r2
 800960c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	609a      	str	r2, [r3, #8]
}
 8009614:	bf00      	nop
 8009616:	371c      	adds	r7, #28
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	4a35      	ldr	r2, [pc, #212]	; (8009704 <TIM_CCxChannelCmd+0xe4>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d030      	beq.n	8009696 <TIM_CCxChannelCmd+0x76>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800963a:	d02c      	beq.n	8009696 <TIM_CCxChannelCmd+0x76>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	4a32      	ldr	r2, [pc, #200]	; (8009708 <TIM_CCxChannelCmd+0xe8>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d028      	beq.n	8009696 <TIM_CCxChannelCmd+0x76>
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	4a31      	ldr	r2, [pc, #196]	; (800970c <TIM_CCxChannelCmd+0xec>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d024      	beq.n	8009696 <TIM_CCxChannelCmd+0x76>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4a30      	ldr	r2, [pc, #192]	; (8009710 <TIM_CCxChannelCmd+0xf0>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d020      	beq.n	8009696 <TIM_CCxChannelCmd+0x76>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4a2f      	ldr	r2, [pc, #188]	; (8009714 <TIM_CCxChannelCmd+0xf4>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d01c      	beq.n	8009696 <TIM_CCxChannelCmd+0x76>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	4a2e      	ldr	r2, [pc, #184]	; (8009718 <TIM_CCxChannelCmd+0xf8>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d018      	beq.n	8009696 <TIM_CCxChannelCmd+0x76>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	4a2d      	ldr	r2, [pc, #180]	; (800971c <TIM_CCxChannelCmd+0xfc>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d014      	beq.n	8009696 <TIM_CCxChannelCmd+0x76>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4a2c      	ldr	r2, [pc, #176]	; (8009720 <TIM_CCxChannelCmd+0x100>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d010      	beq.n	8009696 <TIM_CCxChannelCmd+0x76>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	4a2b      	ldr	r2, [pc, #172]	; (8009724 <TIM_CCxChannelCmd+0x104>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d00c      	beq.n	8009696 <TIM_CCxChannelCmd+0x76>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	4a2a      	ldr	r2, [pc, #168]	; (8009728 <TIM_CCxChannelCmd+0x108>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d008      	beq.n	8009696 <TIM_CCxChannelCmd+0x76>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	4a29      	ldr	r2, [pc, #164]	; (800972c <TIM_CCxChannelCmd+0x10c>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d004      	beq.n	8009696 <TIM_CCxChannelCmd+0x76>
 800968c:	f641 61a1 	movw	r1, #7841	; 0x1ea1
 8009690:	4827      	ldr	r0, [pc, #156]	; (8009730 <TIM_CCxChannelCmd+0x110>)
 8009692:	f7f9 fb56 	bl	8002d42 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d016      	beq.n	80096ca <TIM_CCxChannelCmd+0xaa>
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	2b04      	cmp	r3, #4
 80096a0:	d013      	beq.n	80096ca <TIM_CCxChannelCmd+0xaa>
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	2b08      	cmp	r3, #8
 80096a6:	d010      	beq.n	80096ca <TIM_CCxChannelCmd+0xaa>
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2b0c      	cmp	r3, #12
 80096ac:	d00d      	beq.n	80096ca <TIM_CCxChannelCmd+0xaa>
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2b10      	cmp	r3, #16
 80096b2:	d00a      	beq.n	80096ca <TIM_CCxChannelCmd+0xaa>
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	2b14      	cmp	r3, #20
 80096b8:	d007      	beq.n	80096ca <TIM_CCxChannelCmd+0xaa>
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2b3c      	cmp	r3, #60	; 0x3c
 80096be:	d004      	beq.n	80096ca <TIM_CCxChannelCmd+0xaa>
 80096c0:	f641 61a2 	movw	r1, #7842	; 0x1ea2
 80096c4:	481a      	ldr	r0, [pc, #104]	; (8009730 <TIM_CCxChannelCmd+0x110>)
 80096c6:	f7f9 fb3c 	bl	8002d42 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	f003 031f 	and.w	r3, r3, #31
 80096d0:	2201      	movs	r2, #1
 80096d2:	fa02 f303 	lsl.w	r3, r2, r3
 80096d6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6a1a      	ldr	r2, [r3, #32]
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	43db      	mvns	r3, r3
 80096e0:	401a      	ands	r2, r3
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6a1a      	ldr	r2, [r3, #32]
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	f003 031f 	and.w	r3, r3, #31
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	fa01 f303 	lsl.w	r3, r1, r3
 80096f6:	431a      	orrs	r2, r3
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	621a      	str	r2, [r3, #32]
}
 80096fc:	bf00      	nop
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	40010000 	.word	0x40010000
 8009708:	40000400 	.word	0x40000400
 800970c:	40000800 	.word	0x40000800
 8009710:	40000c00 	.word	0x40000c00
 8009714:	40010400 	.word	0x40010400
 8009718:	40014000 	.word	0x40014000
 800971c:	40014400 	.word	0x40014400
 8009720:	40014800 	.word	0x40014800
 8009724:	40001800 	.word	0x40001800
 8009728:	40001c00 	.word	0x40001c00
 800972c:	40002000 	.word	0x40002000
 8009730:	08015a0c 	.word	0x08015a0c

08009734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a32      	ldr	r2, [pc, #200]	; (800980c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d027      	beq.n	8009798 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009750:	d022      	beq.n	8009798 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a2e      	ldr	r2, [pc, #184]	; (8009810 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d01d      	beq.n	8009798 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a2c      	ldr	r2, [pc, #176]	; (8009814 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d018      	beq.n	8009798 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a2b      	ldr	r2, [pc, #172]	; (8009818 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d013      	beq.n	8009798 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a29      	ldr	r2, [pc, #164]	; (800981c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d00e      	beq.n	8009798 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a28      	ldr	r2, [pc, #160]	; (8009820 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d009      	beq.n	8009798 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a26      	ldr	r2, [pc, #152]	; (8009824 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d004      	beq.n	8009798 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800978e:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8009792:	4825      	ldr	r0, [pc, #148]	; (8009828 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009794:	f7f9 fad5 	bl	8002d42 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d020      	beq.n	80097e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2b10      	cmp	r3, #16
 80097a6:	d01c      	beq.n	80097e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b20      	cmp	r3, #32
 80097ae:	d018      	beq.n	80097e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b30      	cmp	r3, #48	; 0x30
 80097b6:	d014      	beq.n	80097e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b40      	cmp	r3, #64	; 0x40
 80097be:	d010      	beq.n	80097e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b50      	cmp	r3, #80	; 0x50
 80097c6:	d00c      	beq.n	80097e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b60      	cmp	r3, #96	; 0x60
 80097ce:	d008      	beq.n	80097e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b70      	cmp	r3, #112	; 0x70
 80097d6:	d004      	beq.n	80097e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80097d8:	f240 71b7 	movw	r1, #1975	; 0x7b7
 80097dc:	4812      	ldr	r0, [pc, #72]	; (8009828 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80097de:	f7f9 fab0 	bl	8002d42 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	2b80      	cmp	r3, #128	; 0x80
 80097e8:	d008      	beq.n	80097fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d004      	beq.n	80097fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097f2:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 80097f6:	480c      	ldr	r0, [pc, #48]	; (8009828 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80097f8:	f7f9 faa3 	bl	8002d42 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009802:	2b01      	cmp	r3, #1
 8009804:	d112      	bne.n	800982c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8009806:	2302      	movs	r3, #2
 8009808:	e0d7      	b.n	80099ba <HAL_TIMEx_MasterConfigSynchronization+0x286>
 800980a:	bf00      	nop
 800980c:	40010000 	.word	0x40010000
 8009810:	40000400 	.word	0x40000400
 8009814:	40000800 	.word	0x40000800
 8009818:	40000c00 	.word	0x40000c00
 800981c:	40001000 	.word	0x40001000
 8009820:	40001400 	.word	0x40001400
 8009824:	40010400 	.word	0x40010400
 8009828:	08015a44 	.word	0x08015a44
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2202      	movs	r2, #2
 8009838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a5c      	ldr	r2, [pc, #368]	; (80099c4 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d004      	beq.n	8009860 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a5b      	ldr	r2, [pc, #364]	; (80099c8 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d161      	bne.n	8009924 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d054      	beq.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009870:	d04f      	beq.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800987a:	d04a      	beq.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009884:	d045      	beq.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800988e:	d040      	beq.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009898:	d03b      	beq.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098a2:	d036      	beq.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098ac:	d031      	beq.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80098b6:	d02c      	beq.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098c0:	d027      	beq.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80098ca:	d022      	beq.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80098d4:	d01d      	beq.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80098de:	d018      	beq.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80098e8:	d013      	beq.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 80098f2:	d00e      	beq.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 80098fc:	d009      	beq.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8009906:	d004      	beq.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009908:	f240 71ca 	movw	r1, #1994	; 0x7ca
 800990c:	482f      	ldr	r0, [pc, #188]	; (80099cc <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800990e:	f7f9 fa18 	bl	8002d42 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009918:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	4313      	orrs	r3, r2
 8009922:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800992a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	4313      	orrs	r3, r2
 8009934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a20      	ldr	r2, [pc, #128]	; (80099c4 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d022      	beq.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009950:	d01d      	beq.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a1e      	ldr	r2, [pc, #120]	; (80099d0 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d018      	beq.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a1c      	ldr	r2, [pc, #112]	; (80099d4 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d013      	beq.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a1b      	ldr	r2, [pc, #108]	; (80099d8 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d00e      	beq.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a14      	ldr	r2, [pc, #80]	; (80099c8 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d009      	beq.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a17      	ldr	r2, [pc, #92]	; (80099dc <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d004      	beq.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a15      	ldr	r2, [pc, #84]	; (80099e0 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d10c      	bne.n	80099a8 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	4313      	orrs	r3, r2
 800999e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	40010000 	.word	0x40010000
 80099c8:	40010400 	.word	0x40010400
 80099cc:	08015a44 	.word	0x08015a44
 80099d0:	40000400 	.word	0x40000400
 80099d4:	40000800 	.word	0x40000800
 80099d8:	40000c00 	.word	0x40000c00
 80099dc:	40014000 	.word	0x40014000
 80099e0:	40001800 	.word	0x40001800

080099e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099ec:	bf00      	nop
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a00:	bf00      	nop
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a14:	bf00      	nop
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d101      	bne.n	8009a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e09f      	b.n	8009b72 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d02d      	beq.n	8009a96 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a4f      	ldr	r2, [pc, #316]	; (8009b7c <HAL_UART_Init+0x15c>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d055      	beq.n	8009af0 <HAL_UART_Init+0xd0>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a4d      	ldr	r2, [pc, #308]	; (8009b80 <HAL_UART_Init+0x160>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d050      	beq.n	8009af0 <HAL_UART_Init+0xd0>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a4c      	ldr	r2, [pc, #304]	; (8009b84 <HAL_UART_Init+0x164>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d04b      	beq.n	8009af0 <HAL_UART_Init+0xd0>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a4a      	ldr	r2, [pc, #296]	; (8009b88 <HAL_UART_Init+0x168>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d046      	beq.n	8009af0 <HAL_UART_Init+0xd0>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a49      	ldr	r2, [pc, #292]	; (8009b8c <HAL_UART_Init+0x16c>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d041      	beq.n	8009af0 <HAL_UART_Init+0xd0>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a47      	ldr	r2, [pc, #284]	; (8009b90 <HAL_UART_Init+0x170>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d03c      	beq.n	8009af0 <HAL_UART_Init+0xd0>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a46      	ldr	r2, [pc, #280]	; (8009b94 <HAL_UART_Init+0x174>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d037      	beq.n	8009af0 <HAL_UART_Init+0xd0>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a44      	ldr	r2, [pc, #272]	; (8009b98 <HAL_UART_Init+0x178>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d032      	beq.n	8009af0 <HAL_UART_Init+0xd0>
 8009a8a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009a8e:	4843      	ldr	r0, [pc, #268]	; (8009b9c <HAL_UART_Init+0x17c>)
 8009a90:	f7f9 f957 	bl	8002d42 <assert_failed>
 8009a94:	e02c      	b.n	8009af0 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a38      	ldr	r2, [pc, #224]	; (8009b7c <HAL_UART_Init+0x15c>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d027      	beq.n	8009af0 <HAL_UART_Init+0xd0>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a36      	ldr	r2, [pc, #216]	; (8009b80 <HAL_UART_Init+0x160>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d022      	beq.n	8009af0 <HAL_UART_Init+0xd0>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a35      	ldr	r2, [pc, #212]	; (8009b84 <HAL_UART_Init+0x164>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d01d      	beq.n	8009af0 <HAL_UART_Init+0xd0>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a33      	ldr	r2, [pc, #204]	; (8009b88 <HAL_UART_Init+0x168>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d018      	beq.n	8009af0 <HAL_UART_Init+0xd0>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a32      	ldr	r2, [pc, #200]	; (8009b8c <HAL_UART_Init+0x16c>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d013      	beq.n	8009af0 <HAL_UART_Init+0xd0>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a30      	ldr	r2, [pc, #192]	; (8009b90 <HAL_UART_Init+0x170>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d00e      	beq.n	8009af0 <HAL_UART_Init+0xd0>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a2f      	ldr	r2, [pc, #188]	; (8009b94 <HAL_UART_Init+0x174>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d009      	beq.n	8009af0 <HAL_UART_Init+0xd0>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a2d      	ldr	r2, [pc, #180]	; (8009b98 <HAL_UART_Init+0x178>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d004      	beq.n	8009af0 <HAL_UART_Init+0xd0>
 8009ae6:	f240 1131 	movw	r1, #305	; 0x131
 8009aea:	482c      	ldr	r0, [pc, #176]	; (8009b9c <HAL_UART_Init+0x17c>)
 8009aec:	f7f9 f929 	bl	8002d42 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d106      	bne.n	8009b06 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7f9 fd1b 	bl	800353c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2224      	movs	r2, #36	; 0x24
 8009b0a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f022 0201 	bic.w	r2, r2, #1
 8009b1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fbf9 	bl	800a314 <UART_SetConfig>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d101      	bne.n	8009b2c <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	e022      	b.n	8009b72 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d002      	beq.n	8009b3a <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fee3 	bl	800a900 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	689a      	ldr	r2, [r3, #8]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f042 0201 	orr.w	r2, r2, #1
 8009b68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f001 f820 	bl	800abb0 <UART_CheckIdleState>
 8009b70:	4603      	mov	r3, r0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	40011000 	.word	0x40011000
 8009b80:	40004400 	.word	0x40004400
 8009b84:	40004800 	.word	0x40004800
 8009b88:	40004c00 	.word	0x40004c00
 8009b8c:	40005000 	.word	0x40005000
 8009b90:	40011400 	.word	0x40011400
 8009b94:	40007800 	.word	0x40007800
 8009b98:	40007c00 	.word	0x40007c00
 8009b9c:	08015a80 	.word	0x08015a80

08009ba0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b08a      	sub	sp, #40	; 0x28
 8009ba4:	af02      	add	r7, sp, #8
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	603b      	str	r3, [r7, #0]
 8009bac:	4613      	mov	r3, r2
 8009bae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bb4:	2b20      	cmp	r3, #32
 8009bb6:	d171      	bne.n	8009c9c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <HAL_UART_Transmit+0x24>
 8009bbe:	88fb      	ldrh	r3, [r7, #6]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d101      	bne.n	8009bc8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e06a      	b.n	8009c9e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2221      	movs	r2, #33	; 0x21
 8009bd4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bd6:	f7f9 fdad 	bl	8003734 <HAL_GetTick>
 8009bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	88fa      	ldrh	r2, [r7, #6]
 8009be0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	88fa      	ldrh	r2, [r7, #6]
 8009be8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bf4:	d108      	bne.n	8009c08 <HAL_UART_Transmit+0x68>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d104      	bne.n	8009c08 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	61bb      	str	r3, [r7, #24]
 8009c06:	e003      	b.n	8009c10 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009c10:	e02c      	b.n	8009c6c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	2180      	movs	r1, #128	; 0x80
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f000 fffe 	bl	800ac1e <UART_WaitOnFlagUntilTimeout>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e038      	b.n	8009c9e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10b      	bne.n	8009c4a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	881b      	ldrh	r3, [r3, #0]
 8009c36:	461a      	mov	r2, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	3302      	adds	r3, #2
 8009c46:	61bb      	str	r3, [r7, #24]
 8009c48:	e007      	b.n	8009c5a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	781a      	ldrb	r2, [r3, #0]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	3301      	adds	r3, #1
 8009c58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	3b01      	subs	r3, #1
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1cc      	bne.n	8009c12 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	2140      	movs	r1, #64	; 0x40
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f000 ffcb 	bl	800ac1e <UART_WaitOnFlagUntilTimeout>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d001      	beq.n	8009c92 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8009c8e:	2303      	movs	r3, #3
 8009c90:	e005      	b.n	8009c9e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2220      	movs	r2, #32
 8009c96:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	e000      	b.n	8009c9e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009c9c:	2302      	movs	r3, #2
  }
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3720      	adds	r7, #32
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b08a      	sub	sp, #40	; 0x28
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	60f8      	str	r0, [r7, #12]
 8009cae:	60b9      	str	r1, [r7, #8]
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cba:	2b20      	cmp	r3, #32
 8009cbc:	d132      	bne.n	8009d24 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <HAL_UART_Receive_IT+0x24>
 8009cc4:	88fb      	ldrh	r3, [r7, #6]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d101      	bne.n	8009cce <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e02b      	b.n	8009d26 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d018      	beq.n	8009d14 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	e853 3f00 	ldrex	r3, [r3]
 8009cee:	613b      	str	r3, [r7, #16]
   return(result);
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d00:	623b      	str	r3, [r7, #32]
 8009d02:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d04:	69f9      	ldr	r1, [r7, #28]
 8009d06:	6a3a      	ldr	r2, [r7, #32]
 8009d08:	e841 2300 	strex	r3, r2, [r1]
 8009d0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1e6      	bne.n	8009ce2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009d14:	88fb      	ldrh	r3, [r7, #6]
 8009d16:	461a      	mov	r2, r3
 8009d18:	68b9      	ldr	r1, [r7, #8]
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f001 f846 	bl	800adac <UART_Start_Receive_IT>
 8009d20:	4603      	mov	r3, r0
 8009d22:	e000      	b.n	8009d26 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009d24:	2302      	movs	r3, #2
  }
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3728      	adds	r7, #40	; 0x28
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
	...

08009d30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b0ba      	sub	sp, #232	; 0xe8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	69db      	ldr	r3, [r3, #28]
 8009d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009d56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009d5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009d5e:	4013      	ands	r3, r2
 8009d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009d64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d115      	bne.n	8009d98 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d70:	f003 0320 	and.w	r3, r3, #32
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00f      	beq.n	8009d98 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d7c:	f003 0320 	and.w	r3, r3, #32
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d009      	beq.n	8009d98 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 8297 	beq.w	800a2bc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	4798      	blx	r3
      }
      return;
 8009d96:	e291      	b.n	800a2bc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f000 8117 	beq.w	8009fd0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009da6:	f003 0301 	and.w	r3, r3, #1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d106      	bne.n	8009dbc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009dae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009db2:	4b85      	ldr	r3, [pc, #532]	; (8009fc8 <HAL_UART_IRQHandler+0x298>)
 8009db4:	4013      	ands	r3, r2
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f000 810a 	beq.w	8009fd0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dc0:	f003 0301 	and.w	r3, r3, #1
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d011      	beq.n	8009dec <HAL_UART_IRQHandler+0xbc>
 8009dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00b      	beq.n	8009dec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009de2:	f043 0201 	orr.w	r2, r3, #1
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009df0:	f003 0302 	and.w	r3, r3, #2
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d011      	beq.n	8009e1c <HAL_UART_IRQHandler+0xec>
 8009df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00b      	beq.n	8009e1c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2202      	movs	r2, #2
 8009e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e12:	f043 0204 	orr.w	r2, r3, #4
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e20:	f003 0304 	and.w	r3, r3, #4
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d011      	beq.n	8009e4c <HAL_UART_IRQHandler+0x11c>
 8009e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e2c:	f003 0301 	and.w	r3, r3, #1
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00b      	beq.n	8009e4c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2204      	movs	r2, #4
 8009e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e42:	f043 0202 	orr.w	r2, r3, #2
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e50:	f003 0308 	and.w	r3, r3, #8
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d017      	beq.n	8009e88 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e5c:	f003 0320 	and.w	r3, r3, #32
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d105      	bne.n	8009e70 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00b      	beq.n	8009e88 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2208      	movs	r2, #8
 8009e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e7e:	f043 0208 	orr.w	r2, r3, #8
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d012      	beq.n	8009eba <HAL_UART_IRQHandler+0x18a>
 8009e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00c      	beq.n	8009eba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009eb0:	f043 0220 	orr.w	r2, r3, #32
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 81fd 	beq.w	800a2c0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eca:	f003 0320 	and.w	r3, r3, #32
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00d      	beq.n	8009eee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ed6:	f003 0320 	and.w	r3, r3, #32
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d007      	beq.n	8009eee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d003      	beq.n	8009eee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ef4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f02:	2b40      	cmp	r3, #64	; 0x40
 8009f04:	d005      	beq.n	8009f12 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d04f      	beq.n	8009fb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f001 f810 	bl	800af38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f22:	2b40      	cmp	r3, #64	; 0x40
 8009f24:	d141      	bne.n	8009faa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f34:	e853 3f00 	ldrex	r3, [r3]
 8009f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3308      	adds	r3, #8
 8009f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f62:	e841 2300 	strex	r3, r2, [r1]
 8009f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1d9      	bne.n	8009f26 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d013      	beq.n	8009fa2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f7e:	4a13      	ldr	r2, [pc, #76]	; (8009fcc <HAL_UART_IRQHandler+0x29c>)
 8009f80:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7f9 fdb4 	bl	8003af4 <HAL_DMA_Abort_IT>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d017      	beq.n	8009fc2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fa0:	e00f      	b.n	8009fc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f9a0 	bl	800a2e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fa8:	e00b      	b.n	8009fc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f99c 	bl	800a2e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fb0:	e007      	b.n	8009fc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f998 	bl	800a2e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009fc0:	e17e      	b.n	800a2c0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc2:	bf00      	nop
    return;
 8009fc4:	e17c      	b.n	800a2c0 <HAL_UART_IRQHandler+0x590>
 8009fc6:	bf00      	nop
 8009fc8:	04000120 	.word	0x04000120
 8009fcc:	0800b001 	.word	0x0800b001

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	f040 814c 	bne.w	800a272 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fde:	f003 0310 	and.w	r3, r3, #16
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f000 8145 	beq.w	800a272 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fec:	f003 0310 	and.w	r3, r3, #16
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f000 813e 	beq.w	800a272 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2210      	movs	r2, #16
 8009ffc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a008:	2b40      	cmp	r3, #64	; 0x40
 800a00a:	f040 80b6 	bne.w	800a17a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a01a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 8150 	beq.w	800a2c4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a02a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a02e:	429a      	cmp	r2, r3
 800a030:	f080 8148 	bcs.w	800a2c4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a03a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a042:	69db      	ldr	r3, [r3, #28]
 800a044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a048:	f000 8086 	beq.w	800a158 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a058:	e853 3f00 	ldrex	r3, [r3]
 800a05c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a060:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	461a      	mov	r2, r3
 800a072:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a076:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a07a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a082:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a086:	e841 2300 	strex	r3, r2, [r1]
 800a08a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a08e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1da      	bne.n	800a04c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3308      	adds	r3, #8
 800a09c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0a0:	e853 3f00 	ldrex	r3, [r3]
 800a0a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a0a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0a8:	f023 0301 	bic.w	r3, r3, #1
 800a0ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3308      	adds	r3, #8
 800a0b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a0ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a0be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a0c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0c6:	e841 2300 	strex	r3, r2, [r1]
 800a0ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a0cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1e1      	bne.n	800a096 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	3308      	adds	r3, #8
 800a0d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0dc:	e853 3f00 	ldrex	r3, [r3]
 800a0e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	3308      	adds	r3, #8
 800a0f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a0f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a0f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a0fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a0fe:	e841 2300 	strex	r3, r2, [r1]
 800a102:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1e3      	bne.n	800a0d2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2220      	movs	r2, #32
 800a10e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a120:	e853 3f00 	ldrex	r3, [r3]
 800a124:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a128:	f023 0310 	bic.w	r3, r3, #16
 800a12c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	461a      	mov	r2, r3
 800a136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a13a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a13c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a140:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a142:	e841 2300 	strex	r3, r2, [r1]
 800a146:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1e4      	bne.n	800a118 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a152:	4618      	mov	r0, r3
 800a154:	f7f9 fc5e 	bl	8003a14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2202      	movs	r2, #2
 800a15c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	1ad3      	subs	r3, r2, r3
 800a16e:	b29b      	uxth	r3, r3
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f8c2 	bl	800a2fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a178:	e0a4      	b.n	800a2c4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a186:	b29b      	uxth	r3, r3
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a194:	b29b      	uxth	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	f000 8096 	beq.w	800a2c8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800a19c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 8091 	beq.w	800a2c8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ae:	e853 3f00 	ldrex	r3, [r3]
 800a1b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a1c8:	647b      	str	r3, [r7, #68]	; 0x44
 800a1ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1d0:	e841 2300 	strex	r3, r2, [r1]
 800a1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1e4      	bne.n	800a1a6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3308      	adds	r3, #8
 800a1e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	e853 3f00 	ldrex	r3, [r3]
 800a1ea:	623b      	str	r3, [r7, #32]
   return(result);
 800a1ec:	6a3b      	ldr	r3, [r7, #32]
 800a1ee:	f023 0301 	bic.w	r3, r3, #1
 800a1f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	3308      	adds	r3, #8
 800a1fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a200:	633a      	str	r2, [r7, #48]	; 0x30
 800a202:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a204:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a208:	e841 2300 	strex	r3, r2, [r1]
 800a20c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1e3      	bne.n	800a1dc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2220      	movs	r2, #32
 800a218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	e853 3f00 	ldrex	r3, [r3]
 800a234:	60fb      	str	r3, [r7, #12]
   return(result);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f023 0310 	bic.w	r3, r3, #16
 800a23c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	461a      	mov	r2, r3
 800a246:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a24a:	61fb      	str	r3, [r7, #28]
 800a24c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24e:	69b9      	ldr	r1, [r7, #24]
 800a250:	69fa      	ldr	r2, [r7, #28]
 800a252:	e841 2300 	strex	r3, r2, [r1]
 800a256:	617b      	str	r3, [r7, #20]
   return(result);
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1e4      	bne.n	800a228 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2202      	movs	r2, #2
 800a262:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a268:	4619      	mov	r1, r3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f846 	bl	800a2fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a270:	e02a      	b.n	800a2c8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00e      	beq.n	800a29c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a27e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a286:	2b00      	cmp	r3, #0
 800a288:	d008      	beq.n	800a29c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d01c      	beq.n	800a2cc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	4798      	blx	r3
    }
    return;
 800a29a:	e017      	b.n	800a2cc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a29c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d012      	beq.n	800a2ce <HAL_UART_IRQHandler+0x59e>
 800a2a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00c      	beq.n	800a2ce <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 feb9 	bl	800b02c <UART_EndTransmit_IT>
    return;
 800a2ba:	e008      	b.n	800a2ce <HAL_UART_IRQHandler+0x59e>
      return;
 800a2bc:	bf00      	nop
 800a2be:	e006      	b.n	800a2ce <HAL_UART_IRQHandler+0x59e>
    return;
 800a2c0:	bf00      	nop
 800a2c2:	e004      	b.n	800a2ce <HAL_UART_IRQHandler+0x59e>
      return;
 800a2c4:	bf00      	nop
 800a2c6:	e002      	b.n	800a2ce <HAL_UART_IRQHandler+0x59e>
      return;
 800a2c8:	bf00      	nop
 800a2ca:	e000      	b.n	800a2ce <HAL_UART_IRQHandler+0x59e>
    return;
 800a2cc:	bf00      	nop
  }

}
 800a2ce:	37e8      	adds	r7, #232	; 0xe8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	460b      	mov	r3, r1
 800a306:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a308:	bf00      	nop
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b088      	sub	sp, #32
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	4aa0      	ldr	r2, [pc, #640]	; (800a5a8 <UART_SetConfig+0x294>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d904      	bls.n	800a334 <UART_SetConfig+0x20>
 800a32a:	f640 315d 	movw	r1, #2909	; 0xb5d
 800a32e:	489f      	ldr	r0, [pc, #636]	; (800a5ac <UART_SetConfig+0x298>)
 800a330:	f7f8 fd07 	bl	8002d42 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a33c:	d00d      	beq.n	800a35a <UART_SetConfig+0x46>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d009      	beq.n	800a35a <UART_SetConfig+0x46>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a34e:	d004      	beq.n	800a35a <UART_SetConfig+0x46>
 800a350:	f640 315e 	movw	r1, #2910	; 0xb5e
 800a354:	4895      	ldr	r0, [pc, #596]	; (800a5ac <UART_SetConfig+0x298>)
 800a356:	f7f8 fcf4 	bl	8002d42 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a362:	d012      	beq.n	800a38a <UART_SetConfig+0x76>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00e      	beq.n	800a38a <UART_SetConfig+0x76>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a374:	d009      	beq.n	800a38a <UART_SetConfig+0x76>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a37e:	d004      	beq.n	800a38a <UART_SetConfig+0x76>
 800a380:	f640 315f 	movw	r1, #2911	; 0xb5f
 800a384:	4889      	ldr	r0, [pc, #548]	; (800a5ac <UART_SetConfig+0x298>)
 800a386:	f7f8 fcdc 	bl	8002d42 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d009      	beq.n	800a3a6 <UART_SetConfig+0x92>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a39a:	d004      	beq.n	800a3a6 <UART_SetConfig+0x92>
 800a39c:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 800a3a0:	4882      	ldr	r0, [pc, #520]	; (800a5ac <UART_SetConfig+0x298>)
 800a3a2:	f7f8 fcce 	bl	8002d42 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00e      	beq.n	800a3cc <UART_SetConfig+0xb8>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3b6:	d009      	beq.n	800a3cc <UART_SetConfig+0xb8>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a3c0:	d004      	beq.n	800a3cc <UART_SetConfig+0xb8>
 800a3c2:	f640 3162 	movw	r1, #2914	; 0xb62
 800a3c6:	4879      	ldr	r0, [pc, #484]	; (800a5ac <UART_SetConfig+0x298>)
 800a3c8:	f7f8 fcbb 	bl	8002d42 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	f023 030c 	bic.w	r3, r3, #12
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d103      	bne.n	800a3e0 <UART_SetConfig+0xcc>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	695b      	ldr	r3, [r3, #20]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d104      	bne.n	800a3ea <UART_SetConfig+0xd6>
 800a3e0:	f640 3163 	movw	r1, #2915	; 0xb63
 800a3e4:	4871      	ldr	r0, [pc, #452]	; (800a5ac <UART_SetConfig+0x298>)
 800a3e6:	f7f8 fcac 	bl	8002d42 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	699b      	ldr	r3, [r3, #24]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d013      	beq.n	800a41a <UART_SetConfig+0x106>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3fa:	d00e      	beq.n	800a41a <UART_SetConfig+0x106>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a404:	d009      	beq.n	800a41a <UART_SetConfig+0x106>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a40e:	d004      	beq.n	800a41a <UART_SetConfig+0x106>
 800a410:	f640 3164 	movw	r1, #2916	; 0xb64
 800a414:	4865      	ldr	r0, [pc, #404]	; (800a5ac <UART_SetConfig+0x298>)
 800a416:	f7f8 fc94 	bl	8002d42 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	69db      	ldr	r3, [r3, #28]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d009      	beq.n	800a436 <UART_SetConfig+0x122>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a42a:	d004      	beq.n	800a436 <UART_SetConfig+0x122>
 800a42c:	f640 3165 	movw	r1, #2917	; 0xb65
 800a430:	485e      	ldr	r0, [pc, #376]	; (800a5ac <UART_SetConfig+0x298>)
 800a432:	f7f8 fc86 	bl	8002d42 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	689a      	ldr	r2, [r3, #8]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	431a      	orrs	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	695b      	ldr	r3, [r3, #20]
 800a444:	431a      	orrs	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	69db      	ldr	r3, [r3, #28]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	4b56      	ldr	r3, [pc, #344]	; (800a5b0 <UART_SetConfig+0x29c>)
 800a456:	4013      	ands	r3, r2
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	6812      	ldr	r2, [r2, #0]
 800a45c:	6979      	ldr	r1, [r7, #20]
 800a45e:	430b      	orrs	r3, r1
 800a460:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	68da      	ldr	r2, [r3, #12]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	430a      	orrs	r2, r1
 800a476:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a1b      	ldr	r3, [r3, #32]
 800a482:	697a      	ldr	r2, [r7, #20]
 800a484:	4313      	orrs	r3, r2
 800a486:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	430a      	orrs	r2, r1
 800a49a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a44      	ldr	r2, [pc, #272]	; (800a5b4 <UART_SetConfig+0x2a0>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d121      	bne.n	800a4ea <UART_SetConfig+0x1d6>
 800a4a6:	4b44      	ldr	r3, [pc, #272]	; (800a5b8 <UART_SetConfig+0x2a4>)
 800a4a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ac:	f003 0303 	and.w	r3, r3, #3
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d817      	bhi.n	800a4e4 <UART_SetConfig+0x1d0>
 800a4b4:	a201      	add	r2, pc, #4	; (adr r2, 800a4bc <UART_SetConfig+0x1a8>)
 800a4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ba:	bf00      	nop
 800a4bc:	0800a4cd 	.word	0x0800a4cd
 800a4c0:	0800a4d9 	.word	0x0800a4d9
 800a4c4:	0800a4d3 	.word	0x0800a4d3
 800a4c8:	0800a4df 	.word	0x0800a4df
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	77fb      	strb	r3, [r7, #31]
 800a4d0:	e14c      	b.n	800a76c <UART_SetConfig+0x458>
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	77fb      	strb	r3, [r7, #31]
 800a4d6:	e149      	b.n	800a76c <UART_SetConfig+0x458>
 800a4d8:	2304      	movs	r3, #4
 800a4da:	77fb      	strb	r3, [r7, #31]
 800a4dc:	e146      	b.n	800a76c <UART_SetConfig+0x458>
 800a4de:	2308      	movs	r3, #8
 800a4e0:	77fb      	strb	r3, [r7, #31]
 800a4e2:	e143      	b.n	800a76c <UART_SetConfig+0x458>
 800a4e4:	2310      	movs	r3, #16
 800a4e6:	77fb      	strb	r3, [r7, #31]
 800a4e8:	e140      	b.n	800a76c <UART_SetConfig+0x458>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a33      	ldr	r2, [pc, #204]	; (800a5bc <UART_SetConfig+0x2a8>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d132      	bne.n	800a55a <UART_SetConfig+0x246>
 800a4f4:	4b30      	ldr	r3, [pc, #192]	; (800a5b8 <UART_SetConfig+0x2a4>)
 800a4f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4fa:	f003 030c 	and.w	r3, r3, #12
 800a4fe:	2b0c      	cmp	r3, #12
 800a500:	d828      	bhi.n	800a554 <UART_SetConfig+0x240>
 800a502:	a201      	add	r2, pc, #4	; (adr r2, 800a508 <UART_SetConfig+0x1f4>)
 800a504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a508:	0800a53d 	.word	0x0800a53d
 800a50c:	0800a555 	.word	0x0800a555
 800a510:	0800a555 	.word	0x0800a555
 800a514:	0800a555 	.word	0x0800a555
 800a518:	0800a549 	.word	0x0800a549
 800a51c:	0800a555 	.word	0x0800a555
 800a520:	0800a555 	.word	0x0800a555
 800a524:	0800a555 	.word	0x0800a555
 800a528:	0800a543 	.word	0x0800a543
 800a52c:	0800a555 	.word	0x0800a555
 800a530:	0800a555 	.word	0x0800a555
 800a534:	0800a555 	.word	0x0800a555
 800a538:	0800a54f 	.word	0x0800a54f
 800a53c:	2300      	movs	r3, #0
 800a53e:	77fb      	strb	r3, [r7, #31]
 800a540:	e114      	b.n	800a76c <UART_SetConfig+0x458>
 800a542:	2302      	movs	r3, #2
 800a544:	77fb      	strb	r3, [r7, #31]
 800a546:	e111      	b.n	800a76c <UART_SetConfig+0x458>
 800a548:	2304      	movs	r3, #4
 800a54a:	77fb      	strb	r3, [r7, #31]
 800a54c:	e10e      	b.n	800a76c <UART_SetConfig+0x458>
 800a54e:	2308      	movs	r3, #8
 800a550:	77fb      	strb	r3, [r7, #31]
 800a552:	e10b      	b.n	800a76c <UART_SetConfig+0x458>
 800a554:	2310      	movs	r3, #16
 800a556:	77fb      	strb	r3, [r7, #31]
 800a558:	e108      	b.n	800a76c <UART_SetConfig+0x458>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a18      	ldr	r2, [pc, #96]	; (800a5c0 <UART_SetConfig+0x2ac>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d12f      	bne.n	800a5c4 <UART_SetConfig+0x2b0>
 800a564:	4b14      	ldr	r3, [pc, #80]	; (800a5b8 <UART_SetConfig+0x2a4>)
 800a566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a56a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a56e:	2b30      	cmp	r3, #48	; 0x30
 800a570:	d013      	beq.n	800a59a <UART_SetConfig+0x286>
 800a572:	2b30      	cmp	r3, #48	; 0x30
 800a574:	d814      	bhi.n	800a5a0 <UART_SetConfig+0x28c>
 800a576:	2b20      	cmp	r3, #32
 800a578:	d009      	beq.n	800a58e <UART_SetConfig+0x27a>
 800a57a:	2b20      	cmp	r3, #32
 800a57c:	d810      	bhi.n	800a5a0 <UART_SetConfig+0x28c>
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d002      	beq.n	800a588 <UART_SetConfig+0x274>
 800a582:	2b10      	cmp	r3, #16
 800a584:	d006      	beq.n	800a594 <UART_SetConfig+0x280>
 800a586:	e00b      	b.n	800a5a0 <UART_SetConfig+0x28c>
 800a588:	2300      	movs	r3, #0
 800a58a:	77fb      	strb	r3, [r7, #31]
 800a58c:	e0ee      	b.n	800a76c <UART_SetConfig+0x458>
 800a58e:	2302      	movs	r3, #2
 800a590:	77fb      	strb	r3, [r7, #31]
 800a592:	e0eb      	b.n	800a76c <UART_SetConfig+0x458>
 800a594:	2304      	movs	r3, #4
 800a596:	77fb      	strb	r3, [r7, #31]
 800a598:	e0e8      	b.n	800a76c <UART_SetConfig+0x458>
 800a59a:	2308      	movs	r3, #8
 800a59c:	77fb      	strb	r3, [r7, #31]
 800a59e:	e0e5      	b.n	800a76c <UART_SetConfig+0x458>
 800a5a0:	2310      	movs	r3, #16
 800a5a2:	77fb      	strb	r3, [r7, #31]
 800a5a4:	e0e2      	b.n	800a76c <UART_SetConfig+0x458>
 800a5a6:	bf00      	nop
 800a5a8:	019bfcc0 	.word	0x019bfcc0
 800a5ac:	08015a80 	.word	0x08015a80
 800a5b0:	efff69f3 	.word	0xefff69f3
 800a5b4:	40011000 	.word	0x40011000
 800a5b8:	40023800 	.word	0x40023800
 800a5bc:	40004400 	.word	0x40004400
 800a5c0:	40004800 	.word	0x40004800
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4aa5      	ldr	r2, [pc, #660]	; (800a860 <UART_SetConfig+0x54c>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d120      	bne.n	800a610 <UART_SetConfig+0x2fc>
 800a5ce:	4ba5      	ldr	r3, [pc, #660]	; (800a864 <UART_SetConfig+0x550>)
 800a5d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a5d8:	2bc0      	cmp	r3, #192	; 0xc0
 800a5da:	d013      	beq.n	800a604 <UART_SetConfig+0x2f0>
 800a5dc:	2bc0      	cmp	r3, #192	; 0xc0
 800a5de:	d814      	bhi.n	800a60a <UART_SetConfig+0x2f6>
 800a5e0:	2b80      	cmp	r3, #128	; 0x80
 800a5e2:	d009      	beq.n	800a5f8 <UART_SetConfig+0x2e4>
 800a5e4:	2b80      	cmp	r3, #128	; 0x80
 800a5e6:	d810      	bhi.n	800a60a <UART_SetConfig+0x2f6>
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d002      	beq.n	800a5f2 <UART_SetConfig+0x2de>
 800a5ec:	2b40      	cmp	r3, #64	; 0x40
 800a5ee:	d006      	beq.n	800a5fe <UART_SetConfig+0x2ea>
 800a5f0:	e00b      	b.n	800a60a <UART_SetConfig+0x2f6>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	77fb      	strb	r3, [r7, #31]
 800a5f6:	e0b9      	b.n	800a76c <UART_SetConfig+0x458>
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	77fb      	strb	r3, [r7, #31]
 800a5fc:	e0b6      	b.n	800a76c <UART_SetConfig+0x458>
 800a5fe:	2304      	movs	r3, #4
 800a600:	77fb      	strb	r3, [r7, #31]
 800a602:	e0b3      	b.n	800a76c <UART_SetConfig+0x458>
 800a604:	2308      	movs	r3, #8
 800a606:	77fb      	strb	r3, [r7, #31]
 800a608:	e0b0      	b.n	800a76c <UART_SetConfig+0x458>
 800a60a:	2310      	movs	r3, #16
 800a60c:	77fb      	strb	r3, [r7, #31]
 800a60e:	e0ad      	b.n	800a76c <UART_SetConfig+0x458>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a94      	ldr	r2, [pc, #592]	; (800a868 <UART_SetConfig+0x554>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d125      	bne.n	800a666 <UART_SetConfig+0x352>
 800a61a:	4b92      	ldr	r3, [pc, #584]	; (800a864 <UART_SetConfig+0x550>)
 800a61c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a628:	d017      	beq.n	800a65a <UART_SetConfig+0x346>
 800a62a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a62e:	d817      	bhi.n	800a660 <UART_SetConfig+0x34c>
 800a630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a634:	d00b      	beq.n	800a64e <UART_SetConfig+0x33a>
 800a636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a63a:	d811      	bhi.n	800a660 <UART_SetConfig+0x34c>
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d003      	beq.n	800a648 <UART_SetConfig+0x334>
 800a640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a644:	d006      	beq.n	800a654 <UART_SetConfig+0x340>
 800a646:	e00b      	b.n	800a660 <UART_SetConfig+0x34c>
 800a648:	2300      	movs	r3, #0
 800a64a:	77fb      	strb	r3, [r7, #31]
 800a64c:	e08e      	b.n	800a76c <UART_SetConfig+0x458>
 800a64e:	2302      	movs	r3, #2
 800a650:	77fb      	strb	r3, [r7, #31]
 800a652:	e08b      	b.n	800a76c <UART_SetConfig+0x458>
 800a654:	2304      	movs	r3, #4
 800a656:	77fb      	strb	r3, [r7, #31]
 800a658:	e088      	b.n	800a76c <UART_SetConfig+0x458>
 800a65a:	2308      	movs	r3, #8
 800a65c:	77fb      	strb	r3, [r7, #31]
 800a65e:	e085      	b.n	800a76c <UART_SetConfig+0x458>
 800a660:	2310      	movs	r3, #16
 800a662:	77fb      	strb	r3, [r7, #31]
 800a664:	e082      	b.n	800a76c <UART_SetConfig+0x458>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a80      	ldr	r2, [pc, #512]	; (800a86c <UART_SetConfig+0x558>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d125      	bne.n	800a6bc <UART_SetConfig+0x3a8>
 800a670:	4b7c      	ldr	r3, [pc, #496]	; (800a864 <UART_SetConfig+0x550>)
 800a672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a676:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a67a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a67e:	d017      	beq.n	800a6b0 <UART_SetConfig+0x39c>
 800a680:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a684:	d817      	bhi.n	800a6b6 <UART_SetConfig+0x3a2>
 800a686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a68a:	d00b      	beq.n	800a6a4 <UART_SetConfig+0x390>
 800a68c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a690:	d811      	bhi.n	800a6b6 <UART_SetConfig+0x3a2>
 800a692:	2b00      	cmp	r3, #0
 800a694:	d003      	beq.n	800a69e <UART_SetConfig+0x38a>
 800a696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a69a:	d006      	beq.n	800a6aa <UART_SetConfig+0x396>
 800a69c:	e00b      	b.n	800a6b6 <UART_SetConfig+0x3a2>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	77fb      	strb	r3, [r7, #31]
 800a6a2:	e063      	b.n	800a76c <UART_SetConfig+0x458>
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	77fb      	strb	r3, [r7, #31]
 800a6a8:	e060      	b.n	800a76c <UART_SetConfig+0x458>
 800a6aa:	2304      	movs	r3, #4
 800a6ac:	77fb      	strb	r3, [r7, #31]
 800a6ae:	e05d      	b.n	800a76c <UART_SetConfig+0x458>
 800a6b0:	2308      	movs	r3, #8
 800a6b2:	77fb      	strb	r3, [r7, #31]
 800a6b4:	e05a      	b.n	800a76c <UART_SetConfig+0x458>
 800a6b6:	2310      	movs	r3, #16
 800a6b8:	77fb      	strb	r3, [r7, #31]
 800a6ba:	e057      	b.n	800a76c <UART_SetConfig+0x458>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a6b      	ldr	r2, [pc, #428]	; (800a870 <UART_SetConfig+0x55c>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d125      	bne.n	800a712 <UART_SetConfig+0x3fe>
 800a6c6:	4b67      	ldr	r3, [pc, #412]	; (800a864 <UART_SetConfig+0x550>)
 800a6c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a6d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6d4:	d017      	beq.n	800a706 <UART_SetConfig+0x3f2>
 800a6d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6da:	d817      	bhi.n	800a70c <UART_SetConfig+0x3f8>
 800a6dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6e0:	d00b      	beq.n	800a6fa <UART_SetConfig+0x3e6>
 800a6e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6e6:	d811      	bhi.n	800a70c <UART_SetConfig+0x3f8>
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d003      	beq.n	800a6f4 <UART_SetConfig+0x3e0>
 800a6ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6f0:	d006      	beq.n	800a700 <UART_SetConfig+0x3ec>
 800a6f2:	e00b      	b.n	800a70c <UART_SetConfig+0x3f8>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	77fb      	strb	r3, [r7, #31]
 800a6f8:	e038      	b.n	800a76c <UART_SetConfig+0x458>
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	77fb      	strb	r3, [r7, #31]
 800a6fe:	e035      	b.n	800a76c <UART_SetConfig+0x458>
 800a700:	2304      	movs	r3, #4
 800a702:	77fb      	strb	r3, [r7, #31]
 800a704:	e032      	b.n	800a76c <UART_SetConfig+0x458>
 800a706:	2308      	movs	r3, #8
 800a708:	77fb      	strb	r3, [r7, #31]
 800a70a:	e02f      	b.n	800a76c <UART_SetConfig+0x458>
 800a70c:	2310      	movs	r3, #16
 800a70e:	77fb      	strb	r3, [r7, #31]
 800a710:	e02c      	b.n	800a76c <UART_SetConfig+0x458>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a57      	ldr	r2, [pc, #348]	; (800a874 <UART_SetConfig+0x560>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d125      	bne.n	800a768 <UART_SetConfig+0x454>
 800a71c:	4b51      	ldr	r3, [pc, #324]	; (800a864 <UART_SetConfig+0x550>)
 800a71e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a722:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a726:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a72a:	d017      	beq.n	800a75c <UART_SetConfig+0x448>
 800a72c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a730:	d817      	bhi.n	800a762 <UART_SetConfig+0x44e>
 800a732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a736:	d00b      	beq.n	800a750 <UART_SetConfig+0x43c>
 800a738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a73c:	d811      	bhi.n	800a762 <UART_SetConfig+0x44e>
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d003      	beq.n	800a74a <UART_SetConfig+0x436>
 800a742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a746:	d006      	beq.n	800a756 <UART_SetConfig+0x442>
 800a748:	e00b      	b.n	800a762 <UART_SetConfig+0x44e>
 800a74a:	2300      	movs	r3, #0
 800a74c:	77fb      	strb	r3, [r7, #31]
 800a74e:	e00d      	b.n	800a76c <UART_SetConfig+0x458>
 800a750:	2302      	movs	r3, #2
 800a752:	77fb      	strb	r3, [r7, #31]
 800a754:	e00a      	b.n	800a76c <UART_SetConfig+0x458>
 800a756:	2304      	movs	r3, #4
 800a758:	77fb      	strb	r3, [r7, #31]
 800a75a:	e007      	b.n	800a76c <UART_SetConfig+0x458>
 800a75c:	2308      	movs	r3, #8
 800a75e:	77fb      	strb	r3, [r7, #31]
 800a760:	e004      	b.n	800a76c <UART_SetConfig+0x458>
 800a762:	2310      	movs	r3, #16
 800a764:	77fb      	strb	r3, [r7, #31]
 800a766:	e001      	b.n	800a76c <UART_SetConfig+0x458>
 800a768:	2310      	movs	r3, #16
 800a76a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	69db      	ldr	r3, [r3, #28]
 800a770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a774:	d15c      	bne.n	800a830 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 800a776:	7ffb      	ldrb	r3, [r7, #31]
 800a778:	2b08      	cmp	r3, #8
 800a77a:	d828      	bhi.n	800a7ce <UART_SetConfig+0x4ba>
 800a77c:	a201      	add	r2, pc, #4	; (adr r2, 800a784 <UART_SetConfig+0x470>)
 800a77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a782:	bf00      	nop
 800a784:	0800a7a9 	.word	0x0800a7a9
 800a788:	0800a7b1 	.word	0x0800a7b1
 800a78c:	0800a7b9 	.word	0x0800a7b9
 800a790:	0800a7cf 	.word	0x0800a7cf
 800a794:	0800a7bf 	.word	0x0800a7bf
 800a798:	0800a7cf 	.word	0x0800a7cf
 800a79c:	0800a7cf 	.word	0x0800a7cf
 800a7a0:	0800a7cf 	.word	0x0800a7cf
 800a7a4:	0800a7c7 	.word	0x0800a7c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7a8:	f7fb ffec 	bl	8006784 <HAL_RCC_GetPCLK1Freq>
 800a7ac:	61b8      	str	r0, [r7, #24]
        break;
 800a7ae:	e013      	b.n	800a7d8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7b0:	f7fb fffc 	bl	80067ac <HAL_RCC_GetPCLK2Freq>
 800a7b4:	61b8      	str	r0, [r7, #24]
        break;
 800a7b6:	e00f      	b.n	800a7d8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7b8:	4b2f      	ldr	r3, [pc, #188]	; (800a878 <UART_SetConfig+0x564>)
 800a7ba:	61bb      	str	r3, [r7, #24]
        break;
 800a7bc:	e00c      	b.n	800a7d8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7be:	f7fb ff0f 	bl	80065e0 <HAL_RCC_GetSysClockFreq>
 800a7c2:	61b8      	str	r0, [r7, #24]
        break;
 800a7c4:	e008      	b.n	800a7d8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7ca:	61bb      	str	r3, [r7, #24]
        break;
 800a7cc:	e004      	b.n	800a7d8 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	77bb      	strb	r3, [r7, #30]
        break;
 800a7d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	f000 8082 	beq.w	800a8e4 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	005a      	lsls	r2, r3, #1
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	085b      	lsrs	r3, r3, #1
 800a7ea:	441a      	add	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	2b0f      	cmp	r3, #15
 800a7fa:	d916      	bls.n	800a82a <UART_SetConfig+0x516>
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a802:	d212      	bcs.n	800a82a <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	b29b      	uxth	r3, r3
 800a808:	f023 030f 	bic.w	r3, r3, #15
 800a80c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	085b      	lsrs	r3, r3, #1
 800a812:	b29b      	uxth	r3, r3
 800a814:	f003 0307 	and.w	r3, r3, #7
 800a818:	b29a      	uxth	r2, r3
 800a81a:	89fb      	ldrh	r3, [r7, #14]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	89fa      	ldrh	r2, [r7, #14]
 800a826:	60da      	str	r2, [r3, #12]
 800a828:	e05c      	b.n	800a8e4 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	77bb      	strb	r3, [r7, #30]
 800a82e:	e059      	b.n	800a8e4 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a830:	7ffb      	ldrb	r3, [r7, #31]
 800a832:	2b08      	cmp	r3, #8
 800a834:	d835      	bhi.n	800a8a2 <UART_SetConfig+0x58e>
 800a836:	a201      	add	r2, pc, #4	; (adr r2, 800a83c <UART_SetConfig+0x528>)
 800a838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83c:	0800a87d 	.word	0x0800a87d
 800a840:	0800a885 	.word	0x0800a885
 800a844:	0800a88d 	.word	0x0800a88d
 800a848:	0800a8a3 	.word	0x0800a8a3
 800a84c:	0800a893 	.word	0x0800a893
 800a850:	0800a8a3 	.word	0x0800a8a3
 800a854:	0800a8a3 	.word	0x0800a8a3
 800a858:	0800a8a3 	.word	0x0800a8a3
 800a85c:	0800a89b 	.word	0x0800a89b
 800a860:	40004c00 	.word	0x40004c00
 800a864:	40023800 	.word	0x40023800
 800a868:	40005000 	.word	0x40005000
 800a86c:	40011400 	.word	0x40011400
 800a870:	40007800 	.word	0x40007800
 800a874:	40007c00 	.word	0x40007c00
 800a878:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a87c:	f7fb ff82 	bl	8006784 <HAL_RCC_GetPCLK1Freq>
 800a880:	61b8      	str	r0, [r7, #24]
        break;
 800a882:	e013      	b.n	800a8ac <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a884:	f7fb ff92 	bl	80067ac <HAL_RCC_GetPCLK2Freq>
 800a888:	61b8      	str	r0, [r7, #24]
        break;
 800a88a:	e00f      	b.n	800a8ac <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a88c:	4b1b      	ldr	r3, [pc, #108]	; (800a8fc <UART_SetConfig+0x5e8>)
 800a88e:	61bb      	str	r3, [r7, #24]
        break;
 800a890:	e00c      	b.n	800a8ac <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a892:	f7fb fea5 	bl	80065e0 <HAL_RCC_GetSysClockFreq>
 800a896:	61b8      	str	r0, [r7, #24]
        break;
 800a898:	e008      	b.n	800a8ac <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a89a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a89e:	61bb      	str	r3, [r7, #24]
        break;
 800a8a0:	e004      	b.n	800a8ac <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	77bb      	strb	r3, [r7, #30]
        break;
 800a8aa:	bf00      	nop
    }

    if (pclk != 0U)
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d018      	beq.n	800a8e4 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	085a      	lsrs	r2, r3, #1
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	441a      	add	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	2b0f      	cmp	r3, #15
 800a8ca:	d909      	bls.n	800a8e0 <UART_SetConfig+0x5cc>
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d2:	d205      	bcs.n	800a8e0 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	60da      	str	r2, [r3, #12]
 800a8de:	e001      	b.n	800a8e4 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a8f0:	7fbb      	ldrb	r3, [r7, #30]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3720      	adds	r7, #32
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	00f42400 	.word	0x00f42400

0800a900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90c:	2bff      	cmp	r3, #255	; 0xff
 800a90e:	d904      	bls.n	800a91a <UART_AdvFeatureConfig+0x1a>
 800a910:	f640 31e6 	movw	r1, #3046	; 0xbe6
 800a914:	488e      	ldr	r0, [pc, #568]	; (800ab50 <UART_AdvFeatureConfig+0x250>)
 800a916:	f7f8 fa14 	bl	8002d42 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91e:	f003 0301 	and.w	r3, r3, #1
 800a922:	2b00      	cmp	r3, #0
 800a924:	d018      	beq.n	800a958 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d009      	beq.n	800a942 <UART_AdvFeatureConfig+0x42>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a932:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a936:	d004      	beq.n	800a942 <UART_AdvFeatureConfig+0x42>
 800a938:	f640 31eb 	movw	r1, #3051	; 0xbeb
 800a93c:	4884      	ldr	r0, [pc, #528]	; (800ab50 <UART_AdvFeatureConfig+0x250>)
 800a93e:	f7f8 fa00 	bl	8002d42 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	430a      	orrs	r2, r1
 800a956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95c:	f003 0302 	and.w	r3, r3, #2
 800a960:	2b00      	cmp	r3, #0
 800a962:	d018      	beq.n	800a996 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d009      	beq.n	800a980 <UART_AdvFeatureConfig+0x80>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a974:	d004      	beq.n	800a980 <UART_AdvFeatureConfig+0x80>
 800a976:	f640 31f2 	movw	r1, #3058	; 0xbf2
 800a97a:	4875      	ldr	r0, [pc, #468]	; (800ab50 <UART_AdvFeatureConfig+0x250>)
 800a97c:	f7f8 f9e1 	bl	8002d42 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	430a      	orrs	r2, r1
 800a994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99a:	f003 0304 	and.w	r3, r3, #4
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d018      	beq.n	800a9d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d009      	beq.n	800a9be <UART_AdvFeatureConfig+0xbe>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a9b2:	d004      	beq.n	800a9be <UART_AdvFeatureConfig+0xbe>
 800a9b4:	f640 31f9 	movw	r1, #3065	; 0xbf9
 800a9b8:	4865      	ldr	r0, [pc, #404]	; (800ab50 <UART_AdvFeatureConfig+0x250>)
 800a9ba:	f7f8 f9c2 	bl	8002d42 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	430a      	orrs	r2, r1
 800a9d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d8:	f003 0308 	and.w	r3, r3, #8
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d018      	beq.n	800aa12 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d009      	beq.n	800a9fc <UART_AdvFeatureConfig+0xfc>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9f0:	d004      	beq.n	800a9fc <UART_AdvFeatureConfig+0xfc>
 800a9f2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800a9f6:	4856      	ldr	r0, [pc, #344]	; (800ab50 <UART_AdvFeatureConfig+0x250>)
 800a9f8:	f7f8 f9a3 	bl	8002d42 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	f003 0310 	and.w	r3, r3, #16
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d018      	beq.n	800aa50 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d009      	beq.n	800aa3a <UART_AdvFeatureConfig+0x13a>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa2e:	d004      	beq.n	800aa3a <UART_AdvFeatureConfig+0x13a>
 800aa30:	f640 4107 	movw	r1, #3079	; 0xc07
 800aa34:	4846      	ldr	r0, [pc, #280]	; (800ab50 <UART_AdvFeatureConfig+0x250>)
 800aa36:	f7f8 f984 	bl	8002d42 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	430a      	orrs	r2, r1
 800aa4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa54:	f003 0320 	and.w	r3, r3, #32
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d018      	beq.n	800aa8e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d009      	beq.n	800aa78 <UART_AdvFeatureConfig+0x178>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa6c:	d004      	beq.n	800aa78 <UART_AdvFeatureConfig+0x178>
 800aa6e:	f640 410e 	movw	r1, #3086	; 0xc0e
 800aa72:	4837      	ldr	r0, [pc, #220]	; (800ab50 <UART_AdvFeatureConfig+0x250>)
 800aa74:	f7f8 f965 	bl	8002d42 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d064      	beq.n	800ab64 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a2d      	ldr	r2, [pc, #180]	; (800ab54 <UART_AdvFeatureConfig+0x254>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d013      	beq.n	800aacc <UART_AdvFeatureConfig+0x1cc>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a2b      	ldr	r2, [pc, #172]	; (800ab58 <UART_AdvFeatureConfig+0x258>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d00e      	beq.n	800aacc <UART_AdvFeatureConfig+0x1cc>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a2a      	ldr	r2, [pc, #168]	; (800ab5c <UART_AdvFeatureConfig+0x25c>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d009      	beq.n	800aacc <UART_AdvFeatureConfig+0x1cc>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a28      	ldr	r2, [pc, #160]	; (800ab60 <UART_AdvFeatureConfig+0x260>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d004      	beq.n	800aacc <UART_AdvFeatureConfig+0x1cc>
 800aac2:	f640 4115 	movw	r1, #3093	; 0xc15
 800aac6:	4822      	ldr	r0, [pc, #136]	; (800ab50 <UART_AdvFeatureConfig+0x250>)
 800aac8:	f7f8 f93b 	bl	8002d42 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d009      	beq.n	800aae8 <UART_AdvFeatureConfig+0x1e8>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aadc:	d004      	beq.n	800aae8 <UART_AdvFeatureConfig+0x1e8>
 800aade:	f640 4116 	movw	r1, #3094	; 0xc16
 800aae2:	481b      	ldr	r0, [pc, #108]	; (800ab50 <UART_AdvFeatureConfig+0x250>)
 800aae4:	f7f8 f92d 	bl	8002d42 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	430a      	orrs	r2, r1
 800aafc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab06:	d12d      	bne.n	800ab64 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d013      	beq.n	800ab38 <UART_AdvFeatureConfig+0x238>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab18:	d00e      	beq.n	800ab38 <UART_AdvFeatureConfig+0x238>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab22:	d009      	beq.n	800ab38 <UART_AdvFeatureConfig+0x238>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ab2c:	d004      	beq.n	800ab38 <UART_AdvFeatureConfig+0x238>
 800ab2e:	f640 411b 	movw	r1, #3099	; 0xc1b
 800ab32:	4807      	ldr	r0, [pc, #28]	; (800ab50 <UART_AdvFeatureConfig+0x250>)
 800ab34:	f7f8 f905 	bl	8002d42 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	430a      	orrs	r2, r1
 800ab4c:	605a      	str	r2, [r3, #4]
 800ab4e:	e009      	b.n	800ab64 <UART_AdvFeatureConfig+0x264>
 800ab50:	08015a80 	.word	0x08015a80
 800ab54:	40011000 	.word	0x40011000
 800ab58:	40004400 	.word	0x40004400
 800ab5c:	40004800 	.word	0x40004800
 800ab60:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d018      	beq.n	800aba2 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d009      	beq.n	800ab8c <UART_AdvFeatureConfig+0x28c>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ab80:	d004      	beq.n	800ab8c <UART_AdvFeatureConfig+0x28c>
 800ab82:	f640 4123 	movw	r1, #3107	; 0xc23
 800ab86:	4809      	ldr	r0, [pc, #36]	; (800abac <UART_AdvFeatureConfig+0x2ac>)
 800ab88:	f7f8 f8db 	bl	8002d42 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	430a      	orrs	r2, r1
 800aba0:	605a      	str	r2, [r3, #4]
  }
}
 800aba2:	bf00      	nop
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	08015a80 	.word	0x08015a80

0800abb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af02      	add	r7, sp, #8
 800abb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800abc0:	f7f8 fdb8 	bl	8003734 <HAL_GetTick>
 800abc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0308 	and.w	r3, r3, #8
 800abd0:	2b08      	cmp	r3, #8
 800abd2:	d10e      	bne.n	800abf2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2200      	movs	r2, #0
 800abde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f81b 	bl	800ac1e <UART_WaitOnFlagUntilTimeout>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d001      	beq.n	800abf2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abee:	2303      	movs	r3, #3
 800abf0:	e011      	b.n	800ac16 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2220      	movs	r2, #32
 800abf6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2220      	movs	r2, #32
 800abfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b09c      	sub	sp, #112	; 0x70
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	60f8      	str	r0, [r7, #12]
 800ac26:	60b9      	str	r1, [r7, #8]
 800ac28:	603b      	str	r3, [r7, #0]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac2e:	e0a7      	b.n	800ad80 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac36:	f000 80a3 	beq.w	800ad80 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac3a:	f7f8 fd7b 	bl	8003734 <HAL_GetTick>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	1ad3      	subs	r3, r2, r3
 800ac44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d302      	bcc.n	800ac50 <UART_WaitOnFlagUntilTimeout+0x32>
 800ac4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d13f      	bne.n	800acd0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac58:	e853 3f00 	ldrex	r3, [r3]
 800ac5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ac5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ac64:	667b      	str	r3, [r7, #100]	; 0x64
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac70:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ac76:	e841 2300 	strex	r3, r2, [r1]
 800ac7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ac7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1e6      	bne.n	800ac50 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3308      	adds	r3, #8
 800ac88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac8c:	e853 3f00 	ldrex	r3, [r3]
 800ac90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac94:	f023 0301 	bic.w	r3, r3, #1
 800ac98:	663b      	str	r3, [r7, #96]	; 0x60
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	3308      	adds	r3, #8
 800aca0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aca2:	64ba      	str	r2, [r7, #72]	; 0x48
 800aca4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acaa:	e841 2300 	strex	r3, r2, [r1]
 800acae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800acb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1e5      	bne.n	800ac82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2220      	movs	r2, #32
 800acba:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2220      	movs	r2, #32
 800acc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800accc:	2303      	movs	r3, #3
 800acce:	e068      	b.n	800ada2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f003 0304 	and.w	r3, r3, #4
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d050      	beq.n	800ad80 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	69db      	ldr	r3, [r3, #28]
 800ace4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ace8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acec:	d148      	bne.n	800ad80 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800acf6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad00:	e853 3f00 	ldrex	r3, [r3]
 800ad04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	461a      	mov	r2, r3
 800ad14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad16:	637b      	str	r3, [r7, #52]	; 0x34
 800ad18:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad1e:	e841 2300 	strex	r3, r2, [r1]
 800ad22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ad24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1e6      	bne.n	800acf8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	3308      	adds	r3, #8
 800ad30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	e853 3f00 	ldrex	r3, [r3]
 800ad38:	613b      	str	r3, [r7, #16]
   return(result);
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	f023 0301 	bic.w	r3, r3, #1
 800ad40:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	3308      	adds	r3, #8
 800ad48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ad4a:	623a      	str	r2, [r7, #32]
 800ad4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4e:	69f9      	ldr	r1, [r7, #28]
 800ad50:	6a3a      	ldr	r2, [r7, #32]
 800ad52:	e841 2300 	strex	r3, r2, [r1]
 800ad56:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d1e5      	bne.n	800ad2a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2220      	movs	r2, #32
 800ad62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2220      	movs	r2, #32
 800ad68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2220      	movs	r2, #32
 800ad70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800ad7c:	2303      	movs	r3, #3
 800ad7e:	e010      	b.n	800ada2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	69da      	ldr	r2, [r3, #28]
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	4013      	ands	r3, r2
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	bf0c      	ite	eq
 800ad90:	2301      	moveq	r3, #1
 800ad92:	2300      	movne	r3, #0
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	461a      	mov	r2, r3
 800ad98:	79fb      	ldrb	r3, [r7, #7]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	f43f af48 	beq.w	800ac30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3770      	adds	r7, #112	; 0x70
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
	...

0800adac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800adac:	b480      	push	{r7}
 800adae:	b097      	sub	sp, #92	; 0x5c
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	4613      	mov	r3, r2
 800adb8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	88fa      	ldrh	r2, [r7, #6]
 800adc4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	88fa      	ldrh	r2, [r7, #6]
 800adcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adde:	d10e      	bne.n	800adfe <UART_Start_Receive_IT+0x52>
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	691b      	ldr	r3, [r3, #16]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d105      	bne.n	800adf4 <UART_Start_Receive_IT+0x48>
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f240 12ff 	movw	r2, #511	; 0x1ff
 800adee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800adf2:	e02d      	b.n	800ae50 <UART_Start_Receive_IT+0xa4>
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	22ff      	movs	r2, #255	; 0xff
 800adf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800adfc:	e028      	b.n	800ae50 <UART_Start_Receive_IT+0xa4>
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10d      	bne.n	800ae22 <UART_Start_Receive_IT+0x76>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d104      	bne.n	800ae18 <UART_Start_Receive_IT+0x6c>
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	22ff      	movs	r2, #255	; 0xff
 800ae12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ae16:	e01b      	b.n	800ae50 <UART_Start_Receive_IT+0xa4>
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	227f      	movs	r2, #127	; 0x7f
 800ae1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ae20:	e016      	b.n	800ae50 <UART_Start_Receive_IT+0xa4>
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae2a:	d10d      	bne.n	800ae48 <UART_Start_Receive_IT+0x9c>
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d104      	bne.n	800ae3e <UART_Start_Receive_IT+0x92>
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	227f      	movs	r2, #127	; 0x7f
 800ae38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ae3c:	e008      	b.n	800ae50 <UART_Start_Receive_IT+0xa4>
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	223f      	movs	r2, #63	; 0x3f
 800ae42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ae46:	e003      	b.n	800ae50 <UART_Start_Receive_IT+0xa4>
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2222      	movs	r2, #34	; 0x22
 800ae5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	3308      	adds	r3, #8
 800ae66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae6a:	e853 3f00 	ldrex	r3, [r3]
 800ae6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae72:	f043 0301 	orr.w	r3, r3, #1
 800ae76:	657b      	str	r3, [r7, #84]	; 0x54
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	3308      	adds	r3, #8
 800ae7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae80:	64ba      	str	r2, [r7, #72]	; 0x48
 800ae82:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae88:	e841 2300 	strex	r3, r2, [r1]
 800ae8c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ae8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d1e5      	bne.n	800ae60 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae9c:	d107      	bne.n	800aeae <UART_Start_Receive_IT+0x102>
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d103      	bne.n	800aeae <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	4a21      	ldr	r2, [pc, #132]	; (800af30 <UART_Start_Receive_IT+0x184>)
 800aeaa:	669a      	str	r2, [r3, #104]	; 0x68
 800aeac:	e002      	b.n	800aeb4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	4a20      	ldr	r2, [pc, #128]	; (800af34 <UART_Start_Receive_IT+0x188>)
 800aeb2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d019      	beq.n	800aef0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec4:	e853 3f00 	ldrex	r3, [r3]
 800aec8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aecc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800aed0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	461a      	mov	r2, r3
 800aed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeda:	637b      	str	r3, [r7, #52]	; 0x34
 800aedc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aee2:	e841 2300 	strex	r3, r2, [r1]
 800aee6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d1e6      	bne.n	800aebc <UART_Start_Receive_IT+0x110>
 800aeee:	e018      	b.n	800af22 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	e853 3f00 	ldrex	r3, [r3]
 800aefc:	613b      	str	r3, [r7, #16]
   return(result);
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	f043 0320 	orr.w	r3, r3, #32
 800af04:	653b      	str	r3, [r7, #80]	; 0x50
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	461a      	mov	r2, r3
 800af0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af0e:	623b      	str	r3, [r7, #32]
 800af10:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af12:	69f9      	ldr	r1, [r7, #28]
 800af14:	6a3a      	ldr	r2, [r7, #32]
 800af16:	e841 2300 	strex	r3, r2, [r1]
 800af1a:	61bb      	str	r3, [r7, #24]
   return(result);
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d1e6      	bne.n	800aef0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	375c      	adds	r7, #92	; 0x5c
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr
 800af30:	0800b1e7 	.word	0x0800b1e7
 800af34:	0800b081 	.word	0x0800b081

0800af38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af38:	b480      	push	{r7}
 800af3a:	b095      	sub	sp, #84	; 0x54
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af48:	e853 3f00 	ldrex	r3, [r3]
 800af4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af54:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	461a      	mov	r2, r3
 800af5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af5e:	643b      	str	r3, [r7, #64]	; 0x40
 800af60:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af66:	e841 2300 	strex	r3, r2, [r1]
 800af6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1e6      	bne.n	800af40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	3308      	adds	r3, #8
 800af78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7a:	6a3b      	ldr	r3, [r7, #32]
 800af7c:	e853 3f00 	ldrex	r3, [r3]
 800af80:	61fb      	str	r3, [r7, #28]
   return(result);
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	f023 0301 	bic.w	r3, r3, #1
 800af88:	64bb      	str	r3, [r7, #72]	; 0x48
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	3308      	adds	r3, #8
 800af90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af92:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af9a:	e841 2300 	strex	r3, r2, [r1]
 800af9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1e5      	bne.n	800af72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d118      	bne.n	800afe0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	e853 3f00 	ldrex	r3, [r3]
 800afba:	60bb      	str	r3, [r7, #8]
   return(result);
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	f023 0310 	bic.w	r3, r3, #16
 800afc2:	647b      	str	r3, [r7, #68]	; 0x44
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	461a      	mov	r2, r3
 800afca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afcc:	61bb      	str	r3, [r7, #24]
 800afce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd0:	6979      	ldr	r1, [r7, #20]
 800afd2:	69ba      	ldr	r2, [r7, #24]
 800afd4:	e841 2300 	strex	r3, r2, [r1]
 800afd8:	613b      	str	r3, [r7, #16]
   return(result);
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d1e6      	bne.n	800afae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2220      	movs	r2, #32
 800afe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	669a      	str	r2, [r3, #104]	; 0x68
}
 800aff4:	bf00      	nop
 800aff6:	3754      	adds	r7, #84	; 0x54
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b00c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2200      	movs	r2, #0
 800b01a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f7ff f962 	bl	800a2e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b024:	bf00      	nop
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b088      	sub	sp, #32
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	e853 3f00 	ldrex	r3, [r3]
 800b040:	60bb      	str	r3, [r7, #8]
   return(result);
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b048:	61fb      	str	r3, [r7, #28]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	461a      	mov	r2, r3
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	61bb      	str	r3, [r7, #24]
 800b054:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b056:	6979      	ldr	r1, [r7, #20]
 800b058:	69ba      	ldr	r2, [r7, #24]
 800b05a:	e841 2300 	strex	r3, r2, [r1]
 800b05e:	613b      	str	r3, [r7, #16]
   return(result);
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d1e6      	bne.n	800b034 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2220      	movs	r2, #32
 800b06a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7ff f92e 	bl	800a2d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b078:	bf00      	nop
 800b07a:	3720      	adds	r7, #32
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b096      	sub	sp, #88	; 0x58
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b08e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b098:	2b22      	cmp	r3, #34	; 0x22
 800b09a:	f040 8098 	bne.w	800b1ce <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b0a8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800b0ac:	b2d9      	uxtb	r1, r3
 800b0ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b0b2:	b2da      	uxtb	r2, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0b8:	400a      	ands	r2, r1
 800b0ba:	b2d2      	uxtb	r2, r2
 800b0bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0c2:	1c5a      	adds	r2, r3, #1
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	b29a      	uxth	r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d17b      	bne.n	800b1de <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ee:	e853 3f00 	ldrex	r3, [r3]
 800b0f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0fa:	653b      	str	r3, [r7, #80]	; 0x50
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	461a      	mov	r2, r3
 800b102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b104:	647b      	str	r3, [r7, #68]	; 0x44
 800b106:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b108:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b10a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b10c:	e841 2300 	strex	r3, r2, [r1]
 800b110:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1e6      	bne.n	800b0e6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3308      	adds	r3, #8
 800b11e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	e853 3f00 	ldrex	r3, [r3]
 800b126:	623b      	str	r3, [r7, #32]
   return(result);
 800b128:	6a3b      	ldr	r3, [r7, #32]
 800b12a:	f023 0301 	bic.w	r3, r3, #1
 800b12e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	3308      	adds	r3, #8
 800b136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b138:	633a      	str	r2, [r7, #48]	; 0x30
 800b13a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b13e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b140:	e841 2300 	strex	r3, r2, [r1]
 800b144:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1e5      	bne.n	800b118 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2220      	movs	r2, #32
 800b150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b164:	2b01      	cmp	r3, #1
 800b166:	d12e      	bne.n	800b1c6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	e853 3f00 	ldrex	r3, [r3]
 800b17a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f023 0310 	bic.w	r3, r3, #16
 800b182:	64bb      	str	r3, [r7, #72]	; 0x48
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	461a      	mov	r2, r3
 800b18a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b18c:	61fb      	str	r3, [r7, #28]
 800b18e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b190:	69b9      	ldr	r1, [r7, #24]
 800b192:	69fa      	ldr	r2, [r7, #28]
 800b194:	e841 2300 	strex	r3, r2, [r1]
 800b198:	617b      	str	r3, [r7, #20]
   return(result);
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1e6      	bne.n	800b16e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	69db      	ldr	r3, [r3, #28]
 800b1a6:	f003 0310 	and.w	r3, r3, #16
 800b1aa:	2b10      	cmp	r3, #16
 800b1ac:	d103      	bne.n	800b1b6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2210      	movs	r2, #16
 800b1b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b1bc:	4619      	mov	r1, r3
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f7ff f89c 	bl	800a2fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b1c4:	e00b      	b.n	800b1de <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f7f7 fd3a 	bl	8002c40 <HAL_UART_RxCpltCallback>
}
 800b1cc:	e007      	b.n	800b1de <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	699a      	ldr	r2, [r3, #24]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f042 0208 	orr.w	r2, r2, #8
 800b1dc:	619a      	str	r2, [r3, #24]
}
 800b1de:	bf00      	nop
 800b1e0:	3758      	adds	r7, #88	; 0x58
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b096      	sub	sp, #88	; 0x58
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b1f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1fe:	2b22      	cmp	r3, #34	; 0x22
 800b200:	f040 8098 	bne.w	800b334 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b212:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b214:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b218:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b21c:	4013      	ands	r3, r2
 800b21e:	b29a      	uxth	r2, r3
 800b220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b222:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b228:	1c9a      	adds	r2, r3, #2
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b234:	b29b      	uxth	r3, r3
 800b236:	3b01      	subs	r3, #1
 800b238:	b29a      	uxth	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b246:	b29b      	uxth	r3, r3
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d17b      	bne.n	800b344 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b254:	e853 3f00 	ldrex	r3, [r3]
 800b258:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b260:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	461a      	mov	r2, r3
 800b268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b26a:	643b      	str	r3, [r7, #64]	; 0x40
 800b26c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b270:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b272:	e841 2300 	strex	r3, r2, [r1]
 800b276:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1e6      	bne.n	800b24c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3308      	adds	r3, #8
 800b284:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b286:	6a3b      	ldr	r3, [r7, #32]
 800b288:	e853 3f00 	ldrex	r3, [r3]
 800b28c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	f023 0301 	bic.w	r3, r3, #1
 800b294:	64bb      	str	r3, [r7, #72]	; 0x48
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3308      	adds	r3, #8
 800b29c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b29e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2a6:	e841 2300 	strex	r3, r2, [r1]
 800b2aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d1e5      	bne.n	800b27e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2220      	movs	r2, #32
 800b2b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d12e      	bne.n	800b32c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	e853 3f00 	ldrex	r3, [r3]
 800b2e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	f023 0310 	bic.w	r3, r3, #16
 800b2e8:	647b      	str	r3, [r7, #68]	; 0x44
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2f2:	61bb      	str	r3, [r7, #24]
 800b2f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f6:	6979      	ldr	r1, [r7, #20]
 800b2f8:	69ba      	ldr	r2, [r7, #24]
 800b2fa:	e841 2300 	strex	r3, r2, [r1]
 800b2fe:	613b      	str	r3, [r7, #16]
   return(result);
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d1e6      	bne.n	800b2d4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	69db      	ldr	r3, [r3, #28]
 800b30c:	f003 0310 	and.w	r3, r3, #16
 800b310:	2b10      	cmp	r3, #16
 800b312:	d103      	bne.n	800b31c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2210      	movs	r2, #16
 800b31a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b322:	4619      	mov	r1, r3
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f7fe ffe9 	bl	800a2fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b32a:	e00b      	b.n	800b344 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f7f7 fc87 	bl	8002c40 <HAL_UART_RxCpltCallback>
}
 800b332:	e007      	b.n	800b344 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	699a      	ldr	r2, [r3, #24]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f042 0208 	orr.w	r2, r2, #8
 800b342:	619a      	str	r2, [r3, #24]
}
 800b344:	bf00      	nop
 800b346:	3758      	adds	r7, #88	; 0x58
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b356:	2300      	movs	r3, #0
 800b358:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800b35a:	6839      	ldr	r1, [r7, #0]
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f001 fce2 	bl	800cd26 <VL53L0X_get_offset_calibration_data_micro_meter>
 800b362:	4603      	mov	r3, r0
 800b364:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800b366:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
	...

0800b374 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800b374:	b5b0      	push	{r4, r5, r7, lr}
 800b376:	b096      	sub	sp, #88	; 0x58
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b37c:	2300      	movs	r3, #0
 800b37e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800b382:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b386:	2b00      	cmp	r3, #0
 800b388:	d107      	bne.n	800b39a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800b38a:	2200      	movs	r2, #0
 800b38c:	2188      	movs	r1, #136	; 0x88
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f004 feda 	bl	8010148 <VL53L0X_WrByte>
 800b394:	4603      	mov	r3, r0
 800b396:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b3a8:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b3b2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a9e      	ldr	r2, [pc, #632]	; (800b634 <VL53L0X_DataInit+0x2c0>)
 800b3ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a9d      	ldr	r2, [pc, #628]	; (800b638 <VL53L0X_DataInit+0x2c4>)
 800b3c2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b3cc:	f107 0310 	add.w	r3, r7, #16
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fac2 	bl	800b95c <VL53L0X_GetDeviceParameters>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800b3de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d112      	bne.n	800b40c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f103 0410 	add.w	r4, r3, #16
 800b3f4:	f107 0510 	add.w	r5, r7, #16
 800b3f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b404:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b408:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2264      	movs	r2, #100	; 0x64
 800b410:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b41a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b424:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b42e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2201      	movs	r2, #1
 800b436:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b43a:	2201      	movs	r2, #1
 800b43c:	2180      	movs	r1, #128	; 0x80
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f004 fe82 	bl	8010148 <VL53L0X_WrByte>
 800b444:	4603      	mov	r3, r0
 800b446:	461a      	mov	r2, r3
 800b448:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b44c:	4313      	orrs	r3, r2
 800b44e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b452:	2201      	movs	r2, #1
 800b454:	21ff      	movs	r1, #255	; 0xff
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f004 fe76 	bl	8010148 <VL53L0X_WrByte>
 800b45c:	4603      	mov	r3, r0
 800b45e:	461a      	mov	r2, r3
 800b460:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b464:	4313      	orrs	r3, r2
 800b466:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b46a:	2200      	movs	r2, #0
 800b46c:	2100      	movs	r1, #0
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f004 fe6a 	bl	8010148 <VL53L0X_WrByte>
 800b474:	4603      	mov	r3, r0
 800b476:	461a      	mov	r2, r3
 800b478:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b47c:	4313      	orrs	r3, r2
 800b47e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800b482:	f107 030f 	add.w	r3, r7, #15
 800b486:	461a      	mov	r2, r3
 800b488:	2191      	movs	r1, #145	; 0x91
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f004 fede 	bl	801024c <VL53L0X_RdByte>
 800b490:	4603      	mov	r3, r0
 800b492:	461a      	mov	r2, r3
 800b494:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b498:	4313      	orrs	r3, r2
 800b49a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800b49e:	7bfa      	ldrb	r2, [r7, #15]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f004 fe4c 	bl	8010148 <VL53L0X_WrByte>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b4be:	2200      	movs	r2, #0
 800b4c0:	21ff      	movs	r1, #255	; 0xff
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f004 fe40 	bl	8010148 <VL53L0X_WrByte>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	2180      	movs	r1, #128	; 0x80
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f004 fe34 	bl	8010148 <VL53L0X_WrByte>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	653b      	str	r3, [r7, #80]	; 0x50
 800b4f2:	e014      	b.n	800b51e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800b4f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d114      	bne.n	800b526 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800b4fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	2201      	movs	r2, #1
 800b502:	4619      	mov	r1, r3
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 fd35 	bl	800bf74 <VL53L0X_SetLimitCheckEnable>
 800b50a:	4603      	mov	r3, r0
 800b50c:	461a      	mov	r2, r3
 800b50e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b512:	4313      	orrs	r3, r2
 800b514:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b51a:	3301      	adds	r3, #1
 800b51c:	653b      	str	r3, [r7, #80]	; 0x50
 800b51e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b520:	2b05      	cmp	r3, #5
 800b522:	dde7      	ble.n	800b4f4 <VL53L0X_DataInit+0x180>
 800b524:	e000      	b.n	800b528 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800b526:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800b528:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d107      	bne.n	800b540 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b530:	2200      	movs	r2, #0
 800b532:	2102      	movs	r1, #2
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 fd1d 	bl	800bf74 <VL53L0X_SetLimitCheckEnable>
 800b53a:	4603      	mov	r3, r0
 800b53c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b540:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b544:	2b00      	cmp	r3, #0
 800b546:	d107      	bne.n	800b558 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b548:	2200      	movs	r2, #0
 800b54a:	2103      	movs	r1, #3
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 fd11 	bl	800bf74 <VL53L0X_SetLimitCheckEnable>
 800b552:	4603      	mov	r3, r0
 800b554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b558:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d107      	bne.n	800b570 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b560:	2200      	movs	r2, #0
 800b562:	2104      	movs	r1, #4
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 fd05 	bl	800bf74 <VL53L0X_SetLimitCheckEnable>
 800b56a:	4603      	mov	r3, r0
 800b56c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b570:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b574:	2b00      	cmp	r3, #0
 800b576:	d107      	bne.n	800b588 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b578:	2200      	movs	r2, #0
 800b57a:	2105      	movs	r1, #5
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 fcf9 	bl	800bf74 <VL53L0X_SetLimitCheckEnable>
 800b582:	4603      	mov	r3, r0
 800b584:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800b588:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d108      	bne.n	800b5a2 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b590:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800b594:	2100      	movs	r1, #0
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 fd9c 	bl	800c0d4 <VL53L0X_SetLimitCheckValue>
 800b59c:	4603      	mov	r3, r0
 800b59e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b5a2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d108      	bne.n	800b5bc <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b5aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b5ae:	2101      	movs	r1, #1
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 fd8f 	bl	800c0d4 <VL53L0X_SetLimitCheckValue>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b5bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d108      	bne.n	800b5d6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b5c4:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800b5c8:	2102      	movs	r1, #2
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 fd82 	bl	800c0d4 <VL53L0X_SetLimitCheckValue>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b5d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d107      	bne.n	800b5ee <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b5de:	2200      	movs	r2, #0
 800b5e0:	2103      	movs	r1, #3
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fd76 	bl	800c0d4 <VL53L0X_SetLimitCheckValue>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b5ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d10f      	bne.n	800b616 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	22ff      	movs	r2, #255	; 0xff
 800b5fa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b5fe:	22ff      	movs	r2, #255	; 0xff
 800b600:	2101      	movs	r1, #1
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f004 fda0 	bl	8010148 <VL53L0X_WrByte>
 800b608:	4603      	mov	r3, r0
 800b60a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2201      	movs	r2, #1
 800b612:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800b616:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d103      	bne.n	800b626 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800b626:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3758      	adds	r7, #88	; 0x58
 800b62e:	46bd      	mov	sp, r7
 800b630:	bdb0      	pop	{r4, r5, r7, pc}
 800b632:	bf00      	nop
 800b634:	00016b85 	.word	0x00016b85
 800b638:	000970a4 	.word	0x000970a4

0800b63c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800b63c:	b5b0      	push	{r4, r5, r7, lr}
 800b63e:	b09e      	sub	sp, #120	; 0x78
 800b640:	af02      	add	r7, sp, #8
 800b642:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b644:	2300      	movs	r3, #0
 800b646:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800b64a:	f107 031c 	add.w	r3, r7, #28
 800b64e:	2240      	movs	r2, #64	; 0x40
 800b650:	2100      	movs	r1, #0
 800b652:	4618      	mov	r0, r3
 800b654:	f004 fee0 	bl	8010418 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800b65c:	2300      	movs	r3, #0
 800b65e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800b660:	2300      	movs	r3, #0
 800b662:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800b666:	2300      	movs	r3, #0
 800b668:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800b66e:	2300      	movs	r3, #0
 800b670:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800b672:	2300      	movs	r3, #0
 800b674:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800b678:	2101      	movs	r1, #1
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f002 faa9 	bl	800dbd2 <VL53L0X_get_info_from_device>
 800b680:	4603      	mov	r3, r0
 800b682:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800b68c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800b694:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800b698:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d80d      	bhi.n	800b6bc <VL53L0X_StaticInit+0x80>
 800b6a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d102      	bne.n	800b6ae <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800b6a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b6aa:	2b20      	cmp	r3, #32
 800b6ac:	d806      	bhi.n	800b6bc <VL53L0X_StaticInit+0x80>
 800b6ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d10e      	bne.n	800b6d4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800b6b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b6b8:	2b0c      	cmp	r3, #12
 800b6ba:	d90b      	bls.n	800b6d4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800b6bc:	f107 0218 	add.w	r2, r7, #24
 800b6c0:	f107 0314 	add.w	r3, r7, #20
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f001 fd28 	bl	800d11c <VL53L0X_perform_ref_spad_management>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b6d2:	e009      	b.n	800b6e8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800b6d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6d8:	461a      	mov	r2, r3
 800b6da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f001 ff29 	bl	800d534 <VL53L0X_set_reference_spads>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800b6e8:	4b94      	ldr	r3, [pc, #592]	; (800b93c <VL53L0X_StaticInit+0x300>)
 800b6ea:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800b6ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10f      	bne.n	800b714 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800b6fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800b6fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b702:	2b00      	cmp	r3, #0
 800b704:	d104      	bne.n	800b710 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b70c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b70e:	e001      	b.n	800b714 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800b710:	4b8a      	ldr	r3, [pc, #552]	; (800b93c <VL53L0X_StaticInit+0x300>)
 800b712:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800b714:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d106      	bne.n	800b72a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800b71c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f003 fdfc 	bl	800f31c <VL53L0X_load_tuning_settings>
 800b724:	4603      	mov	r3, r0
 800b726:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800b72a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d10a      	bne.n	800b748 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800b732:	2300      	movs	r3, #0
 800b734:	9300      	str	r3, [sp, #0]
 800b736:	2304      	movs	r3, #4
 800b738:	2200      	movs	r2, #0
 800b73a:	2100      	movs	r1, #0
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f001 f8f1 	bl	800c924 <VL53L0X_SetGpioConfig>
 800b742:	4603      	mov	r3, r0
 800b744:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b748:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d121      	bne.n	800b794 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b750:	2201      	movs	r2, #1
 800b752:	21ff      	movs	r1, #255	; 0xff
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f004 fcf7 	bl	8010148 <VL53L0X_WrByte>
 800b75a:	4603      	mov	r3, r0
 800b75c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800b760:	f107 031a 	add.w	r3, r7, #26
 800b764:	461a      	mov	r2, r3
 800b766:	2184      	movs	r1, #132	; 0x84
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f004 fd99 	bl	80102a0 <VL53L0X_RdWord>
 800b76e:	4603      	mov	r3, r0
 800b770:	461a      	mov	r2, r3
 800b772:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b776:	4313      	orrs	r3, r2
 800b778:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b77c:	2200      	movs	r2, #0
 800b77e:	21ff      	movs	r1, #255	; 0xff
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f004 fce1 	bl	8010148 <VL53L0X_WrByte>
 800b786:	4603      	mov	r3, r0
 800b788:	461a      	mov	r2, r3
 800b78a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b78e:	4313      	orrs	r3, r2
 800b790:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b794:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d105      	bne.n	800b7a8 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800b79c:	8b7b      	ldrh	r3, [r7, #26]
 800b79e:	011b      	lsls	r3, r3, #4
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800b7a8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d108      	bne.n	800b7c2 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b7b0:	f107 031c 	add.w	r3, r7, #28
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f8d0 	bl	800b95c <VL53L0X_GetDeviceParameters>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800b7c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d110      	bne.n	800b7ec <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800b7ca:	f107 0319 	add.w	r3, r7, #25
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 f992 	bl	800bafa <VL53L0X_GetFractionEnable>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800b7dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d103      	bne.n	800b7ec <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800b7e4:	7e7a      	ldrb	r2, [r7, #25]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800b7ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d10e      	bne.n	800b812 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f103 0410 	add.w	r4, r3, #16
 800b7fa:	f107 051c 	add.w	r5, r7, #28
 800b7fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b80a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b80e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800b812:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b816:	2b00      	cmp	r3, #0
 800b818:	d111      	bne.n	800b83e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800b81a:	f107 0319 	add.w	r3, r7, #25
 800b81e:	461a      	mov	r2, r3
 800b820:	2101      	movs	r1, #1
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f004 fd12 	bl	801024c <VL53L0X_RdByte>
 800b828:	4603      	mov	r3, r0
 800b82a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800b82e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b832:	2b00      	cmp	r3, #0
 800b834:	d103      	bne.n	800b83e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800b836:	7e7a      	ldrb	r2, [r7, #25]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800b83e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b842:	2b00      	cmp	r3, #0
 800b844:	d107      	bne.n	800b856 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b846:	2200      	movs	r2, #0
 800b848:	2100      	movs	r1, #0
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 f9ca 	bl	800bbe4 <VL53L0X_SetSequenceStepEnable>
 800b850:	4603      	mov	r3, r0
 800b852:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b856:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d107      	bne.n	800b86e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b85e:	2200      	movs	r2, #0
 800b860:	2102      	movs	r1, #2
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 f9be 	bl	800bbe4 <VL53L0X_SetSequenceStepEnable>
 800b868:	4603      	mov	r3, r0
 800b86a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800b86e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b872:	2b00      	cmp	r3, #0
 800b874:	d103      	bne.n	800b87e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2203      	movs	r2, #3
 800b87a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b87e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b882:	2b00      	cmp	r3, #0
 800b884:	d109      	bne.n	800b89a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b886:	f107 0313 	add.w	r3, r7, #19
 800b88a:	461a      	mov	r2, r3
 800b88c:	2100      	movs	r1, #0
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 f990 	bl	800bbb4 <VL53L0X_GetVcselPulsePeriod>
 800b894:	4603      	mov	r3, r0
 800b896:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b89a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d103      	bne.n	800b8aa <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b8a2:	7cfa      	ldrb	r2, [r7, #19]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b8aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d109      	bne.n	800b8c6 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b8b2:	f107 0313 	add.w	r3, r7, #19
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	2101      	movs	r1, #1
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f97a 	bl	800bbb4 <VL53L0X_GetVcselPulsePeriod>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b8c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d103      	bne.n	800b8d6 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b8ce:	7cfa      	ldrb	r2, [r7, #19]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b8d6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d109      	bne.n	800b8f2 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800b8de:	f107 030c 	add.w	r3, r7, #12
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	2103      	movs	r1, #3
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f002 fef4 	bl	800e6d4 <get_sequence_step_timeout>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b8f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d103      	bne.n	800b902 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b8fa:	68fa      	ldr	r2, [r7, #12]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b902:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b906:	2b00      	cmp	r3, #0
 800b908:	d109      	bne.n	800b91e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800b90a:	f107 030c 	add.w	r3, r7, #12
 800b90e:	461a      	mov	r2, r3
 800b910:	2104      	movs	r1, #4
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f002 fede 	bl	800e6d4 <get_sequence_step_timeout>
 800b918:	4603      	mov	r3, r0
 800b91a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b91e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b922:	2b00      	cmp	r3, #0
 800b924:	d103      	bne.n	800b92e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b926:	68fa      	ldr	r2, [r7, #12]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b92e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800b932:	4618      	mov	r0, r3
 800b934:	3770      	adds	r7, #112	; 0x70
 800b936:	46bd      	mov	sp, r7
 800b938:	bdb0      	pop	{r4, r5, r7, pc}
 800b93a:	bf00      	nop
 800b93c:	2000000c 	.word	0x2000000c

0800b940 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800b948:	239d      	movs	r3, #157	; 0x9d
 800b94a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800b94c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3714      	adds	r7, #20
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b966:	2300      	movs	r3, #0
 800b968:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	4619      	mov	r1, r3
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 f8b0 	bl	800bad4 <VL53L0X_GetDeviceMode>
 800b974:	4603      	mov	r3, r0
 800b976:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d107      	bne.n	800b990 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	3308      	adds	r3, #8
 800b984:	4619      	mov	r1, r3
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fa78 	bl	800be7c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800b98c:	4603      	mov	r3, r0
 800b98e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800b990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d102      	bne.n	800b99e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	2200      	movs	r2, #0
 800b99c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800b99e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d107      	bne.n	800b9b6 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	3310      	adds	r3, #16
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 faae 	bl	800bf0e <VL53L0X_GetXTalkCompensationRateMegaCps>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800b9b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d107      	bne.n	800b9ce <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	3314      	adds	r3, #20
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7ff fcc1 	bl	800b34c <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800b9ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d134      	bne.n	800ba40 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	60bb      	str	r3, [r7, #8]
 800b9da:	e02a      	b.n	800ba32 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b9dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d12a      	bne.n	800ba3a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	b299      	uxth	r1, r3
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	3308      	adds	r3, #8
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	683a      	ldr	r2, [r7, #0]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	3304      	adds	r3, #4
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 fbce 	bl	800c198 <VL53L0X_GetLimitCheckValue>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	461a      	mov	r2, r3
 800ba00:	7bfb      	ldrb	r3, [r7, #15]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800ba06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d117      	bne.n	800ba3e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	b299      	uxth	r1, r3
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	3318      	adds	r3, #24
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	4413      	add	r3, r2
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 fb35 	bl	800c08c <VL53L0X_GetLimitCheckEnable>
 800ba22:	4603      	mov	r3, r0
 800ba24:	461a      	mov	r2, r3
 800ba26:	7bfb      	ldrb	r3, [r7, #15]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	3301      	adds	r3, #1
 800ba30:	60bb      	str	r3, [r7, #8]
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	2b05      	cmp	r3, #5
 800ba36:	ddd1      	ble.n	800b9dc <VL53L0X_GetDeviceParameters+0x80>
 800ba38:	e002      	b.n	800ba40 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800ba3a:	bf00      	nop
 800ba3c:	e000      	b.n	800ba40 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800ba3e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ba40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d107      	bne.n	800ba58 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	333c      	adds	r3, #60	; 0x3c
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 fc30 	bl	800c2b4 <VL53L0X_GetWrapAroundCheckEnable>
 800ba54:	4603      	mov	r3, r0
 800ba56:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800ba58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d107      	bne.n	800ba70 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	3304      	adds	r3, #4
 800ba64:	4619      	mov	r1, r3
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 f879 	bl	800bb5e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ba70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b085      	sub	sp, #20
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	460b      	mov	r3, r1
 800ba86:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800ba8c:	78fb      	ldrb	r3, [r7, #3]
 800ba8e:	2b15      	cmp	r3, #21
 800ba90:	bf8c      	ite	hi
 800ba92:	2201      	movhi	r2, #1
 800ba94:	2200      	movls	r2, #0
 800ba96:	b2d2      	uxtb	r2, r2
 800ba98:	2a00      	cmp	r2, #0
 800ba9a:	d10e      	bne.n	800baba <VL53L0X_SetDeviceMode+0x3e>
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	409a      	lsls	r2, r3
 800baa0:	4b0b      	ldr	r3, [pc, #44]	; (800bad0 <VL53L0X_SetDeviceMode+0x54>)
 800baa2:	4013      	ands	r3, r2
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	bf14      	ite	ne
 800baa8:	2301      	movne	r3, #1
 800baaa:	2300      	moveq	r3, #0
 800baac:	b2db      	uxtb	r3, r3
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	78fa      	ldrb	r2, [r7, #3]
 800bab6:	741a      	strb	r2, [r3, #16]
		break;
 800bab8:	e001      	b.n	800babe <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800baba:	23f8      	movs	r3, #248	; 0xf8
 800babc:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800babe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3714      	adds	r7, #20
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr
 800bace:	bf00      	nop
 800bad0:	0030000b 	.word	0x0030000b

0800bad4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b085      	sub	sp, #20
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bade:	2300      	movs	r3, #0
 800bae0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	7c1a      	ldrb	r2, [r3, #16]
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800baea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3714      	adds	r7, #20
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b084      	sub	sp, #16
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb04:	2300      	movs	r3, #0
 800bb06:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800bb08:	683a      	ldr	r2, [r7, #0]
 800bb0a:	2109      	movs	r1, #9
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f004 fb9d 	bl	801024c <VL53L0X_RdByte>
 800bb12:	4603      	mov	r3, r0
 800bb14:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800bb16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d106      	bne.n	800bb2c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	f003 0301 	and.w	r3, r3, #1
 800bb26:	b2da      	uxtb	r2, r3
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800bb2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b084      	sub	sp, #16
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb42:	2300      	movs	r3, #0
 800bb44:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800bb46:	6839      	ldr	r1, [r7, #0]
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f003 fa56 	bl	800effa <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800bb52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3710      	adds	r7, #16
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b084      	sub	sp, #16
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
 800bb66:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800bb6c:	6839      	ldr	r1, [r7, #0]
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f003 fb23 	bl	800f1ba <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800bb74:	4603      	mov	r3, r0
 800bb76:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800bb78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	70fb      	strb	r3, [r7, #3]
 800bb90:	4613      	mov	r3, r2
 800bb92:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb94:	2300      	movs	r3, #0
 800bb96:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800bb98:	78ba      	ldrb	r2, [r7, #2]
 800bb9a:	78fb      	ldrb	r3, [r7, #3]
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f002 ff6b 	bl	800ea7a <VL53L0X_set_vcsel_pulse_period>
 800bba4:	4603      	mov	r3, r0
 800bba6:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800bba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3710      	adds	r7, #16
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b086      	sub	sp, #24
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	607a      	str	r2, [r7, #4]
 800bbc0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800bbc6:	7afb      	ldrb	r3, [r7, #11]
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	4619      	mov	r1, r3
 800bbcc:	68f8      	ldr	r0, [r7, #12]
 800bbce:	f003 f9dd 	bl	800ef8c <VL53L0X_get_vcsel_pulse_period>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800bbd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3718      	adds	r7, #24
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
	...

0800bbe4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b086      	sub	sp, #24
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	460b      	mov	r3, r1
 800bbee:	70fb      	strb	r3, [r7, #3]
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bc00:	f107 030f 	add.w	r3, r7, #15
 800bc04:	461a      	mov	r2, r3
 800bc06:	2101      	movs	r1, #1
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f004 fb1f 	bl	801024c <VL53L0X_RdByte>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800bc12:	7bfb      	ldrb	r3, [r7, #15]
 800bc14:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800bc16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d15a      	bne.n	800bcd4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800bc1e:	78bb      	ldrb	r3, [r7, #2]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d12b      	bne.n	800bc7c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800bc24:	78fb      	ldrb	r3, [r7, #3]
 800bc26:	2b04      	cmp	r3, #4
 800bc28:	d825      	bhi.n	800bc76 <VL53L0X_SetSequenceStepEnable+0x92>
 800bc2a:	a201      	add	r2, pc, #4	; (adr r2, 800bc30 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800bc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc30:	0800bc45 	.word	0x0800bc45
 800bc34:	0800bc4f 	.word	0x0800bc4f
 800bc38:	0800bc59 	.word	0x0800bc59
 800bc3c:	0800bc63 	.word	0x0800bc63
 800bc40:	0800bc6d 	.word	0x0800bc6d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800bc44:	7dbb      	ldrb	r3, [r7, #22]
 800bc46:	f043 0310 	orr.w	r3, r3, #16
 800bc4a:	75bb      	strb	r3, [r7, #22]
				break;
 800bc4c:	e043      	b.n	800bcd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800bc4e:	7dbb      	ldrb	r3, [r7, #22]
 800bc50:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800bc54:	75bb      	strb	r3, [r7, #22]
				break;
 800bc56:	e03e      	b.n	800bcd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800bc58:	7dbb      	ldrb	r3, [r7, #22]
 800bc5a:	f043 0304 	orr.w	r3, r3, #4
 800bc5e:	75bb      	strb	r3, [r7, #22]
				break;
 800bc60:	e039      	b.n	800bcd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800bc62:	7dbb      	ldrb	r3, [r7, #22]
 800bc64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc68:	75bb      	strb	r3, [r7, #22]
				break;
 800bc6a:	e034      	b.n	800bcd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800bc6c:	7dbb      	ldrb	r3, [r7, #22]
 800bc6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc72:	75bb      	strb	r3, [r7, #22]
				break;
 800bc74:	e02f      	b.n	800bcd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bc76:	23fc      	movs	r3, #252	; 0xfc
 800bc78:	75fb      	strb	r3, [r7, #23]
 800bc7a:	e02c      	b.n	800bcd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800bc7c:	78fb      	ldrb	r3, [r7, #3]
 800bc7e:	2b04      	cmp	r3, #4
 800bc80:	d825      	bhi.n	800bcce <VL53L0X_SetSequenceStepEnable+0xea>
 800bc82:	a201      	add	r2, pc, #4	; (adr r2, 800bc88 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800bc84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc88:	0800bc9d 	.word	0x0800bc9d
 800bc8c:	0800bca7 	.word	0x0800bca7
 800bc90:	0800bcb1 	.word	0x0800bcb1
 800bc94:	0800bcbb 	.word	0x0800bcbb
 800bc98:	0800bcc5 	.word	0x0800bcc5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800bc9c:	7dbb      	ldrb	r3, [r7, #22]
 800bc9e:	f023 0310 	bic.w	r3, r3, #16
 800bca2:	75bb      	strb	r3, [r7, #22]
				break;
 800bca4:	e017      	b.n	800bcd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800bca6:	7dbb      	ldrb	r3, [r7, #22]
 800bca8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800bcac:	75bb      	strb	r3, [r7, #22]
				break;
 800bcae:	e012      	b.n	800bcd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800bcb0:	7dbb      	ldrb	r3, [r7, #22]
 800bcb2:	f023 0304 	bic.w	r3, r3, #4
 800bcb6:	75bb      	strb	r3, [r7, #22]
				break;
 800bcb8:	e00d      	b.n	800bcd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800bcba:	7dbb      	ldrb	r3, [r7, #22]
 800bcbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcc0:	75bb      	strb	r3, [r7, #22]
				break;
 800bcc2:	e008      	b.n	800bcd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800bcc4:	7dbb      	ldrb	r3, [r7, #22]
 800bcc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcca:	75bb      	strb	r3, [r7, #22]
				break;
 800bccc:	e003      	b.n	800bcd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bcce:	23fc      	movs	r3, #252	; 0xfc
 800bcd0:	75fb      	strb	r3, [r7, #23]
 800bcd2:	e000      	b.n	800bcd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800bcd4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800bcd6:	7bfb      	ldrb	r3, [r7, #15]
 800bcd8:	7dba      	ldrb	r2, [r7, #22]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d01e      	beq.n	800bd1c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800bcde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d107      	bne.n	800bcf6 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800bce6:	7dbb      	ldrb	r3, [r7, #22]
 800bce8:	461a      	mov	r2, r3
 800bcea:	2101      	movs	r1, #1
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f004 fa2b 	bl	8010148 <VL53L0X_WrByte>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800bcf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d103      	bne.n	800bd06 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	7dba      	ldrb	r2, [r7, #22]
 800bd02:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800bd06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d106      	bne.n	800bd1c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800bd14:	6939      	ldr	r1, [r7, #16]
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f7ff ff0e 	bl	800bb38 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800bd1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3718      	adds	r7, #24
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b087      	sub	sp, #28
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	607b      	str	r3, [r7, #4]
 800bd32:	460b      	mov	r3, r1
 800bd34:	72fb      	strb	r3, [r7, #11]
 800bd36:	4613      	mov	r3, r2
 800bd38:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800bd44:	7afb      	ldrb	r3, [r7, #11]
 800bd46:	2b04      	cmp	r3, #4
 800bd48:	d836      	bhi.n	800bdb8 <sequence_step_enabled+0x90>
 800bd4a:	a201      	add	r2, pc, #4	; (adr r2, 800bd50 <sequence_step_enabled+0x28>)
 800bd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd50:	0800bd65 	.word	0x0800bd65
 800bd54:	0800bd77 	.word	0x0800bd77
 800bd58:	0800bd89 	.word	0x0800bd89
 800bd5c:	0800bd9b 	.word	0x0800bd9b
 800bd60:	0800bdad 	.word	0x0800bdad
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800bd64:	7abb      	ldrb	r3, [r7, #10]
 800bd66:	111b      	asrs	r3, r3, #4
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	f003 0301 	and.w	r3, r3, #1
 800bd6e:	b2da      	uxtb	r2, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	701a      	strb	r2, [r3, #0]
		break;
 800bd74:	e022      	b.n	800bdbc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800bd76:	7abb      	ldrb	r3, [r7, #10]
 800bd78:	10db      	asrs	r3, r3, #3
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	f003 0301 	and.w	r3, r3, #1
 800bd80:	b2da      	uxtb	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	701a      	strb	r2, [r3, #0]
		break;
 800bd86:	e019      	b.n	800bdbc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800bd88:	7abb      	ldrb	r3, [r7, #10]
 800bd8a:	109b      	asrs	r3, r3, #2
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	f003 0301 	and.w	r3, r3, #1
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	701a      	strb	r2, [r3, #0]
		break;
 800bd98:	e010      	b.n	800bdbc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800bd9a:	7abb      	ldrb	r3, [r7, #10]
 800bd9c:	119b      	asrs	r3, r3, #6
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	f003 0301 	and.w	r3, r3, #1
 800bda4:	b2da      	uxtb	r2, r3
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	701a      	strb	r2, [r3, #0]
		break;
 800bdaa:	e007      	b.n	800bdbc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800bdac:	7abb      	ldrb	r3, [r7, #10]
 800bdae:	09db      	lsrs	r3, r3, #7
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	701a      	strb	r2, [r3, #0]
		break;
 800bdb6:	e001      	b.n	800bdbc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bdb8:	23fc      	movs	r3, #252	; 0xfc
 800bdba:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bdbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	371c      	adds	r7, #28
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bdde:	f107 030e 	add.w	r3, r7, #14
 800bde2:	461a      	mov	r2, r3
 800bde4:	2101      	movs	r1, #1
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f004 fa30 	bl	801024c <VL53L0X_RdByte>
 800bdec:	4603      	mov	r3, r0
 800bdee:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800bdf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d107      	bne.n	800be08 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800bdf8:	7bba      	ldrb	r2, [r7, #14]
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7ff ff92 	bl	800bd28 <sequence_step_enabled>
 800be04:	4603      	mov	r3, r0
 800be06:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800be08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d108      	bne.n	800be22 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800be10:	7bba      	ldrb	r2, [r7, #14]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	3302      	adds	r3, #2
 800be16:	2101      	movs	r1, #1
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f7ff ff85 	bl	800bd28 <sequence_step_enabled>
 800be1e:	4603      	mov	r3, r0
 800be20:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800be22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d108      	bne.n	800be3c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800be2a:	7bba      	ldrb	r2, [r7, #14]
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	3301      	adds	r3, #1
 800be30:	2102      	movs	r1, #2
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff ff78 	bl	800bd28 <sequence_step_enabled>
 800be38:	4603      	mov	r3, r0
 800be3a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800be3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d108      	bne.n	800be56 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800be44:	7bba      	ldrb	r2, [r7, #14]
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	3303      	adds	r3, #3
 800be4a:	2103      	movs	r1, #3
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f7ff ff6b 	bl	800bd28 <sequence_step_enabled>
 800be52:	4603      	mov	r3, r0
 800be54:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800be56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d108      	bne.n	800be70 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800be5e:	7bba      	ldrb	r2, [r7, #14]
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	3304      	adds	r3, #4
 800be64:	2104      	movs	r1, #4
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7ff ff5e 	bl	800bd28 <sequence_step_enabled>
 800be6c:	4603      	mov	r3, r0
 800be6e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800be70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be74:	4618      	mov	r0, r3
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be86:	2300      	movs	r3, #0
 800be88:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800be8a:	f107 030c 	add.w	r3, r7, #12
 800be8e:	461a      	mov	r2, r3
 800be90:	21f8      	movs	r1, #248	; 0xf8
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f004 fa04 	bl	80102a0 <VL53L0X_RdWord>
 800be98:	4603      	mov	r3, r0
 800be9a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800be9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d108      	bne.n	800beb6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800bea4:	f107 0308 	add.w	r3, r7, #8
 800bea8:	461a      	mov	r2, r3
 800beaa:	2104      	movs	r1, #4
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f004 fa2f 	bl	8010310 <VL53L0X_RdDWord>
 800beb2:	4603      	mov	r3, r0
 800beb4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800beb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d10c      	bne.n	800bed8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800bebe:	89bb      	ldrh	r3, [r7, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d005      	beq.n	800bed0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	89ba      	ldrh	r2, [r7, #12]
 800bec8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800beee:	2300      	movs	r3, #0
 800bef0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	7f1b      	ldrb	r3, [r3, #28]
 800bef6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	7bba      	ldrb	r2, [r7, #14]
 800befc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800befe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3714      	adds	r7, #20
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr

0800bf0e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b086      	sub	sp, #24
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
 800bf16:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800bf1c:	f107 030e 	add.w	r3, r7, #14
 800bf20:	461a      	mov	r2, r3
 800bf22:	2120      	movs	r1, #32
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f004 f9bb 	bl	80102a0 <VL53L0X_RdWord>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800bf2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d118      	bne.n	800bf68 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800bf36:	89fb      	ldrh	r3, [r7, #14]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d109      	bne.n	800bf50 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6a1b      	ldr	r3, [r3, #32]
 800bf40:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	693a      	ldr	r2, [r7, #16]
 800bf46:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	771a      	strb	r2, [r3, #28]
 800bf4e:	e00b      	b.n	800bf68 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800bf50:	89fb      	ldrh	r3, [r7, #14]
 800bf52:	00db      	lsls	r3, r3, #3
 800bf54:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	693a      	ldr	r2, [r7, #16]
 800bf5a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2201      	movs	r2, #1
 800bf66:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bf68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3718      	adds	r7, #24
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b086      	sub	sp, #24
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	807b      	strh	r3, [r7, #2]
 800bf80:	4613      	mov	r3, r2
 800bf82:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf84:	2300      	movs	r3, #0
 800bf86:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800bf90:	2300      	movs	r3, #0
 800bf92:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800bf94:	887b      	ldrh	r3, [r7, #2]
 800bf96:	2b05      	cmp	r3, #5
 800bf98:	d902      	bls.n	800bfa0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bf9a:	23fc      	movs	r3, #252	; 0xfc
 800bf9c:	75fb      	strb	r3, [r7, #23]
 800bf9e:	e05b      	b.n	800c058 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800bfa0:	787b      	ldrb	r3, [r7, #1]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d106      	bne.n	800bfb4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	73bb      	strb	r3, [r7, #14]
 800bfb2:	e00a      	b.n	800bfca <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bfb4:	887b      	ldrh	r3, [r7, #2]
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	330c      	adds	r3, #12
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800bfca:	887b      	ldrh	r3, [r7, #2]
 800bfcc:	2b05      	cmp	r3, #5
 800bfce:	d841      	bhi.n	800c054 <VL53L0X_SetLimitCheckEnable+0xe0>
 800bfd0:	a201      	add	r2, pc, #4	; (adr r2, 800bfd8 <VL53L0X_SetLimitCheckEnable+0x64>)
 800bfd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd6:	bf00      	nop
 800bfd8:	0800bff1 	.word	0x0800bff1
 800bfdc:	0800bffb 	.word	0x0800bffb
 800bfe0:	0800c011 	.word	0x0800c011
 800bfe4:	0800c01b 	.word	0x0800c01b
 800bfe8:	0800c025 	.word	0x0800c025
 800bfec:	0800c03d 	.word	0x0800c03d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	7bfa      	ldrb	r2, [r7, #15]
 800bff4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800bff8:	e02e      	b.n	800c058 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800bffe:	b29b      	uxth	r3, r3
 800c000:	461a      	mov	r2, r3
 800c002:	2144      	movs	r1, #68	; 0x44
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f004 f8c3 	bl	8010190 <VL53L0X_WrWord>
 800c00a:	4603      	mov	r3, r0
 800c00c:	75fb      	strb	r3, [r7, #23]

			break;
 800c00e:	e023      	b.n	800c058 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	7bfa      	ldrb	r2, [r7, #15]
 800c014:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800c018:	e01e      	b.n	800c058 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	7bfa      	ldrb	r2, [r7, #15]
 800c01e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800c022:	e019      	b.n	800c058 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800c024:	7bbb      	ldrb	r3, [r7, #14]
 800c026:	005b      	lsls	r3, r3, #1
 800c028:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800c02a:	7b7b      	ldrb	r3, [r7, #13]
 800c02c:	22fe      	movs	r2, #254	; 0xfe
 800c02e:	2160      	movs	r1, #96	; 0x60
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f004 f8d7 	bl	80101e4 <VL53L0X_UpdateByte>
 800c036:	4603      	mov	r3, r0
 800c038:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800c03a:	e00d      	b.n	800c058 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800c03c:	7bbb      	ldrb	r3, [r7, #14]
 800c03e:	011b      	lsls	r3, r3, #4
 800c040:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800c042:	7b7b      	ldrb	r3, [r7, #13]
 800c044:	22ef      	movs	r2, #239	; 0xef
 800c046:	2160      	movs	r1, #96	; 0x60
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f004 f8cb 	bl	80101e4 <VL53L0X_UpdateByte>
 800c04e:	4603      	mov	r3, r0
 800c050:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800c052:	e001      	b.n	800c058 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c054:	23fc      	movs	r3, #252	; 0xfc
 800c056:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c058:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d10f      	bne.n	800c080 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800c060:	787b      	ldrb	r3, [r7, #1]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d106      	bne.n	800c074 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c066:	887b      	ldrh	r3, [r7, #2]
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	4413      	add	r3, r2
 800c06c:	2200      	movs	r2, #0
 800c06e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c072:	e005      	b.n	800c080 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c074:	887b      	ldrh	r3, [r7, #2]
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	4413      	add	r3, r2
 800c07a:	2201      	movs	r2, #1
 800c07c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c080:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c084:	4618      	mov	r0, r3
 800c086:	3718      	adds	r7, #24
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b087      	sub	sp, #28
 800c090:	af00      	add	r7, sp, #0
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	460b      	mov	r3, r1
 800c096:	607a      	str	r2, [r7, #4]
 800c098:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c09a:	2300      	movs	r3, #0
 800c09c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800c09e:	897b      	ldrh	r3, [r7, #10]
 800c0a0:	2b05      	cmp	r3, #5
 800c0a2:	d905      	bls.n	800c0b0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c0a4:	23fc      	movs	r3, #252	; 0xfc
 800c0a6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	701a      	strb	r2, [r3, #0]
 800c0ae:	e008      	b.n	800c0c2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c0b0:	897b      	ldrh	r3, [r7, #10]
 800c0b2:	68fa      	ldr	r2, [r7, #12]
 800c0b4:	4413      	add	r3, r2
 800c0b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0ba:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	7dba      	ldrb	r2, [r7, #22]
 800c0c0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c0c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	371c      	adds	r7, #28
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr
	...

0800c0d4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b086      	sub	sp, #24
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	607a      	str	r2, [r7, #4]
 800c0e0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800c0e6:	897b      	ldrh	r3, [r7, #10]
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0f0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800c0f2:	7dbb      	ldrb	r3, [r7, #22]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d107      	bne.n	800c108 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c0f8:	897b      	ldrh	r3, [r7, #10]
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	330c      	adds	r3, #12
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	4413      	add	r3, r2
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	605a      	str	r2, [r3, #4]
 800c106:	e040      	b.n	800c18a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800c108:	897b      	ldrh	r3, [r7, #10]
 800c10a:	2b05      	cmp	r3, #5
 800c10c:	d830      	bhi.n	800c170 <VL53L0X_SetLimitCheckValue+0x9c>
 800c10e:	a201      	add	r2, pc, #4	; (adr r2, 800c114 <VL53L0X_SetLimitCheckValue+0x40>)
 800c110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c114:	0800c12d 	.word	0x0800c12d
 800c118:	0800c135 	.word	0x0800c135
 800c11c:	0800c14b 	.word	0x0800c14b
 800c120:	0800c153 	.word	0x0800c153
 800c124:	0800c15b 	.word	0x0800c15b
 800c128:	0800c15b 	.word	0x0800c15b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800c132:	e01f      	b.n	800c174 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800c138:	b29b      	uxth	r3, r3
 800c13a:	461a      	mov	r2, r3
 800c13c:	2144      	movs	r1, #68	; 0x44
 800c13e:	68f8      	ldr	r0, [r7, #12]
 800c140:	f004 f826 	bl	8010190 <VL53L0X_WrWord>
 800c144:	4603      	mov	r3, r0
 800c146:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800c148:	e014      	b.n	800c174 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800c150:	e010      	b.n	800c174 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800c158:	e00c      	b.n	800c174 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800c15e:	b29b      	uxth	r3, r3
 800c160:	461a      	mov	r2, r3
 800c162:	2164      	movs	r1, #100	; 0x64
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f004 f813 	bl	8010190 <VL53L0X_WrWord>
 800c16a:	4603      	mov	r3, r0
 800c16c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800c16e:	e001      	b.n	800c174 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c170:	23fc      	movs	r3, #252	; 0xfc
 800c172:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c174:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d106      	bne.n	800c18a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c17c:	897b      	ldrh	r3, [r7, #10]
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	330c      	adds	r3, #12
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	4413      	add	r3, r2
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c18a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3718      	adds	r7, #24
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop

0800c198 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b088      	sub	sp, #32
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	607a      	str	r2, [r7, #4]
 800c1a4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800c1ae:	897b      	ldrh	r3, [r7, #10]
 800c1b0:	2b05      	cmp	r3, #5
 800c1b2:	d847      	bhi.n	800c244 <VL53L0X_GetLimitCheckValue+0xac>
 800c1b4:	a201      	add	r2, pc, #4	; (adr r2, 800c1bc <VL53L0X_GetLimitCheckValue+0x24>)
 800c1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ba:	bf00      	nop
 800c1bc:	0800c1d5 	.word	0x0800c1d5
 800c1c0:	0800c1e1 	.word	0x0800c1e1
 800c1c4:	0800c207 	.word	0x0800c207
 800c1c8:	0800c213 	.word	0x0800c213
 800c1cc:	0800c21f 	.word	0x0800c21f
 800c1d0:	0800c21f 	.word	0x0800c21f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1d8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	77bb      	strb	r3, [r7, #30]
		break;
 800c1de:	e033      	b.n	800c248 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800c1e0:	f107 0316 	add.w	r3, r7, #22
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	2144      	movs	r1, #68	; 0x44
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	f004 f859 	bl	80102a0 <VL53L0X_RdWord>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800c1f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d102      	bne.n	800c200 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800c1fa:	8afb      	ldrh	r3, [r7, #22]
 800c1fc:	025b      	lsls	r3, r3, #9
 800c1fe:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800c200:	2301      	movs	r3, #1
 800c202:	77bb      	strb	r3, [r7, #30]
		break;
 800c204:	e020      	b.n	800c248 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c20a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800c20c:	2300      	movs	r3, #0
 800c20e:	77bb      	strb	r3, [r7, #30]
		break;
 800c210:	e01a      	b.n	800c248 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c216:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800c218:	2300      	movs	r3, #0
 800c21a:	77bb      	strb	r3, [r7, #30]
		break;
 800c21c:	e014      	b.n	800c248 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800c21e:	f107 0316 	add.w	r3, r7, #22
 800c222:	461a      	mov	r2, r3
 800c224:	2164      	movs	r1, #100	; 0x64
 800c226:	68f8      	ldr	r0, [r7, #12]
 800c228:	f004 f83a 	bl	80102a0 <VL53L0X_RdWord>
 800c22c:	4603      	mov	r3, r0
 800c22e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800c230:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d102      	bne.n	800c23e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800c238:	8afb      	ldrh	r3, [r7, #22]
 800c23a:	025b      	lsls	r3, r3, #9
 800c23c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800c23e:	2300      	movs	r3, #0
 800c240:	77bb      	strb	r3, [r7, #30]
		break;
 800c242:	e001      	b.n	800c248 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c244:	23fc      	movs	r3, #252	; 0xfc
 800c246:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c248:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d12a      	bne.n	800c2a6 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800c250:	7fbb      	ldrb	r3, [r7, #30]
 800c252:	2b01      	cmp	r3, #1
 800c254:	d124      	bne.n	800c2a0 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d110      	bne.n	800c27e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800c25c:	897b      	ldrh	r3, [r7, #10]
 800c25e:	68fa      	ldr	r2, [r7, #12]
 800c260:	330c      	adds	r3, #12
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	4413      	add	r3, r2
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	69ba      	ldr	r2, [r7, #24]
 800c26e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800c270:	897b      	ldrh	r3, [r7, #10]
 800c272:	68fa      	ldr	r2, [r7, #12]
 800c274:	4413      	add	r3, r2
 800c276:	2200      	movs	r2, #0
 800c278:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c27c:	e013      	b.n	800c2a6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	69ba      	ldr	r2, [r7, #24]
 800c282:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800c284:	897b      	ldrh	r3, [r7, #10]
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	330c      	adds	r3, #12
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	4413      	add	r3, r2
 800c28e:	69ba      	ldr	r2, [r7, #24]
 800c290:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800c292:	897b      	ldrh	r3, [r7, #10]
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	4413      	add	r3, r2
 800c298:	2201      	movs	r2, #1
 800c29a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c29e:	e002      	b.n	800c2a6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	69ba      	ldr	r2, [r7, #24]
 800c2a4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c2a6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3720      	adds	r7, #32
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop

0800c2b4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800c2c2:	f107 030e 	add.w	r3, r7, #14
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	2101      	movs	r1, #1
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f003 ffbe 	bl	801024c <VL53L0X_RdByte>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800c2d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d10e      	bne.n	800c2fa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800c2dc:	7bba      	ldrb	r2, [r7, #14]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800c2e4:	7bbb      	ldrb	r3, [r7, #14]
 800c2e6:	b25b      	sxtb	r3, r3
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	da03      	bge.n	800c2f4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	701a      	strb	r2, [r3, #0]
 800c2f2:	e002      	b.n	800c2fa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800c2fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d104      	bne.n	800c30c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	781a      	ldrb	r2, [r3, #0]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c30c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c310:	4618      	mov	r0, r3
 800c312:	3710      	adds	r7, #16
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c320:	2300      	movs	r3, #0
 800c322:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800c324:	f107 030e 	add.w	r3, r7, #14
 800c328:	4619      	mov	r1, r3
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f7ff fbd2 	bl	800bad4 <VL53L0X_GetDeviceMode>
 800c330:	4603      	mov	r3, r0
 800c332:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800c334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d107      	bne.n	800c34c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800c33c:	7bbb      	ldrb	r3, [r7, #14]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d104      	bne.n	800c34c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f898 	bl	800c478 <VL53L0X_StartMeasurement>
 800c348:	4603      	mov	r3, r0
 800c34a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800c34c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d104      	bne.n	800c35e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f001 fb6f 	bl	800da38 <VL53L0X_measurement_poll_for_completion>
 800c35a:	4603      	mov	r3, r0
 800c35c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800c35e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d106      	bne.n	800c374 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800c366:	7bbb      	ldrb	r3, [r7, #14]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d103      	bne.n	800c374 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2203      	movs	r2, #3
 800c370:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800c374:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c38c:	2300      	movs	r3, #0
 800c38e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800c390:	2301      	movs	r3, #1
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	68b9      	ldr	r1, [r7, #8]
 800c396:	68f8      	ldr	r0, [r7, #12]
 800c398:	f001 fb11 	bl	800d9be <VL53L0X_perform_ref_calibration>
 800c39c:	4603      	mov	r3, r0
 800c39e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800c3a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3718      	adds	r7, #24
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b086      	sub	sp, #24
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800c3c2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800c3c4:	7dbb      	ldrb	r3, [r7, #22]
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	d005      	beq.n	800c3d6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800c3ca:	7dbb      	ldrb	r3, [r7, #22]
 800c3cc:	2b02      	cmp	r3, #2
 800c3ce:	d002      	beq.n	800c3d6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800c3d0:	7dbb      	ldrb	r3, [r7, #22]
 800c3d2:	2b03      	cmp	r3, #3
 800c3d4:	d147      	bne.n	800c466 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800c3d6:	f107 030c 	add.w	r3, r7, #12
 800c3da:	f107 0210 	add.w	r2, r7, #16
 800c3de:	2101      	movs	r1, #1
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 fbc3 	bl	800cb6c <VL53L0X_GetInterruptThresholds>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800c3f0:	d803      	bhi.n	800c3fa <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800c3f2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800c3f4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800c3f8:	d935      	bls.n	800c466 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800c3fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d131      	bne.n	800c466 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800c402:	78fb      	ldrb	r3, [r7, #3]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d006      	beq.n	800c416 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800c408:	491a      	ldr	r1, [pc, #104]	; (800c474 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f002 ff86 	bl	800f31c <VL53L0X_load_tuning_settings>
 800c410:	4603      	mov	r3, r0
 800c412:	75fb      	strb	r3, [r7, #23]
 800c414:	e027      	b.n	800c466 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800c416:	2204      	movs	r2, #4
 800c418:	21ff      	movs	r1, #255	; 0xff
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f003 fe94 	bl	8010148 <VL53L0X_WrByte>
 800c420:	4603      	mov	r3, r0
 800c422:	461a      	mov	r2, r3
 800c424:	7dfb      	ldrb	r3, [r7, #23]
 800c426:	4313      	orrs	r3, r2
 800c428:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800c42a:	2200      	movs	r2, #0
 800c42c:	2170      	movs	r1, #112	; 0x70
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f003 fe8a 	bl	8010148 <VL53L0X_WrByte>
 800c434:	4603      	mov	r3, r0
 800c436:	461a      	mov	r2, r3
 800c438:	7dfb      	ldrb	r3, [r7, #23]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c43e:	2200      	movs	r2, #0
 800c440:	21ff      	movs	r1, #255	; 0xff
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f003 fe80 	bl	8010148 <VL53L0X_WrByte>
 800c448:	4603      	mov	r3, r0
 800c44a:	461a      	mov	r2, r3
 800c44c:	7dfb      	ldrb	r3, [r7, #23]
 800c44e:	4313      	orrs	r3, r2
 800c450:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c452:	2200      	movs	r2, #0
 800c454:	2180      	movs	r1, #128	; 0x80
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f003 fe76 	bl	8010148 <VL53L0X_WrByte>
 800c45c:	4603      	mov	r3, r0
 800c45e:	461a      	mov	r2, r3
 800c460:	7dfb      	ldrb	r3, [r7, #23]
 800c462:	4313      	orrs	r3, r2
 800c464:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800c466:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3718      	adds	r7, #24
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	20000100 	.word	0x20000100

0800c478 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c480:	2300      	movs	r3, #0
 800c482:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800c484:	2301      	movs	r3, #1
 800c486:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800c488:	f107 030e 	add.w	r3, r7, #14
 800c48c:	4619      	mov	r1, r3
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f7ff fb20 	bl	800bad4 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c494:	2201      	movs	r2, #1
 800c496:	2180      	movs	r1, #128	; 0x80
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f003 fe55 	bl	8010148 <VL53L0X_WrByte>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	21ff      	movs	r1, #255	; 0xff
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f003 fe4e 	bl	8010148 <VL53L0X_WrByte>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f003 fe47 	bl	8010148 <VL53L0X_WrByte>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	2191      	movs	r1, #145	; 0x91
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f003 fe3d 	bl	8010148 <VL53L0X_WrByte>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f003 fe36 	bl	8010148 <VL53L0X_WrByte>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	21ff      	movs	r1, #255	; 0xff
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f003 fe2f 	bl	8010148 <VL53L0X_WrByte>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	2180      	movs	r1, #128	; 0x80
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f003 fe28 	bl	8010148 <VL53L0X_WrByte>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800c4fc:	7bbb      	ldrb	r3, [r7, #14]
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d054      	beq.n	800c5ac <VL53L0X_StartMeasurement+0x134>
 800c502:	2b03      	cmp	r3, #3
 800c504:	dc6c      	bgt.n	800c5e0 <VL53L0X_StartMeasurement+0x168>
 800c506:	2b00      	cmp	r3, #0
 800c508:	d002      	beq.n	800c510 <VL53L0X_StartMeasurement+0x98>
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d034      	beq.n	800c578 <VL53L0X_StartMeasurement+0x100>
 800c50e:	e067      	b.n	800c5e0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800c510:	2201      	movs	r2, #1
 800c512:	2100      	movs	r1, #0
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f003 fe17 	bl	8010148 <VL53L0X_WrByte>
 800c51a:	4603      	mov	r3, r0
 800c51c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800c51e:	7bfb      	ldrb	r3, [r7, #15]
 800c520:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800c522:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d15d      	bne.n	800c5e6 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800c52a:	2300      	movs	r3, #0
 800c52c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d008      	beq.n	800c546 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800c534:	f107 030d 	add.w	r3, r7, #13
 800c538:	461a      	mov	r2, r3
 800c53a:	2100      	movs	r1, #0
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f003 fe85 	bl	801024c <VL53L0X_RdByte>
 800c542:	4603      	mov	r3, r0
 800c544:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	3301      	adds	r3, #1
 800c54a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800c54c:	7b7a      	ldrb	r2, [r7, #13]
 800c54e:	7bfb      	ldrb	r3, [r7, #15]
 800c550:	4013      	ands	r3, r2
 800c552:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800c554:	7bfa      	ldrb	r2, [r7, #15]
 800c556:	429a      	cmp	r2, r3
 800c558:	d107      	bne.n	800c56a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800c55a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d103      	bne.n	800c56a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c568:	d3e1      	bcc.n	800c52e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c570:	d339      	bcc.n	800c5e6 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800c572:	23f9      	movs	r3, #249	; 0xf9
 800c574:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800c576:	e036      	b.n	800c5e6 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800c578:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d105      	bne.n	800c58c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c580:	2101      	movs	r1, #1
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f7ff ff12 	bl	800c3ac <VL53L0X_CheckAndLoadInterruptSettings>
 800c588:	4603      	mov	r3, r0
 800c58a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800c58c:	2202      	movs	r2, #2
 800c58e:	2100      	movs	r1, #0
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f003 fdd9 	bl	8010148 <VL53L0X_WrByte>
 800c596:	4603      	mov	r3, r0
 800c598:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800c59a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d123      	bne.n	800c5ea <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2204      	movs	r2, #4
 800c5a6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800c5aa:	e01e      	b.n	800c5ea <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800c5ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d105      	bne.n	800c5c0 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c5b4:	2101      	movs	r1, #1
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f7ff fef8 	bl	800c3ac <VL53L0X_CheckAndLoadInterruptSettings>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800c5c0:	2204      	movs	r2, #4
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f003 fdbf 	bl	8010148 <VL53L0X_WrByte>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800c5ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d10b      	bne.n	800c5ee <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2204      	movs	r2, #4
 800c5da:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800c5de:	e006      	b.n	800c5ee <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800c5e0:	23f8      	movs	r3, #248	; 0xf8
 800c5e2:	75fb      	strb	r3, [r7, #23]
 800c5e4:	e004      	b.n	800c5f0 <VL53L0X_StartMeasurement+0x178>
		break;
 800c5e6:	bf00      	nop
 800c5e8:	e002      	b.n	800c5f0 <VL53L0X_StartMeasurement+0x178>
		break;
 800c5ea:	bf00      	nop
 800c5ec:	e000      	b.n	800c5f0 <VL53L0X_StartMeasurement+0x178>
		break;
 800c5ee:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800c5f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3718      	adds	r7, #24
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c606:	2300      	movs	r3, #0
 800c608:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800c610:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800c612:	7bbb      	ldrb	r3, [r7, #14]
 800c614:	2b04      	cmp	r3, #4
 800c616:	d112      	bne.n	800c63e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800c618:	f107 0308 	add.w	r3, r7, #8
 800c61c:	4619      	mov	r1, r3
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 fb1a 	bl	800cc58 <VL53L0X_GetInterruptMaskStatus>
 800c624:	4603      	mov	r3, r0
 800c626:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	2b04      	cmp	r3, #4
 800c62c:	d103      	bne.n	800c636 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	2201      	movs	r2, #1
 800c632:	701a      	strb	r2, [r3, #0]
 800c634:	e01c      	b.n	800c670 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	2200      	movs	r2, #0
 800c63a:	701a      	strb	r2, [r3, #0]
 800c63c:	e018      	b.n	800c670 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800c63e:	f107 030d 	add.w	r3, r7, #13
 800c642:	461a      	mov	r2, r3
 800c644:	2114      	movs	r1, #20
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f003 fe00 	bl	801024c <VL53L0X_RdByte>
 800c64c:	4603      	mov	r3, r0
 800c64e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800c650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d10b      	bne.n	800c670 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800c658:	7b7b      	ldrb	r3, [r7, #13]
 800c65a:	f003 0301 	and.w	r3, r3, #1
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d003      	beq.n	800c66a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	2201      	movs	r2, #1
 800c666:	701a      	strb	r2, [r3, #0]
 800c668:	e002      	b.n	800c670 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	2200      	movs	r2, #0
 800c66e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c670:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c674:	4618      	mov	r0, r3
 800c676:	3710      	adds	r7, #16
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c67c:	b5b0      	push	{r4, r5, r7, lr}
 800c67e:	b096      	sub	sp, #88	; 0x58
 800c680:	af02      	add	r7, sp, #8
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c686:	2300      	movs	r3, #0
 800c688:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800c68c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c690:	230c      	movs	r3, #12
 800c692:	2114      	movs	r1, #20
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f003 fd2b 	bl	80100f0 <VL53L0X_ReadMulti>
 800c69a:	4603      	mov	r3, r0
 800c69c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800c6a0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f040 80d1 	bne.w	800c84c <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800c6b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	021b      	lsls	r3, r3, #8
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	4413      	add	r3, r2
 800c6c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800c6d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	021b      	lsls	r3, r3, #8
 800c6da:	b29a      	uxth	r2, r3
 800c6dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	4413      	add	r3, r2
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	025b      	lsls	r3, r3, #9
 800c6e8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6ee:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800c6f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	021b      	lsls	r3, r3, #8
 800c6f8:	b29a      	uxth	r2, r3
 800c6fa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	4413      	add	r3, r2
 800c702:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800c706:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c70a:	025b      	lsls	r3, r3, #9
 800c70c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800c712:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800c716:	b29b      	uxth	r3, r3
 800c718:	021b      	lsls	r3, r3, #8
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c720:	b29b      	uxth	r3, r3
 800c722:	4413      	add	r3, r2
 800c724:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c72e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800c730:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c734:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800c73e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800c746:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800c74a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c74c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c750:	d046      	beq.n	800c7e0 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800c752:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c754:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800c758:	fb02 f303 	mul.w	r3, r2, r3
 800c75c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c760:	4a57      	ldr	r2, [pc, #348]	; (800c8c0 <VL53L0X_GetRangingMeasurementData+0x244>)
 800c762:	fb82 1203 	smull	r1, r2, r2, r3
 800c766:	1192      	asrs	r2, r2, #6
 800c768:	17db      	asrs	r3, r3, #31
 800c76a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800c76c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6a1b      	ldr	r3, [r3, #32]
 800c774:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	7f1b      	ldrb	r3, [r3, #28]
 800c77a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800c77e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c782:	2b00      	cmp	r3, #0
 800c784:	d02c      	beq.n	800c7e0 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800c786:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c788:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c78c:	fb02 f303 	mul.w	r3, r2, r3
 800c790:	121a      	asrs	r2, r3, #8
					<= 0) {
 800c792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800c794:	429a      	cmp	r2, r3
 800c796:	d10d      	bne.n	800c7b4 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800c798:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d004      	beq.n	800c7aa <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800c7a0:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800c7a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c7a8:	e016      	b.n	800c7d8 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800c7aa:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800c7ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c7b2:	e011      	b.n	800c7d8 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800c7b4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c7b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c7ba:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800c7be:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c7c0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800c7c4:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800c7c8:	121b      	asrs	r3, r3, #8
 800c7ca:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800c7cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7ce:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800c7d0:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800c7d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800c7d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c7dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800c7e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00d      	beq.n	800c804 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800c7e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c7ec:	089b      	lsrs	r3, r3, #2
 800c7ee:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800c7f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	019b      	lsls	r3, r3, #6
 800c7fc:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	75da      	strb	r2, [r3, #23]
 800c802:	e006      	b.n	800c812 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800c80a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	2200      	movs	r2, #0
 800c810:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800c812:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c816:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800c81a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800c81e:	9301      	str	r3, [sp, #4]
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	4613      	mov	r3, r2
 800c826:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f003 fa15 	bl	800fc58 <VL53L0X_get_pal_range_status>
 800c82e:	4603      	mov	r3, r0
 800c830:	461a      	mov	r2, r3
 800c832:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c836:	4313      	orrs	r3, r2
 800c838:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800c83c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c840:	2b00      	cmp	r3, #0
 800c842:	d103      	bne.n	800c84c <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800c844:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c84c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c850:	2b00      	cmp	r3, #0
 800c852:	d12f      	bne.n	800c8b4 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f107 040c 	add.w	r4, r7, #12
 800c85a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800c85e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c862:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c866:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800c86e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800c874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800c87c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800c882:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800c888:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800c88e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800c894:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800c89a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800c8a4:	f107 050c 	add.w	r5, r7, #12
 800c8a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c8ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c8b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c8b4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3750      	adds	r7, #80	; 0x50
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bdb0      	pop	{r4, r5, r7, pc}
 800c8c0:	10624dd3 	.word	0x10624dd3

0800c8c4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800c8d2:	2100      	movs	r1, #0
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f7ff f8d1 	bl	800ba7c <VL53L0X_SetDeviceMode>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c8de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d104      	bne.n	800c8f0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f7ff fd16 	bl	800c318 <VL53L0X_PerformSingleMeasurement>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800c8f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d105      	bne.n	800c904 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800c8f8:	6839      	ldr	r1, [r7, #0]
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f7ff febe 	bl	800c67c <VL53L0X_GetRangingMeasurementData>
 800c900:	4603      	mov	r3, r0
 800c902:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800c904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d105      	bne.n	800c918 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c90c:	2100      	movs	r1, #0
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 f962 	bl	800cbd8 <VL53L0X_ClearInterruptMask>
 800c914:	4603      	mov	r3, r0
 800c916:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800c918:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	4608      	mov	r0, r1
 800c92e:	4611      	mov	r1, r2
 800c930:	461a      	mov	r2, r3
 800c932:	4603      	mov	r3, r0
 800c934:	70fb      	strb	r3, [r7, #3]
 800c936:	460b      	mov	r3, r1
 800c938:	70bb      	strb	r3, [r7, #2]
 800c93a:	4613      	mov	r3, r2
 800c93c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c93e:	2300      	movs	r3, #0
 800c940:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800c942:	78fb      	ldrb	r3, [r7, #3]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d002      	beq.n	800c94e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800c948:	23f6      	movs	r3, #246	; 0xf6
 800c94a:	73fb      	strb	r3, [r7, #15]
 800c94c:	e107      	b.n	800cb5e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800c94e:	78bb      	ldrb	r3, [r7, #2]
 800c950:	2b14      	cmp	r3, #20
 800c952:	d110      	bne.n	800c976 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c954:	7e3b      	ldrb	r3, [r7, #24]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d102      	bne.n	800c960 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800c95a:	2310      	movs	r3, #16
 800c95c:	73bb      	strb	r3, [r7, #14]
 800c95e:	e001      	b.n	800c964 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800c960:	2301      	movs	r3, #1
 800c962:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800c964:	7bbb      	ldrb	r3, [r7, #14]
 800c966:	461a      	mov	r2, r3
 800c968:	2184      	movs	r1, #132	; 0x84
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f003 fbec 	bl	8010148 <VL53L0X_WrByte>
 800c970:	4603      	mov	r3, r0
 800c972:	73fb      	strb	r3, [r7, #15]
 800c974:	e0f3      	b.n	800cb5e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800c976:	78bb      	ldrb	r3, [r7, #2]
 800c978:	2b15      	cmp	r3, #21
 800c97a:	f040 8097 	bne.w	800caac <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c97e:	2201      	movs	r2, #1
 800c980:	21ff      	movs	r1, #255	; 0xff
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f003 fbe0 	bl	8010148 <VL53L0X_WrByte>
 800c988:	4603      	mov	r3, r0
 800c98a:	461a      	mov	r2, r3
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	4313      	orrs	r3, r2
 800c990:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c992:	2200      	movs	r2, #0
 800c994:	2100      	movs	r1, #0
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f003 fbd6 	bl	8010148 <VL53L0X_WrByte>
 800c99c:	4603      	mov	r3, r0
 800c99e:	461a      	mov	r2, r3
 800c9a0:	7bfb      	ldrb	r3, [r7, #15]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	21ff      	movs	r1, #255	; 0xff
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f003 fbcc 	bl	8010148 <VL53L0X_WrByte>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	7bfb      	ldrb	r3, [r7, #15]
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	2180      	movs	r1, #128	; 0x80
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f003 fbc2 	bl	8010148 <VL53L0X_WrByte>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800c9ce:	2202      	movs	r2, #2
 800c9d0:	2185      	movs	r1, #133	; 0x85
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f003 fbb8 	bl	8010148 <VL53L0X_WrByte>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	461a      	mov	r2, r3
 800c9dc:	7bfb      	ldrb	r3, [r7, #15]
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800c9e2:	2204      	movs	r2, #4
 800c9e4:	21ff      	movs	r1, #255	; 0xff
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f003 fbae 	bl	8010148 <VL53L0X_WrByte>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	7bfb      	ldrb	r3, [r7, #15]
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	21cd      	movs	r1, #205	; 0xcd
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f003 fba4 	bl	8010148 <VL53L0X_WrByte>
 800ca00:	4603      	mov	r3, r0
 800ca02:	461a      	mov	r2, r3
 800ca04:	7bfb      	ldrb	r3, [r7, #15]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800ca0a:	2211      	movs	r2, #17
 800ca0c:	21cc      	movs	r1, #204	; 0xcc
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f003 fb9a 	bl	8010148 <VL53L0X_WrByte>
 800ca14:	4603      	mov	r3, r0
 800ca16:	461a      	mov	r2, r3
 800ca18:	7bfb      	ldrb	r3, [r7, #15]
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800ca1e:	2207      	movs	r2, #7
 800ca20:	21ff      	movs	r1, #255	; 0xff
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f003 fb90 	bl	8010148 <VL53L0X_WrByte>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	7bfb      	ldrb	r3, [r7, #15]
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800ca32:	2200      	movs	r2, #0
 800ca34:	21be      	movs	r1, #190	; 0xbe
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f003 fb86 	bl	8010148 <VL53L0X_WrByte>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	461a      	mov	r2, r3
 800ca40:	7bfb      	ldrb	r3, [r7, #15]
 800ca42:	4313      	orrs	r3, r2
 800ca44:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800ca46:	2206      	movs	r2, #6
 800ca48:	21ff      	movs	r1, #255	; 0xff
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f003 fb7c 	bl	8010148 <VL53L0X_WrByte>
 800ca50:	4603      	mov	r3, r0
 800ca52:	461a      	mov	r2, r3
 800ca54:	7bfb      	ldrb	r3, [r7, #15]
 800ca56:	4313      	orrs	r3, r2
 800ca58:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800ca5a:	2209      	movs	r2, #9
 800ca5c:	21cc      	movs	r1, #204	; 0xcc
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f003 fb72 	bl	8010148 <VL53L0X_WrByte>
 800ca64:	4603      	mov	r3, r0
 800ca66:	461a      	mov	r2, r3
 800ca68:	7bfb      	ldrb	r3, [r7, #15]
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ca6e:	2200      	movs	r2, #0
 800ca70:	21ff      	movs	r1, #255	; 0xff
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f003 fb68 	bl	8010148 <VL53L0X_WrByte>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	7bfb      	ldrb	r3, [r7, #15]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ca82:	2201      	movs	r2, #1
 800ca84:	21ff      	movs	r1, #255	; 0xff
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f003 fb5e 	bl	8010148 <VL53L0X_WrByte>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	461a      	mov	r2, r3
 800ca90:	7bfb      	ldrb	r3, [r7, #15]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ca96:	2200      	movs	r2, #0
 800ca98:	2100      	movs	r1, #0
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f003 fb54 	bl	8010148 <VL53L0X_WrByte>
 800caa0:	4603      	mov	r3, r0
 800caa2:	461a      	mov	r2, r3
 800caa4:	7bfb      	ldrb	r3, [r7, #15]
 800caa6:	4313      	orrs	r3, r2
 800caa8:	73fb      	strb	r3, [r7, #15]
 800caaa:	e058      	b.n	800cb5e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800caac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d121      	bne.n	800caf8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800cab4:	787b      	ldrb	r3, [r7, #1]
 800cab6:	2b04      	cmp	r3, #4
 800cab8:	d81b      	bhi.n	800caf2 <VL53L0X_SetGpioConfig+0x1ce>
 800caba:	a201      	add	r2, pc, #4	; (adr r2, 800cac0 <VL53L0X_SetGpioConfig+0x19c>)
 800cabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac0:	0800cad5 	.word	0x0800cad5
 800cac4:	0800cadb 	.word	0x0800cadb
 800cac8:	0800cae1 	.word	0x0800cae1
 800cacc:	0800cae7 	.word	0x0800cae7
 800cad0:	0800caed 	.word	0x0800caed
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800cad4:	2300      	movs	r3, #0
 800cad6:	73bb      	strb	r3, [r7, #14]
				break;
 800cad8:	e00f      	b.n	800cafa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800cada:	2301      	movs	r3, #1
 800cadc:	73bb      	strb	r3, [r7, #14]
				break;
 800cade:	e00c      	b.n	800cafa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800cae0:	2302      	movs	r3, #2
 800cae2:	73bb      	strb	r3, [r7, #14]
				break;
 800cae4:	e009      	b.n	800cafa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800cae6:	2303      	movs	r3, #3
 800cae8:	73bb      	strb	r3, [r7, #14]
				break;
 800caea:	e006      	b.n	800cafa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800caec:	2304      	movs	r3, #4
 800caee:	73bb      	strb	r3, [r7, #14]
				break;
 800caf0:	e003      	b.n	800cafa <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800caf2:	23f5      	movs	r3, #245	; 0xf5
 800caf4:	73fb      	strb	r3, [r7, #15]
 800caf6:	e000      	b.n	800cafa <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800caf8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800cafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d107      	bne.n	800cb12 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800cb02:	7bbb      	ldrb	r3, [r7, #14]
 800cb04:	461a      	mov	r2, r3
 800cb06:	210a      	movs	r1, #10
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f003 fb1d 	bl	8010148 <VL53L0X_WrByte>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800cb12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d10f      	bne.n	800cb3a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800cb1a:	7e3b      	ldrb	r3, [r7, #24]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d102      	bne.n	800cb26 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800cb20:	2300      	movs	r3, #0
 800cb22:	73bb      	strb	r3, [r7, #14]
 800cb24:	e001      	b.n	800cb2a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800cb26:	2310      	movs	r3, #16
 800cb28:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800cb2a:	7bbb      	ldrb	r3, [r7, #14]
 800cb2c:	22ef      	movs	r2, #239	; 0xef
 800cb2e:	2184      	movs	r1, #132	; 0x84
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f003 fb57 	bl	80101e4 <VL53L0X_UpdateByte>
 800cb36:	4603      	mov	r3, r0
 800cb38:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800cb3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d103      	bne.n	800cb4a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	787a      	ldrb	r2, [r7, #1]
 800cb46:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800cb4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d105      	bne.n	800cb5e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800cb52:	2100      	movs	r1, #0
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 f83f 	bl	800cbd8 <VL53L0X_ClearInterruptMask>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cb5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop

0800cb6c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b086      	sub	sp, #24
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	607a      	str	r2, [r7, #4]
 800cb76:	603b      	str	r3, [r7, #0]
 800cb78:	460b      	mov	r3, r1
 800cb7a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800cb80:	f107 0314 	add.w	r3, r7, #20
 800cb84:	461a      	mov	r2, r3
 800cb86:	210e      	movs	r1, #14
 800cb88:	68f8      	ldr	r0, [r7, #12]
 800cb8a:	f003 fb89 	bl	80102a0 <VL53L0X_RdWord>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800cb92:	8abb      	ldrh	r3, [r7, #20]
 800cb94:	045b      	lsls	r3, r3, #17
 800cb96:	461a      	mov	r2, r3
 800cb98:	4b0e      	ldr	r3, [pc, #56]	; (800cbd4 <VL53L0X_GetInterruptThresholds+0x68>)
 800cb9a:	4013      	ands	r3, r2
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800cba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d10f      	bne.n	800cbc8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800cba8:	f107 0314 	add.w	r3, r7, #20
 800cbac:	461a      	mov	r2, r3
 800cbae:	210c      	movs	r1, #12
 800cbb0:	68f8      	ldr	r0, [r7, #12]
 800cbb2:	f003 fb75 	bl	80102a0 <VL53L0X_RdWord>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800cbba:	8abb      	ldrh	r3, [r7, #20]
 800cbbc:	045b      	lsls	r3, r3, #17
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	4b04      	ldr	r3, [pc, #16]	; (800cbd4 <VL53L0X_GetInterruptThresholds+0x68>)
 800cbc2:	4013      	ands	r3, r2
		*pThresholdHigh =
 800cbc4:	683a      	ldr	r2, [r7, #0]
 800cbc6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cbc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3718      	adds	r7, #24
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	1ffe0000 	.word	0x1ffe0000

0800cbd8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800cbea:	2201      	movs	r2, #1
 800cbec:	210b      	movs	r1, #11
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f003 faaa 	bl	8010148 <VL53L0X_WrByte>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	210b      	movs	r1, #11
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f003 faa3 	bl	8010148 <VL53L0X_WrByte>
 800cc02:	4603      	mov	r3, r0
 800cc04:	461a      	mov	r2, r3
 800cc06:	7bfb      	ldrb	r3, [r7, #15]
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800cc0c:	f107 030d 	add.w	r3, r7, #13
 800cc10:	461a      	mov	r2, r3
 800cc12:	2113      	movs	r1, #19
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f003 fb19 	bl	801024c <VL53L0X_RdByte>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	7bfb      	ldrb	r3, [r7, #15]
 800cc20:	4313      	orrs	r3, r2
 800cc22:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800cc24:	7bbb      	ldrb	r3, [r7, #14]
 800cc26:	3301      	adds	r3, #1
 800cc28:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800cc2a:	7b7b      	ldrb	r3, [r7, #13]
 800cc2c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d006      	beq.n	800cc42 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800cc34:	7bbb      	ldrb	r3, [r7, #14]
 800cc36:	2b02      	cmp	r3, #2
 800cc38:	d803      	bhi.n	800cc42 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800cc3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d0d3      	beq.n	800cbea <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800cc42:	7bbb      	ldrb	r3, [r7, #14]
 800cc44:	2b02      	cmp	r3, #2
 800cc46:	d901      	bls.n	800cc4c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800cc48:	23f4      	movs	r3, #244	; 0xf4
 800cc4a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800cc4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc62:	2300      	movs	r3, #0
 800cc64:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800cc66:	f107 030e 	add.w	r3, r7, #14
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	2113      	movs	r1, #19
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f003 faec 	bl	801024c <VL53L0X_RdByte>
 800cc74:	4603      	mov	r3, r0
 800cc76:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800cc78:	7bbb      	ldrb	r3, [r7, #14]
 800cc7a:	f003 0207 	and.w	r2, r3, #7
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800cc82:	7bbb      	ldrb	r3, [r7, #14]
 800cc84:	f003 0318 	and.w	r3, r3, #24
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d001      	beq.n	800cc90 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800cc8c:	23fa      	movs	r3, #250	; 0xfa
 800cc8e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800cc90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3710      	adds	r7, #16
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b086      	sub	sp, #24
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	68b9      	ldr	r1, [r7, #8]
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f000 fa33 	bl	800d11c <VL53L0X_perform_ref_spad_management>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800ccba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3718      	adds	r7, #24
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b084      	sub	sp, #16
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
 800ccce:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800ccd0:	2101      	movs	r1, #1
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f7fe fed2 	bl	800ba7c <VL53L0X_SetDeviceMode>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800ccdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d002      	beq.n	800ccea <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800cce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cce8:	e019      	b.n	800cd1e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7ff fbc4 	bl	800c478 <VL53L0X_StartMeasurement>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800ccf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d002      	beq.n	800cd02 <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800ccfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd00:	e00d      	b.n	800cd1e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800cd02:	6839      	ldr	r1, [r7, #0]
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7ff fcb9 	bl	800c67c <VL53L0X_GetRangingMeasurementData>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800cd0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d002      	beq.n	800cd1c <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800cd16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd1a:	e000      	b.n	800cd1e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b084      	sub	sp, #16
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
 800cd2e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd30:	2300      	movs	r3, #0
 800cd32:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800cd34:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800cd38:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800cd3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd3e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800cd40:	f107 0308 	add.w	r3, r7, #8
 800cd44:	461a      	mov	r2, r3
 800cd46:	2128      	movs	r1, #40	; 0x28
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f003 faa9 	bl	80102a0 <VL53L0X_RdWord>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800cd52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d11e      	bne.n	800cd98 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800cd5a:	893b      	ldrh	r3, [r7, #8]
 800cd5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800cd64:	893b      	ldrh	r3, [r7, #8]
 800cd66:	461a      	mov	r2, r3
 800cd68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	dd0b      	ble.n	800cd88 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800cd70:	893a      	ldrh	r2, [r7, #8]
 800cd72:	897b      	ldrh	r3, [r7, #10]
 800cd74:	1ad3      	subs	r3, r2, r3
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	b21b      	sxth	r3, r3
 800cd7a:	461a      	mov	r2, r3
					* 250;
 800cd7c:	23fa      	movs	r3, #250	; 0xfa
 800cd7e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	601a      	str	r2, [r3, #0]
 800cd86:	e007      	b.n	800cd98 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800cd88:	893b      	ldrh	r3, [r7, #8]
 800cd8a:	b21b      	sxth	r3, r3
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	23fa      	movs	r3, #250	; 0xfa
 800cd90:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800cd98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b08b      	sub	sp, #44	; 0x2c
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	607a      	str	r2, [r7, #4]
 800cdb0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800cdb2:	2308      	movs	r3, #8
 800cdb4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	f04f 32ff 	mov.w	r2, #4294967295
 800cdc0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	69bb      	ldr	r3, [r7, #24]
 800cdc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdca:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	69ba      	ldr	r2, [r7, #24]
 800cdd0:	fbb3 f2f2 	udiv	r2, r3, r2
 800cdd4:	69b9      	ldr	r1, [r7, #24]
 800cdd6:	fb01 f202 	mul.w	r2, r1, r2
 800cdda:	1a9b      	subs	r3, r3, r2
 800cddc:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	627b      	str	r3, [r7, #36]	; 0x24
 800cde2:	e030      	b.n	800ce46 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800cde4:	2300      	movs	r3, #0
 800cde6:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdec:	4413      	add	r3, r2
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800cdf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d11e      	bne.n	800ce38 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800cdfa:	7ffa      	ldrb	r2, [r7, #31]
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	fa42 f303 	asr.w	r3, r2, r3
 800ce02:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800ce08:	e016      	b.n	800ce38 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800ce0a:	7ffb      	ldrb	r3, [r7, #31]
 800ce0c:	f003 0301 	and.w	r3, r3, #1
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d00b      	beq.n	800ce2c <get_next_good_spad+0x88>
				success = 1;
 800ce14:	2301      	movs	r3, #1
 800ce16:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1a:	69ba      	ldr	r2, [r7, #24]
 800ce1c:	fb03 f202 	mul.w	r2, r3, r2
 800ce20:	6a3b      	ldr	r3, [r7, #32]
 800ce22:	4413      	add	r3, r2
 800ce24:	461a      	mov	r2, r3
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	601a      	str	r2, [r3, #0]
				break;
 800ce2a:	e009      	b.n	800ce40 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800ce2c:	7ffb      	ldrb	r3, [r7, #31]
 800ce2e:	085b      	lsrs	r3, r3, #1
 800ce30:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800ce32:	6a3b      	ldr	r3, [r7, #32]
 800ce34:	3301      	adds	r3, #1
 800ce36:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800ce38:	6a3a      	ldr	r2, [r7, #32]
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d3e4      	bcc.n	800ce0a <get_next_good_spad+0x66>
				coarseIndex++) {
 800ce40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce42:	3301      	adds	r3, #1
 800ce44:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800ce46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d202      	bcs.n	800ce54 <get_next_good_spad+0xb0>
 800ce4e:	7fbb      	ldrb	r3, [r7, #30]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d0c7      	beq.n	800cde4 <get_next_good_spad+0x40>
		}
	}
}
 800ce54:	bf00      	nop
 800ce56:	372c      	adds	r7, #44	; 0x2c
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b085      	sub	sp, #20
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800ce68:	2301      	movs	r3, #1
 800ce6a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	099b      	lsrs	r3, r3, #6
 800ce70:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800ce72:	4a07      	ldr	r2, [pc, #28]	; (800ce90 <is_aperture+0x30>)
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d101      	bne.n	800ce82 <is_aperture+0x22>
		isAperture = 0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800ce82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3714      	adds	r7, #20
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr
 800ce90:	200002b8 	.word	0x200002b8

0800ce94 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b089      	sub	sp, #36	; 0x24
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cea0:	2300      	movs	r3, #0
 800cea2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800cea4:	2308      	movs	r3, #8
 800cea6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceb0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	69ba      	ldr	r2, [r7, #24]
 800ceb6:	fbb3 f2f2 	udiv	r2, r3, r2
 800ceba:	69b9      	ldr	r1, [r7, #24]
 800cebc:	fb01 f202 	mul.w	r2, r1, r2
 800cec0:	1a9b      	subs	r3, r3, r2
 800cec2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800cec4:	697a      	ldr	r2, [r7, #20]
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d302      	bcc.n	800ced2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cecc:	23ce      	movs	r3, #206	; 0xce
 800cece:	77fb      	strb	r3, [r7, #31]
 800ced0:	e010      	b.n	800cef4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	4413      	add	r3, r2
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	b25a      	sxtb	r2, r3
 800cedc:	2101      	movs	r1, #1
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	fa01 f303 	lsl.w	r3, r1, r3
 800cee4:	b25b      	sxtb	r3, r3
 800cee6:	4313      	orrs	r3, r2
 800cee8:	b259      	sxtb	r1, r3
 800ceea:	68fa      	ldr	r2, [r7, #12]
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	4413      	add	r3, r2
 800cef0:	b2ca      	uxtb	r2, r1
 800cef2:	701a      	strb	r2, [r3, #0]

	return status;
 800cef4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3724      	adds	r7, #36	; 0x24
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr

0800cf04 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b084      	sub	sp, #16
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800cf0e:	2306      	movs	r3, #6
 800cf10:	683a      	ldr	r2, [r7, #0]
 800cf12:	21b0      	movs	r1, #176	; 0xb0
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f003 f8bb 	bl	8010090 <VL53L0X_WriteMulti>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800cf1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3710      	adds	r7, #16
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b084      	sub	sp, #16
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
 800cf32:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800cf34:	2306      	movs	r3, #6
 800cf36:	683a      	ldr	r2, [r7, #0]
 800cf38:	21b0      	movs	r1, #176	; 0xb0
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f003 f8d8 	bl	80100f0 <VL53L0X_ReadMulti>
 800cf40:	4603      	mov	r3, r0
 800cf42:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800cf44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3710      	adds	r7, #16
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b08c      	sub	sp, #48	; 0x30
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	607a      	str	r2, [r7, #4]
 800cf5a:	603b      	str	r3, [r7, #0]
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cf60:	2300      	movs	r3, #0
 800cf62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800cf66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf68:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800cf6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf6c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800cf6e:	2300      	movs	r3, #0
 800cf70:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf72:	e02b      	b.n	800cfcc <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800cf74:	f107 031c 	add.w	r3, r7, #28
 800cf78:	6a3a      	ldr	r2, [r7, #32]
 800cf7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7ff ff11 	bl	800cda4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800cf82:	69fb      	ldr	r3, [r7, #28]
 800cf84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf88:	d103      	bne.n	800cf92 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cf8a:	23ce      	movs	r3, #206	; 0xce
 800cf8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800cf90:	e020      	b.n	800cfd4 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	461a      	mov	r2, r3
 800cf96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf98:	4413      	add	r3, r2
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7ff ff60 	bl	800ce60 <is_aperture>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	7afb      	ldrb	r3, [r7, #11]
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d003      	beq.n	800cfb2 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cfaa:	23ce      	movs	r3, #206	; 0xce
 800cfac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800cfb0:	e010      	b.n	800cfd4 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800cfb6:	6a3a      	ldr	r2, [r7, #32]
 800cfb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cfba:	6838      	ldr	r0, [r7, #0]
 800cfbc:	f7ff ff6a 	bl	800ce94 <enable_spad_bit>
		currentSpad++;
 800cfc0:	6a3b      	ldr	r3, [r7, #32]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800cfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc8:	3301      	adds	r3, #1
 800cfca:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d3cf      	bcc.n	800cf74 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800cfd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfd6:	6a3a      	ldr	r2, [r7, #32]
 800cfd8:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800cfda:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d106      	bne.n	800cff0 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800cfe2:	6839      	ldr	r1, [r7, #0]
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f7ff ff8d 	bl	800cf04 <set_ref_spad_map>
 800cfea:	4603      	mov	r3, r0
 800cfec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800cff0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d121      	bne.n	800d03c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800cff8:	f107 0314 	add.w	r3, r7, #20
 800cffc:	4619      	mov	r1, r3
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f7ff ff93 	bl	800cf2a <get_ref_spad_map>
 800d004:	4603      	mov	r3, r0
 800d006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800d00a:	2300      	movs	r3, #0
 800d00c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800d00e:	e011      	b.n	800d034 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800d010:	683a      	ldr	r2, [r7, #0]
 800d012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d014:	4413      	add	r3, r2
 800d016:	781a      	ldrb	r2, [r3, #0]
 800d018:	f107 0114 	add.w	r1, r7, #20
 800d01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01e:	440b      	add	r3, r1
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	429a      	cmp	r2, r3
 800d024:	d003      	beq.n	800d02e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d026:	23ce      	movs	r3, #206	; 0xce
 800d028:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800d02c:	e006      	b.n	800d03c <enable_ref_spads+0xec>
			}
			i++;
 800d02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d030:	3301      	adds	r3, #1
 800d032:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800d034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d038:	429a      	cmp	r2, r3
 800d03a:	d3e9      	bcc.n	800d010 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800d03c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d040:	4618      	mov	r0, r3
 800d042:	3730      	adds	r7, #48	; 0x30
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b08a      	sub	sp, #40	; 0x28
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800d052:	2300      	movs	r3, #0
 800d054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800d058:	2300      	movs	r3, #0
 800d05a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d064:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800d068:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d107      	bne.n	800d080 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800d070:	22c0      	movs	r2, #192	; 0xc0
 800d072:	2101      	movs	r1, #1
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f003 f867 	bl	8010148 <VL53L0X_WrByte>
 800d07a:	4603      	mov	r3, r0
 800d07c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800d080:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d084:	2b00      	cmp	r3, #0
 800d086:	d108      	bne.n	800d09a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800d088:	f107 0308 	add.w	r3, r7, #8
 800d08c:	4619      	mov	r1, r3
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f7ff fc18 	bl	800c8c4 <VL53L0X_PerformSingleRangingMeasurement>
 800d094:	4603      	mov	r3, r0
 800d096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800d09a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d107      	bne.n	800d0b2 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	21ff      	movs	r1, #255	; 0xff
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f003 f84e 	bl	8010148 <VL53L0X_WrByte>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800d0b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d107      	bne.n	800d0ca <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800d0ba:	683a      	ldr	r2, [r7, #0]
 800d0bc:	21b6      	movs	r1, #182	; 0xb6
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f003 f8ee 	bl	80102a0 <VL53L0X_RdWord>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800d0ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d107      	bne.n	800d0e2 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	21ff      	movs	r1, #255	; 0xff
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f003 f836 	bl	8010148 <VL53L0X_WrByte>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800d0e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d112      	bne.n	800d110 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d0ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	2101      	movs	r1, #1
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f003 f828 	bl	8010148 <VL53L0X_WrByte>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800d0fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d102:	2b00      	cmp	r3, #0
 800d104:	d104      	bne.n	800d110 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d10c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800d110:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d114:	4618      	mov	r0, r3
 800d116:	3728      	adds	r7, #40	; 0x28
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800d11c:	b590      	push	{r4, r7, lr}
 800d11e:	b09d      	sub	sp, #116	; 0x74
 800d120:	af06      	add	r7, sp, #24
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d128:	2300      	movs	r3, #0
 800d12a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800d12e:	23b4      	movs	r3, #180	; 0xb4
 800d130:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800d134:	2303      	movs	r3, #3
 800d136:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800d138:	232c      	movs	r3, #44	; 0x2c
 800d13a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800d13c:	2300      	movs	r3, #0
 800d13e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800d140:	2300      	movs	r3, #0
 800d142:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800d144:	2300      	movs	r3, #0
 800d146:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800d148:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800d14c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800d14e:	2300      	movs	r3, #0
 800d150:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800d152:	2300      	movs	r3, #0
 800d154:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800d156:	2306      	movs	r3, #6
 800d158:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800d15a:	2300      	movs	r3, #0
 800d15c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800d15e:	2300      	movs	r3, #0
 800d160:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800d162:	2300      	movs	r3, #0
 800d164:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800d168:	2300      	movs	r3, #0
 800d16a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800d16c:	2300      	movs	r3, #0
 800d16e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800d170:	2300      	movs	r3, #0
 800d172:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800d174:	2300      	movs	r3, #0
 800d176:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800d180:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800d182:	2300      	movs	r3, #0
 800d184:	64bb      	str	r3, [r7, #72]	; 0x48
 800d186:	e009      	b.n	800d19c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d188:	68fa      	ldr	r2, [r7, #12]
 800d18a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d18c:	4413      	add	r3, r2
 800d18e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d192:	2200      	movs	r2, #0
 800d194:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800d196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d198:	3301      	adds	r3, #1
 800d19a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d19c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d3f1      	bcc.n	800d188 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	21ff      	movs	r1, #255	; 0xff
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	f002 ffcd 	bl	8010148 <VL53L0X_WrByte>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800d1b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d107      	bne.n	800d1cc <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800d1bc:	2200      	movs	r2, #0
 800d1be:	214f      	movs	r1, #79	; 0x4f
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	f002 ffc1 	bl	8010148 <VL53L0X_WrByte>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800d1cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d107      	bne.n	800d1e4 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800d1d4:	222c      	movs	r2, #44	; 0x2c
 800d1d6:	214e      	movs	r1, #78	; 0x4e
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f002 ffb5 	bl	8010148 <VL53L0X_WrByte>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800d1e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d107      	bne.n	800d1fc <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	21ff      	movs	r1, #255	; 0xff
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	f002 ffa9 	bl	8010148 <VL53L0X_WrByte>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800d1fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d200:	2b00      	cmp	r3, #0
 800d202:	d109      	bne.n	800d218 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800d204:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d208:	461a      	mov	r2, r3
 800d20a:	21b6      	movs	r1, #182	; 0xb6
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	f002 ff9b 	bl	8010148 <VL53L0X_WrByte>
 800d212:	4603      	mov	r3, r0
 800d214:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800d218:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d107      	bne.n	800d230 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800d220:	2200      	movs	r2, #0
 800d222:	2180      	movs	r1, #128	; 0x80
 800d224:	68f8      	ldr	r0, [r7, #12]
 800d226:	f002 ff8f 	bl	8010148 <VL53L0X_WrByte>
 800d22a:	4603      	mov	r3, r0
 800d22c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800d230:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d234:	2b00      	cmp	r3, #0
 800d236:	d10a      	bne.n	800d24e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800d238:	f107 0210 	add.w	r2, r7, #16
 800d23c:	f107 0111 	add.w	r1, r7, #17
 800d240:	2300      	movs	r3, #0
 800d242:	68f8      	ldr	r0, [r7, #12]
 800d244:	f000 fbbb 	bl	800d9be <VL53L0X_perform_ref_calibration>
 800d248:	4603      	mov	r3, r0
 800d24a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800d24e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d252:	2b00      	cmp	r3, #0
 800d254:	d121      	bne.n	800d29a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800d256:	2300      	movs	r3, #0
 800d258:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800d25a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d25c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800d25e:	2300      	movs	r3, #0
 800d260:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800d262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d264:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800d272:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d276:	f107 0218 	add.w	r2, r7, #24
 800d27a:	9204      	str	r2, [sp, #16]
 800d27c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d27e:	9203      	str	r2, [sp, #12]
 800d280:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d282:	9202      	str	r2, [sp, #8]
 800d284:	9301      	str	r3, [sp, #4]
 800d286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d288:	9300      	str	r3, [sp, #0]
 800d28a:	4623      	mov	r3, r4
 800d28c:	4602      	mov	r2, r0
 800d28e:	68f8      	ldr	r0, [r7, #12]
 800d290:	f7ff fe5e 	bl	800cf50 <enable_ref_spads>
 800d294:	4603      	mov	r3, r0
 800d296:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d29a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d174      	bne.n	800d38c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800d2a6:	f107 0312 	add.w	r3, r7, #18
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	68f8      	ldr	r0, [r7, #12]
 800d2ae:	f7ff fecb 	bl	800d048 <perform_ref_signal_measurement>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800d2b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d161      	bne.n	800d384 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800d2c0:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800d2c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d25d      	bcs.n	800d384 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800d2cc:	e009      	b.n	800d2e2 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d2ce:	68fa      	ldr	r2, [r7, #12]
 800d2d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2d2:	4413      	add	r3, r2
 800d2d4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d2d8:	2200      	movs	r2, #0
 800d2da:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800d2dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2de:	3301      	adds	r3, #1
 800d2e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d2e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d3f1      	bcc.n	800d2ce <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800d2ea:	e002      	b.n	800d2f2 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800d2ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800d2f2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800d2f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2f8:	4413      	add	r3, r2
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7ff fdb0 	bl	800ce60 <is_aperture>
 800d300:	4603      	mov	r3, r0
 800d302:	2b00      	cmp	r3, #0
 800d304:	d103      	bne.n	800d30e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800d306:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d3ee      	bcc.n	800d2ec <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800d30e:	2301      	movs	r3, #1
 800d310:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800d312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d314:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800d322:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d326:	f107 0218 	add.w	r2, r7, #24
 800d32a:	9204      	str	r2, [sp, #16]
 800d32c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d32e:	9203      	str	r2, [sp, #12]
 800d330:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d332:	9202      	str	r2, [sp, #8]
 800d334:	9301      	str	r3, [sp, #4]
 800d336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d338:	9300      	str	r3, [sp, #0]
 800d33a:	4623      	mov	r3, r4
 800d33c:	4602      	mov	r2, r0
 800d33e:	68f8      	ldr	r0, [r7, #12]
 800d340:	f7ff fe06 	bl	800cf50 <enable_ref_spads>
 800d344:	4603      	mov	r3, r0
 800d346:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800d34a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d11b      	bne.n	800d38a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800d356:	f107 0312 	add.w	r3, r7, #18
 800d35a:	4619      	mov	r1, r3
 800d35c:	68f8      	ldr	r0, [r7, #12]
 800d35e:	f7ff fe73 	bl	800d048 <perform_ref_signal_measurement>
 800d362:	4603      	mov	r3, r0
 800d364:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800d368:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d10c      	bne.n	800d38a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800d370:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800d372:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d374:	429a      	cmp	r2, r3
 800d376:	d208      	bcs.n	800d38a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800d378:	2301      	movs	r3, #1
 800d37a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800d37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d380:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800d382:	e002      	b.n	800d38a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800d384:	2300      	movs	r3, #0
 800d386:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d388:	e000      	b.n	800d38c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800d38a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800d38c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d390:	2b00      	cmp	r3, #0
 800d392:	f040 80af 	bne.w	800d4f4 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800d396:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800d398:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d39a:	429a      	cmp	r2, r3
 800d39c:	f240 80aa 	bls.w	800d4f4 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800d3a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800d3a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3a8:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800d3b0:	f107 031c 	add.w	r3, r7, #28
 800d3b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f003 f820 	bl	80103fc <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800d3bc:	8a7b      	ldrh	r3, [r7, #18]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d3c2:	1ad3      	subs	r3, r2, r3
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	bfb8      	it	lt
 800d3c8:	425b      	neglt	r3, r3
 800d3ca:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800d3d2:	e086      	b.n	800d4e2 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800d3da:	f107 0314 	add.w	r3, r7, #20
 800d3de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3e2:	f7ff fcdf 	bl	800cda4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ec:	d103      	bne.n	800d3f6 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d3ee:	23ce      	movs	r3, #206	; 0xce
 800d3f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800d3f4:	e07e      	b.n	800d4f4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800d3f6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d3fa:	697a      	ldr	r2, [r7, #20]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7ff fd2e 	bl	800ce60 <is_aperture>
 800d404:	4603      	mov	r3, r0
 800d406:	461a      	mov	r2, r3
 800d408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d003      	beq.n	800d416 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800d40e:	2301      	movs	r3, #1
 800d410:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800d414:	e06e      	b.n	800d4f4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800d416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d418:	3301      	adds	r3, #1
 800d41a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800d426:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7ff fd32 	bl	800ce94 <enable_spad_bit>
 800d430:	4603      	mov	r3, r0
 800d432:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800d436:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d10c      	bne.n	800d458 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800d43e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d440:	3301      	adds	r3, #1
 800d442:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800d44a:	4619      	mov	r1, r3
 800d44c:	68f8      	ldr	r0, [r7, #12]
 800d44e:	f7ff fd59 	bl	800cf04 <set_ref_spad_map>
 800d452:	4603      	mov	r3, r0
 800d454:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800d458:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d146      	bne.n	800d4ee <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800d460:	f107 0312 	add.w	r3, r7, #18
 800d464:	4619      	mov	r1, r3
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f7ff fdee 	bl	800d048 <perform_ref_signal_measurement>
 800d46c:	4603      	mov	r3, r0
 800d46e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800d472:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d476:	2b00      	cmp	r3, #0
 800d478:	d13b      	bne.n	800d4f2 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800d47a:	8a7b      	ldrh	r3, [r7, #18]
 800d47c:	461a      	mov	r2, r3
 800d47e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d480:	1ad3      	subs	r3, r2, r3
 800d482:	2b00      	cmp	r3, #0
 800d484:	bfb8      	it	lt
 800d486:	425b      	neglt	r3, r3
 800d488:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800d48a:	8a7b      	ldrh	r3, [r7, #18]
 800d48c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d48e:	429a      	cmp	r2, r3
 800d490:	d21c      	bcs.n	800d4cc <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800d492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d496:	429a      	cmp	r2, r3
 800d498:	d914      	bls.n	800d4c4 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800d49a:	f107 031c 	add.w	r3, r7, #28
 800d49e:	4619      	mov	r1, r3
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f7ff fd2f 	bl	800cf04 <set_ref_spad_map>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800d4b2:	f107 011c 	add.w	r1, r7, #28
 800d4b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f002 ff9f 	bl	80103fc <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800d4be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ca:	e00a      	b.n	800d4e2 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800d4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ce:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800d4d6:	f107 031c 	add.w	r3, r7, #28
 800d4da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f002 ff8d 	bl	80103fc <memcpy>
		while (!complete) {
 800d4e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	f43f af74 	beq.w	800d3d4 <VL53L0X_perform_ref_spad_management+0x2b8>
 800d4ec:	e002      	b.n	800d4f4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800d4ee:	bf00      	nop
 800d4f0:	e000      	b.n	800d4f4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800d4f2:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d4f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d115      	bne.n	800d528 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d500:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800d508:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2201      	movs	r2, #1
 800d50e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	b2da      	uxtb	r2, r3
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	781a      	ldrb	r2, [r3, #0]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800d528:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	375c      	adds	r7, #92	; 0x5c
 800d530:	46bd      	mov	sp, r7
 800d532:	bd90      	pop	{r4, r7, pc}

0800d534 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800d534:	b590      	push	{r4, r7, lr}
 800d536:	b093      	sub	sp, #76	; 0x4c
 800d538:	af06      	add	r7, sp, #24
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	4613      	mov	r3, r2
 800d540:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d542:	2300      	movs	r3, #0
 800d544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800d548:	2300      	movs	r3, #0
 800d54a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800d54c:	23b4      	movs	r3, #180	; 0xb4
 800d54e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800d552:	2306      	movs	r3, #6
 800d554:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800d556:	232c      	movs	r3, #44	; 0x2c
 800d558:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d55a:	2201      	movs	r2, #1
 800d55c:	21ff      	movs	r1, #255	; 0xff
 800d55e:	68f8      	ldr	r0, [r7, #12]
 800d560:	f002 fdf2 	bl	8010148 <VL53L0X_WrByte>
 800d564:	4603      	mov	r3, r0
 800d566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800d56a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d107      	bne.n	800d582 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800d572:	2200      	movs	r2, #0
 800d574:	214f      	movs	r1, #79	; 0x4f
 800d576:	68f8      	ldr	r0, [r7, #12]
 800d578:	f002 fde6 	bl	8010148 <VL53L0X_WrByte>
 800d57c:	4603      	mov	r3, r0
 800d57e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800d582:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d586:	2b00      	cmp	r3, #0
 800d588:	d107      	bne.n	800d59a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800d58a:	222c      	movs	r2, #44	; 0x2c
 800d58c:	214e      	movs	r1, #78	; 0x4e
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	f002 fdda 	bl	8010148 <VL53L0X_WrByte>
 800d594:	4603      	mov	r3, r0
 800d596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800d59a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d107      	bne.n	800d5b2 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	21ff      	movs	r1, #255	; 0xff
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f002 fdce 	bl	8010148 <VL53L0X_WrByte>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800d5b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d109      	bne.n	800d5ce <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800d5ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d5be:	461a      	mov	r2, r3
 800d5c0:	21b6      	movs	r1, #182	; 0xb6
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	f002 fdc0 	bl	8010148 <VL53L0X_WrByte>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	627b      	str	r3, [r7, #36]	; 0x24
 800d5d2:	e009      	b.n	800d5e8 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d5d4:	68fa      	ldr	r2, [r7, #12]
 800d5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d8:	4413      	add	r3, r2
 800d5da:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d5de:	2200      	movs	r2, #0
 800d5e0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800d5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	627b      	str	r3, [r7, #36]	; 0x24
 800d5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d3f1      	bcc.n	800d5d4 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800d5f0:	79fb      	ldrb	r3, [r7, #7]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d011      	beq.n	800d61a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d5f6:	e002      	b.n	800d5fe <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800d5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d5fe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800d602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d604:	4413      	add	r3, r2
 800d606:	4618      	mov	r0, r3
 800d608:	f7ff fc2a 	bl	800ce60 <is_aperture>
 800d60c:	4603      	mov	r3, r0
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d103      	bne.n	800d61a <VL53L0X_set_reference_spads+0xe6>
 800d612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d614:	69bb      	ldr	r3, [r7, #24]
 800d616:	429a      	cmp	r2, r3
 800d618:	d3ee      	bcc.n	800d5f8 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800d626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d62a:	79f9      	ldrb	r1, [r7, #7]
 800d62c:	f107 0214 	add.w	r2, r7, #20
 800d630:	9204      	str	r2, [sp, #16]
 800d632:	68ba      	ldr	r2, [r7, #8]
 800d634:	9203      	str	r2, [sp, #12]
 800d636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d638:	9202      	str	r2, [sp, #8]
 800d63a:	9301      	str	r3, [sp, #4]
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	9300      	str	r3, [sp, #0]
 800d640:	4623      	mov	r3, r4
 800d642:	4602      	mov	r2, r0
 800d644:	68f8      	ldr	r0, [r7, #12]
 800d646:	f7ff fc83 	bl	800cf50 <enable_ref_spads>
 800d64a:	4603      	mov	r3, r0
 800d64c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800d650:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d654:	2b00      	cmp	r3, #0
 800d656:	d10c      	bne.n	800d672 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2201      	movs	r2, #1
 800d65c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	b2da      	uxtb	r2, r3
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	79fa      	ldrb	r2, [r7, #7]
 800d66e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800d672:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d676:	4618      	mov	r0, r3
 800d678:	3734      	adds	r7, #52	; 0x34
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd90      	pop	{r4, r7, pc}

0800d67e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b084      	sub	sp, #16
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
 800d686:	460b      	mov	r3, r1
 800d688:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d68a:	2300      	movs	r3, #0
 800d68c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d68e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d10a      	bne.n	800d6ac <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800d696:	78fb      	ldrb	r3, [r7, #3]
 800d698:	f043 0301 	orr.w	r3, r3, #1
 800d69c:	b2db      	uxtb	r3, r3
 800d69e:	461a      	mov	r2, r3
 800d6a0:	2100      	movs	r1, #0
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f002 fd50 	bl	8010148 <VL53L0X_WrByte>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800d6ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d104      	bne.n	800d6be <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 f9bf 	bl	800da38 <VL53L0X_measurement_poll_for_completion>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d6be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d105      	bne.n	800d6d2 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f7ff fa85 	bl	800cbd8 <VL53L0X_ClearInterruptMask>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d6d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d106      	bne.n	800d6e8 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800d6da:	2200      	movs	r2, #0
 800d6dc:	2100      	movs	r1, #0
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f002 fd32 	bl	8010148 <VL53L0X_WrByte>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	73fb      	strb	r3, [r7, #15]

	return Status;
 800d6e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	4608      	mov	r0, r1
 800d6fe:	4611      	mov	r1, r2
 800d700:	461a      	mov	r2, r3
 800d702:	4603      	mov	r3, r0
 800d704:	70fb      	strb	r3, [r7, #3]
 800d706:	460b      	mov	r3, r1
 800d708:	70bb      	strb	r3, [r7, #2]
 800d70a:	4613      	mov	r3, r2
 800d70c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d70e:	2300      	movs	r3, #0
 800d710:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d716:	2201      	movs	r2, #1
 800d718:	21ff      	movs	r1, #255	; 0xff
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f002 fd14 	bl	8010148 <VL53L0X_WrByte>
 800d720:	4603      	mov	r3, r0
 800d722:	461a      	mov	r2, r3
 800d724:	7bfb      	ldrb	r3, [r7, #15]
 800d726:	4313      	orrs	r3, r2
 800d728:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d72a:	2200      	movs	r2, #0
 800d72c:	2100      	movs	r1, #0
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f002 fd0a 	bl	8010148 <VL53L0X_WrByte>
 800d734:	4603      	mov	r3, r0
 800d736:	461a      	mov	r2, r3
 800d738:	7bfb      	ldrb	r3, [r7, #15]
 800d73a:	4313      	orrs	r3, r2
 800d73c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d73e:	2200      	movs	r2, #0
 800d740:	21ff      	movs	r1, #255	; 0xff
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f002 fd00 	bl	8010148 <VL53L0X_WrByte>
 800d748:	4603      	mov	r3, r0
 800d74a:	461a      	mov	r2, r3
 800d74c:	7bfb      	ldrb	r3, [r7, #15]
 800d74e:	4313      	orrs	r3, r2
 800d750:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800d752:	78fb      	ldrb	r3, [r7, #3]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d01e      	beq.n	800d796 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800d758:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d009      	beq.n	800d774 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800d760:	69ba      	ldr	r2, [r7, #24]
 800d762:	21cb      	movs	r1, #203	; 0xcb
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f002 fd71 	bl	801024c <VL53L0X_RdByte>
 800d76a:	4603      	mov	r3, r0
 800d76c:	461a      	mov	r2, r3
 800d76e:	7bfb      	ldrb	r3, [r7, #15]
 800d770:	4313      	orrs	r3, r2
 800d772:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800d774:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d02a      	beq.n	800d7d2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800d77c:	f107 030e 	add.w	r3, r7, #14
 800d780:	461a      	mov	r2, r3
 800d782:	21ee      	movs	r1, #238	; 0xee
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f002 fd61 	bl	801024c <VL53L0X_RdByte>
 800d78a:	4603      	mov	r3, r0
 800d78c:	461a      	mov	r2, r3
 800d78e:	7bfb      	ldrb	r3, [r7, #15]
 800d790:	4313      	orrs	r3, r2
 800d792:	73fb      	strb	r3, [r7, #15]
 800d794:	e01d      	b.n	800d7d2 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800d796:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00a      	beq.n	800d7b4 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800d79e:	78bb      	ldrb	r3, [r7, #2]
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	21cb      	movs	r1, #203	; 0xcb
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f002 fccf 	bl	8010148 <VL53L0X_WrByte>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	7bfb      	ldrb	r3, [r7, #15]
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800d7b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00a      	beq.n	800d7d2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800d7bc:	787b      	ldrb	r3, [r7, #1]
 800d7be:	2280      	movs	r2, #128	; 0x80
 800d7c0:	21ee      	movs	r1, #238	; 0xee
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f002 fd0e 	bl	80101e4 <VL53L0X_UpdateByte>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	7bfb      	ldrb	r3, [r7, #15]
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	21ff      	movs	r1, #255	; 0xff
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f002 fcb6 	bl	8010148 <VL53L0X_WrByte>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	461a      	mov	r2, r3
 800d7e0:	7bfb      	ldrb	r3, [r7, #15]
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800d7e6:	2201      	movs	r2, #1
 800d7e8:	2100      	movs	r1, #0
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f002 fcac 	bl	8010148 <VL53L0X_WrByte>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	7bfb      	ldrb	r3, [r7, #15]
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	21ff      	movs	r1, #255	; 0xff
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f002 fca2 	bl	8010148 <VL53L0X_WrByte>
 800d804:	4603      	mov	r3, r0
 800d806:	461a      	mov	r2, r3
 800d808:	7bfb      	ldrb	r3, [r7, #15]
 800d80a:	4313      	orrs	r3, r2
 800d80c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800d80e:	7bbb      	ldrb	r3, [r7, #14]
 800d810:	f023 0310 	bic.w	r3, r3, #16
 800d814:	b2da      	uxtb	r2, r3
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	701a      	strb	r2, [r3, #0]

	return Status;
 800d81a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d826:	b580      	push	{r7, lr}
 800d828:	b08a      	sub	sp, #40	; 0x28
 800d82a:	af04      	add	r7, sp, #16
 800d82c:	60f8      	str	r0, [r7, #12]
 800d82e:	60b9      	str	r1, [r7, #8]
 800d830:	4611      	mov	r1, r2
 800d832:	461a      	mov	r2, r3
 800d834:	460b      	mov	r3, r1
 800d836:	71fb      	strb	r3, [r7, #7]
 800d838:	4613      	mov	r3, r2
 800d83a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d83c:	2300      	movs	r3, #0
 800d83e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d840:	2300      	movs	r3, #0
 800d842:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d844:	2300      	movs	r3, #0
 800d846:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d848:	2300      	movs	r3, #0
 800d84a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800d84c:	2300      	movs	r3, #0
 800d84e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d850:	79bb      	ldrb	r3, [r7, #6]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d003      	beq.n	800d85e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d85c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800d85e:	2201      	movs	r2, #1
 800d860:	2101      	movs	r1, #1
 800d862:	68f8      	ldr	r0, [r7, #12]
 800d864:	f002 fc70 	bl	8010148 <VL53L0X_WrByte>
 800d868:	4603      	mov	r3, r0
 800d86a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800d86c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d105      	bne.n	800d880 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800d874:	2140      	movs	r1, #64	; 0x40
 800d876:	68f8      	ldr	r0, [r7, #12]
 800d878:	f7ff ff01 	bl	800d67e <VL53L0X_perform_single_ref_calibration>
 800d87c:	4603      	mov	r3, r0
 800d87e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d880:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d115      	bne.n	800d8b4 <VL53L0X_perform_vhv_calibration+0x8e>
 800d888:	79fb      	ldrb	r3, [r7, #7]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d112      	bne.n	800d8b4 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d88e:	7d39      	ldrb	r1, [r7, #20]
 800d890:	7d7a      	ldrb	r2, [r7, #21]
 800d892:	2300      	movs	r3, #0
 800d894:	9303      	str	r3, [sp, #12]
 800d896:	2301      	movs	r3, #1
 800d898:	9302      	str	r3, [sp, #8]
 800d89a:	f107 0313 	add.w	r3, r7, #19
 800d89e:	9301      	str	r3, [sp, #4]
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	9300      	str	r3, [sp, #0]
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	2101      	movs	r1, #1
 800d8a8:	68f8      	ldr	r0, [r7, #12]
 800d8aa:	f7ff ff23 	bl	800d6f4 <VL53L0X_ref_calibration_io>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	75fb      	strb	r3, [r7, #23]
 800d8b2:	e002      	b.n	800d8ba <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d8ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d112      	bne.n	800d8e8 <VL53L0X_perform_vhv_calibration+0xc2>
 800d8c2:	79bb      	ldrb	r3, [r7, #6]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d00f      	beq.n	800d8e8 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d8c8:	7dbb      	ldrb	r3, [r7, #22]
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	2101      	movs	r1, #1
 800d8ce:	68f8      	ldr	r0, [r7, #12]
 800d8d0:	f002 fc3a 	bl	8010148 <VL53L0X_WrByte>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d8d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d103      	bne.n	800d8e8 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	7dba      	ldrb	r2, [r7, #22]
 800d8e4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d8e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3718      	adds	r7, #24
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b08a      	sub	sp, #40	; 0x28
 800d8f8:	af04      	add	r7, sp, #16
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	4611      	mov	r1, r2
 800d900:	461a      	mov	r2, r3
 800d902:	460b      	mov	r3, r1
 800d904:	71fb      	strb	r3, [r7, #7]
 800d906:	4613      	mov	r3, r2
 800d908:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d90a:	2300      	movs	r3, #0
 800d90c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d90e:	2300      	movs	r3, #0
 800d910:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d912:	2300      	movs	r3, #0
 800d914:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d916:	2300      	movs	r3, #0
 800d918:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d91a:	79bb      	ldrb	r3, [r7, #6]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d003      	beq.n	800d928 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d926:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800d928:	2202      	movs	r2, #2
 800d92a:	2101      	movs	r1, #1
 800d92c:	68f8      	ldr	r0, [r7, #12]
 800d92e:	f002 fc0b 	bl	8010148 <VL53L0X_WrByte>
 800d932:	4603      	mov	r3, r0
 800d934:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800d936:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d105      	bne.n	800d94a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800d93e:	2100      	movs	r1, #0
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	f7ff fe9c 	bl	800d67e <VL53L0X_perform_single_ref_calibration>
 800d946:	4603      	mov	r3, r0
 800d948:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d94a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d115      	bne.n	800d97e <VL53L0X_perform_phase_calibration+0x8a>
 800d952:	79fb      	ldrb	r3, [r7, #7]
 800d954:	2b01      	cmp	r3, #1
 800d956:	d112      	bne.n	800d97e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d958:	7d39      	ldrb	r1, [r7, #20]
 800d95a:	7d7a      	ldrb	r2, [r7, #21]
 800d95c:	2301      	movs	r3, #1
 800d95e:	9303      	str	r3, [sp, #12]
 800d960:	2300      	movs	r3, #0
 800d962:	9302      	str	r3, [sp, #8]
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	9301      	str	r3, [sp, #4]
 800d968:	f107 0313 	add.w	r3, r7, #19
 800d96c:	9300      	str	r3, [sp, #0]
 800d96e:	460b      	mov	r3, r1
 800d970:	2101      	movs	r1, #1
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	f7ff febe 	bl	800d6f4 <VL53L0X_ref_calibration_io>
 800d978:	4603      	mov	r3, r0
 800d97a:	75fb      	strb	r3, [r7, #23]
 800d97c:	e002      	b.n	800d984 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	2200      	movs	r2, #0
 800d982:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d984:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d112      	bne.n	800d9b2 <VL53L0X_perform_phase_calibration+0xbe>
 800d98c:	79bb      	ldrb	r3, [r7, #6]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d00f      	beq.n	800d9b2 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d992:	7dbb      	ldrb	r3, [r7, #22]
 800d994:	461a      	mov	r2, r3
 800d996:	2101      	movs	r1, #1
 800d998:	68f8      	ldr	r0, [r7, #12]
 800d99a:	f002 fbd5 	bl	8010148 <VL53L0X_WrByte>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d9a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d103      	bne.n	800d9b2 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	7dba      	ldrb	r2, [r7, #22]
 800d9ae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d9b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3718      	adds	r7, #24
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}

0800d9be <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800d9be:	b580      	push	{r7, lr}
 800d9c0:	b086      	sub	sp, #24
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	60f8      	str	r0, [r7, #12]
 800d9c6:	60b9      	str	r1, [r7, #8]
 800d9c8:	607a      	str	r2, [r7, #4]
 800d9ca:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d9da:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800d9dc:	78fa      	ldrb	r2, [r7, #3]
 800d9de:	2300      	movs	r3, #0
 800d9e0:	68b9      	ldr	r1, [r7, #8]
 800d9e2:	68f8      	ldr	r0, [r7, #12]
 800d9e4:	f7ff ff1f 	bl	800d826 <VL53L0X_perform_vhv_calibration>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800d9ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d107      	bne.n	800da04 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800d9f4:	78fa      	ldrb	r2, [r7, #3]
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	6879      	ldr	r1, [r7, #4]
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f7ff ff7a 	bl	800d8f4 <VL53L0X_perform_phase_calibration>
 800da00:	4603      	mov	r3, r0
 800da02:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800da04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d10f      	bne.n	800da2c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800da0c:	7dbb      	ldrb	r3, [r7, #22]
 800da0e:	461a      	mov	r2, r3
 800da10:	2101      	movs	r1, #1
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	f002 fb98 	bl	8010148 <VL53L0X_WrByte>
 800da18:	4603      	mov	r3, r0
 800da1a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800da1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d103      	bne.n	800da2c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	7dba      	ldrb	r2, [r7, #22]
 800da28:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800da2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da30:	4618      	mov	r0, r3
 800da32:	3718      	adds	r7, #24
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b086      	sub	sp, #24
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800da40:	2300      	movs	r3, #0
 800da42:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800da44:	2300      	movs	r3, #0
 800da46:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800da48:	2300      	movs	r3, #0
 800da4a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800da4c:	f107 030f 	add.w	r3, r7, #15
 800da50:	4619      	mov	r1, r3
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7fe fdd2 	bl	800c5fc <VL53L0X_GetMeasurementDataReady>
 800da58:	4603      	mov	r3, r0
 800da5a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800da5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d110      	bne.n	800da86 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800da64:	7bfb      	ldrb	r3, [r7, #15]
 800da66:	2b01      	cmp	r3, #1
 800da68:	d00f      	beq.n	800da8a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	3301      	adds	r3, #1
 800da6e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800da76:	d302      	bcc.n	800da7e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800da78:	23f9      	movs	r3, #249	; 0xf9
 800da7a:	75fb      	strb	r3, [r7, #23]
			break;
 800da7c:	e006      	b.n	800da8c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f002 fc82 	bl	8010388 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800da84:	e7e2      	b.n	800da4c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800da86:	bf00      	nop
 800da88:	e000      	b.n	800da8c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800da8a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800da8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da90:	4618      	mov	r0, r3
 800da92:	3718      	adds	r7, #24
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800da98:	b480      	push	{r7}
 800da9a:	b085      	sub	sp, #20
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	4603      	mov	r3, r0
 800daa0:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800daa2:	2300      	movs	r3, #0
 800daa4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800daa6:	79fb      	ldrb	r3, [r7, #7]
 800daa8:	3301      	adds	r3, #1
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	005b      	lsls	r3, r3, #1
 800daae:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800dab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3714      	adds	r7, #20
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr

0800dabe <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800dabe:	b480      	push	{r7}
 800dac0:	b085      	sub	sp, #20
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	4603      	mov	r3, r0
 800dac6:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800dac8:	2300      	movs	r3, #0
 800daca:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800dacc:	79fb      	ldrb	r3, [r7, #7]
 800dace:	085b      	lsrs	r3, r3, #1
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	3b01      	subs	r3, #1
 800dad4:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800dad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3714      	adds	r7, #20
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr

0800dae4 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b085      	sub	sp, #20
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800daec:	2300      	movs	r3, #0
 800daee:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800daf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800daf4:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800daf6:	e002      	b.n	800dafe <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	089b      	lsrs	r3, r3, #2
 800dafc:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800dafe:	68ba      	ldr	r2, [r7, #8]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	429a      	cmp	r2, r3
 800db04:	d8f8      	bhi.n	800daf8 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800db06:	e017      	b.n	800db38 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800db08:	68fa      	ldr	r2, [r7, #12]
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	4413      	add	r3, r2
 800db0e:	687a      	ldr	r2, [r7, #4]
 800db10:	429a      	cmp	r2, r3
 800db12:	d30b      	bcc.n	800db2c <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800db14:	68fa      	ldr	r2, [r7, #12]
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	4413      	add	r3, r2
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	085b      	lsrs	r3, r3, #1
 800db24:	68ba      	ldr	r2, [r7, #8]
 800db26:	4413      	add	r3, r2
 800db28:	60fb      	str	r3, [r7, #12]
 800db2a:	e002      	b.n	800db32 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	085b      	lsrs	r3, r3, #1
 800db30:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	089b      	lsrs	r3, r3, #2
 800db36:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d1e4      	bne.n	800db08 <VL53L0X_isqrt+0x24>
	}

	return res;
 800db3e:	68fb      	ldr	r3, [r7, #12]
}
 800db40:	4618      	mov	r0, r3
 800db42:	3714      	adds	r7, #20
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b086      	sub	sp, #24
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db54:	2300      	movs	r3, #0
 800db56:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800db58:	2200      	movs	r2, #0
 800db5a:	2183      	movs	r1, #131	; 0x83
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f002 faf3 	bl	8010148 <VL53L0X_WrByte>
 800db62:	4603      	mov	r3, r0
 800db64:	461a      	mov	r2, r3
 800db66:	7dfb      	ldrb	r3, [r7, #23]
 800db68:	4313      	orrs	r3, r2
 800db6a:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800db6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d11e      	bne.n	800dbb2 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800db74:	2300      	movs	r3, #0
 800db76:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800db78:	f107 030f 	add.w	r3, r7, #15
 800db7c:	461a      	mov	r2, r3
 800db7e:	2183      	movs	r1, #131	; 0x83
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f002 fb63 	bl	801024c <VL53L0X_RdByte>
 800db86:	4603      	mov	r3, r0
 800db88:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800db8a:	7bfb      	ldrb	r3, [r7, #15]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d10a      	bne.n	800dba6 <VL53L0X_device_read_strobe+0x5a>
 800db90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d106      	bne.n	800dba6 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	3301      	adds	r3, #1
 800db9c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800dba4:	d3e8      	bcc.n	800db78 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800dbac:	d301      	bcc.n	800dbb2 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800dbae:	23f9      	movs	r3, #249	; 0xf9
 800dbb0:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	2183      	movs	r1, #131	; 0x83
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f002 fac6 	bl	8010148 <VL53L0X_WrByte>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	7dfb      	ldrb	r3, [r7, #23]
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800dbc6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3718      	adds	r7, #24
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b098      	sub	sp, #96	; 0x60
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
 800dbda:	460b      	mov	r3, r1
 800dbdc:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800dbea:	2300      	movs	r3, #0
 800dbec:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800dc02:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800dc06:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800dc10:	2300      	movs	r3, #0
 800dc12:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800dc1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800dc1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc22:	2b07      	cmp	r3, #7
 800dc24:	f000 8408 	beq.w	800e438 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800dc28:	2201      	movs	r2, #1
 800dc2a:	2180      	movs	r1, #128	; 0x80
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f002 fa8b 	bl	8010148 <VL53L0X_WrByte>
 800dc32:	4603      	mov	r3, r0
 800dc34:	461a      	mov	r2, r3
 800dc36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800dc40:	2201      	movs	r2, #1
 800dc42:	21ff      	movs	r1, #255	; 0xff
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f002 fa7f 	bl	8010148 <VL53L0X_WrByte>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc52:	4313      	orrs	r3, r2
 800dc54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800dc58:	2200      	movs	r2, #0
 800dc5a:	2100      	movs	r1, #0
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f002 fa73 	bl	8010148 <VL53L0X_WrByte>
 800dc62:	4603      	mov	r3, r0
 800dc64:	461a      	mov	r2, r3
 800dc66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc6a:	4313      	orrs	r3, r2
 800dc6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800dc70:	2206      	movs	r2, #6
 800dc72:	21ff      	movs	r1, #255	; 0xff
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f002 fa67 	bl	8010148 <VL53L0X_WrByte>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc82:	4313      	orrs	r3, r2
 800dc84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800dc88:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	2183      	movs	r1, #131	; 0x83
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f002 fadb 	bl	801024c <VL53L0X_RdByte>
 800dc96:	4603      	mov	r3, r0
 800dc98:	461a      	mov	r2, r3
 800dc9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc9e:	4313      	orrs	r3, r2
 800dca0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800dca4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dca8:	f043 0304 	orr.w	r3, r3, #4
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	461a      	mov	r2, r3
 800dcb0:	2183      	movs	r1, #131	; 0x83
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f002 fa48 	bl	8010148 <VL53L0X_WrByte>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	461a      	mov	r2, r3
 800dcbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800dcc6:	2207      	movs	r2, #7
 800dcc8:	21ff      	movs	r1, #255	; 0xff
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f002 fa3c 	bl	8010148 <VL53L0X_WrByte>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcd8:	4313      	orrs	r3, r2
 800dcda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800dcde:	2201      	movs	r2, #1
 800dce0:	2181      	movs	r1, #129	; 0x81
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f002 fa30 	bl	8010148 <VL53L0X_WrByte>
 800dce8:	4603      	mov	r3, r0
 800dcea:	461a      	mov	r2, r3
 800dcec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcf0:	4313      	orrs	r3, r2
 800dcf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f002 fb46 	bl	8010388 <VL53L0X_PollingDelay>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	461a      	mov	r2, r3
 800dd00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd04:	4313      	orrs	r3, r2
 800dd06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	2180      	movs	r1, #128	; 0x80
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f002 fa1a 	bl	8010148 <VL53L0X_WrByte>
 800dd14:	4603      	mov	r3, r0
 800dd16:	461a      	mov	r2, r3
 800dd18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800dd22:	78fb      	ldrb	r3, [r7, #3]
 800dd24:	f003 0301 	and.w	r3, r3, #1
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	f000 8098 	beq.w	800de5e <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800dd2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dd32:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	f040 8091 	bne.w	800de5e <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800dd3c:	226b      	movs	r2, #107	; 0x6b
 800dd3e:	2194      	movs	r1, #148	; 0x94
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f002 fa01 	bl	8010148 <VL53L0X_WrByte>
 800dd46:	4603      	mov	r3, r0
 800dd48:	461a      	mov	r2, r3
 800dd4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd4e:	4313      	orrs	r3, r2
 800dd50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f7ff fef9 	bl	800db4c <VL53L0X_device_read_strobe>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd62:	4313      	orrs	r3, r2
 800dd64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dd68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	2190      	movs	r1, #144	; 0x90
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f002 facd 	bl	8010310 <VL53L0X_RdDWord>
 800dd76:	4603      	mov	r3, r0
 800dd78:	461a      	mov	r2, r3
 800dd7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800dd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd86:	0a1b      	lsrs	r3, r3, #8
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd8e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800dd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd94:	0bdb      	lsrs	r3, r3, #15
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	f003 0301 	and.w	r3, r3, #1
 800dd9c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800dda0:	2224      	movs	r2, #36	; 0x24
 800dda2:	2194      	movs	r1, #148	; 0x94
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f002 f9cf 	bl	8010148 <VL53L0X_WrByte>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	461a      	mov	r2, r3
 800ddae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f7ff fec7 	bl	800db4c <VL53L0X_device_read_strobe>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ddcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	2190      	movs	r1, #144	; 0x90
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f002 fa9b 	bl	8010310 <VL53L0X_RdDWord>
 800ddda:	4603      	mov	r3, r0
 800dddc:	461a      	mov	r2, r3
 800ddde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dde2:	4313      	orrs	r3, r2
 800dde4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800dde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddea:	0e1b      	lsrs	r3, r3, #24
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800ddf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf2:	0c1b      	lsrs	r3, r3, #16
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfa:	0a1b      	lsrs	r3, r3, #8
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800de00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de02:	b2db      	uxtb	r3, r3
 800de04:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800de06:	2225      	movs	r2, #37	; 0x25
 800de08:	2194      	movs	r1, #148	; 0x94
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f002 f99c 	bl	8010148 <VL53L0X_WrByte>
 800de10:	4603      	mov	r3, r0
 800de12:	461a      	mov	r2, r3
 800de14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de18:	4313      	orrs	r3, r2
 800de1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f7ff fe94 	bl	800db4c <VL53L0X_device_read_strobe>
 800de24:	4603      	mov	r3, r0
 800de26:	461a      	mov	r2, r3
 800de28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de2c:	4313      	orrs	r3, r2
 800de2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800de32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800de36:	461a      	mov	r2, r3
 800de38:	2190      	movs	r1, #144	; 0x90
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f002 fa68 	bl	8010310 <VL53L0X_RdDWord>
 800de40:	4603      	mov	r3, r0
 800de42:	461a      	mov	r2, r3
 800de44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de48:	4313      	orrs	r3, r2
 800de4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800de4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de50:	0e1b      	lsrs	r3, r3, #24
 800de52:	b2db      	uxtb	r3, r3
 800de54:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800de56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de58:	0c1b      	lsrs	r3, r3, #16
 800de5a:	b2db      	uxtb	r3, r3
 800de5c:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800de5e:	78fb      	ldrb	r3, [r7, #3]
 800de60:	f003 0302 	and.w	r3, r3, #2
 800de64:	2b00      	cmp	r3, #0
 800de66:	f000 8189 	beq.w	800e17c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800de6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800de6e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800de72:	2b00      	cmp	r3, #0
 800de74:	f040 8182 	bne.w	800e17c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800de78:	2202      	movs	r2, #2
 800de7a:	2194      	movs	r1, #148	; 0x94
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f002 f963 	bl	8010148 <VL53L0X_WrByte>
 800de82:	4603      	mov	r3, r0
 800de84:	461a      	mov	r2, r3
 800de86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de8a:	4313      	orrs	r3, r2
 800de8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7ff fe5b 	bl	800db4c <VL53L0X_device_read_strobe>
 800de96:	4603      	mov	r3, r0
 800de98:	461a      	mov	r2, r3
 800de9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de9e:	4313      	orrs	r3, r2
 800dea0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800dea4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800dea8:	461a      	mov	r2, r3
 800deaa:	2190      	movs	r1, #144	; 0x90
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f002 f9cd 	bl	801024c <VL53L0X_RdByte>
 800deb2:	4603      	mov	r3, r0
 800deb4:	461a      	mov	r2, r3
 800deb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800deba:	4313      	orrs	r3, r2
 800debc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800dec0:	227b      	movs	r2, #123	; 0x7b
 800dec2:	2194      	movs	r1, #148	; 0x94
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f002 f93f 	bl	8010148 <VL53L0X_WrByte>
 800deca:	4603      	mov	r3, r0
 800decc:	461a      	mov	r2, r3
 800dece:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ded2:	4313      	orrs	r3, r2
 800ded4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f7ff fe37 	bl	800db4c <VL53L0X_device_read_strobe>
 800dede:	4603      	mov	r3, r0
 800dee0:	461a      	mov	r2, r3
 800dee2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dee6:	4313      	orrs	r3, r2
 800dee8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800deec:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800def0:	461a      	mov	r2, r3
 800def2:	2190      	movs	r1, #144	; 0x90
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f002 f9a9 	bl	801024c <VL53L0X_RdByte>
 800defa:	4603      	mov	r3, r0
 800defc:	461a      	mov	r2, r3
 800defe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df02:	4313      	orrs	r3, r2
 800df04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800df08:	2277      	movs	r2, #119	; 0x77
 800df0a:	2194      	movs	r1, #148	; 0x94
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f002 f91b 	bl	8010148 <VL53L0X_WrByte>
 800df12:	4603      	mov	r3, r0
 800df14:	461a      	mov	r2, r3
 800df16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df1a:	4313      	orrs	r3, r2
 800df1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f7ff fe13 	bl	800db4c <VL53L0X_device_read_strobe>
 800df26:	4603      	mov	r3, r0
 800df28:	461a      	mov	r2, r3
 800df2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df2e:	4313      	orrs	r3, r2
 800df30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800df34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df38:	461a      	mov	r2, r3
 800df3a:	2190      	movs	r1, #144	; 0x90
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f002 f9e7 	bl	8010310 <VL53L0X_RdDWord>
 800df42:	4603      	mov	r3, r0
 800df44:	461a      	mov	r2, r3
 800df46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df4a:	4313      	orrs	r3, r2
 800df4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800df50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df52:	0e5b      	lsrs	r3, r3, #25
 800df54:	b2db      	uxtb	r3, r3
 800df56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800df5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df60:	0c9b      	lsrs	r3, r3, #18
 800df62:	b2db      	uxtb	r3, r3
 800df64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df68:	b2db      	uxtb	r3, r3
 800df6a:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800df6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6e:	0adb      	lsrs	r3, r3, #11
 800df70:	b2db      	uxtb	r3, r3
 800df72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df76:	b2db      	uxtb	r3, r3
 800df78:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800df7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7c:	091b      	lsrs	r3, r3, #4
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df84:	b2db      	uxtb	r3, r3
 800df86:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800df88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8a:	b2db      	uxtb	r3, r3
 800df8c:	00db      	lsls	r3, r3, #3
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800df94:	b2db      	uxtb	r3, r3
 800df96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800df9a:	2278      	movs	r2, #120	; 0x78
 800df9c:	2194      	movs	r1, #148	; 0x94
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f002 f8d2 	bl	8010148 <VL53L0X_WrByte>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfac:	4313      	orrs	r3, r2
 800dfae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f7ff fdca 	bl	800db4c <VL53L0X_device_read_strobe>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	461a      	mov	r2, r3
 800dfbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dfc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dfca:	461a      	mov	r2, r3
 800dfcc:	2190      	movs	r1, #144	; 0x90
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f002 f99e 	bl	8010310 <VL53L0X_RdDWord>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfdc:	4313      	orrs	r3, r2
 800dfde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800dfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe4:	0f5b      	lsrs	r3, r3, #29
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfec:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800dfee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dff2:	4413      	add	r3, r2
 800dff4:	b2db      	uxtb	r3, r3
 800dff6:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800dff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dffa:	0d9b      	lsrs	r3, r3, #22
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e002:	b2db      	uxtb	r3, r3
 800e004:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800e006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e008:	0bdb      	lsrs	r3, r3, #15
 800e00a:	b2db      	uxtb	r3, r3
 800e00c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e010:	b2db      	uxtb	r3, r3
 800e012:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800e014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e016:	0a1b      	lsrs	r3, r3, #8
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e01e:	b2db      	uxtb	r3, r3
 800e020:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800e022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e024:	085b      	lsrs	r3, r3, #1
 800e026:	b2db      	uxtb	r3, r3
 800e028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800e030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e032:	b2db      	uxtb	r3, r3
 800e034:	019b      	lsls	r3, r3, #6
 800e036:	b2db      	uxtb	r3, r3
 800e038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800e042:	2279      	movs	r2, #121	; 0x79
 800e044:	2194      	movs	r1, #148	; 0x94
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f002 f87e 	bl	8010148 <VL53L0X_WrByte>
 800e04c:	4603      	mov	r3, r0
 800e04e:	461a      	mov	r2, r3
 800e050:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e054:	4313      	orrs	r3, r2
 800e056:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f7ff fd76 	bl	800db4c <VL53L0X_device_read_strobe>
 800e060:	4603      	mov	r3, r0
 800e062:	461a      	mov	r2, r3
 800e064:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e068:	4313      	orrs	r3, r2
 800e06a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e06e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e072:	461a      	mov	r2, r3
 800e074:	2190      	movs	r1, #144	; 0x90
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f002 f94a 	bl	8010310 <VL53L0X_RdDWord>
 800e07c:	4603      	mov	r3, r0
 800e07e:	461a      	mov	r2, r3
 800e080:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e084:	4313      	orrs	r3, r2
 800e086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800e08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e08c:	0e9b      	lsrs	r3, r3, #26
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e094:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800e096:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e09a:	4413      	add	r3, r2
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800e0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a2:	0cdb      	lsrs	r3, r3, #19
 800e0a4:	b2db      	uxtb	r3, r3
 800e0a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800e0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b0:	0b1b      	lsrs	r3, r3, #12
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800e0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0be:	095b      	lsrs	r3, r3, #5
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800e0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800e0dc:	227a      	movs	r2, #122	; 0x7a
 800e0de:	2194      	movs	r1, #148	; 0x94
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f002 f831 	bl	8010148 <VL53L0X_WrByte>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f7ff fd29 	bl	800db4c <VL53L0X_device_read_strobe>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e102:	4313      	orrs	r3, r2
 800e104:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e108:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e10c:	461a      	mov	r2, r3
 800e10e:	2190      	movs	r1, #144	; 0x90
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f002 f8fd 	bl	8010310 <VL53L0X_RdDWord>
 800e116:	4603      	mov	r3, r0
 800e118:	461a      	mov	r2, r3
 800e11a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e11e:	4313      	orrs	r3, r2
 800e120:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800e124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e126:	0f9b      	lsrs	r3, r3, #30
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e12e:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800e130:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e134:	4413      	add	r3, r2
 800e136:	b2db      	uxtb	r3, r3
 800e138:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800e13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13c:	0ddb      	lsrs	r3, r3, #23
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e144:	b2db      	uxtb	r3, r3
 800e146:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800e148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14a:	0c1b      	lsrs	r3, r3, #16
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e152:	b2db      	uxtb	r3, r3
 800e154:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800e156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e158:	0a5b      	lsrs	r3, r3, #9
 800e15a:	b2db      	uxtb	r3, r3
 800e15c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e160:	b2db      	uxtb	r3, r3
 800e162:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800e166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e168:	089b      	lsrs	r3, r3, #2
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e170:	b2db      	uxtb	r3, r3
 800e172:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800e176:	2300      	movs	r3, #0
 800e178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800e17c:	78fb      	ldrb	r3, [r7, #3]
 800e17e:	f003 0304 	and.w	r3, r3, #4
 800e182:	2b00      	cmp	r3, #0
 800e184:	f000 80f1 	beq.w	800e36a <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800e188:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e18c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800e190:	2b00      	cmp	r3, #0
 800e192:	f040 80ea 	bne.w	800e36a <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800e196:	227b      	movs	r2, #123	; 0x7b
 800e198:	2194      	movs	r1, #148	; 0x94
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f001 ffd4 	bl	8010148 <VL53L0X_WrByte>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1a8:	4313      	orrs	r3, r2
 800e1aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f7ff fccc 	bl	800db4c <VL53L0X_device_read_strobe>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800e1c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	2190      	movs	r1, #144	; 0x90
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f002 f8a0 	bl	8010310 <VL53L0X_RdDWord>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1d8:	4313      	orrs	r3, r2
 800e1da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800e1de:	227c      	movs	r2, #124	; 0x7c
 800e1e0:	2194      	movs	r1, #148	; 0x94
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f001 ffb0 	bl	8010148 <VL53L0X_WrByte>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1f0:	4313      	orrs	r3, r2
 800e1f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f7ff fca8 	bl	800db4c <VL53L0X_device_read_strobe>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	461a      	mov	r2, r3
 800e200:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e204:	4313      	orrs	r3, r2
 800e206:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800e20a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e20e:	461a      	mov	r2, r3
 800e210:	2190      	movs	r1, #144	; 0x90
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f002 f87c 	bl	8010310 <VL53L0X_RdDWord>
 800e218:	4603      	mov	r3, r0
 800e21a:	461a      	mov	r2, r3
 800e21c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e220:	4313      	orrs	r3, r2
 800e222:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800e226:	2273      	movs	r2, #115	; 0x73
 800e228:	2194      	movs	r1, #148	; 0x94
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f001 ff8c 	bl	8010148 <VL53L0X_WrByte>
 800e230:	4603      	mov	r3, r0
 800e232:	461a      	mov	r2, r3
 800e234:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e238:	4313      	orrs	r3, r2
 800e23a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f7ff fc84 	bl	800db4c <VL53L0X_device_read_strobe>
 800e244:	4603      	mov	r3, r0
 800e246:	461a      	mov	r2, r3
 800e248:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e24c:	4313      	orrs	r3, r2
 800e24e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e252:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e256:	461a      	mov	r2, r3
 800e258:	2190      	movs	r1, #144	; 0x90
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f002 f858 	bl	8010310 <VL53L0X_RdDWord>
 800e260:	4603      	mov	r3, r0
 800e262:	461a      	mov	r2, r3
 800e264:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e268:	4313      	orrs	r3, r2
 800e26a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800e26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e270:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800e272:	b29b      	uxth	r3, r3
 800e274:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800e276:	2274      	movs	r2, #116	; 0x74
 800e278:	2194      	movs	r1, #148	; 0x94
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f001 ff64 	bl	8010148 <VL53L0X_WrByte>
 800e280:	4603      	mov	r3, r0
 800e282:	461a      	mov	r2, r3
 800e284:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e288:	4313      	orrs	r3, r2
 800e28a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f7ff fc5c 	bl	800db4c <VL53L0X_device_read_strobe>
 800e294:	4603      	mov	r3, r0
 800e296:	461a      	mov	r2, r3
 800e298:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e29c:	4313      	orrs	r3, r2
 800e29e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e2a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	2190      	movs	r1, #144	; 0x90
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f002 f830 	bl	8010310 <VL53L0X_RdDWord>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2b8:	4313      	orrs	r3, r2
 800e2ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800e2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c0:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800e2c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e2c4:	4313      	orrs	r3, r2
 800e2c6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800e2c8:	2275      	movs	r2, #117	; 0x75
 800e2ca:	2194      	movs	r1, #148	; 0x94
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f001 ff3b 	bl	8010148 <VL53L0X_WrByte>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f7ff fc33 	bl	800db4c <VL53L0X_device_read_strobe>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e2f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	2190      	movs	r1, #144	; 0x90
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f002 f807 	bl	8010310 <VL53L0X_RdDWord>
 800e302:	4603      	mov	r3, r0
 800e304:	461a      	mov	r2, r3
 800e306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e30a:	4313      	orrs	r3, r2
 800e30c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800e310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e312:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800e314:	b29b      	uxth	r3, r3
 800e316:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800e318:	2276      	movs	r2, #118	; 0x76
 800e31a:	2194      	movs	r1, #148	; 0x94
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f001 ff13 	bl	8010148 <VL53L0X_WrByte>
 800e322:	4603      	mov	r3, r0
 800e324:	461a      	mov	r2, r3
 800e326:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e32a:	4313      	orrs	r3, r2
 800e32c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f7ff fc0b 	bl	800db4c <VL53L0X_device_read_strobe>
 800e336:	4603      	mov	r3, r0
 800e338:	461a      	mov	r2, r3
 800e33a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e33e:	4313      	orrs	r3, r2
 800e340:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e344:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e348:	461a      	mov	r2, r3
 800e34a:	2190      	movs	r1, #144	; 0x90
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f001 ffdf 	bl	8010310 <VL53L0X_RdDWord>
 800e352:	4603      	mov	r3, r0
 800e354:	461a      	mov	r2, r3
 800e356:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e35a:	4313      	orrs	r3, r2
 800e35c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800e360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e362:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800e364:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e366:	4313      	orrs	r3, r2
 800e368:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800e36a:	2200      	movs	r2, #0
 800e36c:	2181      	movs	r1, #129	; 0x81
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f001 feea 	bl	8010148 <VL53L0X_WrByte>
 800e374:	4603      	mov	r3, r0
 800e376:	461a      	mov	r2, r3
 800e378:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e37c:	4313      	orrs	r3, r2
 800e37e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800e382:	2206      	movs	r2, #6
 800e384:	21ff      	movs	r1, #255	; 0xff
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f001 fede 	bl	8010148 <VL53L0X_WrByte>
 800e38c:	4603      	mov	r3, r0
 800e38e:	461a      	mov	r2, r3
 800e390:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e394:	4313      	orrs	r3, r2
 800e396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800e39a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800e39e:	461a      	mov	r2, r3
 800e3a0:	2183      	movs	r1, #131	; 0x83
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f001 ff52 	bl	801024c <VL53L0X_RdByte>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3b0:	4313      	orrs	r3, r2
 800e3b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800e3b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e3ba:	f023 0304 	bic.w	r3, r3, #4
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	2183      	movs	r1, #131	; 0x83
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f001 febf 	bl	8010148 <VL53L0X_WrByte>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e3d8:	2201      	movs	r2, #1
 800e3da:	21ff      	movs	r1, #255	; 0xff
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f001 feb3 	bl	8010148 <VL53L0X_WrByte>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	2100      	movs	r1, #0
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f001 fea7 	bl	8010148 <VL53L0X_WrByte>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e402:	4313      	orrs	r3, r2
 800e404:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e408:	2200      	movs	r2, #0
 800e40a:	21ff      	movs	r1, #255	; 0xff
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f001 fe9b 	bl	8010148 <VL53L0X_WrByte>
 800e412:	4603      	mov	r3, r0
 800e414:	461a      	mov	r2, r3
 800e416:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e41a:	4313      	orrs	r3, r2
 800e41c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800e420:	2200      	movs	r2, #0
 800e422:	2180      	movs	r1, #128	; 0x80
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f001 fe8f 	bl	8010148 <VL53L0X_WrByte>
 800e42a:	4603      	mov	r3, r0
 800e42c:	461a      	mov	r2, r3
 800e42e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e432:	4313      	orrs	r3, r2
 800e434:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800e438:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	f040 808f 	bne.w	800e560 <VL53L0X_get_info_from_device+0x98e>
 800e442:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e446:	2b07      	cmp	r3, #7
 800e448:	f000 808a 	beq.w	800e560 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800e44c:	78fb      	ldrb	r3, [r7, #3]
 800e44e:	f003 0301 	and.w	r3, r3, #1
 800e452:	2b00      	cmp	r3, #0
 800e454:	d024      	beq.n	800e4a0 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800e456:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e45a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d11e      	bne.n	800e4a0 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800e468:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800e472:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800e476:	2300      	movs	r3, #0
 800e478:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e47a:	e00e      	b.n	800e49a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800e47c:	f107 0208 	add.w	r2, r7, #8
 800e480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e482:	4413      	add	r3, r2
 800e484:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e48a:	4413      	add	r3, r2
 800e48c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800e490:	460a      	mov	r2, r1
 800e492:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800e494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e496:	3301      	adds	r3, #1
 800e498:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e49a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e49c:	2b05      	cmp	r3, #5
 800e49e:	dded      	ble.n	800e47c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800e4a0:	78fb      	ldrb	r3, [r7, #3]
 800e4a2:	f003 0302 	and.w	r3, r3, #2
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d018      	beq.n	800e4dc <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800e4aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e4ae:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d112      	bne.n	800e4dc <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e4b6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e4c0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	33f3      	adds	r3, #243	; 0xf3
 800e4ce:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800e4d0:	f107 0310 	add.w	r3, r7, #16
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e4d8:	f002 feb7 	bl	801124a <strcpy>

		}

		if (((option & 4) == 4) &&
 800e4dc:	78fb      	ldrb	r3, [r7, #3]
 800e4de:	f003 0304 	and.w	r3, r3, #4
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d030      	beq.n	800e548 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800e4e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e4ea:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d12a      	bne.n	800e548 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e4f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e4fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800e502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e504:	025b      	lsls	r3, r3, #9
 800e506:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e50c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800e510:	2300      	movs	r3, #0
 800e512:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800e516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d011      	beq.n	800e540 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800e51c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e51e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e520:	1ad3      	subs	r3, r2, r3
 800e522:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800e524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e526:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e52a:	fb02 f303 	mul.w	r3, r2, r3
 800e52e:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800e530:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800e534:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800e538:	425b      	negs	r3, r3
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800e540:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800e548:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800e54c:	78fb      	ldrb	r3, [r7, #3]
 800e54e:	4313      	orrs	r3, r2
 800e550:	b2db      	uxtb	r3, r3
 800e552:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800e556:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e560:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800e564:	4618      	mov	r0, r3
 800e566:	3760      	adds	r7, #96	; 0x60
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b087      	sub	sp, #28
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	460b      	mov	r3, r1
 800e576:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800e578:	f240 6277 	movw	r2, #1655	; 0x677
 800e57c:	f04f 0300 	mov.w	r3, #0
 800e580:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800e584:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800e588:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800e58a:	78fb      	ldrb	r3, [r7, #3]
 800e58c:	68fa      	ldr	r2, [r7, #12]
 800e58e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800e592:	693a      	ldr	r2, [r7, #16]
 800e594:	fb02 f303 	mul.w	r3, r2, r3
 800e598:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800e59a:	68bb      	ldr	r3, [r7, #8]
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	371c      	adds	r7, #28
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr

0800e5a8 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b087      	sub	sp, #28
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d017      	beq.n	800e5f2 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	3b01      	subs	r3, #1
 800e5c6:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e5c8:	e005      	b.n	800e5d6 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	085b      	lsrs	r3, r3, #1
 800e5ce:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800e5d0:	89fb      	ldrh	r3, [r7, #14]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1f4      	bne.n	800e5ca <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800e5e0:	89fb      	ldrh	r3, [r7, #14]
 800e5e2:	021b      	lsls	r3, r3, #8
 800e5e4:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800e5ee:	4413      	add	r3, r2
 800e5f0:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800e5f2:	8afb      	ldrh	r3, [r7, #22]

}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	371c      	adds	r7, #28
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800e600:	b480      	push	{r7}
 800e602:	b085      	sub	sp, #20
 800e604:	af00      	add	r7, sp, #0
 800e606:	4603      	mov	r3, r0
 800e608:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800e60a:	2300      	movs	r3, #0
 800e60c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e60e:	88fb      	ldrh	r3, [r7, #6]
 800e610:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800e612:	88fa      	ldrh	r2, [r7, #6]
 800e614:	0a12      	lsrs	r2, r2, #8
 800e616:	b292      	uxth	r2, r2
 800e618:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e61a:	3301      	adds	r3, #1
 800e61c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800e61e:	68fb      	ldr	r3, [r7, #12]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3714      	adds	r7, #20
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr

0800e62c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b088      	sub	sp, #32
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	4613      	mov	r3, r2
 800e638:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800e63a:	2300      	movs	r3, #0
 800e63c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800e63e:	79fb      	ldrb	r3, [r7, #7]
 800e640:	4619      	mov	r1, r3
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f7ff ff92 	bl	800e56c <VL53L0X_calc_macro_period_ps>
 800e648:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800e64a:	69bb      	ldr	r3, [r7, #24]
 800e64c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e650:	4a0a      	ldr	r2, [pc, #40]	; (800e67c <VL53L0X_calc_timeout_mclks+0x50>)
 800e652:	fba2 2303 	umull	r2, r3, r2, r3
 800e656:	099b      	lsrs	r3, r3, #6
 800e658:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e660:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	085b      	lsrs	r3, r3, #1
 800e668:	441a      	add	r2, r3
	timeout_period_mclks =
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e670:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800e672:	69fb      	ldr	r3, [r7, #28]
}
 800e674:	4618      	mov	r0, r3
 800e676:	3720      	adds	r7, #32
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}
 800e67c:	10624dd3 	.word	0x10624dd3

0800e680 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b086      	sub	sp, #24
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	460b      	mov	r3, r1
 800e68a:	807b      	strh	r3, [r7, #2]
 800e68c:	4613      	mov	r3, r2
 800e68e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800e690:	2300      	movs	r3, #0
 800e692:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800e694:	787b      	ldrb	r3, [r7, #1]
 800e696:	4619      	mov	r1, r3
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f7ff ff67 	bl	800e56c <VL53L0X_calc_macro_period_ps>
 800e69e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e6a6:	4a0a      	ldr	r2, [pc, #40]	; (800e6d0 <VL53L0X_calc_timeout_us+0x50>)
 800e6a8:	fba2 2303 	umull	r2, r3, r2, r3
 800e6ac:	099b      	lsrs	r3, r3, #6
 800e6ae:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800e6b0:	887b      	ldrh	r3, [r7, #2]
 800e6b2:	68fa      	ldr	r2, [r7, #12]
 800e6b4:	fb02 f303 	mul.w	r3, r2, r3
 800e6b8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800e6bc:	4a04      	ldr	r2, [pc, #16]	; (800e6d0 <VL53L0X_calc_timeout_us+0x50>)
 800e6be:	fba2 2303 	umull	r2, r3, r2, r3
 800e6c2:	099b      	lsrs	r3, r3, #6
 800e6c4:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800e6c6:	697b      	ldr	r3, [r7, #20]
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3718      	adds	r7, #24
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	10624dd3 	.word	0x10624dd3

0800e6d4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b08c      	sub	sp, #48	; 0x30
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	460b      	mov	r3, r1
 800e6de:	607a      	str	r2, [r7, #4]
 800e6e0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800e6fa:	7afb      	ldrb	r3, [r7, #11]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d005      	beq.n	800e70c <get_sequence_step_timeout+0x38>
 800e700:	7afb      	ldrb	r3, [r7, #11]
 800e702:	2b01      	cmp	r3, #1
 800e704:	d002      	beq.n	800e70c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800e706:	7afb      	ldrb	r3, [r7, #11]
 800e708:	2b02      	cmp	r3, #2
 800e70a:	d128      	bne.n	800e75e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e70c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e710:	461a      	mov	r2, r3
 800e712:	2100      	movs	r1, #0
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f7fd fa4d 	bl	800bbb4 <VL53L0X_GetVcselPulsePeriod>
 800e71a:	4603      	mov	r3, r0
 800e71c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800e720:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e724:	2b00      	cmp	r3, #0
 800e726:	d109      	bne.n	800e73c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800e728:	f107 0320 	add.w	r3, r7, #32
 800e72c:	461a      	mov	r2, r3
 800e72e:	2146      	movs	r1, #70	; 0x46
 800e730:	68f8      	ldr	r0, [r7, #12]
 800e732:	f001 fd8b 	bl	801024c <VL53L0X_RdByte>
 800e736:	4603      	mov	r3, r0
 800e738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800e73c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e740:	b29b      	uxth	r3, r3
 800e742:	4618      	mov	r0, r3
 800e744:	f7ff ff5c 	bl	800e600 <VL53L0X_decode_timeout>
 800e748:	4603      	mov	r3, r0
 800e74a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e74c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e750:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e752:	4619      	mov	r1, r3
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f7ff ff93 	bl	800e680 <VL53L0X_calc_timeout_us>
 800e75a:	62b8      	str	r0, [r7, #40]	; 0x28
 800e75c:	e092      	b.n	800e884 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e75e:	7afb      	ldrb	r3, [r7, #11]
 800e760:	2b03      	cmp	r3, #3
 800e762:	d135      	bne.n	800e7d0 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e764:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e768:	461a      	mov	r2, r3
 800e76a:	2100      	movs	r1, #0
 800e76c:	68f8      	ldr	r0, [r7, #12]
 800e76e:	f7fd fa21 	bl	800bbb4 <VL53L0X_GetVcselPulsePeriod>
 800e772:	4603      	mov	r3, r0
 800e774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e778:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	f040 8081 	bne.w	800e884 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e782:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e786:	461a      	mov	r2, r3
 800e788:	2100      	movs	r1, #0
 800e78a:	68f8      	ldr	r0, [r7, #12]
 800e78c:	f7fd fa12 	bl	800bbb4 <VL53L0X_GetVcselPulsePeriod>
 800e790:	4603      	mov	r3, r0
 800e792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800e796:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d109      	bne.n	800e7b2 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800e79e:	f107 031e 	add.w	r3, r7, #30
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	2151      	movs	r1, #81	; 0x51
 800e7a6:	68f8      	ldr	r0, [r7, #12]
 800e7a8:	f001 fd7a 	bl	80102a0 <VL53L0X_RdWord>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e7b2:	8bfb      	ldrh	r3, [r7, #30]
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7ff ff23 	bl	800e600 <VL53L0X_decode_timeout>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e7be:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e7c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	68f8      	ldr	r0, [r7, #12]
 800e7c8:	f7ff ff5a 	bl	800e680 <VL53L0X_calc_timeout_us>
 800e7cc:	62b8      	str	r0, [r7, #40]	; 0x28
 800e7ce:	e059      	b.n	800e884 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e7d0:	7afb      	ldrb	r3, [r7, #11]
 800e7d2:	2b04      	cmp	r3, #4
 800e7d4:	d156      	bne.n	800e884 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e7d6:	f107 0314 	add.w	r3, r7, #20
 800e7da:	4619      	mov	r1, r3
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	f7fd faf5 	bl	800bdcc <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800e7e6:	7dfb      	ldrb	r3, [r7, #23]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d01d      	beq.n	800e828 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e7ec:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	2100      	movs	r1, #0
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f7fd f9dd 	bl	800bbb4 <VL53L0X_GetVcselPulsePeriod>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800e800:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e804:	2b00      	cmp	r3, #0
 800e806:	d10f      	bne.n	800e828 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800e808:	f107 031e 	add.w	r3, r7, #30
 800e80c:	461a      	mov	r2, r3
 800e80e:	2151      	movs	r1, #81	; 0x51
 800e810:	68f8      	ldr	r0, [r7, #12]
 800e812:	f001 fd45 	bl	80102a0 <VL53L0X_RdWord>
 800e816:	4603      	mov	r3, r0
 800e818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e81c:	8bfb      	ldrh	r3, [r7, #30]
 800e81e:	4618      	mov	r0, r3
 800e820:	f7ff feee 	bl	800e600 <VL53L0X_decode_timeout>
 800e824:	4603      	mov	r3, r0
 800e826:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e828:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d109      	bne.n	800e844 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e830:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e834:	461a      	mov	r2, r3
 800e836:	2101      	movs	r1, #1
 800e838:	68f8      	ldr	r0, [r7, #12]
 800e83a:	f7fd f9bb 	bl	800bbb4 <VL53L0X_GetVcselPulsePeriod>
 800e83e:	4603      	mov	r3, r0
 800e840:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e844:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d10f      	bne.n	800e86c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800e84c:	f107 031c 	add.w	r3, r7, #28
 800e850:	461a      	mov	r2, r3
 800e852:	2171      	movs	r1, #113	; 0x71
 800e854:	68f8      	ldr	r0, [r7, #12]
 800e856:	f001 fd23 	bl	80102a0 <VL53L0X_RdWord>
 800e85a:	4603      	mov	r3, r0
 800e85c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e860:	8bbb      	ldrh	r3, [r7, #28]
 800e862:	4618      	mov	r0, r3
 800e864:	f7ff fecc 	bl	800e600 <VL53L0X_decode_timeout>
 800e868:	4603      	mov	r3, r0
 800e86a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800e86c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e86e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e870:	1ad3      	subs	r3, r2, r3
 800e872:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e874:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e878:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e87a:	4619      	mov	r1, r3
 800e87c:	68f8      	ldr	r0, [r7, #12]
 800e87e:	f7ff feff 	bl	800e680 <VL53L0X_calc_timeout_us>
 800e882:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e888:	601a      	str	r2, [r3, #0]

	return Status;
 800e88a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3730      	adds	r7, #48	; 0x30
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}

0800e896 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800e896:	b580      	push	{r7, lr}
 800e898:	b08a      	sub	sp, #40	; 0x28
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	60f8      	str	r0, [r7, #12]
 800e89e:	460b      	mov	r3, r1
 800e8a0:	607a      	str	r2, [r7, #4]
 800e8a2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800e8aa:	7afb      	ldrb	r3, [r7, #11]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d005      	beq.n	800e8bc <set_sequence_step_timeout+0x26>
 800e8b0:	7afb      	ldrb	r3, [r7, #11]
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d002      	beq.n	800e8bc <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800e8b6:	7afb      	ldrb	r3, [r7, #11]
 800e8b8:	2b02      	cmp	r3, #2
 800e8ba:	d138      	bne.n	800e92e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e8bc:	f107 031b 	add.w	r3, r7, #27
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	2100      	movs	r1, #0
 800e8c4:	68f8      	ldr	r0, [r7, #12]
 800e8c6:	f7fd f975 	bl	800bbb4 <VL53L0X_GetVcselPulsePeriod>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800e8d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d11a      	bne.n	800e90e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800e8d8:	7efb      	ldrb	r3, [r7, #27]
 800e8da:	461a      	mov	r2, r3
 800e8dc:	6879      	ldr	r1, [r7, #4]
 800e8de:	68f8      	ldr	r0, [r7, #12]
 800e8e0:	f7ff fea4 	bl	800e62c <VL53L0X_calc_timeout_mclks>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800e8e8:	8bbb      	ldrh	r3, [r7, #28]
 800e8ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8ee:	d903      	bls.n	800e8f8 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800e8f0:	23ff      	movs	r3, #255	; 0xff
 800e8f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e8f6:	e004      	b.n	800e902 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800e8f8:	8bbb      	ldrh	r3, [r7, #28]
 800e8fa:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800e8fc:	3b01      	subs	r3, #1
 800e8fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e902:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e906:	b29a      	uxth	r2, r3
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e90e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e912:	2b00      	cmp	r3, #0
 800e914:	f040 80ab 	bne.w	800ea6e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800e918:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e91c:	461a      	mov	r2, r3
 800e91e:	2146      	movs	r1, #70	; 0x46
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	f001 fc11 	bl	8010148 <VL53L0X_WrByte>
 800e926:	4603      	mov	r3, r0
 800e928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800e92c:	e09f      	b.n	800ea6e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e92e:	7afb      	ldrb	r3, [r7, #11]
 800e930:	2b03      	cmp	r3, #3
 800e932:	d135      	bne.n	800e9a0 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800e934:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d11b      	bne.n	800e974 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e93c:	f107 031b 	add.w	r3, r7, #27
 800e940:	461a      	mov	r2, r3
 800e942:	2100      	movs	r1, #0
 800e944:	68f8      	ldr	r0, [r7, #12]
 800e946:	f7fd f935 	bl	800bbb4 <VL53L0X_GetVcselPulsePeriod>
 800e94a:	4603      	mov	r3, r0
 800e94c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800e950:	7efb      	ldrb	r3, [r7, #27]
 800e952:	461a      	mov	r2, r3
 800e954:	6879      	ldr	r1, [r7, #4]
 800e956:	68f8      	ldr	r0, [r7, #12]
 800e958:	f7ff fe68 	bl	800e62c <VL53L0X_calc_timeout_mclks>
 800e95c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800e95e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800e960:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e962:	4618      	mov	r0, r3
 800e964:	f7ff fe20 	bl	800e5a8 <VL53L0X_encode_timeout>
 800e968:	4603      	mov	r3, r0
 800e96a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e96c:	8b3a      	ldrh	r2, [r7, #24]
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e974:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d108      	bne.n	800e98e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800e97c:	8b3b      	ldrh	r3, [r7, #24]
 800e97e:	461a      	mov	r2, r3
 800e980:	2151      	movs	r1, #81	; 0x51
 800e982:	68f8      	ldr	r0, [r7, #12]
 800e984:	f001 fc04 	bl	8010190 <VL53L0X_WrWord>
 800e988:	4603      	mov	r3, r0
 800e98a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e98e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e992:	2b00      	cmp	r3, #0
 800e994:	d16b      	bne.n	800ea6e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800e99e:	e066      	b.n	800ea6e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e9a0:	7afb      	ldrb	r3, [r7, #11]
 800e9a2:	2b04      	cmp	r3, #4
 800e9a4:	d160      	bne.n	800ea68 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800e9a6:	f107 0310 	add.w	r3, r7, #16
 800e9aa:	4619      	mov	r1, r3
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f7fd fa0d 	bl	800bdcc <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800e9b6:	7cfb      	ldrb	r3, [r7, #19]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d01d      	beq.n	800e9f8 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e9bc:	f107 031b 	add.w	r3, r7, #27
 800e9c0:	461a      	mov	r2, r3
 800e9c2:	2100      	movs	r1, #0
 800e9c4:	68f8      	ldr	r0, [r7, #12]
 800e9c6:	f7fd f8f5 	bl	800bbb4 <VL53L0X_GetVcselPulsePeriod>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800e9d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d10f      	bne.n	800e9f8 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800e9d8:	f107 0318 	add.w	r3, r7, #24
 800e9dc:	461a      	mov	r2, r3
 800e9de:	2151      	movs	r1, #81	; 0x51
 800e9e0:	68f8      	ldr	r0, [r7, #12]
 800e9e2:	f001 fc5d 	bl	80102a0 <VL53L0X_RdWord>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800e9ec:	8b3b      	ldrh	r3, [r7, #24]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7ff fe06 	bl	800e600 <VL53L0X_decode_timeout>
 800e9f4:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800e9f6:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800e9f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d109      	bne.n	800ea14 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ea00:	f107 031b 	add.w	r3, r7, #27
 800ea04:	461a      	mov	r2, r3
 800ea06:	2101      	movs	r1, #1
 800ea08:	68f8      	ldr	r0, [r7, #12]
 800ea0a:	f7fd f8d3 	bl	800bbb4 <VL53L0X_GetVcselPulsePeriod>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800ea14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d128      	bne.n	800ea6e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800ea1c:	7efb      	ldrb	r3, [r7, #27]
 800ea1e:	461a      	mov	r2, r3
 800ea20:	6879      	ldr	r1, [r7, #4]
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	f7ff fe02 	bl	800e62c <VL53L0X_calc_timeout_mclks>
 800ea28:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800ea2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea2c:	6a3a      	ldr	r2, [r7, #32]
 800ea2e:	4413      	add	r3, r2
 800ea30:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800ea32:	6a38      	ldr	r0, [r7, #32]
 800ea34:	f7ff fdb8 	bl	800e5a8 <VL53L0X_encode_timeout>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800ea3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d108      	bne.n	800ea56 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800ea44:	8bfb      	ldrh	r3, [r7, #30]
 800ea46:	461a      	mov	r2, r3
 800ea48:	2171      	movs	r1, #113	; 0x71
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	f001 fba0 	bl	8010190 <VL53L0X_WrWord>
 800ea50:	4603      	mov	r3, r0
 800ea52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800ea56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d107      	bne.n	800ea6e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800ea66:	e002      	b.n	800ea6e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ea68:	23fc      	movs	r3, #252	; 0xfc
 800ea6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800ea6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3728      	adds	r7, #40	; 0x28
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}

0800ea7a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800ea7a:	b580      	push	{r7, lr}
 800ea7c:	b08a      	sub	sp, #40	; 0x28
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	6078      	str	r0, [r7, #4]
 800ea82:	460b      	mov	r3, r1
 800ea84:	70fb      	strb	r3, [r7, #3]
 800ea86:	4613      	mov	r3, r2
 800ea88:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800ea90:	230c      	movs	r3, #12
 800ea92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800ea96:	2312      	movs	r3, #18
 800ea98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800ea9c:	2308      	movs	r3, #8
 800ea9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800eaa2:	230e      	movs	r3, #14
 800eaa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800eaac:	78bb      	ldrb	r3, [r7, #2]
 800eaae:	f003 0301 	and.w	r3, r3, #1
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d003      	beq.n	800eac0 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800eab8:	23fc      	movs	r3, #252	; 0xfc
 800eaba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eabe:	e020      	b.n	800eb02 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800eac0:	78fb      	ldrb	r3, [r7, #3]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d10d      	bne.n	800eae2 <VL53L0X_set_vcsel_pulse_period+0x68>
 800eac6:	78ba      	ldrb	r2, [r7, #2]
 800eac8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eacc:	429a      	cmp	r2, r3
 800eace:	d304      	bcc.n	800eada <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800ead0:	78ba      	ldrb	r2, [r7, #2]
 800ead2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d903      	bls.n	800eae2 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800eada:	23fc      	movs	r3, #252	; 0xfc
 800eadc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eae0:	e00f      	b.n	800eb02 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800eae2:	78fb      	ldrb	r3, [r7, #3]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d10c      	bne.n	800eb02 <VL53L0X_set_vcsel_pulse_period+0x88>
 800eae8:	78ba      	ldrb	r2, [r7, #2]
 800eaea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d304      	bcc.n	800eafc <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800eaf2:	78ba      	ldrb	r2, [r7, #2]
 800eaf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d902      	bls.n	800eb02 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800eafc:	23fc      	movs	r3, #252	; 0xfc
 800eafe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800eb02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d002      	beq.n	800eb10 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800eb0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb0e:	e239      	b.n	800ef84 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800eb10:	78fb      	ldrb	r3, [r7, #3]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d150      	bne.n	800ebb8 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800eb16:	78bb      	ldrb	r3, [r7, #2]
 800eb18:	2b0c      	cmp	r3, #12
 800eb1a:	d110      	bne.n	800eb3e <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800eb1c:	2218      	movs	r2, #24
 800eb1e:	2157      	movs	r1, #87	; 0x57
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f001 fb11 	bl	8010148 <VL53L0X_WrByte>
 800eb26:	4603      	mov	r3, r0
 800eb28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800eb2c:	2208      	movs	r2, #8
 800eb2e:	2156      	movs	r1, #86	; 0x56
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f001 fb09 	bl	8010148 <VL53L0X_WrByte>
 800eb36:	4603      	mov	r3, r0
 800eb38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb3c:	e17f      	b.n	800ee3e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800eb3e:	78bb      	ldrb	r3, [r7, #2]
 800eb40:	2b0e      	cmp	r3, #14
 800eb42:	d110      	bne.n	800eb66 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800eb44:	2230      	movs	r2, #48	; 0x30
 800eb46:	2157      	movs	r1, #87	; 0x57
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f001 fafd 	bl	8010148 <VL53L0X_WrByte>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800eb54:	2208      	movs	r2, #8
 800eb56:	2156      	movs	r1, #86	; 0x56
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f001 faf5 	bl	8010148 <VL53L0X_WrByte>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb64:	e16b      	b.n	800ee3e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800eb66:	78bb      	ldrb	r3, [r7, #2]
 800eb68:	2b10      	cmp	r3, #16
 800eb6a:	d110      	bne.n	800eb8e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800eb6c:	2240      	movs	r2, #64	; 0x40
 800eb6e:	2157      	movs	r1, #87	; 0x57
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f001 fae9 	bl	8010148 <VL53L0X_WrByte>
 800eb76:	4603      	mov	r3, r0
 800eb78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800eb7c:	2208      	movs	r2, #8
 800eb7e:	2156      	movs	r1, #86	; 0x56
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f001 fae1 	bl	8010148 <VL53L0X_WrByte>
 800eb86:	4603      	mov	r3, r0
 800eb88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb8c:	e157      	b.n	800ee3e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800eb8e:	78bb      	ldrb	r3, [r7, #2]
 800eb90:	2b12      	cmp	r3, #18
 800eb92:	f040 8154 	bne.w	800ee3e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800eb96:	2250      	movs	r2, #80	; 0x50
 800eb98:	2157      	movs	r1, #87	; 0x57
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f001 fad4 	bl	8010148 <VL53L0X_WrByte>
 800eba0:	4603      	mov	r3, r0
 800eba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800eba6:	2208      	movs	r2, #8
 800eba8:	2156      	movs	r1, #86	; 0x56
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f001 facc 	bl	8010148 <VL53L0X_WrByte>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ebb6:	e142      	b.n	800ee3e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800ebb8:	78fb      	ldrb	r3, [r7, #3]
 800ebba:	2b01      	cmp	r3, #1
 800ebbc:	f040 813f 	bne.w	800ee3e <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800ebc0:	78bb      	ldrb	r3, [r7, #2]
 800ebc2:	2b08      	cmp	r3, #8
 800ebc4:	d14c      	bne.n	800ec60 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800ebc6:	2210      	movs	r2, #16
 800ebc8:	2148      	movs	r1, #72	; 0x48
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f001 fabc 	bl	8010148 <VL53L0X_WrByte>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800ebd6:	2208      	movs	r2, #8
 800ebd8:	2147      	movs	r1, #71	; 0x47
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f001 fab4 	bl	8010148 <VL53L0X_WrByte>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ebe6:	2202      	movs	r2, #2
 800ebe8:	2132      	movs	r1, #50	; 0x32
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f001 faac 	bl	8010148 <VL53L0X_WrByte>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	461a      	mov	r2, r3
 800ebf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebf8:	4313      	orrs	r3, r2
 800ebfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800ebfe:	220c      	movs	r2, #12
 800ec00:	2130      	movs	r1, #48	; 0x30
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f001 faa0 	bl	8010148 <VL53L0X_WrByte>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec10:	4313      	orrs	r3, r2
 800ec12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ec16:	2201      	movs	r2, #1
 800ec18:	21ff      	movs	r1, #255	; 0xff
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f001 fa94 	bl	8010148 <VL53L0X_WrByte>
 800ec20:	4603      	mov	r3, r0
 800ec22:	461a      	mov	r2, r3
 800ec24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec28:	4313      	orrs	r3, r2
 800ec2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ec2e:	2230      	movs	r2, #48	; 0x30
 800ec30:	2130      	movs	r1, #48	; 0x30
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f001 fa88 	bl	8010148 <VL53L0X_WrByte>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	461a      	mov	r2, r3
 800ec3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec40:	4313      	orrs	r3, r2
 800ec42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ec46:	2200      	movs	r2, #0
 800ec48:	21ff      	movs	r1, #255	; 0xff
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f001 fa7c 	bl	8010148 <VL53L0X_WrByte>
 800ec50:	4603      	mov	r3, r0
 800ec52:	461a      	mov	r2, r3
 800ec54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec58:	4313      	orrs	r3, r2
 800ec5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec5e:	e0ee      	b.n	800ee3e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800ec60:	78bb      	ldrb	r3, [r7, #2]
 800ec62:	2b0a      	cmp	r3, #10
 800ec64:	d14c      	bne.n	800ed00 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800ec66:	2228      	movs	r2, #40	; 0x28
 800ec68:	2148      	movs	r1, #72	; 0x48
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f001 fa6c 	bl	8010148 <VL53L0X_WrByte>
 800ec70:	4603      	mov	r3, r0
 800ec72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800ec76:	2208      	movs	r2, #8
 800ec78:	2147      	movs	r1, #71	; 0x47
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f001 fa64 	bl	8010148 <VL53L0X_WrByte>
 800ec80:	4603      	mov	r3, r0
 800ec82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ec86:	2203      	movs	r2, #3
 800ec88:	2132      	movs	r1, #50	; 0x32
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f001 fa5c 	bl	8010148 <VL53L0X_WrByte>
 800ec90:	4603      	mov	r3, r0
 800ec92:	461a      	mov	r2, r3
 800ec94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec98:	4313      	orrs	r3, r2
 800ec9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ec9e:	2209      	movs	r2, #9
 800eca0:	2130      	movs	r1, #48	; 0x30
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f001 fa50 	bl	8010148 <VL53L0X_WrByte>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	461a      	mov	r2, r3
 800ecac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecb0:	4313      	orrs	r3, r2
 800ecb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	21ff      	movs	r1, #255	; 0xff
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f001 fa44 	bl	8010148 <VL53L0X_WrByte>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecc8:	4313      	orrs	r3, r2
 800ecca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ecce:	2220      	movs	r2, #32
 800ecd0:	2130      	movs	r1, #48	; 0x30
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f001 fa38 	bl	8010148 <VL53L0X_WrByte>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	461a      	mov	r2, r3
 800ecdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ece0:	4313      	orrs	r3, r2
 800ece2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ece6:	2200      	movs	r2, #0
 800ece8:	21ff      	movs	r1, #255	; 0xff
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f001 fa2c 	bl	8010148 <VL53L0X_WrByte>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	461a      	mov	r2, r3
 800ecf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecf8:	4313      	orrs	r3, r2
 800ecfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ecfe:	e09e      	b.n	800ee3e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800ed00:	78bb      	ldrb	r3, [r7, #2]
 800ed02:	2b0c      	cmp	r3, #12
 800ed04:	d14c      	bne.n	800eda0 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800ed06:	2238      	movs	r2, #56	; 0x38
 800ed08:	2148      	movs	r1, #72	; 0x48
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f001 fa1c 	bl	8010148 <VL53L0X_WrByte>
 800ed10:	4603      	mov	r3, r0
 800ed12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800ed16:	2208      	movs	r2, #8
 800ed18:	2147      	movs	r1, #71	; 0x47
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f001 fa14 	bl	8010148 <VL53L0X_WrByte>
 800ed20:	4603      	mov	r3, r0
 800ed22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ed26:	2203      	movs	r2, #3
 800ed28:	2132      	movs	r1, #50	; 0x32
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f001 fa0c 	bl	8010148 <VL53L0X_WrByte>
 800ed30:	4603      	mov	r3, r0
 800ed32:	461a      	mov	r2, r3
 800ed34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed38:	4313      	orrs	r3, r2
 800ed3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ed3e:	2208      	movs	r2, #8
 800ed40:	2130      	movs	r1, #48	; 0x30
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f001 fa00 	bl	8010148 <VL53L0X_WrByte>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	461a      	mov	r2, r3
 800ed4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed50:	4313      	orrs	r3, r2
 800ed52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ed56:	2201      	movs	r2, #1
 800ed58:	21ff      	movs	r1, #255	; 0xff
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f001 f9f4 	bl	8010148 <VL53L0X_WrByte>
 800ed60:	4603      	mov	r3, r0
 800ed62:	461a      	mov	r2, r3
 800ed64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ed6e:	2220      	movs	r2, #32
 800ed70:	2130      	movs	r1, #48	; 0x30
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f001 f9e8 	bl	8010148 <VL53L0X_WrByte>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed80:	4313      	orrs	r3, r2
 800ed82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ed86:	2200      	movs	r2, #0
 800ed88:	21ff      	movs	r1, #255	; 0xff
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f001 f9dc 	bl	8010148 <VL53L0X_WrByte>
 800ed90:	4603      	mov	r3, r0
 800ed92:	461a      	mov	r2, r3
 800ed94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed98:	4313      	orrs	r3, r2
 800ed9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed9e:	e04e      	b.n	800ee3e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800eda0:	78bb      	ldrb	r3, [r7, #2]
 800eda2:	2b0e      	cmp	r3, #14
 800eda4:	d14b      	bne.n	800ee3e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800eda6:	2248      	movs	r2, #72	; 0x48
 800eda8:	2148      	movs	r1, #72	; 0x48
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f001 f9cc 	bl	8010148 <VL53L0X_WrByte>
 800edb0:	4603      	mov	r3, r0
 800edb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800edb6:	2208      	movs	r2, #8
 800edb8:	2147      	movs	r1, #71	; 0x47
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f001 f9c4 	bl	8010148 <VL53L0X_WrByte>
 800edc0:	4603      	mov	r3, r0
 800edc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800edc6:	2203      	movs	r2, #3
 800edc8:	2132      	movs	r1, #50	; 0x32
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f001 f9bc 	bl	8010148 <VL53L0X_WrByte>
 800edd0:	4603      	mov	r3, r0
 800edd2:	461a      	mov	r2, r3
 800edd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edd8:	4313      	orrs	r3, r2
 800edda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800edde:	2207      	movs	r2, #7
 800ede0:	2130      	movs	r1, #48	; 0x30
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f001 f9b0 	bl	8010148 <VL53L0X_WrByte>
 800ede8:	4603      	mov	r3, r0
 800edea:	461a      	mov	r2, r3
 800edec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edf0:	4313      	orrs	r3, r2
 800edf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800edf6:	2201      	movs	r2, #1
 800edf8:	21ff      	movs	r1, #255	; 0xff
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f001 f9a4 	bl	8010148 <VL53L0X_WrByte>
 800ee00:	4603      	mov	r3, r0
 800ee02:	461a      	mov	r2, r3
 800ee04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee08:	4313      	orrs	r3, r2
 800ee0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ee0e:	2220      	movs	r2, #32
 800ee10:	2130      	movs	r1, #48	; 0x30
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f001 f998 	bl	8010148 <VL53L0X_WrByte>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee20:	4313      	orrs	r3, r2
 800ee22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ee26:	2200      	movs	r2, #0
 800ee28:	21ff      	movs	r1, #255	; 0xff
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f001 f98c 	bl	8010148 <VL53L0X_WrByte>
 800ee30:	4603      	mov	r3, r0
 800ee32:	461a      	mov	r2, r3
 800ee34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee38:	4313      	orrs	r3, r2
 800ee3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800ee3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d17f      	bne.n	800ef46 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800ee46:	78bb      	ldrb	r3, [r7, #2]
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f7fe fe38 	bl	800dabe <VL53L0X_encode_vcsel_period>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800ee54:	78fb      	ldrb	r3, [r7, #3]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d002      	beq.n	800ee60 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800ee5a:	2b01      	cmp	r3, #1
 800ee5c:	d045      	beq.n	800eeea <VL53L0X_set_vcsel_pulse_period+0x470>
 800ee5e:	e06e      	b.n	800ef3e <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800ee60:	f107 0314 	add.w	r3, r7, #20
 800ee64:	461a      	mov	r2, r3
 800ee66:	2103      	movs	r1, #3
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f7ff fc33 	bl	800e6d4 <get_sequence_step_timeout>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ee74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d109      	bne.n	800ee90 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800ee7c:	f107 0310 	add.w	r3, r7, #16
 800ee80:	461a      	mov	r2, r3
 800ee82:	2102      	movs	r1, #2
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7ff fc25 	bl	800e6d4 <get_sequence_step_timeout>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ee90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d109      	bne.n	800eeac <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800ee98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	2150      	movs	r1, #80	; 0x50
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f001 f951 	bl	8010148 <VL53L0X_WrByte>
 800eea6:	4603      	mov	r3, r0
 800eea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800eeac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d108      	bne.n	800eec6 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	2103      	movs	r1, #3
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f7ff fceb 	bl	800e896 <set_sequence_step_timeout>
 800eec0:	4603      	mov	r3, r0
 800eec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800eec6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d108      	bne.n	800eee0 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	461a      	mov	r2, r3
 800eed2:	2102      	movs	r1, #2
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f7ff fcde 	bl	800e896 <set_sequence_step_timeout>
 800eeda:	4603      	mov	r3, r0
 800eedc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	78ba      	ldrb	r2, [r7, #2]
 800eee4:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800eee8:	e02e      	b.n	800ef48 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800eeea:	f107 0318 	add.w	r3, r7, #24
 800eeee:	461a      	mov	r2, r3
 800eef0:	2104      	movs	r1, #4
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f7ff fbee 	bl	800e6d4 <get_sequence_step_timeout>
 800eef8:	4603      	mov	r3, r0
 800eefa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800eefe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d109      	bne.n	800ef1a <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800ef06:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	2170      	movs	r1, #112	; 0x70
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f001 f91a 	bl	8010148 <VL53L0X_WrByte>
 800ef14:	4603      	mov	r3, r0
 800ef16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800ef1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d108      	bne.n	800ef34 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800ef22:	69bb      	ldr	r3, [r7, #24]
 800ef24:	461a      	mov	r2, r3
 800ef26:	2104      	movs	r1, #4
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f7ff fcb4 	bl	800e896 <set_sequence_step_timeout>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	78ba      	ldrb	r2, [r7, #2]
 800ef38:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800ef3c:	e004      	b.n	800ef48 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ef3e:	23fc      	movs	r3, #252	; 0xfc
 800ef40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef44:	e000      	b.n	800ef48 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800ef46:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800ef48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d109      	bne.n	800ef64 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	695b      	ldr	r3, [r3, #20]
 800ef54:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800ef56:	69f9      	ldr	r1, [r7, #28]
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f7fc fded 	bl	800bb38 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800ef64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d109      	bne.n	800ef80 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800ef6c:	f107 010f 	add.w	r1, r7, #15
 800ef70:	2301      	movs	r3, #1
 800ef72:	2200      	movs	r2, #0
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f7fe fcbd 	bl	800d8f4 <VL53L0X_perform_phase_calibration>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800ef80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3728      	adds	r7, #40	; 0x28
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b086      	sub	sp, #24
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	460b      	mov	r3, r1
 800ef96:	607a      	str	r2, [r7, #4]
 800ef98:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800ef9e:	7afb      	ldrb	r3, [r7, #11]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d002      	beq.n	800efaa <VL53L0X_get_vcsel_pulse_period+0x1e>
 800efa4:	2b01      	cmp	r3, #1
 800efa6:	d00a      	beq.n	800efbe <VL53L0X_get_vcsel_pulse_period+0x32>
 800efa8:	e013      	b.n	800efd2 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800efaa:	f107 0316 	add.w	r3, r7, #22
 800efae:	461a      	mov	r2, r3
 800efb0:	2150      	movs	r1, #80	; 0x50
 800efb2:	68f8      	ldr	r0, [r7, #12]
 800efb4:	f001 f94a 	bl	801024c <VL53L0X_RdByte>
 800efb8:	4603      	mov	r3, r0
 800efba:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800efbc:	e00b      	b.n	800efd6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800efbe:	f107 0316 	add.w	r3, r7, #22
 800efc2:	461a      	mov	r2, r3
 800efc4:	2170      	movs	r1, #112	; 0x70
 800efc6:	68f8      	ldr	r0, [r7, #12]
 800efc8:	f001 f940 	bl	801024c <VL53L0X_RdByte>
 800efcc:	4603      	mov	r3, r0
 800efce:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800efd0:	e001      	b.n	800efd6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800efd2:	23fc      	movs	r3, #252	; 0xfc
 800efd4:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800efd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d107      	bne.n	800efee <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800efde:	7dbb      	ldrb	r3, [r7, #22]
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7fe fd59 	bl	800da98 <VL53L0X_decode_vcsel_period>
 800efe6:	4603      	mov	r3, r0
 800efe8:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	701a      	strb	r2, [r3, #0]

	return Status;
 800efee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3718      	adds	r7, #24
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}

0800effa <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800effa:	b580      	push	{r7, lr}
 800effc:	b092      	sub	sp, #72	; 0x48
 800effe:	af00      	add	r7, sp, #0
 800f000:	6078      	str	r0, [r7, #4]
 800f002:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f004:	2300      	movs	r3, #0
 800f006:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800f00a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f00e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800f010:	f240 7376 	movw	r3, #1910	; 0x776
 800f014:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800f016:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800f01a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800f01c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800f020:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800f022:	f240 234e 	movw	r3, #590	; 0x24e
 800f026:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800f028:	f240 23b2 	movw	r3, #690	; 0x2b2
 800f02c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800f02e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800f032:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800f034:	f240 2326 	movw	r3, #550	; 0x226
 800f038:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800f03a:	2300      	movs	r3, #0
 800f03c:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800f03e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f042:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800f044:	2300      	movs	r3, #0
 800f046:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800f048:	683a      	ldr	r2, [r7, #0]
 800f04a:	6a3b      	ldr	r3, [r7, #32]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d205      	bcs.n	800f05c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f050:	23fc      	movs	r3, #252	; 0xfc
 800f052:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800f056:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f05a:	e0aa      	b.n	800f1b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800f05c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f060:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800f062:	683a      	ldr	r2, [r7, #0]
 800f064:	1ad3      	subs	r3, r2, r3
 800f066:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800f068:	f107 0314 	add.w	r3, r7, #20
 800f06c:	4619      	mov	r1, r3
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f7fc feac 	bl	800bdcc <VL53L0X_GetSequenceStepEnables>
 800f074:	4603      	mov	r3, r0
 800f076:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800f07a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d15b      	bne.n	800f13a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800f082:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800f084:	2b00      	cmp	r3, #0
 800f086:	d105      	bne.n	800f094 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800f088:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d102      	bne.n	800f094 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800f08e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800f090:	2b00      	cmp	r3, #0
 800f092:	d052      	beq.n	800f13a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800f094:	f107 0310 	add.w	r3, r7, #16
 800f098:	461a      	mov	r2, r3
 800f09a:	2102      	movs	r1, #2
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f7ff fb19 	bl	800e6d4 <get_sequence_step_timeout>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800f0a8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d002      	beq.n	800f0b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800f0b0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f0b4:	e07d      	b.n	800f1b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800f0b6:	7d3b      	ldrb	r3, [r7, #20]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d00f      	beq.n	800f0dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800f0bc:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800f0be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0c0:	4413      	add	r3, r2
 800f0c2:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800f0c4:	69fa      	ldr	r2, [r7, #28]
 800f0c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d204      	bcs.n	800f0d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800f0cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f0ce:	69fb      	ldr	r3, [r7, #28]
 800f0d0:	1ad3      	subs	r3, r2, r3
 800f0d2:	643b      	str	r3, [r7, #64]	; 0x40
 800f0d4:	e002      	b.n	800f0dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f0d6:	23fc      	movs	r3, #252	; 0xfc
 800f0d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800f0dc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d002      	beq.n	800f0ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800f0e4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f0e8:	e063      	b.n	800f1b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800f0ea:	7dbb      	ldrb	r3, [r7, #22]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d011      	beq.n	800f114 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800f0f0:	693a      	ldr	r2, [r7, #16]
 800f0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f4:	4413      	add	r3, r2
 800f0f6:	005b      	lsls	r3, r3, #1
 800f0f8:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800f0fa:	69fa      	ldr	r2, [r7, #28]
 800f0fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0fe:	429a      	cmp	r2, r3
 800f100:	d204      	bcs.n	800f10c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800f102:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	1ad3      	subs	r3, r2, r3
 800f108:	643b      	str	r3, [r7, #64]	; 0x40
 800f10a:	e016      	b.n	800f13a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f10c:	23fc      	movs	r3, #252	; 0xfc
 800f10e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800f112:	e012      	b.n	800f13a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800f114:	7d7b      	ldrb	r3, [r7, #21]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d00f      	beq.n	800f13a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f11e:	4413      	add	r3, r2
 800f120:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800f122:	69fa      	ldr	r2, [r7, #28]
 800f124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f126:	429a      	cmp	r2, r3
 800f128:	d204      	bcs.n	800f134 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800f12a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	1ad3      	subs	r3, r2, r3
 800f130:	643b      	str	r3, [r7, #64]	; 0x40
 800f132:	e002      	b.n	800f13a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f134:	23fc      	movs	r3, #252	; 0xfc
 800f136:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800f13a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d002      	beq.n	800f148 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800f142:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f146:	e034      	b.n	800f1b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800f148:	7dfb      	ldrb	r3, [r7, #23]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d019      	beq.n	800f182 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800f14e:	f107 030c 	add.w	r3, r7, #12
 800f152:	461a      	mov	r2, r3
 800f154:	2103      	movs	r1, #3
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f7ff fabc 	bl	800e6d4 <get_sequence_step_timeout>
 800f15c:	4603      	mov	r3, r0
 800f15e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f166:	4413      	add	r3, r2
 800f168:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800f16a:	69fa      	ldr	r2, [r7, #28]
 800f16c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f16e:	429a      	cmp	r2, r3
 800f170:	d204      	bcs.n	800f17c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800f172:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	1ad3      	subs	r3, r2, r3
 800f178:	643b      	str	r3, [r7, #64]	; 0x40
 800f17a:	e002      	b.n	800f182 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f17c:	23fc      	movs	r3, #252	; 0xfc
 800f17e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800f182:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f186:	2b00      	cmp	r3, #0
 800f188:	d111      	bne.n	800f1ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800f18a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d00e      	beq.n	800f1ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800f190:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f194:	1ad3      	subs	r3, r2, r3
 800f196:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800f198:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f19a:	2104      	movs	r1, #4
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f7ff fb7a 	bl	800e896 <set_sequence_step_timeout>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	683a      	ldr	r2, [r7, #0]
 800f1ac:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800f1ae:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3748      	adds	r7, #72	; 0x48
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}

0800f1ba <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800f1ba:	b580      	push	{r7, lr}
 800f1bc:	b090      	sub	sp, #64	; 0x40
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	6078      	str	r0, [r7, #4]
 800f1c2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800f1ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f1ce:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800f1d0:	f240 7376 	movw	r3, #1910	; 0x776
 800f1d4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800f1d6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800f1da:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800f1dc:	f44f 7325 	mov.w	r3, #660	; 0x294
 800f1e0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800f1e2:	f240 234e 	movw	r3, #590	; 0x24e
 800f1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800f1e8:	f240 23b2 	movw	r3, #690	; 0x2b2
 800f1ec:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800f1ee:	f44f 7325 	mov.w	r3, #660	; 0x294
 800f1f2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800f1f4:	f240 2326 	movw	r3, #550	; 0x226
 800f1f8:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800f1fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f202:	441a      	add	r2, r3
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800f208:	f107 0318 	add.w	r3, r7, #24
 800f20c:	4619      	mov	r1, r3
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f7fc fddc 	bl	800bdcc <VL53L0X_GetSequenceStepEnables>
 800f214:	4603      	mov	r3, r0
 800f216:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800f21a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d002      	beq.n	800f228 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800f222:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f226:	e075      	b.n	800f314 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800f228:	7e3b      	ldrb	r3, [r7, #24]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d105      	bne.n	800f23a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800f22e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800f230:	2b00      	cmp	r3, #0
 800f232:	d102      	bne.n	800f23a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800f234:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800f236:	2b00      	cmp	r3, #0
 800f238:	d030      	beq.n	800f29c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800f23a:	f107 0310 	add.w	r3, r7, #16
 800f23e:	461a      	mov	r2, r3
 800f240:	2102      	movs	r1, #2
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f7ff fa46 	bl	800e6d4 <get_sequence_step_timeout>
 800f248:	4603      	mov	r3, r0
 800f24a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800f24e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f252:	2b00      	cmp	r3, #0
 800f254:	d122      	bne.n	800f29c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800f256:	7e3b      	ldrb	r3, [r7, #24]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d007      	beq.n	800f26c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800f260:	6939      	ldr	r1, [r7, #16]
 800f262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f264:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800f266:	441a      	add	r2, r3
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800f26c:	7ebb      	ldrb	r3, [r7, #26]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d009      	beq.n	800f286 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800f276:	6939      	ldr	r1, [r7, #16]
 800f278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27a:	440b      	add	r3, r1
 800f27c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800f27e:	441a      	add	r2, r3
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	601a      	str	r2, [r3, #0]
 800f284:	e00a      	b.n	800f29c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800f286:	7e7b      	ldrb	r3, [r7, #25]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d007      	beq.n	800f29c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800f290:	6939      	ldr	r1, [r7, #16]
 800f292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f294:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800f296:	441a      	add	r2, r3
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f29c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d114      	bne.n	800f2ce <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800f2a4:	7efb      	ldrb	r3, [r7, #27]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d011      	beq.n	800f2ce <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800f2aa:	f107 030c 	add.w	r3, r7, #12
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	2103      	movs	r1, #3
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7ff fa0e 	bl	800e6d4 <get_sequence_step_timeout>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800f2c2:	68f9      	ldr	r1, [r7, #12]
 800f2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c6:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800f2c8:	441a      	add	r2, r3
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f2ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d114      	bne.n	800f300 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800f2d6:	7f3b      	ldrb	r3, [r7, #28]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d011      	beq.n	800f300 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800f2dc:	f107 0314 	add.w	r3, r7, #20
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	2104      	movs	r1, #4
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7ff f9f5 	bl	800e6d4 <get_sequence_step_timeout>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800f2f4:	6979      	ldr	r1, [r7, #20]
 800f2f6:	6a3b      	ldr	r3, [r7, #32]
 800f2f8:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800f2fa:	441a      	add	r2, r3
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f300:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f304:	2b00      	cmp	r3, #0
 800f306:	d103      	bne.n	800f310 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	681a      	ldr	r2, [r3, #0]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f310:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f314:	4618      	mov	r0, r3
 800f316:	3740      	adds	r7, #64	; 0x40
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b088      	sub	sp, #32
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f326:	2300      	movs	r3, #0
 800f328:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800f32a:	2300      	movs	r3, #0
 800f32c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800f32e:	e0c6      	b.n	800f4be <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	683a      	ldr	r2, [r7, #0]
 800f334:	4413      	add	r3, r2
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	74fb      	strb	r3, [r7, #19]
		Index++;
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	3301      	adds	r3, #1
 800f33e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800f340:	7cfb      	ldrb	r3, [r7, #19]
 800f342:	2bff      	cmp	r3, #255	; 0xff
 800f344:	f040 808d 	bne.w	800f462 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	683a      	ldr	r2, [r7, #0]
 800f34c:	4413      	add	r3, r2
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	747b      	strb	r3, [r7, #17]
			Index++;
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	3301      	adds	r3, #1
 800f356:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800f358:	7c7b      	ldrb	r3, [r7, #17]
 800f35a:	2b03      	cmp	r3, #3
 800f35c:	d87e      	bhi.n	800f45c <VL53L0X_load_tuning_settings+0x140>
 800f35e:	a201      	add	r2, pc, #4	; (adr r2, 800f364 <VL53L0X_load_tuning_settings+0x48>)
 800f360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f364:	0800f375 	.word	0x0800f375
 800f368:	0800f3af 	.word	0x0800f3af
 800f36c:	0800f3e9 	.word	0x0800f3e9
 800f370:	0800f423 	.word	0x0800f423
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	683a      	ldr	r2, [r7, #0]
 800f378:	4413      	add	r3, r2
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	743b      	strb	r3, [r7, #16]
				Index++;
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	3301      	adds	r3, #1
 800f382:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	683a      	ldr	r2, [r7, #0]
 800f388:	4413      	add	r3, r2
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	3301      	adds	r3, #1
 800f392:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f394:	7c3b      	ldrb	r3, [r7, #16]
 800f396:	b29b      	uxth	r3, r3
 800f398:	021b      	lsls	r3, r3, #8
 800f39a:	b29a      	uxth	r2, r3
 800f39c:	7bfb      	ldrb	r3, [r7, #15]
 800f39e:	b29b      	uxth	r3, r3
 800f3a0:	4413      	add	r3, r2
 800f3a2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	89ba      	ldrh	r2, [r7, #12]
 800f3a8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800f3ac:	e087      	b.n	800f4be <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	683a      	ldr	r2, [r7, #0]
 800f3b2:	4413      	add	r3, r2
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	743b      	strb	r3, [r7, #16]
				Index++;
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	3301      	adds	r3, #1
 800f3bc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	683a      	ldr	r2, [r7, #0]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	781b      	ldrb	r3, [r3, #0]
 800f3c6:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f3ce:	7c3b      	ldrb	r3, [r7, #16]
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	021b      	lsls	r3, r3, #8
 800f3d4:	b29a      	uxth	r2, r3
 800f3d6:	7bfb      	ldrb	r3, [r7, #15]
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	4413      	add	r3, r2
 800f3dc:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	89ba      	ldrh	r2, [r7, #12]
 800f3e2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800f3e6:	e06a      	b.n	800f4be <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	683a      	ldr	r2, [r7, #0]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	781b      	ldrb	r3, [r3, #0]
 800f3f0:	743b      	strb	r3, [r7, #16]
				Index++;
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	683a      	ldr	r2, [r7, #0]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	3301      	adds	r3, #1
 800f406:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f408:	7c3b      	ldrb	r3, [r7, #16]
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	021b      	lsls	r3, r3, #8
 800f40e:	b29a      	uxth	r2, r3
 800f410:	7bfb      	ldrb	r3, [r7, #15]
 800f412:	b29b      	uxth	r3, r3
 800f414:	4413      	add	r3, r2
 800f416:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	89ba      	ldrh	r2, [r7, #12]
 800f41c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800f420:	e04d      	b.n	800f4be <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	683a      	ldr	r2, [r7, #0]
 800f426:	4413      	add	r3, r2
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	743b      	strb	r3, [r7, #16]
				Index++;
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	3301      	adds	r3, #1
 800f430:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	683a      	ldr	r2, [r7, #0]
 800f436:	4413      	add	r3, r2
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	3301      	adds	r3, #1
 800f440:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f442:	7c3b      	ldrb	r3, [r7, #16]
 800f444:	b29b      	uxth	r3, r3
 800f446:	021b      	lsls	r3, r3, #8
 800f448:	b29a      	uxth	r2, r3
 800f44a:	7bfb      	ldrb	r3, [r7, #15]
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	4413      	add	r3, r2
 800f450:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	89ba      	ldrh	r2, [r7, #12]
 800f456:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800f45a:	e030      	b.n	800f4be <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f45c:	23fc      	movs	r3, #252	; 0xfc
 800f45e:	77fb      	strb	r3, [r7, #31]
 800f460:	e02d      	b.n	800f4be <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800f462:	7cfb      	ldrb	r3, [r7, #19]
 800f464:	2b04      	cmp	r3, #4
 800f466:	d828      	bhi.n	800f4ba <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	683a      	ldr	r2, [r7, #0]
 800f46c:	4413      	add	r3, r2
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	74bb      	strb	r3, [r7, #18]
			Index++;
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	3301      	adds	r3, #1
 800f476:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800f478:	2300      	movs	r3, #0
 800f47a:	61bb      	str	r3, [r7, #24]
 800f47c:	e00f      	b.n	800f49e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	683a      	ldr	r2, [r7, #0]
 800f482:	4413      	add	r3, r2
 800f484:	7819      	ldrb	r1, [r3, #0]
 800f486:	f107 0208 	add.w	r2, r7, #8
 800f48a:	69bb      	ldr	r3, [r7, #24]
 800f48c:	4413      	add	r3, r2
 800f48e:	460a      	mov	r2, r1
 800f490:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	3301      	adds	r3, #1
 800f496:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	3301      	adds	r3, #1
 800f49c:	61bb      	str	r3, [r7, #24]
 800f49e:	7cfb      	ldrb	r3, [r7, #19]
 800f4a0:	69ba      	ldr	r2, [r7, #24]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	dbeb      	blt.n	800f47e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800f4a6:	7cfb      	ldrb	r3, [r7, #19]
 800f4a8:	f107 0208 	add.w	r2, r7, #8
 800f4ac:	7cb9      	ldrb	r1, [r7, #18]
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f000 fdee 	bl	8010090 <VL53L0X_WriteMulti>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	77fb      	strb	r3, [r7, #31]
 800f4b8:	e001      	b.n	800f4be <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f4ba:	23fc      	movs	r3, #252	; 0xfc
 800f4bc:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	683a      	ldr	r2, [r7, #0]
 800f4c2:	4413      	add	r3, r2
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d004      	beq.n	800f4d4 <VL53L0X_load_tuning_settings+0x1b8>
 800f4ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	f43f af2e 	beq.w	800f330 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f4d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3720      	adds	r7, #32
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}

0800f4e0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b088      	sub	sp, #32
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	60f8      	str	r0, [r7, #12]
 800f4e8:	60b9      	str	r1, [r7, #8]
 800f4ea:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800f4f6:	f107 0313 	add.w	r3, r7, #19
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	68f8      	ldr	r0, [r7, #12]
 800f4fe:	f7fc fcf1 	bl	800bee4 <VL53L0X_GetXTalkCompensationEnable>
 800f502:	4603      	mov	r3, r0
 800f504:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800f506:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d111      	bne.n	800f532 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800f50e:	7cfb      	ldrb	r3, [r7, #19]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d00e      	beq.n	800f532 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	6a1b      	ldr	r3, [r3, #32]
 800f518:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	8a9b      	ldrh	r3, [r3, #20]
 800f51e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	fb02 f303 	mul.w	r3, r2, r3
 800f526:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	3380      	adds	r3, #128	; 0x80
 800f52c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800f532:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f536:	4618      	mov	r0, r3
 800f538:	3720      	adds	r7, #32
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}

0800f53e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800f53e:	b580      	push	{r7, lr}
 800f540:	b086      	sub	sp, #24
 800f542:	af00      	add	r7, sp, #0
 800f544:	60f8      	str	r0, [r7, #12]
 800f546:	60b9      	str	r1, [r7, #8]
 800f548:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f54a:	2300      	movs	r3, #0
 800f54c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800f556:	f107 0310 	add.w	r3, r7, #16
 800f55a:	461a      	mov	r2, r3
 800f55c:	68b9      	ldr	r1, [r7, #8]
 800f55e:	68f8      	ldr	r0, [r7, #12]
 800f560:	f7ff ffbe 	bl	800f4e0 <VL53L0X_get_total_xtalk_rate>
 800f564:	4603      	mov	r3, r0
 800f566:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800f568:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d105      	bne.n	800f57c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681a      	ldr	r2, [r3, #0]
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	441a      	add	r2, r3
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	601a      	str	r2, [r3, #0]

	return Status;
 800f57c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f580:	4618      	mov	r0, r3
 800f582:	3718      	adds	r7, #24
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}

0800f588 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b09a      	sub	sp, #104	; 0x68
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	60b9      	str	r1, [r7, #8]
 800f592:	607a      	str	r2, [r7, #4]
 800f594:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800f596:	2312      	movs	r3, #18
 800f598:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800f59a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f59e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800f5a0:	2342      	movs	r3, #66	; 0x42
 800f5a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800f5a4:	2306      	movs	r3, #6
 800f5a6:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800f5a8:	2307      	movs	r3, #7
 800f5aa:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800f5b8:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800f5c0:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800f5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5c6:	fb02 f303 	mul.w	r3, r2, r3
 800f5ca:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800f5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ce:	3380      	adds	r3, #128	; 0x80
 800f5d0:	0a1b      	lsrs	r3, r3, #8
 800f5d2:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800f5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f5d8:	fb02 f303 	mul.w	r3, r2, r3
 800f5dc:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d01a      	beq.n	800f61e <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	029b      	lsls	r3, r3, #10
 800f5ec:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800f5f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5f4:	4413      	add	r3, r2
 800f5f6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800f5f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f600:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800f602:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f604:	4613      	mov	r3, r2
 800f606:	005b      	lsls	r3, r3, #1
 800f608:	4413      	add	r3, r2
 800f60a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800f60c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f60e:	fb03 f303 	mul.w	r3, r3, r3
 800f612:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800f614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f616:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f61a:	0c1b      	lsrs	r3, r3, #16
 800f61c:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f622:	fb02 f303 	mul.w	r3, r2, r3
 800f626:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800f628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f62e:	0c1b      	lsrs	r3, r3, #16
 800f630:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800f632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f634:	fb03 f303 	mul.w	r3, r3, r3
 800f638:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800f63a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f63c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f640:	0c1b      	lsrs	r3, r3, #16
 800f642:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800f644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f646:	085a      	lsrs	r2, r3, #1
 800f648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f64a:	441a      	add	r2, r3
 800f64c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f64e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f652:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800f654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f658:	fb02 f303 	mul.w	r3, r2, r3
 800f65c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800f65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f664:	d302      	bcc.n	800f66c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800f666:	4b54      	ldr	r3, [pc, #336]	; (800f7b8 <VL53L0X_calc_dmax+0x230>)
 800f668:	663b      	str	r3, [r7, #96]	; 0x60
 800f66a:	e015      	b.n	800f698 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800f66c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f66e:	085a      	lsrs	r2, r3, #1
 800f670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f672:	441a      	add	r2, r3
 800f674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f676:	fbb2 f3f3 	udiv	r3, r2, r3
 800f67a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800f67c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f67e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f680:	fb02 f303 	mul.w	r3, r2, r3
 800f684:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800f686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f688:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f68c:	0c1b      	lsrs	r3, r3, #16
 800f68e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800f690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f692:	fb03 f303 	mul.w	r3, r3, r3
 800f696:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800f698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f69a:	039b      	lsls	r3, r3, #14
 800f69c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f6a0:	4a46      	ldr	r2, [pc, #280]	; (800f7bc <VL53L0X_calc_dmax+0x234>)
 800f6a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f6a6:	099b      	lsrs	r3, r3, #6
 800f6a8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800f6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ac:	fb03 f303 	mul.w	r3, r3, r3
 800f6b0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800f6b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6b4:	fb03 f303 	mul.w	r3, r3, r3
 800f6b8:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800f6ba:	6a3b      	ldr	r3, [r7, #32]
 800f6bc:	3308      	adds	r3, #8
 800f6be:	091b      	lsrs	r3, r3, #4
 800f6c0:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800f6c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6c4:	6a3b      	ldr	r3, [r7, #32]
 800f6c6:	1ad3      	subs	r3, r2, r3
 800f6c8:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800f6ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6cc:	4613      	mov	r3, r2
 800f6ce:	005b      	lsls	r3, r3, #1
 800f6d0:	4413      	add	r3, r2
 800f6d2:	011b      	lsls	r3, r3, #4
 800f6d4:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800f6d6:	69fb      	ldr	r3, [r7, #28]
 800f6d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f6dc:	0b9b      	lsrs	r3, r3, #14
 800f6de:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800f6e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6e4:	4413      	add	r3, r2
 800f6e6:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800f6e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6ea:	085b      	lsrs	r3, r3, #1
 800f6ec:	69ba      	ldr	r2, [r7, #24]
 800f6ee:	4413      	add	r3, r2
 800f6f0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800f6f2:	69ba      	ldr	r2, [r7, #24]
 800f6f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6fa:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	039b      	lsls	r3, r3, #14
 800f700:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800f702:	69fb      	ldr	r3, [r7, #28]
 800f704:	085b      	lsrs	r3, r3, #1
 800f706:	69ba      	ldr	r2, [r7, #24]
 800f708:	4413      	add	r3, r2
 800f70a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800f70c:	69ba      	ldr	r2, [r7, #24]
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	fbb2 f3f3 	udiv	r3, r2, r3
 800f714:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800f716:	69bb      	ldr	r3, [r7, #24]
 800f718:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f71a:	fb02 f303 	mul.w	r3, r2, r3
 800f71e:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800f720:	69bb      	ldr	r3, [r7, #24]
 800f722:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f726:	4a25      	ldr	r2, [pc, #148]	; (800f7bc <VL53L0X_calc_dmax+0x234>)
 800f728:	fba2 2303 	umull	r2, r3, r2, r3
 800f72c:	099b      	lsrs	r3, r3, #6
 800f72e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800f730:	69bb      	ldr	r3, [r7, #24]
 800f732:	011b      	lsls	r3, r3, #4
 800f734:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f73c:	4a1f      	ldr	r2, [pc, #124]	; (800f7bc <VL53L0X_calc_dmax+0x234>)
 800f73e:	fba2 2303 	umull	r2, r3, r2, r3
 800f742:	099b      	lsrs	r3, r3, #6
 800f744:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800f746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f748:	3380      	adds	r3, #128	; 0x80
 800f74a:	0a1b      	lsrs	r3, r3, #8
 800f74c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d008      	beq.n	800f766 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	085a      	lsrs	r2, r3, #1
 800f758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f75a:	441a      	add	r2, r3
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f762:	65bb      	str	r3, [r7, #88]	; 0x58
 800f764:	e001      	b.n	800f76a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800f766:	2300      	movs	r3, #0
 800f768:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800f76a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f76c:	f7fe f9ba 	bl	800dae4 <VL53L0X_isqrt>
 800f770:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800f772:	69bb      	ldr	r3, [r7, #24]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d008      	beq.n	800f78a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800f778:	69bb      	ldr	r3, [r7, #24]
 800f77a:	085a      	lsrs	r2, r3, #1
 800f77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f77e:	441a      	add	r2, r3
 800f780:	69bb      	ldr	r3, [r7, #24]
 800f782:	fbb2 f3f3 	udiv	r3, r2, r3
 800f786:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f788:	e001      	b.n	800f78e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800f78a:	2300      	movs	r3, #0
 800f78c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800f78e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f790:	f7fe f9a8 	bl	800dae4 <VL53L0X_isqrt>
 800f794:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800f796:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f798:	693a      	ldr	r2, [r7, #16]
 800f79a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800f79c:	693a      	ldr	r2, [r7, #16]
 800f79e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d902      	bls.n	800f7aa <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800f7a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f7a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f7a8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800f7aa:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3768      	adds	r7, #104	; 0x68
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}
 800f7b6:	bf00      	nop
 800f7b8:	fff00000 	.word	0xfff00000
 800f7bc:	10624dd3 	.word	0x10624dd3

0800f7c0 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b0b4      	sub	sp, #208	; 0xd0
 800f7c4:	af04      	add	r7, sp, #16
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	607a      	str	r2, [r7, #4]
 800f7cc:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800f7ce:	f44f 7348 	mov.w	r3, #800	; 0x320
 800f7d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800f7d6:	f44f 7316 	mov.w	r3, #600	; 0x258
 800f7da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800f7de:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800f7e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800f7e6:	f241 235c 	movw	r3, #4700	; 0x125c
 800f7ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800f7ee:	4b9e      	ldr	r3, [pc, #632]	; (800fa68 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800f7f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800f7f4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800f7f8:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800f7fa:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800f7fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f802:	fbb2 f3f3 	udiv	r3, r2, r3
 800f806:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800f808:	4b98      	ldr	r3, [pc, #608]	; (800fa6c <VL53L0X_calc_sigma_estimate+0x2ac>)
 800f80a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800f80c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f810:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800f812:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800f816:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800f818:	f240 6377 	movw	r3, #1655	; 0x677
 800f81c:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f81e:	2300      	movs	r3, #0
 800f820:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	6a1b      	ldr	r3, [r3, #32]
 800f828:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	691b      	ldr	r3, [r3, #16]
 800f82e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f832:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800f836:	0c1b      	lsrs	r3, r3, #16
 800f838:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800f840:	f107 0310 	add.w	r3, r7, #16
 800f844:	461a      	mov	r2, r3
 800f846:	68b9      	ldr	r1, [r7, #8]
 800f848:	68f8      	ldr	r0, [r7, #12]
 800f84a:	f7ff fe78 	bl	800f53e <VL53L0X_get_total_signal_rate>
 800f84e:	4603      	mov	r3, r0
 800f850:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800f854:	f107 0314 	add.w	r3, r7, #20
 800f858:	461a      	mov	r2, r3
 800f85a:	68b9      	ldr	r1, [r7, #8]
 800f85c:	68f8      	ldr	r0, [r7, #12]
 800f85e:	f7ff fe3f 	bl	800f4e0 <VL53L0X_get_total_xtalk_rate>
 800f862:	4603      	mov	r3, r0
 800f864:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f86e:	fb02 f303 	mul.w	r3, r2, r3
 800f872:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800f874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f876:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f87a:	0c1b      	lsrs	r3, r3, #16
 800f87c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f884:	fb02 f303 	mul.w	r3, r2, r3
 800f888:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800f88c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f892:	429a      	cmp	r2, r3
 800f894:	d902      	bls.n	800f89c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800f896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f898:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800f89c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d168      	bne.n	800f976 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f8aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800f8b4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f8b8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f8bc:	461a      	mov	r2, r3
 800f8be:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800f8c2:	68f8      	ldr	r0, [r7, #12]
 800f8c4:	f7fe feb2 	bl	800e62c <VL53L0X_calc_timeout_mclks>
 800f8c8:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f8d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800f8da:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f8de:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800f8e8:	68f8      	ldr	r0, [r7, #12]
 800f8ea:	f7fe fe9f 	bl	800e62c <VL53L0X_calc_timeout_mclks>
 800f8ee:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800f8f0:	2303      	movs	r3, #3
 800f8f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800f8f6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f8fa:	2b08      	cmp	r3, #8
 800f8fc:	d102      	bne.n	800f904 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800f8fe:	2302      	movs	r3, #2
 800f900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800f904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f908:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800f90a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f90e:	fb02 f303 	mul.w	r3, r2, r3
 800f912:	02db      	lsls	r3, r3, #11
 800f914:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f918:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f91c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f920:	4a53      	ldr	r2, [pc, #332]	; (800fa70 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f922:	fba2 2303 	umull	r2, r3, r2, r3
 800f926:	099b      	lsrs	r3, r3, #6
 800f928:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800f92c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f930:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f932:	fb02 f303 	mul.w	r3, r2, r3
 800f936:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f93a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f93e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f942:	4a4b      	ldr	r2, [pc, #300]	; (800fa70 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f944:	fba2 2303 	umull	r2, r3, r2, r3
 800f948:	099b      	lsrs	r3, r3, #6
 800f94a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	3380      	adds	r3, #128	; 0x80
 800f952:	0a1b      	lsrs	r3, r3, #8
 800f954:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800f956:	693a      	ldr	r2, [r7, #16]
 800f958:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f95c:	fb02 f303 	mul.w	r3, r2, r3
 800f960:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800f964:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f968:	3380      	adds	r3, #128	; 0x80
 800f96a:	0a1b      	lsrs	r3, r3, #8
 800f96c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	021b      	lsls	r3, r3, #8
 800f974:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800f976:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d002      	beq.n	800f984 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800f97e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f982:	e15e      	b.n	800fc42 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800f984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f986:	2b00      	cmp	r3, #0
 800f988:	d10c      	bne.n	800f9a4 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f990:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f998:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	601a      	str	r2, [r3, #0]
 800f9a2:	e14c      	b.n	800fc3e <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800f9a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d102      	bne.n	800f9b2 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800f9b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9b6:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800f9b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9ba:	041a      	lsls	r2, r3, #16
 800f9bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9be:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800f9c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f9ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d902      	bls.n	800f9d6 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800f9d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f9d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800f9d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f9da:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f9de:	fb02 f303 	mul.w	r3, r2, r3
 800f9e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800f9e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f9ea:	4613      	mov	r3, r2
 800f9ec:	005b      	lsls	r3, r3, #1
 800f9ee:	4413      	add	r3, r2
 800f9f0:	009b      	lsls	r3, r3, #2
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f7fe f876 	bl	800dae4 <VL53L0X_isqrt>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	005b      	lsls	r3, r3, #1
 800f9fc:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	891b      	ldrh	r3, [r3, #8]
 800fa02:	461a      	mov	r2, r3
 800fa04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fa06:	fb02 f303 	mul.w	r3, r2, r3
 800fa0a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800fa0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa0e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800fa10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fa14:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800fa16:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800fa18:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800fa1c:	4a14      	ldr	r2, [pc, #80]	; (800fa70 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800fa1e:	fba2 2303 	umull	r2, r3, r2, r3
 800fa22:	099b      	lsrs	r3, r3, #6
 800fa24:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800fa26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa28:	041b      	lsls	r3, r3, #16
 800fa2a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800fa2e:	4a10      	ldr	r2, [pc, #64]	; (800fa70 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800fa30:	fba2 2303 	umull	r2, r3, r2, r3
 800fa34:	099b      	lsrs	r3, r3, #6
 800fa36:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800fa38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa3a:	021b      	lsls	r3, r3, #8
 800fa3c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800fa3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa42:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	bfb8      	it	lt
 800fa4a:	425b      	neglt	r3, r3
 800fa4c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800fa4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa50:	021b      	lsls	r3, r3, #8
 800fa52:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	7e1b      	ldrb	r3, [r3, #24]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d00b      	beq.n	800fa74 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800fa5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fa60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fa64:	e033      	b.n	800face <VL53L0X_calc_sigma_estimate+0x30e>
 800fa66:	bf00      	nop
 800fa68:	028f87ae 	.word	0x028f87ae
 800fa6c:	0006999a 	.word	0x0006999a
 800fa70:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800fa74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fa76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800fa82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa84:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800fa88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fa8c:	fb02 f303 	mul.w	r3, r2, r3
 800fa90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800fa94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800fa98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa9a:	4413      	add	r3, r2
 800fa9c:	0c1b      	lsrs	r3, r3, #16
 800fa9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800faa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800faa6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800faaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800faae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fab2:	085b      	lsrs	r3, r3, #1
 800fab4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800fab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fabc:	fb03 f303 	mul.w	r3, r3, r3
 800fac0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800fac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fac8:	0b9b      	lsrs	r3, r3, #14
 800faca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800face:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fad4:	fb02 f303 	mul.w	r3, r2, r3
 800fad8:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800fada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fadc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800fae0:	0c1b      	lsrs	r3, r3, #16
 800fae2:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800fae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae6:	fb03 f303 	mul.w	r3, r3, r3
 800faea:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800faec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800faf0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800faf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800faf8:	0c1b      	lsrs	r3, r3, #16
 800fafa:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800fafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafe:	fb03 f303 	mul.w	r3, r3, r3
 800fb02:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800fb04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb08:	4413      	add	r3, r2
 800fb0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800fb0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb0e:	f7fd ffe9 	bl	800dae4 <VL53L0X_isqrt>
 800fb12:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800fb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb16:	041b      	lsls	r3, r3, #16
 800fb18:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800fb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb1c:	3332      	adds	r3, #50	; 0x32
 800fb1e:	4a4b      	ldr	r2, [pc, #300]	; (800fc4c <VL53L0X_calc_sigma_estimate+0x48c>)
 800fb20:	fba2 2303 	umull	r2, r3, r2, r3
 800fb24:	095a      	lsrs	r2, r3, #5
 800fb26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb28:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800fb30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb34:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800fb38:	fb02 f303 	mul.w	r3, r2, r3
 800fb3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800fb40:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fb44:	f241 3388 	movw	r3, #5000	; 0x1388
 800fb48:	4413      	add	r3, r2
 800fb4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800fb4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb52:	4a3f      	ldr	r2, [pc, #252]	; (800fc50 <VL53L0X_calc_sigma_estimate+0x490>)
 800fb54:	fba2 2303 	umull	r2, r3, r2, r3
 800fb58:	0b5b      	lsrs	r3, r3, #13
 800fb5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800fb5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fb62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d902      	bls.n	800fb6e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800fb68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fb6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800fb6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fb72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fb76:	4413      	add	r3, r2
 800fb78:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800fb7c:	4a35      	ldr	r2, [pc, #212]	; (800fc54 <VL53L0X_calc_sigma_estimate+0x494>)
 800fb7e:	fba2 2303 	umull	r2, r3, r2, r3
 800fb82:	099b      	lsrs	r3, r3, #6
 800fb84:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800fb86:	6a3b      	ldr	r3, [r7, #32]
 800fb88:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800fb8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fb8e:	441a      	add	r2, r3
 800fb90:	6a3b      	ldr	r3, [r7, #32]
 800fb92:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fd ffa4 	bl	800dae4 <VL53L0X_isqrt>
 800fb9c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	021b      	lsls	r3, r3, #8
 800fba2:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800fba4:	69fb      	ldr	r3, [r7, #28]
 800fba6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800fbaa:	4a2a      	ldr	r2, [pc, #168]	; (800fc54 <VL53L0X_calc_sigma_estimate+0x494>)
 800fbac:	fba2 2303 	umull	r2, r3, r2, r3
 800fbb0:	099b      	lsrs	r3, r3, #6
 800fbb2:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800fbb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fbb8:	fb03 f303 	mul.w	r3, r3, r3
 800fbbc:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800fbbe:	69fb      	ldr	r3, [r7, #28]
 800fbc0:	fb03 f303 	mul.w	r3, r3, r3
 800fbc4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800fbc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbca:	4413      	add	r3, r2
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fd ff89 	bl	800dae4 <VL53L0X_isqrt>
 800fbd2:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800fbd4:	69bb      	ldr	r3, [r7, #24]
 800fbd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fbda:	fb02 f303 	mul.w	r3, r2, r3
 800fbde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800fbe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d009      	beq.n	800fbfc <VL53L0X_calc_sigma_estimate+0x43c>
 800fbe8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d005      	beq.n	800fbfc <VL53L0X_calc_sigma_estimate+0x43c>
 800fbf0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800fbf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d903      	bls.n	800fc04 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800fbfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fc00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800fc0a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681a      	ldr	r2, [r3, #0]
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800fc16:	6939      	ldr	r1, [r7, #16]
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	9303      	str	r3, [sp, #12]
 800fc1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc20:	9302      	str	r3, [sp, #8]
 800fc22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fc26:	9301      	str	r3, [sp, #4]
 800fc28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc2a:	9300      	str	r3, [sp, #0]
 800fc2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fc32:	68f8      	ldr	r0, [r7, #12]
 800fc34:	f7ff fca8 	bl	800f588 <VL53L0X_calc_dmax>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800fc3e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	37c0      	adds	r7, #192	; 0xc0
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	51eb851f 	.word	0x51eb851f
 800fc50:	d1b71759 	.word	0xd1b71759
 800fc54:	10624dd3 	.word	0x10624dd3

0800fc58 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b090      	sub	sp, #64	; 0x40
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	60f8      	str	r0, [r7, #12]
 800fc60:	607a      	str	r2, [r7, #4]
 800fc62:	461a      	mov	r2, r3
 800fc64:	460b      	mov	r3, r1
 800fc66:	72fb      	strb	r3, [r7, #11]
 800fc68:	4613      	mov	r3, r2
 800fc6a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800fc72:	2300      	movs	r3, #0
 800fc74:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800fc78:	2300      	movs	r3, #0
 800fc7a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800fc84:	2300      	movs	r3, #0
 800fc86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800fc90:	2300      	movs	r3, #0
 800fc92:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800fc96:	2300      	movs	r3, #0
 800fc98:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800fca2:	2300      	movs	r3, #0
 800fca4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800fca6:	2300      	movs	r3, #0
 800fca8:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800fcaa:	7afb      	ldrb	r3, [r7, #11]
 800fcac:	10db      	asrs	r3, r3, #3
 800fcae:	b2db      	uxtb	r3, r3
 800fcb0:	f003 030f 	and.w	r3, r3, #15
 800fcb4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800fcb8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d017      	beq.n	800fcf0 <VL53L0X_get_pal_range_status+0x98>
 800fcc0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fcc4:	2b05      	cmp	r3, #5
 800fcc6:	d013      	beq.n	800fcf0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800fcc8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fccc:	2b07      	cmp	r3, #7
 800fcce:	d00f      	beq.n	800fcf0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800fcd0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fcd4:	2b0c      	cmp	r3, #12
 800fcd6:	d00b      	beq.n	800fcf0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800fcd8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fcdc:	2b0d      	cmp	r3, #13
 800fcde:	d007      	beq.n	800fcf0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800fce0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fce4:	2b0e      	cmp	r3, #14
 800fce6:	d003      	beq.n	800fcf0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800fce8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fcec:	2b0f      	cmp	r3, #15
 800fcee:	d103      	bne.n	800fcf8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800fcf6:	e002      	b.n	800fcfe <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fcfe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d109      	bne.n	800fd1a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fd06:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	2100      	movs	r1, #0
 800fd0e:	68f8      	ldr	r0, [r7, #12]
 800fd10:	f7fc f9bc 	bl	800c08c <VL53L0X_GetLimitCheckEnable>
 800fd14:	4603      	mov	r3, r0
 800fd16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800fd1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d02e      	beq.n	800fd80 <VL53L0X_get_pal_range_status+0x128>
 800fd22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d12a      	bne.n	800fd80 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800fd2a:	f107 0310 	add.w	r3, r7, #16
 800fd2e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fd32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fd34:	68f8      	ldr	r0, [r7, #12]
 800fd36:	f7ff fd43 	bl	800f7c0 <VL53L0X_calc_sigma_estimate>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800fd40:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d103      	bne.n	800fd50 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	b29a      	uxth	r2, r3
 800fd4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd4e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800fd50:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d113      	bne.n	800fd80 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800fd58:	f107 0320 	add.w	r3, r7, #32
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	2100      	movs	r1, #0
 800fd60:	68f8      	ldr	r0, [r7, #12]
 800fd62:	f7fc fa19 	bl	800c198 <VL53L0X_GetLimitCheckValue>
 800fd66:	4603      	mov	r3, r0
 800fd68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800fd6c:	6a3b      	ldr	r3, [r7, #32]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d006      	beq.n	800fd80 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800fd72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd74:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d902      	bls.n	800fd80 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fd80:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d109      	bne.n	800fd9c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fd88:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	2102      	movs	r1, #2
 800fd90:	68f8      	ldr	r0, [r7, #12]
 800fd92:	f7fc f97b 	bl	800c08c <VL53L0X_GetLimitCheckEnable>
 800fd96:	4603      	mov	r3, r0
 800fd98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800fd9c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d044      	beq.n	800fe2e <VL53L0X_get_pal_range_status+0x1d6>
 800fda4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d140      	bne.n	800fe2e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800fdac:	f107 031c 	add.w	r3, r7, #28
 800fdb0:	461a      	mov	r2, r3
 800fdb2:	2102      	movs	r1, #2
 800fdb4:	68f8      	ldr	r0, [r7, #12]
 800fdb6:	f7fc f9ef 	bl	800c198 <VL53L0X_GetLimitCheckValue>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800fdc0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d107      	bne.n	800fdd8 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800fdc8:	2201      	movs	r2, #1
 800fdca:	21ff      	movs	r1, #255	; 0xff
 800fdcc:	68f8      	ldr	r0, [r7, #12]
 800fdce:	f000 f9bb 	bl	8010148 <VL53L0X_WrByte>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800fdd8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d109      	bne.n	800fdf4 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800fde0:	f107 0316 	add.w	r3, r7, #22
 800fde4:	461a      	mov	r2, r3
 800fde6:	21b6      	movs	r1, #182	; 0xb6
 800fde8:	68f8      	ldr	r0, [r7, #12]
 800fdea:	f000 fa59 	bl	80102a0 <VL53L0X_RdWord>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800fdf4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d107      	bne.n	800fe0c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	21ff      	movs	r1, #255	; 0xff
 800fe00:	68f8      	ldr	r0, [r7, #12]
 800fe02:	f000 f9a1 	bl	8010148 <VL53L0X_WrByte>
 800fe06:	4603      	mov	r3, r0
 800fe08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800fe0c:	8afb      	ldrh	r3, [r7, #22]
 800fe0e:	025b      	lsls	r3, r3, #9
 800fe10:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe16:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800fe1a:	69fb      	ldr	r3, [r7, #28]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d006      	beq.n	800fe2e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800fe20:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800fe22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe24:	429a      	cmp	r2, r3
 800fe26:	d902      	bls.n	800fe2e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800fe28:	2301      	movs	r3, #1
 800fe2a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fe2e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d109      	bne.n	800fe4a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fe36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	2103      	movs	r1, #3
 800fe3e:	68f8      	ldr	r0, [r7, #12]
 800fe40:	f7fc f924 	bl	800c08c <VL53L0X_GetLimitCheckEnable>
 800fe44:	4603      	mov	r3, r0
 800fe46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800fe4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d023      	beq.n	800fe9a <VL53L0X_get_pal_range_status+0x242>
 800fe52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d11f      	bne.n	800fe9a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800fe5a:	893b      	ldrh	r3, [r7, #8]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d102      	bne.n	800fe66 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800fe60:	2300      	movs	r3, #0
 800fe62:	637b      	str	r3, [r7, #52]	; 0x34
 800fe64:	e005      	b.n	800fe72 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	021a      	lsls	r2, r3, #8
 800fe6a:	893b      	ldrh	r3, [r7, #8]
 800fe6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe70:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800fe72:	f107 0318 	add.w	r3, r7, #24
 800fe76:	461a      	mov	r2, r3
 800fe78:	2103      	movs	r1, #3
 800fe7a:	68f8      	ldr	r0, [r7, #12]
 800fe7c:	f7fc f98c 	bl	800c198 <VL53L0X_GetLimitCheckValue>
 800fe80:	4603      	mov	r3, r0
 800fe82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800fe86:	69bb      	ldr	r3, [r7, #24]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d006      	beq.n	800fe9a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800fe8c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800fe8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d202      	bcs.n	800fe9a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800fe94:	2301      	movs	r3, #1
 800fe96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800fe9a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d14a      	bne.n	800ff38 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800fea2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800fea6:	2b01      	cmp	r3, #1
 800fea8:	d103      	bne.n	800feb2 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800feaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800feac:	22ff      	movs	r2, #255	; 0xff
 800feae:	701a      	strb	r2, [r3, #0]
 800feb0:	e042      	b.n	800ff38 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800feb2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800feb6:	2b01      	cmp	r3, #1
 800feb8:	d007      	beq.n	800feca <VL53L0X_get_pal_range_status+0x272>
 800feba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800febe:	2b02      	cmp	r3, #2
 800fec0:	d003      	beq.n	800feca <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800fec2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fec6:	2b03      	cmp	r3, #3
 800fec8:	d103      	bne.n	800fed2 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800feca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fecc:	2205      	movs	r2, #5
 800fece:	701a      	strb	r2, [r3, #0]
 800fed0:	e032      	b.n	800ff38 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800fed2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fed6:	2b06      	cmp	r3, #6
 800fed8:	d003      	beq.n	800fee2 <VL53L0X_get_pal_range_status+0x28a>
 800feda:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fede:	2b09      	cmp	r3, #9
 800fee0:	d103      	bne.n	800feea <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800fee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fee4:	2204      	movs	r2, #4
 800fee6:	701a      	strb	r2, [r3, #0]
 800fee8:	e026      	b.n	800ff38 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800feea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800feee:	2b08      	cmp	r3, #8
 800fef0:	d007      	beq.n	800ff02 <VL53L0X_get_pal_range_status+0x2aa>
 800fef2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fef6:	2b0a      	cmp	r3, #10
 800fef8:	d003      	beq.n	800ff02 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800fefa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	d103      	bne.n	800ff0a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800ff02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff04:	2203      	movs	r2, #3
 800ff06:	701a      	strb	r2, [r3, #0]
 800ff08:	e016      	b.n	800ff38 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800ff0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ff0e:	2b04      	cmp	r3, #4
 800ff10:	d003      	beq.n	800ff1a <VL53L0X_get_pal_range_status+0x2c2>
 800ff12:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ff16:	2b01      	cmp	r3, #1
 800ff18:	d103      	bne.n	800ff22 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800ff1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff1c:	2202      	movs	r2, #2
 800ff1e:	701a      	strb	r2, [r3, #0]
 800ff20:	e00a      	b.n	800ff38 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800ff22:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ff26:	2b01      	cmp	r3, #1
 800ff28:	d103      	bne.n	800ff32 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800ff2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff2c:	2201      	movs	r2, #1
 800ff2e:	701a      	strb	r2, [r3, #0]
 800ff30:	e002      	b.n	800ff38 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800ff32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff34:	2200      	movs	r2, #0
 800ff36:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800ff38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d102      	bne.n	800ff46 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800ff40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff42:	2200      	movs	r2, #0
 800ff44:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ff46:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	2101      	movs	r1, #1
 800ff4e:	68f8      	ldr	r0, [r7, #12]
 800ff50:	f7fc f89c 	bl	800c08c <VL53L0X_GetLimitCheckEnable>
 800ff54:	4603      	mov	r3, r0
 800ff56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800ff5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d14f      	bne.n	8010002 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800ff62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d003      	beq.n	800ff72 <VL53L0X_get_pal_range_status+0x31a>
 800ff6a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ff6e:	2b01      	cmp	r3, #1
 800ff70:	d103      	bne.n	800ff7a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800ff72:	2301      	movs	r3, #1
 800ff74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff78:	e002      	b.n	800ff80 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ff86:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800ff8a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ff8e:	2b04      	cmp	r3, #4
 800ff90:	d003      	beq.n	800ff9a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800ff92:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d103      	bne.n	800ffa2 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffa0:	e002      	b.n	800ffa8 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ffae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800ffb2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d003      	beq.n	800ffc2 <VL53L0X_get_pal_range_status+0x36a>
 800ffba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ffbe:	2b01      	cmp	r3, #1
 800ffc0:	d103      	bne.n	800ffca <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffc8:	e002      	b.n	800ffd0 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ffd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800ffda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d003      	beq.n	800ffea <VL53L0X_get_pal_range_status+0x392>
 800ffe2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ffe6:	2b01      	cmp	r3, #1
 800ffe8:	d103      	bne.n	800fff2 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800ffea:	2301      	movs	r3, #1
 800ffec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fff0:	e002      	b.n	800fff8 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800fff2:	2300      	movs	r3, #0
 800fff4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fffe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8010002:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8010006:	4618      	mov	r0, r3
 8010008:	3740      	adds	r7, #64	; 0x40
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}

0801000e <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 801000e:	b580      	push	{r7, lr}
 8010010:	b088      	sub	sp, #32
 8010012:	af02      	add	r7, sp, #8
 8010014:	60f8      	str	r0, [r7, #12]
 8010016:	60b9      	str	r1, [r7, #8]
 8010018:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	330a      	adds	r3, #10
 801001e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 801002c:	b299      	uxth	r1, r3
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	b29a      	uxth	r2, r3
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	9300      	str	r3, [sp, #0]
 8010036:	4613      	mov	r3, r2
 8010038:	68ba      	ldr	r2, [r7, #8]
 801003a:	f7f4 fa81 	bl	8004540 <HAL_I2C_Master_Transmit>
 801003e:	4603      	mov	r3, r0
 8010040:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8010042:	693b      	ldr	r3, [r7, #16]
}
 8010044:	4618      	mov	r0, r3
 8010046:	3718      	adds	r7, #24
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}

0801004c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 801004c:	b580      	push	{r7, lr}
 801004e:	b088      	sub	sp, #32
 8010050:	af02      	add	r7, sp, #8
 8010052:	60f8      	str	r0, [r7, #12]
 8010054:	60b9      	str	r1, [r7, #8]
 8010056:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	330a      	adds	r3, #10
 801005c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 801006a:	f043 0301 	orr.w	r3, r3, #1
 801006e:	b2db      	uxtb	r3, r3
 8010070:	b299      	uxth	r1, r3
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	b29a      	uxth	r2, r3
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	9300      	str	r3, [sp, #0]
 801007a:	4613      	mov	r3, r2
 801007c:	68ba      	ldr	r2, [r7, #8]
 801007e:	f7f4 fb53 	bl	8004728 <HAL_I2C_Master_Receive>
 8010082:	4603      	mov	r3, r0
 8010084:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8010086:	693b      	ldr	r3, [r7, #16]
}
 8010088:	4618      	mov	r0, r3
 801008a:	3718      	adds	r7, #24
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8010090:	b580      	push	{r7, lr}
 8010092:	b086      	sub	sp, #24
 8010094:	af00      	add	r7, sp, #0
 8010096:	60f8      	str	r0, [r7, #12]
 8010098:	607a      	str	r2, [r7, #4]
 801009a:	603b      	str	r3, [r7, #0]
 801009c:	460b      	mov	r3, r1
 801009e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80100a0:	2300      	movs	r3, #0
 80100a2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	2b3f      	cmp	r3, #63	; 0x3f
 80100a8:	d902      	bls.n	80100b0 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 80100aa:	f06f 0303 	mvn.w	r3, #3
 80100ae:	e016      	b.n	80100de <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 80100b0:	4a0d      	ldr	r2, [pc, #52]	; (80100e8 <VL53L0X_WriteMulti+0x58>)
 80100b2:	7afb      	ldrb	r3, [r7, #11]
 80100b4:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 80100b6:	683a      	ldr	r2, [r7, #0]
 80100b8:	6879      	ldr	r1, [r7, #4]
 80100ba:	480c      	ldr	r0, [pc, #48]	; (80100ec <VL53L0X_WriteMulti+0x5c>)
 80100bc:	f000 f99e 	bl	80103fc <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	3301      	adds	r3, #1
 80100c4:	461a      	mov	r2, r3
 80100c6:	4908      	ldr	r1, [pc, #32]	; (80100e8 <VL53L0X_WriteMulti+0x58>)
 80100c8:	68f8      	ldr	r0, [r7, #12]
 80100ca:	f7ff ffa0 	bl	801000e <_I2CWrite>
 80100ce:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80100d0:	693b      	ldr	r3, [r7, #16]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d001      	beq.n	80100da <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80100d6:	23ec      	movs	r3, #236	; 0xec
 80100d8:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80100da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3718      	adds	r7, #24
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	20000728 	.word	0x20000728
 80100ec:	20000729 	.word	0x20000729

080100f0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b086      	sub	sp, #24
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	607a      	str	r2, [r7, #4]
 80100fa:	603b      	str	r3, [r7, #0]
 80100fc:	460b      	mov	r3, r1
 80100fe:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010100:	2300      	movs	r3, #0
 8010102:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8010104:	f107 030b 	add.w	r3, r7, #11
 8010108:	2201      	movs	r2, #1
 801010a:	4619      	mov	r1, r3
 801010c:	68f8      	ldr	r0, [r7, #12]
 801010e:	f7ff ff7e 	bl	801000e <_I2CWrite>
 8010112:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d002      	beq.n	8010120 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 801011a:	23ec      	movs	r3, #236	; 0xec
 801011c:	75fb      	strb	r3, [r7, #23]
        goto done;
 801011e:	e00c      	b.n	801013a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8010120:	683a      	ldr	r2, [r7, #0]
 8010122:	6879      	ldr	r1, [r7, #4]
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	f7ff ff91 	bl	801004c <_I2CRead>
 801012a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801012c:	693b      	ldr	r3, [r7, #16]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d002      	beq.n	8010138 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010132:	23ec      	movs	r3, #236	; 0xec
 8010134:	75fb      	strb	r3, [r7, #23]
 8010136:	e000      	b.n	801013a <VL53L0X_ReadMulti+0x4a>
    }
done:
 8010138:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 801013a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801013e:	4618      	mov	r0, r3
 8010140:	3718      	adds	r7, #24
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}
	...

08010148 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8010148:	b580      	push	{r7, lr}
 801014a:	b084      	sub	sp, #16
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
 8010150:	460b      	mov	r3, r1
 8010152:	70fb      	strb	r3, [r7, #3]
 8010154:	4613      	mov	r3, r2
 8010156:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010158:	2300      	movs	r3, #0
 801015a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 801015c:	4a0b      	ldr	r2, [pc, #44]	; (801018c <VL53L0X_WrByte+0x44>)
 801015e:	78fb      	ldrb	r3, [r7, #3]
 8010160:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8010162:	4a0a      	ldr	r2, [pc, #40]	; (801018c <VL53L0X_WrByte+0x44>)
 8010164:	78bb      	ldrb	r3, [r7, #2]
 8010166:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010168:	2202      	movs	r2, #2
 801016a:	4908      	ldr	r1, [pc, #32]	; (801018c <VL53L0X_WrByte+0x44>)
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f7ff ff4e 	bl	801000e <_I2CWrite>
 8010172:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d001      	beq.n	801017e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 801017a:	23ec      	movs	r3, #236	; 0xec
 801017c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 801017e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010182:	4618      	mov	r0, r3
 8010184:	3710      	adds	r7, #16
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	20000728 	.word	0x20000728

08010190 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8010190:	b580      	push	{r7, lr}
 8010192:	b084      	sub	sp, #16
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	460b      	mov	r3, r1
 801019a:	70fb      	strb	r3, [r7, #3]
 801019c:	4613      	mov	r3, r2
 801019e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80101a0:	2300      	movs	r3, #0
 80101a2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80101a4:	4a0e      	ldr	r2, [pc, #56]	; (80101e0 <VL53L0X_WrWord+0x50>)
 80101a6:	78fb      	ldrb	r3, [r7, #3]
 80101a8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 80101aa:	883b      	ldrh	r3, [r7, #0]
 80101ac:	0a1b      	lsrs	r3, r3, #8
 80101ae:	b29b      	uxth	r3, r3
 80101b0:	b2da      	uxtb	r2, r3
 80101b2:	4b0b      	ldr	r3, [pc, #44]	; (80101e0 <VL53L0X_WrWord+0x50>)
 80101b4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 80101b6:	883b      	ldrh	r3, [r7, #0]
 80101b8:	b2da      	uxtb	r2, r3
 80101ba:	4b09      	ldr	r3, [pc, #36]	; (80101e0 <VL53L0X_WrWord+0x50>)
 80101bc:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80101be:	2203      	movs	r2, #3
 80101c0:	4907      	ldr	r1, [pc, #28]	; (80101e0 <VL53L0X_WrWord+0x50>)
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f7ff ff23 	bl	801000e <_I2CWrite>
 80101c8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d001      	beq.n	80101d4 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80101d0:	23ec      	movs	r3, #236	; 0xec
 80101d2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80101d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80101d8:	4618      	mov	r0, r3
 80101da:	3710      	adds	r7, #16
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}
 80101e0:	20000728 	.word	0x20000728

080101e4 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b084      	sub	sp, #16
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	4608      	mov	r0, r1
 80101ee:	4611      	mov	r1, r2
 80101f0:	461a      	mov	r2, r3
 80101f2:	4603      	mov	r3, r0
 80101f4:	70fb      	strb	r3, [r7, #3]
 80101f6:	460b      	mov	r3, r1
 80101f8:	70bb      	strb	r3, [r7, #2]
 80101fa:	4613      	mov	r3, r2
 80101fc:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80101fe:	2300      	movs	r3, #0
 8010200:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8010202:	f107 020e 	add.w	r2, r7, #14
 8010206:	78fb      	ldrb	r3, [r7, #3]
 8010208:	4619      	mov	r1, r3
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f000 f81e 	bl	801024c <VL53L0X_RdByte>
 8010210:	4603      	mov	r3, r0
 8010212:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8010214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d110      	bne.n	801023e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 801021c:	7bba      	ldrb	r2, [r7, #14]
 801021e:	78bb      	ldrb	r3, [r7, #2]
 8010220:	4013      	ands	r3, r2
 8010222:	b2da      	uxtb	r2, r3
 8010224:	787b      	ldrb	r3, [r7, #1]
 8010226:	4313      	orrs	r3, r2
 8010228:	b2db      	uxtb	r3, r3
 801022a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 801022c:	7bba      	ldrb	r2, [r7, #14]
 801022e:	78fb      	ldrb	r3, [r7, #3]
 8010230:	4619      	mov	r1, r3
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f7ff ff88 	bl	8010148 <VL53L0X_WrByte>
 8010238:	4603      	mov	r3, r0
 801023a:	73fb      	strb	r3, [r7, #15]
 801023c:	e000      	b.n	8010240 <VL53L0X_UpdateByte+0x5c>
        goto done;
 801023e:	bf00      	nop
done:
    return Status;
 8010240:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010244:	4618      	mov	r0, r3
 8010246:	3710      	adds	r7, #16
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}

0801024c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 801024c:	b580      	push	{r7, lr}
 801024e:	b086      	sub	sp, #24
 8010250:	af00      	add	r7, sp, #0
 8010252:	60f8      	str	r0, [r7, #12]
 8010254:	460b      	mov	r3, r1
 8010256:	607a      	str	r2, [r7, #4]
 8010258:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801025a:	2300      	movs	r3, #0
 801025c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 801025e:	f107 030b 	add.w	r3, r7, #11
 8010262:	2201      	movs	r2, #1
 8010264:	4619      	mov	r1, r3
 8010266:	68f8      	ldr	r0, [r7, #12]
 8010268:	f7ff fed1 	bl	801000e <_I2CWrite>
 801026c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d002      	beq.n	801027a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010274:	23ec      	movs	r3, #236	; 0xec
 8010276:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010278:	e00c      	b.n	8010294 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 801027a:	2201      	movs	r2, #1
 801027c:	6879      	ldr	r1, [r7, #4]
 801027e:	68f8      	ldr	r0, [r7, #12]
 8010280:	f7ff fee4 	bl	801004c <_I2CRead>
 8010284:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010286:	693b      	ldr	r3, [r7, #16]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d002      	beq.n	8010292 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 801028c:	23ec      	movs	r3, #236	; 0xec
 801028e:	75fb      	strb	r3, [r7, #23]
 8010290:	e000      	b.n	8010294 <VL53L0X_RdByte+0x48>
    }
done:
 8010292:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8010294:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010298:	4618      	mov	r0, r3
 801029a:	3718      	adds	r7, #24
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b086      	sub	sp, #24
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	60f8      	str	r0, [r7, #12]
 80102a8:	460b      	mov	r3, r1
 80102aa:	607a      	str	r2, [r7, #4]
 80102ac:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80102ae:	2300      	movs	r3, #0
 80102b0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80102b2:	f107 030b 	add.w	r3, r7, #11
 80102b6:	2201      	movs	r2, #1
 80102b8:	4619      	mov	r1, r3
 80102ba:	68f8      	ldr	r0, [r7, #12]
 80102bc:	f7ff fea7 	bl	801000e <_I2CWrite>
 80102c0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d002      	beq.n	80102ce <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80102c8:	23ec      	movs	r3, #236	; 0xec
 80102ca:	75fb      	strb	r3, [r7, #23]
        goto done;
 80102cc:	e017      	b.n	80102fe <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80102ce:	2202      	movs	r2, #2
 80102d0:	490e      	ldr	r1, [pc, #56]	; (801030c <VL53L0X_RdWord+0x6c>)
 80102d2:	68f8      	ldr	r0, [r7, #12]
 80102d4:	f7ff feba 	bl	801004c <_I2CRead>
 80102d8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d002      	beq.n	80102e6 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80102e0:	23ec      	movs	r3, #236	; 0xec
 80102e2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80102e4:	e00b      	b.n	80102fe <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80102e6:	4b09      	ldr	r3, [pc, #36]	; (801030c <VL53L0X_RdWord+0x6c>)
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	b29b      	uxth	r3, r3
 80102ec:	021b      	lsls	r3, r3, #8
 80102ee:	b29a      	uxth	r2, r3
 80102f0:	4b06      	ldr	r3, [pc, #24]	; (801030c <VL53L0X_RdWord+0x6c>)
 80102f2:	785b      	ldrb	r3, [r3, #1]
 80102f4:	b29b      	uxth	r3, r3
 80102f6:	4413      	add	r3, r2
 80102f8:	b29a      	uxth	r2, r3
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80102fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010302:	4618      	mov	r0, r3
 8010304:	3718      	adds	r7, #24
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	20000728 	.word	0x20000728

08010310 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8010310:	b580      	push	{r7, lr}
 8010312:	b086      	sub	sp, #24
 8010314:	af00      	add	r7, sp, #0
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	460b      	mov	r3, r1
 801031a:	607a      	str	r2, [r7, #4]
 801031c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801031e:	2300      	movs	r3, #0
 8010320:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8010322:	f107 030b 	add.w	r3, r7, #11
 8010326:	2201      	movs	r2, #1
 8010328:	4619      	mov	r1, r3
 801032a:	68f8      	ldr	r0, [r7, #12]
 801032c:	f7ff fe6f 	bl	801000e <_I2CWrite>
 8010330:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010332:	693b      	ldr	r3, [r7, #16]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d002      	beq.n	801033e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010338:	23ec      	movs	r3, #236	; 0xec
 801033a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801033c:	e01b      	b.n	8010376 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 801033e:	2204      	movs	r2, #4
 8010340:	4910      	ldr	r1, [pc, #64]	; (8010384 <VL53L0X_RdDWord+0x74>)
 8010342:	68f8      	ldr	r0, [r7, #12]
 8010344:	f7ff fe82 	bl	801004c <_I2CRead>
 8010348:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d002      	beq.n	8010356 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010350:	23ec      	movs	r3, #236	; 0xec
 8010352:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010354:	e00f      	b.n	8010376 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8010356:	4b0b      	ldr	r3, [pc, #44]	; (8010384 <VL53L0X_RdDWord+0x74>)
 8010358:	781b      	ldrb	r3, [r3, #0]
 801035a:	061a      	lsls	r2, r3, #24
 801035c:	4b09      	ldr	r3, [pc, #36]	; (8010384 <VL53L0X_RdDWord+0x74>)
 801035e:	785b      	ldrb	r3, [r3, #1]
 8010360:	041b      	lsls	r3, r3, #16
 8010362:	441a      	add	r2, r3
 8010364:	4b07      	ldr	r3, [pc, #28]	; (8010384 <VL53L0X_RdDWord+0x74>)
 8010366:	789b      	ldrb	r3, [r3, #2]
 8010368:	021b      	lsls	r3, r3, #8
 801036a:	4413      	add	r3, r2
 801036c:	4a05      	ldr	r2, [pc, #20]	; (8010384 <VL53L0X_RdDWord+0x74>)
 801036e:	78d2      	ldrb	r2, [r2, #3]
 8010370:	441a      	add	r2, r3
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8010376:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801037a:	4618      	mov	r0, r3
 801037c:	3718      	adds	r7, #24
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}
 8010382:	bf00      	nop
 8010384:	20000728 	.word	0x20000728

08010388 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8010388:	b580      	push	{r7, lr}
 801038a:	b084      	sub	sp, #16
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8010390:	2300      	movs	r3, #0
 8010392:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8010394:	2002      	movs	r0, #2
 8010396:	f7f3 f9d9 	bl	800374c <HAL_Delay>
    return status;
 801039a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801039e:	4618      	mov	r0, r3
 80103a0:	3710      	adds	r7, #16
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
	...

080103a8 <__errno>:
 80103a8:	4b01      	ldr	r3, [pc, #4]	; (80103b0 <__errno+0x8>)
 80103aa:	6818      	ldr	r0, [r3, #0]
 80103ac:	4770      	bx	lr
 80103ae:	bf00      	nop
 80103b0:	200002c8 	.word	0x200002c8

080103b4 <__libc_init_array>:
 80103b4:	b570      	push	{r4, r5, r6, lr}
 80103b6:	4d0d      	ldr	r5, [pc, #52]	; (80103ec <__libc_init_array+0x38>)
 80103b8:	4c0d      	ldr	r4, [pc, #52]	; (80103f0 <__libc_init_array+0x3c>)
 80103ba:	1b64      	subs	r4, r4, r5
 80103bc:	10a4      	asrs	r4, r4, #2
 80103be:	2600      	movs	r6, #0
 80103c0:	42a6      	cmp	r6, r4
 80103c2:	d109      	bne.n	80103d8 <__libc_init_array+0x24>
 80103c4:	4d0b      	ldr	r5, [pc, #44]	; (80103f4 <__libc_init_array+0x40>)
 80103c6:	4c0c      	ldr	r4, [pc, #48]	; (80103f8 <__libc_init_array+0x44>)
 80103c8:	f005 f8d0 	bl	801556c <_init>
 80103cc:	1b64      	subs	r4, r4, r5
 80103ce:	10a4      	asrs	r4, r4, #2
 80103d0:	2600      	movs	r6, #0
 80103d2:	42a6      	cmp	r6, r4
 80103d4:	d105      	bne.n	80103e2 <__libc_init_array+0x2e>
 80103d6:	bd70      	pop	{r4, r5, r6, pc}
 80103d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80103dc:	4798      	blx	r3
 80103de:	3601      	adds	r6, #1
 80103e0:	e7ee      	b.n	80103c0 <__libc_init_array+0xc>
 80103e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80103e6:	4798      	blx	r3
 80103e8:	3601      	adds	r6, #1
 80103ea:	e7f2      	b.n	80103d2 <__libc_init_array+0x1e>
 80103ec:	08015fa4 	.word	0x08015fa4
 80103f0:	08015fa4 	.word	0x08015fa4
 80103f4:	08015fa4 	.word	0x08015fa4
 80103f8:	08015fa8 	.word	0x08015fa8

080103fc <memcpy>:
 80103fc:	440a      	add	r2, r1
 80103fe:	4291      	cmp	r1, r2
 8010400:	f100 33ff 	add.w	r3, r0, #4294967295
 8010404:	d100      	bne.n	8010408 <memcpy+0xc>
 8010406:	4770      	bx	lr
 8010408:	b510      	push	{r4, lr}
 801040a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801040e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010412:	4291      	cmp	r1, r2
 8010414:	d1f9      	bne.n	801040a <memcpy+0xe>
 8010416:	bd10      	pop	{r4, pc}

08010418 <memset>:
 8010418:	4402      	add	r2, r0
 801041a:	4603      	mov	r3, r0
 801041c:	4293      	cmp	r3, r2
 801041e:	d100      	bne.n	8010422 <memset+0xa>
 8010420:	4770      	bx	lr
 8010422:	f803 1b01 	strb.w	r1, [r3], #1
 8010426:	e7f9      	b.n	801041c <memset+0x4>

08010428 <__cvt>:
 8010428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801042c:	ec55 4b10 	vmov	r4, r5, d0
 8010430:	2d00      	cmp	r5, #0
 8010432:	460e      	mov	r6, r1
 8010434:	4619      	mov	r1, r3
 8010436:	462b      	mov	r3, r5
 8010438:	bfbb      	ittet	lt
 801043a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801043e:	461d      	movlt	r5, r3
 8010440:	2300      	movge	r3, #0
 8010442:	232d      	movlt	r3, #45	; 0x2d
 8010444:	700b      	strb	r3, [r1, #0]
 8010446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010448:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801044c:	4691      	mov	r9, r2
 801044e:	f023 0820 	bic.w	r8, r3, #32
 8010452:	bfbc      	itt	lt
 8010454:	4622      	movlt	r2, r4
 8010456:	4614      	movlt	r4, r2
 8010458:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801045c:	d005      	beq.n	801046a <__cvt+0x42>
 801045e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010462:	d100      	bne.n	8010466 <__cvt+0x3e>
 8010464:	3601      	adds	r6, #1
 8010466:	2102      	movs	r1, #2
 8010468:	e000      	b.n	801046c <__cvt+0x44>
 801046a:	2103      	movs	r1, #3
 801046c:	ab03      	add	r3, sp, #12
 801046e:	9301      	str	r3, [sp, #4]
 8010470:	ab02      	add	r3, sp, #8
 8010472:	9300      	str	r3, [sp, #0]
 8010474:	ec45 4b10 	vmov	d0, r4, r5
 8010478:	4653      	mov	r3, sl
 801047a:	4632      	mov	r2, r6
 801047c:	f001 fe60 	bl	8012140 <_dtoa_r>
 8010480:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010484:	4607      	mov	r7, r0
 8010486:	d102      	bne.n	801048e <__cvt+0x66>
 8010488:	f019 0f01 	tst.w	r9, #1
 801048c:	d022      	beq.n	80104d4 <__cvt+0xac>
 801048e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010492:	eb07 0906 	add.w	r9, r7, r6
 8010496:	d110      	bne.n	80104ba <__cvt+0x92>
 8010498:	783b      	ldrb	r3, [r7, #0]
 801049a:	2b30      	cmp	r3, #48	; 0x30
 801049c:	d10a      	bne.n	80104b4 <__cvt+0x8c>
 801049e:	2200      	movs	r2, #0
 80104a0:	2300      	movs	r3, #0
 80104a2:	4620      	mov	r0, r4
 80104a4:	4629      	mov	r1, r5
 80104a6:	f7f0 fb2f 	bl	8000b08 <__aeabi_dcmpeq>
 80104aa:	b918      	cbnz	r0, 80104b4 <__cvt+0x8c>
 80104ac:	f1c6 0601 	rsb	r6, r6, #1
 80104b0:	f8ca 6000 	str.w	r6, [sl]
 80104b4:	f8da 3000 	ldr.w	r3, [sl]
 80104b8:	4499      	add	r9, r3
 80104ba:	2200      	movs	r2, #0
 80104bc:	2300      	movs	r3, #0
 80104be:	4620      	mov	r0, r4
 80104c0:	4629      	mov	r1, r5
 80104c2:	f7f0 fb21 	bl	8000b08 <__aeabi_dcmpeq>
 80104c6:	b108      	cbz	r0, 80104cc <__cvt+0xa4>
 80104c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80104cc:	2230      	movs	r2, #48	; 0x30
 80104ce:	9b03      	ldr	r3, [sp, #12]
 80104d0:	454b      	cmp	r3, r9
 80104d2:	d307      	bcc.n	80104e4 <__cvt+0xbc>
 80104d4:	9b03      	ldr	r3, [sp, #12]
 80104d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80104d8:	1bdb      	subs	r3, r3, r7
 80104da:	4638      	mov	r0, r7
 80104dc:	6013      	str	r3, [r2, #0]
 80104de:	b004      	add	sp, #16
 80104e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104e4:	1c59      	adds	r1, r3, #1
 80104e6:	9103      	str	r1, [sp, #12]
 80104e8:	701a      	strb	r2, [r3, #0]
 80104ea:	e7f0      	b.n	80104ce <__cvt+0xa6>

080104ec <__exponent>:
 80104ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104ee:	4603      	mov	r3, r0
 80104f0:	2900      	cmp	r1, #0
 80104f2:	bfb8      	it	lt
 80104f4:	4249      	neglt	r1, r1
 80104f6:	f803 2b02 	strb.w	r2, [r3], #2
 80104fa:	bfb4      	ite	lt
 80104fc:	222d      	movlt	r2, #45	; 0x2d
 80104fe:	222b      	movge	r2, #43	; 0x2b
 8010500:	2909      	cmp	r1, #9
 8010502:	7042      	strb	r2, [r0, #1]
 8010504:	dd2a      	ble.n	801055c <__exponent+0x70>
 8010506:	f10d 0407 	add.w	r4, sp, #7
 801050a:	46a4      	mov	ip, r4
 801050c:	270a      	movs	r7, #10
 801050e:	46a6      	mov	lr, r4
 8010510:	460a      	mov	r2, r1
 8010512:	fb91 f6f7 	sdiv	r6, r1, r7
 8010516:	fb07 1516 	mls	r5, r7, r6, r1
 801051a:	3530      	adds	r5, #48	; 0x30
 801051c:	2a63      	cmp	r2, #99	; 0x63
 801051e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010522:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010526:	4631      	mov	r1, r6
 8010528:	dcf1      	bgt.n	801050e <__exponent+0x22>
 801052a:	3130      	adds	r1, #48	; 0x30
 801052c:	f1ae 0502 	sub.w	r5, lr, #2
 8010530:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010534:	1c44      	adds	r4, r0, #1
 8010536:	4629      	mov	r1, r5
 8010538:	4561      	cmp	r1, ip
 801053a:	d30a      	bcc.n	8010552 <__exponent+0x66>
 801053c:	f10d 0209 	add.w	r2, sp, #9
 8010540:	eba2 020e 	sub.w	r2, r2, lr
 8010544:	4565      	cmp	r5, ip
 8010546:	bf88      	it	hi
 8010548:	2200      	movhi	r2, #0
 801054a:	4413      	add	r3, r2
 801054c:	1a18      	subs	r0, r3, r0
 801054e:	b003      	add	sp, #12
 8010550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010556:	f804 2f01 	strb.w	r2, [r4, #1]!
 801055a:	e7ed      	b.n	8010538 <__exponent+0x4c>
 801055c:	2330      	movs	r3, #48	; 0x30
 801055e:	3130      	adds	r1, #48	; 0x30
 8010560:	7083      	strb	r3, [r0, #2]
 8010562:	70c1      	strb	r1, [r0, #3]
 8010564:	1d03      	adds	r3, r0, #4
 8010566:	e7f1      	b.n	801054c <__exponent+0x60>

08010568 <_printf_float>:
 8010568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801056c:	ed2d 8b02 	vpush	{d8}
 8010570:	b08d      	sub	sp, #52	; 0x34
 8010572:	460c      	mov	r4, r1
 8010574:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010578:	4616      	mov	r6, r2
 801057a:	461f      	mov	r7, r3
 801057c:	4605      	mov	r5, r0
 801057e:	f002 ff3d 	bl	80133fc <_localeconv_r>
 8010582:	f8d0 a000 	ldr.w	sl, [r0]
 8010586:	4650      	mov	r0, sl
 8010588:	f7ef fe42 	bl	8000210 <strlen>
 801058c:	2300      	movs	r3, #0
 801058e:	930a      	str	r3, [sp, #40]	; 0x28
 8010590:	6823      	ldr	r3, [r4, #0]
 8010592:	9305      	str	r3, [sp, #20]
 8010594:	f8d8 3000 	ldr.w	r3, [r8]
 8010598:	f894 b018 	ldrb.w	fp, [r4, #24]
 801059c:	3307      	adds	r3, #7
 801059e:	f023 0307 	bic.w	r3, r3, #7
 80105a2:	f103 0208 	add.w	r2, r3, #8
 80105a6:	f8c8 2000 	str.w	r2, [r8]
 80105aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80105b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80105b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80105ba:	9307      	str	r3, [sp, #28]
 80105bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80105c0:	ee08 0a10 	vmov	s16, r0
 80105c4:	4b9f      	ldr	r3, [pc, #636]	; (8010844 <_printf_float+0x2dc>)
 80105c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80105ca:	f04f 32ff 	mov.w	r2, #4294967295
 80105ce:	f7f0 facd 	bl	8000b6c <__aeabi_dcmpun>
 80105d2:	bb88      	cbnz	r0, 8010638 <_printf_float+0xd0>
 80105d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80105d8:	4b9a      	ldr	r3, [pc, #616]	; (8010844 <_printf_float+0x2dc>)
 80105da:	f04f 32ff 	mov.w	r2, #4294967295
 80105de:	f7f0 faa7 	bl	8000b30 <__aeabi_dcmple>
 80105e2:	bb48      	cbnz	r0, 8010638 <_printf_float+0xd0>
 80105e4:	2200      	movs	r2, #0
 80105e6:	2300      	movs	r3, #0
 80105e8:	4640      	mov	r0, r8
 80105ea:	4649      	mov	r1, r9
 80105ec:	f7f0 fa96 	bl	8000b1c <__aeabi_dcmplt>
 80105f0:	b110      	cbz	r0, 80105f8 <_printf_float+0x90>
 80105f2:	232d      	movs	r3, #45	; 0x2d
 80105f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105f8:	4b93      	ldr	r3, [pc, #588]	; (8010848 <_printf_float+0x2e0>)
 80105fa:	4894      	ldr	r0, [pc, #592]	; (801084c <_printf_float+0x2e4>)
 80105fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010600:	bf94      	ite	ls
 8010602:	4698      	movls	r8, r3
 8010604:	4680      	movhi	r8, r0
 8010606:	2303      	movs	r3, #3
 8010608:	6123      	str	r3, [r4, #16]
 801060a:	9b05      	ldr	r3, [sp, #20]
 801060c:	f023 0204 	bic.w	r2, r3, #4
 8010610:	6022      	str	r2, [r4, #0]
 8010612:	f04f 0900 	mov.w	r9, #0
 8010616:	9700      	str	r7, [sp, #0]
 8010618:	4633      	mov	r3, r6
 801061a:	aa0b      	add	r2, sp, #44	; 0x2c
 801061c:	4621      	mov	r1, r4
 801061e:	4628      	mov	r0, r5
 8010620:	f000 f9d8 	bl	80109d4 <_printf_common>
 8010624:	3001      	adds	r0, #1
 8010626:	f040 8090 	bne.w	801074a <_printf_float+0x1e2>
 801062a:	f04f 30ff 	mov.w	r0, #4294967295
 801062e:	b00d      	add	sp, #52	; 0x34
 8010630:	ecbd 8b02 	vpop	{d8}
 8010634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010638:	4642      	mov	r2, r8
 801063a:	464b      	mov	r3, r9
 801063c:	4640      	mov	r0, r8
 801063e:	4649      	mov	r1, r9
 8010640:	f7f0 fa94 	bl	8000b6c <__aeabi_dcmpun>
 8010644:	b140      	cbz	r0, 8010658 <_printf_float+0xf0>
 8010646:	464b      	mov	r3, r9
 8010648:	2b00      	cmp	r3, #0
 801064a:	bfbc      	itt	lt
 801064c:	232d      	movlt	r3, #45	; 0x2d
 801064e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010652:	487f      	ldr	r0, [pc, #508]	; (8010850 <_printf_float+0x2e8>)
 8010654:	4b7f      	ldr	r3, [pc, #508]	; (8010854 <_printf_float+0x2ec>)
 8010656:	e7d1      	b.n	80105fc <_printf_float+0x94>
 8010658:	6863      	ldr	r3, [r4, #4]
 801065a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801065e:	9206      	str	r2, [sp, #24]
 8010660:	1c5a      	adds	r2, r3, #1
 8010662:	d13f      	bne.n	80106e4 <_printf_float+0x17c>
 8010664:	2306      	movs	r3, #6
 8010666:	6063      	str	r3, [r4, #4]
 8010668:	9b05      	ldr	r3, [sp, #20]
 801066a:	6861      	ldr	r1, [r4, #4]
 801066c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010670:	2300      	movs	r3, #0
 8010672:	9303      	str	r3, [sp, #12]
 8010674:	ab0a      	add	r3, sp, #40	; 0x28
 8010676:	e9cd b301 	strd	fp, r3, [sp, #4]
 801067a:	ab09      	add	r3, sp, #36	; 0x24
 801067c:	ec49 8b10 	vmov	d0, r8, r9
 8010680:	9300      	str	r3, [sp, #0]
 8010682:	6022      	str	r2, [r4, #0]
 8010684:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010688:	4628      	mov	r0, r5
 801068a:	f7ff fecd 	bl	8010428 <__cvt>
 801068e:	9b06      	ldr	r3, [sp, #24]
 8010690:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010692:	2b47      	cmp	r3, #71	; 0x47
 8010694:	4680      	mov	r8, r0
 8010696:	d108      	bne.n	80106aa <_printf_float+0x142>
 8010698:	1cc8      	adds	r0, r1, #3
 801069a:	db02      	blt.n	80106a2 <_printf_float+0x13a>
 801069c:	6863      	ldr	r3, [r4, #4]
 801069e:	4299      	cmp	r1, r3
 80106a0:	dd41      	ble.n	8010726 <_printf_float+0x1be>
 80106a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80106a6:	fa5f fb8b 	uxtb.w	fp, fp
 80106aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80106ae:	d820      	bhi.n	80106f2 <_printf_float+0x18a>
 80106b0:	3901      	subs	r1, #1
 80106b2:	465a      	mov	r2, fp
 80106b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80106b8:	9109      	str	r1, [sp, #36]	; 0x24
 80106ba:	f7ff ff17 	bl	80104ec <__exponent>
 80106be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106c0:	1813      	adds	r3, r2, r0
 80106c2:	2a01      	cmp	r2, #1
 80106c4:	4681      	mov	r9, r0
 80106c6:	6123      	str	r3, [r4, #16]
 80106c8:	dc02      	bgt.n	80106d0 <_printf_float+0x168>
 80106ca:	6822      	ldr	r2, [r4, #0]
 80106cc:	07d2      	lsls	r2, r2, #31
 80106ce:	d501      	bpl.n	80106d4 <_printf_float+0x16c>
 80106d0:	3301      	adds	r3, #1
 80106d2:	6123      	str	r3, [r4, #16]
 80106d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d09c      	beq.n	8010616 <_printf_float+0xae>
 80106dc:	232d      	movs	r3, #45	; 0x2d
 80106de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106e2:	e798      	b.n	8010616 <_printf_float+0xae>
 80106e4:	9a06      	ldr	r2, [sp, #24]
 80106e6:	2a47      	cmp	r2, #71	; 0x47
 80106e8:	d1be      	bne.n	8010668 <_printf_float+0x100>
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d1bc      	bne.n	8010668 <_printf_float+0x100>
 80106ee:	2301      	movs	r3, #1
 80106f0:	e7b9      	b.n	8010666 <_printf_float+0xfe>
 80106f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80106f6:	d118      	bne.n	801072a <_printf_float+0x1c2>
 80106f8:	2900      	cmp	r1, #0
 80106fa:	6863      	ldr	r3, [r4, #4]
 80106fc:	dd0b      	ble.n	8010716 <_printf_float+0x1ae>
 80106fe:	6121      	str	r1, [r4, #16]
 8010700:	b913      	cbnz	r3, 8010708 <_printf_float+0x1a0>
 8010702:	6822      	ldr	r2, [r4, #0]
 8010704:	07d0      	lsls	r0, r2, #31
 8010706:	d502      	bpl.n	801070e <_printf_float+0x1a6>
 8010708:	3301      	adds	r3, #1
 801070a:	440b      	add	r3, r1
 801070c:	6123      	str	r3, [r4, #16]
 801070e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010710:	f04f 0900 	mov.w	r9, #0
 8010714:	e7de      	b.n	80106d4 <_printf_float+0x16c>
 8010716:	b913      	cbnz	r3, 801071e <_printf_float+0x1b6>
 8010718:	6822      	ldr	r2, [r4, #0]
 801071a:	07d2      	lsls	r2, r2, #31
 801071c:	d501      	bpl.n	8010722 <_printf_float+0x1ba>
 801071e:	3302      	adds	r3, #2
 8010720:	e7f4      	b.n	801070c <_printf_float+0x1a4>
 8010722:	2301      	movs	r3, #1
 8010724:	e7f2      	b.n	801070c <_printf_float+0x1a4>
 8010726:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801072a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801072c:	4299      	cmp	r1, r3
 801072e:	db05      	blt.n	801073c <_printf_float+0x1d4>
 8010730:	6823      	ldr	r3, [r4, #0]
 8010732:	6121      	str	r1, [r4, #16]
 8010734:	07d8      	lsls	r0, r3, #31
 8010736:	d5ea      	bpl.n	801070e <_printf_float+0x1a6>
 8010738:	1c4b      	adds	r3, r1, #1
 801073a:	e7e7      	b.n	801070c <_printf_float+0x1a4>
 801073c:	2900      	cmp	r1, #0
 801073e:	bfd4      	ite	le
 8010740:	f1c1 0202 	rsble	r2, r1, #2
 8010744:	2201      	movgt	r2, #1
 8010746:	4413      	add	r3, r2
 8010748:	e7e0      	b.n	801070c <_printf_float+0x1a4>
 801074a:	6823      	ldr	r3, [r4, #0]
 801074c:	055a      	lsls	r2, r3, #21
 801074e:	d407      	bmi.n	8010760 <_printf_float+0x1f8>
 8010750:	6923      	ldr	r3, [r4, #16]
 8010752:	4642      	mov	r2, r8
 8010754:	4631      	mov	r1, r6
 8010756:	4628      	mov	r0, r5
 8010758:	47b8      	blx	r7
 801075a:	3001      	adds	r0, #1
 801075c:	d12c      	bne.n	80107b8 <_printf_float+0x250>
 801075e:	e764      	b.n	801062a <_printf_float+0xc2>
 8010760:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010764:	f240 80e0 	bls.w	8010928 <_printf_float+0x3c0>
 8010768:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801076c:	2200      	movs	r2, #0
 801076e:	2300      	movs	r3, #0
 8010770:	f7f0 f9ca 	bl	8000b08 <__aeabi_dcmpeq>
 8010774:	2800      	cmp	r0, #0
 8010776:	d034      	beq.n	80107e2 <_printf_float+0x27a>
 8010778:	4a37      	ldr	r2, [pc, #220]	; (8010858 <_printf_float+0x2f0>)
 801077a:	2301      	movs	r3, #1
 801077c:	4631      	mov	r1, r6
 801077e:	4628      	mov	r0, r5
 8010780:	47b8      	blx	r7
 8010782:	3001      	adds	r0, #1
 8010784:	f43f af51 	beq.w	801062a <_printf_float+0xc2>
 8010788:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801078c:	429a      	cmp	r2, r3
 801078e:	db02      	blt.n	8010796 <_printf_float+0x22e>
 8010790:	6823      	ldr	r3, [r4, #0]
 8010792:	07d8      	lsls	r0, r3, #31
 8010794:	d510      	bpl.n	80107b8 <_printf_float+0x250>
 8010796:	ee18 3a10 	vmov	r3, s16
 801079a:	4652      	mov	r2, sl
 801079c:	4631      	mov	r1, r6
 801079e:	4628      	mov	r0, r5
 80107a0:	47b8      	blx	r7
 80107a2:	3001      	adds	r0, #1
 80107a4:	f43f af41 	beq.w	801062a <_printf_float+0xc2>
 80107a8:	f04f 0800 	mov.w	r8, #0
 80107ac:	f104 091a 	add.w	r9, r4, #26
 80107b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107b2:	3b01      	subs	r3, #1
 80107b4:	4543      	cmp	r3, r8
 80107b6:	dc09      	bgt.n	80107cc <_printf_float+0x264>
 80107b8:	6823      	ldr	r3, [r4, #0]
 80107ba:	079b      	lsls	r3, r3, #30
 80107bc:	f100 8105 	bmi.w	80109ca <_printf_float+0x462>
 80107c0:	68e0      	ldr	r0, [r4, #12]
 80107c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107c4:	4298      	cmp	r0, r3
 80107c6:	bfb8      	it	lt
 80107c8:	4618      	movlt	r0, r3
 80107ca:	e730      	b.n	801062e <_printf_float+0xc6>
 80107cc:	2301      	movs	r3, #1
 80107ce:	464a      	mov	r2, r9
 80107d0:	4631      	mov	r1, r6
 80107d2:	4628      	mov	r0, r5
 80107d4:	47b8      	blx	r7
 80107d6:	3001      	adds	r0, #1
 80107d8:	f43f af27 	beq.w	801062a <_printf_float+0xc2>
 80107dc:	f108 0801 	add.w	r8, r8, #1
 80107e0:	e7e6      	b.n	80107b0 <_printf_float+0x248>
 80107e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	dc39      	bgt.n	801085c <_printf_float+0x2f4>
 80107e8:	4a1b      	ldr	r2, [pc, #108]	; (8010858 <_printf_float+0x2f0>)
 80107ea:	2301      	movs	r3, #1
 80107ec:	4631      	mov	r1, r6
 80107ee:	4628      	mov	r0, r5
 80107f0:	47b8      	blx	r7
 80107f2:	3001      	adds	r0, #1
 80107f4:	f43f af19 	beq.w	801062a <_printf_float+0xc2>
 80107f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80107fc:	4313      	orrs	r3, r2
 80107fe:	d102      	bne.n	8010806 <_printf_float+0x29e>
 8010800:	6823      	ldr	r3, [r4, #0]
 8010802:	07d9      	lsls	r1, r3, #31
 8010804:	d5d8      	bpl.n	80107b8 <_printf_float+0x250>
 8010806:	ee18 3a10 	vmov	r3, s16
 801080a:	4652      	mov	r2, sl
 801080c:	4631      	mov	r1, r6
 801080e:	4628      	mov	r0, r5
 8010810:	47b8      	blx	r7
 8010812:	3001      	adds	r0, #1
 8010814:	f43f af09 	beq.w	801062a <_printf_float+0xc2>
 8010818:	f04f 0900 	mov.w	r9, #0
 801081c:	f104 0a1a 	add.w	sl, r4, #26
 8010820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010822:	425b      	negs	r3, r3
 8010824:	454b      	cmp	r3, r9
 8010826:	dc01      	bgt.n	801082c <_printf_float+0x2c4>
 8010828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801082a:	e792      	b.n	8010752 <_printf_float+0x1ea>
 801082c:	2301      	movs	r3, #1
 801082e:	4652      	mov	r2, sl
 8010830:	4631      	mov	r1, r6
 8010832:	4628      	mov	r0, r5
 8010834:	47b8      	blx	r7
 8010836:	3001      	adds	r0, #1
 8010838:	f43f aef7 	beq.w	801062a <_printf_float+0xc2>
 801083c:	f109 0901 	add.w	r9, r9, #1
 8010840:	e7ee      	b.n	8010820 <_printf_float+0x2b8>
 8010842:	bf00      	nop
 8010844:	7fefffff 	.word	0x7fefffff
 8010848:	08015ae4 	.word	0x08015ae4
 801084c:	08015ae8 	.word	0x08015ae8
 8010850:	08015af0 	.word	0x08015af0
 8010854:	08015aec 	.word	0x08015aec
 8010858:	08015ee9 	.word	0x08015ee9
 801085c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801085e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010860:	429a      	cmp	r2, r3
 8010862:	bfa8      	it	ge
 8010864:	461a      	movge	r2, r3
 8010866:	2a00      	cmp	r2, #0
 8010868:	4691      	mov	r9, r2
 801086a:	dc37      	bgt.n	80108dc <_printf_float+0x374>
 801086c:	f04f 0b00 	mov.w	fp, #0
 8010870:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010874:	f104 021a 	add.w	r2, r4, #26
 8010878:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801087a:	9305      	str	r3, [sp, #20]
 801087c:	eba3 0309 	sub.w	r3, r3, r9
 8010880:	455b      	cmp	r3, fp
 8010882:	dc33      	bgt.n	80108ec <_printf_float+0x384>
 8010884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010888:	429a      	cmp	r2, r3
 801088a:	db3b      	blt.n	8010904 <_printf_float+0x39c>
 801088c:	6823      	ldr	r3, [r4, #0]
 801088e:	07da      	lsls	r2, r3, #31
 8010890:	d438      	bmi.n	8010904 <_printf_float+0x39c>
 8010892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010894:	9a05      	ldr	r2, [sp, #20]
 8010896:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010898:	1a9a      	subs	r2, r3, r2
 801089a:	eba3 0901 	sub.w	r9, r3, r1
 801089e:	4591      	cmp	r9, r2
 80108a0:	bfa8      	it	ge
 80108a2:	4691      	movge	r9, r2
 80108a4:	f1b9 0f00 	cmp.w	r9, #0
 80108a8:	dc35      	bgt.n	8010916 <_printf_float+0x3ae>
 80108aa:	f04f 0800 	mov.w	r8, #0
 80108ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80108b2:	f104 0a1a 	add.w	sl, r4, #26
 80108b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80108ba:	1a9b      	subs	r3, r3, r2
 80108bc:	eba3 0309 	sub.w	r3, r3, r9
 80108c0:	4543      	cmp	r3, r8
 80108c2:	f77f af79 	ble.w	80107b8 <_printf_float+0x250>
 80108c6:	2301      	movs	r3, #1
 80108c8:	4652      	mov	r2, sl
 80108ca:	4631      	mov	r1, r6
 80108cc:	4628      	mov	r0, r5
 80108ce:	47b8      	blx	r7
 80108d0:	3001      	adds	r0, #1
 80108d2:	f43f aeaa 	beq.w	801062a <_printf_float+0xc2>
 80108d6:	f108 0801 	add.w	r8, r8, #1
 80108da:	e7ec      	b.n	80108b6 <_printf_float+0x34e>
 80108dc:	4613      	mov	r3, r2
 80108de:	4631      	mov	r1, r6
 80108e0:	4642      	mov	r2, r8
 80108e2:	4628      	mov	r0, r5
 80108e4:	47b8      	blx	r7
 80108e6:	3001      	adds	r0, #1
 80108e8:	d1c0      	bne.n	801086c <_printf_float+0x304>
 80108ea:	e69e      	b.n	801062a <_printf_float+0xc2>
 80108ec:	2301      	movs	r3, #1
 80108ee:	4631      	mov	r1, r6
 80108f0:	4628      	mov	r0, r5
 80108f2:	9205      	str	r2, [sp, #20]
 80108f4:	47b8      	blx	r7
 80108f6:	3001      	adds	r0, #1
 80108f8:	f43f ae97 	beq.w	801062a <_printf_float+0xc2>
 80108fc:	9a05      	ldr	r2, [sp, #20]
 80108fe:	f10b 0b01 	add.w	fp, fp, #1
 8010902:	e7b9      	b.n	8010878 <_printf_float+0x310>
 8010904:	ee18 3a10 	vmov	r3, s16
 8010908:	4652      	mov	r2, sl
 801090a:	4631      	mov	r1, r6
 801090c:	4628      	mov	r0, r5
 801090e:	47b8      	blx	r7
 8010910:	3001      	adds	r0, #1
 8010912:	d1be      	bne.n	8010892 <_printf_float+0x32a>
 8010914:	e689      	b.n	801062a <_printf_float+0xc2>
 8010916:	9a05      	ldr	r2, [sp, #20]
 8010918:	464b      	mov	r3, r9
 801091a:	4442      	add	r2, r8
 801091c:	4631      	mov	r1, r6
 801091e:	4628      	mov	r0, r5
 8010920:	47b8      	blx	r7
 8010922:	3001      	adds	r0, #1
 8010924:	d1c1      	bne.n	80108aa <_printf_float+0x342>
 8010926:	e680      	b.n	801062a <_printf_float+0xc2>
 8010928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801092a:	2a01      	cmp	r2, #1
 801092c:	dc01      	bgt.n	8010932 <_printf_float+0x3ca>
 801092e:	07db      	lsls	r3, r3, #31
 8010930:	d538      	bpl.n	80109a4 <_printf_float+0x43c>
 8010932:	2301      	movs	r3, #1
 8010934:	4642      	mov	r2, r8
 8010936:	4631      	mov	r1, r6
 8010938:	4628      	mov	r0, r5
 801093a:	47b8      	blx	r7
 801093c:	3001      	adds	r0, #1
 801093e:	f43f ae74 	beq.w	801062a <_printf_float+0xc2>
 8010942:	ee18 3a10 	vmov	r3, s16
 8010946:	4652      	mov	r2, sl
 8010948:	4631      	mov	r1, r6
 801094a:	4628      	mov	r0, r5
 801094c:	47b8      	blx	r7
 801094e:	3001      	adds	r0, #1
 8010950:	f43f ae6b 	beq.w	801062a <_printf_float+0xc2>
 8010954:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010958:	2200      	movs	r2, #0
 801095a:	2300      	movs	r3, #0
 801095c:	f7f0 f8d4 	bl	8000b08 <__aeabi_dcmpeq>
 8010960:	b9d8      	cbnz	r0, 801099a <_printf_float+0x432>
 8010962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010964:	f108 0201 	add.w	r2, r8, #1
 8010968:	3b01      	subs	r3, #1
 801096a:	4631      	mov	r1, r6
 801096c:	4628      	mov	r0, r5
 801096e:	47b8      	blx	r7
 8010970:	3001      	adds	r0, #1
 8010972:	d10e      	bne.n	8010992 <_printf_float+0x42a>
 8010974:	e659      	b.n	801062a <_printf_float+0xc2>
 8010976:	2301      	movs	r3, #1
 8010978:	4652      	mov	r2, sl
 801097a:	4631      	mov	r1, r6
 801097c:	4628      	mov	r0, r5
 801097e:	47b8      	blx	r7
 8010980:	3001      	adds	r0, #1
 8010982:	f43f ae52 	beq.w	801062a <_printf_float+0xc2>
 8010986:	f108 0801 	add.w	r8, r8, #1
 801098a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801098c:	3b01      	subs	r3, #1
 801098e:	4543      	cmp	r3, r8
 8010990:	dcf1      	bgt.n	8010976 <_printf_float+0x40e>
 8010992:	464b      	mov	r3, r9
 8010994:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010998:	e6dc      	b.n	8010754 <_printf_float+0x1ec>
 801099a:	f04f 0800 	mov.w	r8, #0
 801099e:	f104 0a1a 	add.w	sl, r4, #26
 80109a2:	e7f2      	b.n	801098a <_printf_float+0x422>
 80109a4:	2301      	movs	r3, #1
 80109a6:	4642      	mov	r2, r8
 80109a8:	e7df      	b.n	801096a <_printf_float+0x402>
 80109aa:	2301      	movs	r3, #1
 80109ac:	464a      	mov	r2, r9
 80109ae:	4631      	mov	r1, r6
 80109b0:	4628      	mov	r0, r5
 80109b2:	47b8      	blx	r7
 80109b4:	3001      	adds	r0, #1
 80109b6:	f43f ae38 	beq.w	801062a <_printf_float+0xc2>
 80109ba:	f108 0801 	add.w	r8, r8, #1
 80109be:	68e3      	ldr	r3, [r4, #12]
 80109c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80109c2:	1a5b      	subs	r3, r3, r1
 80109c4:	4543      	cmp	r3, r8
 80109c6:	dcf0      	bgt.n	80109aa <_printf_float+0x442>
 80109c8:	e6fa      	b.n	80107c0 <_printf_float+0x258>
 80109ca:	f04f 0800 	mov.w	r8, #0
 80109ce:	f104 0919 	add.w	r9, r4, #25
 80109d2:	e7f4      	b.n	80109be <_printf_float+0x456>

080109d4 <_printf_common>:
 80109d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109d8:	4616      	mov	r6, r2
 80109da:	4699      	mov	r9, r3
 80109dc:	688a      	ldr	r2, [r1, #8]
 80109de:	690b      	ldr	r3, [r1, #16]
 80109e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80109e4:	4293      	cmp	r3, r2
 80109e6:	bfb8      	it	lt
 80109e8:	4613      	movlt	r3, r2
 80109ea:	6033      	str	r3, [r6, #0]
 80109ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80109f0:	4607      	mov	r7, r0
 80109f2:	460c      	mov	r4, r1
 80109f4:	b10a      	cbz	r2, 80109fa <_printf_common+0x26>
 80109f6:	3301      	adds	r3, #1
 80109f8:	6033      	str	r3, [r6, #0]
 80109fa:	6823      	ldr	r3, [r4, #0]
 80109fc:	0699      	lsls	r1, r3, #26
 80109fe:	bf42      	ittt	mi
 8010a00:	6833      	ldrmi	r3, [r6, #0]
 8010a02:	3302      	addmi	r3, #2
 8010a04:	6033      	strmi	r3, [r6, #0]
 8010a06:	6825      	ldr	r5, [r4, #0]
 8010a08:	f015 0506 	ands.w	r5, r5, #6
 8010a0c:	d106      	bne.n	8010a1c <_printf_common+0x48>
 8010a0e:	f104 0a19 	add.w	sl, r4, #25
 8010a12:	68e3      	ldr	r3, [r4, #12]
 8010a14:	6832      	ldr	r2, [r6, #0]
 8010a16:	1a9b      	subs	r3, r3, r2
 8010a18:	42ab      	cmp	r3, r5
 8010a1a:	dc26      	bgt.n	8010a6a <_printf_common+0x96>
 8010a1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010a20:	1e13      	subs	r3, r2, #0
 8010a22:	6822      	ldr	r2, [r4, #0]
 8010a24:	bf18      	it	ne
 8010a26:	2301      	movne	r3, #1
 8010a28:	0692      	lsls	r2, r2, #26
 8010a2a:	d42b      	bmi.n	8010a84 <_printf_common+0xb0>
 8010a2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a30:	4649      	mov	r1, r9
 8010a32:	4638      	mov	r0, r7
 8010a34:	47c0      	blx	r8
 8010a36:	3001      	adds	r0, #1
 8010a38:	d01e      	beq.n	8010a78 <_printf_common+0xa4>
 8010a3a:	6823      	ldr	r3, [r4, #0]
 8010a3c:	68e5      	ldr	r5, [r4, #12]
 8010a3e:	6832      	ldr	r2, [r6, #0]
 8010a40:	f003 0306 	and.w	r3, r3, #6
 8010a44:	2b04      	cmp	r3, #4
 8010a46:	bf08      	it	eq
 8010a48:	1aad      	subeq	r5, r5, r2
 8010a4a:	68a3      	ldr	r3, [r4, #8]
 8010a4c:	6922      	ldr	r2, [r4, #16]
 8010a4e:	bf0c      	ite	eq
 8010a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a54:	2500      	movne	r5, #0
 8010a56:	4293      	cmp	r3, r2
 8010a58:	bfc4      	itt	gt
 8010a5a:	1a9b      	subgt	r3, r3, r2
 8010a5c:	18ed      	addgt	r5, r5, r3
 8010a5e:	2600      	movs	r6, #0
 8010a60:	341a      	adds	r4, #26
 8010a62:	42b5      	cmp	r5, r6
 8010a64:	d11a      	bne.n	8010a9c <_printf_common+0xc8>
 8010a66:	2000      	movs	r0, #0
 8010a68:	e008      	b.n	8010a7c <_printf_common+0xa8>
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	4652      	mov	r2, sl
 8010a6e:	4649      	mov	r1, r9
 8010a70:	4638      	mov	r0, r7
 8010a72:	47c0      	blx	r8
 8010a74:	3001      	adds	r0, #1
 8010a76:	d103      	bne.n	8010a80 <_printf_common+0xac>
 8010a78:	f04f 30ff 	mov.w	r0, #4294967295
 8010a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a80:	3501      	adds	r5, #1
 8010a82:	e7c6      	b.n	8010a12 <_printf_common+0x3e>
 8010a84:	18e1      	adds	r1, r4, r3
 8010a86:	1c5a      	adds	r2, r3, #1
 8010a88:	2030      	movs	r0, #48	; 0x30
 8010a8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010a8e:	4422      	add	r2, r4
 8010a90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010a94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010a98:	3302      	adds	r3, #2
 8010a9a:	e7c7      	b.n	8010a2c <_printf_common+0x58>
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	4622      	mov	r2, r4
 8010aa0:	4649      	mov	r1, r9
 8010aa2:	4638      	mov	r0, r7
 8010aa4:	47c0      	blx	r8
 8010aa6:	3001      	adds	r0, #1
 8010aa8:	d0e6      	beq.n	8010a78 <_printf_common+0xa4>
 8010aaa:	3601      	adds	r6, #1
 8010aac:	e7d9      	b.n	8010a62 <_printf_common+0x8e>
	...

08010ab0 <_printf_i>:
 8010ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ab4:	7e0f      	ldrb	r7, [r1, #24]
 8010ab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010ab8:	2f78      	cmp	r7, #120	; 0x78
 8010aba:	4691      	mov	r9, r2
 8010abc:	4680      	mov	r8, r0
 8010abe:	460c      	mov	r4, r1
 8010ac0:	469a      	mov	sl, r3
 8010ac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010ac6:	d807      	bhi.n	8010ad8 <_printf_i+0x28>
 8010ac8:	2f62      	cmp	r7, #98	; 0x62
 8010aca:	d80a      	bhi.n	8010ae2 <_printf_i+0x32>
 8010acc:	2f00      	cmp	r7, #0
 8010ace:	f000 80d8 	beq.w	8010c82 <_printf_i+0x1d2>
 8010ad2:	2f58      	cmp	r7, #88	; 0x58
 8010ad4:	f000 80a3 	beq.w	8010c1e <_printf_i+0x16e>
 8010ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010adc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010ae0:	e03a      	b.n	8010b58 <_printf_i+0xa8>
 8010ae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010ae6:	2b15      	cmp	r3, #21
 8010ae8:	d8f6      	bhi.n	8010ad8 <_printf_i+0x28>
 8010aea:	a101      	add	r1, pc, #4	; (adr r1, 8010af0 <_printf_i+0x40>)
 8010aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010af0:	08010b49 	.word	0x08010b49
 8010af4:	08010b5d 	.word	0x08010b5d
 8010af8:	08010ad9 	.word	0x08010ad9
 8010afc:	08010ad9 	.word	0x08010ad9
 8010b00:	08010ad9 	.word	0x08010ad9
 8010b04:	08010ad9 	.word	0x08010ad9
 8010b08:	08010b5d 	.word	0x08010b5d
 8010b0c:	08010ad9 	.word	0x08010ad9
 8010b10:	08010ad9 	.word	0x08010ad9
 8010b14:	08010ad9 	.word	0x08010ad9
 8010b18:	08010ad9 	.word	0x08010ad9
 8010b1c:	08010c69 	.word	0x08010c69
 8010b20:	08010b8d 	.word	0x08010b8d
 8010b24:	08010c4b 	.word	0x08010c4b
 8010b28:	08010ad9 	.word	0x08010ad9
 8010b2c:	08010ad9 	.word	0x08010ad9
 8010b30:	08010c8b 	.word	0x08010c8b
 8010b34:	08010ad9 	.word	0x08010ad9
 8010b38:	08010b8d 	.word	0x08010b8d
 8010b3c:	08010ad9 	.word	0x08010ad9
 8010b40:	08010ad9 	.word	0x08010ad9
 8010b44:	08010c53 	.word	0x08010c53
 8010b48:	682b      	ldr	r3, [r5, #0]
 8010b4a:	1d1a      	adds	r2, r3, #4
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	602a      	str	r2, [r5, #0]
 8010b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b58:	2301      	movs	r3, #1
 8010b5a:	e0a3      	b.n	8010ca4 <_printf_i+0x1f4>
 8010b5c:	6820      	ldr	r0, [r4, #0]
 8010b5e:	6829      	ldr	r1, [r5, #0]
 8010b60:	0606      	lsls	r6, r0, #24
 8010b62:	f101 0304 	add.w	r3, r1, #4
 8010b66:	d50a      	bpl.n	8010b7e <_printf_i+0xce>
 8010b68:	680e      	ldr	r6, [r1, #0]
 8010b6a:	602b      	str	r3, [r5, #0]
 8010b6c:	2e00      	cmp	r6, #0
 8010b6e:	da03      	bge.n	8010b78 <_printf_i+0xc8>
 8010b70:	232d      	movs	r3, #45	; 0x2d
 8010b72:	4276      	negs	r6, r6
 8010b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b78:	485e      	ldr	r0, [pc, #376]	; (8010cf4 <_printf_i+0x244>)
 8010b7a:	230a      	movs	r3, #10
 8010b7c:	e019      	b.n	8010bb2 <_printf_i+0x102>
 8010b7e:	680e      	ldr	r6, [r1, #0]
 8010b80:	602b      	str	r3, [r5, #0]
 8010b82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010b86:	bf18      	it	ne
 8010b88:	b236      	sxthne	r6, r6
 8010b8a:	e7ef      	b.n	8010b6c <_printf_i+0xbc>
 8010b8c:	682b      	ldr	r3, [r5, #0]
 8010b8e:	6820      	ldr	r0, [r4, #0]
 8010b90:	1d19      	adds	r1, r3, #4
 8010b92:	6029      	str	r1, [r5, #0]
 8010b94:	0601      	lsls	r1, r0, #24
 8010b96:	d501      	bpl.n	8010b9c <_printf_i+0xec>
 8010b98:	681e      	ldr	r6, [r3, #0]
 8010b9a:	e002      	b.n	8010ba2 <_printf_i+0xf2>
 8010b9c:	0646      	lsls	r6, r0, #25
 8010b9e:	d5fb      	bpl.n	8010b98 <_printf_i+0xe8>
 8010ba0:	881e      	ldrh	r6, [r3, #0]
 8010ba2:	4854      	ldr	r0, [pc, #336]	; (8010cf4 <_printf_i+0x244>)
 8010ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8010ba6:	bf0c      	ite	eq
 8010ba8:	2308      	moveq	r3, #8
 8010baa:	230a      	movne	r3, #10
 8010bac:	2100      	movs	r1, #0
 8010bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010bb2:	6865      	ldr	r5, [r4, #4]
 8010bb4:	60a5      	str	r5, [r4, #8]
 8010bb6:	2d00      	cmp	r5, #0
 8010bb8:	bfa2      	ittt	ge
 8010bba:	6821      	ldrge	r1, [r4, #0]
 8010bbc:	f021 0104 	bicge.w	r1, r1, #4
 8010bc0:	6021      	strge	r1, [r4, #0]
 8010bc2:	b90e      	cbnz	r6, 8010bc8 <_printf_i+0x118>
 8010bc4:	2d00      	cmp	r5, #0
 8010bc6:	d04d      	beq.n	8010c64 <_printf_i+0x1b4>
 8010bc8:	4615      	mov	r5, r2
 8010bca:	fbb6 f1f3 	udiv	r1, r6, r3
 8010bce:	fb03 6711 	mls	r7, r3, r1, r6
 8010bd2:	5dc7      	ldrb	r7, [r0, r7]
 8010bd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010bd8:	4637      	mov	r7, r6
 8010bda:	42bb      	cmp	r3, r7
 8010bdc:	460e      	mov	r6, r1
 8010bde:	d9f4      	bls.n	8010bca <_printf_i+0x11a>
 8010be0:	2b08      	cmp	r3, #8
 8010be2:	d10b      	bne.n	8010bfc <_printf_i+0x14c>
 8010be4:	6823      	ldr	r3, [r4, #0]
 8010be6:	07de      	lsls	r6, r3, #31
 8010be8:	d508      	bpl.n	8010bfc <_printf_i+0x14c>
 8010bea:	6923      	ldr	r3, [r4, #16]
 8010bec:	6861      	ldr	r1, [r4, #4]
 8010bee:	4299      	cmp	r1, r3
 8010bf0:	bfde      	ittt	le
 8010bf2:	2330      	movle	r3, #48	; 0x30
 8010bf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010bf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010bfc:	1b52      	subs	r2, r2, r5
 8010bfe:	6122      	str	r2, [r4, #16]
 8010c00:	f8cd a000 	str.w	sl, [sp]
 8010c04:	464b      	mov	r3, r9
 8010c06:	aa03      	add	r2, sp, #12
 8010c08:	4621      	mov	r1, r4
 8010c0a:	4640      	mov	r0, r8
 8010c0c:	f7ff fee2 	bl	80109d4 <_printf_common>
 8010c10:	3001      	adds	r0, #1
 8010c12:	d14c      	bne.n	8010cae <_printf_i+0x1fe>
 8010c14:	f04f 30ff 	mov.w	r0, #4294967295
 8010c18:	b004      	add	sp, #16
 8010c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c1e:	4835      	ldr	r0, [pc, #212]	; (8010cf4 <_printf_i+0x244>)
 8010c20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010c24:	6829      	ldr	r1, [r5, #0]
 8010c26:	6823      	ldr	r3, [r4, #0]
 8010c28:	f851 6b04 	ldr.w	r6, [r1], #4
 8010c2c:	6029      	str	r1, [r5, #0]
 8010c2e:	061d      	lsls	r5, r3, #24
 8010c30:	d514      	bpl.n	8010c5c <_printf_i+0x1ac>
 8010c32:	07df      	lsls	r7, r3, #31
 8010c34:	bf44      	itt	mi
 8010c36:	f043 0320 	orrmi.w	r3, r3, #32
 8010c3a:	6023      	strmi	r3, [r4, #0]
 8010c3c:	b91e      	cbnz	r6, 8010c46 <_printf_i+0x196>
 8010c3e:	6823      	ldr	r3, [r4, #0]
 8010c40:	f023 0320 	bic.w	r3, r3, #32
 8010c44:	6023      	str	r3, [r4, #0]
 8010c46:	2310      	movs	r3, #16
 8010c48:	e7b0      	b.n	8010bac <_printf_i+0xfc>
 8010c4a:	6823      	ldr	r3, [r4, #0]
 8010c4c:	f043 0320 	orr.w	r3, r3, #32
 8010c50:	6023      	str	r3, [r4, #0]
 8010c52:	2378      	movs	r3, #120	; 0x78
 8010c54:	4828      	ldr	r0, [pc, #160]	; (8010cf8 <_printf_i+0x248>)
 8010c56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010c5a:	e7e3      	b.n	8010c24 <_printf_i+0x174>
 8010c5c:	0659      	lsls	r1, r3, #25
 8010c5e:	bf48      	it	mi
 8010c60:	b2b6      	uxthmi	r6, r6
 8010c62:	e7e6      	b.n	8010c32 <_printf_i+0x182>
 8010c64:	4615      	mov	r5, r2
 8010c66:	e7bb      	b.n	8010be0 <_printf_i+0x130>
 8010c68:	682b      	ldr	r3, [r5, #0]
 8010c6a:	6826      	ldr	r6, [r4, #0]
 8010c6c:	6961      	ldr	r1, [r4, #20]
 8010c6e:	1d18      	adds	r0, r3, #4
 8010c70:	6028      	str	r0, [r5, #0]
 8010c72:	0635      	lsls	r5, r6, #24
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	d501      	bpl.n	8010c7c <_printf_i+0x1cc>
 8010c78:	6019      	str	r1, [r3, #0]
 8010c7a:	e002      	b.n	8010c82 <_printf_i+0x1d2>
 8010c7c:	0670      	lsls	r0, r6, #25
 8010c7e:	d5fb      	bpl.n	8010c78 <_printf_i+0x1c8>
 8010c80:	8019      	strh	r1, [r3, #0]
 8010c82:	2300      	movs	r3, #0
 8010c84:	6123      	str	r3, [r4, #16]
 8010c86:	4615      	mov	r5, r2
 8010c88:	e7ba      	b.n	8010c00 <_printf_i+0x150>
 8010c8a:	682b      	ldr	r3, [r5, #0]
 8010c8c:	1d1a      	adds	r2, r3, #4
 8010c8e:	602a      	str	r2, [r5, #0]
 8010c90:	681d      	ldr	r5, [r3, #0]
 8010c92:	6862      	ldr	r2, [r4, #4]
 8010c94:	2100      	movs	r1, #0
 8010c96:	4628      	mov	r0, r5
 8010c98:	f7ef fac2 	bl	8000220 <memchr>
 8010c9c:	b108      	cbz	r0, 8010ca2 <_printf_i+0x1f2>
 8010c9e:	1b40      	subs	r0, r0, r5
 8010ca0:	6060      	str	r0, [r4, #4]
 8010ca2:	6863      	ldr	r3, [r4, #4]
 8010ca4:	6123      	str	r3, [r4, #16]
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010cac:	e7a8      	b.n	8010c00 <_printf_i+0x150>
 8010cae:	6923      	ldr	r3, [r4, #16]
 8010cb0:	462a      	mov	r2, r5
 8010cb2:	4649      	mov	r1, r9
 8010cb4:	4640      	mov	r0, r8
 8010cb6:	47d0      	blx	sl
 8010cb8:	3001      	adds	r0, #1
 8010cba:	d0ab      	beq.n	8010c14 <_printf_i+0x164>
 8010cbc:	6823      	ldr	r3, [r4, #0]
 8010cbe:	079b      	lsls	r3, r3, #30
 8010cc0:	d413      	bmi.n	8010cea <_printf_i+0x23a>
 8010cc2:	68e0      	ldr	r0, [r4, #12]
 8010cc4:	9b03      	ldr	r3, [sp, #12]
 8010cc6:	4298      	cmp	r0, r3
 8010cc8:	bfb8      	it	lt
 8010cca:	4618      	movlt	r0, r3
 8010ccc:	e7a4      	b.n	8010c18 <_printf_i+0x168>
 8010cce:	2301      	movs	r3, #1
 8010cd0:	4632      	mov	r2, r6
 8010cd2:	4649      	mov	r1, r9
 8010cd4:	4640      	mov	r0, r8
 8010cd6:	47d0      	blx	sl
 8010cd8:	3001      	adds	r0, #1
 8010cda:	d09b      	beq.n	8010c14 <_printf_i+0x164>
 8010cdc:	3501      	adds	r5, #1
 8010cde:	68e3      	ldr	r3, [r4, #12]
 8010ce0:	9903      	ldr	r1, [sp, #12]
 8010ce2:	1a5b      	subs	r3, r3, r1
 8010ce4:	42ab      	cmp	r3, r5
 8010ce6:	dcf2      	bgt.n	8010cce <_printf_i+0x21e>
 8010ce8:	e7eb      	b.n	8010cc2 <_printf_i+0x212>
 8010cea:	2500      	movs	r5, #0
 8010cec:	f104 0619 	add.w	r6, r4, #25
 8010cf0:	e7f5      	b.n	8010cde <_printf_i+0x22e>
 8010cf2:	bf00      	nop
 8010cf4:	08015af4 	.word	0x08015af4
 8010cf8:	08015b05 	.word	0x08015b05

08010cfc <_scanf_float>:
 8010cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d00:	b087      	sub	sp, #28
 8010d02:	4617      	mov	r7, r2
 8010d04:	9303      	str	r3, [sp, #12]
 8010d06:	688b      	ldr	r3, [r1, #8]
 8010d08:	1e5a      	subs	r2, r3, #1
 8010d0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010d0e:	bf83      	ittte	hi
 8010d10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010d14:	195b      	addhi	r3, r3, r5
 8010d16:	9302      	strhi	r3, [sp, #8]
 8010d18:	2300      	movls	r3, #0
 8010d1a:	bf86      	itte	hi
 8010d1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010d20:	608b      	strhi	r3, [r1, #8]
 8010d22:	9302      	strls	r3, [sp, #8]
 8010d24:	680b      	ldr	r3, [r1, #0]
 8010d26:	468b      	mov	fp, r1
 8010d28:	2500      	movs	r5, #0
 8010d2a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010d2e:	f84b 3b1c 	str.w	r3, [fp], #28
 8010d32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010d36:	4680      	mov	r8, r0
 8010d38:	460c      	mov	r4, r1
 8010d3a:	465e      	mov	r6, fp
 8010d3c:	46aa      	mov	sl, r5
 8010d3e:	46a9      	mov	r9, r5
 8010d40:	9501      	str	r5, [sp, #4]
 8010d42:	68a2      	ldr	r2, [r4, #8]
 8010d44:	b152      	cbz	r2, 8010d5c <_scanf_float+0x60>
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	781b      	ldrb	r3, [r3, #0]
 8010d4a:	2b4e      	cmp	r3, #78	; 0x4e
 8010d4c:	d864      	bhi.n	8010e18 <_scanf_float+0x11c>
 8010d4e:	2b40      	cmp	r3, #64	; 0x40
 8010d50:	d83c      	bhi.n	8010dcc <_scanf_float+0xd0>
 8010d52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010d56:	b2c8      	uxtb	r0, r1
 8010d58:	280e      	cmp	r0, #14
 8010d5a:	d93a      	bls.n	8010dd2 <_scanf_float+0xd6>
 8010d5c:	f1b9 0f00 	cmp.w	r9, #0
 8010d60:	d003      	beq.n	8010d6a <_scanf_float+0x6e>
 8010d62:	6823      	ldr	r3, [r4, #0]
 8010d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010d68:	6023      	str	r3, [r4, #0]
 8010d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010d6e:	f1ba 0f01 	cmp.w	sl, #1
 8010d72:	f200 8113 	bhi.w	8010f9c <_scanf_float+0x2a0>
 8010d76:	455e      	cmp	r6, fp
 8010d78:	f200 8105 	bhi.w	8010f86 <_scanf_float+0x28a>
 8010d7c:	2501      	movs	r5, #1
 8010d7e:	4628      	mov	r0, r5
 8010d80:	b007      	add	sp, #28
 8010d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010d8a:	2a0d      	cmp	r2, #13
 8010d8c:	d8e6      	bhi.n	8010d5c <_scanf_float+0x60>
 8010d8e:	a101      	add	r1, pc, #4	; (adr r1, 8010d94 <_scanf_float+0x98>)
 8010d90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010d94:	08010ed3 	.word	0x08010ed3
 8010d98:	08010d5d 	.word	0x08010d5d
 8010d9c:	08010d5d 	.word	0x08010d5d
 8010da0:	08010d5d 	.word	0x08010d5d
 8010da4:	08010f33 	.word	0x08010f33
 8010da8:	08010f0b 	.word	0x08010f0b
 8010dac:	08010d5d 	.word	0x08010d5d
 8010db0:	08010d5d 	.word	0x08010d5d
 8010db4:	08010ee1 	.word	0x08010ee1
 8010db8:	08010d5d 	.word	0x08010d5d
 8010dbc:	08010d5d 	.word	0x08010d5d
 8010dc0:	08010d5d 	.word	0x08010d5d
 8010dc4:	08010d5d 	.word	0x08010d5d
 8010dc8:	08010e99 	.word	0x08010e99
 8010dcc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010dd0:	e7db      	b.n	8010d8a <_scanf_float+0x8e>
 8010dd2:	290e      	cmp	r1, #14
 8010dd4:	d8c2      	bhi.n	8010d5c <_scanf_float+0x60>
 8010dd6:	a001      	add	r0, pc, #4	; (adr r0, 8010ddc <_scanf_float+0xe0>)
 8010dd8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010ddc:	08010e8b 	.word	0x08010e8b
 8010de0:	08010d5d 	.word	0x08010d5d
 8010de4:	08010e8b 	.word	0x08010e8b
 8010de8:	08010f1f 	.word	0x08010f1f
 8010dec:	08010d5d 	.word	0x08010d5d
 8010df0:	08010e39 	.word	0x08010e39
 8010df4:	08010e75 	.word	0x08010e75
 8010df8:	08010e75 	.word	0x08010e75
 8010dfc:	08010e75 	.word	0x08010e75
 8010e00:	08010e75 	.word	0x08010e75
 8010e04:	08010e75 	.word	0x08010e75
 8010e08:	08010e75 	.word	0x08010e75
 8010e0c:	08010e75 	.word	0x08010e75
 8010e10:	08010e75 	.word	0x08010e75
 8010e14:	08010e75 	.word	0x08010e75
 8010e18:	2b6e      	cmp	r3, #110	; 0x6e
 8010e1a:	d809      	bhi.n	8010e30 <_scanf_float+0x134>
 8010e1c:	2b60      	cmp	r3, #96	; 0x60
 8010e1e:	d8b2      	bhi.n	8010d86 <_scanf_float+0x8a>
 8010e20:	2b54      	cmp	r3, #84	; 0x54
 8010e22:	d077      	beq.n	8010f14 <_scanf_float+0x218>
 8010e24:	2b59      	cmp	r3, #89	; 0x59
 8010e26:	d199      	bne.n	8010d5c <_scanf_float+0x60>
 8010e28:	2d07      	cmp	r5, #7
 8010e2a:	d197      	bne.n	8010d5c <_scanf_float+0x60>
 8010e2c:	2508      	movs	r5, #8
 8010e2e:	e029      	b.n	8010e84 <_scanf_float+0x188>
 8010e30:	2b74      	cmp	r3, #116	; 0x74
 8010e32:	d06f      	beq.n	8010f14 <_scanf_float+0x218>
 8010e34:	2b79      	cmp	r3, #121	; 0x79
 8010e36:	e7f6      	b.n	8010e26 <_scanf_float+0x12a>
 8010e38:	6821      	ldr	r1, [r4, #0]
 8010e3a:	05c8      	lsls	r0, r1, #23
 8010e3c:	d51a      	bpl.n	8010e74 <_scanf_float+0x178>
 8010e3e:	9b02      	ldr	r3, [sp, #8]
 8010e40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010e44:	6021      	str	r1, [r4, #0]
 8010e46:	f109 0901 	add.w	r9, r9, #1
 8010e4a:	b11b      	cbz	r3, 8010e54 <_scanf_float+0x158>
 8010e4c:	3b01      	subs	r3, #1
 8010e4e:	3201      	adds	r2, #1
 8010e50:	9302      	str	r3, [sp, #8]
 8010e52:	60a2      	str	r2, [r4, #8]
 8010e54:	68a3      	ldr	r3, [r4, #8]
 8010e56:	3b01      	subs	r3, #1
 8010e58:	60a3      	str	r3, [r4, #8]
 8010e5a:	6923      	ldr	r3, [r4, #16]
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	6123      	str	r3, [r4, #16]
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	3b01      	subs	r3, #1
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	607b      	str	r3, [r7, #4]
 8010e68:	f340 8084 	ble.w	8010f74 <_scanf_float+0x278>
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	3301      	adds	r3, #1
 8010e70:	603b      	str	r3, [r7, #0]
 8010e72:	e766      	b.n	8010d42 <_scanf_float+0x46>
 8010e74:	eb1a 0f05 	cmn.w	sl, r5
 8010e78:	f47f af70 	bne.w	8010d5c <_scanf_float+0x60>
 8010e7c:	6822      	ldr	r2, [r4, #0]
 8010e7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010e82:	6022      	str	r2, [r4, #0]
 8010e84:	f806 3b01 	strb.w	r3, [r6], #1
 8010e88:	e7e4      	b.n	8010e54 <_scanf_float+0x158>
 8010e8a:	6822      	ldr	r2, [r4, #0]
 8010e8c:	0610      	lsls	r0, r2, #24
 8010e8e:	f57f af65 	bpl.w	8010d5c <_scanf_float+0x60>
 8010e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010e96:	e7f4      	b.n	8010e82 <_scanf_float+0x186>
 8010e98:	f1ba 0f00 	cmp.w	sl, #0
 8010e9c:	d10e      	bne.n	8010ebc <_scanf_float+0x1c0>
 8010e9e:	f1b9 0f00 	cmp.w	r9, #0
 8010ea2:	d10e      	bne.n	8010ec2 <_scanf_float+0x1c6>
 8010ea4:	6822      	ldr	r2, [r4, #0]
 8010ea6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010eaa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010eae:	d108      	bne.n	8010ec2 <_scanf_float+0x1c6>
 8010eb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010eb4:	6022      	str	r2, [r4, #0]
 8010eb6:	f04f 0a01 	mov.w	sl, #1
 8010eba:	e7e3      	b.n	8010e84 <_scanf_float+0x188>
 8010ebc:	f1ba 0f02 	cmp.w	sl, #2
 8010ec0:	d055      	beq.n	8010f6e <_scanf_float+0x272>
 8010ec2:	2d01      	cmp	r5, #1
 8010ec4:	d002      	beq.n	8010ecc <_scanf_float+0x1d0>
 8010ec6:	2d04      	cmp	r5, #4
 8010ec8:	f47f af48 	bne.w	8010d5c <_scanf_float+0x60>
 8010ecc:	3501      	adds	r5, #1
 8010ece:	b2ed      	uxtb	r5, r5
 8010ed0:	e7d8      	b.n	8010e84 <_scanf_float+0x188>
 8010ed2:	f1ba 0f01 	cmp.w	sl, #1
 8010ed6:	f47f af41 	bne.w	8010d5c <_scanf_float+0x60>
 8010eda:	f04f 0a02 	mov.w	sl, #2
 8010ede:	e7d1      	b.n	8010e84 <_scanf_float+0x188>
 8010ee0:	b97d      	cbnz	r5, 8010f02 <_scanf_float+0x206>
 8010ee2:	f1b9 0f00 	cmp.w	r9, #0
 8010ee6:	f47f af3c 	bne.w	8010d62 <_scanf_float+0x66>
 8010eea:	6822      	ldr	r2, [r4, #0]
 8010eec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010ef0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010ef4:	f47f af39 	bne.w	8010d6a <_scanf_float+0x6e>
 8010ef8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010efc:	6022      	str	r2, [r4, #0]
 8010efe:	2501      	movs	r5, #1
 8010f00:	e7c0      	b.n	8010e84 <_scanf_float+0x188>
 8010f02:	2d03      	cmp	r5, #3
 8010f04:	d0e2      	beq.n	8010ecc <_scanf_float+0x1d0>
 8010f06:	2d05      	cmp	r5, #5
 8010f08:	e7de      	b.n	8010ec8 <_scanf_float+0x1cc>
 8010f0a:	2d02      	cmp	r5, #2
 8010f0c:	f47f af26 	bne.w	8010d5c <_scanf_float+0x60>
 8010f10:	2503      	movs	r5, #3
 8010f12:	e7b7      	b.n	8010e84 <_scanf_float+0x188>
 8010f14:	2d06      	cmp	r5, #6
 8010f16:	f47f af21 	bne.w	8010d5c <_scanf_float+0x60>
 8010f1a:	2507      	movs	r5, #7
 8010f1c:	e7b2      	b.n	8010e84 <_scanf_float+0x188>
 8010f1e:	6822      	ldr	r2, [r4, #0]
 8010f20:	0591      	lsls	r1, r2, #22
 8010f22:	f57f af1b 	bpl.w	8010d5c <_scanf_float+0x60>
 8010f26:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010f2a:	6022      	str	r2, [r4, #0]
 8010f2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010f30:	e7a8      	b.n	8010e84 <_scanf_float+0x188>
 8010f32:	6822      	ldr	r2, [r4, #0]
 8010f34:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010f38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010f3c:	d006      	beq.n	8010f4c <_scanf_float+0x250>
 8010f3e:	0550      	lsls	r0, r2, #21
 8010f40:	f57f af0c 	bpl.w	8010d5c <_scanf_float+0x60>
 8010f44:	f1b9 0f00 	cmp.w	r9, #0
 8010f48:	f43f af0f 	beq.w	8010d6a <_scanf_float+0x6e>
 8010f4c:	0591      	lsls	r1, r2, #22
 8010f4e:	bf58      	it	pl
 8010f50:	9901      	ldrpl	r1, [sp, #4]
 8010f52:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010f56:	bf58      	it	pl
 8010f58:	eba9 0101 	subpl.w	r1, r9, r1
 8010f5c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010f60:	bf58      	it	pl
 8010f62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010f66:	6022      	str	r2, [r4, #0]
 8010f68:	f04f 0900 	mov.w	r9, #0
 8010f6c:	e78a      	b.n	8010e84 <_scanf_float+0x188>
 8010f6e:	f04f 0a03 	mov.w	sl, #3
 8010f72:	e787      	b.n	8010e84 <_scanf_float+0x188>
 8010f74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010f78:	4639      	mov	r1, r7
 8010f7a:	4640      	mov	r0, r8
 8010f7c:	4798      	blx	r3
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	f43f aedf 	beq.w	8010d42 <_scanf_float+0x46>
 8010f84:	e6ea      	b.n	8010d5c <_scanf_float+0x60>
 8010f86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010f8e:	463a      	mov	r2, r7
 8010f90:	4640      	mov	r0, r8
 8010f92:	4798      	blx	r3
 8010f94:	6923      	ldr	r3, [r4, #16]
 8010f96:	3b01      	subs	r3, #1
 8010f98:	6123      	str	r3, [r4, #16]
 8010f9a:	e6ec      	b.n	8010d76 <_scanf_float+0x7a>
 8010f9c:	1e6b      	subs	r3, r5, #1
 8010f9e:	2b06      	cmp	r3, #6
 8010fa0:	d825      	bhi.n	8010fee <_scanf_float+0x2f2>
 8010fa2:	2d02      	cmp	r5, #2
 8010fa4:	d836      	bhi.n	8011014 <_scanf_float+0x318>
 8010fa6:	455e      	cmp	r6, fp
 8010fa8:	f67f aee8 	bls.w	8010d7c <_scanf_float+0x80>
 8010fac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010fb0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010fb4:	463a      	mov	r2, r7
 8010fb6:	4640      	mov	r0, r8
 8010fb8:	4798      	blx	r3
 8010fba:	6923      	ldr	r3, [r4, #16]
 8010fbc:	3b01      	subs	r3, #1
 8010fbe:	6123      	str	r3, [r4, #16]
 8010fc0:	e7f1      	b.n	8010fa6 <_scanf_float+0x2aa>
 8010fc2:	9802      	ldr	r0, [sp, #8]
 8010fc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010fc8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010fcc:	9002      	str	r0, [sp, #8]
 8010fce:	463a      	mov	r2, r7
 8010fd0:	4640      	mov	r0, r8
 8010fd2:	4798      	blx	r3
 8010fd4:	6923      	ldr	r3, [r4, #16]
 8010fd6:	3b01      	subs	r3, #1
 8010fd8:	6123      	str	r3, [r4, #16]
 8010fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010fde:	fa5f fa8a 	uxtb.w	sl, sl
 8010fe2:	f1ba 0f02 	cmp.w	sl, #2
 8010fe6:	d1ec      	bne.n	8010fc2 <_scanf_float+0x2c6>
 8010fe8:	3d03      	subs	r5, #3
 8010fea:	b2ed      	uxtb	r5, r5
 8010fec:	1b76      	subs	r6, r6, r5
 8010fee:	6823      	ldr	r3, [r4, #0]
 8010ff0:	05da      	lsls	r2, r3, #23
 8010ff2:	d52f      	bpl.n	8011054 <_scanf_float+0x358>
 8010ff4:	055b      	lsls	r3, r3, #21
 8010ff6:	d510      	bpl.n	801101a <_scanf_float+0x31e>
 8010ff8:	455e      	cmp	r6, fp
 8010ffa:	f67f aebf 	bls.w	8010d7c <_scanf_float+0x80>
 8010ffe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011002:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011006:	463a      	mov	r2, r7
 8011008:	4640      	mov	r0, r8
 801100a:	4798      	blx	r3
 801100c:	6923      	ldr	r3, [r4, #16]
 801100e:	3b01      	subs	r3, #1
 8011010:	6123      	str	r3, [r4, #16]
 8011012:	e7f1      	b.n	8010ff8 <_scanf_float+0x2fc>
 8011014:	46aa      	mov	sl, r5
 8011016:	9602      	str	r6, [sp, #8]
 8011018:	e7df      	b.n	8010fda <_scanf_float+0x2de>
 801101a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801101e:	6923      	ldr	r3, [r4, #16]
 8011020:	2965      	cmp	r1, #101	; 0x65
 8011022:	f103 33ff 	add.w	r3, r3, #4294967295
 8011026:	f106 35ff 	add.w	r5, r6, #4294967295
 801102a:	6123      	str	r3, [r4, #16]
 801102c:	d00c      	beq.n	8011048 <_scanf_float+0x34c>
 801102e:	2945      	cmp	r1, #69	; 0x45
 8011030:	d00a      	beq.n	8011048 <_scanf_float+0x34c>
 8011032:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011036:	463a      	mov	r2, r7
 8011038:	4640      	mov	r0, r8
 801103a:	4798      	blx	r3
 801103c:	6923      	ldr	r3, [r4, #16]
 801103e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011042:	3b01      	subs	r3, #1
 8011044:	1eb5      	subs	r5, r6, #2
 8011046:	6123      	str	r3, [r4, #16]
 8011048:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801104c:	463a      	mov	r2, r7
 801104e:	4640      	mov	r0, r8
 8011050:	4798      	blx	r3
 8011052:	462e      	mov	r6, r5
 8011054:	6825      	ldr	r5, [r4, #0]
 8011056:	f015 0510 	ands.w	r5, r5, #16
 801105a:	d159      	bne.n	8011110 <_scanf_float+0x414>
 801105c:	7035      	strb	r5, [r6, #0]
 801105e:	6823      	ldr	r3, [r4, #0]
 8011060:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011068:	d11b      	bne.n	80110a2 <_scanf_float+0x3a6>
 801106a:	9b01      	ldr	r3, [sp, #4]
 801106c:	454b      	cmp	r3, r9
 801106e:	eba3 0209 	sub.w	r2, r3, r9
 8011072:	d123      	bne.n	80110bc <_scanf_float+0x3c0>
 8011074:	2200      	movs	r2, #0
 8011076:	4659      	mov	r1, fp
 8011078:	4640      	mov	r0, r8
 801107a:	f000 ff27 	bl	8011ecc <_strtod_r>
 801107e:	6822      	ldr	r2, [r4, #0]
 8011080:	9b03      	ldr	r3, [sp, #12]
 8011082:	f012 0f02 	tst.w	r2, #2
 8011086:	ec57 6b10 	vmov	r6, r7, d0
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	d021      	beq.n	80110d2 <_scanf_float+0x3d6>
 801108e:	9903      	ldr	r1, [sp, #12]
 8011090:	1d1a      	adds	r2, r3, #4
 8011092:	600a      	str	r2, [r1, #0]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	e9c3 6700 	strd	r6, r7, [r3]
 801109a:	68e3      	ldr	r3, [r4, #12]
 801109c:	3301      	adds	r3, #1
 801109e:	60e3      	str	r3, [r4, #12]
 80110a0:	e66d      	b.n	8010d7e <_scanf_float+0x82>
 80110a2:	9b04      	ldr	r3, [sp, #16]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d0e5      	beq.n	8011074 <_scanf_float+0x378>
 80110a8:	9905      	ldr	r1, [sp, #20]
 80110aa:	230a      	movs	r3, #10
 80110ac:	462a      	mov	r2, r5
 80110ae:	3101      	adds	r1, #1
 80110b0:	4640      	mov	r0, r8
 80110b2:	f000 ff93 	bl	8011fdc <_strtol_r>
 80110b6:	9b04      	ldr	r3, [sp, #16]
 80110b8:	9e05      	ldr	r6, [sp, #20]
 80110ba:	1ac2      	subs	r2, r0, r3
 80110bc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80110c0:	429e      	cmp	r6, r3
 80110c2:	bf28      	it	cs
 80110c4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80110c8:	4912      	ldr	r1, [pc, #72]	; (8011114 <_scanf_float+0x418>)
 80110ca:	4630      	mov	r0, r6
 80110cc:	f000 f82c 	bl	8011128 <siprintf>
 80110d0:	e7d0      	b.n	8011074 <_scanf_float+0x378>
 80110d2:	9903      	ldr	r1, [sp, #12]
 80110d4:	f012 0f04 	tst.w	r2, #4
 80110d8:	f103 0204 	add.w	r2, r3, #4
 80110dc:	600a      	str	r2, [r1, #0]
 80110de:	d1d9      	bne.n	8011094 <_scanf_float+0x398>
 80110e0:	f8d3 8000 	ldr.w	r8, [r3]
 80110e4:	ee10 2a10 	vmov	r2, s0
 80110e8:	ee10 0a10 	vmov	r0, s0
 80110ec:	463b      	mov	r3, r7
 80110ee:	4639      	mov	r1, r7
 80110f0:	f7ef fd3c 	bl	8000b6c <__aeabi_dcmpun>
 80110f4:	b128      	cbz	r0, 8011102 <_scanf_float+0x406>
 80110f6:	4808      	ldr	r0, [pc, #32]	; (8011118 <_scanf_float+0x41c>)
 80110f8:	f000 f810 	bl	801111c <nanf>
 80110fc:	ed88 0a00 	vstr	s0, [r8]
 8011100:	e7cb      	b.n	801109a <_scanf_float+0x39e>
 8011102:	4630      	mov	r0, r6
 8011104:	4639      	mov	r1, r7
 8011106:	f7ef fd8f 	bl	8000c28 <__aeabi_d2f>
 801110a:	f8c8 0000 	str.w	r0, [r8]
 801110e:	e7c4      	b.n	801109a <_scanf_float+0x39e>
 8011110:	2500      	movs	r5, #0
 8011112:	e634      	b.n	8010d7e <_scanf_float+0x82>
 8011114:	08015b16 	.word	0x08015b16
 8011118:	08015f3b 	.word	0x08015f3b

0801111c <nanf>:
 801111c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011124 <nanf+0x8>
 8011120:	4770      	bx	lr
 8011122:	bf00      	nop
 8011124:	7fc00000 	.word	0x7fc00000

08011128 <siprintf>:
 8011128:	b40e      	push	{r1, r2, r3}
 801112a:	b500      	push	{lr}
 801112c:	b09c      	sub	sp, #112	; 0x70
 801112e:	ab1d      	add	r3, sp, #116	; 0x74
 8011130:	9002      	str	r0, [sp, #8]
 8011132:	9006      	str	r0, [sp, #24]
 8011134:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011138:	4809      	ldr	r0, [pc, #36]	; (8011160 <siprintf+0x38>)
 801113a:	9107      	str	r1, [sp, #28]
 801113c:	9104      	str	r1, [sp, #16]
 801113e:	4909      	ldr	r1, [pc, #36]	; (8011164 <siprintf+0x3c>)
 8011140:	f853 2b04 	ldr.w	r2, [r3], #4
 8011144:	9105      	str	r1, [sp, #20]
 8011146:	6800      	ldr	r0, [r0, #0]
 8011148:	9301      	str	r3, [sp, #4]
 801114a:	a902      	add	r1, sp, #8
 801114c:	f002 ff9a 	bl	8014084 <_svfiprintf_r>
 8011150:	9b02      	ldr	r3, [sp, #8]
 8011152:	2200      	movs	r2, #0
 8011154:	701a      	strb	r2, [r3, #0]
 8011156:	b01c      	add	sp, #112	; 0x70
 8011158:	f85d eb04 	ldr.w	lr, [sp], #4
 801115c:	b003      	add	sp, #12
 801115e:	4770      	bx	lr
 8011160:	200002c8 	.word	0x200002c8
 8011164:	ffff0208 	.word	0xffff0208

08011168 <siscanf>:
 8011168:	b40e      	push	{r1, r2, r3}
 801116a:	b510      	push	{r4, lr}
 801116c:	b09f      	sub	sp, #124	; 0x7c
 801116e:	ac21      	add	r4, sp, #132	; 0x84
 8011170:	f44f 7101 	mov.w	r1, #516	; 0x204
 8011174:	f854 2b04 	ldr.w	r2, [r4], #4
 8011178:	9201      	str	r2, [sp, #4]
 801117a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801117e:	9004      	str	r0, [sp, #16]
 8011180:	9008      	str	r0, [sp, #32]
 8011182:	f7ef f845 	bl	8000210 <strlen>
 8011186:	4b0c      	ldr	r3, [pc, #48]	; (80111b8 <siscanf+0x50>)
 8011188:	9005      	str	r0, [sp, #20]
 801118a:	9009      	str	r0, [sp, #36]	; 0x24
 801118c:	930d      	str	r3, [sp, #52]	; 0x34
 801118e:	480b      	ldr	r0, [pc, #44]	; (80111bc <siscanf+0x54>)
 8011190:	9a01      	ldr	r2, [sp, #4]
 8011192:	6800      	ldr	r0, [r0, #0]
 8011194:	9403      	str	r4, [sp, #12]
 8011196:	2300      	movs	r3, #0
 8011198:	9311      	str	r3, [sp, #68]	; 0x44
 801119a:	9316      	str	r3, [sp, #88]	; 0x58
 801119c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80111a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80111a4:	a904      	add	r1, sp, #16
 80111a6:	4623      	mov	r3, r4
 80111a8:	f003 f8c6 	bl	8014338 <__ssvfiscanf_r>
 80111ac:	b01f      	add	sp, #124	; 0x7c
 80111ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111b2:	b003      	add	sp, #12
 80111b4:	4770      	bx	lr
 80111b6:	bf00      	nop
 80111b8:	080111e3 	.word	0x080111e3
 80111bc:	200002c8 	.word	0x200002c8

080111c0 <__sread>:
 80111c0:	b510      	push	{r4, lr}
 80111c2:	460c      	mov	r4, r1
 80111c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111c8:	f003 fb80 	bl	80148cc <_read_r>
 80111cc:	2800      	cmp	r0, #0
 80111ce:	bfab      	itete	ge
 80111d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80111d2:	89a3      	ldrhlt	r3, [r4, #12]
 80111d4:	181b      	addge	r3, r3, r0
 80111d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80111da:	bfac      	ite	ge
 80111dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80111de:	81a3      	strhlt	r3, [r4, #12]
 80111e0:	bd10      	pop	{r4, pc}

080111e2 <__seofread>:
 80111e2:	2000      	movs	r0, #0
 80111e4:	4770      	bx	lr

080111e6 <__swrite>:
 80111e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111ea:	461f      	mov	r7, r3
 80111ec:	898b      	ldrh	r3, [r1, #12]
 80111ee:	05db      	lsls	r3, r3, #23
 80111f0:	4605      	mov	r5, r0
 80111f2:	460c      	mov	r4, r1
 80111f4:	4616      	mov	r6, r2
 80111f6:	d505      	bpl.n	8011204 <__swrite+0x1e>
 80111f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111fc:	2302      	movs	r3, #2
 80111fe:	2200      	movs	r2, #0
 8011200:	f002 f900 	bl	8013404 <_lseek_r>
 8011204:	89a3      	ldrh	r3, [r4, #12]
 8011206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801120a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801120e:	81a3      	strh	r3, [r4, #12]
 8011210:	4632      	mov	r2, r6
 8011212:	463b      	mov	r3, r7
 8011214:	4628      	mov	r0, r5
 8011216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801121a:	f000 bee1 	b.w	8011fe0 <_write_r>

0801121e <__sseek>:
 801121e:	b510      	push	{r4, lr}
 8011220:	460c      	mov	r4, r1
 8011222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011226:	f002 f8ed 	bl	8013404 <_lseek_r>
 801122a:	1c43      	adds	r3, r0, #1
 801122c:	89a3      	ldrh	r3, [r4, #12]
 801122e:	bf15      	itete	ne
 8011230:	6560      	strne	r0, [r4, #84]	; 0x54
 8011232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801123a:	81a3      	strheq	r3, [r4, #12]
 801123c:	bf18      	it	ne
 801123e:	81a3      	strhne	r3, [r4, #12]
 8011240:	bd10      	pop	{r4, pc}

08011242 <__sclose>:
 8011242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011246:	f000 bedd 	b.w	8012004 <_close_r>

0801124a <strcpy>:
 801124a:	4603      	mov	r3, r0
 801124c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011250:	f803 2b01 	strb.w	r2, [r3], #1
 8011254:	2a00      	cmp	r2, #0
 8011256:	d1f9      	bne.n	801124c <strcpy+0x2>
 8011258:	4770      	bx	lr

0801125a <strncmp>:
 801125a:	b510      	push	{r4, lr}
 801125c:	b17a      	cbz	r2, 801127e <strncmp+0x24>
 801125e:	4603      	mov	r3, r0
 8011260:	3901      	subs	r1, #1
 8011262:	1884      	adds	r4, r0, r2
 8011264:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011268:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801126c:	4290      	cmp	r0, r2
 801126e:	d101      	bne.n	8011274 <strncmp+0x1a>
 8011270:	42a3      	cmp	r3, r4
 8011272:	d101      	bne.n	8011278 <strncmp+0x1e>
 8011274:	1a80      	subs	r0, r0, r2
 8011276:	bd10      	pop	{r4, pc}
 8011278:	2800      	cmp	r0, #0
 801127a:	d1f3      	bne.n	8011264 <strncmp+0xa>
 801127c:	e7fa      	b.n	8011274 <strncmp+0x1a>
 801127e:	4610      	mov	r0, r2
 8011280:	e7f9      	b.n	8011276 <strncmp+0x1c>

08011282 <sulp>:
 8011282:	b570      	push	{r4, r5, r6, lr}
 8011284:	4604      	mov	r4, r0
 8011286:	460d      	mov	r5, r1
 8011288:	ec45 4b10 	vmov	d0, r4, r5
 801128c:	4616      	mov	r6, r2
 801128e:	f002 fc57 	bl	8013b40 <__ulp>
 8011292:	ec51 0b10 	vmov	r0, r1, d0
 8011296:	b17e      	cbz	r6, 80112b8 <sulp+0x36>
 8011298:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801129c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	dd09      	ble.n	80112b8 <sulp+0x36>
 80112a4:	051b      	lsls	r3, r3, #20
 80112a6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80112aa:	2400      	movs	r4, #0
 80112ac:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80112b0:	4622      	mov	r2, r4
 80112b2:	462b      	mov	r3, r5
 80112b4:	f7ef f9c0 	bl	8000638 <__aeabi_dmul>
 80112b8:	bd70      	pop	{r4, r5, r6, pc}
 80112ba:	0000      	movs	r0, r0
 80112bc:	0000      	movs	r0, r0
	...

080112c0 <_strtod_l>:
 80112c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112c4:	ed2d 8b02 	vpush	{d8}
 80112c8:	b09d      	sub	sp, #116	; 0x74
 80112ca:	461f      	mov	r7, r3
 80112cc:	2300      	movs	r3, #0
 80112ce:	9318      	str	r3, [sp, #96]	; 0x60
 80112d0:	4ba2      	ldr	r3, [pc, #648]	; (801155c <_strtod_l+0x29c>)
 80112d2:	9213      	str	r2, [sp, #76]	; 0x4c
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	9305      	str	r3, [sp, #20]
 80112d8:	4604      	mov	r4, r0
 80112da:	4618      	mov	r0, r3
 80112dc:	4688      	mov	r8, r1
 80112de:	f7ee ff97 	bl	8000210 <strlen>
 80112e2:	f04f 0a00 	mov.w	sl, #0
 80112e6:	4605      	mov	r5, r0
 80112e8:	f04f 0b00 	mov.w	fp, #0
 80112ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80112f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112f2:	781a      	ldrb	r2, [r3, #0]
 80112f4:	2a2b      	cmp	r2, #43	; 0x2b
 80112f6:	d04e      	beq.n	8011396 <_strtod_l+0xd6>
 80112f8:	d83b      	bhi.n	8011372 <_strtod_l+0xb2>
 80112fa:	2a0d      	cmp	r2, #13
 80112fc:	d834      	bhi.n	8011368 <_strtod_l+0xa8>
 80112fe:	2a08      	cmp	r2, #8
 8011300:	d834      	bhi.n	801136c <_strtod_l+0xac>
 8011302:	2a00      	cmp	r2, #0
 8011304:	d03e      	beq.n	8011384 <_strtod_l+0xc4>
 8011306:	2300      	movs	r3, #0
 8011308:	930a      	str	r3, [sp, #40]	; 0x28
 801130a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801130c:	7833      	ldrb	r3, [r6, #0]
 801130e:	2b30      	cmp	r3, #48	; 0x30
 8011310:	f040 80b0 	bne.w	8011474 <_strtod_l+0x1b4>
 8011314:	7873      	ldrb	r3, [r6, #1]
 8011316:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801131a:	2b58      	cmp	r3, #88	; 0x58
 801131c:	d168      	bne.n	80113f0 <_strtod_l+0x130>
 801131e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011320:	9301      	str	r3, [sp, #4]
 8011322:	ab18      	add	r3, sp, #96	; 0x60
 8011324:	9702      	str	r7, [sp, #8]
 8011326:	9300      	str	r3, [sp, #0]
 8011328:	4a8d      	ldr	r2, [pc, #564]	; (8011560 <_strtod_l+0x2a0>)
 801132a:	ab19      	add	r3, sp, #100	; 0x64
 801132c:	a917      	add	r1, sp, #92	; 0x5c
 801132e:	4620      	mov	r0, r4
 8011330:	f001 fd5c 	bl	8012dec <__gethex>
 8011334:	f010 0707 	ands.w	r7, r0, #7
 8011338:	4605      	mov	r5, r0
 801133a:	d005      	beq.n	8011348 <_strtod_l+0x88>
 801133c:	2f06      	cmp	r7, #6
 801133e:	d12c      	bne.n	801139a <_strtod_l+0xda>
 8011340:	3601      	adds	r6, #1
 8011342:	2300      	movs	r3, #0
 8011344:	9617      	str	r6, [sp, #92]	; 0x5c
 8011346:	930a      	str	r3, [sp, #40]	; 0x28
 8011348:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801134a:	2b00      	cmp	r3, #0
 801134c:	f040 8590 	bne.w	8011e70 <_strtod_l+0xbb0>
 8011350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011352:	b1eb      	cbz	r3, 8011390 <_strtod_l+0xd0>
 8011354:	4652      	mov	r2, sl
 8011356:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801135a:	ec43 2b10 	vmov	d0, r2, r3
 801135e:	b01d      	add	sp, #116	; 0x74
 8011360:	ecbd 8b02 	vpop	{d8}
 8011364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011368:	2a20      	cmp	r2, #32
 801136a:	d1cc      	bne.n	8011306 <_strtod_l+0x46>
 801136c:	3301      	adds	r3, #1
 801136e:	9317      	str	r3, [sp, #92]	; 0x5c
 8011370:	e7be      	b.n	80112f0 <_strtod_l+0x30>
 8011372:	2a2d      	cmp	r2, #45	; 0x2d
 8011374:	d1c7      	bne.n	8011306 <_strtod_l+0x46>
 8011376:	2201      	movs	r2, #1
 8011378:	920a      	str	r2, [sp, #40]	; 0x28
 801137a:	1c5a      	adds	r2, r3, #1
 801137c:	9217      	str	r2, [sp, #92]	; 0x5c
 801137e:	785b      	ldrb	r3, [r3, #1]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d1c2      	bne.n	801130a <_strtod_l+0x4a>
 8011384:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011386:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801138a:	2b00      	cmp	r3, #0
 801138c:	f040 856e 	bne.w	8011e6c <_strtod_l+0xbac>
 8011390:	4652      	mov	r2, sl
 8011392:	465b      	mov	r3, fp
 8011394:	e7e1      	b.n	801135a <_strtod_l+0x9a>
 8011396:	2200      	movs	r2, #0
 8011398:	e7ee      	b.n	8011378 <_strtod_l+0xb8>
 801139a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801139c:	b13a      	cbz	r2, 80113ae <_strtod_l+0xee>
 801139e:	2135      	movs	r1, #53	; 0x35
 80113a0:	a81a      	add	r0, sp, #104	; 0x68
 80113a2:	f002 fcd8 	bl	8013d56 <__copybits>
 80113a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80113a8:	4620      	mov	r0, r4
 80113aa:	f002 f897 	bl	80134dc <_Bfree>
 80113ae:	3f01      	subs	r7, #1
 80113b0:	2f04      	cmp	r7, #4
 80113b2:	d806      	bhi.n	80113c2 <_strtod_l+0x102>
 80113b4:	e8df f007 	tbb	[pc, r7]
 80113b8:	1714030a 	.word	0x1714030a
 80113bc:	0a          	.byte	0x0a
 80113bd:	00          	.byte	0x00
 80113be:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80113c2:	0728      	lsls	r0, r5, #28
 80113c4:	d5c0      	bpl.n	8011348 <_strtod_l+0x88>
 80113c6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80113ca:	e7bd      	b.n	8011348 <_strtod_l+0x88>
 80113cc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80113d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80113d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80113d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80113da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80113de:	e7f0      	b.n	80113c2 <_strtod_l+0x102>
 80113e0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8011564 <_strtod_l+0x2a4>
 80113e4:	e7ed      	b.n	80113c2 <_strtod_l+0x102>
 80113e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80113ea:	f04f 3aff 	mov.w	sl, #4294967295
 80113ee:	e7e8      	b.n	80113c2 <_strtod_l+0x102>
 80113f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80113f2:	1c5a      	adds	r2, r3, #1
 80113f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80113f6:	785b      	ldrb	r3, [r3, #1]
 80113f8:	2b30      	cmp	r3, #48	; 0x30
 80113fa:	d0f9      	beq.n	80113f0 <_strtod_l+0x130>
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d0a3      	beq.n	8011348 <_strtod_l+0x88>
 8011400:	2301      	movs	r3, #1
 8011402:	f04f 0900 	mov.w	r9, #0
 8011406:	9304      	str	r3, [sp, #16]
 8011408:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801140a:	9308      	str	r3, [sp, #32]
 801140c:	f8cd 901c 	str.w	r9, [sp, #28]
 8011410:	464f      	mov	r7, r9
 8011412:	220a      	movs	r2, #10
 8011414:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011416:	7806      	ldrb	r6, [r0, #0]
 8011418:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801141c:	b2d9      	uxtb	r1, r3
 801141e:	2909      	cmp	r1, #9
 8011420:	d92a      	bls.n	8011478 <_strtod_l+0x1b8>
 8011422:	9905      	ldr	r1, [sp, #20]
 8011424:	462a      	mov	r2, r5
 8011426:	f7ff ff18 	bl	801125a <strncmp>
 801142a:	b398      	cbz	r0, 8011494 <_strtod_l+0x1d4>
 801142c:	2000      	movs	r0, #0
 801142e:	4632      	mov	r2, r6
 8011430:	463d      	mov	r5, r7
 8011432:	9005      	str	r0, [sp, #20]
 8011434:	4603      	mov	r3, r0
 8011436:	2a65      	cmp	r2, #101	; 0x65
 8011438:	d001      	beq.n	801143e <_strtod_l+0x17e>
 801143a:	2a45      	cmp	r2, #69	; 0x45
 801143c:	d118      	bne.n	8011470 <_strtod_l+0x1b0>
 801143e:	b91d      	cbnz	r5, 8011448 <_strtod_l+0x188>
 8011440:	9a04      	ldr	r2, [sp, #16]
 8011442:	4302      	orrs	r2, r0
 8011444:	d09e      	beq.n	8011384 <_strtod_l+0xc4>
 8011446:	2500      	movs	r5, #0
 8011448:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801144c:	f108 0201 	add.w	r2, r8, #1
 8011450:	9217      	str	r2, [sp, #92]	; 0x5c
 8011452:	f898 2001 	ldrb.w	r2, [r8, #1]
 8011456:	2a2b      	cmp	r2, #43	; 0x2b
 8011458:	d075      	beq.n	8011546 <_strtod_l+0x286>
 801145a:	2a2d      	cmp	r2, #45	; 0x2d
 801145c:	d07b      	beq.n	8011556 <_strtod_l+0x296>
 801145e:	f04f 0c00 	mov.w	ip, #0
 8011462:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011466:	2909      	cmp	r1, #9
 8011468:	f240 8082 	bls.w	8011570 <_strtod_l+0x2b0>
 801146c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011470:	2600      	movs	r6, #0
 8011472:	e09d      	b.n	80115b0 <_strtod_l+0x2f0>
 8011474:	2300      	movs	r3, #0
 8011476:	e7c4      	b.n	8011402 <_strtod_l+0x142>
 8011478:	2f08      	cmp	r7, #8
 801147a:	bfd8      	it	le
 801147c:	9907      	ldrle	r1, [sp, #28]
 801147e:	f100 0001 	add.w	r0, r0, #1
 8011482:	bfda      	itte	le
 8011484:	fb02 3301 	mlale	r3, r2, r1, r3
 8011488:	9307      	strle	r3, [sp, #28]
 801148a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801148e:	3701      	adds	r7, #1
 8011490:	9017      	str	r0, [sp, #92]	; 0x5c
 8011492:	e7bf      	b.n	8011414 <_strtod_l+0x154>
 8011494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011496:	195a      	adds	r2, r3, r5
 8011498:	9217      	str	r2, [sp, #92]	; 0x5c
 801149a:	5d5a      	ldrb	r2, [r3, r5]
 801149c:	2f00      	cmp	r7, #0
 801149e:	d037      	beq.n	8011510 <_strtod_l+0x250>
 80114a0:	9005      	str	r0, [sp, #20]
 80114a2:	463d      	mov	r5, r7
 80114a4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80114a8:	2b09      	cmp	r3, #9
 80114aa:	d912      	bls.n	80114d2 <_strtod_l+0x212>
 80114ac:	2301      	movs	r3, #1
 80114ae:	e7c2      	b.n	8011436 <_strtod_l+0x176>
 80114b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80114b2:	1c5a      	adds	r2, r3, #1
 80114b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80114b6:	785a      	ldrb	r2, [r3, #1]
 80114b8:	3001      	adds	r0, #1
 80114ba:	2a30      	cmp	r2, #48	; 0x30
 80114bc:	d0f8      	beq.n	80114b0 <_strtod_l+0x1f0>
 80114be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80114c2:	2b08      	cmp	r3, #8
 80114c4:	f200 84d9 	bhi.w	8011e7a <_strtod_l+0xbba>
 80114c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80114ca:	9005      	str	r0, [sp, #20]
 80114cc:	2000      	movs	r0, #0
 80114ce:	9308      	str	r3, [sp, #32]
 80114d0:	4605      	mov	r5, r0
 80114d2:	3a30      	subs	r2, #48	; 0x30
 80114d4:	f100 0301 	add.w	r3, r0, #1
 80114d8:	d014      	beq.n	8011504 <_strtod_l+0x244>
 80114da:	9905      	ldr	r1, [sp, #20]
 80114dc:	4419      	add	r1, r3
 80114de:	9105      	str	r1, [sp, #20]
 80114e0:	462b      	mov	r3, r5
 80114e2:	eb00 0e05 	add.w	lr, r0, r5
 80114e6:	210a      	movs	r1, #10
 80114e8:	4573      	cmp	r3, lr
 80114ea:	d113      	bne.n	8011514 <_strtod_l+0x254>
 80114ec:	182b      	adds	r3, r5, r0
 80114ee:	2b08      	cmp	r3, #8
 80114f0:	f105 0501 	add.w	r5, r5, #1
 80114f4:	4405      	add	r5, r0
 80114f6:	dc1c      	bgt.n	8011532 <_strtod_l+0x272>
 80114f8:	9907      	ldr	r1, [sp, #28]
 80114fa:	230a      	movs	r3, #10
 80114fc:	fb03 2301 	mla	r3, r3, r1, r2
 8011500:	9307      	str	r3, [sp, #28]
 8011502:	2300      	movs	r3, #0
 8011504:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011506:	1c51      	adds	r1, r2, #1
 8011508:	9117      	str	r1, [sp, #92]	; 0x5c
 801150a:	7852      	ldrb	r2, [r2, #1]
 801150c:	4618      	mov	r0, r3
 801150e:	e7c9      	b.n	80114a4 <_strtod_l+0x1e4>
 8011510:	4638      	mov	r0, r7
 8011512:	e7d2      	b.n	80114ba <_strtod_l+0x1fa>
 8011514:	2b08      	cmp	r3, #8
 8011516:	dc04      	bgt.n	8011522 <_strtod_l+0x262>
 8011518:	9e07      	ldr	r6, [sp, #28]
 801151a:	434e      	muls	r6, r1
 801151c:	9607      	str	r6, [sp, #28]
 801151e:	3301      	adds	r3, #1
 8011520:	e7e2      	b.n	80114e8 <_strtod_l+0x228>
 8011522:	f103 0c01 	add.w	ip, r3, #1
 8011526:	f1bc 0f10 	cmp.w	ip, #16
 801152a:	bfd8      	it	le
 801152c:	fb01 f909 	mulle.w	r9, r1, r9
 8011530:	e7f5      	b.n	801151e <_strtod_l+0x25e>
 8011532:	2d10      	cmp	r5, #16
 8011534:	bfdc      	itt	le
 8011536:	230a      	movle	r3, #10
 8011538:	fb03 2909 	mlale	r9, r3, r9, r2
 801153c:	e7e1      	b.n	8011502 <_strtod_l+0x242>
 801153e:	2300      	movs	r3, #0
 8011540:	9305      	str	r3, [sp, #20]
 8011542:	2301      	movs	r3, #1
 8011544:	e77c      	b.n	8011440 <_strtod_l+0x180>
 8011546:	f04f 0c00 	mov.w	ip, #0
 801154a:	f108 0202 	add.w	r2, r8, #2
 801154e:	9217      	str	r2, [sp, #92]	; 0x5c
 8011550:	f898 2002 	ldrb.w	r2, [r8, #2]
 8011554:	e785      	b.n	8011462 <_strtod_l+0x1a2>
 8011556:	f04f 0c01 	mov.w	ip, #1
 801155a:	e7f6      	b.n	801154a <_strtod_l+0x28a>
 801155c:	08015d68 	.word	0x08015d68
 8011560:	08015b1c 	.word	0x08015b1c
 8011564:	7ff00000 	.word	0x7ff00000
 8011568:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801156a:	1c51      	adds	r1, r2, #1
 801156c:	9117      	str	r1, [sp, #92]	; 0x5c
 801156e:	7852      	ldrb	r2, [r2, #1]
 8011570:	2a30      	cmp	r2, #48	; 0x30
 8011572:	d0f9      	beq.n	8011568 <_strtod_l+0x2a8>
 8011574:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011578:	2908      	cmp	r1, #8
 801157a:	f63f af79 	bhi.w	8011470 <_strtod_l+0x1b0>
 801157e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011582:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011584:	9206      	str	r2, [sp, #24]
 8011586:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011588:	1c51      	adds	r1, r2, #1
 801158a:	9117      	str	r1, [sp, #92]	; 0x5c
 801158c:	7852      	ldrb	r2, [r2, #1]
 801158e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8011592:	2e09      	cmp	r6, #9
 8011594:	d937      	bls.n	8011606 <_strtod_l+0x346>
 8011596:	9e06      	ldr	r6, [sp, #24]
 8011598:	1b89      	subs	r1, r1, r6
 801159a:	2908      	cmp	r1, #8
 801159c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80115a0:	dc02      	bgt.n	80115a8 <_strtod_l+0x2e8>
 80115a2:	4576      	cmp	r6, lr
 80115a4:	bfa8      	it	ge
 80115a6:	4676      	movge	r6, lr
 80115a8:	f1bc 0f00 	cmp.w	ip, #0
 80115ac:	d000      	beq.n	80115b0 <_strtod_l+0x2f0>
 80115ae:	4276      	negs	r6, r6
 80115b0:	2d00      	cmp	r5, #0
 80115b2:	d14d      	bne.n	8011650 <_strtod_l+0x390>
 80115b4:	9904      	ldr	r1, [sp, #16]
 80115b6:	4301      	orrs	r1, r0
 80115b8:	f47f aec6 	bne.w	8011348 <_strtod_l+0x88>
 80115bc:	2b00      	cmp	r3, #0
 80115be:	f47f aee1 	bne.w	8011384 <_strtod_l+0xc4>
 80115c2:	2a69      	cmp	r2, #105	; 0x69
 80115c4:	d027      	beq.n	8011616 <_strtod_l+0x356>
 80115c6:	dc24      	bgt.n	8011612 <_strtod_l+0x352>
 80115c8:	2a49      	cmp	r2, #73	; 0x49
 80115ca:	d024      	beq.n	8011616 <_strtod_l+0x356>
 80115cc:	2a4e      	cmp	r2, #78	; 0x4e
 80115ce:	f47f aed9 	bne.w	8011384 <_strtod_l+0xc4>
 80115d2:	499f      	ldr	r1, [pc, #636]	; (8011850 <_strtod_l+0x590>)
 80115d4:	a817      	add	r0, sp, #92	; 0x5c
 80115d6:	f001 fe61 	bl	801329c <__match>
 80115da:	2800      	cmp	r0, #0
 80115dc:	f43f aed2 	beq.w	8011384 <_strtod_l+0xc4>
 80115e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80115e2:	781b      	ldrb	r3, [r3, #0]
 80115e4:	2b28      	cmp	r3, #40	; 0x28
 80115e6:	d12d      	bne.n	8011644 <_strtod_l+0x384>
 80115e8:	499a      	ldr	r1, [pc, #616]	; (8011854 <_strtod_l+0x594>)
 80115ea:	aa1a      	add	r2, sp, #104	; 0x68
 80115ec:	a817      	add	r0, sp, #92	; 0x5c
 80115ee:	f001 fe69 	bl	80132c4 <__hexnan>
 80115f2:	2805      	cmp	r0, #5
 80115f4:	d126      	bne.n	8011644 <_strtod_l+0x384>
 80115f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80115f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80115fc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011600:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011604:	e6a0      	b.n	8011348 <_strtod_l+0x88>
 8011606:	210a      	movs	r1, #10
 8011608:	fb01 2e0e 	mla	lr, r1, lr, r2
 801160c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011610:	e7b9      	b.n	8011586 <_strtod_l+0x2c6>
 8011612:	2a6e      	cmp	r2, #110	; 0x6e
 8011614:	e7db      	b.n	80115ce <_strtod_l+0x30e>
 8011616:	4990      	ldr	r1, [pc, #576]	; (8011858 <_strtod_l+0x598>)
 8011618:	a817      	add	r0, sp, #92	; 0x5c
 801161a:	f001 fe3f 	bl	801329c <__match>
 801161e:	2800      	cmp	r0, #0
 8011620:	f43f aeb0 	beq.w	8011384 <_strtod_l+0xc4>
 8011624:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011626:	498d      	ldr	r1, [pc, #564]	; (801185c <_strtod_l+0x59c>)
 8011628:	3b01      	subs	r3, #1
 801162a:	a817      	add	r0, sp, #92	; 0x5c
 801162c:	9317      	str	r3, [sp, #92]	; 0x5c
 801162e:	f001 fe35 	bl	801329c <__match>
 8011632:	b910      	cbnz	r0, 801163a <_strtod_l+0x37a>
 8011634:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011636:	3301      	adds	r3, #1
 8011638:	9317      	str	r3, [sp, #92]	; 0x5c
 801163a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801186c <_strtod_l+0x5ac>
 801163e:	f04f 0a00 	mov.w	sl, #0
 8011642:	e681      	b.n	8011348 <_strtod_l+0x88>
 8011644:	4886      	ldr	r0, [pc, #536]	; (8011860 <_strtod_l+0x5a0>)
 8011646:	f003 f953 	bl	80148f0 <nan>
 801164a:	ec5b ab10 	vmov	sl, fp, d0
 801164e:	e67b      	b.n	8011348 <_strtod_l+0x88>
 8011650:	9b05      	ldr	r3, [sp, #20]
 8011652:	9807      	ldr	r0, [sp, #28]
 8011654:	1af3      	subs	r3, r6, r3
 8011656:	2f00      	cmp	r7, #0
 8011658:	bf08      	it	eq
 801165a:	462f      	moveq	r7, r5
 801165c:	2d10      	cmp	r5, #16
 801165e:	9306      	str	r3, [sp, #24]
 8011660:	46a8      	mov	r8, r5
 8011662:	bfa8      	it	ge
 8011664:	f04f 0810 	movge.w	r8, #16
 8011668:	f7ee ff6c 	bl	8000544 <__aeabi_ui2d>
 801166c:	2d09      	cmp	r5, #9
 801166e:	4682      	mov	sl, r0
 8011670:	468b      	mov	fp, r1
 8011672:	dd13      	ble.n	801169c <_strtod_l+0x3dc>
 8011674:	4b7b      	ldr	r3, [pc, #492]	; (8011864 <_strtod_l+0x5a4>)
 8011676:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801167a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801167e:	f7ee ffdb 	bl	8000638 <__aeabi_dmul>
 8011682:	4682      	mov	sl, r0
 8011684:	4648      	mov	r0, r9
 8011686:	468b      	mov	fp, r1
 8011688:	f7ee ff5c 	bl	8000544 <__aeabi_ui2d>
 801168c:	4602      	mov	r2, r0
 801168e:	460b      	mov	r3, r1
 8011690:	4650      	mov	r0, sl
 8011692:	4659      	mov	r1, fp
 8011694:	f7ee fe1a 	bl	80002cc <__adddf3>
 8011698:	4682      	mov	sl, r0
 801169a:	468b      	mov	fp, r1
 801169c:	2d0f      	cmp	r5, #15
 801169e:	dc38      	bgt.n	8011712 <_strtod_l+0x452>
 80116a0:	9b06      	ldr	r3, [sp, #24]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	f43f ae50 	beq.w	8011348 <_strtod_l+0x88>
 80116a8:	dd24      	ble.n	80116f4 <_strtod_l+0x434>
 80116aa:	2b16      	cmp	r3, #22
 80116ac:	dc0b      	bgt.n	80116c6 <_strtod_l+0x406>
 80116ae:	496d      	ldr	r1, [pc, #436]	; (8011864 <_strtod_l+0x5a4>)
 80116b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80116b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116b8:	4652      	mov	r2, sl
 80116ba:	465b      	mov	r3, fp
 80116bc:	f7ee ffbc 	bl	8000638 <__aeabi_dmul>
 80116c0:	4682      	mov	sl, r0
 80116c2:	468b      	mov	fp, r1
 80116c4:	e640      	b.n	8011348 <_strtod_l+0x88>
 80116c6:	9a06      	ldr	r2, [sp, #24]
 80116c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80116cc:	4293      	cmp	r3, r2
 80116ce:	db20      	blt.n	8011712 <_strtod_l+0x452>
 80116d0:	4c64      	ldr	r4, [pc, #400]	; (8011864 <_strtod_l+0x5a4>)
 80116d2:	f1c5 050f 	rsb	r5, r5, #15
 80116d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80116da:	4652      	mov	r2, sl
 80116dc:	465b      	mov	r3, fp
 80116de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116e2:	f7ee ffa9 	bl	8000638 <__aeabi_dmul>
 80116e6:	9b06      	ldr	r3, [sp, #24]
 80116e8:	1b5d      	subs	r5, r3, r5
 80116ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80116ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80116f2:	e7e3      	b.n	80116bc <_strtod_l+0x3fc>
 80116f4:	9b06      	ldr	r3, [sp, #24]
 80116f6:	3316      	adds	r3, #22
 80116f8:	db0b      	blt.n	8011712 <_strtod_l+0x452>
 80116fa:	9b05      	ldr	r3, [sp, #20]
 80116fc:	1b9e      	subs	r6, r3, r6
 80116fe:	4b59      	ldr	r3, [pc, #356]	; (8011864 <_strtod_l+0x5a4>)
 8011700:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011704:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011708:	4650      	mov	r0, sl
 801170a:	4659      	mov	r1, fp
 801170c:	f7ef f8be 	bl	800088c <__aeabi_ddiv>
 8011710:	e7d6      	b.n	80116c0 <_strtod_l+0x400>
 8011712:	9b06      	ldr	r3, [sp, #24]
 8011714:	eba5 0808 	sub.w	r8, r5, r8
 8011718:	4498      	add	r8, r3
 801171a:	f1b8 0f00 	cmp.w	r8, #0
 801171e:	dd74      	ble.n	801180a <_strtod_l+0x54a>
 8011720:	f018 030f 	ands.w	r3, r8, #15
 8011724:	d00a      	beq.n	801173c <_strtod_l+0x47c>
 8011726:	494f      	ldr	r1, [pc, #316]	; (8011864 <_strtod_l+0x5a4>)
 8011728:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801172c:	4652      	mov	r2, sl
 801172e:	465b      	mov	r3, fp
 8011730:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011734:	f7ee ff80 	bl	8000638 <__aeabi_dmul>
 8011738:	4682      	mov	sl, r0
 801173a:	468b      	mov	fp, r1
 801173c:	f038 080f 	bics.w	r8, r8, #15
 8011740:	d04f      	beq.n	80117e2 <_strtod_l+0x522>
 8011742:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011746:	dd22      	ble.n	801178e <_strtod_l+0x4ce>
 8011748:	2500      	movs	r5, #0
 801174a:	462e      	mov	r6, r5
 801174c:	9507      	str	r5, [sp, #28]
 801174e:	9505      	str	r5, [sp, #20]
 8011750:	2322      	movs	r3, #34	; 0x22
 8011752:	f8df b118 	ldr.w	fp, [pc, #280]	; 801186c <_strtod_l+0x5ac>
 8011756:	6023      	str	r3, [r4, #0]
 8011758:	f04f 0a00 	mov.w	sl, #0
 801175c:	9b07      	ldr	r3, [sp, #28]
 801175e:	2b00      	cmp	r3, #0
 8011760:	f43f adf2 	beq.w	8011348 <_strtod_l+0x88>
 8011764:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011766:	4620      	mov	r0, r4
 8011768:	f001 feb8 	bl	80134dc <_Bfree>
 801176c:	9905      	ldr	r1, [sp, #20]
 801176e:	4620      	mov	r0, r4
 8011770:	f001 feb4 	bl	80134dc <_Bfree>
 8011774:	4631      	mov	r1, r6
 8011776:	4620      	mov	r0, r4
 8011778:	f001 feb0 	bl	80134dc <_Bfree>
 801177c:	9907      	ldr	r1, [sp, #28]
 801177e:	4620      	mov	r0, r4
 8011780:	f001 feac 	bl	80134dc <_Bfree>
 8011784:	4629      	mov	r1, r5
 8011786:	4620      	mov	r0, r4
 8011788:	f001 fea8 	bl	80134dc <_Bfree>
 801178c:	e5dc      	b.n	8011348 <_strtod_l+0x88>
 801178e:	4b36      	ldr	r3, [pc, #216]	; (8011868 <_strtod_l+0x5a8>)
 8011790:	9304      	str	r3, [sp, #16]
 8011792:	2300      	movs	r3, #0
 8011794:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011798:	4650      	mov	r0, sl
 801179a:	4659      	mov	r1, fp
 801179c:	4699      	mov	r9, r3
 801179e:	f1b8 0f01 	cmp.w	r8, #1
 80117a2:	dc21      	bgt.n	80117e8 <_strtod_l+0x528>
 80117a4:	b10b      	cbz	r3, 80117aa <_strtod_l+0x4ea>
 80117a6:	4682      	mov	sl, r0
 80117a8:	468b      	mov	fp, r1
 80117aa:	4b2f      	ldr	r3, [pc, #188]	; (8011868 <_strtod_l+0x5a8>)
 80117ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80117b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80117b4:	4652      	mov	r2, sl
 80117b6:	465b      	mov	r3, fp
 80117b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80117bc:	f7ee ff3c 	bl	8000638 <__aeabi_dmul>
 80117c0:	4b2a      	ldr	r3, [pc, #168]	; (801186c <_strtod_l+0x5ac>)
 80117c2:	460a      	mov	r2, r1
 80117c4:	400b      	ands	r3, r1
 80117c6:	492a      	ldr	r1, [pc, #168]	; (8011870 <_strtod_l+0x5b0>)
 80117c8:	428b      	cmp	r3, r1
 80117ca:	4682      	mov	sl, r0
 80117cc:	d8bc      	bhi.n	8011748 <_strtod_l+0x488>
 80117ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80117d2:	428b      	cmp	r3, r1
 80117d4:	bf86      	itte	hi
 80117d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8011874 <_strtod_l+0x5b4>
 80117da:	f04f 3aff 	movhi.w	sl, #4294967295
 80117de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80117e2:	2300      	movs	r3, #0
 80117e4:	9304      	str	r3, [sp, #16]
 80117e6:	e084      	b.n	80118f2 <_strtod_l+0x632>
 80117e8:	f018 0f01 	tst.w	r8, #1
 80117ec:	d005      	beq.n	80117fa <_strtod_l+0x53a>
 80117ee:	9b04      	ldr	r3, [sp, #16]
 80117f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f4:	f7ee ff20 	bl	8000638 <__aeabi_dmul>
 80117f8:	2301      	movs	r3, #1
 80117fa:	9a04      	ldr	r2, [sp, #16]
 80117fc:	3208      	adds	r2, #8
 80117fe:	f109 0901 	add.w	r9, r9, #1
 8011802:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011806:	9204      	str	r2, [sp, #16]
 8011808:	e7c9      	b.n	801179e <_strtod_l+0x4de>
 801180a:	d0ea      	beq.n	80117e2 <_strtod_l+0x522>
 801180c:	f1c8 0800 	rsb	r8, r8, #0
 8011810:	f018 020f 	ands.w	r2, r8, #15
 8011814:	d00a      	beq.n	801182c <_strtod_l+0x56c>
 8011816:	4b13      	ldr	r3, [pc, #76]	; (8011864 <_strtod_l+0x5a4>)
 8011818:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801181c:	4650      	mov	r0, sl
 801181e:	4659      	mov	r1, fp
 8011820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011824:	f7ef f832 	bl	800088c <__aeabi_ddiv>
 8011828:	4682      	mov	sl, r0
 801182a:	468b      	mov	fp, r1
 801182c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011830:	d0d7      	beq.n	80117e2 <_strtod_l+0x522>
 8011832:	f1b8 0f1f 	cmp.w	r8, #31
 8011836:	dd1f      	ble.n	8011878 <_strtod_l+0x5b8>
 8011838:	2500      	movs	r5, #0
 801183a:	462e      	mov	r6, r5
 801183c:	9507      	str	r5, [sp, #28]
 801183e:	9505      	str	r5, [sp, #20]
 8011840:	2322      	movs	r3, #34	; 0x22
 8011842:	f04f 0a00 	mov.w	sl, #0
 8011846:	f04f 0b00 	mov.w	fp, #0
 801184a:	6023      	str	r3, [r4, #0]
 801184c:	e786      	b.n	801175c <_strtod_l+0x49c>
 801184e:	bf00      	nop
 8011850:	08015af1 	.word	0x08015af1
 8011854:	08015b30 	.word	0x08015b30
 8011858:	08015ae9 	.word	0x08015ae9
 801185c:	08015c74 	.word	0x08015c74
 8011860:	08015f3b 	.word	0x08015f3b
 8011864:	08015e00 	.word	0x08015e00
 8011868:	08015dd8 	.word	0x08015dd8
 801186c:	7ff00000 	.word	0x7ff00000
 8011870:	7ca00000 	.word	0x7ca00000
 8011874:	7fefffff 	.word	0x7fefffff
 8011878:	f018 0310 	ands.w	r3, r8, #16
 801187c:	bf18      	it	ne
 801187e:	236a      	movne	r3, #106	; 0x6a
 8011880:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8011c30 <_strtod_l+0x970>
 8011884:	9304      	str	r3, [sp, #16]
 8011886:	4650      	mov	r0, sl
 8011888:	4659      	mov	r1, fp
 801188a:	2300      	movs	r3, #0
 801188c:	f018 0f01 	tst.w	r8, #1
 8011890:	d004      	beq.n	801189c <_strtod_l+0x5dc>
 8011892:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011896:	f7ee fecf 	bl	8000638 <__aeabi_dmul>
 801189a:	2301      	movs	r3, #1
 801189c:	ea5f 0868 	movs.w	r8, r8, asr #1
 80118a0:	f109 0908 	add.w	r9, r9, #8
 80118a4:	d1f2      	bne.n	801188c <_strtod_l+0x5cc>
 80118a6:	b10b      	cbz	r3, 80118ac <_strtod_l+0x5ec>
 80118a8:	4682      	mov	sl, r0
 80118aa:	468b      	mov	fp, r1
 80118ac:	9b04      	ldr	r3, [sp, #16]
 80118ae:	b1c3      	cbz	r3, 80118e2 <_strtod_l+0x622>
 80118b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80118b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	4659      	mov	r1, fp
 80118bc:	dd11      	ble.n	80118e2 <_strtod_l+0x622>
 80118be:	2b1f      	cmp	r3, #31
 80118c0:	f340 8124 	ble.w	8011b0c <_strtod_l+0x84c>
 80118c4:	2b34      	cmp	r3, #52	; 0x34
 80118c6:	bfde      	ittt	le
 80118c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80118cc:	f04f 33ff 	movle.w	r3, #4294967295
 80118d0:	fa03 f202 	lslle.w	r2, r3, r2
 80118d4:	f04f 0a00 	mov.w	sl, #0
 80118d8:	bfcc      	ite	gt
 80118da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80118de:	ea02 0b01 	andle.w	fp, r2, r1
 80118e2:	2200      	movs	r2, #0
 80118e4:	2300      	movs	r3, #0
 80118e6:	4650      	mov	r0, sl
 80118e8:	4659      	mov	r1, fp
 80118ea:	f7ef f90d 	bl	8000b08 <__aeabi_dcmpeq>
 80118ee:	2800      	cmp	r0, #0
 80118f0:	d1a2      	bne.n	8011838 <_strtod_l+0x578>
 80118f2:	9b07      	ldr	r3, [sp, #28]
 80118f4:	9300      	str	r3, [sp, #0]
 80118f6:	9908      	ldr	r1, [sp, #32]
 80118f8:	462b      	mov	r3, r5
 80118fa:	463a      	mov	r2, r7
 80118fc:	4620      	mov	r0, r4
 80118fe:	f001 fe55 	bl	80135ac <__s2b>
 8011902:	9007      	str	r0, [sp, #28]
 8011904:	2800      	cmp	r0, #0
 8011906:	f43f af1f 	beq.w	8011748 <_strtod_l+0x488>
 801190a:	9b05      	ldr	r3, [sp, #20]
 801190c:	1b9e      	subs	r6, r3, r6
 801190e:	9b06      	ldr	r3, [sp, #24]
 8011910:	2b00      	cmp	r3, #0
 8011912:	bfb4      	ite	lt
 8011914:	4633      	movlt	r3, r6
 8011916:	2300      	movge	r3, #0
 8011918:	930c      	str	r3, [sp, #48]	; 0x30
 801191a:	9b06      	ldr	r3, [sp, #24]
 801191c:	2500      	movs	r5, #0
 801191e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011922:	9312      	str	r3, [sp, #72]	; 0x48
 8011924:	462e      	mov	r6, r5
 8011926:	9b07      	ldr	r3, [sp, #28]
 8011928:	4620      	mov	r0, r4
 801192a:	6859      	ldr	r1, [r3, #4]
 801192c:	f001 fd96 	bl	801345c <_Balloc>
 8011930:	9005      	str	r0, [sp, #20]
 8011932:	2800      	cmp	r0, #0
 8011934:	f43f af0c 	beq.w	8011750 <_strtod_l+0x490>
 8011938:	9b07      	ldr	r3, [sp, #28]
 801193a:	691a      	ldr	r2, [r3, #16]
 801193c:	3202      	adds	r2, #2
 801193e:	f103 010c 	add.w	r1, r3, #12
 8011942:	0092      	lsls	r2, r2, #2
 8011944:	300c      	adds	r0, #12
 8011946:	f7fe fd59 	bl	80103fc <memcpy>
 801194a:	ec4b ab10 	vmov	d0, sl, fp
 801194e:	aa1a      	add	r2, sp, #104	; 0x68
 8011950:	a919      	add	r1, sp, #100	; 0x64
 8011952:	4620      	mov	r0, r4
 8011954:	f002 f970 	bl	8013c38 <__d2b>
 8011958:	ec4b ab18 	vmov	d8, sl, fp
 801195c:	9018      	str	r0, [sp, #96]	; 0x60
 801195e:	2800      	cmp	r0, #0
 8011960:	f43f aef6 	beq.w	8011750 <_strtod_l+0x490>
 8011964:	2101      	movs	r1, #1
 8011966:	4620      	mov	r0, r4
 8011968:	f001 feba 	bl	80136e0 <__i2b>
 801196c:	4606      	mov	r6, r0
 801196e:	2800      	cmp	r0, #0
 8011970:	f43f aeee 	beq.w	8011750 <_strtod_l+0x490>
 8011974:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011976:	9904      	ldr	r1, [sp, #16]
 8011978:	2b00      	cmp	r3, #0
 801197a:	bfab      	itete	ge
 801197c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801197e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8011980:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8011982:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8011986:	bfac      	ite	ge
 8011988:	eb03 0902 	addge.w	r9, r3, r2
 801198c:	1ad7      	sublt	r7, r2, r3
 801198e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011990:	eba3 0801 	sub.w	r8, r3, r1
 8011994:	4490      	add	r8, r2
 8011996:	4ba1      	ldr	r3, [pc, #644]	; (8011c1c <_strtod_l+0x95c>)
 8011998:	f108 38ff 	add.w	r8, r8, #4294967295
 801199c:	4598      	cmp	r8, r3
 801199e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80119a2:	f280 80c7 	bge.w	8011b34 <_strtod_l+0x874>
 80119a6:	eba3 0308 	sub.w	r3, r3, r8
 80119aa:	2b1f      	cmp	r3, #31
 80119ac:	eba2 0203 	sub.w	r2, r2, r3
 80119b0:	f04f 0101 	mov.w	r1, #1
 80119b4:	f300 80b1 	bgt.w	8011b1a <_strtod_l+0x85a>
 80119b8:	fa01 f303 	lsl.w	r3, r1, r3
 80119bc:	930d      	str	r3, [sp, #52]	; 0x34
 80119be:	2300      	movs	r3, #0
 80119c0:	9308      	str	r3, [sp, #32]
 80119c2:	eb09 0802 	add.w	r8, r9, r2
 80119c6:	9b04      	ldr	r3, [sp, #16]
 80119c8:	45c1      	cmp	r9, r8
 80119ca:	4417      	add	r7, r2
 80119cc:	441f      	add	r7, r3
 80119ce:	464b      	mov	r3, r9
 80119d0:	bfa8      	it	ge
 80119d2:	4643      	movge	r3, r8
 80119d4:	42bb      	cmp	r3, r7
 80119d6:	bfa8      	it	ge
 80119d8:	463b      	movge	r3, r7
 80119da:	2b00      	cmp	r3, #0
 80119dc:	bfc2      	ittt	gt
 80119de:	eba8 0803 	subgt.w	r8, r8, r3
 80119e2:	1aff      	subgt	r7, r7, r3
 80119e4:	eba9 0903 	subgt.w	r9, r9, r3
 80119e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	dd17      	ble.n	8011a1e <_strtod_l+0x75e>
 80119ee:	4631      	mov	r1, r6
 80119f0:	461a      	mov	r2, r3
 80119f2:	4620      	mov	r0, r4
 80119f4:	f001 ff34 	bl	8013860 <__pow5mult>
 80119f8:	4606      	mov	r6, r0
 80119fa:	2800      	cmp	r0, #0
 80119fc:	f43f aea8 	beq.w	8011750 <_strtod_l+0x490>
 8011a00:	4601      	mov	r1, r0
 8011a02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011a04:	4620      	mov	r0, r4
 8011a06:	f001 fe81 	bl	801370c <__multiply>
 8011a0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8011a0c:	2800      	cmp	r0, #0
 8011a0e:	f43f ae9f 	beq.w	8011750 <_strtod_l+0x490>
 8011a12:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011a14:	4620      	mov	r0, r4
 8011a16:	f001 fd61 	bl	80134dc <_Bfree>
 8011a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a1c:	9318      	str	r3, [sp, #96]	; 0x60
 8011a1e:	f1b8 0f00 	cmp.w	r8, #0
 8011a22:	f300 808c 	bgt.w	8011b3e <_strtod_l+0x87e>
 8011a26:	9b06      	ldr	r3, [sp, #24]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	dd08      	ble.n	8011a3e <_strtod_l+0x77e>
 8011a2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011a2e:	9905      	ldr	r1, [sp, #20]
 8011a30:	4620      	mov	r0, r4
 8011a32:	f001 ff15 	bl	8013860 <__pow5mult>
 8011a36:	9005      	str	r0, [sp, #20]
 8011a38:	2800      	cmp	r0, #0
 8011a3a:	f43f ae89 	beq.w	8011750 <_strtod_l+0x490>
 8011a3e:	2f00      	cmp	r7, #0
 8011a40:	dd08      	ble.n	8011a54 <_strtod_l+0x794>
 8011a42:	9905      	ldr	r1, [sp, #20]
 8011a44:	463a      	mov	r2, r7
 8011a46:	4620      	mov	r0, r4
 8011a48:	f001 ff64 	bl	8013914 <__lshift>
 8011a4c:	9005      	str	r0, [sp, #20]
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	f43f ae7e 	beq.w	8011750 <_strtod_l+0x490>
 8011a54:	f1b9 0f00 	cmp.w	r9, #0
 8011a58:	dd08      	ble.n	8011a6c <_strtod_l+0x7ac>
 8011a5a:	4631      	mov	r1, r6
 8011a5c:	464a      	mov	r2, r9
 8011a5e:	4620      	mov	r0, r4
 8011a60:	f001 ff58 	bl	8013914 <__lshift>
 8011a64:	4606      	mov	r6, r0
 8011a66:	2800      	cmp	r0, #0
 8011a68:	f43f ae72 	beq.w	8011750 <_strtod_l+0x490>
 8011a6c:	9a05      	ldr	r2, [sp, #20]
 8011a6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011a70:	4620      	mov	r0, r4
 8011a72:	f001 ffdb 	bl	8013a2c <__mdiff>
 8011a76:	4605      	mov	r5, r0
 8011a78:	2800      	cmp	r0, #0
 8011a7a:	f43f ae69 	beq.w	8011750 <_strtod_l+0x490>
 8011a7e:	68c3      	ldr	r3, [r0, #12]
 8011a80:	930b      	str	r3, [sp, #44]	; 0x2c
 8011a82:	2300      	movs	r3, #0
 8011a84:	60c3      	str	r3, [r0, #12]
 8011a86:	4631      	mov	r1, r6
 8011a88:	f001 ffb4 	bl	80139f4 <__mcmp>
 8011a8c:	2800      	cmp	r0, #0
 8011a8e:	da60      	bge.n	8011b52 <_strtod_l+0x892>
 8011a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a92:	ea53 030a 	orrs.w	r3, r3, sl
 8011a96:	f040 8082 	bne.w	8011b9e <_strtod_l+0x8de>
 8011a9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d17d      	bne.n	8011b9e <_strtod_l+0x8de>
 8011aa2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011aa6:	0d1b      	lsrs	r3, r3, #20
 8011aa8:	051b      	lsls	r3, r3, #20
 8011aaa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011aae:	d976      	bls.n	8011b9e <_strtod_l+0x8de>
 8011ab0:	696b      	ldr	r3, [r5, #20]
 8011ab2:	b913      	cbnz	r3, 8011aba <_strtod_l+0x7fa>
 8011ab4:	692b      	ldr	r3, [r5, #16]
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	dd71      	ble.n	8011b9e <_strtod_l+0x8de>
 8011aba:	4629      	mov	r1, r5
 8011abc:	2201      	movs	r2, #1
 8011abe:	4620      	mov	r0, r4
 8011ac0:	f001 ff28 	bl	8013914 <__lshift>
 8011ac4:	4631      	mov	r1, r6
 8011ac6:	4605      	mov	r5, r0
 8011ac8:	f001 ff94 	bl	80139f4 <__mcmp>
 8011acc:	2800      	cmp	r0, #0
 8011ace:	dd66      	ble.n	8011b9e <_strtod_l+0x8de>
 8011ad0:	9904      	ldr	r1, [sp, #16]
 8011ad2:	4a53      	ldr	r2, [pc, #332]	; (8011c20 <_strtod_l+0x960>)
 8011ad4:	465b      	mov	r3, fp
 8011ad6:	2900      	cmp	r1, #0
 8011ad8:	f000 8081 	beq.w	8011bde <_strtod_l+0x91e>
 8011adc:	ea02 010b 	and.w	r1, r2, fp
 8011ae0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011ae4:	dc7b      	bgt.n	8011bde <_strtod_l+0x91e>
 8011ae6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011aea:	f77f aea9 	ble.w	8011840 <_strtod_l+0x580>
 8011aee:	4b4d      	ldr	r3, [pc, #308]	; (8011c24 <_strtod_l+0x964>)
 8011af0:	4650      	mov	r0, sl
 8011af2:	4659      	mov	r1, fp
 8011af4:	2200      	movs	r2, #0
 8011af6:	f7ee fd9f 	bl	8000638 <__aeabi_dmul>
 8011afa:	460b      	mov	r3, r1
 8011afc:	4303      	orrs	r3, r0
 8011afe:	bf08      	it	eq
 8011b00:	2322      	moveq	r3, #34	; 0x22
 8011b02:	4682      	mov	sl, r0
 8011b04:	468b      	mov	fp, r1
 8011b06:	bf08      	it	eq
 8011b08:	6023      	streq	r3, [r4, #0]
 8011b0a:	e62b      	b.n	8011764 <_strtod_l+0x4a4>
 8011b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8011b10:	fa02 f303 	lsl.w	r3, r2, r3
 8011b14:	ea03 0a0a 	and.w	sl, r3, sl
 8011b18:	e6e3      	b.n	80118e2 <_strtod_l+0x622>
 8011b1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011b1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011b22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011b26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011b2a:	fa01 f308 	lsl.w	r3, r1, r8
 8011b2e:	9308      	str	r3, [sp, #32]
 8011b30:	910d      	str	r1, [sp, #52]	; 0x34
 8011b32:	e746      	b.n	80119c2 <_strtod_l+0x702>
 8011b34:	2300      	movs	r3, #0
 8011b36:	9308      	str	r3, [sp, #32]
 8011b38:	2301      	movs	r3, #1
 8011b3a:	930d      	str	r3, [sp, #52]	; 0x34
 8011b3c:	e741      	b.n	80119c2 <_strtod_l+0x702>
 8011b3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011b40:	4642      	mov	r2, r8
 8011b42:	4620      	mov	r0, r4
 8011b44:	f001 fee6 	bl	8013914 <__lshift>
 8011b48:	9018      	str	r0, [sp, #96]	; 0x60
 8011b4a:	2800      	cmp	r0, #0
 8011b4c:	f47f af6b 	bne.w	8011a26 <_strtod_l+0x766>
 8011b50:	e5fe      	b.n	8011750 <_strtod_l+0x490>
 8011b52:	465f      	mov	r7, fp
 8011b54:	d16e      	bne.n	8011c34 <_strtod_l+0x974>
 8011b56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011b58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b5c:	b342      	cbz	r2, 8011bb0 <_strtod_l+0x8f0>
 8011b5e:	4a32      	ldr	r2, [pc, #200]	; (8011c28 <_strtod_l+0x968>)
 8011b60:	4293      	cmp	r3, r2
 8011b62:	d128      	bne.n	8011bb6 <_strtod_l+0x8f6>
 8011b64:	9b04      	ldr	r3, [sp, #16]
 8011b66:	4651      	mov	r1, sl
 8011b68:	b1eb      	cbz	r3, 8011ba6 <_strtod_l+0x8e6>
 8011b6a:	4b2d      	ldr	r3, [pc, #180]	; (8011c20 <_strtod_l+0x960>)
 8011b6c:	403b      	ands	r3, r7
 8011b6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011b72:	f04f 32ff 	mov.w	r2, #4294967295
 8011b76:	d819      	bhi.n	8011bac <_strtod_l+0x8ec>
 8011b78:	0d1b      	lsrs	r3, r3, #20
 8011b7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8011b82:	4299      	cmp	r1, r3
 8011b84:	d117      	bne.n	8011bb6 <_strtod_l+0x8f6>
 8011b86:	4b29      	ldr	r3, [pc, #164]	; (8011c2c <_strtod_l+0x96c>)
 8011b88:	429f      	cmp	r7, r3
 8011b8a:	d102      	bne.n	8011b92 <_strtod_l+0x8d2>
 8011b8c:	3101      	adds	r1, #1
 8011b8e:	f43f addf 	beq.w	8011750 <_strtod_l+0x490>
 8011b92:	4b23      	ldr	r3, [pc, #140]	; (8011c20 <_strtod_l+0x960>)
 8011b94:	403b      	ands	r3, r7
 8011b96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011b9a:	f04f 0a00 	mov.w	sl, #0
 8011b9e:	9b04      	ldr	r3, [sp, #16]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d1a4      	bne.n	8011aee <_strtod_l+0x82e>
 8011ba4:	e5de      	b.n	8011764 <_strtod_l+0x4a4>
 8011ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8011baa:	e7ea      	b.n	8011b82 <_strtod_l+0x8c2>
 8011bac:	4613      	mov	r3, r2
 8011bae:	e7e8      	b.n	8011b82 <_strtod_l+0x8c2>
 8011bb0:	ea53 030a 	orrs.w	r3, r3, sl
 8011bb4:	d08c      	beq.n	8011ad0 <_strtod_l+0x810>
 8011bb6:	9b08      	ldr	r3, [sp, #32]
 8011bb8:	b1db      	cbz	r3, 8011bf2 <_strtod_l+0x932>
 8011bba:	423b      	tst	r3, r7
 8011bbc:	d0ef      	beq.n	8011b9e <_strtod_l+0x8de>
 8011bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bc0:	9a04      	ldr	r2, [sp, #16]
 8011bc2:	4650      	mov	r0, sl
 8011bc4:	4659      	mov	r1, fp
 8011bc6:	b1c3      	cbz	r3, 8011bfa <_strtod_l+0x93a>
 8011bc8:	f7ff fb5b 	bl	8011282 <sulp>
 8011bcc:	4602      	mov	r2, r0
 8011bce:	460b      	mov	r3, r1
 8011bd0:	ec51 0b18 	vmov	r0, r1, d8
 8011bd4:	f7ee fb7a 	bl	80002cc <__adddf3>
 8011bd8:	4682      	mov	sl, r0
 8011bda:	468b      	mov	fp, r1
 8011bdc:	e7df      	b.n	8011b9e <_strtod_l+0x8de>
 8011bde:	4013      	ands	r3, r2
 8011be0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011be4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011be8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011bec:	f04f 3aff 	mov.w	sl, #4294967295
 8011bf0:	e7d5      	b.n	8011b9e <_strtod_l+0x8de>
 8011bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bf4:	ea13 0f0a 	tst.w	r3, sl
 8011bf8:	e7e0      	b.n	8011bbc <_strtod_l+0x8fc>
 8011bfa:	f7ff fb42 	bl	8011282 <sulp>
 8011bfe:	4602      	mov	r2, r0
 8011c00:	460b      	mov	r3, r1
 8011c02:	ec51 0b18 	vmov	r0, r1, d8
 8011c06:	f7ee fb5f 	bl	80002c8 <__aeabi_dsub>
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	4682      	mov	sl, r0
 8011c10:	468b      	mov	fp, r1
 8011c12:	f7ee ff79 	bl	8000b08 <__aeabi_dcmpeq>
 8011c16:	2800      	cmp	r0, #0
 8011c18:	d0c1      	beq.n	8011b9e <_strtod_l+0x8de>
 8011c1a:	e611      	b.n	8011840 <_strtod_l+0x580>
 8011c1c:	fffffc02 	.word	0xfffffc02
 8011c20:	7ff00000 	.word	0x7ff00000
 8011c24:	39500000 	.word	0x39500000
 8011c28:	000fffff 	.word	0x000fffff
 8011c2c:	7fefffff 	.word	0x7fefffff
 8011c30:	08015b48 	.word	0x08015b48
 8011c34:	4631      	mov	r1, r6
 8011c36:	4628      	mov	r0, r5
 8011c38:	f002 f85a 	bl	8013cf0 <__ratio>
 8011c3c:	ec59 8b10 	vmov	r8, r9, d0
 8011c40:	ee10 0a10 	vmov	r0, s0
 8011c44:	2200      	movs	r2, #0
 8011c46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011c4a:	4649      	mov	r1, r9
 8011c4c:	f7ee ff70 	bl	8000b30 <__aeabi_dcmple>
 8011c50:	2800      	cmp	r0, #0
 8011c52:	d07a      	beq.n	8011d4a <_strtod_l+0xa8a>
 8011c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d04a      	beq.n	8011cf0 <_strtod_l+0xa30>
 8011c5a:	4b95      	ldr	r3, [pc, #596]	; (8011eb0 <_strtod_l+0xbf0>)
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011c62:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011eb0 <_strtod_l+0xbf0>
 8011c66:	f04f 0800 	mov.w	r8, #0
 8011c6a:	4b92      	ldr	r3, [pc, #584]	; (8011eb4 <_strtod_l+0xbf4>)
 8011c6c:	403b      	ands	r3, r7
 8011c6e:	930d      	str	r3, [sp, #52]	; 0x34
 8011c70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011c72:	4b91      	ldr	r3, [pc, #580]	; (8011eb8 <_strtod_l+0xbf8>)
 8011c74:	429a      	cmp	r2, r3
 8011c76:	f040 80b0 	bne.w	8011dda <_strtod_l+0xb1a>
 8011c7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011c7e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011c82:	ec4b ab10 	vmov	d0, sl, fp
 8011c86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011c8a:	f001 ff59 	bl	8013b40 <__ulp>
 8011c8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011c92:	ec53 2b10 	vmov	r2, r3, d0
 8011c96:	f7ee fccf 	bl	8000638 <__aeabi_dmul>
 8011c9a:	4652      	mov	r2, sl
 8011c9c:	465b      	mov	r3, fp
 8011c9e:	f7ee fb15 	bl	80002cc <__adddf3>
 8011ca2:	460b      	mov	r3, r1
 8011ca4:	4983      	ldr	r1, [pc, #524]	; (8011eb4 <_strtod_l+0xbf4>)
 8011ca6:	4a85      	ldr	r2, [pc, #532]	; (8011ebc <_strtod_l+0xbfc>)
 8011ca8:	4019      	ands	r1, r3
 8011caa:	4291      	cmp	r1, r2
 8011cac:	4682      	mov	sl, r0
 8011cae:	d960      	bls.n	8011d72 <_strtod_l+0xab2>
 8011cb0:	ee18 3a90 	vmov	r3, s17
 8011cb4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d104      	bne.n	8011cc6 <_strtod_l+0xa06>
 8011cbc:	ee18 3a10 	vmov	r3, s16
 8011cc0:	3301      	adds	r3, #1
 8011cc2:	f43f ad45 	beq.w	8011750 <_strtod_l+0x490>
 8011cc6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8011ec8 <_strtod_l+0xc08>
 8011cca:	f04f 3aff 	mov.w	sl, #4294967295
 8011cce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011cd0:	4620      	mov	r0, r4
 8011cd2:	f001 fc03 	bl	80134dc <_Bfree>
 8011cd6:	9905      	ldr	r1, [sp, #20]
 8011cd8:	4620      	mov	r0, r4
 8011cda:	f001 fbff 	bl	80134dc <_Bfree>
 8011cde:	4631      	mov	r1, r6
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	f001 fbfb 	bl	80134dc <_Bfree>
 8011ce6:	4629      	mov	r1, r5
 8011ce8:	4620      	mov	r0, r4
 8011cea:	f001 fbf7 	bl	80134dc <_Bfree>
 8011cee:	e61a      	b.n	8011926 <_strtod_l+0x666>
 8011cf0:	f1ba 0f00 	cmp.w	sl, #0
 8011cf4:	d11b      	bne.n	8011d2e <_strtod_l+0xa6e>
 8011cf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011cfa:	b9f3      	cbnz	r3, 8011d3a <_strtod_l+0xa7a>
 8011cfc:	4b6c      	ldr	r3, [pc, #432]	; (8011eb0 <_strtod_l+0xbf0>)
 8011cfe:	2200      	movs	r2, #0
 8011d00:	4640      	mov	r0, r8
 8011d02:	4649      	mov	r1, r9
 8011d04:	f7ee ff0a 	bl	8000b1c <__aeabi_dcmplt>
 8011d08:	b9d0      	cbnz	r0, 8011d40 <_strtod_l+0xa80>
 8011d0a:	4640      	mov	r0, r8
 8011d0c:	4649      	mov	r1, r9
 8011d0e:	4b6c      	ldr	r3, [pc, #432]	; (8011ec0 <_strtod_l+0xc00>)
 8011d10:	2200      	movs	r2, #0
 8011d12:	f7ee fc91 	bl	8000638 <__aeabi_dmul>
 8011d16:	4680      	mov	r8, r0
 8011d18:	4689      	mov	r9, r1
 8011d1a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011d1e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8011d22:	9315      	str	r3, [sp, #84]	; 0x54
 8011d24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011d28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011d2c:	e79d      	b.n	8011c6a <_strtod_l+0x9aa>
 8011d2e:	f1ba 0f01 	cmp.w	sl, #1
 8011d32:	d102      	bne.n	8011d3a <_strtod_l+0xa7a>
 8011d34:	2f00      	cmp	r7, #0
 8011d36:	f43f ad83 	beq.w	8011840 <_strtod_l+0x580>
 8011d3a:	4b62      	ldr	r3, [pc, #392]	; (8011ec4 <_strtod_l+0xc04>)
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	e78e      	b.n	8011c5e <_strtod_l+0x99e>
 8011d40:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8011ec0 <_strtod_l+0xc00>
 8011d44:	f04f 0800 	mov.w	r8, #0
 8011d48:	e7e7      	b.n	8011d1a <_strtod_l+0xa5a>
 8011d4a:	4b5d      	ldr	r3, [pc, #372]	; (8011ec0 <_strtod_l+0xc00>)
 8011d4c:	4640      	mov	r0, r8
 8011d4e:	4649      	mov	r1, r9
 8011d50:	2200      	movs	r2, #0
 8011d52:	f7ee fc71 	bl	8000638 <__aeabi_dmul>
 8011d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d58:	4680      	mov	r8, r0
 8011d5a:	4689      	mov	r9, r1
 8011d5c:	b933      	cbnz	r3, 8011d6c <_strtod_l+0xaac>
 8011d5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d62:	900e      	str	r0, [sp, #56]	; 0x38
 8011d64:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011d6a:	e7dd      	b.n	8011d28 <_strtod_l+0xa68>
 8011d6c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8011d70:	e7f9      	b.n	8011d66 <_strtod_l+0xaa6>
 8011d72:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011d76:	9b04      	ldr	r3, [sp, #16]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d1a8      	bne.n	8011cce <_strtod_l+0xa0e>
 8011d7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011d80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011d82:	0d1b      	lsrs	r3, r3, #20
 8011d84:	051b      	lsls	r3, r3, #20
 8011d86:	429a      	cmp	r2, r3
 8011d88:	d1a1      	bne.n	8011cce <_strtod_l+0xa0e>
 8011d8a:	4640      	mov	r0, r8
 8011d8c:	4649      	mov	r1, r9
 8011d8e:	f7ee ffb3 	bl	8000cf8 <__aeabi_d2lz>
 8011d92:	f7ee fc23 	bl	80005dc <__aeabi_l2d>
 8011d96:	4602      	mov	r2, r0
 8011d98:	460b      	mov	r3, r1
 8011d9a:	4640      	mov	r0, r8
 8011d9c:	4649      	mov	r1, r9
 8011d9e:	f7ee fa93 	bl	80002c8 <__aeabi_dsub>
 8011da2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011da4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011da8:	ea43 030a 	orr.w	r3, r3, sl
 8011dac:	4313      	orrs	r3, r2
 8011dae:	4680      	mov	r8, r0
 8011db0:	4689      	mov	r9, r1
 8011db2:	d055      	beq.n	8011e60 <_strtod_l+0xba0>
 8011db4:	a336      	add	r3, pc, #216	; (adr r3, 8011e90 <_strtod_l+0xbd0>)
 8011db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dba:	f7ee feaf 	bl	8000b1c <__aeabi_dcmplt>
 8011dbe:	2800      	cmp	r0, #0
 8011dc0:	f47f acd0 	bne.w	8011764 <_strtod_l+0x4a4>
 8011dc4:	a334      	add	r3, pc, #208	; (adr r3, 8011e98 <_strtod_l+0xbd8>)
 8011dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dca:	4640      	mov	r0, r8
 8011dcc:	4649      	mov	r1, r9
 8011dce:	f7ee fec3 	bl	8000b58 <__aeabi_dcmpgt>
 8011dd2:	2800      	cmp	r0, #0
 8011dd4:	f43f af7b 	beq.w	8011cce <_strtod_l+0xa0e>
 8011dd8:	e4c4      	b.n	8011764 <_strtod_l+0x4a4>
 8011dda:	9b04      	ldr	r3, [sp, #16]
 8011ddc:	b333      	cbz	r3, 8011e2c <_strtod_l+0xb6c>
 8011dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011de0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011de4:	d822      	bhi.n	8011e2c <_strtod_l+0xb6c>
 8011de6:	a32e      	add	r3, pc, #184	; (adr r3, 8011ea0 <_strtod_l+0xbe0>)
 8011de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dec:	4640      	mov	r0, r8
 8011dee:	4649      	mov	r1, r9
 8011df0:	f7ee fe9e 	bl	8000b30 <__aeabi_dcmple>
 8011df4:	b1a0      	cbz	r0, 8011e20 <_strtod_l+0xb60>
 8011df6:	4649      	mov	r1, r9
 8011df8:	4640      	mov	r0, r8
 8011dfa:	f7ee fef5 	bl	8000be8 <__aeabi_d2uiz>
 8011dfe:	2801      	cmp	r0, #1
 8011e00:	bf38      	it	cc
 8011e02:	2001      	movcc	r0, #1
 8011e04:	f7ee fb9e 	bl	8000544 <__aeabi_ui2d>
 8011e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e0a:	4680      	mov	r8, r0
 8011e0c:	4689      	mov	r9, r1
 8011e0e:	bb23      	cbnz	r3, 8011e5a <_strtod_l+0xb9a>
 8011e10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e14:	9010      	str	r0, [sp, #64]	; 0x40
 8011e16:	9311      	str	r3, [sp, #68]	; 0x44
 8011e18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011e1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011e24:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011e28:	1a9b      	subs	r3, r3, r2
 8011e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8011e2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011e30:	eeb0 0a48 	vmov.f32	s0, s16
 8011e34:	eef0 0a68 	vmov.f32	s1, s17
 8011e38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011e3c:	f001 fe80 	bl	8013b40 <__ulp>
 8011e40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011e44:	ec53 2b10 	vmov	r2, r3, d0
 8011e48:	f7ee fbf6 	bl	8000638 <__aeabi_dmul>
 8011e4c:	ec53 2b18 	vmov	r2, r3, d8
 8011e50:	f7ee fa3c 	bl	80002cc <__adddf3>
 8011e54:	4682      	mov	sl, r0
 8011e56:	468b      	mov	fp, r1
 8011e58:	e78d      	b.n	8011d76 <_strtod_l+0xab6>
 8011e5a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8011e5e:	e7db      	b.n	8011e18 <_strtod_l+0xb58>
 8011e60:	a311      	add	r3, pc, #68	; (adr r3, 8011ea8 <_strtod_l+0xbe8>)
 8011e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e66:	f7ee fe59 	bl	8000b1c <__aeabi_dcmplt>
 8011e6a:	e7b2      	b.n	8011dd2 <_strtod_l+0xb12>
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8011e70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011e72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011e74:	6013      	str	r3, [r2, #0]
 8011e76:	f7ff ba6b 	b.w	8011350 <_strtod_l+0x90>
 8011e7a:	2a65      	cmp	r2, #101	; 0x65
 8011e7c:	f43f ab5f 	beq.w	801153e <_strtod_l+0x27e>
 8011e80:	2a45      	cmp	r2, #69	; 0x45
 8011e82:	f43f ab5c 	beq.w	801153e <_strtod_l+0x27e>
 8011e86:	2301      	movs	r3, #1
 8011e88:	f7ff bb94 	b.w	80115b4 <_strtod_l+0x2f4>
 8011e8c:	f3af 8000 	nop.w
 8011e90:	94a03595 	.word	0x94a03595
 8011e94:	3fdfffff 	.word	0x3fdfffff
 8011e98:	35afe535 	.word	0x35afe535
 8011e9c:	3fe00000 	.word	0x3fe00000
 8011ea0:	ffc00000 	.word	0xffc00000
 8011ea4:	41dfffff 	.word	0x41dfffff
 8011ea8:	94a03595 	.word	0x94a03595
 8011eac:	3fcfffff 	.word	0x3fcfffff
 8011eb0:	3ff00000 	.word	0x3ff00000
 8011eb4:	7ff00000 	.word	0x7ff00000
 8011eb8:	7fe00000 	.word	0x7fe00000
 8011ebc:	7c9fffff 	.word	0x7c9fffff
 8011ec0:	3fe00000 	.word	0x3fe00000
 8011ec4:	bff00000 	.word	0xbff00000
 8011ec8:	7fefffff 	.word	0x7fefffff

08011ecc <_strtod_r>:
 8011ecc:	4b01      	ldr	r3, [pc, #4]	; (8011ed4 <_strtod_r+0x8>)
 8011ece:	f7ff b9f7 	b.w	80112c0 <_strtod_l>
 8011ed2:	bf00      	nop
 8011ed4:	20000330 	.word	0x20000330

08011ed8 <_strtol_l.constprop.0>:
 8011ed8:	2b01      	cmp	r3, #1
 8011eda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ede:	d001      	beq.n	8011ee4 <_strtol_l.constprop.0+0xc>
 8011ee0:	2b24      	cmp	r3, #36	; 0x24
 8011ee2:	d906      	bls.n	8011ef2 <_strtol_l.constprop.0+0x1a>
 8011ee4:	f7fe fa60 	bl	80103a8 <__errno>
 8011ee8:	2316      	movs	r3, #22
 8011eea:	6003      	str	r3, [r0, #0]
 8011eec:	2000      	movs	r0, #0
 8011eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ef2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011fd8 <_strtol_l.constprop.0+0x100>
 8011ef6:	460d      	mov	r5, r1
 8011ef8:	462e      	mov	r6, r5
 8011efa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011efe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8011f02:	f017 0708 	ands.w	r7, r7, #8
 8011f06:	d1f7      	bne.n	8011ef8 <_strtol_l.constprop.0+0x20>
 8011f08:	2c2d      	cmp	r4, #45	; 0x2d
 8011f0a:	d132      	bne.n	8011f72 <_strtol_l.constprop.0+0x9a>
 8011f0c:	782c      	ldrb	r4, [r5, #0]
 8011f0e:	2701      	movs	r7, #1
 8011f10:	1cb5      	adds	r5, r6, #2
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d05b      	beq.n	8011fce <_strtol_l.constprop.0+0xf6>
 8011f16:	2b10      	cmp	r3, #16
 8011f18:	d109      	bne.n	8011f2e <_strtol_l.constprop.0+0x56>
 8011f1a:	2c30      	cmp	r4, #48	; 0x30
 8011f1c:	d107      	bne.n	8011f2e <_strtol_l.constprop.0+0x56>
 8011f1e:	782c      	ldrb	r4, [r5, #0]
 8011f20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011f24:	2c58      	cmp	r4, #88	; 0x58
 8011f26:	d14d      	bne.n	8011fc4 <_strtol_l.constprop.0+0xec>
 8011f28:	786c      	ldrb	r4, [r5, #1]
 8011f2a:	2310      	movs	r3, #16
 8011f2c:	3502      	adds	r5, #2
 8011f2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011f32:	f108 38ff 	add.w	r8, r8, #4294967295
 8011f36:	f04f 0c00 	mov.w	ip, #0
 8011f3a:	fbb8 f9f3 	udiv	r9, r8, r3
 8011f3e:	4666      	mov	r6, ip
 8011f40:	fb03 8a19 	mls	sl, r3, r9, r8
 8011f44:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011f48:	f1be 0f09 	cmp.w	lr, #9
 8011f4c:	d816      	bhi.n	8011f7c <_strtol_l.constprop.0+0xa4>
 8011f4e:	4674      	mov	r4, lr
 8011f50:	42a3      	cmp	r3, r4
 8011f52:	dd24      	ble.n	8011f9e <_strtol_l.constprop.0+0xc6>
 8011f54:	f1bc 0f00 	cmp.w	ip, #0
 8011f58:	db1e      	blt.n	8011f98 <_strtol_l.constprop.0+0xc0>
 8011f5a:	45b1      	cmp	r9, r6
 8011f5c:	d31c      	bcc.n	8011f98 <_strtol_l.constprop.0+0xc0>
 8011f5e:	d101      	bne.n	8011f64 <_strtol_l.constprop.0+0x8c>
 8011f60:	45a2      	cmp	sl, r4
 8011f62:	db19      	blt.n	8011f98 <_strtol_l.constprop.0+0xc0>
 8011f64:	fb06 4603 	mla	r6, r6, r3, r4
 8011f68:	f04f 0c01 	mov.w	ip, #1
 8011f6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f70:	e7e8      	b.n	8011f44 <_strtol_l.constprop.0+0x6c>
 8011f72:	2c2b      	cmp	r4, #43	; 0x2b
 8011f74:	bf04      	itt	eq
 8011f76:	782c      	ldrbeq	r4, [r5, #0]
 8011f78:	1cb5      	addeq	r5, r6, #2
 8011f7a:	e7ca      	b.n	8011f12 <_strtol_l.constprop.0+0x3a>
 8011f7c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011f80:	f1be 0f19 	cmp.w	lr, #25
 8011f84:	d801      	bhi.n	8011f8a <_strtol_l.constprop.0+0xb2>
 8011f86:	3c37      	subs	r4, #55	; 0x37
 8011f88:	e7e2      	b.n	8011f50 <_strtol_l.constprop.0+0x78>
 8011f8a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011f8e:	f1be 0f19 	cmp.w	lr, #25
 8011f92:	d804      	bhi.n	8011f9e <_strtol_l.constprop.0+0xc6>
 8011f94:	3c57      	subs	r4, #87	; 0x57
 8011f96:	e7db      	b.n	8011f50 <_strtol_l.constprop.0+0x78>
 8011f98:	f04f 3cff 	mov.w	ip, #4294967295
 8011f9c:	e7e6      	b.n	8011f6c <_strtol_l.constprop.0+0x94>
 8011f9e:	f1bc 0f00 	cmp.w	ip, #0
 8011fa2:	da05      	bge.n	8011fb0 <_strtol_l.constprop.0+0xd8>
 8011fa4:	2322      	movs	r3, #34	; 0x22
 8011fa6:	6003      	str	r3, [r0, #0]
 8011fa8:	4646      	mov	r6, r8
 8011faa:	b942      	cbnz	r2, 8011fbe <_strtol_l.constprop.0+0xe6>
 8011fac:	4630      	mov	r0, r6
 8011fae:	e79e      	b.n	8011eee <_strtol_l.constprop.0+0x16>
 8011fb0:	b107      	cbz	r7, 8011fb4 <_strtol_l.constprop.0+0xdc>
 8011fb2:	4276      	negs	r6, r6
 8011fb4:	2a00      	cmp	r2, #0
 8011fb6:	d0f9      	beq.n	8011fac <_strtol_l.constprop.0+0xd4>
 8011fb8:	f1bc 0f00 	cmp.w	ip, #0
 8011fbc:	d000      	beq.n	8011fc0 <_strtol_l.constprop.0+0xe8>
 8011fbe:	1e69      	subs	r1, r5, #1
 8011fc0:	6011      	str	r1, [r2, #0]
 8011fc2:	e7f3      	b.n	8011fac <_strtol_l.constprop.0+0xd4>
 8011fc4:	2430      	movs	r4, #48	; 0x30
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d1b1      	bne.n	8011f2e <_strtol_l.constprop.0+0x56>
 8011fca:	2308      	movs	r3, #8
 8011fcc:	e7af      	b.n	8011f2e <_strtol_l.constprop.0+0x56>
 8011fce:	2c30      	cmp	r4, #48	; 0x30
 8011fd0:	d0a5      	beq.n	8011f1e <_strtol_l.constprop.0+0x46>
 8011fd2:	230a      	movs	r3, #10
 8011fd4:	e7ab      	b.n	8011f2e <_strtol_l.constprop.0+0x56>
 8011fd6:	bf00      	nop
 8011fd8:	08015b71 	.word	0x08015b71

08011fdc <_strtol_r>:
 8011fdc:	f7ff bf7c 	b.w	8011ed8 <_strtol_l.constprop.0>

08011fe0 <_write_r>:
 8011fe0:	b538      	push	{r3, r4, r5, lr}
 8011fe2:	4d07      	ldr	r5, [pc, #28]	; (8012000 <_write_r+0x20>)
 8011fe4:	4604      	mov	r4, r0
 8011fe6:	4608      	mov	r0, r1
 8011fe8:	4611      	mov	r1, r2
 8011fea:	2200      	movs	r2, #0
 8011fec:	602a      	str	r2, [r5, #0]
 8011fee:	461a      	mov	r2, r3
 8011ff0:	f7f1 f8c7 	bl	8003182 <_write>
 8011ff4:	1c43      	adds	r3, r0, #1
 8011ff6:	d102      	bne.n	8011ffe <_write_r+0x1e>
 8011ff8:	682b      	ldr	r3, [r5, #0]
 8011ffa:	b103      	cbz	r3, 8011ffe <_write_r+0x1e>
 8011ffc:	6023      	str	r3, [r4, #0]
 8011ffe:	bd38      	pop	{r3, r4, r5, pc}
 8012000:	20000770 	.word	0x20000770

08012004 <_close_r>:
 8012004:	b538      	push	{r3, r4, r5, lr}
 8012006:	4d06      	ldr	r5, [pc, #24]	; (8012020 <_close_r+0x1c>)
 8012008:	2300      	movs	r3, #0
 801200a:	4604      	mov	r4, r0
 801200c:	4608      	mov	r0, r1
 801200e:	602b      	str	r3, [r5, #0]
 8012010:	f7f1 f8d3 	bl	80031ba <_close>
 8012014:	1c43      	adds	r3, r0, #1
 8012016:	d102      	bne.n	801201e <_close_r+0x1a>
 8012018:	682b      	ldr	r3, [r5, #0]
 801201a:	b103      	cbz	r3, 801201e <_close_r+0x1a>
 801201c:	6023      	str	r3, [r4, #0]
 801201e:	bd38      	pop	{r3, r4, r5, pc}
 8012020:	20000770 	.word	0x20000770

08012024 <quorem>:
 8012024:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012028:	6903      	ldr	r3, [r0, #16]
 801202a:	690c      	ldr	r4, [r1, #16]
 801202c:	42a3      	cmp	r3, r4
 801202e:	4607      	mov	r7, r0
 8012030:	f2c0 8081 	blt.w	8012136 <quorem+0x112>
 8012034:	3c01      	subs	r4, #1
 8012036:	f101 0814 	add.w	r8, r1, #20
 801203a:	f100 0514 	add.w	r5, r0, #20
 801203e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012042:	9301      	str	r3, [sp, #4]
 8012044:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012048:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801204c:	3301      	adds	r3, #1
 801204e:	429a      	cmp	r2, r3
 8012050:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012054:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012058:	fbb2 f6f3 	udiv	r6, r2, r3
 801205c:	d331      	bcc.n	80120c2 <quorem+0x9e>
 801205e:	f04f 0e00 	mov.w	lr, #0
 8012062:	4640      	mov	r0, r8
 8012064:	46ac      	mov	ip, r5
 8012066:	46f2      	mov	sl, lr
 8012068:	f850 2b04 	ldr.w	r2, [r0], #4
 801206c:	b293      	uxth	r3, r2
 801206e:	fb06 e303 	mla	r3, r6, r3, lr
 8012072:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012076:	b29b      	uxth	r3, r3
 8012078:	ebaa 0303 	sub.w	r3, sl, r3
 801207c:	f8dc a000 	ldr.w	sl, [ip]
 8012080:	0c12      	lsrs	r2, r2, #16
 8012082:	fa13 f38a 	uxtah	r3, r3, sl
 8012086:	fb06 e202 	mla	r2, r6, r2, lr
 801208a:	9300      	str	r3, [sp, #0]
 801208c:	9b00      	ldr	r3, [sp, #0]
 801208e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012092:	b292      	uxth	r2, r2
 8012094:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012098:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801209c:	f8bd 3000 	ldrh.w	r3, [sp]
 80120a0:	4581      	cmp	r9, r0
 80120a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80120a6:	f84c 3b04 	str.w	r3, [ip], #4
 80120aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80120ae:	d2db      	bcs.n	8012068 <quorem+0x44>
 80120b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80120b4:	b92b      	cbnz	r3, 80120c2 <quorem+0x9e>
 80120b6:	9b01      	ldr	r3, [sp, #4]
 80120b8:	3b04      	subs	r3, #4
 80120ba:	429d      	cmp	r5, r3
 80120bc:	461a      	mov	r2, r3
 80120be:	d32e      	bcc.n	801211e <quorem+0xfa>
 80120c0:	613c      	str	r4, [r7, #16]
 80120c2:	4638      	mov	r0, r7
 80120c4:	f001 fc96 	bl	80139f4 <__mcmp>
 80120c8:	2800      	cmp	r0, #0
 80120ca:	db24      	blt.n	8012116 <quorem+0xf2>
 80120cc:	3601      	adds	r6, #1
 80120ce:	4628      	mov	r0, r5
 80120d0:	f04f 0c00 	mov.w	ip, #0
 80120d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80120d8:	f8d0 e000 	ldr.w	lr, [r0]
 80120dc:	b293      	uxth	r3, r2
 80120de:	ebac 0303 	sub.w	r3, ip, r3
 80120e2:	0c12      	lsrs	r2, r2, #16
 80120e4:	fa13 f38e 	uxtah	r3, r3, lr
 80120e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80120ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80120f0:	b29b      	uxth	r3, r3
 80120f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80120f6:	45c1      	cmp	r9, r8
 80120f8:	f840 3b04 	str.w	r3, [r0], #4
 80120fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012100:	d2e8      	bcs.n	80120d4 <quorem+0xb0>
 8012102:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012106:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801210a:	b922      	cbnz	r2, 8012116 <quorem+0xf2>
 801210c:	3b04      	subs	r3, #4
 801210e:	429d      	cmp	r5, r3
 8012110:	461a      	mov	r2, r3
 8012112:	d30a      	bcc.n	801212a <quorem+0x106>
 8012114:	613c      	str	r4, [r7, #16]
 8012116:	4630      	mov	r0, r6
 8012118:	b003      	add	sp, #12
 801211a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801211e:	6812      	ldr	r2, [r2, #0]
 8012120:	3b04      	subs	r3, #4
 8012122:	2a00      	cmp	r2, #0
 8012124:	d1cc      	bne.n	80120c0 <quorem+0x9c>
 8012126:	3c01      	subs	r4, #1
 8012128:	e7c7      	b.n	80120ba <quorem+0x96>
 801212a:	6812      	ldr	r2, [r2, #0]
 801212c:	3b04      	subs	r3, #4
 801212e:	2a00      	cmp	r2, #0
 8012130:	d1f0      	bne.n	8012114 <quorem+0xf0>
 8012132:	3c01      	subs	r4, #1
 8012134:	e7eb      	b.n	801210e <quorem+0xea>
 8012136:	2000      	movs	r0, #0
 8012138:	e7ee      	b.n	8012118 <quorem+0xf4>
 801213a:	0000      	movs	r0, r0
 801213c:	0000      	movs	r0, r0
	...

08012140 <_dtoa_r>:
 8012140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012144:	ed2d 8b04 	vpush	{d8-d9}
 8012148:	ec57 6b10 	vmov	r6, r7, d0
 801214c:	b093      	sub	sp, #76	; 0x4c
 801214e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012150:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012154:	9106      	str	r1, [sp, #24]
 8012156:	ee10 aa10 	vmov	sl, s0
 801215a:	4604      	mov	r4, r0
 801215c:	9209      	str	r2, [sp, #36]	; 0x24
 801215e:	930c      	str	r3, [sp, #48]	; 0x30
 8012160:	46bb      	mov	fp, r7
 8012162:	b975      	cbnz	r5, 8012182 <_dtoa_r+0x42>
 8012164:	2010      	movs	r0, #16
 8012166:	f001 f95f 	bl	8013428 <malloc>
 801216a:	4602      	mov	r2, r0
 801216c:	6260      	str	r0, [r4, #36]	; 0x24
 801216e:	b920      	cbnz	r0, 801217a <_dtoa_r+0x3a>
 8012170:	4ba7      	ldr	r3, [pc, #668]	; (8012410 <_dtoa_r+0x2d0>)
 8012172:	21ea      	movs	r1, #234	; 0xea
 8012174:	48a7      	ldr	r0, [pc, #668]	; (8012414 <_dtoa_r+0x2d4>)
 8012176:	f002 fcc7 	bl	8014b08 <__assert_func>
 801217a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801217e:	6005      	str	r5, [r0, #0]
 8012180:	60c5      	str	r5, [r0, #12]
 8012182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012184:	6819      	ldr	r1, [r3, #0]
 8012186:	b151      	cbz	r1, 801219e <_dtoa_r+0x5e>
 8012188:	685a      	ldr	r2, [r3, #4]
 801218a:	604a      	str	r2, [r1, #4]
 801218c:	2301      	movs	r3, #1
 801218e:	4093      	lsls	r3, r2
 8012190:	608b      	str	r3, [r1, #8]
 8012192:	4620      	mov	r0, r4
 8012194:	f001 f9a2 	bl	80134dc <_Bfree>
 8012198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801219a:	2200      	movs	r2, #0
 801219c:	601a      	str	r2, [r3, #0]
 801219e:	1e3b      	subs	r3, r7, #0
 80121a0:	bfaa      	itet	ge
 80121a2:	2300      	movge	r3, #0
 80121a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80121a8:	f8c8 3000 	strge.w	r3, [r8]
 80121ac:	4b9a      	ldr	r3, [pc, #616]	; (8012418 <_dtoa_r+0x2d8>)
 80121ae:	bfbc      	itt	lt
 80121b0:	2201      	movlt	r2, #1
 80121b2:	f8c8 2000 	strlt.w	r2, [r8]
 80121b6:	ea33 030b 	bics.w	r3, r3, fp
 80121ba:	d11b      	bne.n	80121f4 <_dtoa_r+0xb4>
 80121bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80121be:	f242 730f 	movw	r3, #9999	; 0x270f
 80121c2:	6013      	str	r3, [r2, #0]
 80121c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80121c8:	4333      	orrs	r3, r6
 80121ca:	f000 8592 	beq.w	8012cf2 <_dtoa_r+0xbb2>
 80121ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80121d0:	b963      	cbnz	r3, 80121ec <_dtoa_r+0xac>
 80121d2:	4b92      	ldr	r3, [pc, #584]	; (801241c <_dtoa_r+0x2dc>)
 80121d4:	e022      	b.n	801221c <_dtoa_r+0xdc>
 80121d6:	4b92      	ldr	r3, [pc, #584]	; (8012420 <_dtoa_r+0x2e0>)
 80121d8:	9301      	str	r3, [sp, #4]
 80121da:	3308      	adds	r3, #8
 80121dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80121de:	6013      	str	r3, [r2, #0]
 80121e0:	9801      	ldr	r0, [sp, #4]
 80121e2:	b013      	add	sp, #76	; 0x4c
 80121e4:	ecbd 8b04 	vpop	{d8-d9}
 80121e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ec:	4b8b      	ldr	r3, [pc, #556]	; (801241c <_dtoa_r+0x2dc>)
 80121ee:	9301      	str	r3, [sp, #4]
 80121f0:	3303      	adds	r3, #3
 80121f2:	e7f3      	b.n	80121dc <_dtoa_r+0x9c>
 80121f4:	2200      	movs	r2, #0
 80121f6:	2300      	movs	r3, #0
 80121f8:	4650      	mov	r0, sl
 80121fa:	4659      	mov	r1, fp
 80121fc:	f7ee fc84 	bl	8000b08 <__aeabi_dcmpeq>
 8012200:	ec4b ab19 	vmov	d9, sl, fp
 8012204:	4680      	mov	r8, r0
 8012206:	b158      	cbz	r0, 8012220 <_dtoa_r+0xe0>
 8012208:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801220a:	2301      	movs	r3, #1
 801220c:	6013      	str	r3, [r2, #0]
 801220e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012210:	2b00      	cmp	r3, #0
 8012212:	f000 856b 	beq.w	8012cec <_dtoa_r+0xbac>
 8012216:	4883      	ldr	r0, [pc, #524]	; (8012424 <_dtoa_r+0x2e4>)
 8012218:	6018      	str	r0, [r3, #0]
 801221a:	1e43      	subs	r3, r0, #1
 801221c:	9301      	str	r3, [sp, #4]
 801221e:	e7df      	b.n	80121e0 <_dtoa_r+0xa0>
 8012220:	ec4b ab10 	vmov	d0, sl, fp
 8012224:	aa10      	add	r2, sp, #64	; 0x40
 8012226:	a911      	add	r1, sp, #68	; 0x44
 8012228:	4620      	mov	r0, r4
 801222a:	f001 fd05 	bl	8013c38 <__d2b>
 801222e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012232:	ee08 0a10 	vmov	s16, r0
 8012236:	2d00      	cmp	r5, #0
 8012238:	f000 8084 	beq.w	8012344 <_dtoa_r+0x204>
 801223c:	ee19 3a90 	vmov	r3, s19
 8012240:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012244:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012248:	4656      	mov	r6, sl
 801224a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801224e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012252:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012256:	4b74      	ldr	r3, [pc, #464]	; (8012428 <_dtoa_r+0x2e8>)
 8012258:	2200      	movs	r2, #0
 801225a:	4630      	mov	r0, r6
 801225c:	4639      	mov	r1, r7
 801225e:	f7ee f833 	bl	80002c8 <__aeabi_dsub>
 8012262:	a365      	add	r3, pc, #404	; (adr r3, 80123f8 <_dtoa_r+0x2b8>)
 8012264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012268:	f7ee f9e6 	bl	8000638 <__aeabi_dmul>
 801226c:	a364      	add	r3, pc, #400	; (adr r3, 8012400 <_dtoa_r+0x2c0>)
 801226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012272:	f7ee f82b 	bl	80002cc <__adddf3>
 8012276:	4606      	mov	r6, r0
 8012278:	4628      	mov	r0, r5
 801227a:	460f      	mov	r7, r1
 801227c:	f7ee f972 	bl	8000564 <__aeabi_i2d>
 8012280:	a361      	add	r3, pc, #388	; (adr r3, 8012408 <_dtoa_r+0x2c8>)
 8012282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012286:	f7ee f9d7 	bl	8000638 <__aeabi_dmul>
 801228a:	4602      	mov	r2, r0
 801228c:	460b      	mov	r3, r1
 801228e:	4630      	mov	r0, r6
 8012290:	4639      	mov	r1, r7
 8012292:	f7ee f81b 	bl	80002cc <__adddf3>
 8012296:	4606      	mov	r6, r0
 8012298:	460f      	mov	r7, r1
 801229a:	f7ee fc7d 	bl	8000b98 <__aeabi_d2iz>
 801229e:	2200      	movs	r2, #0
 80122a0:	9000      	str	r0, [sp, #0]
 80122a2:	2300      	movs	r3, #0
 80122a4:	4630      	mov	r0, r6
 80122a6:	4639      	mov	r1, r7
 80122a8:	f7ee fc38 	bl	8000b1c <__aeabi_dcmplt>
 80122ac:	b150      	cbz	r0, 80122c4 <_dtoa_r+0x184>
 80122ae:	9800      	ldr	r0, [sp, #0]
 80122b0:	f7ee f958 	bl	8000564 <__aeabi_i2d>
 80122b4:	4632      	mov	r2, r6
 80122b6:	463b      	mov	r3, r7
 80122b8:	f7ee fc26 	bl	8000b08 <__aeabi_dcmpeq>
 80122bc:	b910      	cbnz	r0, 80122c4 <_dtoa_r+0x184>
 80122be:	9b00      	ldr	r3, [sp, #0]
 80122c0:	3b01      	subs	r3, #1
 80122c2:	9300      	str	r3, [sp, #0]
 80122c4:	9b00      	ldr	r3, [sp, #0]
 80122c6:	2b16      	cmp	r3, #22
 80122c8:	d85a      	bhi.n	8012380 <_dtoa_r+0x240>
 80122ca:	9a00      	ldr	r2, [sp, #0]
 80122cc:	4b57      	ldr	r3, [pc, #348]	; (801242c <_dtoa_r+0x2ec>)
 80122ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80122d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d6:	ec51 0b19 	vmov	r0, r1, d9
 80122da:	f7ee fc1f 	bl	8000b1c <__aeabi_dcmplt>
 80122de:	2800      	cmp	r0, #0
 80122e0:	d050      	beq.n	8012384 <_dtoa_r+0x244>
 80122e2:	9b00      	ldr	r3, [sp, #0]
 80122e4:	3b01      	subs	r3, #1
 80122e6:	9300      	str	r3, [sp, #0]
 80122e8:	2300      	movs	r3, #0
 80122ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80122ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80122ee:	1b5d      	subs	r5, r3, r5
 80122f0:	1e6b      	subs	r3, r5, #1
 80122f2:	9305      	str	r3, [sp, #20]
 80122f4:	bf45      	ittet	mi
 80122f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80122fa:	9304      	strmi	r3, [sp, #16]
 80122fc:	2300      	movpl	r3, #0
 80122fe:	2300      	movmi	r3, #0
 8012300:	bf4c      	ite	mi
 8012302:	9305      	strmi	r3, [sp, #20]
 8012304:	9304      	strpl	r3, [sp, #16]
 8012306:	9b00      	ldr	r3, [sp, #0]
 8012308:	2b00      	cmp	r3, #0
 801230a:	db3d      	blt.n	8012388 <_dtoa_r+0x248>
 801230c:	9b05      	ldr	r3, [sp, #20]
 801230e:	9a00      	ldr	r2, [sp, #0]
 8012310:	920a      	str	r2, [sp, #40]	; 0x28
 8012312:	4413      	add	r3, r2
 8012314:	9305      	str	r3, [sp, #20]
 8012316:	2300      	movs	r3, #0
 8012318:	9307      	str	r3, [sp, #28]
 801231a:	9b06      	ldr	r3, [sp, #24]
 801231c:	2b09      	cmp	r3, #9
 801231e:	f200 8089 	bhi.w	8012434 <_dtoa_r+0x2f4>
 8012322:	2b05      	cmp	r3, #5
 8012324:	bfc4      	itt	gt
 8012326:	3b04      	subgt	r3, #4
 8012328:	9306      	strgt	r3, [sp, #24]
 801232a:	9b06      	ldr	r3, [sp, #24]
 801232c:	f1a3 0302 	sub.w	r3, r3, #2
 8012330:	bfcc      	ite	gt
 8012332:	2500      	movgt	r5, #0
 8012334:	2501      	movle	r5, #1
 8012336:	2b03      	cmp	r3, #3
 8012338:	f200 8087 	bhi.w	801244a <_dtoa_r+0x30a>
 801233c:	e8df f003 	tbb	[pc, r3]
 8012340:	59383a2d 	.word	0x59383a2d
 8012344:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012348:	441d      	add	r5, r3
 801234a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801234e:	2b20      	cmp	r3, #32
 8012350:	bfc1      	itttt	gt
 8012352:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012356:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801235a:	fa0b f303 	lslgt.w	r3, fp, r3
 801235e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012362:	bfda      	itte	le
 8012364:	f1c3 0320 	rsble	r3, r3, #32
 8012368:	fa06 f003 	lslle.w	r0, r6, r3
 801236c:	4318      	orrgt	r0, r3
 801236e:	f7ee f8e9 	bl	8000544 <__aeabi_ui2d>
 8012372:	2301      	movs	r3, #1
 8012374:	4606      	mov	r6, r0
 8012376:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801237a:	3d01      	subs	r5, #1
 801237c:	930e      	str	r3, [sp, #56]	; 0x38
 801237e:	e76a      	b.n	8012256 <_dtoa_r+0x116>
 8012380:	2301      	movs	r3, #1
 8012382:	e7b2      	b.n	80122ea <_dtoa_r+0x1aa>
 8012384:	900b      	str	r0, [sp, #44]	; 0x2c
 8012386:	e7b1      	b.n	80122ec <_dtoa_r+0x1ac>
 8012388:	9b04      	ldr	r3, [sp, #16]
 801238a:	9a00      	ldr	r2, [sp, #0]
 801238c:	1a9b      	subs	r3, r3, r2
 801238e:	9304      	str	r3, [sp, #16]
 8012390:	4253      	negs	r3, r2
 8012392:	9307      	str	r3, [sp, #28]
 8012394:	2300      	movs	r3, #0
 8012396:	930a      	str	r3, [sp, #40]	; 0x28
 8012398:	e7bf      	b.n	801231a <_dtoa_r+0x1da>
 801239a:	2300      	movs	r3, #0
 801239c:	9308      	str	r3, [sp, #32]
 801239e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	dc55      	bgt.n	8012450 <_dtoa_r+0x310>
 80123a4:	2301      	movs	r3, #1
 80123a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80123aa:	461a      	mov	r2, r3
 80123ac:	9209      	str	r2, [sp, #36]	; 0x24
 80123ae:	e00c      	b.n	80123ca <_dtoa_r+0x28a>
 80123b0:	2301      	movs	r3, #1
 80123b2:	e7f3      	b.n	801239c <_dtoa_r+0x25c>
 80123b4:	2300      	movs	r3, #0
 80123b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123b8:	9308      	str	r3, [sp, #32]
 80123ba:	9b00      	ldr	r3, [sp, #0]
 80123bc:	4413      	add	r3, r2
 80123be:	9302      	str	r3, [sp, #8]
 80123c0:	3301      	adds	r3, #1
 80123c2:	2b01      	cmp	r3, #1
 80123c4:	9303      	str	r3, [sp, #12]
 80123c6:	bfb8      	it	lt
 80123c8:	2301      	movlt	r3, #1
 80123ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80123cc:	2200      	movs	r2, #0
 80123ce:	6042      	str	r2, [r0, #4]
 80123d0:	2204      	movs	r2, #4
 80123d2:	f102 0614 	add.w	r6, r2, #20
 80123d6:	429e      	cmp	r6, r3
 80123d8:	6841      	ldr	r1, [r0, #4]
 80123da:	d93d      	bls.n	8012458 <_dtoa_r+0x318>
 80123dc:	4620      	mov	r0, r4
 80123de:	f001 f83d 	bl	801345c <_Balloc>
 80123e2:	9001      	str	r0, [sp, #4]
 80123e4:	2800      	cmp	r0, #0
 80123e6:	d13b      	bne.n	8012460 <_dtoa_r+0x320>
 80123e8:	4b11      	ldr	r3, [pc, #68]	; (8012430 <_dtoa_r+0x2f0>)
 80123ea:	4602      	mov	r2, r0
 80123ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80123f0:	e6c0      	b.n	8012174 <_dtoa_r+0x34>
 80123f2:	2301      	movs	r3, #1
 80123f4:	e7df      	b.n	80123b6 <_dtoa_r+0x276>
 80123f6:	bf00      	nop
 80123f8:	636f4361 	.word	0x636f4361
 80123fc:	3fd287a7 	.word	0x3fd287a7
 8012400:	8b60c8b3 	.word	0x8b60c8b3
 8012404:	3fc68a28 	.word	0x3fc68a28
 8012408:	509f79fb 	.word	0x509f79fb
 801240c:	3fd34413 	.word	0x3fd34413
 8012410:	08015c7e 	.word	0x08015c7e
 8012414:	08015c95 	.word	0x08015c95
 8012418:	7ff00000 	.word	0x7ff00000
 801241c:	08015c7a 	.word	0x08015c7a
 8012420:	08015c71 	.word	0x08015c71
 8012424:	08015eea 	.word	0x08015eea
 8012428:	3ff80000 	.word	0x3ff80000
 801242c:	08015e00 	.word	0x08015e00
 8012430:	08015cf0 	.word	0x08015cf0
 8012434:	2501      	movs	r5, #1
 8012436:	2300      	movs	r3, #0
 8012438:	9306      	str	r3, [sp, #24]
 801243a:	9508      	str	r5, [sp, #32]
 801243c:	f04f 33ff 	mov.w	r3, #4294967295
 8012440:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012444:	2200      	movs	r2, #0
 8012446:	2312      	movs	r3, #18
 8012448:	e7b0      	b.n	80123ac <_dtoa_r+0x26c>
 801244a:	2301      	movs	r3, #1
 801244c:	9308      	str	r3, [sp, #32]
 801244e:	e7f5      	b.n	801243c <_dtoa_r+0x2fc>
 8012450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012452:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012456:	e7b8      	b.n	80123ca <_dtoa_r+0x28a>
 8012458:	3101      	adds	r1, #1
 801245a:	6041      	str	r1, [r0, #4]
 801245c:	0052      	lsls	r2, r2, #1
 801245e:	e7b8      	b.n	80123d2 <_dtoa_r+0x292>
 8012460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012462:	9a01      	ldr	r2, [sp, #4]
 8012464:	601a      	str	r2, [r3, #0]
 8012466:	9b03      	ldr	r3, [sp, #12]
 8012468:	2b0e      	cmp	r3, #14
 801246a:	f200 809d 	bhi.w	80125a8 <_dtoa_r+0x468>
 801246e:	2d00      	cmp	r5, #0
 8012470:	f000 809a 	beq.w	80125a8 <_dtoa_r+0x468>
 8012474:	9b00      	ldr	r3, [sp, #0]
 8012476:	2b00      	cmp	r3, #0
 8012478:	dd32      	ble.n	80124e0 <_dtoa_r+0x3a0>
 801247a:	4ab7      	ldr	r2, [pc, #732]	; (8012758 <_dtoa_r+0x618>)
 801247c:	f003 030f 	and.w	r3, r3, #15
 8012480:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012484:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012488:	9b00      	ldr	r3, [sp, #0]
 801248a:	05d8      	lsls	r0, r3, #23
 801248c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012490:	d516      	bpl.n	80124c0 <_dtoa_r+0x380>
 8012492:	4bb2      	ldr	r3, [pc, #712]	; (801275c <_dtoa_r+0x61c>)
 8012494:	ec51 0b19 	vmov	r0, r1, d9
 8012498:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801249c:	f7ee f9f6 	bl	800088c <__aeabi_ddiv>
 80124a0:	f007 070f 	and.w	r7, r7, #15
 80124a4:	4682      	mov	sl, r0
 80124a6:	468b      	mov	fp, r1
 80124a8:	2503      	movs	r5, #3
 80124aa:	4eac      	ldr	r6, [pc, #688]	; (801275c <_dtoa_r+0x61c>)
 80124ac:	b957      	cbnz	r7, 80124c4 <_dtoa_r+0x384>
 80124ae:	4642      	mov	r2, r8
 80124b0:	464b      	mov	r3, r9
 80124b2:	4650      	mov	r0, sl
 80124b4:	4659      	mov	r1, fp
 80124b6:	f7ee f9e9 	bl	800088c <__aeabi_ddiv>
 80124ba:	4682      	mov	sl, r0
 80124bc:	468b      	mov	fp, r1
 80124be:	e028      	b.n	8012512 <_dtoa_r+0x3d2>
 80124c0:	2502      	movs	r5, #2
 80124c2:	e7f2      	b.n	80124aa <_dtoa_r+0x36a>
 80124c4:	07f9      	lsls	r1, r7, #31
 80124c6:	d508      	bpl.n	80124da <_dtoa_r+0x39a>
 80124c8:	4640      	mov	r0, r8
 80124ca:	4649      	mov	r1, r9
 80124cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80124d0:	f7ee f8b2 	bl	8000638 <__aeabi_dmul>
 80124d4:	3501      	adds	r5, #1
 80124d6:	4680      	mov	r8, r0
 80124d8:	4689      	mov	r9, r1
 80124da:	107f      	asrs	r7, r7, #1
 80124dc:	3608      	adds	r6, #8
 80124de:	e7e5      	b.n	80124ac <_dtoa_r+0x36c>
 80124e0:	f000 809b 	beq.w	801261a <_dtoa_r+0x4da>
 80124e4:	9b00      	ldr	r3, [sp, #0]
 80124e6:	4f9d      	ldr	r7, [pc, #628]	; (801275c <_dtoa_r+0x61c>)
 80124e8:	425e      	negs	r6, r3
 80124ea:	4b9b      	ldr	r3, [pc, #620]	; (8012758 <_dtoa_r+0x618>)
 80124ec:	f006 020f 	and.w	r2, r6, #15
 80124f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80124f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f8:	ec51 0b19 	vmov	r0, r1, d9
 80124fc:	f7ee f89c 	bl	8000638 <__aeabi_dmul>
 8012500:	1136      	asrs	r6, r6, #4
 8012502:	4682      	mov	sl, r0
 8012504:	468b      	mov	fp, r1
 8012506:	2300      	movs	r3, #0
 8012508:	2502      	movs	r5, #2
 801250a:	2e00      	cmp	r6, #0
 801250c:	d17a      	bne.n	8012604 <_dtoa_r+0x4c4>
 801250e:	2b00      	cmp	r3, #0
 8012510:	d1d3      	bne.n	80124ba <_dtoa_r+0x37a>
 8012512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012514:	2b00      	cmp	r3, #0
 8012516:	f000 8082 	beq.w	801261e <_dtoa_r+0x4de>
 801251a:	4b91      	ldr	r3, [pc, #580]	; (8012760 <_dtoa_r+0x620>)
 801251c:	2200      	movs	r2, #0
 801251e:	4650      	mov	r0, sl
 8012520:	4659      	mov	r1, fp
 8012522:	f7ee fafb 	bl	8000b1c <__aeabi_dcmplt>
 8012526:	2800      	cmp	r0, #0
 8012528:	d079      	beq.n	801261e <_dtoa_r+0x4de>
 801252a:	9b03      	ldr	r3, [sp, #12]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d076      	beq.n	801261e <_dtoa_r+0x4de>
 8012530:	9b02      	ldr	r3, [sp, #8]
 8012532:	2b00      	cmp	r3, #0
 8012534:	dd36      	ble.n	80125a4 <_dtoa_r+0x464>
 8012536:	9b00      	ldr	r3, [sp, #0]
 8012538:	4650      	mov	r0, sl
 801253a:	4659      	mov	r1, fp
 801253c:	1e5f      	subs	r7, r3, #1
 801253e:	2200      	movs	r2, #0
 8012540:	4b88      	ldr	r3, [pc, #544]	; (8012764 <_dtoa_r+0x624>)
 8012542:	f7ee f879 	bl	8000638 <__aeabi_dmul>
 8012546:	9e02      	ldr	r6, [sp, #8]
 8012548:	4682      	mov	sl, r0
 801254a:	468b      	mov	fp, r1
 801254c:	3501      	adds	r5, #1
 801254e:	4628      	mov	r0, r5
 8012550:	f7ee f808 	bl	8000564 <__aeabi_i2d>
 8012554:	4652      	mov	r2, sl
 8012556:	465b      	mov	r3, fp
 8012558:	f7ee f86e 	bl	8000638 <__aeabi_dmul>
 801255c:	4b82      	ldr	r3, [pc, #520]	; (8012768 <_dtoa_r+0x628>)
 801255e:	2200      	movs	r2, #0
 8012560:	f7ed feb4 	bl	80002cc <__adddf3>
 8012564:	46d0      	mov	r8, sl
 8012566:	46d9      	mov	r9, fp
 8012568:	4682      	mov	sl, r0
 801256a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801256e:	2e00      	cmp	r6, #0
 8012570:	d158      	bne.n	8012624 <_dtoa_r+0x4e4>
 8012572:	4b7e      	ldr	r3, [pc, #504]	; (801276c <_dtoa_r+0x62c>)
 8012574:	2200      	movs	r2, #0
 8012576:	4640      	mov	r0, r8
 8012578:	4649      	mov	r1, r9
 801257a:	f7ed fea5 	bl	80002c8 <__aeabi_dsub>
 801257e:	4652      	mov	r2, sl
 8012580:	465b      	mov	r3, fp
 8012582:	4680      	mov	r8, r0
 8012584:	4689      	mov	r9, r1
 8012586:	f7ee fae7 	bl	8000b58 <__aeabi_dcmpgt>
 801258a:	2800      	cmp	r0, #0
 801258c:	f040 8295 	bne.w	8012aba <_dtoa_r+0x97a>
 8012590:	4652      	mov	r2, sl
 8012592:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012596:	4640      	mov	r0, r8
 8012598:	4649      	mov	r1, r9
 801259a:	f7ee fabf 	bl	8000b1c <__aeabi_dcmplt>
 801259e:	2800      	cmp	r0, #0
 80125a0:	f040 8289 	bne.w	8012ab6 <_dtoa_r+0x976>
 80125a4:	ec5b ab19 	vmov	sl, fp, d9
 80125a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	f2c0 8148 	blt.w	8012840 <_dtoa_r+0x700>
 80125b0:	9a00      	ldr	r2, [sp, #0]
 80125b2:	2a0e      	cmp	r2, #14
 80125b4:	f300 8144 	bgt.w	8012840 <_dtoa_r+0x700>
 80125b8:	4b67      	ldr	r3, [pc, #412]	; (8012758 <_dtoa_r+0x618>)
 80125ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80125be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80125c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	f280 80d5 	bge.w	8012774 <_dtoa_r+0x634>
 80125ca:	9b03      	ldr	r3, [sp, #12]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	f300 80d1 	bgt.w	8012774 <_dtoa_r+0x634>
 80125d2:	f040 826f 	bne.w	8012ab4 <_dtoa_r+0x974>
 80125d6:	4b65      	ldr	r3, [pc, #404]	; (801276c <_dtoa_r+0x62c>)
 80125d8:	2200      	movs	r2, #0
 80125da:	4640      	mov	r0, r8
 80125dc:	4649      	mov	r1, r9
 80125de:	f7ee f82b 	bl	8000638 <__aeabi_dmul>
 80125e2:	4652      	mov	r2, sl
 80125e4:	465b      	mov	r3, fp
 80125e6:	f7ee faad 	bl	8000b44 <__aeabi_dcmpge>
 80125ea:	9e03      	ldr	r6, [sp, #12]
 80125ec:	4637      	mov	r7, r6
 80125ee:	2800      	cmp	r0, #0
 80125f0:	f040 8245 	bne.w	8012a7e <_dtoa_r+0x93e>
 80125f4:	9d01      	ldr	r5, [sp, #4]
 80125f6:	2331      	movs	r3, #49	; 0x31
 80125f8:	f805 3b01 	strb.w	r3, [r5], #1
 80125fc:	9b00      	ldr	r3, [sp, #0]
 80125fe:	3301      	adds	r3, #1
 8012600:	9300      	str	r3, [sp, #0]
 8012602:	e240      	b.n	8012a86 <_dtoa_r+0x946>
 8012604:	07f2      	lsls	r2, r6, #31
 8012606:	d505      	bpl.n	8012614 <_dtoa_r+0x4d4>
 8012608:	e9d7 2300 	ldrd	r2, r3, [r7]
 801260c:	f7ee f814 	bl	8000638 <__aeabi_dmul>
 8012610:	3501      	adds	r5, #1
 8012612:	2301      	movs	r3, #1
 8012614:	1076      	asrs	r6, r6, #1
 8012616:	3708      	adds	r7, #8
 8012618:	e777      	b.n	801250a <_dtoa_r+0x3ca>
 801261a:	2502      	movs	r5, #2
 801261c:	e779      	b.n	8012512 <_dtoa_r+0x3d2>
 801261e:	9f00      	ldr	r7, [sp, #0]
 8012620:	9e03      	ldr	r6, [sp, #12]
 8012622:	e794      	b.n	801254e <_dtoa_r+0x40e>
 8012624:	9901      	ldr	r1, [sp, #4]
 8012626:	4b4c      	ldr	r3, [pc, #304]	; (8012758 <_dtoa_r+0x618>)
 8012628:	4431      	add	r1, r6
 801262a:	910d      	str	r1, [sp, #52]	; 0x34
 801262c:	9908      	ldr	r1, [sp, #32]
 801262e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012632:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012636:	2900      	cmp	r1, #0
 8012638:	d043      	beq.n	80126c2 <_dtoa_r+0x582>
 801263a:	494d      	ldr	r1, [pc, #308]	; (8012770 <_dtoa_r+0x630>)
 801263c:	2000      	movs	r0, #0
 801263e:	f7ee f925 	bl	800088c <__aeabi_ddiv>
 8012642:	4652      	mov	r2, sl
 8012644:	465b      	mov	r3, fp
 8012646:	f7ed fe3f 	bl	80002c8 <__aeabi_dsub>
 801264a:	9d01      	ldr	r5, [sp, #4]
 801264c:	4682      	mov	sl, r0
 801264e:	468b      	mov	fp, r1
 8012650:	4649      	mov	r1, r9
 8012652:	4640      	mov	r0, r8
 8012654:	f7ee faa0 	bl	8000b98 <__aeabi_d2iz>
 8012658:	4606      	mov	r6, r0
 801265a:	f7ed ff83 	bl	8000564 <__aeabi_i2d>
 801265e:	4602      	mov	r2, r0
 8012660:	460b      	mov	r3, r1
 8012662:	4640      	mov	r0, r8
 8012664:	4649      	mov	r1, r9
 8012666:	f7ed fe2f 	bl	80002c8 <__aeabi_dsub>
 801266a:	3630      	adds	r6, #48	; 0x30
 801266c:	f805 6b01 	strb.w	r6, [r5], #1
 8012670:	4652      	mov	r2, sl
 8012672:	465b      	mov	r3, fp
 8012674:	4680      	mov	r8, r0
 8012676:	4689      	mov	r9, r1
 8012678:	f7ee fa50 	bl	8000b1c <__aeabi_dcmplt>
 801267c:	2800      	cmp	r0, #0
 801267e:	d163      	bne.n	8012748 <_dtoa_r+0x608>
 8012680:	4642      	mov	r2, r8
 8012682:	464b      	mov	r3, r9
 8012684:	4936      	ldr	r1, [pc, #216]	; (8012760 <_dtoa_r+0x620>)
 8012686:	2000      	movs	r0, #0
 8012688:	f7ed fe1e 	bl	80002c8 <__aeabi_dsub>
 801268c:	4652      	mov	r2, sl
 801268e:	465b      	mov	r3, fp
 8012690:	f7ee fa44 	bl	8000b1c <__aeabi_dcmplt>
 8012694:	2800      	cmp	r0, #0
 8012696:	f040 80b5 	bne.w	8012804 <_dtoa_r+0x6c4>
 801269a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801269c:	429d      	cmp	r5, r3
 801269e:	d081      	beq.n	80125a4 <_dtoa_r+0x464>
 80126a0:	4b30      	ldr	r3, [pc, #192]	; (8012764 <_dtoa_r+0x624>)
 80126a2:	2200      	movs	r2, #0
 80126a4:	4650      	mov	r0, sl
 80126a6:	4659      	mov	r1, fp
 80126a8:	f7ed ffc6 	bl	8000638 <__aeabi_dmul>
 80126ac:	4b2d      	ldr	r3, [pc, #180]	; (8012764 <_dtoa_r+0x624>)
 80126ae:	4682      	mov	sl, r0
 80126b0:	468b      	mov	fp, r1
 80126b2:	4640      	mov	r0, r8
 80126b4:	4649      	mov	r1, r9
 80126b6:	2200      	movs	r2, #0
 80126b8:	f7ed ffbe 	bl	8000638 <__aeabi_dmul>
 80126bc:	4680      	mov	r8, r0
 80126be:	4689      	mov	r9, r1
 80126c0:	e7c6      	b.n	8012650 <_dtoa_r+0x510>
 80126c2:	4650      	mov	r0, sl
 80126c4:	4659      	mov	r1, fp
 80126c6:	f7ed ffb7 	bl	8000638 <__aeabi_dmul>
 80126ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126cc:	9d01      	ldr	r5, [sp, #4]
 80126ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80126d0:	4682      	mov	sl, r0
 80126d2:	468b      	mov	fp, r1
 80126d4:	4649      	mov	r1, r9
 80126d6:	4640      	mov	r0, r8
 80126d8:	f7ee fa5e 	bl	8000b98 <__aeabi_d2iz>
 80126dc:	4606      	mov	r6, r0
 80126de:	f7ed ff41 	bl	8000564 <__aeabi_i2d>
 80126e2:	3630      	adds	r6, #48	; 0x30
 80126e4:	4602      	mov	r2, r0
 80126e6:	460b      	mov	r3, r1
 80126e8:	4640      	mov	r0, r8
 80126ea:	4649      	mov	r1, r9
 80126ec:	f7ed fdec 	bl	80002c8 <__aeabi_dsub>
 80126f0:	f805 6b01 	strb.w	r6, [r5], #1
 80126f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126f6:	429d      	cmp	r5, r3
 80126f8:	4680      	mov	r8, r0
 80126fa:	4689      	mov	r9, r1
 80126fc:	f04f 0200 	mov.w	r2, #0
 8012700:	d124      	bne.n	801274c <_dtoa_r+0x60c>
 8012702:	4b1b      	ldr	r3, [pc, #108]	; (8012770 <_dtoa_r+0x630>)
 8012704:	4650      	mov	r0, sl
 8012706:	4659      	mov	r1, fp
 8012708:	f7ed fde0 	bl	80002cc <__adddf3>
 801270c:	4602      	mov	r2, r0
 801270e:	460b      	mov	r3, r1
 8012710:	4640      	mov	r0, r8
 8012712:	4649      	mov	r1, r9
 8012714:	f7ee fa20 	bl	8000b58 <__aeabi_dcmpgt>
 8012718:	2800      	cmp	r0, #0
 801271a:	d173      	bne.n	8012804 <_dtoa_r+0x6c4>
 801271c:	4652      	mov	r2, sl
 801271e:	465b      	mov	r3, fp
 8012720:	4913      	ldr	r1, [pc, #76]	; (8012770 <_dtoa_r+0x630>)
 8012722:	2000      	movs	r0, #0
 8012724:	f7ed fdd0 	bl	80002c8 <__aeabi_dsub>
 8012728:	4602      	mov	r2, r0
 801272a:	460b      	mov	r3, r1
 801272c:	4640      	mov	r0, r8
 801272e:	4649      	mov	r1, r9
 8012730:	f7ee f9f4 	bl	8000b1c <__aeabi_dcmplt>
 8012734:	2800      	cmp	r0, #0
 8012736:	f43f af35 	beq.w	80125a4 <_dtoa_r+0x464>
 801273a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801273c:	1e6b      	subs	r3, r5, #1
 801273e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012740:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012744:	2b30      	cmp	r3, #48	; 0x30
 8012746:	d0f8      	beq.n	801273a <_dtoa_r+0x5fa>
 8012748:	9700      	str	r7, [sp, #0]
 801274a:	e049      	b.n	80127e0 <_dtoa_r+0x6a0>
 801274c:	4b05      	ldr	r3, [pc, #20]	; (8012764 <_dtoa_r+0x624>)
 801274e:	f7ed ff73 	bl	8000638 <__aeabi_dmul>
 8012752:	4680      	mov	r8, r0
 8012754:	4689      	mov	r9, r1
 8012756:	e7bd      	b.n	80126d4 <_dtoa_r+0x594>
 8012758:	08015e00 	.word	0x08015e00
 801275c:	08015dd8 	.word	0x08015dd8
 8012760:	3ff00000 	.word	0x3ff00000
 8012764:	40240000 	.word	0x40240000
 8012768:	401c0000 	.word	0x401c0000
 801276c:	40140000 	.word	0x40140000
 8012770:	3fe00000 	.word	0x3fe00000
 8012774:	9d01      	ldr	r5, [sp, #4]
 8012776:	4656      	mov	r6, sl
 8012778:	465f      	mov	r7, fp
 801277a:	4642      	mov	r2, r8
 801277c:	464b      	mov	r3, r9
 801277e:	4630      	mov	r0, r6
 8012780:	4639      	mov	r1, r7
 8012782:	f7ee f883 	bl	800088c <__aeabi_ddiv>
 8012786:	f7ee fa07 	bl	8000b98 <__aeabi_d2iz>
 801278a:	4682      	mov	sl, r0
 801278c:	f7ed feea 	bl	8000564 <__aeabi_i2d>
 8012790:	4642      	mov	r2, r8
 8012792:	464b      	mov	r3, r9
 8012794:	f7ed ff50 	bl	8000638 <__aeabi_dmul>
 8012798:	4602      	mov	r2, r0
 801279a:	460b      	mov	r3, r1
 801279c:	4630      	mov	r0, r6
 801279e:	4639      	mov	r1, r7
 80127a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80127a4:	f7ed fd90 	bl	80002c8 <__aeabi_dsub>
 80127a8:	f805 6b01 	strb.w	r6, [r5], #1
 80127ac:	9e01      	ldr	r6, [sp, #4]
 80127ae:	9f03      	ldr	r7, [sp, #12]
 80127b0:	1bae      	subs	r6, r5, r6
 80127b2:	42b7      	cmp	r7, r6
 80127b4:	4602      	mov	r2, r0
 80127b6:	460b      	mov	r3, r1
 80127b8:	d135      	bne.n	8012826 <_dtoa_r+0x6e6>
 80127ba:	f7ed fd87 	bl	80002cc <__adddf3>
 80127be:	4642      	mov	r2, r8
 80127c0:	464b      	mov	r3, r9
 80127c2:	4606      	mov	r6, r0
 80127c4:	460f      	mov	r7, r1
 80127c6:	f7ee f9c7 	bl	8000b58 <__aeabi_dcmpgt>
 80127ca:	b9d0      	cbnz	r0, 8012802 <_dtoa_r+0x6c2>
 80127cc:	4642      	mov	r2, r8
 80127ce:	464b      	mov	r3, r9
 80127d0:	4630      	mov	r0, r6
 80127d2:	4639      	mov	r1, r7
 80127d4:	f7ee f998 	bl	8000b08 <__aeabi_dcmpeq>
 80127d8:	b110      	cbz	r0, 80127e0 <_dtoa_r+0x6a0>
 80127da:	f01a 0f01 	tst.w	sl, #1
 80127de:	d110      	bne.n	8012802 <_dtoa_r+0x6c2>
 80127e0:	4620      	mov	r0, r4
 80127e2:	ee18 1a10 	vmov	r1, s16
 80127e6:	f000 fe79 	bl	80134dc <_Bfree>
 80127ea:	2300      	movs	r3, #0
 80127ec:	9800      	ldr	r0, [sp, #0]
 80127ee:	702b      	strb	r3, [r5, #0]
 80127f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127f2:	3001      	adds	r0, #1
 80127f4:	6018      	str	r0, [r3, #0]
 80127f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	f43f acf1 	beq.w	80121e0 <_dtoa_r+0xa0>
 80127fe:	601d      	str	r5, [r3, #0]
 8012800:	e4ee      	b.n	80121e0 <_dtoa_r+0xa0>
 8012802:	9f00      	ldr	r7, [sp, #0]
 8012804:	462b      	mov	r3, r5
 8012806:	461d      	mov	r5, r3
 8012808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801280c:	2a39      	cmp	r2, #57	; 0x39
 801280e:	d106      	bne.n	801281e <_dtoa_r+0x6de>
 8012810:	9a01      	ldr	r2, [sp, #4]
 8012812:	429a      	cmp	r2, r3
 8012814:	d1f7      	bne.n	8012806 <_dtoa_r+0x6c6>
 8012816:	9901      	ldr	r1, [sp, #4]
 8012818:	2230      	movs	r2, #48	; 0x30
 801281a:	3701      	adds	r7, #1
 801281c:	700a      	strb	r2, [r1, #0]
 801281e:	781a      	ldrb	r2, [r3, #0]
 8012820:	3201      	adds	r2, #1
 8012822:	701a      	strb	r2, [r3, #0]
 8012824:	e790      	b.n	8012748 <_dtoa_r+0x608>
 8012826:	4ba6      	ldr	r3, [pc, #664]	; (8012ac0 <_dtoa_r+0x980>)
 8012828:	2200      	movs	r2, #0
 801282a:	f7ed ff05 	bl	8000638 <__aeabi_dmul>
 801282e:	2200      	movs	r2, #0
 8012830:	2300      	movs	r3, #0
 8012832:	4606      	mov	r6, r0
 8012834:	460f      	mov	r7, r1
 8012836:	f7ee f967 	bl	8000b08 <__aeabi_dcmpeq>
 801283a:	2800      	cmp	r0, #0
 801283c:	d09d      	beq.n	801277a <_dtoa_r+0x63a>
 801283e:	e7cf      	b.n	80127e0 <_dtoa_r+0x6a0>
 8012840:	9a08      	ldr	r2, [sp, #32]
 8012842:	2a00      	cmp	r2, #0
 8012844:	f000 80d7 	beq.w	80129f6 <_dtoa_r+0x8b6>
 8012848:	9a06      	ldr	r2, [sp, #24]
 801284a:	2a01      	cmp	r2, #1
 801284c:	f300 80ba 	bgt.w	80129c4 <_dtoa_r+0x884>
 8012850:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012852:	2a00      	cmp	r2, #0
 8012854:	f000 80b2 	beq.w	80129bc <_dtoa_r+0x87c>
 8012858:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801285c:	9e07      	ldr	r6, [sp, #28]
 801285e:	9d04      	ldr	r5, [sp, #16]
 8012860:	9a04      	ldr	r2, [sp, #16]
 8012862:	441a      	add	r2, r3
 8012864:	9204      	str	r2, [sp, #16]
 8012866:	9a05      	ldr	r2, [sp, #20]
 8012868:	2101      	movs	r1, #1
 801286a:	441a      	add	r2, r3
 801286c:	4620      	mov	r0, r4
 801286e:	9205      	str	r2, [sp, #20]
 8012870:	f000 ff36 	bl	80136e0 <__i2b>
 8012874:	4607      	mov	r7, r0
 8012876:	2d00      	cmp	r5, #0
 8012878:	dd0c      	ble.n	8012894 <_dtoa_r+0x754>
 801287a:	9b05      	ldr	r3, [sp, #20]
 801287c:	2b00      	cmp	r3, #0
 801287e:	dd09      	ble.n	8012894 <_dtoa_r+0x754>
 8012880:	42ab      	cmp	r3, r5
 8012882:	9a04      	ldr	r2, [sp, #16]
 8012884:	bfa8      	it	ge
 8012886:	462b      	movge	r3, r5
 8012888:	1ad2      	subs	r2, r2, r3
 801288a:	9204      	str	r2, [sp, #16]
 801288c:	9a05      	ldr	r2, [sp, #20]
 801288e:	1aed      	subs	r5, r5, r3
 8012890:	1ad3      	subs	r3, r2, r3
 8012892:	9305      	str	r3, [sp, #20]
 8012894:	9b07      	ldr	r3, [sp, #28]
 8012896:	b31b      	cbz	r3, 80128e0 <_dtoa_r+0x7a0>
 8012898:	9b08      	ldr	r3, [sp, #32]
 801289a:	2b00      	cmp	r3, #0
 801289c:	f000 80af 	beq.w	80129fe <_dtoa_r+0x8be>
 80128a0:	2e00      	cmp	r6, #0
 80128a2:	dd13      	ble.n	80128cc <_dtoa_r+0x78c>
 80128a4:	4639      	mov	r1, r7
 80128a6:	4632      	mov	r2, r6
 80128a8:	4620      	mov	r0, r4
 80128aa:	f000 ffd9 	bl	8013860 <__pow5mult>
 80128ae:	ee18 2a10 	vmov	r2, s16
 80128b2:	4601      	mov	r1, r0
 80128b4:	4607      	mov	r7, r0
 80128b6:	4620      	mov	r0, r4
 80128b8:	f000 ff28 	bl	801370c <__multiply>
 80128bc:	ee18 1a10 	vmov	r1, s16
 80128c0:	4680      	mov	r8, r0
 80128c2:	4620      	mov	r0, r4
 80128c4:	f000 fe0a 	bl	80134dc <_Bfree>
 80128c8:	ee08 8a10 	vmov	s16, r8
 80128cc:	9b07      	ldr	r3, [sp, #28]
 80128ce:	1b9a      	subs	r2, r3, r6
 80128d0:	d006      	beq.n	80128e0 <_dtoa_r+0x7a0>
 80128d2:	ee18 1a10 	vmov	r1, s16
 80128d6:	4620      	mov	r0, r4
 80128d8:	f000 ffc2 	bl	8013860 <__pow5mult>
 80128dc:	ee08 0a10 	vmov	s16, r0
 80128e0:	2101      	movs	r1, #1
 80128e2:	4620      	mov	r0, r4
 80128e4:	f000 fefc 	bl	80136e0 <__i2b>
 80128e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	4606      	mov	r6, r0
 80128ee:	f340 8088 	ble.w	8012a02 <_dtoa_r+0x8c2>
 80128f2:	461a      	mov	r2, r3
 80128f4:	4601      	mov	r1, r0
 80128f6:	4620      	mov	r0, r4
 80128f8:	f000 ffb2 	bl	8013860 <__pow5mult>
 80128fc:	9b06      	ldr	r3, [sp, #24]
 80128fe:	2b01      	cmp	r3, #1
 8012900:	4606      	mov	r6, r0
 8012902:	f340 8081 	ble.w	8012a08 <_dtoa_r+0x8c8>
 8012906:	f04f 0800 	mov.w	r8, #0
 801290a:	6933      	ldr	r3, [r6, #16]
 801290c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012910:	6918      	ldr	r0, [r3, #16]
 8012912:	f000 fe95 	bl	8013640 <__hi0bits>
 8012916:	f1c0 0020 	rsb	r0, r0, #32
 801291a:	9b05      	ldr	r3, [sp, #20]
 801291c:	4418      	add	r0, r3
 801291e:	f010 001f 	ands.w	r0, r0, #31
 8012922:	f000 8092 	beq.w	8012a4a <_dtoa_r+0x90a>
 8012926:	f1c0 0320 	rsb	r3, r0, #32
 801292a:	2b04      	cmp	r3, #4
 801292c:	f340 808a 	ble.w	8012a44 <_dtoa_r+0x904>
 8012930:	f1c0 001c 	rsb	r0, r0, #28
 8012934:	9b04      	ldr	r3, [sp, #16]
 8012936:	4403      	add	r3, r0
 8012938:	9304      	str	r3, [sp, #16]
 801293a:	9b05      	ldr	r3, [sp, #20]
 801293c:	4403      	add	r3, r0
 801293e:	4405      	add	r5, r0
 8012940:	9305      	str	r3, [sp, #20]
 8012942:	9b04      	ldr	r3, [sp, #16]
 8012944:	2b00      	cmp	r3, #0
 8012946:	dd07      	ble.n	8012958 <_dtoa_r+0x818>
 8012948:	ee18 1a10 	vmov	r1, s16
 801294c:	461a      	mov	r2, r3
 801294e:	4620      	mov	r0, r4
 8012950:	f000 ffe0 	bl	8013914 <__lshift>
 8012954:	ee08 0a10 	vmov	s16, r0
 8012958:	9b05      	ldr	r3, [sp, #20]
 801295a:	2b00      	cmp	r3, #0
 801295c:	dd05      	ble.n	801296a <_dtoa_r+0x82a>
 801295e:	4631      	mov	r1, r6
 8012960:	461a      	mov	r2, r3
 8012962:	4620      	mov	r0, r4
 8012964:	f000 ffd6 	bl	8013914 <__lshift>
 8012968:	4606      	mov	r6, r0
 801296a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801296c:	2b00      	cmp	r3, #0
 801296e:	d06e      	beq.n	8012a4e <_dtoa_r+0x90e>
 8012970:	ee18 0a10 	vmov	r0, s16
 8012974:	4631      	mov	r1, r6
 8012976:	f001 f83d 	bl	80139f4 <__mcmp>
 801297a:	2800      	cmp	r0, #0
 801297c:	da67      	bge.n	8012a4e <_dtoa_r+0x90e>
 801297e:	9b00      	ldr	r3, [sp, #0]
 8012980:	3b01      	subs	r3, #1
 8012982:	ee18 1a10 	vmov	r1, s16
 8012986:	9300      	str	r3, [sp, #0]
 8012988:	220a      	movs	r2, #10
 801298a:	2300      	movs	r3, #0
 801298c:	4620      	mov	r0, r4
 801298e:	f000 fdc7 	bl	8013520 <__multadd>
 8012992:	9b08      	ldr	r3, [sp, #32]
 8012994:	ee08 0a10 	vmov	s16, r0
 8012998:	2b00      	cmp	r3, #0
 801299a:	f000 81b1 	beq.w	8012d00 <_dtoa_r+0xbc0>
 801299e:	2300      	movs	r3, #0
 80129a0:	4639      	mov	r1, r7
 80129a2:	220a      	movs	r2, #10
 80129a4:	4620      	mov	r0, r4
 80129a6:	f000 fdbb 	bl	8013520 <__multadd>
 80129aa:	9b02      	ldr	r3, [sp, #8]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	4607      	mov	r7, r0
 80129b0:	f300 808e 	bgt.w	8012ad0 <_dtoa_r+0x990>
 80129b4:	9b06      	ldr	r3, [sp, #24]
 80129b6:	2b02      	cmp	r3, #2
 80129b8:	dc51      	bgt.n	8012a5e <_dtoa_r+0x91e>
 80129ba:	e089      	b.n	8012ad0 <_dtoa_r+0x990>
 80129bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80129be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80129c2:	e74b      	b.n	801285c <_dtoa_r+0x71c>
 80129c4:	9b03      	ldr	r3, [sp, #12]
 80129c6:	1e5e      	subs	r6, r3, #1
 80129c8:	9b07      	ldr	r3, [sp, #28]
 80129ca:	42b3      	cmp	r3, r6
 80129cc:	bfbf      	itttt	lt
 80129ce:	9b07      	ldrlt	r3, [sp, #28]
 80129d0:	9607      	strlt	r6, [sp, #28]
 80129d2:	1af2      	sublt	r2, r6, r3
 80129d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80129d6:	bfb6      	itet	lt
 80129d8:	189b      	addlt	r3, r3, r2
 80129da:	1b9e      	subge	r6, r3, r6
 80129dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80129de:	9b03      	ldr	r3, [sp, #12]
 80129e0:	bfb8      	it	lt
 80129e2:	2600      	movlt	r6, #0
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	bfb7      	itett	lt
 80129e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80129ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80129f0:	1a9d      	sublt	r5, r3, r2
 80129f2:	2300      	movlt	r3, #0
 80129f4:	e734      	b.n	8012860 <_dtoa_r+0x720>
 80129f6:	9e07      	ldr	r6, [sp, #28]
 80129f8:	9d04      	ldr	r5, [sp, #16]
 80129fa:	9f08      	ldr	r7, [sp, #32]
 80129fc:	e73b      	b.n	8012876 <_dtoa_r+0x736>
 80129fe:	9a07      	ldr	r2, [sp, #28]
 8012a00:	e767      	b.n	80128d2 <_dtoa_r+0x792>
 8012a02:	9b06      	ldr	r3, [sp, #24]
 8012a04:	2b01      	cmp	r3, #1
 8012a06:	dc18      	bgt.n	8012a3a <_dtoa_r+0x8fa>
 8012a08:	f1ba 0f00 	cmp.w	sl, #0
 8012a0c:	d115      	bne.n	8012a3a <_dtoa_r+0x8fa>
 8012a0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012a12:	b993      	cbnz	r3, 8012a3a <_dtoa_r+0x8fa>
 8012a14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012a18:	0d1b      	lsrs	r3, r3, #20
 8012a1a:	051b      	lsls	r3, r3, #20
 8012a1c:	b183      	cbz	r3, 8012a40 <_dtoa_r+0x900>
 8012a1e:	9b04      	ldr	r3, [sp, #16]
 8012a20:	3301      	adds	r3, #1
 8012a22:	9304      	str	r3, [sp, #16]
 8012a24:	9b05      	ldr	r3, [sp, #20]
 8012a26:	3301      	adds	r3, #1
 8012a28:	9305      	str	r3, [sp, #20]
 8012a2a:	f04f 0801 	mov.w	r8, #1
 8012a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	f47f af6a 	bne.w	801290a <_dtoa_r+0x7ca>
 8012a36:	2001      	movs	r0, #1
 8012a38:	e76f      	b.n	801291a <_dtoa_r+0x7da>
 8012a3a:	f04f 0800 	mov.w	r8, #0
 8012a3e:	e7f6      	b.n	8012a2e <_dtoa_r+0x8ee>
 8012a40:	4698      	mov	r8, r3
 8012a42:	e7f4      	b.n	8012a2e <_dtoa_r+0x8ee>
 8012a44:	f43f af7d 	beq.w	8012942 <_dtoa_r+0x802>
 8012a48:	4618      	mov	r0, r3
 8012a4a:	301c      	adds	r0, #28
 8012a4c:	e772      	b.n	8012934 <_dtoa_r+0x7f4>
 8012a4e:	9b03      	ldr	r3, [sp, #12]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	dc37      	bgt.n	8012ac4 <_dtoa_r+0x984>
 8012a54:	9b06      	ldr	r3, [sp, #24]
 8012a56:	2b02      	cmp	r3, #2
 8012a58:	dd34      	ble.n	8012ac4 <_dtoa_r+0x984>
 8012a5a:	9b03      	ldr	r3, [sp, #12]
 8012a5c:	9302      	str	r3, [sp, #8]
 8012a5e:	9b02      	ldr	r3, [sp, #8]
 8012a60:	b96b      	cbnz	r3, 8012a7e <_dtoa_r+0x93e>
 8012a62:	4631      	mov	r1, r6
 8012a64:	2205      	movs	r2, #5
 8012a66:	4620      	mov	r0, r4
 8012a68:	f000 fd5a 	bl	8013520 <__multadd>
 8012a6c:	4601      	mov	r1, r0
 8012a6e:	4606      	mov	r6, r0
 8012a70:	ee18 0a10 	vmov	r0, s16
 8012a74:	f000 ffbe 	bl	80139f4 <__mcmp>
 8012a78:	2800      	cmp	r0, #0
 8012a7a:	f73f adbb 	bgt.w	80125f4 <_dtoa_r+0x4b4>
 8012a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a80:	9d01      	ldr	r5, [sp, #4]
 8012a82:	43db      	mvns	r3, r3
 8012a84:	9300      	str	r3, [sp, #0]
 8012a86:	f04f 0800 	mov.w	r8, #0
 8012a8a:	4631      	mov	r1, r6
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	f000 fd25 	bl	80134dc <_Bfree>
 8012a92:	2f00      	cmp	r7, #0
 8012a94:	f43f aea4 	beq.w	80127e0 <_dtoa_r+0x6a0>
 8012a98:	f1b8 0f00 	cmp.w	r8, #0
 8012a9c:	d005      	beq.n	8012aaa <_dtoa_r+0x96a>
 8012a9e:	45b8      	cmp	r8, r7
 8012aa0:	d003      	beq.n	8012aaa <_dtoa_r+0x96a>
 8012aa2:	4641      	mov	r1, r8
 8012aa4:	4620      	mov	r0, r4
 8012aa6:	f000 fd19 	bl	80134dc <_Bfree>
 8012aaa:	4639      	mov	r1, r7
 8012aac:	4620      	mov	r0, r4
 8012aae:	f000 fd15 	bl	80134dc <_Bfree>
 8012ab2:	e695      	b.n	80127e0 <_dtoa_r+0x6a0>
 8012ab4:	2600      	movs	r6, #0
 8012ab6:	4637      	mov	r7, r6
 8012ab8:	e7e1      	b.n	8012a7e <_dtoa_r+0x93e>
 8012aba:	9700      	str	r7, [sp, #0]
 8012abc:	4637      	mov	r7, r6
 8012abe:	e599      	b.n	80125f4 <_dtoa_r+0x4b4>
 8012ac0:	40240000 	.word	0x40240000
 8012ac4:	9b08      	ldr	r3, [sp, #32]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	f000 80ca 	beq.w	8012c60 <_dtoa_r+0xb20>
 8012acc:	9b03      	ldr	r3, [sp, #12]
 8012ace:	9302      	str	r3, [sp, #8]
 8012ad0:	2d00      	cmp	r5, #0
 8012ad2:	dd05      	ble.n	8012ae0 <_dtoa_r+0x9a0>
 8012ad4:	4639      	mov	r1, r7
 8012ad6:	462a      	mov	r2, r5
 8012ad8:	4620      	mov	r0, r4
 8012ada:	f000 ff1b 	bl	8013914 <__lshift>
 8012ade:	4607      	mov	r7, r0
 8012ae0:	f1b8 0f00 	cmp.w	r8, #0
 8012ae4:	d05b      	beq.n	8012b9e <_dtoa_r+0xa5e>
 8012ae6:	6879      	ldr	r1, [r7, #4]
 8012ae8:	4620      	mov	r0, r4
 8012aea:	f000 fcb7 	bl	801345c <_Balloc>
 8012aee:	4605      	mov	r5, r0
 8012af0:	b928      	cbnz	r0, 8012afe <_dtoa_r+0x9be>
 8012af2:	4b87      	ldr	r3, [pc, #540]	; (8012d10 <_dtoa_r+0xbd0>)
 8012af4:	4602      	mov	r2, r0
 8012af6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012afa:	f7ff bb3b 	b.w	8012174 <_dtoa_r+0x34>
 8012afe:	693a      	ldr	r2, [r7, #16]
 8012b00:	3202      	adds	r2, #2
 8012b02:	0092      	lsls	r2, r2, #2
 8012b04:	f107 010c 	add.w	r1, r7, #12
 8012b08:	300c      	adds	r0, #12
 8012b0a:	f7fd fc77 	bl	80103fc <memcpy>
 8012b0e:	2201      	movs	r2, #1
 8012b10:	4629      	mov	r1, r5
 8012b12:	4620      	mov	r0, r4
 8012b14:	f000 fefe 	bl	8013914 <__lshift>
 8012b18:	9b01      	ldr	r3, [sp, #4]
 8012b1a:	f103 0901 	add.w	r9, r3, #1
 8012b1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012b22:	4413      	add	r3, r2
 8012b24:	9305      	str	r3, [sp, #20]
 8012b26:	f00a 0301 	and.w	r3, sl, #1
 8012b2a:	46b8      	mov	r8, r7
 8012b2c:	9304      	str	r3, [sp, #16]
 8012b2e:	4607      	mov	r7, r0
 8012b30:	4631      	mov	r1, r6
 8012b32:	ee18 0a10 	vmov	r0, s16
 8012b36:	f7ff fa75 	bl	8012024 <quorem>
 8012b3a:	4641      	mov	r1, r8
 8012b3c:	9002      	str	r0, [sp, #8]
 8012b3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012b42:	ee18 0a10 	vmov	r0, s16
 8012b46:	f000 ff55 	bl	80139f4 <__mcmp>
 8012b4a:	463a      	mov	r2, r7
 8012b4c:	9003      	str	r0, [sp, #12]
 8012b4e:	4631      	mov	r1, r6
 8012b50:	4620      	mov	r0, r4
 8012b52:	f000 ff6b 	bl	8013a2c <__mdiff>
 8012b56:	68c2      	ldr	r2, [r0, #12]
 8012b58:	f109 3bff 	add.w	fp, r9, #4294967295
 8012b5c:	4605      	mov	r5, r0
 8012b5e:	bb02      	cbnz	r2, 8012ba2 <_dtoa_r+0xa62>
 8012b60:	4601      	mov	r1, r0
 8012b62:	ee18 0a10 	vmov	r0, s16
 8012b66:	f000 ff45 	bl	80139f4 <__mcmp>
 8012b6a:	4602      	mov	r2, r0
 8012b6c:	4629      	mov	r1, r5
 8012b6e:	4620      	mov	r0, r4
 8012b70:	9207      	str	r2, [sp, #28]
 8012b72:	f000 fcb3 	bl	80134dc <_Bfree>
 8012b76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012b7a:	ea43 0102 	orr.w	r1, r3, r2
 8012b7e:	9b04      	ldr	r3, [sp, #16]
 8012b80:	430b      	orrs	r3, r1
 8012b82:	464d      	mov	r5, r9
 8012b84:	d10f      	bne.n	8012ba6 <_dtoa_r+0xa66>
 8012b86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012b8a:	d02a      	beq.n	8012be2 <_dtoa_r+0xaa2>
 8012b8c:	9b03      	ldr	r3, [sp, #12]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	dd02      	ble.n	8012b98 <_dtoa_r+0xa58>
 8012b92:	9b02      	ldr	r3, [sp, #8]
 8012b94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012b98:	f88b a000 	strb.w	sl, [fp]
 8012b9c:	e775      	b.n	8012a8a <_dtoa_r+0x94a>
 8012b9e:	4638      	mov	r0, r7
 8012ba0:	e7ba      	b.n	8012b18 <_dtoa_r+0x9d8>
 8012ba2:	2201      	movs	r2, #1
 8012ba4:	e7e2      	b.n	8012b6c <_dtoa_r+0xa2c>
 8012ba6:	9b03      	ldr	r3, [sp, #12]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	db04      	blt.n	8012bb6 <_dtoa_r+0xa76>
 8012bac:	9906      	ldr	r1, [sp, #24]
 8012bae:	430b      	orrs	r3, r1
 8012bb0:	9904      	ldr	r1, [sp, #16]
 8012bb2:	430b      	orrs	r3, r1
 8012bb4:	d122      	bne.n	8012bfc <_dtoa_r+0xabc>
 8012bb6:	2a00      	cmp	r2, #0
 8012bb8:	ddee      	ble.n	8012b98 <_dtoa_r+0xa58>
 8012bba:	ee18 1a10 	vmov	r1, s16
 8012bbe:	2201      	movs	r2, #1
 8012bc0:	4620      	mov	r0, r4
 8012bc2:	f000 fea7 	bl	8013914 <__lshift>
 8012bc6:	4631      	mov	r1, r6
 8012bc8:	ee08 0a10 	vmov	s16, r0
 8012bcc:	f000 ff12 	bl	80139f4 <__mcmp>
 8012bd0:	2800      	cmp	r0, #0
 8012bd2:	dc03      	bgt.n	8012bdc <_dtoa_r+0xa9c>
 8012bd4:	d1e0      	bne.n	8012b98 <_dtoa_r+0xa58>
 8012bd6:	f01a 0f01 	tst.w	sl, #1
 8012bda:	d0dd      	beq.n	8012b98 <_dtoa_r+0xa58>
 8012bdc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012be0:	d1d7      	bne.n	8012b92 <_dtoa_r+0xa52>
 8012be2:	2339      	movs	r3, #57	; 0x39
 8012be4:	f88b 3000 	strb.w	r3, [fp]
 8012be8:	462b      	mov	r3, r5
 8012bea:	461d      	mov	r5, r3
 8012bec:	3b01      	subs	r3, #1
 8012bee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012bf2:	2a39      	cmp	r2, #57	; 0x39
 8012bf4:	d071      	beq.n	8012cda <_dtoa_r+0xb9a>
 8012bf6:	3201      	adds	r2, #1
 8012bf8:	701a      	strb	r2, [r3, #0]
 8012bfa:	e746      	b.n	8012a8a <_dtoa_r+0x94a>
 8012bfc:	2a00      	cmp	r2, #0
 8012bfe:	dd07      	ble.n	8012c10 <_dtoa_r+0xad0>
 8012c00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012c04:	d0ed      	beq.n	8012be2 <_dtoa_r+0xaa2>
 8012c06:	f10a 0301 	add.w	r3, sl, #1
 8012c0a:	f88b 3000 	strb.w	r3, [fp]
 8012c0e:	e73c      	b.n	8012a8a <_dtoa_r+0x94a>
 8012c10:	9b05      	ldr	r3, [sp, #20]
 8012c12:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012c16:	4599      	cmp	r9, r3
 8012c18:	d047      	beq.n	8012caa <_dtoa_r+0xb6a>
 8012c1a:	ee18 1a10 	vmov	r1, s16
 8012c1e:	2300      	movs	r3, #0
 8012c20:	220a      	movs	r2, #10
 8012c22:	4620      	mov	r0, r4
 8012c24:	f000 fc7c 	bl	8013520 <__multadd>
 8012c28:	45b8      	cmp	r8, r7
 8012c2a:	ee08 0a10 	vmov	s16, r0
 8012c2e:	f04f 0300 	mov.w	r3, #0
 8012c32:	f04f 020a 	mov.w	r2, #10
 8012c36:	4641      	mov	r1, r8
 8012c38:	4620      	mov	r0, r4
 8012c3a:	d106      	bne.n	8012c4a <_dtoa_r+0xb0a>
 8012c3c:	f000 fc70 	bl	8013520 <__multadd>
 8012c40:	4680      	mov	r8, r0
 8012c42:	4607      	mov	r7, r0
 8012c44:	f109 0901 	add.w	r9, r9, #1
 8012c48:	e772      	b.n	8012b30 <_dtoa_r+0x9f0>
 8012c4a:	f000 fc69 	bl	8013520 <__multadd>
 8012c4e:	4639      	mov	r1, r7
 8012c50:	4680      	mov	r8, r0
 8012c52:	2300      	movs	r3, #0
 8012c54:	220a      	movs	r2, #10
 8012c56:	4620      	mov	r0, r4
 8012c58:	f000 fc62 	bl	8013520 <__multadd>
 8012c5c:	4607      	mov	r7, r0
 8012c5e:	e7f1      	b.n	8012c44 <_dtoa_r+0xb04>
 8012c60:	9b03      	ldr	r3, [sp, #12]
 8012c62:	9302      	str	r3, [sp, #8]
 8012c64:	9d01      	ldr	r5, [sp, #4]
 8012c66:	ee18 0a10 	vmov	r0, s16
 8012c6a:	4631      	mov	r1, r6
 8012c6c:	f7ff f9da 	bl	8012024 <quorem>
 8012c70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012c74:	9b01      	ldr	r3, [sp, #4]
 8012c76:	f805 ab01 	strb.w	sl, [r5], #1
 8012c7a:	1aea      	subs	r2, r5, r3
 8012c7c:	9b02      	ldr	r3, [sp, #8]
 8012c7e:	4293      	cmp	r3, r2
 8012c80:	dd09      	ble.n	8012c96 <_dtoa_r+0xb56>
 8012c82:	ee18 1a10 	vmov	r1, s16
 8012c86:	2300      	movs	r3, #0
 8012c88:	220a      	movs	r2, #10
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	f000 fc48 	bl	8013520 <__multadd>
 8012c90:	ee08 0a10 	vmov	s16, r0
 8012c94:	e7e7      	b.n	8012c66 <_dtoa_r+0xb26>
 8012c96:	9b02      	ldr	r3, [sp, #8]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	bfc8      	it	gt
 8012c9c:	461d      	movgt	r5, r3
 8012c9e:	9b01      	ldr	r3, [sp, #4]
 8012ca0:	bfd8      	it	le
 8012ca2:	2501      	movle	r5, #1
 8012ca4:	441d      	add	r5, r3
 8012ca6:	f04f 0800 	mov.w	r8, #0
 8012caa:	ee18 1a10 	vmov	r1, s16
 8012cae:	2201      	movs	r2, #1
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	f000 fe2f 	bl	8013914 <__lshift>
 8012cb6:	4631      	mov	r1, r6
 8012cb8:	ee08 0a10 	vmov	s16, r0
 8012cbc:	f000 fe9a 	bl	80139f4 <__mcmp>
 8012cc0:	2800      	cmp	r0, #0
 8012cc2:	dc91      	bgt.n	8012be8 <_dtoa_r+0xaa8>
 8012cc4:	d102      	bne.n	8012ccc <_dtoa_r+0xb8c>
 8012cc6:	f01a 0f01 	tst.w	sl, #1
 8012cca:	d18d      	bne.n	8012be8 <_dtoa_r+0xaa8>
 8012ccc:	462b      	mov	r3, r5
 8012cce:	461d      	mov	r5, r3
 8012cd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012cd4:	2a30      	cmp	r2, #48	; 0x30
 8012cd6:	d0fa      	beq.n	8012cce <_dtoa_r+0xb8e>
 8012cd8:	e6d7      	b.n	8012a8a <_dtoa_r+0x94a>
 8012cda:	9a01      	ldr	r2, [sp, #4]
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	d184      	bne.n	8012bea <_dtoa_r+0xaaa>
 8012ce0:	9b00      	ldr	r3, [sp, #0]
 8012ce2:	3301      	adds	r3, #1
 8012ce4:	9300      	str	r3, [sp, #0]
 8012ce6:	2331      	movs	r3, #49	; 0x31
 8012ce8:	7013      	strb	r3, [r2, #0]
 8012cea:	e6ce      	b.n	8012a8a <_dtoa_r+0x94a>
 8012cec:	4b09      	ldr	r3, [pc, #36]	; (8012d14 <_dtoa_r+0xbd4>)
 8012cee:	f7ff ba95 	b.w	801221c <_dtoa_r+0xdc>
 8012cf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	f47f aa6e 	bne.w	80121d6 <_dtoa_r+0x96>
 8012cfa:	4b07      	ldr	r3, [pc, #28]	; (8012d18 <_dtoa_r+0xbd8>)
 8012cfc:	f7ff ba8e 	b.w	801221c <_dtoa_r+0xdc>
 8012d00:	9b02      	ldr	r3, [sp, #8]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	dcae      	bgt.n	8012c64 <_dtoa_r+0xb24>
 8012d06:	9b06      	ldr	r3, [sp, #24]
 8012d08:	2b02      	cmp	r3, #2
 8012d0a:	f73f aea8 	bgt.w	8012a5e <_dtoa_r+0x91e>
 8012d0e:	e7a9      	b.n	8012c64 <_dtoa_r+0xb24>
 8012d10:	08015cf0 	.word	0x08015cf0
 8012d14:	08015ee9 	.word	0x08015ee9
 8012d18:	08015c71 	.word	0x08015c71

08012d1c <rshift>:
 8012d1c:	6903      	ldr	r3, [r0, #16]
 8012d1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012d22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d26:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012d2a:	f100 0414 	add.w	r4, r0, #20
 8012d2e:	dd45      	ble.n	8012dbc <rshift+0xa0>
 8012d30:	f011 011f 	ands.w	r1, r1, #31
 8012d34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012d38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012d3c:	d10c      	bne.n	8012d58 <rshift+0x3c>
 8012d3e:	f100 0710 	add.w	r7, r0, #16
 8012d42:	4629      	mov	r1, r5
 8012d44:	42b1      	cmp	r1, r6
 8012d46:	d334      	bcc.n	8012db2 <rshift+0x96>
 8012d48:	1a9b      	subs	r3, r3, r2
 8012d4a:	009b      	lsls	r3, r3, #2
 8012d4c:	1eea      	subs	r2, r5, #3
 8012d4e:	4296      	cmp	r6, r2
 8012d50:	bf38      	it	cc
 8012d52:	2300      	movcc	r3, #0
 8012d54:	4423      	add	r3, r4
 8012d56:	e015      	b.n	8012d84 <rshift+0x68>
 8012d58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012d5c:	f1c1 0820 	rsb	r8, r1, #32
 8012d60:	40cf      	lsrs	r7, r1
 8012d62:	f105 0e04 	add.w	lr, r5, #4
 8012d66:	46a1      	mov	r9, r4
 8012d68:	4576      	cmp	r6, lr
 8012d6a:	46f4      	mov	ip, lr
 8012d6c:	d815      	bhi.n	8012d9a <rshift+0x7e>
 8012d6e:	1a9a      	subs	r2, r3, r2
 8012d70:	0092      	lsls	r2, r2, #2
 8012d72:	3a04      	subs	r2, #4
 8012d74:	3501      	adds	r5, #1
 8012d76:	42ae      	cmp	r6, r5
 8012d78:	bf38      	it	cc
 8012d7a:	2200      	movcc	r2, #0
 8012d7c:	18a3      	adds	r3, r4, r2
 8012d7e:	50a7      	str	r7, [r4, r2]
 8012d80:	b107      	cbz	r7, 8012d84 <rshift+0x68>
 8012d82:	3304      	adds	r3, #4
 8012d84:	1b1a      	subs	r2, r3, r4
 8012d86:	42a3      	cmp	r3, r4
 8012d88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012d8c:	bf08      	it	eq
 8012d8e:	2300      	moveq	r3, #0
 8012d90:	6102      	str	r2, [r0, #16]
 8012d92:	bf08      	it	eq
 8012d94:	6143      	streq	r3, [r0, #20]
 8012d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d9a:	f8dc c000 	ldr.w	ip, [ip]
 8012d9e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012da2:	ea4c 0707 	orr.w	r7, ip, r7
 8012da6:	f849 7b04 	str.w	r7, [r9], #4
 8012daa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012dae:	40cf      	lsrs	r7, r1
 8012db0:	e7da      	b.n	8012d68 <rshift+0x4c>
 8012db2:	f851 cb04 	ldr.w	ip, [r1], #4
 8012db6:	f847 cf04 	str.w	ip, [r7, #4]!
 8012dba:	e7c3      	b.n	8012d44 <rshift+0x28>
 8012dbc:	4623      	mov	r3, r4
 8012dbe:	e7e1      	b.n	8012d84 <rshift+0x68>

08012dc0 <__hexdig_fun>:
 8012dc0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012dc4:	2b09      	cmp	r3, #9
 8012dc6:	d802      	bhi.n	8012dce <__hexdig_fun+0xe>
 8012dc8:	3820      	subs	r0, #32
 8012dca:	b2c0      	uxtb	r0, r0
 8012dcc:	4770      	bx	lr
 8012dce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012dd2:	2b05      	cmp	r3, #5
 8012dd4:	d801      	bhi.n	8012dda <__hexdig_fun+0x1a>
 8012dd6:	3847      	subs	r0, #71	; 0x47
 8012dd8:	e7f7      	b.n	8012dca <__hexdig_fun+0xa>
 8012dda:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012dde:	2b05      	cmp	r3, #5
 8012de0:	d801      	bhi.n	8012de6 <__hexdig_fun+0x26>
 8012de2:	3827      	subs	r0, #39	; 0x27
 8012de4:	e7f1      	b.n	8012dca <__hexdig_fun+0xa>
 8012de6:	2000      	movs	r0, #0
 8012de8:	4770      	bx	lr
	...

08012dec <__gethex>:
 8012dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012df0:	ed2d 8b02 	vpush	{d8}
 8012df4:	b089      	sub	sp, #36	; 0x24
 8012df6:	ee08 0a10 	vmov	s16, r0
 8012dfa:	9304      	str	r3, [sp, #16]
 8012dfc:	4bb4      	ldr	r3, [pc, #720]	; (80130d0 <__gethex+0x2e4>)
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	9301      	str	r3, [sp, #4]
 8012e02:	4618      	mov	r0, r3
 8012e04:	468b      	mov	fp, r1
 8012e06:	4690      	mov	r8, r2
 8012e08:	f7ed fa02 	bl	8000210 <strlen>
 8012e0c:	9b01      	ldr	r3, [sp, #4]
 8012e0e:	f8db 2000 	ldr.w	r2, [fp]
 8012e12:	4403      	add	r3, r0
 8012e14:	4682      	mov	sl, r0
 8012e16:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012e1a:	9305      	str	r3, [sp, #20]
 8012e1c:	1c93      	adds	r3, r2, #2
 8012e1e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012e22:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012e26:	32fe      	adds	r2, #254	; 0xfe
 8012e28:	18d1      	adds	r1, r2, r3
 8012e2a:	461f      	mov	r7, r3
 8012e2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012e30:	9100      	str	r1, [sp, #0]
 8012e32:	2830      	cmp	r0, #48	; 0x30
 8012e34:	d0f8      	beq.n	8012e28 <__gethex+0x3c>
 8012e36:	f7ff ffc3 	bl	8012dc0 <__hexdig_fun>
 8012e3a:	4604      	mov	r4, r0
 8012e3c:	2800      	cmp	r0, #0
 8012e3e:	d13a      	bne.n	8012eb6 <__gethex+0xca>
 8012e40:	9901      	ldr	r1, [sp, #4]
 8012e42:	4652      	mov	r2, sl
 8012e44:	4638      	mov	r0, r7
 8012e46:	f7fe fa08 	bl	801125a <strncmp>
 8012e4a:	4605      	mov	r5, r0
 8012e4c:	2800      	cmp	r0, #0
 8012e4e:	d168      	bne.n	8012f22 <__gethex+0x136>
 8012e50:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012e54:	eb07 060a 	add.w	r6, r7, sl
 8012e58:	f7ff ffb2 	bl	8012dc0 <__hexdig_fun>
 8012e5c:	2800      	cmp	r0, #0
 8012e5e:	d062      	beq.n	8012f26 <__gethex+0x13a>
 8012e60:	4633      	mov	r3, r6
 8012e62:	7818      	ldrb	r0, [r3, #0]
 8012e64:	2830      	cmp	r0, #48	; 0x30
 8012e66:	461f      	mov	r7, r3
 8012e68:	f103 0301 	add.w	r3, r3, #1
 8012e6c:	d0f9      	beq.n	8012e62 <__gethex+0x76>
 8012e6e:	f7ff ffa7 	bl	8012dc0 <__hexdig_fun>
 8012e72:	2301      	movs	r3, #1
 8012e74:	fab0 f480 	clz	r4, r0
 8012e78:	0964      	lsrs	r4, r4, #5
 8012e7a:	4635      	mov	r5, r6
 8012e7c:	9300      	str	r3, [sp, #0]
 8012e7e:	463a      	mov	r2, r7
 8012e80:	4616      	mov	r6, r2
 8012e82:	3201      	adds	r2, #1
 8012e84:	7830      	ldrb	r0, [r6, #0]
 8012e86:	f7ff ff9b 	bl	8012dc0 <__hexdig_fun>
 8012e8a:	2800      	cmp	r0, #0
 8012e8c:	d1f8      	bne.n	8012e80 <__gethex+0x94>
 8012e8e:	9901      	ldr	r1, [sp, #4]
 8012e90:	4652      	mov	r2, sl
 8012e92:	4630      	mov	r0, r6
 8012e94:	f7fe f9e1 	bl	801125a <strncmp>
 8012e98:	b980      	cbnz	r0, 8012ebc <__gethex+0xd0>
 8012e9a:	b94d      	cbnz	r5, 8012eb0 <__gethex+0xc4>
 8012e9c:	eb06 050a 	add.w	r5, r6, sl
 8012ea0:	462a      	mov	r2, r5
 8012ea2:	4616      	mov	r6, r2
 8012ea4:	3201      	adds	r2, #1
 8012ea6:	7830      	ldrb	r0, [r6, #0]
 8012ea8:	f7ff ff8a 	bl	8012dc0 <__hexdig_fun>
 8012eac:	2800      	cmp	r0, #0
 8012eae:	d1f8      	bne.n	8012ea2 <__gethex+0xb6>
 8012eb0:	1bad      	subs	r5, r5, r6
 8012eb2:	00ad      	lsls	r5, r5, #2
 8012eb4:	e004      	b.n	8012ec0 <__gethex+0xd4>
 8012eb6:	2400      	movs	r4, #0
 8012eb8:	4625      	mov	r5, r4
 8012eba:	e7e0      	b.n	8012e7e <__gethex+0x92>
 8012ebc:	2d00      	cmp	r5, #0
 8012ebe:	d1f7      	bne.n	8012eb0 <__gethex+0xc4>
 8012ec0:	7833      	ldrb	r3, [r6, #0]
 8012ec2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012ec6:	2b50      	cmp	r3, #80	; 0x50
 8012ec8:	d13b      	bne.n	8012f42 <__gethex+0x156>
 8012eca:	7873      	ldrb	r3, [r6, #1]
 8012ecc:	2b2b      	cmp	r3, #43	; 0x2b
 8012ece:	d02c      	beq.n	8012f2a <__gethex+0x13e>
 8012ed0:	2b2d      	cmp	r3, #45	; 0x2d
 8012ed2:	d02e      	beq.n	8012f32 <__gethex+0x146>
 8012ed4:	1c71      	adds	r1, r6, #1
 8012ed6:	f04f 0900 	mov.w	r9, #0
 8012eda:	7808      	ldrb	r0, [r1, #0]
 8012edc:	f7ff ff70 	bl	8012dc0 <__hexdig_fun>
 8012ee0:	1e43      	subs	r3, r0, #1
 8012ee2:	b2db      	uxtb	r3, r3
 8012ee4:	2b18      	cmp	r3, #24
 8012ee6:	d82c      	bhi.n	8012f42 <__gethex+0x156>
 8012ee8:	f1a0 0210 	sub.w	r2, r0, #16
 8012eec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012ef0:	f7ff ff66 	bl	8012dc0 <__hexdig_fun>
 8012ef4:	1e43      	subs	r3, r0, #1
 8012ef6:	b2db      	uxtb	r3, r3
 8012ef8:	2b18      	cmp	r3, #24
 8012efa:	d91d      	bls.n	8012f38 <__gethex+0x14c>
 8012efc:	f1b9 0f00 	cmp.w	r9, #0
 8012f00:	d000      	beq.n	8012f04 <__gethex+0x118>
 8012f02:	4252      	negs	r2, r2
 8012f04:	4415      	add	r5, r2
 8012f06:	f8cb 1000 	str.w	r1, [fp]
 8012f0a:	b1e4      	cbz	r4, 8012f46 <__gethex+0x15a>
 8012f0c:	9b00      	ldr	r3, [sp, #0]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	bf14      	ite	ne
 8012f12:	2700      	movne	r7, #0
 8012f14:	2706      	moveq	r7, #6
 8012f16:	4638      	mov	r0, r7
 8012f18:	b009      	add	sp, #36	; 0x24
 8012f1a:	ecbd 8b02 	vpop	{d8}
 8012f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f22:	463e      	mov	r6, r7
 8012f24:	4625      	mov	r5, r4
 8012f26:	2401      	movs	r4, #1
 8012f28:	e7ca      	b.n	8012ec0 <__gethex+0xd4>
 8012f2a:	f04f 0900 	mov.w	r9, #0
 8012f2e:	1cb1      	adds	r1, r6, #2
 8012f30:	e7d3      	b.n	8012eda <__gethex+0xee>
 8012f32:	f04f 0901 	mov.w	r9, #1
 8012f36:	e7fa      	b.n	8012f2e <__gethex+0x142>
 8012f38:	230a      	movs	r3, #10
 8012f3a:	fb03 0202 	mla	r2, r3, r2, r0
 8012f3e:	3a10      	subs	r2, #16
 8012f40:	e7d4      	b.n	8012eec <__gethex+0x100>
 8012f42:	4631      	mov	r1, r6
 8012f44:	e7df      	b.n	8012f06 <__gethex+0x11a>
 8012f46:	1bf3      	subs	r3, r6, r7
 8012f48:	3b01      	subs	r3, #1
 8012f4a:	4621      	mov	r1, r4
 8012f4c:	2b07      	cmp	r3, #7
 8012f4e:	dc0b      	bgt.n	8012f68 <__gethex+0x17c>
 8012f50:	ee18 0a10 	vmov	r0, s16
 8012f54:	f000 fa82 	bl	801345c <_Balloc>
 8012f58:	4604      	mov	r4, r0
 8012f5a:	b940      	cbnz	r0, 8012f6e <__gethex+0x182>
 8012f5c:	4b5d      	ldr	r3, [pc, #372]	; (80130d4 <__gethex+0x2e8>)
 8012f5e:	4602      	mov	r2, r0
 8012f60:	21de      	movs	r1, #222	; 0xde
 8012f62:	485d      	ldr	r0, [pc, #372]	; (80130d8 <__gethex+0x2ec>)
 8012f64:	f001 fdd0 	bl	8014b08 <__assert_func>
 8012f68:	3101      	adds	r1, #1
 8012f6a:	105b      	asrs	r3, r3, #1
 8012f6c:	e7ee      	b.n	8012f4c <__gethex+0x160>
 8012f6e:	f100 0914 	add.w	r9, r0, #20
 8012f72:	f04f 0b00 	mov.w	fp, #0
 8012f76:	f1ca 0301 	rsb	r3, sl, #1
 8012f7a:	f8cd 9008 	str.w	r9, [sp, #8]
 8012f7e:	f8cd b000 	str.w	fp, [sp]
 8012f82:	9306      	str	r3, [sp, #24]
 8012f84:	42b7      	cmp	r7, r6
 8012f86:	d340      	bcc.n	801300a <__gethex+0x21e>
 8012f88:	9802      	ldr	r0, [sp, #8]
 8012f8a:	9b00      	ldr	r3, [sp, #0]
 8012f8c:	f840 3b04 	str.w	r3, [r0], #4
 8012f90:	eba0 0009 	sub.w	r0, r0, r9
 8012f94:	1080      	asrs	r0, r0, #2
 8012f96:	0146      	lsls	r6, r0, #5
 8012f98:	6120      	str	r0, [r4, #16]
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f000 fb50 	bl	8013640 <__hi0bits>
 8012fa0:	1a30      	subs	r0, r6, r0
 8012fa2:	f8d8 6000 	ldr.w	r6, [r8]
 8012fa6:	42b0      	cmp	r0, r6
 8012fa8:	dd63      	ble.n	8013072 <__gethex+0x286>
 8012faa:	1b87      	subs	r7, r0, r6
 8012fac:	4639      	mov	r1, r7
 8012fae:	4620      	mov	r0, r4
 8012fb0:	f000 fef4 	bl	8013d9c <__any_on>
 8012fb4:	4682      	mov	sl, r0
 8012fb6:	b1a8      	cbz	r0, 8012fe4 <__gethex+0x1f8>
 8012fb8:	1e7b      	subs	r3, r7, #1
 8012fba:	1159      	asrs	r1, r3, #5
 8012fbc:	f003 021f 	and.w	r2, r3, #31
 8012fc0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012fc4:	f04f 0a01 	mov.w	sl, #1
 8012fc8:	fa0a f202 	lsl.w	r2, sl, r2
 8012fcc:	420a      	tst	r2, r1
 8012fce:	d009      	beq.n	8012fe4 <__gethex+0x1f8>
 8012fd0:	4553      	cmp	r3, sl
 8012fd2:	dd05      	ble.n	8012fe0 <__gethex+0x1f4>
 8012fd4:	1eb9      	subs	r1, r7, #2
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	f000 fee0 	bl	8013d9c <__any_on>
 8012fdc:	2800      	cmp	r0, #0
 8012fde:	d145      	bne.n	801306c <__gethex+0x280>
 8012fe0:	f04f 0a02 	mov.w	sl, #2
 8012fe4:	4639      	mov	r1, r7
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	f7ff fe98 	bl	8012d1c <rshift>
 8012fec:	443d      	add	r5, r7
 8012fee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012ff2:	42ab      	cmp	r3, r5
 8012ff4:	da4c      	bge.n	8013090 <__gethex+0x2a4>
 8012ff6:	ee18 0a10 	vmov	r0, s16
 8012ffa:	4621      	mov	r1, r4
 8012ffc:	f000 fa6e 	bl	80134dc <_Bfree>
 8013000:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013002:	2300      	movs	r3, #0
 8013004:	6013      	str	r3, [r2, #0]
 8013006:	27a3      	movs	r7, #163	; 0xa3
 8013008:	e785      	b.n	8012f16 <__gethex+0x12a>
 801300a:	1e73      	subs	r3, r6, #1
 801300c:	9a05      	ldr	r2, [sp, #20]
 801300e:	9303      	str	r3, [sp, #12]
 8013010:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013014:	4293      	cmp	r3, r2
 8013016:	d019      	beq.n	801304c <__gethex+0x260>
 8013018:	f1bb 0f20 	cmp.w	fp, #32
 801301c:	d107      	bne.n	801302e <__gethex+0x242>
 801301e:	9b02      	ldr	r3, [sp, #8]
 8013020:	9a00      	ldr	r2, [sp, #0]
 8013022:	f843 2b04 	str.w	r2, [r3], #4
 8013026:	9302      	str	r3, [sp, #8]
 8013028:	2300      	movs	r3, #0
 801302a:	9300      	str	r3, [sp, #0]
 801302c:	469b      	mov	fp, r3
 801302e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013032:	f7ff fec5 	bl	8012dc0 <__hexdig_fun>
 8013036:	9b00      	ldr	r3, [sp, #0]
 8013038:	f000 000f 	and.w	r0, r0, #15
 801303c:	fa00 f00b 	lsl.w	r0, r0, fp
 8013040:	4303      	orrs	r3, r0
 8013042:	9300      	str	r3, [sp, #0]
 8013044:	f10b 0b04 	add.w	fp, fp, #4
 8013048:	9b03      	ldr	r3, [sp, #12]
 801304a:	e00d      	b.n	8013068 <__gethex+0x27c>
 801304c:	9b03      	ldr	r3, [sp, #12]
 801304e:	9a06      	ldr	r2, [sp, #24]
 8013050:	4413      	add	r3, r2
 8013052:	42bb      	cmp	r3, r7
 8013054:	d3e0      	bcc.n	8013018 <__gethex+0x22c>
 8013056:	4618      	mov	r0, r3
 8013058:	9901      	ldr	r1, [sp, #4]
 801305a:	9307      	str	r3, [sp, #28]
 801305c:	4652      	mov	r2, sl
 801305e:	f7fe f8fc 	bl	801125a <strncmp>
 8013062:	9b07      	ldr	r3, [sp, #28]
 8013064:	2800      	cmp	r0, #0
 8013066:	d1d7      	bne.n	8013018 <__gethex+0x22c>
 8013068:	461e      	mov	r6, r3
 801306a:	e78b      	b.n	8012f84 <__gethex+0x198>
 801306c:	f04f 0a03 	mov.w	sl, #3
 8013070:	e7b8      	b.n	8012fe4 <__gethex+0x1f8>
 8013072:	da0a      	bge.n	801308a <__gethex+0x29e>
 8013074:	1a37      	subs	r7, r6, r0
 8013076:	4621      	mov	r1, r4
 8013078:	ee18 0a10 	vmov	r0, s16
 801307c:	463a      	mov	r2, r7
 801307e:	f000 fc49 	bl	8013914 <__lshift>
 8013082:	1bed      	subs	r5, r5, r7
 8013084:	4604      	mov	r4, r0
 8013086:	f100 0914 	add.w	r9, r0, #20
 801308a:	f04f 0a00 	mov.w	sl, #0
 801308e:	e7ae      	b.n	8012fee <__gethex+0x202>
 8013090:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013094:	42a8      	cmp	r0, r5
 8013096:	dd72      	ble.n	801317e <__gethex+0x392>
 8013098:	1b45      	subs	r5, r0, r5
 801309a:	42ae      	cmp	r6, r5
 801309c:	dc36      	bgt.n	801310c <__gethex+0x320>
 801309e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80130a2:	2b02      	cmp	r3, #2
 80130a4:	d02a      	beq.n	80130fc <__gethex+0x310>
 80130a6:	2b03      	cmp	r3, #3
 80130a8:	d02c      	beq.n	8013104 <__gethex+0x318>
 80130aa:	2b01      	cmp	r3, #1
 80130ac:	d11c      	bne.n	80130e8 <__gethex+0x2fc>
 80130ae:	42ae      	cmp	r6, r5
 80130b0:	d11a      	bne.n	80130e8 <__gethex+0x2fc>
 80130b2:	2e01      	cmp	r6, #1
 80130b4:	d112      	bne.n	80130dc <__gethex+0x2f0>
 80130b6:	9a04      	ldr	r2, [sp, #16]
 80130b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80130bc:	6013      	str	r3, [r2, #0]
 80130be:	2301      	movs	r3, #1
 80130c0:	6123      	str	r3, [r4, #16]
 80130c2:	f8c9 3000 	str.w	r3, [r9]
 80130c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80130c8:	2762      	movs	r7, #98	; 0x62
 80130ca:	601c      	str	r4, [r3, #0]
 80130cc:	e723      	b.n	8012f16 <__gethex+0x12a>
 80130ce:	bf00      	nop
 80130d0:	08015d68 	.word	0x08015d68
 80130d4:	08015cf0 	.word	0x08015cf0
 80130d8:	08015d01 	.word	0x08015d01
 80130dc:	1e71      	subs	r1, r6, #1
 80130de:	4620      	mov	r0, r4
 80130e0:	f000 fe5c 	bl	8013d9c <__any_on>
 80130e4:	2800      	cmp	r0, #0
 80130e6:	d1e6      	bne.n	80130b6 <__gethex+0x2ca>
 80130e8:	ee18 0a10 	vmov	r0, s16
 80130ec:	4621      	mov	r1, r4
 80130ee:	f000 f9f5 	bl	80134dc <_Bfree>
 80130f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80130f4:	2300      	movs	r3, #0
 80130f6:	6013      	str	r3, [r2, #0]
 80130f8:	2750      	movs	r7, #80	; 0x50
 80130fa:	e70c      	b.n	8012f16 <__gethex+0x12a>
 80130fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d1f2      	bne.n	80130e8 <__gethex+0x2fc>
 8013102:	e7d8      	b.n	80130b6 <__gethex+0x2ca>
 8013104:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013106:	2b00      	cmp	r3, #0
 8013108:	d1d5      	bne.n	80130b6 <__gethex+0x2ca>
 801310a:	e7ed      	b.n	80130e8 <__gethex+0x2fc>
 801310c:	1e6f      	subs	r7, r5, #1
 801310e:	f1ba 0f00 	cmp.w	sl, #0
 8013112:	d131      	bne.n	8013178 <__gethex+0x38c>
 8013114:	b127      	cbz	r7, 8013120 <__gethex+0x334>
 8013116:	4639      	mov	r1, r7
 8013118:	4620      	mov	r0, r4
 801311a:	f000 fe3f 	bl	8013d9c <__any_on>
 801311e:	4682      	mov	sl, r0
 8013120:	117b      	asrs	r3, r7, #5
 8013122:	2101      	movs	r1, #1
 8013124:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013128:	f007 071f 	and.w	r7, r7, #31
 801312c:	fa01 f707 	lsl.w	r7, r1, r7
 8013130:	421f      	tst	r7, r3
 8013132:	4629      	mov	r1, r5
 8013134:	4620      	mov	r0, r4
 8013136:	bf18      	it	ne
 8013138:	f04a 0a02 	orrne.w	sl, sl, #2
 801313c:	1b76      	subs	r6, r6, r5
 801313e:	f7ff fded 	bl	8012d1c <rshift>
 8013142:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013146:	2702      	movs	r7, #2
 8013148:	f1ba 0f00 	cmp.w	sl, #0
 801314c:	d048      	beq.n	80131e0 <__gethex+0x3f4>
 801314e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013152:	2b02      	cmp	r3, #2
 8013154:	d015      	beq.n	8013182 <__gethex+0x396>
 8013156:	2b03      	cmp	r3, #3
 8013158:	d017      	beq.n	801318a <__gethex+0x39e>
 801315a:	2b01      	cmp	r3, #1
 801315c:	d109      	bne.n	8013172 <__gethex+0x386>
 801315e:	f01a 0f02 	tst.w	sl, #2
 8013162:	d006      	beq.n	8013172 <__gethex+0x386>
 8013164:	f8d9 0000 	ldr.w	r0, [r9]
 8013168:	ea4a 0a00 	orr.w	sl, sl, r0
 801316c:	f01a 0f01 	tst.w	sl, #1
 8013170:	d10e      	bne.n	8013190 <__gethex+0x3a4>
 8013172:	f047 0710 	orr.w	r7, r7, #16
 8013176:	e033      	b.n	80131e0 <__gethex+0x3f4>
 8013178:	f04f 0a01 	mov.w	sl, #1
 801317c:	e7d0      	b.n	8013120 <__gethex+0x334>
 801317e:	2701      	movs	r7, #1
 8013180:	e7e2      	b.n	8013148 <__gethex+0x35c>
 8013182:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013184:	f1c3 0301 	rsb	r3, r3, #1
 8013188:	9315      	str	r3, [sp, #84]	; 0x54
 801318a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801318c:	2b00      	cmp	r3, #0
 801318e:	d0f0      	beq.n	8013172 <__gethex+0x386>
 8013190:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013194:	f104 0314 	add.w	r3, r4, #20
 8013198:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801319c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80131a0:	f04f 0c00 	mov.w	ip, #0
 80131a4:	4618      	mov	r0, r3
 80131a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80131aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 80131ae:	d01c      	beq.n	80131ea <__gethex+0x3fe>
 80131b0:	3201      	adds	r2, #1
 80131b2:	6002      	str	r2, [r0, #0]
 80131b4:	2f02      	cmp	r7, #2
 80131b6:	f104 0314 	add.w	r3, r4, #20
 80131ba:	d13f      	bne.n	801323c <__gethex+0x450>
 80131bc:	f8d8 2000 	ldr.w	r2, [r8]
 80131c0:	3a01      	subs	r2, #1
 80131c2:	42b2      	cmp	r2, r6
 80131c4:	d10a      	bne.n	80131dc <__gethex+0x3f0>
 80131c6:	1171      	asrs	r1, r6, #5
 80131c8:	2201      	movs	r2, #1
 80131ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80131ce:	f006 061f 	and.w	r6, r6, #31
 80131d2:	fa02 f606 	lsl.w	r6, r2, r6
 80131d6:	421e      	tst	r6, r3
 80131d8:	bf18      	it	ne
 80131da:	4617      	movne	r7, r2
 80131dc:	f047 0720 	orr.w	r7, r7, #32
 80131e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80131e2:	601c      	str	r4, [r3, #0]
 80131e4:	9b04      	ldr	r3, [sp, #16]
 80131e6:	601d      	str	r5, [r3, #0]
 80131e8:	e695      	b.n	8012f16 <__gethex+0x12a>
 80131ea:	4299      	cmp	r1, r3
 80131ec:	f843 cc04 	str.w	ip, [r3, #-4]
 80131f0:	d8d8      	bhi.n	80131a4 <__gethex+0x3b8>
 80131f2:	68a3      	ldr	r3, [r4, #8]
 80131f4:	459b      	cmp	fp, r3
 80131f6:	db19      	blt.n	801322c <__gethex+0x440>
 80131f8:	6861      	ldr	r1, [r4, #4]
 80131fa:	ee18 0a10 	vmov	r0, s16
 80131fe:	3101      	adds	r1, #1
 8013200:	f000 f92c 	bl	801345c <_Balloc>
 8013204:	4681      	mov	r9, r0
 8013206:	b918      	cbnz	r0, 8013210 <__gethex+0x424>
 8013208:	4b1a      	ldr	r3, [pc, #104]	; (8013274 <__gethex+0x488>)
 801320a:	4602      	mov	r2, r0
 801320c:	2184      	movs	r1, #132	; 0x84
 801320e:	e6a8      	b.n	8012f62 <__gethex+0x176>
 8013210:	6922      	ldr	r2, [r4, #16]
 8013212:	3202      	adds	r2, #2
 8013214:	f104 010c 	add.w	r1, r4, #12
 8013218:	0092      	lsls	r2, r2, #2
 801321a:	300c      	adds	r0, #12
 801321c:	f7fd f8ee 	bl	80103fc <memcpy>
 8013220:	4621      	mov	r1, r4
 8013222:	ee18 0a10 	vmov	r0, s16
 8013226:	f000 f959 	bl	80134dc <_Bfree>
 801322a:	464c      	mov	r4, r9
 801322c:	6923      	ldr	r3, [r4, #16]
 801322e:	1c5a      	adds	r2, r3, #1
 8013230:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013234:	6122      	str	r2, [r4, #16]
 8013236:	2201      	movs	r2, #1
 8013238:	615a      	str	r2, [r3, #20]
 801323a:	e7bb      	b.n	80131b4 <__gethex+0x3c8>
 801323c:	6922      	ldr	r2, [r4, #16]
 801323e:	455a      	cmp	r2, fp
 8013240:	dd0b      	ble.n	801325a <__gethex+0x46e>
 8013242:	2101      	movs	r1, #1
 8013244:	4620      	mov	r0, r4
 8013246:	f7ff fd69 	bl	8012d1c <rshift>
 801324a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801324e:	3501      	adds	r5, #1
 8013250:	42ab      	cmp	r3, r5
 8013252:	f6ff aed0 	blt.w	8012ff6 <__gethex+0x20a>
 8013256:	2701      	movs	r7, #1
 8013258:	e7c0      	b.n	80131dc <__gethex+0x3f0>
 801325a:	f016 061f 	ands.w	r6, r6, #31
 801325e:	d0fa      	beq.n	8013256 <__gethex+0x46a>
 8013260:	4453      	add	r3, sl
 8013262:	f1c6 0620 	rsb	r6, r6, #32
 8013266:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801326a:	f000 f9e9 	bl	8013640 <__hi0bits>
 801326e:	42b0      	cmp	r0, r6
 8013270:	dbe7      	blt.n	8013242 <__gethex+0x456>
 8013272:	e7f0      	b.n	8013256 <__gethex+0x46a>
 8013274:	08015cf0 	.word	0x08015cf0

08013278 <L_shift>:
 8013278:	f1c2 0208 	rsb	r2, r2, #8
 801327c:	0092      	lsls	r2, r2, #2
 801327e:	b570      	push	{r4, r5, r6, lr}
 8013280:	f1c2 0620 	rsb	r6, r2, #32
 8013284:	6843      	ldr	r3, [r0, #4]
 8013286:	6804      	ldr	r4, [r0, #0]
 8013288:	fa03 f506 	lsl.w	r5, r3, r6
 801328c:	432c      	orrs	r4, r5
 801328e:	40d3      	lsrs	r3, r2
 8013290:	6004      	str	r4, [r0, #0]
 8013292:	f840 3f04 	str.w	r3, [r0, #4]!
 8013296:	4288      	cmp	r0, r1
 8013298:	d3f4      	bcc.n	8013284 <L_shift+0xc>
 801329a:	bd70      	pop	{r4, r5, r6, pc}

0801329c <__match>:
 801329c:	b530      	push	{r4, r5, lr}
 801329e:	6803      	ldr	r3, [r0, #0]
 80132a0:	3301      	adds	r3, #1
 80132a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80132a6:	b914      	cbnz	r4, 80132ae <__match+0x12>
 80132a8:	6003      	str	r3, [r0, #0]
 80132aa:	2001      	movs	r0, #1
 80132ac:	bd30      	pop	{r4, r5, pc}
 80132ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80132b6:	2d19      	cmp	r5, #25
 80132b8:	bf98      	it	ls
 80132ba:	3220      	addls	r2, #32
 80132bc:	42a2      	cmp	r2, r4
 80132be:	d0f0      	beq.n	80132a2 <__match+0x6>
 80132c0:	2000      	movs	r0, #0
 80132c2:	e7f3      	b.n	80132ac <__match+0x10>

080132c4 <__hexnan>:
 80132c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132c8:	680b      	ldr	r3, [r1, #0]
 80132ca:	115e      	asrs	r6, r3, #5
 80132cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80132d0:	f013 031f 	ands.w	r3, r3, #31
 80132d4:	b087      	sub	sp, #28
 80132d6:	bf18      	it	ne
 80132d8:	3604      	addne	r6, #4
 80132da:	2500      	movs	r5, #0
 80132dc:	1f37      	subs	r7, r6, #4
 80132de:	4690      	mov	r8, r2
 80132e0:	6802      	ldr	r2, [r0, #0]
 80132e2:	9301      	str	r3, [sp, #4]
 80132e4:	4682      	mov	sl, r0
 80132e6:	f846 5c04 	str.w	r5, [r6, #-4]
 80132ea:	46b9      	mov	r9, r7
 80132ec:	463c      	mov	r4, r7
 80132ee:	9502      	str	r5, [sp, #8]
 80132f0:	46ab      	mov	fp, r5
 80132f2:	7851      	ldrb	r1, [r2, #1]
 80132f4:	1c53      	adds	r3, r2, #1
 80132f6:	9303      	str	r3, [sp, #12]
 80132f8:	b341      	cbz	r1, 801334c <__hexnan+0x88>
 80132fa:	4608      	mov	r0, r1
 80132fc:	9205      	str	r2, [sp, #20]
 80132fe:	9104      	str	r1, [sp, #16]
 8013300:	f7ff fd5e 	bl	8012dc0 <__hexdig_fun>
 8013304:	2800      	cmp	r0, #0
 8013306:	d14f      	bne.n	80133a8 <__hexnan+0xe4>
 8013308:	9904      	ldr	r1, [sp, #16]
 801330a:	9a05      	ldr	r2, [sp, #20]
 801330c:	2920      	cmp	r1, #32
 801330e:	d818      	bhi.n	8013342 <__hexnan+0x7e>
 8013310:	9b02      	ldr	r3, [sp, #8]
 8013312:	459b      	cmp	fp, r3
 8013314:	dd13      	ble.n	801333e <__hexnan+0x7a>
 8013316:	454c      	cmp	r4, r9
 8013318:	d206      	bcs.n	8013328 <__hexnan+0x64>
 801331a:	2d07      	cmp	r5, #7
 801331c:	dc04      	bgt.n	8013328 <__hexnan+0x64>
 801331e:	462a      	mov	r2, r5
 8013320:	4649      	mov	r1, r9
 8013322:	4620      	mov	r0, r4
 8013324:	f7ff ffa8 	bl	8013278 <L_shift>
 8013328:	4544      	cmp	r4, r8
 801332a:	d950      	bls.n	80133ce <__hexnan+0x10a>
 801332c:	2300      	movs	r3, #0
 801332e:	f1a4 0904 	sub.w	r9, r4, #4
 8013332:	f844 3c04 	str.w	r3, [r4, #-4]
 8013336:	f8cd b008 	str.w	fp, [sp, #8]
 801333a:	464c      	mov	r4, r9
 801333c:	461d      	mov	r5, r3
 801333e:	9a03      	ldr	r2, [sp, #12]
 8013340:	e7d7      	b.n	80132f2 <__hexnan+0x2e>
 8013342:	2929      	cmp	r1, #41	; 0x29
 8013344:	d156      	bne.n	80133f4 <__hexnan+0x130>
 8013346:	3202      	adds	r2, #2
 8013348:	f8ca 2000 	str.w	r2, [sl]
 801334c:	f1bb 0f00 	cmp.w	fp, #0
 8013350:	d050      	beq.n	80133f4 <__hexnan+0x130>
 8013352:	454c      	cmp	r4, r9
 8013354:	d206      	bcs.n	8013364 <__hexnan+0xa0>
 8013356:	2d07      	cmp	r5, #7
 8013358:	dc04      	bgt.n	8013364 <__hexnan+0xa0>
 801335a:	462a      	mov	r2, r5
 801335c:	4649      	mov	r1, r9
 801335e:	4620      	mov	r0, r4
 8013360:	f7ff ff8a 	bl	8013278 <L_shift>
 8013364:	4544      	cmp	r4, r8
 8013366:	d934      	bls.n	80133d2 <__hexnan+0x10e>
 8013368:	f1a8 0204 	sub.w	r2, r8, #4
 801336c:	4623      	mov	r3, r4
 801336e:	f853 1b04 	ldr.w	r1, [r3], #4
 8013372:	f842 1f04 	str.w	r1, [r2, #4]!
 8013376:	429f      	cmp	r7, r3
 8013378:	d2f9      	bcs.n	801336e <__hexnan+0xaa>
 801337a:	1b3b      	subs	r3, r7, r4
 801337c:	f023 0303 	bic.w	r3, r3, #3
 8013380:	3304      	adds	r3, #4
 8013382:	3401      	adds	r4, #1
 8013384:	3e03      	subs	r6, #3
 8013386:	42b4      	cmp	r4, r6
 8013388:	bf88      	it	hi
 801338a:	2304      	movhi	r3, #4
 801338c:	4443      	add	r3, r8
 801338e:	2200      	movs	r2, #0
 8013390:	f843 2b04 	str.w	r2, [r3], #4
 8013394:	429f      	cmp	r7, r3
 8013396:	d2fb      	bcs.n	8013390 <__hexnan+0xcc>
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	b91b      	cbnz	r3, 80133a4 <__hexnan+0xe0>
 801339c:	4547      	cmp	r7, r8
 801339e:	d127      	bne.n	80133f0 <__hexnan+0x12c>
 80133a0:	2301      	movs	r3, #1
 80133a2:	603b      	str	r3, [r7, #0]
 80133a4:	2005      	movs	r0, #5
 80133a6:	e026      	b.n	80133f6 <__hexnan+0x132>
 80133a8:	3501      	adds	r5, #1
 80133aa:	2d08      	cmp	r5, #8
 80133ac:	f10b 0b01 	add.w	fp, fp, #1
 80133b0:	dd06      	ble.n	80133c0 <__hexnan+0xfc>
 80133b2:	4544      	cmp	r4, r8
 80133b4:	d9c3      	bls.n	801333e <__hexnan+0x7a>
 80133b6:	2300      	movs	r3, #0
 80133b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80133bc:	2501      	movs	r5, #1
 80133be:	3c04      	subs	r4, #4
 80133c0:	6822      	ldr	r2, [r4, #0]
 80133c2:	f000 000f 	and.w	r0, r0, #15
 80133c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80133ca:	6022      	str	r2, [r4, #0]
 80133cc:	e7b7      	b.n	801333e <__hexnan+0x7a>
 80133ce:	2508      	movs	r5, #8
 80133d0:	e7b5      	b.n	801333e <__hexnan+0x7a>
 80133d2:	9b01      	ldr	r3, [sp, #4]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d0df      	beq.n	8013398 <__hexnan+0xd4>
 80133d8:	f04f 32ff 	mov.w	r2, #4294967295
 80133dc:	f1c3 0320 	rsb	r3, r3, #32
 80133e0:	fa22 f303 	lsr.w	r3, r2, r3
 80133e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80133e8:	401a      	ands	r2, r3
 80133ea:	f846 2c04 	str.w	r2, [r6, #-4]
 80133ee:	e7d3      	b.n	8013398 <__hexnan+0xd4>
 80133f0:	3f04      	subs	r7, #4
 80133f2:	e7d1      	b.n	8013398 <__hexnan+0xd4>
 80133f4:	2004      	movs	r0, #4
 80133f6:	b007      	add	sp, #28
 80133f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080133fc <_localeconv_r>:
 80133fc:	4800      	ldr	r0, [pc, #0]	; (8013400 <_localeconv_r+0x4>)
 80133fe:	4770      	bx	lr
 8013400:	20000420 	.word	0x20000420

08013404 <_lseek_r>:
 8013404:	b538      	push	{r3, r4, r5, lr}
 8013406:	4d07      	ldr	r5, [pc, #28]	; (8013424 <_lseek_r+0x20>)
 8013408:	4604      	mov	r4, r0
 801340a:	4608      	mov	r0, r1
 801340c:	4611      	mov	r1, r2
 801340e:	2200      	movs	r2, #0
 8013410:	602a      	str	r2, [r5, #0]
 8013412:	461a      	mov	r2, r3
 8013414:	f7ef fef8 	bl	8003208 <_lseek>
 8013418:	1c43      	adds	r3, r0, #1
 801341a:	d102      	bne.n	8013422 <_lseek_r+0x1e>
 801341c:	682b      	ldr	r3, [r5, #0]
 801341e:	b103      	cbz	r3, 8013422 <_lseek_r+0x1e>
 8013420:	6023      	str	r3, [r4, #0]
 8013422:	bd38      	pop	{r3, r4, r5, pc}
 8013424:	20000770 	.word	0x20000770

08013428 <malloc>:
 8013428:	4b02      	ldr	r3, [pc, #8]	; (8013434 <malloc+0xc>)
 801342a:	4601      	mov	r1, r0
 801342c:	6818      	ldr	r0, [r3, #0]
 801342e:	f000 bd59 	b.w	8013ee4 <_malloc_r>
 8013432:	bf00      	nop
 8013434:	200002c8 	.word	0x200002c8

08013438 <__ascii_mbtowc>:
 8013438:	b082      	sub	sp, #8
 801343a:	b901      	cbnz	r1, 801343e <__ascii_mbtowc+0x6>
 801343c:	a901      	add	r1, sp, #4
 801343e:	b142      	cbz	r2, 8013452 <__ascii_mbtowc+0x1a>
 8013440:	b14b      	cbz	r3, 8013456 <__ascii_mbtowc+0x1e>
 8013442:	7813      	ldrb	r3, [r2, #0]
 8013444:	600b      	str	r3, [r1, #0]
 8013446:	7812      	ldrb	r2, [r2, #0]
 8013448:	1e10      	subs	r0, r2, #0
 801344a:	bf18      	it	ne
 801344c:	2001      	movne	r0, #1
 801344e:	b002      	add	sp, #8
 8013450:	4770      	bx	lr
 8013452:	4610      	mov	r0, r2
 8013454:	e7fb      	b.n	801344e <__ascii_mbtowc+0x16>
 8013456:	f06f 0001 	mvn.w	r0, #1
 801345a:	e7f8      	b.n	801344e <__ascii_mbtowc+0x16>

0801345c <_Balloc>:
 801345c:	b570      	push	{r4, r5, r6, lr}
 801345e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013460:	4604      	mov	r4, r0
 8013462:	460d      	mov	r5, r1
 8013464:	b976      	cbnz	r6, 8013484 <_Balloc+0x28>
 8013466:	2010      	movs	r0, #16
 8013468:	f7ff ffde 	bl	8013428 <malloc>
 801346c:	4602      	mov	r2, r0
 801346e:	6260      	str	r0, [r4, #36]	; 0x24
 8013470:	b920      	cbnz	r0, 801347c <_Balloc+0x20>
 8013472:	4b18      	ldr	r3, [pc, #96]	; (80134d4 <_Balloc+0x78>)
 8013474:	4818      	ldr	r0, [pc, #96]	; (80134d8 <_Balloc+0x7c>)
 8013476:	2166      	movs	r1, #102	; 0x66
 8013478:	f001 fb46 	bl	8014b08 <__assert_func>
 801347c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013480:	6006      	str	r6, [r0, #0]
 8013482:	60c6      	str	r6, [r0, #12]
 8013484:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013486:	68f3      	ldr	r3, [r6, #12]
 8013488:	b183      	cbz	r3, 80134ac <_Balloc+0x50>
 801348a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801348c:	68db      	ldr	r3, [r3, #12]
 801348e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013492:	b9b8      	cbnz	r0, 80134c4 <_Balloc+0x68>
 8013494:	2101      	movs	r1, #1
 8013496:	fa01 f605 	lsl.w	r6, r1, r5
 801349a:	1d72      	adds	r2, r6, #5
 801349c:	0092      	lsls	r2, r2, #2
 801349e:	4620      	mov	r0, r4
 80134a0:	f000 fc9d 	bl	8013dde <_calloc_r>
 80134a4:	b160      	cbz	r0, 80134c0 <_Balloc+0x64>
 80134a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80134aa:	e00e      	b.n	80134ca <_Balloc+0x6e>
 80134ac:	2221      	movs	r2, #33	; 0x21
 80134ae:	2104      	movs	r1, #4
 80134b0:	4620      	mov	r0, r4
 80134b2:	f000 fc94 	bl	8013dde <_calloc_r>
 80134b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80134b8:	60f0      	str	r0, [r6, #12]
 80134ba:	68db      	ldr	r3, [r3, #12]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d1e4      	bne.n	801348a <_Balloc+0x2e>
 80134c0:	2000      	movs	r0, #0
 80134c2:	bd70      	pop	{r4, r5, r6, pc}
 80134c4:	6802      	ldr	r2, [r0, #0]
 80134c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80134ca:	2300      	movs	r3, #0
 80134cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80134d0:	e7f7      	b.n	80134c2 <_Balloc+0x66>
 80134d2:	bf00      	nop
 80134d4:	08015c7e 	.word	0x08015c7e
 80134d8:	08015d7c 	.word	0x08015d7c

080134dc <_Bfree>:
 80134dc:	b570      	push	{r4, r5, r6, lr}
 80134de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80134e0:	4605      	mov	r5, r0
 80134e2:	460c      	mov	r4, r1
 80134e4:	b976      	cbnz	r6, 8013504 <_Bfree+0x28>
 80134e6:	2010      	movs	r0, #16
 80134e8:	f7ff ff9e 	bl	8013428 <malloc>
 80134ec:	4602      	mov	r2, r0
 80134ee:	6268      	str	r0, [r5, #36]	; 0x24
 80134f0:	b920      	cbnz	r0, 80134fc <_Bfree+0x20>
 80134f2:	4b09      	ldr	r3, [pc, #36]	; (8013518 <_Bfree+0x3c>)
 80134f4:	4809      	ldr	r0, [pc, #36]	; (801351c <_Bfree+0x40>)
 80134f6:	218a      	movs	r1, #138	; 0x8a
 80134f8:	f001 fb06 	bl	8014b08 <__assert_func>
 80134fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013500:	6006      	str	r6, [r0, #0]
 8013502:	60c6      	str	r6, [r0, #12]
 8013504:	b13c      	cbz	r4, 8013516 <_Bfree+0x3a>
 8013506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013508:	6862      	ldr	r2, [r4, #4]
 801350a:	68db      	ldr	r3, [r3, #12]
 801350c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013510:	6021      	str	r1, [r4, #0]
 8013512:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013516:	bd70      	pop	{r4, r5, r6, pc}
 8013518:	08015c7e 	.word	0x08015c7e
 801351c:	08015d7c 	.word	0x08015d7c

08013520 <__multadd>:
 8013520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013524:	690d      	ldr	r5, [r1, #16]
 8013526:	4607      	mov	r7, r0
 8013528:	460c      	mov	r4, r1
 801352a:	461e      	mov	r6, r3
 801352c:	f101 0c14 	add.w	ip, r1, #20
 8013530:	2000      	movs	r0, #0
 8013532:	f8dc 3000 	ldr.w	r3, [ip]
 8013536:	b299      	uxth	r1, r3
 8013538:	fb02 6101 	mla	r1, r2, r1, r6
 801353c:	0c1e      	lsrs	r6, r3, #16
 801353e:	0c0b      	lsrs	r3, r1, #16
 8013540:	fb02 3306 	mla	r3, r2, r6, r3
 8013544:	b289      	uxth	r1, r1
 8013546:	3001      	adds	r0, #1
 8013548:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801354c:	4285      	cmp	r5, r0
 801354e:	f84c 1b04 	str.w	r1, [ip], #4
 8013552:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013556:	dcec      	bgt.n	8013532 <__multadd+0x12>
 8013558:	b30e      	cbz	r6, 801359e <__multadd+0x7e>
 801355a:	68a3      	ldr	r3, [r4, #8]
 801355c:	42ab      	cmp	r3, r5
 801355e:	dc19      	bgt.n	8013594 <__multadd+0x74>
 8013560:	6861      	ldr	r1, [r4, #4]
 8013562:	4638      	mov	r0, r7
 8013564:	3101      	adds	r1, #1
 8013566:	f7ff ff79 	bl	801345c <_Balloc>
 801356a:	4680      	mov	r8, r0
 801356c:	b928      	cbnz	r0, 801357a <__multadd+0x5a>
 801356e:	4602      	mov	r2, r0
 8013570:	4b0c      	ldr	r3, [pc, #48]	; (80135a4 <__multadd+0x84>)
 8013572:	480d      	ldr	r0, [pc, #52]	; (80135a8 <__multadd+0x88>)
 8013574:	21b5      	movs	r1, #181	; 0xb5
 8013576:	f001 fac7 	bl	8014b08 <__assert_func>
 801357a:	6922      	ldr	r2, [r4, #16]
 801357c:	3202      	adds	r2, #2
 801357e:	f104 010c 	add.w	r1, r4, #12
 8013582:	0092      	lsls	r2, r2, #2
 8013584:	300c      	adds	r0, #12
 8013586:	f7fc ff39 	bl	80103fc <memcpy>
 801358a:	4621      	mov	r1, r4
 801358c:	4638      	mov	r0, r7
 801358e:	f7ff ffa5 	bl	80134dc <_Bfree>
 8013592:	4644      	mov	r4, r8
 8013594:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013598:	3501      	adds	r5, #1
 801359a:	615e      	str	r6, [r3, #20]
 801359c:	6125      	str	r5, [r4, #16]
 801359e:	4620      	mov	r0, r4
 80135a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135a4:	08015cf0 	.word	0x08015cf0
 80135a8:	08015d7c 	.word	0x08015d7c

080135ac <__s2b>:
 80135ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135b0:	460c      	mov	r4, r1
 80135b2:	4615      	mov	r5, r2
 80135b4:	461f      	mov	r7, r3
 80135b6:	2209      	movs	r2, #9
 80135b8:	3308      	adds	r3, #8
 80135ba:	4606      	mov	r6, r0
 80135bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80135c0:	2100      	movs	r1, #0
 80135c2:	2201      	movs	r2, #1
 80135c4:	429a      	cmp	r2, r3
 80135c6:	db09      	blt.n	80135dc <__s2b+0x30>
 80135c8:	4630      	mov	r0, r6
 80135ca:	f7ff ff47 	bl	801345c <_Balloc>
 80135ce:	b940      	cbnz	r0, 80135e2 <__s2b+0x36>
 80135d0:	4602      	mov	r2, r0
 80135d2:	4b19      	ldr	r3, [pc, #100]	; (8013638 <__s2b+0x8c>)
 80135d4:	4819      	ldr	r0, [pc, #100]	; (801363c <__s2b+0x90>)
 80135d6:	21ce      	movs	r1, #206	; 0xce
 80135d8:	f001 fa96 	bl	8014b08 <__assert_func>
 80135dc:	0052      	lsls	r2, r2, #1
 80135de:	3101      	adds	r1, #1
 80135e0:	e7f0      	b.n	80135c4 <__s2b+0x18>
 80135e2:	9b08      	ldr	r3, [sp, #32]
 80135e4:	6143      	str	r3, [r0, #20]
 80135e6:	2d09      	cmp	r5, #9
 80135e8:	f04f 0301 	mov.w	r3, #1
 80135ec:	6103      	str	r3, [r0, #16]
 80135ee:	dd16      	ble.n	801361e <__s2b+0x72>
 80135f0:	f104 0909 	add.w	r9, r4, #9
 80135f4:	46c8      	mov	r8, r9
 80135f6:	442c      	add	r4, r5
 80135f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80135fc:	4601      	mov	r1, r0
 80135fe:	3b30      	subs	r3, #48	; 0x30
 8013600:	220a      	movs	r2, #10
 8013602:	4630      	mov	r0, r6
 8013604:	f7ff ff8c 	bl	8013520 <__multadd>
 8013608:	45a0      	cmp	r8, r4
 801360a:	d1f5      	bne.n	80135f8 <__s2b+0x4c>
 801360c:	f1a5 0408 	sub.w	r4, r5, #8
 8013610:	444c      	add	r4, r9
 8013612:	1b2d      	subs	r5, r5, r4
 8013614:	1963      	adds	r3, r4, r5
 8013616:	42bb      	cmp	r3, r7
 8013618:	db04      	blt.n	8013624 <__s2b+0x78>
 801361a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801361e:	340a      	adds	r4, #10
 8013620:	2509      	movs	r5, #9
 8013622:	e7f6      	b.n	8013612 <__s2b+0x66>
 8013624:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013628:	4601      	mov	r1, r0
 801362a:	3b30      	subs	r3, #48	; 0x30
 801362c:	220a      	movs	r2, #10
 801362e:	4630      	mov	r0, r6
 8013630:	f7ff ff76 	bl	8013520 <__multadd>
 8013634:	e7ee      	b.n	8013614 <__s2b+0x68>
 8013636:	bf00      	nop
 8013638:	08015cf0 	.word	0x08015cf0
 801363c:	08015d7c 	.word	0x08015d7c

08013640 <__hi0bits>:
 8013640:	0c03      	lsrs	r3, r0, #16
 8013642:	041b      	lsls	r3, r3, #16
 8013644:	b9d3      	cbnz	r3, 801367c <__hi0bits+0x3c>
 8013646:	0400      	lsls	r0, r0, #16
 8013648:	2310      	movs	r3, #16
 801364a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801364e:	bf04      	itt	eq
 8013650:	0200      	lsleq	r0, r0, #8
 8013652:	3308      	addeq	r3, #8
 8013654:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013658:	bf04      	itt	eq
 801365a:	0100      	lsleq	r0, r0, #4
 801365c:	3304      	addeq	r3, #4
 801365e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013662:	bf04      	itt	eq
 8013664:	0080      	lsleq	r0, r0, #2
 8013666:	3302      	addeq	r3, #2
 8013668:	2800      	cmp	r0, #0
 801366a:	db05      	blt.n	8013678 <__hi0bits+0x38>
 801366c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013670:	f103 0301 	add.w	r3, r3, #1
 8013674:	bf08      	it	eq
 8013676:	2320      	moveq	r3, #32
 8013678:	4618      	mov	r0, r3
 801367a:	4770      	bx	lr
 801367c:	2300      	movs	r3, #0
 801367e:	e7e4      	b.n	801364a <__hi0bits+0xa>

08013680 <__lo0bits>:
 8013680:	6803      	ldr	r3, [r0, #0]
 8013682:	f013 0207 	ands.w	r2, r3, #7
 8013686:	4601      	mov	r1, r0
 8013688:	d00b      	beq.n	80136a2 <__lo0bits+0x22>
 801368a:	07da      	lsls	r2, r3, #31
 801368c:	d423      	bmi.n	80136d6 <__lo0bits+0x56>
 801368e:	0798      	lsls	r0, r3, #30
 8013690:	bf49      	itett	mi
 8013692:	085b      	lsrmi	r3, r3, #1
 8013694:	089b      	lsrpl	r3, r3, #2
 8013696:	2001      	movmi	r0, #1
 8013698:	600b      	strmi	r3, [r1, #0]
 801369a:	bf5c      	itt	pl
 801369c:	600b      	strpl	r3, [r1, #0]
 801369e:	2002      	movpl	r0, #2
 80136a0:	4770      	bx	lr
 80136a2:	b298      	uxth	r0, r3
 80136a4:	b9a8      	cbnz	r0, 80136d2 <__lo0bits+0x52>
 80136a6:	0c1b      	lsrs	r3, r3, #16
 80136a8:	2010      	movs	r0, #16
 80136aa:	b2da      	uxtb	r2, r3
 80136ac:	b90a      	cbnz	r2, 80136b2 <__lo0bits+0x32>
 80136ae:	3008      	adds	r0, #8
 80136b0:	0a1b      	lsrs	r3, r3, #8
 80136b2:	071a      	lsls	r2, r3, #28
 80136b4:	bf04      	itt	eq
 80136b6:	091b      	lsreq	r3, r3, #4
 80136b8:	3004      	addeq	r0, #4
 80136ba:	079a      	lsls	r2, r3, #30
 80136bc:	bf04      	itt	eq
 80136be:	089b      	lsreq	r3, r3, #2
 80136c0:	3002      	addeq	r0, #2
 80136c2:	07da      	lsls	r2, r3, #31
 80136c4:	d403      	bmi.n	80136ce <__lo0bits+0x4e>
 80136c6:	085b      	lsrs	r3, r3, #1
 80136c8:	f100 0001 	add.w	r0, r0, #1
 80136cc:	d005      	beq.n	80136da <__lo0bits+0x5a>
 80136ce:	600b      	str	r3, [r1, #0]
 80136d0:	4770      	bx	lr
 80136d2:	4610      	mov	r0, r2
 80136d4:	e7e9      	b.n	80136aa <__lo0bits+0x2a>
 80136d6:	2000      	movs	r0, #0
 80136d8:	4770      	bx	lr
 80136da:	2020      	movs	r0, #32
 80136dc:	4770      	bx	lr
	...

080136e0 <__i2b>:
 80136e0:	b510      	push	{r4, lr}
 80136e2:	460c      	mov	r4, r1
 80136e4:	2101      	movs	r1, #1
 80136e6:	f7ff feb9 	bl	801345c <_Balloc>
 80136ea:	4602      	mov	r2, r0
 80136ec:	b928      	cbnz	r0, 80136fa <__i2b+0x1a>
 80136ee:	4b05      	ldr	r3, [pc, #20]	; (8013704 <__i2b+0x24>)
 80136f0:	4805      	ldr	r0, [pc, #20]	; (8013708 <__i2b+0x28>)
 80136f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80136f6:	f001 fa07 	bl	8014b08 <__assert_func>
 80136fa:	2301      	movs	r3, #1
 80136fc:	6144      	str	r4, [r0, #20]
 80136fe:	6103      	str	r3, [r0, #16]
 8013700:	bd10      	pop	{r4, pc}
 8013702:	bf00      	nop
 8013704:	08015cf0 	.word	0x08015cf0
 8013708:	08015d7c 	.word	0x08015d7c

0801370c <__multiply>:
 801370c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013710:	4691      	mov	r9, r2
 8013712:	690a      	ldr	r2, [r1, #16]
 8013714:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013718:	429a      	cmp	r2, r3
 801371a:	bfb8      	it	lt
 801371c:	460b      	movlt	r3, r1
 801371e:	460c      	mov	r4, r1
 8013720:	bfbc      	itt	lt
 8013722:	464c      	movlt	r4, r9
 8013724:	4699      	movlt	r9, r3
 8013726:	6927      	ldr	r7, [r4, #16]
 8013728:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801372c:	68a3      	ldr	r3, [r4, #8]
 801372e:	6861      	ldr	r1, [r4, #4]
 8013730:	eb07 060a 	add.w	r6, r7, sl
 8013734:	42b3      	cmp	r3, r6
 8013736:	b085      	sub	sp, #20
 8013738:	bfb8      	it	lt
 801373a:	3101      	addlt	r1, #1
 801373c:	f7ff fe8e 	bl	801345c <_Balloc>
 8013740:	b930      	cbnz	r0, 8013750 <__multiply+0x44>
 8013742:	4602      	mov	r2, r0
 8013744:	4b44      	ldr	r3, [pc, #272]	; (8013858 <__multiply+0x14c>)
 8013746:	4845      	ldr	r0, [pc, #276]	; (801385c <__multiply+0x150>)
 8013748:	f240 115d 	movw	r1, #349	; 0x15d
 801374c:	f001 f9dc 	bl	8014b08 <__assert_func>
 8013750:	f100 0514 	add.w	r5, r0, #20
 8013754:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013758:	462b      	mov	r3, r5
 801375a:	2200      	movs	r2, #0
 801375c:	4543      	cmp	r3, r8
 801375e:	d321      	bcc.n	80137a4 <__multiply+0x98>
 8013760:	f104 0314 	add.w	r3, r4, #20
 8013764:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013768:	f109 0314 	add.w	r3, r9, #20
 801376c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013770:	9202      	str	r2, [sp, #8]
 8013772:	1b3a      	subs	r2, r7, r4
 8013774:	3a15      	subs	r2, #21
 8013776:	f022 0203 	bic.w	r2, r2, #3
 801377a:	3204      	adds	r2, #4
 801377c:	f104 0115 	add.w	r1, r4, #21
 8013780:	428f      	cmp	r7, r1
 8013782:	bf38      	it	cc
 8013784:	2204      	movcc	r2, #4
 8013786:	9201      	str	r2, [sp, #4]
 8013788:	9a02      	ldr	r2, [sp, #8]
 801378a:	9303      	str	r3, [sp, #12]
 801378c:	429a      	cmp	r2, r3
 801378e:	d80c      	bhi.n	80137aa <__multiply+0x9e>
 8013790:	2e00      	cmp	r6, #0
 8013792:	dd03      	ble.n	801379c <__multiply+0x90>
 8013794:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013798:	2b00      	cmp	r3, #0
 801379a:	d05a      	beq.n	8013852 <__multiply+0x146>
 801379c:	6106      	str	r6, [r0, #16]
 801379e:	b005      	add	sp, #20
 80137a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137a4:	f843 2b04 	str.w	r2, [r3], #4
 80137a8:	e7d8      	b.n	801375c <__multiply+0x50>
 80137aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80137ae:	f1ba 0f00 	cmp.w	sl, #0
 80137b2:	d024      	beq.n	80137fe <__multiply+0xf2>
 80137b4:	f104 0e14 	add.w	lr, r4, #20
 80137b8:	46a9      	mov	r9, r5
 80137ba:	f04f 0c00 	mov.w	ip, #0
 80137be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80137c2:	f8d9 1000 	ldr.w	r1, [r9]
 80137c6:	fa1f fb82 	uxth.w	fp, r2
 80137ca:	b289      	uxth	r1, r1
 80137cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80137d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80137d4:	f8d9 2000 	ldr.w	r2, [r9]
 80137d8:	4461      	add	r1, ip
 80137da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80137de:	fb0a c20b 	mla	r2, sl, fp, ip
 80137e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80137e6:	b289      	uxth	r1, r1
 80137e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80137ec:	4577      	cmp	r7, lr
 80137ee:	f849 1b04 	str.w	r1, [r9], #4
 80137f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80137f6:	d8e2      	bhi.n	80137be <__multiply+0xb2>
 80137f8:	9a01      	ldr	r2, [sp, #4]
 80137fa:	f845 c002 	str.w	ip, [r5, r2]
 80137fe:	9a03      	ldr	r2, [sp, #12]
 8013800:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013804:	3304      	adds	r3, #4
 8013806:	f1b9 0f00 	cmp.w	r9, #0
 801380a:	d020      	beq.n	801384e <__multiply+0x142>
 801380c:	6829      	ldr	r1, [r5, #0]
 801380e:	f104 0c14 	add.w	ip, r4, #20
 8013812:	46ae      	mov	lr, r5
 8013814:	f04f 0a00 	mov.w	sl, #0
 8013818:	f8bc b000 	ldrh.w	fp, [ip]
 801381c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013820:	fb09 220b 	mla	r2, r9, fp, r2
 8013824:	4492      	add	sl, r2
 8013826:	b289      	uxth	r1, r1
 8013828:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801382c:	f84e 1b04 	str.w	r1, [lr], #4
 8013830:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013834:	f8be 1000 	ldrh.w	r1, [lr]
 8013838:	0c12      	lsrs	r2, r2, #16
 801383a:	fb09 1102 	mla	r1, r9, r2, r1
 801383e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013842:	4567      	cmp	r7, ip
 8013844:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013848:	d8e6      	bhi.n	8013818 <__multiply+0x10c>
 801384a:	9a01      	ldr	r2, [sp, #4]
 801384c:	50a9      	str	r1, [r5, r2]
 801384e:	3504      	adds	r5, #4
 8013850:	e79a      	b.n	8013788 <__multiply+0x7c>
 8013852:	3e01      	subs	r6, #1
 8013854:	e79c      	b.n	8013790 <__multiply+0x84>
 8013856:	bf00      	nop
 8013858:	08015cf0 	.word	0x08015cf0
 801385c:	08015d7c 	.word	0x08015d7c

08013860 <__pow5mult>:
 8013860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013864:	4615      	mov	r5, r2
 8013866:	f012 0203 	ands.w	r2, r2, #3
 801386a:	4606      	mov	r6, r0
 801386c:	460f      	mov	r7, r1
 801386e:	d007      	beq.n	8013880 <__pow5mult+0x20>
 8013870:	4c25      	ldr	r4, [pc, #148]	; (8013908 <__pow5mult+0xa8>)
 8013872:	3a01      	subs	r2, #1
 8013874:	2300      	movs	r3, #0
 8013876:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801387a:	f7ff fe51 	bl	8013520 <__multadd>
 801387e:	4607      	mov	r7, r0
 8013880:	10ad      	asrs	r5, r5, #2
 8013882:	d03d      	beq.n	8013900 <__pow5mult+0xa0>
 8013884:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013886:	b97c      	cbnz	r4, 80138a8 <__pow5mult+0x48>
 8013888:	2010      	movs	r0, #16
 801388a:	f7ff fdcd 	bl	8013428 <malloc>
 801388e:	4602      	mov	r2, r0
 8013890:	6270      	str	r0, [r6, #36]	; 0x24
 8013892:	b928      	cbnz	r0, 80138a0 <__pow5mult+0x40>
 8013894:	4b1d      	ldr	r3, [pc, #116]	; (801390c <__pow5mult+0xac>)
 8013896:	481e      	ldr	r0, [pc, #120]	; (8013910 <__pow5mult+0xb0>)
 8013898:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801389c:	f001 f934 	bl	8014b08 <__assert_func>
 80138a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80138a4:	6004      	str	r4, [r0, #0]
 80138a6:	60c4      	str	r4, [r0, #12]
 80138a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80138ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80138b0:	b94c      	cbnz	r4, 80138c6 <__pow5mult+0x66>
 80138b2:	f240 2171 	movw	r1, #625	; 0x271
 80138b6:	4630      	mov	r0, r6
 80138b8:	f7ff ff12 	bl	80136e0 <__i2b>
 80138bc:	2300      	movs	r3, #0
 80138be:	f8c8 0008 	str.w	r0, [r8, #8]
 80138c2:	4604      	mov	r4, r0
 80138c4:	6003      	str	r3, [r0, #0]
 80138c6:	f04f 0900 	mov.w	r9, #0
 80138ca:	07eb      	lsls	r3, r5, #31
 80138cc:	d50a      	bpl.n	80138e4 <__pow5mult+0x84>
 80138ce:	4639      	mov	r1, r7
 80138d0:	4622      	mov	r2, r4
 80138d2:	4630      	mov	r0, r6
 80138d4:	f7ff ff1a 	bl	801370c <__multiply>
 80138d8:	4639      	mov	r1, r7
 80138da:	4680      	mov	r8, r0
 80138dc:	4630      	mov	r0, r6
 80138de:	f7ff fdfd 	bl	80134dc <_Bfree>
 80138e2:	4647      	mov	r7, r8
 80138e4:	106d      	asrs	r5, r5, #1
 80138e6:	d00b      	beq.n	8013900 <__pow5mult+0xa0>
 80138e8:	6820      	ldr	r0, [r4, #0]
 80138ea:	b938      	cbnz	r0, 80138fc <__pow5mult+0x9c>
 80138ec:	4622      	mov	r2, r4
 80138ee:	4621      	mov	r1, r4
 80138f0:	4630      	mov	r0, r6
 80138f2:	f7ff ff0b 	bl	801370c <__multiply>
 80138f6:	6020      	str	r0, [r4, #0]
 80138f8:	f8c0 9000 	str.w	r9, [r0]
 80138fc:	4604      	mov	r4, r0
 80138fe:	e7e4      	b.n	80138ca <__pow5mult+0x6a>
 8013900:	4638      	mov	r0, r7
 8013902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013906:	bf00      	nop
 8013908:	08015ec8 	.word	0x08015ec8
 801390c:	08015c7e 	.word	0x08015c7e
 8013910:	08015d7c 	.word	0x08015d7c

08013914 <__lshift>:
 8013914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013918:	460c      	mov	r4, r1
 801391a:	6849      	ldr	r1, [r1, #4]
 801391c:	6923      	ldr	r3, [r4, #16]
 801391e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013922:	68a3      	ldr	r3, [r4, #8]
 8013924:	4607      	mov	r7, r0
 8013926:	4691      	mov	r9, r2
 8013928:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801392c:	f108 0601 	add.w	r6, r8, #1
 8013930:	42b3      	cmp	r3, r6
 8013932:	db0b      	blt.n	801394c <__lshift+0x38>
 8013934:	4638      	mov	r0, r7
 8013936:	f7ff fd91 	bl	801345c <_Balloc>
 801393a:	4605      	mov	r5, r0
 801393c:	b948      	cbnz	r0, 8013952 <__lshift+0x3e>
 801393e:	4602      	mov	r2, r0
 8013940:	4b2a      	ldr	r3, [pc, #168]	; (80139ec <__lshift+0xd8>)
 8013942:	482b      	ldr	r0, [pc, #172]	; (80139f0 <__lshift+0xdc>)
 8013944:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013948:	f001 f8de 	bl	8014b08 <__assert_func>
 801394c:	3101      	adds	r1, #1
 801394e:	005b      	lsls	r3, r3, #1
 8013950:	e7ee      	b.n	8013930 <__lshift+0x1c>
 8013952:	2300      	movs	r3, #0
 8013954:	f100 0114 	add.w	r1, r0, #20
 8013958:	f100 0210 	add.w	r2, r0, #16
 801395c:	4618      	mov	r0, r3
 801395e:	4553      	cmp	r3, sl
 8013960:	db37      	blt.n	80139d2 <__lshift+0xbe>
 8013962:	6920      	ldr	r0, [r4, #16]
 8013964:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013968:	f104 0314 	add.w	r3, r4, #20
 801396c:	f019 091f 	ands.w	r9, r9, #31
 8013970:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013974:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013978:	d02f      	beq.n	80139da <__lshift+0xc6>
 801397a:	f1c9 0e20 	rsb	lr, r9, #32
 801397e:	468a      	mov	sl, r1
 8013980:	f04f 0c00 	mov.w	ip, #0
 8013984:	681a      	ldr	r2, [r3, #0]
 8013986:	fa02 f209 	lsl.w	r2, r2, r9
 801398a:	ea42 020c 	orr.w	r2, r2, ip
 801398e:	f84a 2b04 	str.w	r2, [sl], #4
 8013992:	f853 2b04 	ldr.w	r2, [r3], #4
 8013996:	4298      	cmp	r0, r3
 8013998:	fa22 fc0e 	lsr.w	ip, r2, lr
 801399c:	d8f2      	bhi.n	8013984 <__lshift+0x70>
 801399e:	1b03      	subs	r3, r0, r4
 80139a0:	3b15      	subs	r3, #21
 80139a2:	f023 0303 	bic.w	r3, r3, #3
 80139a6:	3304      	adds	r3, #4
 80139a8:	f104 0215 	add.w	r2, r4, #21
 80139ac:	4290      	cmp	r0, r2
 80139ae:	bf38      	it	cc
 80139b0:	2304      	movcc	r3, #4
 80139b2:	f841 c003 	str.w	ip, [r1, r3]
 80139b6:	f1bc 0f00 	cmp.w	ip, #0
 80139ba:	d001      	beq.n	80139c0 <__lshift+0xac>
 80139bc:	f108 0602 	add.w	r6, r8, #2
 80139c0:	3e01      	subs	r6, #1
 80139c2:	4638      	mov	r0, r7
 80139c4:	612e      	str	r6, [r5, #16]
 80139c6:	4621      	mov	r1, r4
 80139c8:	f7ff fd88 	bl	80134dc <_Bfree>
 80139cc:	4628      	mov	r0, r5
 80139ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80139d6:	3301      	adds	r3, #1
 80139d8:	e7c1      	b.n	801395e <__lshift+0x4a>
 80139da:	3904      	subs	r1, #4
 80139dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80139e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80139e4:	4298      	cmp	r0, r3
 80139e6:	d8f9      	bhi.n	80139dc <__lshift+0xc8>
 80139e8:	e7ea      	b.n	80139c0 <__lshift+0xac>
 80139ea:	bf00      	nop
 80139ec:	08015cf0 	.word	0x08015cf0
 80139f0:	08015d7c 	.word	0x08015d7c

080139f4 <__mcmp>:
 80139f4:	b530      	push	{r4, r5, lr}
 80139f6:	6902      	ldr	r2, [r0, #16]
 80139f8:	690c      	ldr	r4, [r1, #16]
 80139fa:	1b12      	subs	r2, r2, r4
 80139fc:	d10e      	bne.n	8013a1c <__mcmp+0x28>
 80139fe:	f100 0314 	add.w	r3, r0, #20
 8013a02:	3114      	adds	r1, #20
 8013a04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013a08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013a0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013a10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013a14:	42a5      	cmp	r5, r4
 8013a16:	d003      	beq.n	8013a20 <__mcmp+0x2c>
 8013a18:	d305      	bcc.n	8013a26 <__mcmp+0x32>
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	4610      	mov	r0, r2
 8013a1e:	bd30      	pop	{r4, r5, pc}
 8013a20:	4283      	cmp	r3, r0
 8013a22:	d3f3      	bcc.n	8013a0c <__mcmp+0x18>
 8013a24:	e7fa      	b.n	8013a1c <__mcmp+0x28>
 8013a26:	f04f 32ff 	mov.w	r2, #4294967295
 8013a2a:	e7f7      	b.n	8013a1c <__mcmp+0x28>

08013a2c <__mdiff>:
 8013a2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a30:	460c      	mov	r4, r1
 8013a32:	4606      	mov	r6, r0
 8013a34:	4611      	mov	r1, r2
 8013a36:	4620      	mov	r0, r4
 8013a38:	4690      	mov	r8, r2
 8013a3a:	f7ff ffdb 	bl	80139f4 <__mcmp>
 8013a3e:	1e05      	subs	r5, r0, #0
 8013a40:	d110      	bne.n	8013a64 <__mdiff+0x38>
 8013a42:	4629      	mov	r1, r5
 8013a44:	4630      	mov	r0, r6
 8013a46:	f7ff fd09 	bl	801345c <_Balloc>
 8013a4a:	b930      	cbnz	r0, 8013a5a <__mdiff+0x2e>
 8013a4c:	4b3a      	ldr	r3, [pc, #232]	; (8013b38 <__mdiff+0x10c>)
 8013a4e:	4602      	mov	r2, r0
 8013a50:	f240 2132 	movw	r1, #562	; 0x232
 8013a54:	4839      	ldr	r0, [pc, #228]	; (8013b3c <__mdiff+0x110>)
 8013a56:	f001 f857 	bl	8014b08 <__assert_func>
 8013a5a:	2301      	movs	r3, #1
 8013a5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013a60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a64:	bfa4      	itt	ge
 8013a66:	4643      	movge	r3, r8
 8013a68:	46a0      	movge	r8, r4
 8013a6a:	4630      	mov	r0, r6
 8013a6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013a70:	bfa6      	itte	ge
 8013a72:	461c      	movge	r4, r3
 8013a74:	2500      	movge	r5, #0
 8013a76:	2501      	movlt	r5, #1
 8013a78:	f7ff fcf0 	bl	801345c <_Balloc>
 8013a7c:	b920      	cbnz	r0, 8013a88 <__mdiff+0x5c>
 8013a7e:	4b2e      	ldr	r3, [pc, #184]	; (8013b38 <__mdiff+0x10c>)
 8013a80:	4602      	mov	r2, r0
 8013a82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013a86:	e7e5      	b.n	8013a54 <__mdiff+0x28>
 8013a88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013a8c:	6926      	ldr	r6, [r4, #16]
 8013a8e:	60c5      	str	r5, [r0, #12]
 8013a90:	f104 0914 	add.w	r9, r4, #20
 8013a94:	f108 0514 	add.w	r5, r8, #20
 8013a98:	f100 0e14 	add.w	lr, r0, #20
 8013a9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013aa0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013aa4:	f108 0210 	add.w	r2, r8, #16
 8013aa8:	46f2      	mov	sl, lr
 8013aaa:	2100      	movs	r1, #0
 8013aac:	f859 3b04 	ldr.w	r3, [r9], #4
 8013ab0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013ab4:	fa1f f883 	uxth.w	r8, r3
 8013ab8:	fa11 f18b 	uxtah	r1, r1, fp
 8013abc:	0c1b      	lsrs	r3, r3, #16
 8013abe:	eba1 0808 	sub.w	r8, r1, r8
 8013ac2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013ac6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013aca:	fa1f f888 	uxth.w	r8, r8
 8013ace:	1419      	asrs	r1, r3, #16
 8013ad0:	454e      	cmp	r6, r9
 8013ad2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013ad6:	f84a 3b04 	str.w	r3, [sl], #4
 8013ada:	d8e7      	bhi.n	8013aac <__mdiff+0x80>
 8013adc:	1b33      	subs	r3, r6, r4
 8013ade:	3b15      	subs	r3, #21
 8013ae0:	f023 0303 	bic.w	r3, r3, #3
 8013ae4:	3304      	adds	r3, #4
 8013ae6:	3415      	adds	r4, #21
 8013ae8:	42a6      	cmp	r6, r4
 8013aea:	bf38      	it	cc
 8013aec:	2304      	movcc	r3, #4
 8013aee:	441d      	add	r5, r3
 8013af0:	4473      	add	r3, lr
 8013af2:	469e      	mov	lr, r3
 8013af4:	462e      	mov	r6, r5
 8013af6:	4566      	cmp	r6, ip
 8013af8:	d30e      	bcc.n	8013b18 <__mdiff+0xec>
 8013afa:	f10c 0203 	add.w	r2, ip, #3
 8013afe:	1b52      	subs	r2, r2, r5
 8013b00:	f022 0203 	bic.w	r2, r2, #3
 8013b04:	3d03      	subs	r5, #3
 8013b06:	45ac      	cmp	ip, r5
 8013b08:	bf38      	it	cc
 8013b0a:	2200      	movcc	r2, #0
 8013b0c:	441a      	add	r2, r3
 8013b0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013b12:	b17b      	cbz	r3, 8013b34 <__mdiff+0x108>
 8013b14:	6107      	str	r7, [r0, #16]
 8013b16:	e7a3      	b.n	8013a60 <__mdiff+0x34>
 8013b18:	f856 8b04 	ldr.w	r8, [r6], #4
 8013b1c:	fa11 f288 	uxtah	r2, r1, r8
 8013b20:	1414      	asrs	r4, r2, #16
 8013b22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013b26:	b292      	uxth	r2, r2
 8013b28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013b2c:	f84e 2b04 	str.w	r2, [lr], #4
 8013b30:	1421      	asrs	r1, r4, #16
 8013b32:	e7e0      	b.n	8013af6 <__mdiff+0xca>
 8013b34:	3f01      	subs	r7, #1
 8013b36:	e7ea      	b.n	8013b0e <__mdiff+0xe2>
 8013b38:	08015cf0 	.word	0x08015cf0
 8013b3c:	08015d7c 	.word	0x08015d7c

08013b40 <__ulp>:
 8013b40:	b082      	sub	sp, #8
 8013b42:	ed8d 0b00 	vstr	d0, [sp]
 8013b46:	9b01      	ldr	r3, [sp, #4]
 8013b48:	4912      	ldr	r1, [pc, #72]	; (8013b94 <__ulp+0x54>)
 8013b4a:	4019      	ands	r1, r3
 8013b4c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013b50:	2900      	cmp	r1, #0
 8013b52:	dd05      	ble.n	8013b60 <__ulp+0x20>
 8013b54:	2200      	movs	r2, #0
 8013b56:	460b      	mov	r3, r1
 8013b58:	ec43 2b10 	vmov	d0, r2, r3
 8013b5c:	b002      	add	sp, #8
 8013b5e:	4770      	bx	lr
 8013b60:	4249      	negs	r1, r1
 8013b62:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013b66:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013b6a:	f04f 0200 	mov.w	r2, #0
 8013b6e:	f04f 0300 	mov.w	r3, #0
 8013b72:	da04      	bge.n	8013b7e <__ulp+0x3e>
 8013b74:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013b78:	fa41 f300 	asr.w	r3, r1, r0
 8013b7c:	e7ec      	b.n	8013b58 <__ulp+0x18>
 8013b7e:	f1a0 0114 	sub.w	r1, r0, #20
 8013b82:	291e      	cmp	r1, #30
 8013b84:	bfda      	itte	le
 8013b86:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013b8a:	fa20 f101 	lsrle.w	r1, r0, r1
 8013b8e:	2101      	movgt	r1, #1
 8013b90:	460a      	mov	r2, r1
 8013b92:	e7e1      	b.n	8013b58 <__ulp+0x18>
 8013b94:	7ff00000 	.word	0x7ff00000

08013b98 <__b2d>:
 8013b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b9a:	6905      	ldr	r5, [r0, #16]
 8013b9c:	f100 0714 	add.w	r7, r0, #20
 8013ba0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013ba4:	1f2e      	subs	r6, r5, #4
 8013ba6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013baa:	4620      	mov	r0, r4
 8013bac:	f7ff fd48 	bl	8013640 <__hi0bits>
 8013bb0:	f1c0 0320 	rsb	r3, r0, #32
 8013bb4:	280a      	cmp	r0, #10
 8013bb6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013c34 <__b2d+0x9c>
 8013bba:	600b      	str	r3, [r1, #0]
 8013bbc:	dc14      	bgt.n	8013be8 <__b2d+0x50>
 8013bbe:	f1c0 0e0b 	rsb	lr, r0, #11
 8013bc2:	fa24 f10e 	lsr.w	r1, r4, lr
 8013bc6:	42b7      	cmp	r7, r6
 8013bc8:	ea41 030c 	orr.w	r3, r1, ip
 8013bcc:	bf34      	ite	cc
 8013bce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013bd2:	2100      	movcs	r1, #0
 8013bd4:	3015      	adds	r0, #21
 8013bd6:	fa04 f000 	lsl.w	r0, r4, r0
 8013bda:	fa21 f10e 	lsr.w	r1, r1, lr
 8013bde:	ea40 0201 	orr.w	r2, r0, r1
 8013be2:	ec43 2b10 	vmov	d0, r2, r3
 8013be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013be8:	42b7      	cmp	r7, r6
 8013bea:	bf3a      	itte	cc
 8013bec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013bf0:	f1a5 0608 	subcc.w	r6, r5, #8
 8013bf4:	2100      	movcs	r1, #0
 8013bf6:	380b      	subs	r0, #11
 8013bf8:	d017      	beq.n	8013c2a <__b2d+0x92>
 8013bfa:	f1c0 0c20 	rsb	ip, r0, #32
 8013bfe:	fa04 f500 	lsl.w	r5, r4, r0
 8013c02:	42be      	cmp	r6, r7
 8013c04:	fa21 f40c 	lsr.w	r4, r1, ip
 8013c08:	ea45 0504 	orr.w	r5, r5, r4
 8013c0c:	bf8c      	ite	hi
 8013c0e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013c12:	2400      	movls	r4, #0
 8013c14:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013c18:	fa01 f000 	lsl.w	r0, r1, r0
 8013c1c:	fa24 f40c 	lsr.w	r4, r4, ip
 8013c20:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013c24:	ea40 0204 	orr.w	r2, r0, r4
 8013c28:	e7db      	b.n	8013be2 <__b2d+0x4a>
 8013c2a:	ea44 030c 	orr.w	r3, r4, ip
 8013c2e:	460a      	mov	r2, r1
 8013c30:	e7d7      	b.n	8013be2 <__b2d+0x4a>
 8013c32:	bf00      	nop
 8013c34:	3ff00000 	.word	0x3ff00000

08013c38 <__d2b>:
 8013c38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013c3c:	4689      	mov	r9, r1
 8013c3e:	2101      	movs	r1, #1
 8013c40:	ec57 6b10 	vmov	r6, r7, d0
 8013c44:	4690      	mov	r8, r2
 8013c46:	f7ff fc09 	bl	801345c <_Balloc>
 8013c4a:	4604      	mov	r4, r0
 8013c4c:	b930      	cbnz	r0, 8013c5c <__d2b+0x24>
 8013c4e:	4602      	mov	r2, r0
 8013c50:	4b25      	ldr	r3, [pc, #148]	; (8013ce8 <__d2b+0xb0>)
 8013c52:	4826      	ldr	r0, [pc, #152]	; (8013cec <__d2b+0xb4>)
 8013c54:	f240 310a 	movw	r1, #778	; 0x30a
 8013c58:	f000 ff56 	bl	8014b08 <__assert_func>
 8013c5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013c60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013c64:	bb35      	cbnz	r5, 8013cb4 <__d2b+0x7c>
 8013c66:	2e00      	cmp	r6, #0
 8013c68:	9301      	str	r3, [sp, #4]
 8013c6a:	d028      	beq.n	8013cbe <__d2b+0x86>
 8013c6c:	4668      	mov	r0, sp
 8013c6e:	9600      	str	r6, [sp, #0]
 8013c70:	f7ff fd06 	bl	8013680 <__lo0bits>
 8013c74:	9900      	ldr	r1, [sp, #0]
 8013c76:	b300      	cbz	r0, 8013cba <__d2b+0x82>
 8013c78:	9a01      	ldr	r2, [sp, #4]
 8013c7a:	f1c0 0320 	rsb	r3, r0, #32
 8013c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8013c82:	430b      	orrs	r3, r1
 8013c84:	40c2      	lsrs	r2, r0
 8013c86:	6163      	str	r3, [r4, #20]
 8013c88:	9201      	str	r2, [sp, #4]
 8013c8a:	9b01      	ldr	r3, [sp, #4]
 8013c8c:	61a3      	str	r3, [r4, #24]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	bf14      	ite	ne
 8013c92:	2202      	movne	r2, #2
 8013c94:	2201      	moveq	r2, #1
 8013c96:	6122      	str	r2, [r4, #16]
 8013c98:	b1d5      	cbz	r5, 8013cd0 <__d2b+0x98>
 8013c9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013c9e:	4405      	add	r5, r0
 8013ca0:	f8c9 5000 	str.w	r5, [r9]
 8013ca4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013ca8:	f8c8 0000 	str.w	r0, [r8]
 8013cac:	4620      	mov	r0, r4
 8013cae:	b003      	add	sp, #12
 8013cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013cb8:	e7d5      	b.n	8013c66 <__d2b+0x2e>
 8013cba:	6161      	str	r1, [r4, #20]
 8013cbc:	e7e5      	b.n	8013c8a <__d2b+0x52>
 8013cbe:	a801      	add	r0, sp, #4
 8013cc0:	f7ff fcde 	bl	8013680 <__lo0bits>
 8013cc4:	9b01      	ldr	r3, [sp, #4]
 8013cc6:	6163      	str	r3, [r4, #20]
 8013cc8:	2201      	movs	r2, #1
 8013cca:	6122      	str	r2, [r4, #16]
 8013ccc:	3020      	adds	r0, #32
 8013cce:	e7e3      	b.n	8013c98 <__d2b+0x60>
 8013cd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013cd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013cd8:	f8c9 0000 	str.w	r0, [r9]
 8013cdc:	6918      	ldr	r0, [r3, #16]
 8013cde:	f7ff fcaf 	bl	8013640 <__hi0bits>
 8013ce2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013ce6:	e7df      	b.n	8013ca8 <__d2b+0x70>
 8013ce8:	08015cf0 	.word	0x08015cf0
 8013cec:	08015d7c 	.word	0x08015d7c

08013cf0 <__ratio>:
 8013cf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cf4:	4688      	mov	r8, r1
 8013cf6:	4669      	mov	r1, sp
 8013cf8:	4681      	mov	r9, r0
 8013cfa:	f7ff ff4d 	bl	8013b98 <__b2d>
 8013cfe:	a901      	add	r1, sp, #4
 8013d00:	4640      	mov	r0, r8
 8013d02:	ec55 4b10 	vmov	r4, r5, d0
 8013d06:	f7ff ff47 	bl	8013b98 <__b2d>
 8013d0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013d0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013d12:	eba3 0c02 	sub.w	ip, r3, r2
 8013d16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013d1a:	1a9b      	subs	r3, r3, r2
 8013d1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013d20:	ec51 0b10 	vmov	r0, r1, d0
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	bfd6      	itet	le
 8013d28:	460a      	movle	r2, r1
 8013d2a:	462a      	movgt	r2, r5
 8013d2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013d30:	468b      	mov	fp, r1
 8013d32:	462f      	mov	r7, r5
 8013d34:	bfd4      	ite	le
 8013d36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013d3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013d3e:	4620      	mov	r0, r4
 8013d40:	ee10 2a10 	vmov	r2, s0
 8013d44:	465b      	mov	r3, fp
 8013d46:	4639      	mov	r1, r7
 8013d48:	f7ec fda0 	bl	800088c <__aeabi_ddiv>
 8013d4c:	ec41 0b10 	vmov	d0, r0, r1
 8013d50:	b003      	add	sp, #12
 8013d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013d56 <__copybits>:
 8013d56:	3901      	subs	r1, #1
 8013d58:	b570      	push	{r4, r5, r6, lr}
 8013d5a:	1149      	asrs	r1, r1, #5
 8013d5c:	6914      	ldr	r4, [r2, #16]
 8013d5e:	3101      	adds	r1, #1
 8013d60:	f102 0314 	add.w	r3, r2, #20
 8013d64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013d68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013d6c:	1f05      	subs	r5, r0, #4
 8013d6e:	42a3      	cmp	r3, r4
 8013d70:	d30c      	bcc.n	8013d8c <__copybits+0x36>
 8013d72:	1aa3      	subs	r3, r4, r2
 8013d74:	3b11      	subs	r3, #17
 8013d76:	f023 0303 	bic.w	r3, r3, #3
 8013d7a:	3211      	adds	r2, #17
 8013d7c:	42a2      	cmp	r2, r4
 8013d7e:	bf88      	it	hi
 8013d80:	2300      	movhi	r3, #0
 8013d82:	4418      	add	r0, r3
 8013d84:	2300      	movs	r3, #0
 8013d86:	4288      	cmp	r0, r1
 8013d88:	d305      	bcc.n	8013d96 <__copybits+0x40>
 8013d8a:	bd70      	pop	{r4, r5, r6, pc}
 8013d8c:	f853 6b04 	ldr.w	r6, [r3], #4
 8013d90:	f845 6f04 	str.w	r6, [r5, #4]!
 8013d94:	e7eb      	b.n	8013d6e <__copybits+0x18>
 8013d96:	f840 3b04 	str.w	r3, [r0], #4
 8013d9a:	e7f4      	b.n	8013d86 <__copybits+0x30>

08013d9c <__any_on>:
 8013d9c:	f100 0214 	add.w	r2, r0, #20
 8013da0:	6900      	ldr	r0, [r0, #16]
 8013da2:	114b      	asrs	r3, r1, #5
 8013da4:	4298      	cmp	r0, r3
 8013da6:	b510      	push	{r4, lr}
 8013da8:	db11      	blt.n	8013dce <__any_on+0x32>
 8013daa:	dd0a      	ble.n	8013dc2 <__any_on+0x26>
 8013dac:	f011 011f 	ands.w	r1, r1, #31
 8013db0:	d007      	beq.n	8013dc2 <__any_on+0x26>
 8013db2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013db6:	fa24 f001 	lsr.w	r0, r4, r1
 8013dba:	fa00 f101 	lsl.w	r1, r0, r1
 8013dbe:	428c      	cmp	r4, r1
 8013dc0:	d10b      	bne.n	8013dda <__any_on+0x3e>
 8013dc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013dc6:	4293      	cmp	r3, r2
 8013dc8:	d803      	bhi.n	8013dd2 <__any_on+0x36>
 8013dca:	2000      	movs	r0, #0
 8013dcc:	bd10      	pop	{r4, pc}
 8013dce:	4603      	mov	r3, r0
 8013dd0:	e7f7      	b.n	8013dc2 <__any_on+0x26>
 8013dd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013dd6:	2900      	cmp	r1, #0
 8013dd8:	d0f5      	beq.n	8013dc6 <__any_on+0x2a>
 8013dda:	2001      	movs	r0, #1
 8013ddc:	e7f6      	b.n	8013dcc <__any_on+0x30>

08013dde <_calloc_r>:
 8013dde:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013de0:	fba1 2402 	umull	r2, r4, r1, r2
 8013de4:	b94c      	cbnz	r4, 8013dfa <_calloc_r+0x1c>
 8013de6:	4611      	mov	r1, r2
 8013de8:	9201      	str	r2, [sp, #4]
 8013dea:	f000 f87b 	bl	8013ee4 <_malloc_r>
 8013dee:	9a01      	ldr	r2, [sp, #4]
 8013df0:	4605      	mov	r5, r0
 8013df2:	b930      	cbnz	r0, 8013e02 <_calloc_r+0x24>
 8013df4:	4628      	mov	r0, r5
 8013df6:	b003      	add	sp, #12
 8013df8:	bd30      	pop	{r4, r5, pc}
 8013dfa:	220c      	movs	r2, #12
 8013dfc:	6002      	str	r2, [r0, #0]
 8013dfe:	2500      	movs	r5, #0
 8013e00:	e7f8      	b.n	8013df4 <_calloc_r+0x16>
 8013e02:	4621      	mov	r1, r4
 8013e04:	f7fc fb08 	bl	8010418 <memset>
 8013e08:	e7f4      	b.n	8013df4 <_calloc_r+0x16>
	...

08013e0c <_free_r>:
 8013e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e0e:	2900      	cmp	r1, #0
 8013e10:	d044      	beq.n	8013e9c <_free_r+0x90>
 8013e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e16:	9001      	str	r0, [sp, #4]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	f1a1 0404 	sub.w	r4, r1, #4
 8013e1e:	bfb8      	it	lt
 8013e20:	18e4      	addlt	r4, r4, r3
 8013e22:	f001 f875 	bl	8014f10 <__malloc_lock>
 8013e26:	4a1e      	ldr	r2, [pc, #120]	; (8013ea0 <_free_r+0x94>)
 8013e28:	9801      	ldr	r0, [sp, #4]
 8013e2a:	6813      	ldr	r3, [r2, #0]
 8013e2c:	b933      	cbnz	r3, 8013e3c <_free_r+0x30>
 8013e2e:	6063      	str	r3, [r4, #4]
 8013e30:	6014      	str	r4, [r2, #0]
 8013e32:	b003      	add	sp, #12
 8013e34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e38:	f001 b870 	b.w	8014f1c <__malloc_unlock>
 8013e3c:	42a3      	cmp	r3, r4
 8013e3e:	d908      	bls.n	8013e52 <_free_r+0x46>
 8013e40:	6825      	ldr	r5, [r4, #0]
 8013e42:	1961      	adds	r1, r4, r5
 8013e44:	428b      	cmp	r3, r1
 8013e46:	bf01      	itttt	eq
 8013e48:	6819      	ldreq	r1, [r3, #0]
 8013e4a:	685b      	ldreq	r3, [r3, #4]
 8013e4c:	1949      	addeq	r1, r1, r5
 8013e4e:	6021      	streq	r1, [r4, #0]
 8013e50:	e7ed      	b.n	8013e2e <_free_r+0x22>
 8013e52:	461a      	mov	r2, r3
 8013e54:	685b      	ldr	r3, [r3, #4]
 8013e56:	b10b      	cbz	r3, 8013e5c <_free_r+0x50>
 8013e58:	42a3      	cmp	r3, r4
 8013e5a:	d9fa      	bls.n	8013e52 <_free_r+0x46>
 8013e5c:	6811      	ldr	r1, [r2, #0]
 8013e5e:	1855      	adds	r5, r2, r1
 8013e60:	42a5      	cmp	r5, r4
 8013e62:	d10b      	bne.n	8013e7c <_free_r+0x70>
 8013e64:	6824      	ldr	r4, [r4, #0]
 8013e66:	4421      	add	r1, r4
 8013e68:	1854      	adds	r4, r2, r1
 8013e6a:	42a3      	cmp	r3, r4
 8013e6c:	6011      	str	r1, [r2, #0]
 8013e6e:	d1e0      	bne.n	8013e32 <_free_r+0x26>
 8013e70:	681c      	ldr	r4, [r3, #0]
 8013e72:	685b      	ldr	r3, [r3, #4]
 8013e74:	6053      	str	r3, [r2, #4]
 8013e76:	4421      	add	r1, r4
 8013e78:	6011      	str	r1, [r2, #0]
 8013e7a:	e7da      	b.n	8013e32 <_free_r+0x26>
 8013e7c:	d902      	bls.n	8013e84 <_free_r+0x78>
 8013e7e:	230c      	movs	r3, #12
 8013e80:	6003      	str	r3, [r0, #0]
 8013e82:	e7d6      	b.n	8013e32 <_free_r+0x26>
 8013e84:	6825      	ldr	r5, [r4, #0]
 8013e86:	1961      	adds	r1, r4, r5
 8013e88:	428b      	cmp	r3, r1
 8013e8a:	bf04      	itt	eq
 8013e8c:	6819      	ldreq	r1, [r3, #0]
 8013e8e:	685b      	ldreq	r3, [r3, #4]
 8013e90:	6063      	str	r3, [r4, #4]
 8013e92:	bf04      	itt	eq
 8013e94:	1949      	addeq	r1, r1, r5
 8013e96:	6021      	streq	r1, [r4, #0]
 8013e98:	6054      	str	r4, [r2, #4]
 8013e9a:	e7ca      	b.n	8013e32 <_free_r+0x26>
 8013e9c:	b003      	add	sp, #12
 8013e9e:	bd30      	pop	{r4, r5, pc}
 8013ea0:	20000768 	.word	0x20000768

08013ea4 <sbrk_aligned>:
 8013ea4:	b570      	push	{r4, r5, r6, lr}
 8013ea6:	4e0e      	ldr	r6, [pc, #56]	; (8013ee0 <sbrk_aligned+0x3c>)
 8013ea8:	460c      	mov	r4, r1
 8013eaa:	6831      	ldr	r1, [r6, #0]
 8013eac:	4605      	mov	r5, r0
 8013eae:	b911      	cbnz	r1, 8013eb6 <sbrk_aligned+0x12>
 8013eb0:	f000 fd26 	bl	8014900 <_sbrk_r>
 8013eb4:	6030      	str	r0, [r6, #0]
 8013eb6:	4621      	mov	r1, r4
 8013eb8:	4628      	mov	r0, r5
 8013eba:	f000 fd21 	bl	8014900 <_sbrk_r>
 8013ebe:	1c43      	adds	r3, r0, #1
 8013ec0:	d00a      	beq.n	8013ed8 <sbrk_aligned+0x34>
 8013ec2:	1cc4      	adds	r4, r0, #3
 8013ec4:	f024 0403 	bic.w	r4, r4, #3
 8013ec8:	42a0      	cmp	r0, r4
 8013eca:	d007      	beq.n	8013edc <sbrk_aligned+0x38>
 8013ecc:	1a21      	subs	r1, r4, r0
 8013ece:	4628      	mov	r0, r5
 8013ed0:	f000 fd16 	bl	8014900 <_sbrk_r>
 8013ed4:	3001      	adds	r0, #1
 8013ed6:	d101      	bne.n	8013edc <sbrk_aligned+0x38>
 8013ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8013edc:	4620      	mov	r0, r4
 8013ede:	bd70      	pop	{r4, r5, r6, pc}
 8013ee0:	2000076c 	.word	0x2000076c

08013ee4 <_malloc_r>:
 8013ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ee8:	1ccd      	adds	r5, r1, #3
 8013eea:	f025 0503 	bic.w	r5, r5, #3
 8013eee:	3508      	adds	r5, #8
 8013ef0:	2d0c      	cmp	r5, #12
 8013ef2:	bf38      	it	cc
 8013ef4:	250c      	movcc	r5, #12
 8013ef6:	2d00      	cmp	r5, #0
 8013ef8:	4607      	mov	r7, r0
 8013efa:	db01      	blt.n	8013f00 <_malloc_r+0x1c>
 8013efc:	42a9      	cmp	r1, r5
 8013efe:	d905      	bls.n	8013f0c <_malloc_r+0x28>
 8013f00:	230c      	movs	r3, #12
 8013f02:	603b      	str	r3, [r7, #0]
 8013f04:	2600      	movs	r6, #0
 8013f06:	4630      	mov	r0, r6
 8013f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f0c:	4e2e      	ldr	r6, [pc, #184]	; (8013fc8 <_malloc_r+0xe4>)
 8013f0e:	f000 ffff 	bl	8014f10 <__malloc_lock>
 8013f12:	6833      	ldr	r3, [r6, #0]
 8013f14:	461c      	mov	r4, r3
 8013f16:	bb34      	cbnz	r4, 8013f66 <_malloc_r+0x82>
 8013f18:	4629      	mov	r1, r5
 8013f1a:	4638      	mov	r0, r7
 8013f1c:	f7ff ffc2 	bl	8013ea4 <sbrk_aligned>
 8013f20:	1c43      	adds	r3, r0, #1
 8013f22:	4604      	mov	r4, r0
 8013f24:	d14d      	bne.n	8013fc2 <_malloc_r+0xde>
 8013f26:	6834      	ldr	r4, [r6, #0]
 8013f28:	4626      	mov	r6, r4
 8013f2a:	2e00      	cmp	r6, #0
 8013f2c:	d140      	bne.n	8013fb0 <_malloc_r+0xcc>
 8013f2e:	6823      	ldr	r3, [r4, #0]
 8013f30:	4631      	mov	r1, r6
 8013f32:	4638      	mov	r0, r7
 8013f34:	eb04 0803 	add.w	r8, r4, r3
 8013f38:	f000 fce2 	bl	8014900 <_sbrk_r>
 8013f3c:	4580      	cmp	r8, r0
 8013f3e:	d13a      	bne.n	8013fb6 <_malloc_r+0xd2>
 8013f40:	6821      	ldr	r1, [r4, #0]
 8013f42:	3503      	adds	r5, #3
 8013f44:	1a6d      	subs	r5, r5, r1
 8013f46:	f025 0503 	bic.w	r5, r5, #3
 8013f4a:	3508      	adds	r5, #8
 8013f4c:	2d0c      	cmp	r5, #12
 8013f4e:	bf38      	it	cc
 8013f50:	250c      	movcc	r5, #12
 8013f52:	4629      	mov	r1, r5
 8013f54:	4638      	mov	r0, r7
 8013f56:	f7ff ffa5 	bl	8013ea4 <sbrk_aligned>
 8013f5a:	3001      	adds	r0, #1
 8013f5c:	d02b      	beq.n	8013fb6 <_malloc_r+0xd2>
 8013f5e:	6823      	ldr	r3, [r4, #0]
 8013f60:	442b      	add	r3, r5
 8013f62:	6023      	str	r3, [r4, #0]
 8013f64:	e00e      	b.n	8013f84 <_malloc_r+0xa0>
 8013f66:	6822      	ldr	r2, [r4, #0]
 8013f68:	1b52      	subs	r2, r2, r5
 8013f6a:	d41e      	bmi.n	8013faa <_malloc_r+0xc6>
 8013f6c:	2a0b      	cmp	r2, #11
 8013f6e:	d916      	bls.n	8013f9e <_malloc_r+0xba>
 8013f70:	1961      	adds	r1, r4, r5
 8013f72:	42a3      	cmp	r3, r4
 8013f74:	6025      	str	r5, [r4, #0]
 8013f76:	bf18      	it	ne
 8013f78:	6059      	strne	r1, [r3, #4]
 8013f7a:	6863      	ldr	r3, [r4, #4]
 8013f7c:	bf08      	it	eq
 8013f7e:	6031      	streq	r1, [r6, #0]
 8013f80:	5162      	str	r2, [r4, r5]
 8013f82:	604b      	str	r3, [r1, #4]
 8013f84:	4638      	mov	r0, r7
 8013f86:	f104 060b 	add.w	r6, r4, #11
 8013f8a:	f000 ffc7 	bl	8014f1c <__malloc_unlock>
 8013f8e:	f026 0607 	bic.w	r6, r6, #7
 8013f92:	1d23      	adds	r3, r4, #4
 8013f94:	1af2      	subs	r2, r6, r3
 8013f96:	d0b6      	beq.n	8013f06 <_malloc_r+0x22>
 8013f98:	1b9b      	subs	r3, r3, r6
 8013f9a:	50a3      	str	r3, [r4, r2]
 8013f9c:	e7b3      	b.n	8013f06 <_malloc_r+0x22>
 8013f9e:	6862      	ldr	r2, [r4, #4]
 8013fa0:	42a3      	cmp	r3, r4
 8013fa2:	bf0c      	ite	eq
 8013fa4:	6032      	streq	r2, [r6, #0]
 8013fa6:	605a      	strne	r2, [r3, #4]
 8013fa8:	e7ec      	b.n	8013f84 <_malloc_r+0xa0>
 8013faa:	4623      	mov	r3, r4
 8013fac:	6864      	ldr	r4, [r4, #4]
 8013fae:	e7b2      	b.n	8013f16 <_malloc_r+0x32>
 8013fb0:	4634      	mov	r4, r6
 8013fb2:	6876      	ldr	r6, [r6, #4]
 8013fb4:	e7b9      	b.n	8013f2a <_malloc_r+0x46>
 8013fb6:	230c      	movs	r3, #12
 8013fb8:	603b      	str	r3, [r7, #0]
 8013fba:	4638      	mov	r0, r7
 8013fbc:	f000 ffae 	bl	8014f1c <__malloc_unlock>
 8013fc0:	e7a1      	b.n	8013f06 <_malloc_r+0x22>
 8013fc2:	6025      	str	r5, [r4, #0]
 8013fc4:	e7de      	b.n	8013f84 <_malloc_r+0xa0>
 8013fc6:	bf00      	nop
 8013fc8:	20000768 	.word	0x20000768

08013fcc <__ssputs_r>:
 8013fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fd0:	688e      	ldr	r6, [r1, #8]
 8013fd2:	429e      	cmp	r6, r3
 8013fd4:	4682      	mov	sl, r0
 8013fd6:	460c      	mov	r4, r1
 8013fd8:	4690      	mov	r8, r2
 8013fda:	461f      	mov	r7, r3
 8013fdc:	d838      	bhi.n	8014050 <__ssputs_r+0x84>
 8013fde:	898a      	ldrh	r2, [r1, #12]
 8013fe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013fe4:	d032      	beq.n	801404c <__ssputs_r+0x80>
 8013fe6:	6825      	ldr	r5, [r4, #0]
 8013fe8:	6909      	ldr	r1, [r1, #16]
 8013fea:	eba5 0901 	sub.w	r9, r5, r1
 8013fee:	6965      	ldr	r5, [r4, #20]
 8013ff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013ff8:	3301      	adds	r3, #1
 8013ffa:	444b      	add	r3, r9
 8013ffc:	106d      	asrs	r5, r5, #1
 8013ffe:	429d      	cmp	r5, r3
 8014000:	bf38      	it	cc
 8014002:	461d      	movcc	r5, r3
 8014004:	0553      	lsls	r3, r2, #21
 8014006:	d531      	bpl.n	801406c <__ssputs_r+0xa0>
 8014008:	4629      	mov	r1, r5
 801400a:	f7ff ff6b 	bl	8013ee4 <_malloc_r>
 801400e:	4606      	mov	r6, r0
 8014010:	b950      	cbnz	r0, 8014028 <__ssputs_r+0x5c>
 8014012:	230c      	movs	r3, #12
 8014014:	f8ca 3000 	str.w	r3, [sl]
 8014018:	89a3      	ldrh	r3, [r4, #12]
 801401a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801401e:	81a3      	strh	r3, [r4, #12]
 8014020:	f04f 30ff 	mov.w	r0, #4294967295
 8014024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014028:	6921      	ldr	r1, [r4, #16]
 801402a:	464a      	mov	r2, r9
 801402c:	f7fc f9e6 	bl	80103fc <memcpy>
 8014030:	89a3      	ldrh	r3, [r4, #12]
 8014032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801403a:	81a3      	strh	r3, [r4, #12]
 801403c:	6126      	str	r6, [r4, #16]
 801403e:	6165      	str	r5, [r4, #20]
 8014040:	444e      	add	r6, r9
 8014042:	eba5 0509 	sub.w	r5, r5, r9
 8014046:	6026      	str	r6, [r4, #0]
 8014048:	60a5      	str	r5, [r4, #8]
 801404a:	463e      	mov	r6, r7
 801404c:	42be      	cmp	r6, r7
 801404e:	d900      	bls.n	8014052 <__ssputs_r+0x86>
 8014050:	463e      	mov	r6, r7
 8014052:	6820      	ldr	r0, [r4, #0]
 8014054:	4632      	mov	r2, r6
 8014056:	4641      	mov	r1, r8
 8014058:	f000 ff40 	bl	8014edc <memmove>
 801405c:	68a3      	ldr	r3, [r4, #8]
 801405e:	1b9b      	subs	r3, r3, r6
 8014060:	60a3      	str	r3, [r4, #8]
 8014062:	6823      	ldr	r3, [r4, #0]
 8014064:	4433      	add	r3, r6
 8014066:	6023      	str	r3, [r4, #0]
 8014068:	2000      	movs	r0, #0
 801406a:	e7db      	b.n	8014024 <__ssputs_r+0x58>
 801406c:	462a      	mov	r2, r5
 801406e:	f000 ff5b 	bl	8014f28 <_realloc_r>
 8014072:	4606      	mov	r6, r0
 8014074:	2800      	cmp	r0, #0
 8014076:	d1e1      	bne.n	801403c <__ssputs_r+0x70>
 8014078:	6921      	ldr	r1, [r4, #16]
 801407a:	4650      	mov	r0, sl
 801407c:	f7ff fec6 	bl	8013e0c <_free_r>
 8014080:	e7c7      	b.n	8014012 <__ssputs_r+0x46>
	...

08014084 <_svfiprintf_r>:
 8014084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014088:	4698      	mov	r8, r3
 801408a:	898b      	ldrh	r3, [r1, #12]
 801408c:	061b      	lsls	r3, r3, #24
 801408e:	b09d      	sub	sp, #116	; 0x74
 8014090:	4607      	mov	r7, r0
 8014092:	460d      	mov	r5, r1
 8014094:	4614      	mov	r4, r2
 8014096:	d50e      	bpl.n	80140b6 <_svfiprintf_r+0x32>
 8014098:	690b      	ldr	r3, [r1, #16]
 801409a:	b963      	cbnz	r3, 80140b6 <_svfiprintf_r+0x32>
 801409c:	2140      	movs	r1, #64	; 0x40
 801409e:	f7ff ff21 	bl	8013ee4 <_malloc_r>
 80140a2:	6028      	str	r0, [r5, #0]
 80140a4:	6128      	str	r0, [r5, #16]
 80140a6:	b920      	cbnz	r0, 80140b2 <_svfiprintf_r+0x2e>
 80140a8:	230c      	movs	r3, #12
 80140aa:	603b      	str	r3, [r7, #0]
 80140ac:	f04f 30ff 	mov.w	r0, #4294967295
 80140b0:	e0d1      	b.n	8014256 <_svfiprintf_r+0x1d2>
 80140b2:	2340      	movs	r3, #64	; 0x40
 80140b4:	616b      	str	r3, [r5, #20]
 80140b6:	2300      	movs	r3, #0
 80140b8:	9309      	str	r3, [sp, #36]	; 0x24
 80140ba:	2320      	movs	r3, #32
 80140bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80140c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80140c4:	2330      	movs	r3, #48	; 0x30
 80140c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014270 <_svfiprintf_r+0x1ec>
 80140ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80140ce:	f04f 0901 	mov.w	r9, #1
 80140d2:	4623      	mov	r3, r4
 80140d4:	469a      	mov	sl, r3
 80140d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80140da:	b10a      	cbz	r2, 80140e0 <_svfiprintf_r+0x5c>
 80140dc:	2a25      	cmp	r2, #37	; 0x25
 80140de:	d1f9      	bne.n	80140d4 <_svfiprintf_r+0x50>
 80140e0:	ebba 0b04 	subs.w	fp, sl, r4
 80140e4:	d00b      	beq.n	80140fe <_svfiprintf_r+0x7a>
 80140e6:	465b      	mov	r3, fp
 80140e8:	4622      	mov	r2, r4
 80140ea:	4629      	mov	r1, r5
 80140ec:	4638      	mov	r0, r7
 80140ee:	f7ff ff6d 	bl	8013fcc <__ssputs_r>
 80140f2:	3001      	adds	r0, #1
 80140f4:	f000 80aa 	beq.w	801424c <_svfiprintf_r+0x1c8>
 80140f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80140fa:	445a      	add	r2, fp
 80140fc:	9209      	str	r2, [sp, #36]	; 0x24
 80140fe:	f89a 3000 	ldrb.w	r3, [sl]
 8014102:	2b00      	cmp	r3, #0
 8014104:	f000 80a2 	beq.w	801424c <_svfiprintf_r+0x1c8>
 8014108:	2300      	movs	r3, #0
 801410a:	f04f 32ff 	mov.w	r2, #4294967295
 801410e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014112:	f10a 0a01 	add.w	sl, sl, #1
 8014116:	9304      	str	r3, [sp, #16]
 8014118:	9307      	str	r3, [sp, #28]
 801411a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801411e:	931a      	str	r3, [sp, #104]	; 0x68
 8014120:	4654      	mov	r4, sl
 8014122:	2205      	movs	r2, #5
 8014124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014128:	4851      	ldr	r0, [pc, #324]	; (8014270 <_svfiprintf_r+0x1ec>)
 801412a:	f7ec f879 	bl	8000220 <memchr>
 801412e:	9a04      	ldr	r2, [sp, #16]
 8014130:	b9d8      	cbnz	r0, 801416a <_svfiprintf_r+0xe6>
 8014132:	06d0      	lsls	r0, r2, #27
 8014134:	bf44      	itt	mi
 8014136:	2320      	movmi	r3, #32
 8014138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801413c:	0711      	lsls	r1, r2, #28
 801413e:	bf44      	itt	mi
 8014140:	232b      	movmi	r3, #43	; 0x2b
 8014142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014146:	f89a 3000 	ldrb.w	r3, [sl]
 801414a:	2b2a      	cmp	r3, #42	; 0x2a
 801414c:	d015      	beq.n	801417a <_svfiprintf_r+0xf6>
 801414e:	9a07      	ldr	r2, [sp, #28]
 8014150:	4654      	mov	r4, sl
 8014152:	2000      	movs	r0, #0
 8014154:	f04f 0c0a 	mov.w	ip, #10
 8014158:	4621      	mov	r1, r4
 801415a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801415e:	3b30      	subs	r3, #48	; 0x30
 8014160:	2b09      	cmp	r3, #9
 8014162:	d94e      	bls.n	8014202 <_svfiprintf_r+0x17e>
 8014164:	b1b0      	cbz	r0, 8014194 <_svfiprintf_r+0x110>
 8014166:	9207      	str	r2, [sp, #28]
 8014168:	e014      	b.n	8014194 <_svfiprintf_r+0x110>
 801416a:	eba0 0308 	sub.w	r3, r0, r8
 801416e:	fa09 f303 	lsl.w	r3, r9, r3
 8014172:	4313      	orrs	r3, r2
 8014174:	9304      	str	r3, [sp, #16]
 8014176:	46a2      	mov	sl, r4
 8014178:	e7d2      	b.n	8014120 <_svfiprintf_r+0x9c>
 801417a:	9b03      	ldr	r3, [sp, #12]
 801417c:	1d19      	adds	r1, r3, #4
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	9103      	str	r1, [sp, #12]
 8014182:	2b00      	cmp	r3, #0
 8014184:	bfbb      	ittet	lt
 8014186:	425b      	neglt	r3, r3
 8014188:	f042 0202 	orrlt.w	r2, r2, #2
 801418c:	9307      	strge	r3, [sp, #28]
 801418e:	9307      	strlt	r3, [sp, #28]
 8014190:	bfb8      	it	lt
 8014192:	9204      	strlt	r2, [sp, #16]
 8014194:	7823      	ldrb	r3, [r4, #0]
 8014196:	2b2e      	cmp	r3, #46	; 0x2e
 8014198:	d10c      	bne.n	80141b4 <_svfiprintf_r+0x130>
 801419a:	7863      	ldrb	r3, [r4, #1]
 801419c:	2b2a      	cmp	r3, #42	; 0x2a
 801419e:	d135      	bne.n	801420c <_svfiprintf_r+0x188>
 80141a0:	9b03      	ldr	r3, [sp, #12]
 80141a2:	1d1a      	adds	r2, r3, #4
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	9203      	str	r2, [sp, #12]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	bfb8      	it	lt
 80141ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80141b0:	3402      	adds	r4, #2
 80141b2:	9305      	str	r3, [sp, #20]
 80141b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014280 <_svfiprintf_r+0x1fc>
 80141b8:	7821      	ldrb	r1, [r4, #0]
 80141ba:	2203      	movs	r2, #3
 80141bc:	4650      	mov	r0, sl
 80141be:	f7ec f82f 	bl	8000220 <memchr>
 80141c2:	b140      	cbz	r0, 80141d6 <_svfiprintf_r+0x152>
 80141c4:	2340      	movs	r3, #64	; 0x40
 80141c6:	eba0 000a 	sub.w	r0, r0, sl
 80141ca:	fa03 f000 	lsl.w	r0, r3, r0
 80141ce:	9b04      	ldr	r3, [sp, #16]
 80141d0:	4303      	orrs	r3, r0
 80141d2:	3401      	adds	r4, #1
 80141d4:	9304      	str	r3, [sp, #16]
 80141d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141da:	4826      	ldr	r0, [pc, #152]	; (8014274 <_svfiprintf_r+0x1f0>)
 80141dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80141e0:	2206      	movs	r2, #6
 80141e2:	f7ec f81d 	bl	8000220 <memchr>
 80141e6:	2800      	cmp	r0, #0
 80141e8:	d038      	beq.n	801425c <_svfiprintf_r+0x1d8>
 80141ea:	4b23      	ldr	r3, [pc, #140]	; (8014278 <_svfiprintf_r+0x1f4>)
 80141ec:	bb1b      	cbnz	r3, 8014236 <_svfiprintf_r+0x1b2>
 80141ee:	9b03      	ldr	r3, [sp, #12]
 80141f0:	3307      	adds	r3, #7
 80141f2:	f023 0307 	bic.w	r3, r3, #7
 80141f6:	3308      	adds	r3, #8
 80141f8:	9303      	str	r3, [sp, #12]
 80141fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141fc:	4433      	add	r3, r6
 80141fe:	9309      	str	r3, [sp, #36]	; 0x24
 8014200:	e767      	b.n	80140d2 <_svfiprintf_r+0x4e>
 8014202:	fb0c 3202 	mla	r2, ip, r2, r3
 8014206:	460c      	mov	r4, r1
 8014208:	2001      	movs	r0, #1
 801420a:	e7a5      	b.n	8014158 <_svfiprintf_r+0xd4>
 801420c:	2300      	movs	r3, #0
 801420e:	3401      	adds	r4, #1
 8014210:	9305      	str	r3, [sp, #20]
 8014212:	4619      	mov	r1, r3
 8014214:	f04f 0c0a 	mov.w	ip, #10
 8014218:	4620      	mov	r0, r4
 801421a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801421e:	3a30      	subs	r2, #48	; 0x30
 8014220:	2a09      	cmp	r2, #9
 8014222:	d903      	bls.n	801422c <_svfiprintf_r+0x1a8>
 8014224:	2b00      	cmp	r3, #0
 8014226:	d0c5      	beq.n	80141b4 <_svfiprintf_r+0x130>
 8014228:	9105      	str	r1, [sp, #20]
 801422a:	e7c3      	b.n	80141b4 <_svfiprintf_r+0x130>
 801422c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014230:	4604      	mov	r4, r0
 8014232:	2301      	movs	r3, #1
 8014234:	e7f0      	b.n	8014218 <_svfiprintf_r+0x194>
 8014236:	ab03      	add	r3, sp, #12
 8014238:	9300      	str	r3, [sp, #0]
 801423a:	462a      	mov	r2, r5
 801423c:	4b0f      	ldr	r3, [pc, #60]	; (801427c <_svfiprintf_r+0x1f8>)
 801423e:	a904      	add	r1, sp, #16
 8014240:	4638      	mov	r0, r7
 8014242:	f7fc f991 	bl	8010568 <_printf_float>
 8014246:	1c42      	adds	r2, r0, #1
 8014248:	4606      	mov	r6, r0
 801424a:	d1d6      	bne.n	80141fa <_svfiprintf_r+0x176>
 801424c:	89ab      	ldrh	r3, [r5, #12]
 801424e:	065b      	lsls	r3, r3, #25
 8014250:	f53f af2c 	bmi.w	80140ac <_svfiprintf_r+0x28>
 8014254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014256:	b01d      	add	sp, #116	; 0x74
 8014258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801425c:	ab03      	add	r3, sp, #12
 801425e:	9300      	str	r3, [sp, #0]
 8014260:	462a      	mov	r2, r5
 8014262:	4b06      	ldr	r3, [pc, #24]	; (801427c <_svfiprintf_r+0x1f8>)
 8014264:	a904      	add	r1, sp, #16
 8014266:	4638      	mov	r0, r7
 8014268:	f7fc fc22 	bl	8010ab0 <_printf_i>
 801426c:	e7eb      	b.n	8014246 <_svfiprintf_r+0x1c2>
 801426e:	bf00      	nop
 8014270:	08015ed4 	.word	0x08015ed4
 8014274:	08015ede 	.word	0x08015ede
 8014278:	08010569 	.word	0x08010569
 801427c:	08013fcd 	.word	0x08013fcd
 8014280:	08015eda 	.word	0x08015eda

08014284 <_sungetc_r>:
 8014284:	b538      	push	{r3, r4, r5, lr}
 8014286:	1c4b      	adds	r3, r1, #1
 8014288:	4614      	mov	r4, r2
 801428a:	d103      	bne.n	8014294 <_sungetc_r+0x10>
 801428c:	f04f 35ff 	mov.w	r5, #4294967295
 8014290:	4628      	mov	r0, r5
 8014292:	bd38      	pop	{r3, r4, r5, pc}
 8014294:	8993      	ldrh	r3, [r2, #12]
 8014296:	f023 0320 	bic.w	r3, r3, #32
 801429a:	8193      	strh	r3, [r2, #12]
 801429c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801429e:	6852      	ldr	r2, [r2, #4]
 80142a0:	b2cd      	uxtb	r5, r1
 80142a2:	b18b      	cbz	r3, 80142c8 <_sungetc_r+0x44>
 80142a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80142a6:	4293      	cmp	r3, r2
 80142a8:	dd08      	ble.n	80142bc <_sungetc_r+0x38>
 80142aa:	6823      	ldr	r3, [r4, #0]
 80142ac:	1e5a      	subs	r2, r3, #1
 80142ae:	6022      	str	r2, [r4, #0]
 80142b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80142b4:	6863      	ldr	r3, [r4, #4]
 80142b6:	3301      	adds	r3, #1
 80142b8:	6063      	str	r3, [r4, #4]
 80142ba:	e7e9      	b.n	8014290 <_sungetc_r+0xc>
 80142bc:	4621      	mov	r1, r4
 80142be:	f000 fbdb 	bl	8014a78 <__submore>
 80142c2:	2800      	cmp	r0, #0
 80142c4:	d0f1      	beq.n	80142aa <_sungetc_r+0x26>
 80142c6:	e7e1      	b.n	801428c <_sungetc_r+0x8>
 80142c8:	6921      	ldr	r1, [r4, #16]
 80142ca:	6823      	ldr	r3, [r4, #0]
 80142cc:	b151      	cbz	r1, 80142e4 <_sungetc_r+0x60>
 80142ce:	4299      	cmp	r1, r3
 80142d0:	d208      	bcs.n	80142e4 <_sungetc_r+0x60>
 80142d2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80142d6:	42a9      	cmp	r1, r5
 80142d8:	d104      	bne.n	80142e4 <_sungetc_r+0x60>
 80142da:	3b01      	subs	r3, #1
 80142dc:	3201      	adds	r2, #1
 80142de:	6023      	str	r3, [r4, #0]
 80142e0:	6062      	str	r2, [r4, #4]
 80142e2:	e7d5      	b.n	8014290 <_sungetc_r+0xc>
 80142e4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80142e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80142ec:	6363      	str	r3, [r4, #52]	; 0x34
 80142ee:	2303      	movs	r3, #3
 80142f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80142f2:	4623      	mov	r3, r4
 80142f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80142f8:	6023      	str	r3, [r4, #0]
 80142fa:	2301      	movs	r3, #1
 80142fc:	e7dc      	b.n	80142b8 <_sungetc_r+0x34>

080142fe <__ssrefill_r>:
 80142fe:	b510      	push	{r4, lr}
 8014300:	460c      	mov	r4, r1
 8014302:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014304:	b169      	cbz	r1, 8014322 <__ssrefill_r+0x24>
 8014306:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801430a:	4299      	cmp	r1, r3
 801430c:	d001      	beq.n	8014312 <__ssrefill_r+0x14>
 801430e:	f7ff fd7d 	bl	8013e0c <_free_r>
 8014312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014314:	6063      	str	r3, [r4, #4]
 8014316:	2000      	movs	r0, #0
 8014318:	6360      	str	r0, [r4, #52]	; 0x34
 801431a:	b113      	cbz	r3, 8014322 <__ssrefill_r+0x24>
 801431c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801431e:	6023      	str	r3, [r4, #0]
 8014320:	bd10      	pop	{r4, pc}
 8014322:	6923      	ldr	r3, [r4, #16]
 8014324:	6023      	str	r3, [r4, #0]
 8014326:	2300      	movs	r3, #0
 8014328:	6063      	str	r3, [r4, #4]
 801432a:	89a3      	ldrh	r3, [r4, #12]
 801432c:	f043 0320 	orr.w	r3, r3, #32
 8014330:	81a3      	strh	r3, [r4, #12]
 8014332:	f04f 30ff 	mov.w	r0, #4294967295
 8014336:	e7f3      	b.n	8014320 <__ssrefill_r+0x22>

08014338 <__ssvfiscanf_r>:
 8014338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801433c:	460c      	mov	r4, r1
 801433e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8014342:	2100      	movs	r1, #0
 8014344:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8014348:	49a6      	ldr	r1, [pc, #664]	; (80145e4 <__ssvfiscanf_r+0x2ac>)
 801434a:	91a0      	str	r1, [sp, #640]	; 0x280
 801434c:	f10d 0804 	add.w	r8, sp, #4
 8014350:	49a5      	ldr	r1, [pc, #660]	; (80145e8 <__ssvfiscanf_r+0x2b0>)
 8014352:	4fa6      	ldr	r7, [pc, #664]	; (80145ec <__ssvfiscanf_r+0x2b4>)
 8014354:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80145f0 <__ssvfiscanf_r+0x2b8>
 8014358:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801435c:	4606      	mov	r6, r0
 801435e:	91a1      	str	r1, [sp, #644]	; 0x284
 8014360:	9300      	str	r3, [sp, #0]
 8014362:	7813      	ldrb	r3, [r2, #0]
 8014364:	2b00      	cmp	r3, #0
 8014366:	f000 815a 	beq.w	801461e <__ssvfiscanf_r+0x2e6>
 801436a:	5dd9      	ldrb	r1, [r3, r7]
 801436c:	f011 0108 	ands.w	r1, r1, #8
 8014370:	f102 0501 	add.w	r5, r2, #1
 8014374:	d019      	beq.n	80143aa <__ssvfiscanf_r+0x72>
 8014376:	6863      	ldr	r3, [r4, #4]
 8014378:	2b00      	cmp	r3, #0
 801437a:	dd0f      	ble.n	801439c <__ssvfiscanf_r+0x64>
 801437c:	6823      	ldr	r3, [r4, #0]
 801437e:	781a      	ldrb	r2, [r3, #0]
 8014380:	5cba      	ldrb	r2, [r7, r2]
 8014382:	0712      	lsls	r2, r2, #28
 8014384:	d401      	bmi.n	801438a <__ssvfiscanf_r+0x52>
 8014386:	462a      	mov	r2, r5
 8014388:	e7eb      	b.n	8014362 <__ssvfiscanf_r+0x2a>
 801438a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801438c:	3201      	adds	r2, #1
 801438e:	9245      	str	r2, [sp, #276]	; 0x114
 8014390:	6862      	ldr	r2, [r4, #4]
 8014392:	3301      	adds	r3, #1
 8014394:	3a01      	subs	r2, #1
 8014396:	6062      	str	r2, [r4, #4]
 8014398:	6023      	str	r3, [r4, #0]
 801439a:	e7ec      	b.n	8014376 <__ssvfiscanf_r+0x3e>
 801439c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801439e:	4621      	mov	r1, r4
 80143a0:	4630      	mov	r0, r6
 80143a2:	4798      	blx	r3
 80143a4:	2800      	cmp	r0, #0
 80143a6:	d0e9      	beq.n	801437c <__ssvfiscanf_r+0x44>
 80143a8:	e7ed      	b.n	8014386 <__ssvfiscanf_r+0x4e>
 80143aa:	2b25      	cmp	r3, #37	; 0x25
 80143ac:	d012      	beq.n	80143d4 <__ssvfiscanf_r+0x9c>
 80143ae:	469a      	mov	sl, r3
 80143b0:	6863      	ldr	r3, [r4, #4]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	f340 8091 	ble.w	80144da <__ssvfiscanf_r+0x1a2>
 80143b8:	6822      	ldr	r2, [r4, #0]
 80143ba:	7813      	ldrb	r3, [r2, #0]
 80143bc:	4553      	cmp	r3, sl
 80143be:	f040 812e 	bne.w	801461e <__ssvfiscanf_r+0x2e6>
 80143c2:	6863      	ldr	r3, [r4, #4]
 80143c4:	3b01      	subs	r3, #1
 80143c6:	6063      	str	r3, [r4, #4]
 80143c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80143ca:	3201      	adds	r2, #1
 80143cc:	3301      	adds	r3, #1
 80143ce:	6022      	str	r2, [r4, #0]
 80143d0:	9345      	str	r3, [sp, #276]	; 0x114
 80143d2:	e7d8      	b.n	8014386 <__ssvfiscanf_r+0x4e>
 80143d4:	9141      	str	r1, [sp, #260]	; 0x104
 80143d6:	9143      	str	r1, [sp, #268]	; 0x10c
 80143d8:	7853      	ldrb	r3, [r2, #1]
 80143da:	2b2a      	cmp	r3, #42	; 0x2a
 80143dc:	bf02      	ittt	eq
 80143de:	2310      	moveq	r3, #16
 80143e0:	1c95      	addeq	r5, r2, #2
 80143e2:	9341      	streq	r3, [sp, #260]	; 0x104
 80143e4:	220a      	movs	r2, #10
 80143e6:	46aa      	mov	sl, r5
 80143e8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80143ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80143f0:	2b09      	cmp	r3, #9
 80143f2:	d91d      	bls.n	8014430 <__ssvfiscanf_r+0xf8>
 80143f4:	487e      	ldr	r0, [pc, #504]	; (80145f0 <__ssvfiscanf_r+0x2b8>)
 80143f6:	2203      	movs	r2, #3
 80143f8:	f7eb ff12 	bl	8000220 <memchr>
 80143fc:	b140      	cbz	r0, 8014410 <__ssvfiscanf_r+0xd8>
 80143fe:	2301      	movs	r3, #1
 8014400:	eba0 0009 	sub.w	r0, r0, r9
 8014404:	fa03 f000 	lsl.w	r0, r3, r0
 8014408:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801440a:	4318      	orrs	r0, r3
 801440c:	9041      	str	r0, [sp, #260]	; 0x104
 801440e:	4655      	mov	r5, sl
 8014410:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014414:	2b78      	cmp	r3, #120	; 0x78
 8014416:	d806      	bhi.n	8014426 <__ssvfiscanf_r+0xee>
 8014418:	2b57      	cmp	r3, #87	; 0x57
 801441a:	d810      	bhi.n	801443e <__ssvfiscanf_r+0x106>
 801441c:	2b25      	cmp	r3, #37	; 0x25
 801441e:	d0c6      	beq.n	80143ae <__ssvfiscanf_r+0x76>
 8014420:	d856      	bhi.n	80144d0 <__ssvfiscanf_r+0x198>
 8014422:	2b00      	cmp	r3, #0
 8014424:	d064      	beq.n	80144f0 <__ssvfiscanf_r+0x1b8>
 8014426:	2303      	movs	r3, #3
 8014428:	9347      	str	r3, [sp, #284]	; 0x11c
 801442a:	230a      	movs	r3, #10
 801442c:	9342      	str	r3, [sp, #264]	; 0x108
 801442e:	e071      	b.n	8014514 <__ssvfiscanf_r+0x1dc>
 8014430:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8014432:	fb02 1103 	mla	r1, r2, r3, r1
 8014436:	3930      	subs	r1, #48	; 0x30
 8014438:	9143      	str	r1, [sp, #268]	; 0x10c
 801443a:	4655      	mov	r5, sl
 801443c:	e7d3      	b.n	80143e6 <__ssvfiscanf_r+0xae>
 801443e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8014442:	2a20      	cmp	r2, #32
 8014444:	d8ef      	bhi.n	8014426 <__ssvfiscanf_r+0xee>
 8014446:	a101      	add	r1, pc, #4	; (adr r1, 801444c <__ssvfiscanf_r+0x114>)
 8014448:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801444c:	080144ff 	.word	0x080144ff
 8014450:	08014427 	.word	0x08014427
 8014454:	08014427 	.word	0x08014427
 8014458:	0801455d 	.word	0x0801455d
 801445c:	08014427 	.word	0x08014427
 8014460:	08014427 	.word	0x08014427
 8014464:	08014427 	.word	0x08014427
 8014468:	08014427 	.word	0x08014427
 801446c:	08014427 	.word	0x08014427
 8014470:	08014427 	.word	0x08014427
 8014474:	08014427 	.word	0x08014427
 8014478:	08014573 	.word	0x08014573
 801447c:	08014549 	.word	0x08014549
 8014480:	080144d7 	.word	0x080144d7
 8014484:	080144d7 	.word	0x080144d7
 8014488:	080144d7 	.word	0x080144d7
 801448c:	08014427 	.word	0x08014427
 8014490:	0801454d 	.word	0x0801454d
 8014494:	08014427 	.word	0x08014427
 8014498:	08014427 	.word	0x08014427
 801449c:	08014427 	.word	0x08014427
 80144a0:	08014427 	.word	0x08014427
 80144a4:	08014583 	.word	0x08014583
 80144a8:	08014555 	.word	0x08014555
 80144ac:	080144f7 	.word	0x080144f7
 80144b0:	08014427 	.word	0x08014427
 80144b4:	08014427 	.word	0x08014427
 80144b8:	0801457f 	.word	0x0801457f
 80144bc:	08014427 	.word	0x08014427
 80144c0:	08014549 	.word	0x08014549
 80144c4:	08014427 	.word	0x08014427
 80144c8:	08014427 	.word	0x08014427
 80144cc:	080144ff 	.word	0x080144ff
 80144d0:	3b45      	subs	r3, #69	; 0x45
 80144d2:	2b02      	cmp	r3, #2
 80144d4:	d8a7      	bhi.n	8014426 <__ssvfiscanf_r+0xee>
 80144d6:	2305      	movs	r3, #5
 80144d8:	e01b      	b.n	8014512 <__ssvfiscanf_r+0x1da>
 80144da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80144dc:	4621      	mov	r1, r4
 80144de:	4630      	mov	r0, r6
 80144e0:	4798      	blx	r3
 80144e2:	2800      	cmp	r0, #0
 80144e4:	f43f af68 	beq.w	80143b8 <__ssvfiscanf_r+0x80>
 80144e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80144ea:	2800      	cmp	r0, #0
 80144ec:	f040 808d 	bne.w	801460a <__ssvfiscanf_r+0x2d2>
 80144f0:	f04f 30ff 	mov.w	r0, #4294967295
 80144f4:	e08f      	b.n	8014616 <__ssvfiscanf_r+0x2de>
 80144f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80144f8:	f042 0220 	orr.w	r2, r2, #32
 80144fc:	9241      	str	r2, [sp, #260]	; 0x104
 80144fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014504:	9241      	str	r2, [sp, #260]	; 0x104
 8014506:	2210      	movs	r2, #16
 8014508:	2b6f      	cmp	r3, #111	; 0x6f
 801450a:	9242      	str	r2, [sp, #264]	; 0x108
 801450c:	bf34      	ite	cc
 801450e:	2303      	movcc	r3, #3
 8014510:	2304      	movcs	r3, #4
 8014512:	9347      	str	r3, [sp, #284]	; 0x11c
 8014514:	6863      	ldr	r3, [r4, #4]
 8014516:	2b00      	cmp	r3, #0
 8014518:	dd42      	ble.n	80145a0 <__ssvfiscanf_r+0x268>
 801451a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801451c:	0659      	lsls	r1, r3, #25
 801451e:	d404      	bmi.n	801452a <__ssvfiscanf_r+0x1f2>
 8014520:	6823      	ldr	r3, [r4, #0]
 8014522:	781a      	ldrb	r2, [r3, #0]
 8014524:	5cba      	ldrb	r2, [r7, r2]
 8014526:	0712      	lsls	r2, r2, #28
 8014528:	d441      	bmi.n	80145ae <__ssvfiscanf_r+0x276>
 801452a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801452c:	2b02      	cmp	r3, #2
 801452e:	dc50      	bgt.n	80145d2 <__ssvfiscanf_r+0x29a>
 8014530:	466b      	mov	r3, sp
 8014532:	4622      	mov	r2, r4
 8014534:	a941      	add	r1, sp, #260	; 0x104
 8014536:	4630      	mov	r0, r6
 8014538:	f000 f876 	bl	8014628 <_scanf_chars>
 801453c:	2801      	cmp	r0, #1
 801453e:	d06e      	beq.n	801461e <__ssvfiscanf_r+0x2e6>
 8014540:	2802      	cmp	r0, #2
 8014542:	f47f af20 	bne.w	8014386 <__ssvfiscanf_r+0x4e>
 8014546:	e7cf      	b.n	80144e8 <__ssvfiscanf_r+0x1b0>
 8014548:	220a      	movs	r2, #10
 801454a:	e7dd      	b.n	8014508 <__ssvfiscanf_r+0x1d0>
 801454c:	2300      	movs	r3, #0
 801454e:	9342      	str	r3, [sp, #264]	; 0x108
 8014550:	2303      	movs	r3, #3
 8014552:	e7de      	b.n	8014512 <__ssvfiscanf_r+0x1da>
 8014554:	2308      	movs	r3, #8
 8014556:	9342      	str	r3, [sp, #264]	; 0x108
 8014558:	2304      	movs	r3, #4
 801455a:	e7da      	b.n	8014512 <__ssvfiscanf_r+0x1da>
 801455c:	4629      	mov	r1, r5
 801455e:	4640      	mov	r0, r8
 8014560:	f000 f9de 	bl	8014920 <__sccl>
 8014564:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801456a:	9341      	str	r3, [sp, #260]	; 0x104
 801456c:	4605      	mov	r5, r0
 801456e:	2301      	movs	r3, #1
 8014570:	e7cf      	b.n	8014512 <__ssvfiscanf_r+0x1da>
 8014572:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014578:	9341      	str	r3, [sp, #260]	; 0x104
 801457a:	2300      	movs	r3, #0
 801457c:	e7c9      	b.n	8014512 <__ssvfiscanf_r+0x1da>
 801457e:	2302      	movs	r3, #2
 8014580:	e7c7      	b.n	8014512 <__ssvfiscanf_r+0x1da>
 8014582:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014584:	06c3      	lsls	r3, r0, #27
 8014586:	f53f aefe 	bmi.w	8014386 <__ssvfiscanf_r+0x4e>
 801458a:	9b00      	ldr	r3, [sp, #0]
 801458c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801458e:	1d19      	adds	r1, r3, #4
 8014590:	9100      	str	r1, [sp, #0]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	f010 0f01 	tst.w	r0, #1
 8014598:	bf14      	ite	ne
 801459a:	801a      	strhne	r2, [r3, #0]
 801459c:	601a      	streq	r2, [r3, #0]
 801459e:	e6f2      	b.n	8014386 <__ssvfiscanf_r+0x4e>
 80145a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80145a2:	4621      	mov	r1, r4
 80145a4:	4630      	mov	r0, r6
 80145a6:	4798      	blx	r3
 80145a8:	2800      	cmp	r0, #0
 80145aa:	d0b6      	beq.n	801451a <__ssvfiscanf_r+0x1e2>
 80145ac:	e79c      	b.n	80144e8 <__ssvfiscanf_r+0x1b0>
 80145ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80145b0:	3201      	adds	r2, #1
 80145b2:	9245      	str	r2, [sp, #276]	; 0x114
 80145b4:	6862      	ldr	r2, [r4, #4]
 80145b6:	3a01      	subs	r2, #1
 80145b8:	2a00      	cmp	r2, #0
 80145ba:	6062      	str	r2, [r4, #4]
 80145bc:	dd02      	ble.n	80145c4 <__ssvfiscanf_r+0x28c>
 80145be:	3301      	adds	r3, #1
 80145c0:	6023      	str	r3, [r4, #0]
 80145c2:	e7ad      	b.n	8014520 <__ssvfiscanf_r+0x1e8>
 80145c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80145c6:	4621      	mov	r1, r4
 80145c8:	4630      	mov	r0, r6
 80145ca:	4798      	blx	r3
 80145cc:	2800      	cmp	r0, #0
 80145ce:	d0a7      	beq.n	8014520 <__ssvfiscanf_r+0x1e8>
 80145d0:	e78a      	b.n	80144e8 <__ssvfiscanf_r+0x1b0>
 80145d2:	2b04      	cmp	r3, #4
 80145d4:	dc0e      	bgt.n	80145f4 <__ssvfiscanf_r+0x2bc>
 80145d6:	466b      	mov	r3, sp
 80145d8:	4622      	mov	r2, r4
 80145da:	a941      	add	r1, sp, #260	; 0x104
 80145dc:	4630      	mov	r0, r6
 80145de:	f000 f87d 	bl	80146dc <_scanf_i>
 80145e2:	e7ab      	b.n	801453c <__ssvfiscanf_r+0x204>
 80145e4:	08014285 	.word	0x08014285
 80145e8:	080142ff 	.word	0x080142ff
 80145ec:	08015b71 	.word	0x08015b71
 80145f0:	08015eda 	.word	0x08015eda
 80145f4:	4b0b      	ldr	r3, [pc, #44]	; (8014624 <__ssvfiscanf_r+0x2ec>)
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	f43f aec5 	beq.w	8014386 <__ssvfiscanf_r+0x4e>
 80145fc:	466b      	mov	r3, sp
 80145fe:	4622      	mov	r2, r4
 8014600:	a941      	add	r1, sp, #260	; 0x104
 8014602:	4630      	mov	r0, r6
 8014604:	f7fc fb7a 	bl	8010cfc <_scanf_float>
 8014608:	e798      	b.n	801453c <__ssvfiscanf_r+0x204>
 801460a:	89a3      	ldrh	r3, [r4, #12]
 801460c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014610:	bf18      	it	ne
 8014612:	f04f 30ff 	movne.w	r0, #4294967295
 8014616:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801461a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801461e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014620:	e7f9      	b.n	8014616 <__ssvfiscanf_r+0x2de>
 8014622:	bf00      	nop
 8014624:	08010cfd 	.word	0x08010cfd

08014628 <_scanf_chars>:
 8014628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801462c:	4615      	mov	r5, r2
 801462e:	688a      	ldr	r2, [r1, #8]
 8014630:	4680      	mov	r8, r0
 8014632:	460c      	mov	r4, r1
 8014634:	b932      	cbnz	r2, 8014644 <_scanf_chars+0x1c>
 8014636:	698a      	ldr	r2, [r1, #24]
 8014638:	2a00      	cmp	r2, #0
 801463a:	bf0c      	ite	eq
 801463c:	2201      	moveq	r2, #1
 801463e:	f04f 32ff 	movne.w	r2, #4294967295
 8014642:	608a      	str	r2, [r1, #8]
 8014644:	6822      	ldr	r2, [r4, #0]
 8014646:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80146d8 <_scanf_chars+0xb0>
 801464a:	06d1      	lsls	r1, r2, #27
 801464c:	bf5f      	itttt	pl
 801464e:	681a      	ldrpl	r2, [r3, #0]
 8014650:	1d11      	addpl	r1, r2, #4
 8014652:	6019      	strpl	r1, [r3, #0]
 8014654:	6816      	ldrpl	r6, [r2, #0]
 8014656:	2700      	movs	r7, #0
 8014658:	69a0      	ldr	r0, [r4, #24]
 801465a:	b188      	cbz	r0, 8014680 <_scanf_chars+0x58>
 801465c:	2801      	cmp	r0, #1
 801465e:	d107      	bne.n	8014670 <_scanf_chars+0x48>
 8014660:	682a      	ldr	r2, [r5, #0]
 8014662:	7811      	ldrb	r1, [r2, #0]
 8014664:	6962      	ldr	r2, [r4, #20]
 8014666:	5c52      	ldrb	r2, [r2, r1]
 8014668:	b952      	cbnz	r2, 8014680 <_scanf_chars+0x58>
 801466a:	2f00      	cmp	r7, #0
 801466c:	d031      	beq.n	80146d2 <_scanf_chars+0xaa>
 801466e:	e022      	b.n	80146b6 <_scanf_chars+0x8e>
 8014670:	2802      	cmp	r0, #2
 8014672:	d120      	bne.n	80146b6 <_scanf_chars+0x8e>
 8014674:	682b      	ldr	r3, [r5, #0]
 8014676:	781b      	ldrb	r3, [r3, #0]
 8014678:	f813 3009 	ldrb.w	r3, [r3, r9]
 801467c:	071b      	lsls	r3, r3, #28
 801467e:	d41a      	bmi.n	80146b6 <_scanf_chars+0x8e>
 8014680:	6823      	ldr	r3, [r4, #0]
 8014682:	06da      	lsls	r2, r3, #27
 8014684:	bf5e      	ittt	pl
 8014686:	682b      	ldrpl	r3, [r5, #0]
 8014688:	781b      	ldrbpl	r3, [r3, #0]
 801468a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801468e:	682a      	ldr	r2, [r5, #0]
 8014690:	686b      	ldr	r3, [r5, #4]
 8014692:	3201      	adds	r2, #1
 8014694:	602a      	str	r2, [r5, #0]
 8014696:	68a2      	ldr	r2, [r4, #8]
 8014698:	3b01      	subs	r3, #1
 801469a:	3a01      	subs	r2, #1
 801469c:	606b      	str	r3, [r5, #4]
 801469e:	3701      	adds	r7, #1
 80146a0:	60a2      	str	r2, [r4, #8]
 80146a2:	b142      	cbz	r2, 80146b6 <_scanf_chars+0x8e>
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	dcd7      	bgt.n	8014658 <_scanf_chars+0x30>
 80146a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80146ac:	4629      	mov	r1, r5
 80146ae:	4640      	mov	r0, r8
 80146b0:	4798      	blx	r3
 80146b2:	2800      	cmp	r0, #0
 80146b4:	d0d0      	beq.n	8014658 <_scanf_chars+0x30>
 80146b6:	6823      	ldr	r3, [r4, #0]
 80146b8:	f013 0310 	ands.w	r3, r3, #16
 80146bc:	d105      	bne.n	80146ca <_scanf_chars+0xa2>
 80146be:	68e2      	ldr	r2, [r4, #12]
 80146c0:	3201      	adds	r2, #1
 80146c2:	60e2      	str	r2, [r4, #12]
 80146c4:	69a2      	ldr	r2, [r4, #24]
 80146c6:	b102      	cbz	r2, 80146ca <_scanf_chars+0xa2>
 80146c8:	7033      	strb	r3, [r6, #0]
 80146ca:	6923      	ldr	r3, [r4, #16]
 80146cc:	443b      	add	r3, r7
 80146ce:	6123      	str	r3, [r4, #16]
 80146d0:	2000      	movs	r0, #0
 80146d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146d6:	bf00      	nop
 80146d8:	08015b71 	.word	0x08015b71

080146dc <_scanf_i>:
 80146dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146e0:	4698      	mov	r8, r3
 80146e2:	4b76      	ldr	r3, [pc, #472]	; (80148bc <_scanf_i+0x1e0>)
 80146e4:	460c      	mov	r4, r1
 80146e6:	4682      	mov	sl, r0
 80146e8:	4616      	mov	r6, r2
 80146ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80146ee:	b087      	sub	sp, #28
 80146f0:	ab03      	add	r3, sp, #12
 80146f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80146f6:	4b72      	ldr	r3, [pc, #456]	; (80148c0 <_scanf_i+0x1e4>)
 80146f8:	69a1      	ldr	r1, [r4, #24]
 80146fa:	4a72      	ldr	r2, [pc, #456]	; (80148c4 <_scanf_i+0x1e8>)
 80146fc:	2903      	cmp	r1, #3
 80146fe:	bf18      	it	ne
 8014700:	461a      	movne	r2, r3
 8014702:	68a3      	ldr	r3, [r4, #8]
 8014704:	9201      	str	r2, [sp, #4]
 8014706:	1e5a      	subs	r2, r3, #1
 8014708:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801470c:	bf88      	it	hi
 801470e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014712:	4627      	mov	r7, r4
 8014714:	bf82      	ittt	hi
 8014716:	eb03 0905 	addhi.w	r9, r3, r5
 801471a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801471e:	60a3      	strhi	r3, [r4, #8]
 8014720:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014724:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8014728:	bf98      	it	ls
 801472a:	f04f 0900 	movls.w	r9, #0
 801472e:	6023      	str	r3, [r4, #0]
 8014730:	463d      	mov	r5, r7
 8014732:	f04f 0b00 	mov.w	fp, #0
 8014736:	6831      	ldr	r1, [r6, #0]
 8014738:	ab03      	add	r3, sp, #12
 801473a:	7809      	ldrb	r1, [r1, #0]
 801473c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014740:	2202      	movs	r2, #2
 8014742:	f7eb fd6d 	bl	8000220 <memchr>
 8014746:	b328      	cbz	r0, 8014794 <_scanf_i+0xb8>
 8014748:	f1bb 0f01 	cmp.w	fp, #1
 801474c:	d159      	bne.n	8014802 <_scanf_i+0x126>
 801474e:	6862      	ldr	r2, [r4, #4]
 8014750:	b92a      	cbnz	r2, 801475e <_scanf_i+0x82>
 8014752:	6822      	ldr	r2, [r4, #0]
 8014754:	2308      	movs	r3, #8
 8014756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801475a:	6063      	str	r3, [r4, #4]
 801475c:	6022      	str	r2, [r4, #0]
 801475e:	6822      	ldr	r2, [r4, #0]
 8014760:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8014764:	6022      	str	r2, [r4, #0]
 8014766:	68a2      	ldr	r2, [r4, #8]
 8014768:	1e51      	subs	r1, r2, #1
 801476a:	60a1      	str	r1, [r4, #8]
 801476c:	b192      	cbz	r2, 8014794 <_scanf_i+0xb8>
 801476e:	6832      	ldr	r2, [r6, #0]
 8014770:	1c51      	adds	r1, r2, #1
 8014772:	6031      	str	r1, [r6, #0]
 8014774:	7812      	ldrb	r2, [r2, #0]
 8014776:	f805 2b01 	strb.w	r2, [r5], #1
 801477a:	6872      	ldr	r2, [r6, #4]
 801477c:	3a01      	subs	r2, #1
 801477e:	2a00      	cmp	r2, #0
 8014780:	6072      	str	r2, [r6, #4]
 8014782:	dc07      	bgt.n	8014794 <_scanf_i+0xb8>
 8014784:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014788:	4631      	mov	r1, r6
 801478a:	4650      	mov	r0, sl
 801478c:	4790      	blx	r2
 801478e:	2800      	cmp	r0, #0
 8014790:	f040 8085 	bne.w	801489e <_scanf_i+0x1c2>
 8014794:	f10b 0b01 	add.w	fp, fp, #1
 8014798:	f1bb 0f03 	cmp.w	fp, #3
 801479c:	d1cb      	bne.n	8014736 <_scanf_i+0x5a>
 801479e:	6863      	ldr	r3, [r4, #4]
 80147a0:	b90b      	cbnz	r3, 80147a6 <_scanf_i+0xca>
 80147a2:	230a      	movs	r3, #10
 80147a4:	6063      	str	r3, [r4, #4]
 80147a6:	6863      	ldr	r3, [r4, #4]
 80147a8:	4947      	ldr	r1, [pc, #284]	; (80148c8 <_scanf_i+0x1ec>)
 80147aa:	6960      	ldr	r0, [r4, #20]
 80147ac:	1ac9      	subs	r1, r1, r3
 80147ae:	f000 f8b7 	bl	8014920 <__sccl>
 80147b2:	f04f 0b00 	mov.w	fp, #0
 80147b6:	68a3      	ldr	r3, [r4, #8]
 80147b8:	6822      	ldr	r2, [r4, #0]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d03d      	beq.n	801483a <_scanf_i+0x15e>
 80147be:	6831      	ldr	r1, [r6, #0]
 80147c0:	6960      	ldr	r0, [r4, #20]
 80147c2:	f891 c000 	ldrb.w	ip, [r1]
 80147c6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80147ca:	2800      	cmp	r0, #0
 80147cc:	d035      	beq.n	801483a <_scanf_i+0x15e>
 80147ce:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80147d2:	d124      	bne.n	801481e <_scanf_i+0x142>
 80147d4:	0510      	lsls	r0, r2, #20
 80147d6:	d522      	bpl.n	801481e <_scanf_i+0x142>
 80147d8:	f10b 0b01 	add.w	fp, fp, #1
 80147dc:	f1b9 0f00 	cmp.w	r9, #0
 80147e0:	d003      	beq.n	80147ea <_scanf_i+0x10e>
 80147e2:	3301      	adds	r3, #1
 80147e4:	f109 39ff 	add.w	r9, r9, #4294967295
 80147e8:	60a3      	str	r3, [r4, #8]
 80147ea:	6873      	ldr	r3, [r6, #4]
 80147ec:	3b01      	subs	r3, #1
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	6073      	str	r3, [r6, #4]
 80147f2:	dd1b      	ble.n	801482c <_scanf_i+0x150>
 80147f4:	6833      	ldr	r3, [r6, #0]
 80147f6:	3301      	adds	r3, #1
 80147f8:	6033      	str	r3, [r6, #0]
 80147fa:	68a3      	ldr	r3, [r4, #8]
 80147fc:	3b01      	subs	r3, #1
 80147fe:	60a3      	str	r3, [r4, #8]
 8014800:	e7d9      	b.n	80147b6 <_scanf_i+0xda>
 8014802:	f1bb 0f02 	cmp.w	fp, #2
 8014806:	d1ae      	bne.n	8014766 <_scanf_i+0x8a>
 8014808:	6822      	ldr	r2, [r4, #0]
 801480a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801480e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8014812:	d1bf      	bne.n	8014794 <_scanf_i+0xb8>
 8014814:	2310      	movs	r3, #16
 8014816:	6063      	str	r3, [r4, #4]
 8014818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801481c:	e7a2      	b.n	8014764 <_scanf_i+0x88>
 801481e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8014822:	6022      	str	r2, [r4, #0]
 8014824:	780b      	ldrb	r3, [r1, #0]
 8014826:	f805 3b01 	strb.w	r3, [r5], #1
 801482a:	e7de      	b.n	80147ea <_scanf_i+0x10e>
 801482c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014830:	4631      	mov	r1, r6
 8014832:	4650      	mov	r0, sl
 8014834:	4798      	blx	r3
 8014836:	2800      	cmp	r0, #0
 8014838:	d0df      	beq.n	80147fa <_scanf_i+0x11e>
 801483a:	6823      	ldr	r3, [r4, #0]
 801483c:	05db      	lsls	r3, r3, #23
 801483e:	d50d      	bpl.n	801485c <_scanf_i+0x180>
 8014840:	42bd      	cmp	r5, r7
 8014842:	d909      	bls.n	8014858 <_scanf_i+0x17c>
 8014844:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014848:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801484c:	4632      	mov	r2, r6
 801484e:	4650      	mov	r0, sl
 8014850:	4798      	blx	r3
 8014852:	f105 39ff 	add.w	r9, r5, #4294967295
 8014856:	464d      	mov	r5, r9
 8014858:	42bd      	cmp	r5, r7
 801485a:	d02d      	beq.n	80148b8 <_scanf_i+0x1dc>
 801485c:	6822      	ldr	r2, [r4, #0]
 801485e:	f012 0210 	ands.w	r2, r2, #16
 8014862:	d113      	bne.n	801488c <_scanf_i+0x1b0>
 8014864:	702a      	strb	r2, [r5, #0]
 8014866:	6863      	ldr	r3, [r4, #4]
 8014868:	9e01      	ldr	r6, [sp, #4]
 801486a:	4639      	mov	r1, r7
 801486c:	4650      	mov	r0, sl
 801486e:	47b0      	blx	r6
 8014870:	6821      	ldr	r1, [r4, #0]
 8014872:	f8d8 3000 	ldr.w	r3, [r8]
 8014876:	f011 0f20 	tst.w	r1, #32
 801487a:	d013      	beq.n	80148a4 <_scanf_i+0x1c8>
 801487c:	1d1a      	adds	r2, r3, #4
 801487e:	f8c8 2000 	str.w	r2, [r8]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	6018      	str	r0, [r3, #0]
 8014886:	68e3      	ldr	r3, [r4, #12]
 8014888:	3301      	adds	r3, #1
 801488a:	60e3      	str	r3, [r4, #12]
 801488c:	1bed      	subs	r5, r5, r7
 801488e:	44ab      	add	fp, r5
 8014890:	6925      	ldr	r5, [r4, #16]
 8014892:	445d      	add	r5, fp
 8014894:	6125      	str	r5, [r4, #16]
 8014896:	2000      	movs	r0, #0
 8014898:	b007      	add	sp, #28
 801489a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801489e:	f04f 0b00 	mov.w	fp, #0
 80148a2:	e7ca      	b.n	801483a <_scanf_i+0x15e>
 80148a4:	1d1a      	adds	r2, r3, #4
 80148a6:	f8c8 2000 	str.w	r2, [r8]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	f011 0f01 	tst.w	r1, #1
 80148b0:	bf14      	ite	ne
 80148b2:	8018      	strhne	r0, [r3, #0]
 80148b4:	6018      	streq	r0, [r3, #0]
 80148b6:	e7e6      	b.n	8014886 <_scanf_i+0x1aa>
 80148b8:	2001      	movs	r0, #1
 80148ba:	e7ed      	b.n	8014898 <_scanf_i+0x1bc>
 80148bc:	08015abc 	.word	0x08015abc
 80148c0:	08014a75 	.word	0x08014a75
 80148c4:	08011fdd 	.word	0x08011fdd
 80148c8:	08015efe 	.word	0x08015efe

080148cc <_read_r>:
 80148cc:	b538      	push	{r3, r4, r5, lr}
 80148ce:	4d07      	ldr	r5, [pc, #28]	; (80148ec <_read_r+0x20>)
 80148d0:	4604      	mov	r4, r0
 80148d2:	4608      	mov	r0, r1
 80148d4:	4611      	mov	r1, r2
 80148d6:	2200      	movs	r2, #0
 80148d8:	602a      	str	r2, [r5, #0]
 80148da:	461a      	mov	r2, r3
 80148dc:	f7ee fc34 	bl	8003148 <_read>
 80148e0:	1c43      	adds	r3, r0, #1
 80148e2:	d102      	bne.n	80148ea <_read_r+0x1e>
 80148e4:	682b      	ldr	r3, [r5, #0]
 80148e6:	b103      	cbz	r3, 80148ea <_read_r+0x1e>
 80148e8:	6023      	str	r3, [r4, #0]
 80148ea:	bd38      	pop	{r3, r4, r5, pc}
 80148ec:	20000770 	.word	0x20000770

080148f0 <nan>:
 80148f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80148f8 <nan+0x8>
 80148f4:	4770      	bx	lr
 80148f6:	bf00      	nop
 80148f8:	00000000 	.word	0x00000000
 80148fc:	7ff80000 	.word	0x7ff80000

08014900 <_sbrk_r>:
 8014900:	b538      	push	{r3, r4, r5, lr}
 8014902:	4d06      	ldr	r5, [pc, #24]	; (801491c <_sbrk_r+0x1c>)
 8014904:	2300      	movs	r3, #0
 8014906:	4604      	mov	r4, r0
 8014908:	4608      	mov	r0, r1
 801490a:	602b      	str	r3, [r5, #0]
 801490c:	f7ee fc8a 	bl	8003224 <_sbrk>
 8014910:	1c43      	adds	r3, r0, #1
 8014912:	d102      	bne.n	801491a <_sbrk_r+0x1a>
 8014914:	682b      	ldr	r3, [r5, #0]
 8014916:	b103      	cbz	r3, 801491a <_sbrk_r+0x1a>
 8014918:	6023      	str	r3, [r4, #0]
 801491a:	bd38      	pop	{r3, r4, r5, pc}
 801491c:	20000770 	.word	0x20000770

08014920 <__sccl>:
 8014920:	b570      	push	{r4, r5, r6, lr}
 8014922:	780b      	ldrb	r3, [r1, #0]
 8014924:	4604      	mov	r4, r0
 8014926:	2b5e      	cmp	r3, #94	; 0x5e
 8014928:	bf0b      	itete	eq
 801492a:	784b      	ldrbeq	r3, [r1, #1]
 801492c:	1c48      	addne	r0, r1, #1
 801492e:	1c88      	addeq	r0, r1, #2
 8014930:	2200      	movne	r2, #0
 8014932:	bf08      	it	eq
 8014934:	2201      	moveq	r2, #1
 8014936:	1e61      	subs	r1, r4, #1
 8014938:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801493c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014940:	42a9      	cmp	r1, r5
 8014942:	d1fb      	bne.n	801493c <__sccl+0x1c>
 8014944:	b90b      	cbnz	r3, 801494a <__sccl+0x2a>
 8014946:	3801      	subs	r0, #1
 8014948:	bd70      	pop	{r4, r5, r6, pc}
 801494a:	f082 0201 	eor.w	r2, r2, #1
 801494e:	54e2      	strb	r2, [r4, r3]
 8014950:	4605      	mov	r5, r0
 8014952:	4628      	mov	r0, r5
 8014954:	f810 1b01 	ldrb.w	r1, [r0], #1
 8014958:	292d      	cmp	r1, #45	; 0x2d
 801495a:	d006      	beq.n	801496a <__sccl+0x4a>
 801495c:	295d      	cmp	r1, #93	; 0x5d
 801495e:	d0f3      	beq.n	8014948 <__sccl+0x28>
 8014960:	b909      	cbnz	r1, 8014966 <__sccl+0x46>
 8014962:	4628      	mov	r0, r5
 8014964:	e7f0      	b.n	8014948 <__sccl+0x28>
 8014966:	460b      	mov	r3, r1
 8014968:	e7f1      	b.n	801494e <__sccl+0x2e>
 801496a:	786e      	ldrb	r6, [r5, #1]
 801496c:	2e5d      	cmp	r6, #93	; 0x5d
 801496e:	d0fa      	beq.n	8014966 <__sccl+0x46>
 8014970:	42b3      	cmp	r3, r6
 8014972:	dcf8      	bgt.n	8014966 <__sccl+0x46>
 8014974:	3502      	adds	r5, #2
 8014976:	4619      	mov	r1, r3
 8014978:	3101      	adds	r1, #1
 801497a:	428e      	cmp	r6, r1
 801497c:	5462      	strb	r2, [r4, r1]
 801497e:	dcfb      	bgt.n	8014978 <__sccl+0x58>
 8014980:	1af1      	subs	r1, r6, r3
 8014982:	3901      	subs	r1, #1
 8014984:	1c58      	adds	r0, r3, #1
 8014986:	42b3      	cmp	r3, r6
 8014988:	bfa8      	it	ge
 801498a:	2100      	movge	r1, #0
 801498c:	1843      	adds	r3, r0, r1
 801498e:	e7e0      	b.n	8014952 <__sccl+0x32>

08014990 <_strtoul_l.constprop.0>:
 8014990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014994:	4f36      	ldr	r7, [pc, #216]	; (8014a70 <_strtoul_l.constprop.0+0xe0>)
 8014996:	4686      	mov	lr, r0
 8014998:	460d      	mov	r5, r1
 801499a:	4628      	mov	r0, r5
 801499c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80149a0:	5de6      	ldrb	r6, [r4, r7]
 80149a2:	f016 0608 	ands.w	r6, r6, #8
 80149a6:	d1f8      	bne.n	801499a <_strtoul_l.constprop.0+0xa>
 80149a8:	2c2d      	cmp	r4, #45	; 0x2d
 80149aa:	d12f      	bne.n	8014a0c <_strtoul_l.constprop.0+0x7c>
 80149ac:	782c      	ldrb	r4, [r5, #0]
 80149ae:	2601      	movs	r6, #1
 80149b0:	1c85      	adds	r5, r0, #2
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d057      	beq.n	8014a66 <_strtoul_l.constprop.0+0xd6>
 80149b6:	2b10      	cmp	r3, #16
 80149b8:	d109      	bne.n	80149ce <_strtoul_l.constprop.0+0x3e>
 80149ba:	2c30      	cmp	r4, #48	; 0x30
 80149bc:	d107      	bne.n	80149ce <_strtoul_l.constprop.0+0x3e>
 80149be:	7828      	ldrb	r0, [r5, #0]
 80149c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80149c4:	2858      	cmp	r0, #88	; 0x58
 80149c6:	d149      	bne.n	8014a5c <_strtoul_l.constprop.0+0xcc>
 80149c8:	786c      	ldrb	r4, [r5, #1]
 80149ca:	2310      	movs	r3, #16
 80149cc:	3502      	adds	r5, #2
 80149ce:	f04f 38ff 	mov.w	r8, #4294967295
 80149d2:	2700      	movs	r7, #0
 80149d4:	fbb8 f8f3 	udiv	r8, r8, r3
 80149d8:	fb03 f908 	mul.w	r9, r3, r8
 80149dc:	ea6f 0909 	mvn.w	r9, r9
 80149e0:	4638      	mov	r0, r7
 80149e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80149e6:	f1bc 0f09 	cmp.w	ip, #9
 80149ea:	d814      	bhi.n	8014a16 <_strtoul_l.constprop.0+0x86>
 80149ec:	4664      	mov	r4, ip
 80149ee:	42a3      	cmp	r3, r4
 80149f0:	dd22      	ble.n	8014a38 <_strtoul_l.constprop.0+0xa8>
 80149f2:	2f00      	cmp	r7, #0
 80149f4:	db1d      	blt.n	8014a32 <_strtoul_l.constprop.0+0xa2>
 80149f6:	4580      	cmp	r8, r0
 80149f8:	d31b      	bcc.n	8014a32 <_strtoul_l.constprop.0+0xa2>
 80149fa:	d101      	bne.n	8014a00 <_strtoul_l.constprop.0+0x70>
 80149fc:	45a1      	cmp	r9, r4
 80149fe:	db18      	blt.n	8014a32 <_strtoul_l.constprop.0+0xa2>
 8014a00:	fb00 4003 	mla	r0, r0, r3, r4
 8014a04:	2701      	movs	r7, #1
 8014a06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014a0a:	e7ea      	b.n	80149e2 <_strtoul_l.constprop.0+0x52>
 8014a0c:	2c2b      	cmp	r4, #43	; 0x2b
 8014a0e:	bf04      	itt	eq
 8014a10:	782c      	ldrbeq	r4, [r5, #0]
 8014a12:	1c85      	addeq	r5, r0, #2
 8014a14:	e7cd      	b.n	80149b2 <_strtoul_l.constprop.0+0x22>
 8014a16:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014a1a:	f1bc 0f19 	cmp.w	ip, #25
 8014a1e:	d801      	bhi.n	8014a24 <_strtoul_l.constprop.0+0x94>
 8014a20:	3c37      	subs	r4, #55	; 0x37
 8014a22:	e7e4      	b.n	80149ee <_strtoul_l.constprop.0+0x5e>
 8014a24:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014a28:	f1bc 0f19 	cmp.w	ip, #25
 8014a2c:	d804      	bhi.n	8014a38 <_strtoul_l.constprop.0+0xa8>
 8014a2e:	3c57      	subs	r4, #87	; 0x57
 8014a30:	e7dd      	b.n	80149ee <_strtoul_l.constprop.0+0x5e>
 8014a32:	f04f 37ff 	mov.w	r7, #4294967295
 8014a36:	e7e6      	b.n	8014a06 <_strtoul_l.constprop.0+0x76>
 8014a38:	2f00      	cmp	r7, #0
 8014a3a:	da07      	bge.n	8014a4c <_strtoul_l.constprop.0+0xbc>
 8014a3c:	2322      	movs	r3, #34	; 0x22
 8014a3e:	f8ce 3000 	str.w	r3, [lr]
 8014a42:	f04f 30ff 	mov.w	r0, #4294967295
 8014a46:	b932      	cbnz	r2, 8014a56 <_strtoul_l.constprop.0+0xc6>
 8014a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a4c:	b106      	cbz	r6, 8014a50 <_strtoul_l.constprop.0+0xc0>
 8014a4e:	4240      	negs	r0, r0
 8014a50:	2a00      	cmp	r2, #0
 8014a52:	d0f9      	beq.n	8014a48 <_strtoul_l.constprop.0+0xb8>
 8014a54:	b107      	cbz	r7, 8014a58 <_strtoul_l.constprop.0+0xc8>
 8014a56:	1e69      	subs	r1, r5, #1
 8014a58:	6011      	str	r1, [r2, #0]
 8014a5a:	e7f5      	b.n	8014a48 <_strtoul_l.constprop.0+0xb8>
 8014a5c:	2430      	movs	r4, #48	; 0x30
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d1b5      	bne.n	80149ce <_strtoul_l.constprop.0+0x3e>
 8014a62:	2308      	movs	r3, #8
 8014a64:	e7b3      	b.n	80149ce <_strtoul_l.constprop.0+0x3e>
 8014a66:	2c30      	cmp	r4, #48	; 0x30
 8014a68:	d0a9      	beq.n	80149be <_strtoul_l.constprop.0+0x2e>
 8014a6a:	230a      	movs	r3, #10
 8014a6c:	e7af      	b.n	80149ce <_strtoul_l.constprop.0+0x3e>
 8014a6e:	bf00      	nop
 8014a70:	08015b71 	.word	0x08015b71

08014a74 <_strtoul_r>:
 8014a74:	f7ff bf8c 	b.w	8014990 <_strtoul_l.constprop.0>

08014a78 <__submore>:
 8014a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a7c:	460c      	mov	r4, r1
 8014a7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a84:	4299      	cmp	r1, r3
 8014a86:	d11d      	bne.n	8014ac4 <__submore+0x4c>
 8014a88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014a8c:	f7ff fa2a 	bl	8013ee4 <_malloc_r>
 8014a90:	b918      	cbnz	r0, 8014a9a <__submore+0x22>
 8014a92:	f04f 30ff 	mov.w	r0, #4294967295
 8014a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a9e:	63a3      	str	r3, [r4, #56]	; 0x38
 8014aa0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014aa4:	6360      	str	r0, [r4, #52]	; 0x34
 8014aa6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8014aaa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014aae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014ab2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014ab6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014aba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014abe:	6020      	str	r0, [r4, #0]
 8014ac0:	2000      	movs	r0, #0
 8014ac2:	e7e8      	b.n	8014a96 <__submore+0x1e>
 8014ac4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014ac6:	0077      	lsls	r7, r6, #1
 8014ac8:	463a      	mov	r2, r7
 8014aca:	f000 fa2d 	bl	8014f28 <_realloc_r>
 8014ace:	4605      	mov	r5, r0
 8014ad0:	2800      	cmp	r0, #0
 8014ad2:	d0de      	beq.n	8014a92 <__submore+0x1a>
 8014ad4:	eb00 0806 	add.w	r8, r0, r6
 8014ad8:	4601      	mov	r1, r0
 8014ada:	4632      	mov	r2, r6
 8014adc:	4640      	mov	r0, r8
 8014ade:	f7fb fc8d 	bl	80103fc <memcpy>
 8014ae2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014ae6:	f8c4 8000 	str.w	r8, [r4]
 8014aea:	e7e9      	b.n	8014ac0 <__submore+0x48>

08014aec <__ascii_wctomb>:
 8014aec:	b149      	cbz	r1, 8014b02 <__ascii_wctomb+0x16>
 8014aee:	2aff      	cmp	r2, #255	; 0xff
 8014af0:	bf85      	ittet	hi
 8014af2:	238a      	movhi	r3, #138	; 0x8a
 8014af4:	6003      	strhi	r3, [r0, #0]
 8014af6:	700a      	strbls	r2, [r1, #0]
 8014af8:	f04f 30ff 	movhi.w	r0, #4294967295
 8014afc:	bf98      	it	ls
 8014afe:	2001      	movls	r0, #1
 8014b00:	4770      	bx	lr
 8014b02:	4608      	mov	r0, r1
 8014b04:	4770      	bx	lr
	...

08014b08 <__assert_func>:
 8014b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014b0a:	4614      	mov	r4, r2
 8014b0c:	461a      	mov	r2, r3
 8014b0e:	4b09      	ldr	r3, [pc, #36]	; (8014b34 <__assert_func+0x2c>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	4605      	mov	r5, r0
 8014b14:	68d8      	ldr	r0, [r3, #12]
 8014b16:	b14c      	cbz	r4, 8014b2c <__assert_func+0x24>
 8014b18:	4b07      	ldr	r3, [pc, #28]	; (8014b38 <__assert_func+0x30>)
 8014b1a:	9100      	str	r1, [sp, #0]
 8014b1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014b20:	4906      	ldr	r1, [pc, #24]	; (8014b3c <__assert_func+0x34>)
 8014b22:	462b      	mov	r3, r5
 8014b24:	f000 f9a6 	bl	8014e74 <fiprintf>
 8014b28:	f000 fc46 	bl	80153b8 <abort>
 8014b2c:	4b04      	ldr	r3, [pc, #16]	; (8014b40 <__assert_func+0x38>)
 8014b2e:	461c      	mov	r4, r3
 8014b30:	e7f3      	b.n	8014b1a <__assert_func+0x12>
 8014b32:	bf00      	nop
 8014b34:	200002c8 	.word	0x200002c8
 8014b38:	08015f00 	.word	0x08015f00
 8014b3c:	08015f0d 	.word	0x08015f0d
 8014b40:	08015f3b 	.word	0x08015f3b

08014b44 <__sflush_r>:
 8014b44:	898a      	ldrh	r2, [r1, #12]
 8014b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b4a:	4605      	mov	r5, r0
 8014b4c:	0710      	lsls	r0, r2, #28
 8014b4e:	460c      	mov	r4, r1
 8014b50:	d458      	bmi.n	8014c04 <__sflush_r+0xc0>
 8014b52:	684b      	ldr	r3, [r1, #4]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	dc05      	bgt.n	8014b64 <__sflush_r+0x20>
 8014b58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	dc02      	bgt.n	8014b64 <__sflush_r+0x20>
 8014b5e:	2000      	movs	r0, #0
 8014b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014b66:	2e00      	cmp	r6, #0
 8014b68:	d0f9      	beq.n	8014b5e <__sflush_r+0x1a>
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014b70:	682f      	ldr	r7, [r5, #0]
 8014b72:	602b      	str	r3, [r5, #0]
 8014b74:	d032      	beq.n	8014bdc <__sflush_r+0x98>
 8014b76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014b78:	89a3      	ldrh	r3, [r4, #12]
 8014b7a:	075a      	lsls	r2, r3, #29
 8014b7c:	d505      	bpl.n	8014b8a <__sflush_r+0x46>
 8014b7e:	6863      	ldr	r3, [r4, #4]
 8014b80:	1ac0      	subs	r0, r0, r3
 8014b82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014b84:	b10b      	cbz	r3, 8014b8a <__sflush_r+0x46>
 8014b86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014b88:	1ac0      	subs	r0, r0, r3
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	4602      	mov	r2, r0
 8014b8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014b90:	6a21      	ldr	r1, [r4, #32]
 8014b92:	4628      	mov	r0, r5
 8014b94:	47b0      	blx	r6
 8014b96:	1c43      	adds	r3, r0, #1
 8014b98:	89a3      	ldrh	r3, [r4, #12]
 8014b9a:	d106      	bne.n	8014baa <__sflush_r+0x66>
 8014b9c:	6829      	ldr	r1, [r5, #0]
 8014b9e:	291d      	cmp	r1, #29
 8014ba0:	d82c      	bhi.n	8014bfc <__sflush_r+0xb8>
 8014ba2:	4a2a      	ldr	r2, [pc, #168]	; (8014c4c <__sflush_r+0x108>)
 8014ba4:	40ca      	lsrs	r2, r1
 8014ba6:	07d6      	lsls	r6, r2, #31
 8014ba8:	d528      	bpl.n	8014bfc <__sflush_r+0xb8>
 8014baa:	2200      	movs	r2, #0
 8014bac:	6062      	str	r2, [r4, #4]
 8014bae:	04d9      	lsls	r1, r3, #19
 8014bb0:	6922      	ldr	r2, [r4, #16]
 8014bb2:	6022      	str	r2, [r4, #0]
 8014bb4:	d504      	bpl.n	8014bc0 <__sflush_r+0x7c>
 8014bb6:	1c42      	adds	r2, r0, #1
 8014bb8:	d101      	bne.n	8014bbe <__sflush_r+0x7a>
 8014bba:	682b      	ldr	r3, [r5, #0]
 8014bbc:	b903      	cbnz	r3, 8014bc0 <__sflush_r+0x7c>
 8014bbe:	6560      	str	r0, [r4, #84]	; 0x54
 8014bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014bc2:	602f      	str	r7, [r5, #0]
 8014bc4:	2900      	cmp	r1, #0
 8014bc6:	d0ca      	beq.n	8014b5e <__sflush_r+0x1a>
 8014bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014bcc:	4299      	cmp	r1, r3
 8014bce:	d002      	beq.n	8014bd6 <__sflush_r+0x92>
 8014bd0:	4628      	mov	r0, r5
 8014bd2:	f7ff f91b 	bl	8013e0c <_free_r>
 8014bd6:	2000      	movs	r0, #0
 8014bd8:	6360      	str	r0, [r4, #52]	; 0x34
 8014bda:	e7c1      	b.n	8014b60 <__sflush_r+0x1c>
 8014bdc:	6a21      	ldr	r1, [r4, #32]
 8014bde:	2301      	movs	r3, #1
 8014be0:	4628      	mov	r0, r5
 8014be2:	47b0      	blx	r6
 8014be4:	1c41      	adds	r1, r0, #1
 8014be6:	d1c7      	bne.n	8014b78 <__sflush_r+0x34>
 8014be8:	682b      	ldr	r3, [r5, #0]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d0c4      	beq.n	8014b78 <__sflush_r+0x34>
 8014bee:	2b1d      	cmp	r3, #29
 8014bf0:	d001      	beq.n	8014bf6 <__sflush_r+0xb2>
 8014bf2:	2b16      	cmp	r3, #22
 8014bf4:	d101      	bne.n	8014bfa <__sflush_r+0xb6>
 8014bf6:	602f      	str	r7, [r5, #0]
 8014bf8:	e7b1      	b.n	8014b5e <__sflush_r+0x1a>
 8014bfa:	89a3      	ldrh	r3, [r4, #12]
 8014bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c00:	81a3      	strh	r3, [r4, #12]
 8014c02:	e7ad      	b.n	8014b60 <__sflush_r+0x1c>
 8014c04:	690f      	ldr	r7, [r1, #16]
 8014c06:	2f00      	cmp	r7, #0
 8014c08:	d0a9      	beq.n	8014b5e <__sflush_r+0x1a>
 8014c0a:	0793      	lsls	r3, r2, #30
 8014c0c:	680e      	ldr	r6, [r1, #0]
 8014c0e:	bf08      	it	eq
 8014c10:	694b      	ldreq	r3, [r1, #20]
 8014c12:	600f      	str	r7, [r1, #0]
 8014c14:	bf18      	it	ne
 8014c16:	2300      	movne	r3, #0
 8014c18:	eba6 0807 	sub.w	r8, r6, r7
 8014c1c:	608b      	str	r3, [r1, #8]
 8014c1e:	f1b8 0f00 	cmp.w	r8, #0
 8014c22:	dd9c      	ble.n	8014b5e <__sflush_r+0x1a>
 8014c24:	6a21      	ldr	r1, [r4, #32]
 8014c26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014c28:	4643      	mov	r3, r8
 8014c2a:	463a      	mov	r2, r7
 8014c2c:	4628      	mov	r0, r5
 8014c2e:	47b0      	blx	r6
 8014c30:	2800      	cmp	r0, #0
 8014c32:	dc06      	bgt.n	8014c42 <__sflush_r+0xfe>
 8014c34:	89a3      	ldrh	r3, [r4, #12]
 8014c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c3a:	81a3      	strh	r3, [r4, #12]
 8014c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8014c40:	e78e      	b.n	8014b60 <__sflush_r+0x1c>
 8014c42:	4407      	add	r7, r0
 8014c44:	eba8 0800 	sub.w	r8, r8, r0
 8014c48:	e7e9      	b.n	8014c1e <__sflush_r+0xda>
 8014c4a:	bf00      	nop
 8014c4c:	20400001 	.word	0x20400001

08014c50 <_fflush_r>:
 8014c50:	b538      	push	{r3, r4, r5, lr}
 8014c52:	690b      	ldr	r3, [r1, #16]
 8014c54:	4605      	mov	r5, r0
 8014c56:	460c      	mov	r4, r1
 8014c58:	b913      	cbnz	r3, 8014c60 <_fflush_r+0x10>
 8014c5a:	2500      	movs	r5, #0
 8014c5c:	4628      	mov	r0, r5
 8014c5e:	bd38      	pop	{r3, r4, r5, pc}
 8014c60:	b118      	cbz	r0, 8014c6a <_fflush_r+0x1a>
 8014c62:	6983      	ldr	r3, [r0, #24]
 8014c64:	b90b      	cbnz	r3, 8014c6a <_fflush_r+0x1a>
 8014c66:	f000 f887 	bl	8014d78 <__sinit>
 8014c6a:	4b14      	ldr	r3, [pc, #80]	; (8014cbc <_fflush_r+0x6c>)
 8014c6c:	429c      	cmp	r4, r3
 8014c6e:	d11b      	bne.n	8014ca8 <_fflush_r+0x58>
 8014c70:	686c      	ldr	r4, [r5, #4]
 8014c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d0ef      	beq.n	8014c5a <_fflush_r+0xa>
 8014c7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014c7c:	07d0      	lsls	r0, r2, #31
 8014c7e:	d404      	bmi.n	8014c8a <_fflush_r+0x3a>
 8014c80:	0599      	lsls	r1, r3, #22
 8014c82:	d402      	bmi.n	8014c8a <_fflush_r+0x3a>
 8014c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c86:	f000 f927 	bl	8014ed8 <__retarget_lock_acquire_recursive>
 8014c8a:	4628      	mov	r0, r5
 8014c8c:	4621      	mov	r1, r4
 8014c8e:	f7ff ff59 	bl	8014b44 <__sflush_r>
 8014c92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014c94:	07da      	lsls	r2, r3, #31
 8014c96:	4605      	mov	r5, r0
 8014c98:	d4e0      	bmi.n	8014c5c <_fflush_r+0xc>
 8014c9a:	89a3      	ldrh	r3, [r4, #12]
 8014c9c:	059b      	lsls	r3, r3, #22
 8014c9e:	d4dd      	bmi.n	8014c5c <_fflush_r+0xc>
 8014ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ca2:	f000 f91a 	bl	8014eda <__retarget_lock_release_recursive>
 8014ca6:	e7d9      	b.n	8014c5c <_fflush_r+0xc>
 8014ca8:	4b05      	ldr	r3, [pc, #20]	; (8014cc0 <_fflush_r+0x70>)
 8014caa:	429c      	cmp	r4, r3
 8014cac:	d101      	bne.n	8014cb2 <_fflush_r+0x62>
 8014cae:	68ac      	ldr	r4, [r5, #8]
 8014cb0:	e7df      	b.n	8014c72 <_fflush_r+0x22>
 8014cb2:	4b04      	ldr	r3, [pc, #16]	; (8014cc4 <_fflush_r+0x74>)
 8014cb4:	429c      	cmp	r4, r3
 8014cb6:	bf08      	it	eq
 8014cb8:	68ec      	ldreq	r4, [r5, #12]
 8014cba:	e7da      	b.n	8014c72 <_fflush_r+0x22>
 8014cbc:	08015f5c 	.word	0x08015f5c
 8014cc0:	08015f7c 	.word	0x08015f7c
 8014cc4:	08015f3c 	.word	0x08015f3c

08014cc8 <std>:
 8014cc8:	2300      	movs	r3, #0
 8014cca:	b510      	push	{r4, lr}
 8014ccc:	4604      	mov	r4, r0
 8014cce:	e9c0 3300 	strd	r3, r3, [r0]
 8014cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014cd6:	6083      	str	r3, [r0, #8]
 8014cd8:	8181      	strh	r1, [r0, #12]
 8014cda:	6643      	str	r3, [r0, #100]	; 0x64
 8014cdc:	81c2      	strh	r2, [r0, #14]
 8014cde:	6183      	str	r3, [r0, #24]
 8014ce0:	4619      	mov	r1, r3
 8014ce2:	2208      	movs	r2, #8
 8014ce4:	305c      	adds	r0, #92	; 0x5c
 8014ce6:	f7fb fb97 	bl	8010418 <memset>
 8014cea:	4b05      	ldr	r3, [pc, #20]	; (8014d00 <std+0x38>)
 8014cec:	6263      	str	r3, [r4, #36]	; 0x24
 8014cee:	4b05      	ldr	r3, [pc, #20]	; (8014d04 <std+0x3c>)
 8014cf0:	62a3      	str	r3, [r4, #40]	; 0x28
 8014cf2:	4b05      	ldr	r3, [pc, #20]	; (8014d08 <std+0x40>)
 8014cf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014cf6:	4b05      	ldr	r3, [pc, #20]	; (8014d0c <std+0x44>)
 8014cf8:	6224      	str	r4, [r4, #32]
 8014cfa:	6323      	str	r3, [r4, #48]	; 0x30
 8014cfc:	bd10      	pop	{r4, pc}
 8014cfe:	bf00      	nop
 8014d00:	080111c1 	.word	0x080111c1
 8014d04:	080111e7 	.word	0x080111e7
 8014d08:	0801121f 	.word	0x0801121f
 8014d0c:	08011243 	.word	0x08011243

08014d10 <_cleanup_r>:
 8014d10:	4901      	ldr	r1, [pc, #4]	; (8014d18 <_cleanup_r+0x8>)
 8014d12:	f000 b8c1 	b.w	8014e98 <_fwalk_reent>
 8014d16:	bf00      	nop
 8014d18:	08014c51 	.word	0x08014c51

08014d1c <__sfmoreglue>:
 8014d1c:	b570      	push	{r4, r5, r6, lr}
 8014d1e:	2268      	movs	r2, #104	; 0x68
 8014d20:	1e4d      	subs	r5, r1, #1
 8014d22:	4355      	muls	r5, r2
 8014d24:	460e      	mov	r6, r1
 8014d26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014d2a:	f7ff f8db 	bl	8013ee4 <_malloc_r>
 8014d2e:	4604      	mov	r4, r0
 8014d30:	b140      	cbz	r0, 8014d44 <__sfmoreglue+0x28>
 8014d32:	2100      	movs	r1, #0
 8014d34:	e9c0 1600 	strd	r1, r6, [r0]
 8014d38:	300c      	adds	r0, #12
 8014d3a:	60a0      	str	r0, [r4, #8]
 8014d3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014d40:	f7fb fb6a 	bl	8010418 <memset>
 8014d44:	4620      	mov	r0, r4
 8014d46:	bd70      	pop	{r4, r5, r6, pc}

08014d48 <__sfp_lock_acquire>:
 8014d48:	4801      	ldr	r0, [pc, #4]	; (8014d50 <__sfp_lock_acquire+0x8>)
 8014d4a:	f000 b8c5 	b.w	8014ed8 <__retarget_lock_acquire_recursive>
 8014d4e:	bf00      	nop
 8014d50:	20000775 	.word	0x20000775

08014d54 <__sfp_lock_release>:
 8014d54:	4801      	ldr	r0, [pc, #4]	; (8014d5c <__sfp_lock_release+0x8>)
 8014d56:	f000 b8c0 	b.w	8014eda <__retarget_lock_release_recursive>
 8014d5a:	bf00      	nop
 8014d5c:	20000775 	.word	0x20000775

08014d60 <__sinit_lock_acquire>:
 8014d60:	4801      	ldr	r0, [pc, #4]	; (8014d68 <__sinit_lock_acquire+0x8>)
 8014d62:	f000 b8b9 	b.w	8014ed8 <__retarget_lock_acquire_recursive>
 8014d66:	bf00      	nop
 8014d68:	20000776 	.word	0x20000776

08014d6c <__sinit_lock_release>:
 8014d6c:	4801      	ldr	r0, [pc, #4]	; (8014d74 <__sinit_lock_release+0x8>)
 8014d6e:	f000 b8b4 	b.w	8014eda <__retarget_lock_release_recursive>
 8014d72:	bf00      	nop
 8014d74:	20000776 	.word	0x20000776

08014d78 <__sinit>:
 8014d78:	b510      	push	{r4, lr}
 8014d7a:	4604      	mov	r4, r0
 8014d7c:	f7ff fff0 	bl	8014d60 <__sinit_lock_acquire>
 8014d80:	69a3      	ldr	r3, [r4, #24]
 8014d82:	b11b      	cbz	r3, 8014d8c <__sinit+0x14>
 8014d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d88:	f7ff bff0 	b.w	8014d6c <__sinit_lock_release>
 8014d8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014d90:	6523      	str	r3, [r4, #80]	; 0x50
 8014d92:	4b13      	ldr	r3, [pc, #76]	; (8014de0 <__sinit+0x68>)
 8014d94:	4a13      	ldr	r2, [pc, #76]	; (8014de4 <__sinit+0x6c>)
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	62a2      	str	r2, [r4, #40]	; 0x28
 8014d9a:	42a3      	cmp	r3, r4
 8014d9c:	bf04      	itt	eq
 8014d9e:	2301      	moveq	r3, #1
 8014da0:	61a3      	streq	r3, [r4, #24]
 8014da2:	4620      	mov	r0, r4
 8014da4:	f000 f820 	bl	8014de8 <__sfp>
 8014da8:	6060      	str	r0, [r4, #4]
 8014daa:	4620      	mov	r0, r4
 8014dac:	f000 f81c 	bl	8014de8 <__sfp>
 8014db0:	60a0      	str	r0, [r4, #8]
 8014db2:	4620      	mov	r0, r4
 8014db4:	f000 f818 	bl	8014de8 <__sfp>
 8014db8:	2200      	movs	r2, #0
 8014dba:	60e0      	str	r0, [r4, #12]
 8014dbc:	2104      	movs	r1, #4
 8014dbe:	6860      	ldr	r0, [r4, #4]
 8014dc0:	f7ff ff82 	bl	8014cc8 <std>
 8014dc4:	68a0      	ldr	r0, [r4, #8]
 8014dc6:	2201      	movs	r2, #1
 8014dc8:	2109      	movs	r1, #9
 8014dca:	f7ff ff7d 	bl	8014cc8 <std>
 8014dce:	68e0      	ldr	r0, [r4, #12]
 8014dd0:	2202      	movs	r2, #2
 8014dd2:	2112      	movs	r1, #18
 8014dd4:	f7ff ff78 	bl	8014cc8 <std>
 8014dd8:	2301      	movs	r3, #1
 8014dda:	61a3      	str	r3, [r4, #24]
 8014ddc:	e7d2      	b.n	8014d84 <__sinit+0xc>
 8014dde:	bf00      	nop
 8014de0:	08015ae0 	.word	0x08015ae0
 8014de4:	08014d11 	.word	0x08014d11

08014de8 <__sfp>:
 8014de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dea:	4607      	mov	r7, r0
 8014dec:	f7ff ffac 	bl	8014d48 <__sfp_lock_acquire>
 8014df0:	4b1e      	ldr	r3, [pc, #120]	; (8014e6c <__sfp+0x84>)
 8014df2:	681e      	ldr	r6, [r3, #0]
 8014df4:	69b3      	ldr	r3, [r6, #24]
 8014df6:	b913      	cbnz	r3, 8014dfe <__sfp+0x16>
 8014df8:	4630      	mov	r0, r6
 8014dfa:	f7ff ffbd 	bl	8014d78 <__sinit>
 8014dfe:	3648      	adds	r6, #72	; 0x48
 8014e00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014e04:	3b01      	subs	r3, #1
 8014e06:	d503      	bpl.n	8014e10 <__sfp+0x28>
 8014e08:	6833      	ldr	r3, [r6, #0]
 8014e0a:	b30b      	cbz	r3, 8014e50 <__sfp+0x68>
 8014e0c:	6836      	ldr	r6, [r6, #0]
 8014e0e:	e7f7      	b.n	8014e00 <__sfp+0x18>
 8014e10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014e14:	b9d5      	cbnz	r5, 8014e4c <__sfp+0x64>
 8014e16:	4b16      	ldr	r3, [pc, #88]	; (8014e70 <__sfp+0x88>)
 8014e18:	60e3      	str	r3, [r4, #12]
 8014e1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014e1e:	6665      	str	r5, [r4, #100]	; 0x64
 8014e20:	f000 f859 	bl	8014ed6 <__retarget_lock_init_recursive>
 8014e24:	f7ff ff96 	bl	8014d54 <__sfp_lock_release>
 8014e28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014e2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014e30:	6025      	str	r5, [r4, #0]
 8014e32:	61a5      	str	r5, [r4, #24]
 8014e34:	2208      	movs	r2, #8
 8014e36:	4629      	mov	r1, r5
 8014e38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014e3c:	f7fb faec 	bl	8010418 <memset>
 8014e40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014e44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014e48:	4620      	mov	r0, r4
 8014e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e4c:	3468      	adds	r4, #104	; 0x68
 8014e4e:	e7d9      	b.n	8014e04 <__sfp+0x1c>
 8014e50:	2104      	movs	r1, #4
 8014e52:	4638      	mov	r0, r7
 8014e54:	f7ff ff62 	bl	8014d1c <__sfmoreglue>
 8014e58:	4604      	mov	r4, r0
 8014e5a:	6030      	str	r0, [r6, #0]
 8014e5c:	2800      	cmp	r0, #0
 8014e5e:	d1d5      	bne.n	8014e0c <__sfp+0x24>
 8014e60:	f7ff ff78 	bl	8014d54 <__sfp_lock_release>
 8014e64:	230c      	movs	r3, #12
 8014e66:	603b      	str	r3, [r7, #0]
 8014e68:	e7ee      	b.n	8014e48 <__sfp+0x60>
 8014e6a:	bf00      	nop
 8014e6c:	08015ae0 	.word	0x08015ae0
 8014e70:	ffff0001 	.word	0xffff0001

08014e74 <fiprintf>:
 8014e74:	b40e      	push	{r1, r2, r3}
 8014e76:	b503      	push	{r0, r1, lr}
 8014e78:	4601      	mov	r1, r0
 8014e7a:	ab03      	add	r3, sp, #12
 8014e7c:	4805      	ldr	r0, [pc, #20]	; (8014e94 <fiprintf+0x20>)
 8014e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e82:	6800      	ldr	r0, [r0, #0]
 8014e84:	9301      	str	r3, [sp, #4]
 8014e86:	f000 f8a7 	bl	8014fd8 <_vfiprintf_r>
 8014e8a:	b002      	add	sp, #8
 8014e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e90:	b003      	add	sp, #12
 8014e92:	4770      	bx	lr
 8014e94:	200002c8 	.word	0x200002c8

08014e98 <_fwalk_reent>:
 8014e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e9c:	4606      	mov	r6, r0
 8014e9e:	4688      	mov	r8, r1
 8014ea0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014ea4:	2700      	movs	r7, #0
 8014ea6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014eaa:	f1b9 0901 	subs.w	r9, r9, #1
 8014eae:	d505      	bpl.n	8014ebc <_fwalk_reent+0x24>
 8014eb0:	6824      	ldr	r4, [r4, #0]
 8014eb2:	2c00      	cmp	r4, #0
 8014eb4:	d1f7      	bne.n	8014ea6 <_fwalk_reent+0xe>
 8014eb6:	4638      	mov	r0, r7
 8014eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ebc:	89ab      	ldrh	r3, [r5, #12]
 8014ebe:	2b01      	cmp	r3, #1
 8014ec0:	d907      	bls.n	8014ed2 <_fwalk_reent+0x3a>
 8014ec2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ec6:	3301      	adds	r3, #1
 8014ec8:	d003      	beq.n	8014ed2 <_fwalk_reent+0x3a>
 8014eca:	4629      	mov	r1, r5
 8014ecc:	4630      	mov	r0, r6
 8014ece:	47c0      	blx	r8
 8014ed0:	4307      	orrs	r7, r0
 8014ed2:	3568      	adds	r5, #104	; 0x68
 8014ed4:	e7e9      	b.n	8014eaa <_fwalk_reent+0x12>

08014ed6 <__retarget_lock_init_recursive>:
 8014ed6:	4770      	bx	lr

08014ed8 <__retarget_lock_acquire_recursive>:
 8014ed8:	4770      	bx	lr

08014eda <__retarget_lock_release_recursive>:
 8014eda:	4770      	bx	lr

08014edc <memmove>:
 8014edc:	4288      	cmp	r0, r1
 8014ede:	b510      	push	{r4, lr}
 8014ee0:	eb01 0402 	add.w	r4, r1, r2
 8014ee4:	d902      	bls.n	8014eec <memmove+0x10>
 8014ee6:	4284      	cmp	r4, r0
 8014ee8:	4623      	mov	r3, r4
 8014eea:	d807      	bhi.n	8014efc <memmove+0x20>
 8014eec:	1e43      	subs	r3, r0, #1
 8014eee:	42a1      	cmp	r1, r4
 8014ef0:	d008      	beq.n	8014f04 <memmove+0x28>
 8014ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014ef6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014efa:	e7f8      	b.n	8014eee <memmove+0x12>
 8014efc:	4402      	add	r2, r0
 8014efe:	4601      	mov	r1, r0
 8014f00:	428a      	cmp	r2, r1
 8014f02:	d100      	bne.n	8014f06 <memmove+0x2a>
 8014f04:	bd10      	pop	{r4, pc}
 8014f06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014f0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014f0e:	e7f7      	b.n	8014f00 <memmove+0x24>

08014f10 <__malloc_lock>:
 8014f10:	4801      	ldr	r0, [pc, #4]	; (8014f18 <__malloc_lock+0x8>)
 8014f12:	f7ff bfe1 	b.w	8014ed8 <__retarget_lock_acquire_recursive>
 8014f16:	bf00      	nop
 8014f18:	20000774 	.word	0x20000774

08014f1c <__malloc_unlock>:
 8014f1c:	4801      	ldr	r0, [pc, #4]	; (8014f24 <__malloc_unlock+0x8>)
 8014f1e:	f7ff bfdc 	b.w	8014eda <__retarget_lock_release_recursive>
 8014f22:	bf00      	nop
 8014f24:	20000774 	.word	0x20000774

08014f28 <_realloc_r>:
 8014f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f2c:	4680      	mov	r8, r0
 8014f2e:	4614      	mov	r4, r2
 8014f30:	460e      	mov	r6, r1
 8014f32:	b921      	cbnz	r1, 8014f3e <_realloc_r+0x16>
 8014f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f38:	4611      	mov	r1, r2
 8014f3a:	f7fe bfd3 	b.w	8013ee4 <_malloc_r>
 8014f3e:	b92a      	cbnz	r2, 8014f4c <_realloc_r+0x24>
 8014f40:	f7fe ff64 	bl	8013e0c <_free_r>
 8014f44:	4625      	mov	r5, r4
 8014f46:	4628      	mov	r0, r5
 8014f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f4c:	f000 faa0 	bl	8015490 <_malloc_usable_size_r>
 8014f50:	4284      	cmp	r4, r0
 8014f52:	4607      	mov	r7, r0
 8014f54:	d802      	bhi.n	8014f5c <_realloc_r+0x34>
 8014f56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014f5a:	d812      	bhi.n	8014f82 <_realloc_r+0x5a>
 8014f5c:	4621      	mov	r1, r4
 8014f5e:	4640      	mov	r0, r8
 8014f60:	f7fe ffc0 	bl	8013ee4 <_malloc_r>
 8014f64:	4605      	mov	r5, r0
 8014f66:	2800      	cmp	r0, #0
 8014f68:	d0ed      	beq.n	8014f46 <_realloc_r+0x1e>
 8014f6a:	42bc      	cmp	r4, r7
 8014f6c:	4622      	mov	r2, r4
 8014f6e:	4631      	mov	r1, r6
 8014f70:	bf28      	it	cs
 8014f72:	463a      	movcs	r2, r7
 8014f74:	f7fb fa42 	bl	80103fc <memcpy>
 8014f78:	4631      	mov	r1, r6
 8014f7a:	4640      	mov	r0, r8
 8014f7c:	f7fe ff46 	bl	8013e0c <_free_r>
 8014f80:	e7e1      	b.n	8014f46 <_realloc_r+0x1e>
 8014f82:	4635      	mov	r5, r6
 8014f84:	e7df      	b.n	8014f46 <_realloc_r+0x1e>

08014f86 <__sfputc_r>:
 8014f86:	6893      	ldr	r3, [r2, #8]
 8014f88:	3b01      	subs	r3, #1
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	b410      	push	{r4}
 8014f8e:	6093      	str	r3, [r2, #8]
 8014f90:	da08      	bge.n	8014fa4 <__sfputc_r+0x1e>
 8014f92:	6994      	ldr	r4, [r2, #24]
 8014f94:	42a3      	cmp	r3, r4
 8014f96:	db01      	blt.n	8014f9c <__sfputc_r+0x16>
 8014f98:	290a      	cmp	r1, #10
 8014f9a:	d103      	bne.n	8014fa4 <__sfputc_r+0x1e>
 8014f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014fa0:	f000 b94a 	b.w	8015238 <__swbuf_r>
 8014fa4:	6813      	ldr	r3, [r2, #0]
 8014fa6:	1c58      	adds	r0, r3, #1
 8014fa8:	6010      	str	r0, [r2, #0]
 8014faa:	7019      	strb	r1, [r3, #0]
 8014fac:	4608      	mov	r0, r1
 8014fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014fb2:	4770      	bx	lr

08014fb4 <__sfputs_r>:
 8014fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fb6:	4606      	mov	r6, r0
 8014fb8:	460f      	mov	r7, r1
 8014fba:	4614      	mov	r4, r2
 8014fbc:	18d5      	adds	r5, r2, r3
 8014fbe:	42ac      	cmp	r4, r5
 8014fc0:	d101      	bne.n	8014fc6 <__sfputs_r+0x12>
 8014fc2:	2000      	movs	r0, #0
 8014fc4:	e007      	b.n	8014fd6 <__sfputs_r+0x22>
 8014fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fca:	463a      	mov	r2, r7
 8014fcc:	4630      	mov	r0, r6
 8014fce:	f7ff ffda 	bl	8014f86 <__sfputc_r>
 8014fd2:	1c43      	adds	r3, r0, #1
 8014fd4:	d1f3      	bne.n	8014fbe <__sfputs_r+0xa>
 8014fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014fd8 <_vfiprintf_r>:
 8014fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fdc:	460d      	mov	r5, r1
 8014fde:	b09d      	sub	sp, #116	; 0x74
 8014fe0:	4614      	mov	r4, r2
 8014fe2:	4698      	mov	r8, r3
 8014fe4:	4606      	mov	r6, r0
 8014fe6:	b118      	cbz	r0, 8014ff0 <_vfiprintf_r+0x18>
 8014fe8:	6983      	ldr	r3, [r0, #24]
 8014fea:	b90b      	cbnz	r3, 8014ff0 <_vfiprintf_r+0x18>
 8014fec:	f7ff fec4 	bl	8014d78 <__sinit>
 8014ff0:	4b89      	ldr	r3, [pc, #548]	; (8015218 <_vfiprintf_r+0x240>)
 8014ff2:	429d      	cmp	r5, r3
 8014ff4:	d11b      	bne.n	801502e <_vfiprintf_r+0x56>
 8014ff6:	6875      	ldr	r5, [r6, #4]
 8014ff8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ffa:	07d9      	lsls	r1, r3, #31
 8014ffc:	d405      	bmi.n	801500a <_vfiprintf_r+0x32>
 8014ffe:	89ab      	ldrh	r3, [r5, #12]
 8015000:	059a      	lsls	r2, r3, #22
 8015002:	d402      	bmi.n	801500a <_vfiprintf_r+0x32>
 8015004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015006:	f7ff ff67 	bl	8014ed8 <__retarget_lock_acquire_recursive>
 801500a:	89ab      	ldrh	r3, [r5, #12]
 801500c:	071b      	lsls	r3, r3, #28
 801500e:	d501      	bpl.n	8015014 <_vfiprintf_r+0x3c>
 8015010:	692b      	ldr	r3, [r5, #16]
 8015012:	b9eb      	cbnz	r3, 8015050 <_vfiprintf_r+0x78>
 8015014:	4629      	mov	r1, r5
 8015016:	4630      	mov	r0, r6
 8015018:	f000 f960 	bl	80152dc <__swsetup_r>
 801501c:	b1c0      	cbz	r0, 8015050 <_vfiprintf_r+0x78>
 801501e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015020:	07dc      	lsls	r4, r3, #31
 8015022:	d50e      	bpl.n	8015042 <_vfiprintf_r+0x6a>
 8015024:	f04f 30ff 	mov.w	r0, #4294967295
 8015028:	b01d      	add	sp, #116	; 0x74
 801502a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801502e:	4b7b      	ldr	r3, [pc, #492]	; (801521c <_vfiprintf_r+0x244>)
 8015030:	429d      	cmp	r5, r3
 8015032:	d101      	bne.n	8015038 <_vfiprintf_r+0x60>
 8015034:	68b5      	ldr	r5, [r6, #8]
 8015036:	e7df      	b.n	8014ff8 <_vfiprintf_r+0x20>
 8015038:	4b79      	ldr	r3, [pc, #484]	; (8015220 <_vfiprintf_r+0x248>)
 801503a:	429d      	cmp	r5, r3
 801503c:	bf08      	it	eq
 801503e:	68f5      	ldreq	r5, [r6, #12]
 8015040:	e7da      	b.n	8014ff8 <_vfiprintf_r+0x20>
 8015042:	89ab      	ldrh	r3, [r5, #12]
 8015044:	0598      	lsls	r0, r3, #22
 8015046:	d4ed      	bmi.n	8015024 <_vfiprintf_r+0x4c>
 8015048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801504a:	f7ff ff46 	bl	8014eda <__retarget_lock_release_recursive>
 801504e:	e7e9      	b.n	8015024 <_vfiprintf_r+0x4c>
 8015050:	2300      	movs	r3, #0
 8015052:	9309      	str	r3, [sp, #36]	; 0x24
 8015054:	2320      	movs	r3, #32
 8015056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801505a:	f8cd 800c 	str.w	r8, [sp, #12]
 801505e:	2330      	movs	r3, #48	; 0x30
 8015060:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015224 <_vfiprintf_r+0x24c>
 8015064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015068:	f04f 0901 	mov.w	r9, #1
 801506c:	4623      	mov	r3, r4
 801506e:	469a      	mov	sl, r3
 8015070:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015074:	b10a      	cbz	r2, 801507a <_vfiprintf_r+0xa2>
 8015076:	2a25      	cmp	r2, #37	; 0x25
 8015078:	d1f9      	bne.n	801506e <_vfiprintf_r+0x96>
 801507a:	ebba 0b04 	subs.w	fp, sl, r4
 801507e:	d00b      	beq.n	8015098 <_vfiprintf_r+0xc0>
 8015080:	465b      	mov	r3, fp
 8015082:	4622      	mov	r2, r4
 8015084:	4629      	mov	r1, r5
 8015086:	4630      	mov	r0, r6
 8015088:	f7ff ff94 	bl	8014fb4 <__sfputs_r>
 801508c:	3001      	adds	r0, #1
 801508e:	f000 80aa 	beq.w	80151e6 <_vfiprintf_r+0x20e>
 8015092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015094:	445a      	add	r2, fp
 8015096:	9209      	str	r2, [sp, #36]	; 0x24
 8015098:	f89a 3000 	ldrb.w	r3, [sl]
 801509c:	2b00      	cmp	r3, #0
 801509e:	f000 80a2 	beq.w	80151e6 <_vfiprintf_r+0x20e>
 80150a2:	2300      	movs	r3, #0
 80150a4:	f04f 32ff 	mov.w	r2, #4294967295
 80150a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80150ac:	f10a 0a01 	add.w	sl, sl, #1
 80150b0:	9304      	str	r3, [sp, #16]
 80150b2:	9307      	str	r3, [sp, #28]
 80150b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80150b8:	931a      	str	r3, [sp, #104]	; 0x68
 80150ba:	4654      	mov	r4, sl
 80150bc:	2205      	movs	r2, #5
 80150be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150c2:	4858      	ldr	r0, [pc, #352]	; (8015224 <_vfiprintf_r+0x24c>)
 80150c4:	f7eb f8ac 	bl	8000220 <memchr>
 80150c8:	9a04      	ldr	r2, [sp, #16]
 80150ca:	b9d8      	cbnz	r0, 8015104 <_vfiprintf_r+0x12c>
 80150cc:	06d1      	lsls	r1, r2, #27
 80150ce:	bf44      	itt	mi
 80150d0:	2320      	movmi	r3, #32
 80150d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80150d6:	0713      	lsls	r3, r2, #28
 80150d8:	bf44      	itt	mi
 80150da:	232b      	movmi	r3, #43	; 0x2b
 80150dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80150e0:	f89a 3000 	ldrb.w	r3, [sl]
 80150e4:	2b2a      	cmp	r3, #42	; 0x2a
 80150e6:	d015      	beq.n	8015114 <_vfiprintf_r+0x13c>
 80150e8:	9a07      	ldr	r2, [sp, #28]
 80150ea:	4654      	mov	r4, sl
 80150ec:	2000      	movs	r0, #0
 80150ee:	f04f 0c0a 	mov.w	ip, #10
 80150f2:	4621      	mov	r1, r4
 80150f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80150f8:	3b30      	subs	r3, #48	; 0x30
 80150fa:	2b09      	cmp	r3, #9
 80150fc:	d94e      	bls.n	801519c <_vfiprintf_r+0x1c4>
 80150fe:	b1b0      	cbz	r0, 801512e <_vfiprintf_r+0x156>
 8015100:	9207      	str	r2, [sp, #28]
 8015102:	e014      	b.n	801512e <_vfiprintf_r+0x156>
 8015104:	eba0 0308 	sub.w	r3, r0, r8
 8015108:	fa09 f303 	lsl.w	r3, r9, r3
 801510c:	4313      	orrs	r3, r2
 801510e:	9304      	str	r3, [sp, #16]
 8015110:	46a2      	mov	sl, r4
 8015112:	e7d2      	b.n	80150ba <_vfiprintf_r+0xe2>
 8015114:	9b03      	ldr	r3, [sp, #12]
 8015116:	1d19      	adds	r1, r3, #4
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	9103      	str	r1, [sp, #12]
 801511c:	2b00      	cmp	r3, #0
 801511e:	bfbb      	ittet	lt
 8015120:	425b      	neglt	r3, r3
 8015122:	f042 0202 	orrlt.w	r2, r2, #2
 8015126:	9307      	strge	r3, [sp, #28]
 8015128:	9307      	strlt	r3, [sp, #28]
 801512a:	bfb8      	it	lt
 801512c:	9204      	strlt	r2, [sp, #16]
 801512e:	7823      	ldrb	r3, [r4, #0]
 8015130:	2b2e      	cmp	r3, #46	; 0x2e
 8015132:	d10c      	bne.n	801514e <_vfiprintf_r+0x176>
 8015134:	7863      	ldrb	r3, [r4, #1]
 8015136:	2b2a      	cmp	r3, #42	; 0x2a
 8015138:	d135      	bne.n	80151a6 <_vfiprintf_r+0x1ce>
 801513a:	9b03      	ldr	r3, [sp, #12]
 801513c:	1d1a      	adds	r2, r3, #4
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	9203      	str	r2, [sp, #12]
 8015142:	2b00      	cmp	r3, #0
 8015144:	bfb8      	it	lt
 8015146:	f04f 33ff 	movlt.w	r3, #4294967295
 801514a:	3402      	adds	r4, #2
 801514c:	9305      	str	r3, [sp, #20]
 801514e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015234 <_vfiprintf_r+0x25c>
 8015152:	7821      	ldrb	r1, [r4, #0]
 8015154:	2203      	movs	r2, #3
 8015156:	4650      	mov	r0, sl
 8015158:	f7eb f862 	bl	8000220 <memchr>
 801515c:	b140      	cbz	r0, 8015170 <_vfiprintf_r+0x198>
 801515e:	2340      	movs	r3, #64	; 0x40
 8015160:	eba0 000a 	sub.w	r0, r0, sl
 8015164:	fa03 f000 	lsl.w	r0, r3, r0
 8015168:	9b04      	ldr	r3, [sp, #16]
 801516a:	4303      	orrs	r3, r0
 801516c:	3401      	adds	r4, #1
 801516e:	9304      	str	r3, [sp, #16]
 8015170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015174:	482c      	ldr	r0, [pc, #176]	; (8015228 <_vfiprintf_r+0x250>)
 8015176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801517a:	2206      	movs	r2, #6
 801517c:	f7eb f850 	bl	8000220 <memchr>
 8015180:	2800      	cmp	r0, #0
 8015182:	d03f      	beq.n	8015204 <_vfiprintf_r+0x22c>
 8015184:	4b29      	ldr	r3, [pc, #164]	; (801522c <_vfiprintf_r+0x254>)
 8015186:	bb1b      	cbnz	r3, 80151d0 <_vfiprintf_r+0x1f8>
 8015188:	9b03      	ldr	r3, [sp, #12]
 801518a:	3307      	adds	r3, #7
 801518c:	f023 0307 	bic.w	r3, r3, #7
 8015190:	3308      	adds	r3, #8
 8015192:	9303      	str	r3, [sp, #12]
 8015194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015196:	443b      	add	r3, r7
 8015198:	9309      	str	r3, [sp, #36]	; 0x24
 801519a:	e767      	b.n	801506c <_vfiprintf_r+0x94>
 801519c:	fb0c 3202 	mla	r2, ip, r2, r3
 80151a0:	460c      	mov	r4, r1
 80151a2:	2001      	movs	r0, #1
 80151a4:	e7a5      	b.n	80150f2 <_vfiprintf_r+0x11a>
 80151a6:	2300      	movs	r3, #0
 80151a8:	3401      	adds	r4, #1
 80151aa:	9305      	str	r3, [sp, #20]
 80151ac:	4619      	mov	r1, r3
 80151ae:	f04f 0c0a 	mov.w	ip, #10
 80151b2:	4620      	mov	r0, r4
 80151b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80151b8:	3a30      	subs	r2, #48	; 0x30
 80151ba:	2a09      	cmp	r2, #9
 80151bc:	d903      	bls.n	80151c6 <_vfiprintf_r+0x1ee>
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d0c5      	beq.n	801514e <_vfiprintf_r+0x176>
 80151c2:	9105      	str	r1, [sp, #20]
 80151c4:	e7c3      	b.n	801514e <_vfiprintf_r+0x176>
 80151c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80151ca:	4604      	mov	r4, r0
 80151cc:	2301      	movs	r3, #1
 80151ce:	e7f0      	b.n	80151b2 <_vfiprintf_r+0x1da>
 80151d0:	ab03      	add	r3, sp, #12
 80151d2:	9300      	str	r3, [sp, #0]
 80151d4:	462a      	mov	r2, r5
 80151d6:	4b16      	ldr	r3, [pc, #88]	; (8015230 <_vfiprintf_r+0x258>)
 80151d8:	a904      	add	r1, sp, #16
 80151da:	4630      	mov	r0, r6
 80151dc:	f7fb f9c4 	bl	8010568 <_printf_float>
 80151e0:	4607      	mov	r7, r0
 80151e2:	1c78      	adds	r0, r7, #1
 80151e4:	d1d6      	bne.n	8015194 <_vfiprintf_r+0x1bc>
 80151e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80151e8:	07d9      	lsls	r1, r3, #31
 80151ea:	d405      	bmi.n	80151f8 <_vfiprintf_r+0x220>
 80151ec:	89ab      	ldrh	r3, [r5, #12]
 80151ee:	059a      	lsls	r2, r3, #22
 80151f0:	d402      	bmi.n	80151f8 <_vfiprintf_r+0x220>
 80151f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80151f4:	f7ff fe71 	bl	8014eda <__retarget_lock_release_recursive>
 80151f8:	89ab      	ldrh	r3, [r5, #12]
 80151fa:	065b      	lsls	r3, r3, #25
 80151fc:	f53f af12 	bmi.w	8015024 <_vfiprintf_r+0x4c>
 8015200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015202:	e711      	b.n	8015028 <_vfiprintf_r+0x50>
 8015204:	ab03      	add	r3, sp, #12
 8015206:	9300      	str	r3, [sp, #0]
 8015208:	462a      	mov	r2, r5
 801520a:	4b09      	ldr	r3, [pc, #36]	; (8015230 <_vfiprintf_r+0x258>)
 801520c:	a904      	add	r1, sp, #16
 801520e:	4630      	mov	r0, r6
 8015210:	f7fb fc4e 	bl	8010ab0 <_printf_i>
 8015214:	e7e4      	b.n	80151e0 <_vfiprintf_r+0x208>
 8015216:	bf00      	nop
 8015218:	08015f5c 	.word	0x08015f5c
 801521c:	08015f7c 	.word	0x08015f7c
 8015220:	08015f3c 	.word	0x08015f3c
 8015224:	08015ed4 	.word	0x08015ed4
 8015228:	08015ede 	.word	0x08015ede
 801522c:	08010569 	.word	0x08010569
 8015230:	08014fb5 	.word	0x08014fb5
 8015234:	08015eda 	.word	0x08015eda

08015238 <__swbuf_r>:
 8015238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801523a:	460e      	mov	r6, r1
 801523c:	4614      	mov	r4, r2
 801523e:	4605      	mov	r5, r0
 8015240:	b118      	cbz	r0, 801524a <__swbuf_r+0x12>
 8015242:	6983      	ldr	r3, [r0, #24]
 8015244:	b90b      	cbnz	r3, 801524a <__swbuf_r+0x12>
 8015246:	f7ff fd97 	bl	8014d78 <__sinit>
 801524a:	4b21      	ldr	r3, [pc, #132]	; (80152d0 <__swbuf_r+0x98>)
 801524c:	429c      	cmp	r4, r3
 801524e:	d12b      	bne.n	80152a8 <__swbuf_r+0x70>
 8015250:	686c      	ldr	r4, [r5, #4]
 8015252:	69a3      	ldr	r3, [r4, #24]
 8015254:	60a3      	str	r3, [r4, #8]
 8015256:	89a3      	ldrh	r3, [r4, #12]
 8015258:	071a      	lsls	r2, r3, #28
 801525a:	d52f      	bpl.n	80152bc <__swbuf_r+0x84>
 801525c:	6923      	ldr	r3, [r4, #16]
 801525e:	b36b      	cbz	r3, 80152bc <__swbuf_r+0x84>
 8015260:	6923      	ldr	r3, [r4, #16]
 8015262:	6820      	ldr	r0, [r4, #0]
 8015264:	1ac0      	subs	r0, r0, r3
 8015266:	6963      	ldr	r3, [r4, #20]
 8015268:	b2f6      	uxtb	r6, r6
 801526a:	4283      	cmp	r3, r0
 801526c:	4637      	mov	r7, r6
 801526e:	dc04      	bgt.n	801527a <__swbuf_r+0x42>
 8015270:	4621      	mov	r1, r4
 8015272:	4628      	mov	r0, r5
 8015274:	f7ff fcec 	bl	8014c50 <_fflush_r>
 8015278:	bb30      	cbnz	r0, 80152c8 <__swbuf_r+0x90>
 801527a:	68a3      	ldr	r3, [r4, #8]
 801527c:	3b01      	subs	r3, #1
 801527e:	60a3      	str	r3, [r4, #8]
 8015280:	6823      	ldr	r3, [r4, #0]
 8015282:	1c5a      	adds	r2, r3, #1
 8015284:	6022      	str	r2, [r4, #0]
 8015286:	701e      	strb	r6, [r3, #0]
 8015288:	6963      	ldr	r3, [r4, #20]
 801528a:	3001      	adds	r0, #1
 801528c:	4283      	cmp	r3, r0
 801528e:	d004      	beq.n	801529a <__swbuf_r+0x62>
 8015290:	89a3      	ldrh	r3, [r4, #12]
 8015292:	07db      	lsls	r3, r3, #31
 8015294:	d506      	bpl.n	80152a4 <__swbuf_r+0x6c>
 8015296:	2e0a      	cmp	r6, #10
 8015298:	d104      	bne.n	80152a4 <__swbuf_r+0x6c>
 801529a:	4621      	mov	r1, r4
 801529c:	4628      	mov	r0, r5
 801529e:	f7ff fcd7 	bl	8014c50 <_fflush_r>
 80152a2:	b988      	cbnz	r0, 80152c8 <__swbuf_r+0x90>
 80152a4:	4638      	mov	r0, r7
 80152a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152a8:	4b0a      	ldr	r3, [pc, #40]	; (80152d4 <__swbuf_r+0x9c>)
 80152aa:	429c      	cmp	r4, r3
 80152ac:	d101      	bne.n	80152b2 <__swbuf_r+0x7a>
 80152ae:	68ac      	ldr	r4, [r5, #8]
 80152b0:	e7cf      	b.n	8015252 <__swbuf_r+0x1a>
 80152b2:	4b09      	ldr	r3, [pc, #36]	; (80152d8 <__swbuf_r+0xa0>)
 80152b4:	429c      	cmp	r4, r3
 80152b6:	bf08      	it	eq
 80152b8:	68ec      	ldreq	r4, [r5, #12]
 80152ba:	e7ca      	b.n	8015252 <__swbuf_r+0x1a>
 80152bc:	4621      	mov	r1, r4
 80152be:	4628      	mov	r0, r5
 80152c0:	f000 f80c 	bl	80152dc <__swsetup_r>
 80152c4:	2800      	cmp	r0, #0
 80152c6:	d0cb      	beq.n	8015260 <__swbuf_r+0x28>
 80152c8:	f04f 37ff 	mov.w	r7, #4294967295
 80152cc:	e7ea      	b.n	80152a4 <__swbuf_r+0x6c>
 80152ce:	bf00      	nop
 80152d0:	08015f5c 	.word	0x08015f5c
 80152d4:	08015f7c 	.word	0x08015f7c
 80152d8:	08015f3c 	.word	0x08015f3c

080152dc <__swsetup_r>:
 80152dc:	4b32      	ldr	r3, [pc, #200]	; (80153a8 <__swsetup_r+0xcc>)
 80152de:	b570      	push	{r4, r5, r6, lr}
 80152e0:	681d      	ldr	r5, [r3, #0]
 80152e2:	4606      	mov	r6, r0
 80152e4:	460c      	mov	r4, r1
 80152e6:	b125      	cbz	r5, 80152f2 <__swsetup_r+0x16>
 80152e8:	69ab      	ldr	r3, [r5, #24]
 80152ea:	b913      	cbnz	r3, 80152f2 <__swsetup_r+0x16>
 80152ec:	4628      	mov	r0, r5
 80152ee:	f7ff fd43 	bl	8014d78 <__sinit>
 80152f2:	4b2e      	ldr	r3, [pc, #184]	; (80153ac <__swsetup_r+0xd0>)
 80152f4:	429c      	cmp	r4, r3
 80152f6:	d10f      	bne.n	8015318 <__swsetup_r+0x3c>
 80152f8:	686c      	ldr	r4, [r5, #4]
 80152fa:	89a3      	ldrh	r3, [r4, #12]
 80152fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015300:	0719      	lsls	r1, r3, #28
 8015302:	d42c      	bmi.n	801535e <__swsetup_r+0x82>
 8015304:	06dd      	lsls	r5, r3, #27
 8015306:	d411      	bmi.n	801532c <__swsetup_r+0x50>
 8015308:	2309      	movs	r3, #9
 801530a:	6033      	str	r3, [r6, #0]
 801530c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015310:	81a3      	strh	r3, [r4, #12]
 8015312:	f04f 30ff 	mov.w	r0, #4294967295
 8015316:	e03e      	b.n	8015396 <__swsetup_r+0xba>
 8015318:	4b25      	ldr	r3, [pc, #148]	; (80153b0 <__swsetup_r+0xd4>)
 801531a:	429c      	cmp	r4, r3
 801531c:	d101      	bne.n	8015322 <__swsetup_r+0x46>
 801531e:	68ac      	ldr	r4, [r5, #8]
 8015320:	e7eb      	b.n	80152fa <__swsetup_r+0x1e>
 8015322:	4b24      	ldr	r3, [pc, #144]	; (80153b4 <__swsetup_r+0xd8>)
 8015324:	429c      	cmp	r4, r3
 8015326:	bf08      	it	eq
 8015328:	68ec      	ldreq	r4, [r5, #12]
 801532a:	e7e6      	b.n	80152fa <__swsetup_r+0x1e>
 801532c:	0758      	lsls	r0, r3, #29
 801532e:	d512      	bpl.n	8015356 <__swsetup_r+0x7a>
 8015330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015332:	b141      	cbz	r1, 8015346 <__swsetup_r+0x6a>
 8015334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015338:	4299      	cmp	r1, r3
 801533a:	d002      	beq.n	8015342 <__swsetup_r+0x66>
 801533c:	4630      	mov	r0, r6
 801533e:	f7fe fd65 	bl	8013e0c <_free_r>
 8015342:	2300      	movs	r3, #0
 8015344:	6363      	str	r3, [r4, #52]	; 0x34
 8015346:	89a3      	ldrh	r3, [r4, #12]
 8015348:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801534c:	81a3      	strh	r3, [r4, #12]
 801534e:	2300      	movs	r3, #0
 8015350:	6063      	str	r3, [r4, #4]
 8015352:	6923      	ldr	r3, [r4, #16]
 8015354:	6023      	str	r3, [r4, #0]
 8015356:	89a3      	ldrh	r3, [r4, #12]
 8015358:	f043 0308 	orr.w	r3, r3, #8
 801535c:	81a3      	strh	r3, [r4, #12]
 801535e:	6923      	ldr	r3, [r4, #16]
 8015360:	b94b      	cbnz	r3, 8015376 <__swsetup_r+0x9a>
 8015362:	89a3      	ldrh	r3, [r4, #12]
 8015364:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801536c:	d003      	beq.n	8015376 <__swsetup_r+0x9a>
 801536e:	4621      	mov	r1, r4
 8015370:	4630      	mov	r0, r6
 8015372:	f000 f84d 	bl	8015410 <__smakebuf_r>
 8015376:	89a0      	ldrh	r0, [r4, #12]
 8015378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801537c:	f010 0301 	ands.w	r3, r0, #1
 8015380:	d00a      	beq.n	8015398 <__swsetup_r+0xbc>
 8015382:	2300      	movs	r3, #0
 8015384:	60a3      	str	r3, [r4, #8]
 8015386:	6963      	ldr	r3, [r4, #20]
 8015388:	425b      	negs	r3, r3
 801538a:	61a3      	str	r3, [r4, #24]
 801538c:	6923      	ldr	r3, [r4, #16]
 801538e:	b943      	cbnz	r3, 80153a2 <__swsetup_r+0xc6>
 8015390:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015394:	d1ba      	bne.n	801530c <__swsetup_r+0x30>
 8015396:	bd70      	pop	{r4, r5, r6, pc}
 8015398:	0781      	lsls	r1, r0, #30
 801539a:	bf58      	it	pl
 801539c:	6963      	ldrpl	r3, [r4, #20]
 801539e:	60a3      	str	r3, [r4, #8]
 80153a0:	e7f4      	b.n	801538c <__swsetup_r+0xb0>
 80153a2:	2000      	movs	r0, #0
 80153a4:	e7f7      	b.n	8015396 <__swsetup_r+0xba>
 80153a6:	bf00      	nop
 80153a8:	200002c8 	.word	0x200002c8
 80153ac:	08015f5c 	.word	0x08015f5c
 80153b0:	08015f7c 	.word	0x08015f7c
 80153b4:	08015f3c 	.word	0x08015f3c

080153b8 <abort>:
 80153b8:	b508      	push	{r3, lr}
 80153ba:	2006      	movs	r0, #6
 80153bc:	f000 f898 	bl	80154f0 <raise>
 80153c0:	2001      	movs	r0, #1
 80153c2:	f7ed feb7 	bl	8003134 <_exit>

080153c6 <__swhatbuf_r>:
 80153c6:	b570      	push	{r4, r5, r6, lr}
 80153c8:	460e      	mov	r6, r1
 80153ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153ce:	2900      	cmp	r1, #0
 80153d0:	b096      	sub	sp, #88	; 0x58
 80153d2:	4614      	mov	r4, r2
 80153d4:	461d      	mov	r5, r3
 80153d6:	da08      	bge.n	80153ea <__swhatbuf_r+0x24>
 80153d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80153dc:	2200      	movs	r2, #0
 80153de:	602a      	str	r2, [r5, #0]
 80153e0:	061a      	lsls	r2, r3, #24
 80153e2:	d410      	bmi.n	8015406 <__swhatbuf_r+0x40>
 80153e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80153e8:	e00e      	b.n	8015408 <__swhatbuf_r+0x42>
 80153ea:	466a      	mov	r2, sp
 80153ec:	f000 f89c 	bl	8015528 <_fstat_r>
 80153f0:	2800      	cmp	r0, #0
 80153f2:	dbf1      	blt.n	80153d8 <__swhatbuf_r+0x12>
 80153f4:	9a01      	ldr	r2, [sp, #4]
 80153f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80153fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80153fe:	425a      	negs	r2, r3
 8015400:	415a      	adcs	r2, r3
 8015402:	602a      	str	r2, [r5, #0]
 8015404:	e7ee      	b.n	80153e4 <__swhatbuf_r+0x1e>
 8015406:	2340      	movs	r3, #64	; 0x40
 8015408:	2000      	movs	r0, #0
 801540a:	6023      	str	r3, [r4, #0]
 801540c:	b016      	add	sp, #88	; 0x58
 801540e:	bd70      	pop	{r4, r5, r6, pc}

08015410 <__smakebuf_r>:
 8015410:	898b      	ldrh	r3, [r1, #12]
 8015412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015414:	079d      	lsls	r5, r3, #30
 8015416:	4606      	mov	r6, r0
 8015418:	460c      	mov	r4, r1
 801541a:	d507      	bpl.n	801542c <__smakebuf_r+0x1c>
 801541c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015420:	6023      	str	r3, [r4, #0]
 8015422:	6123      	str	r3, [r4, #16]
 8015424:	2301      	movs	r3, #1
 8015426:	6163      	str	r3, [r4, #20]
 8015428:	b002      	add	sp, #8
 801542a:	bd70      	pop	{r4, r5, r6, pc}
 801542c:	ab01      	add	r3, sp, #4
 801542e:	466a      	mov	r2, sp
 8015430:	f7ff ffc9 	bl	80153c6 <__swhatbuf_r>
 8015434:	9900      	ldr	r1, [sp, #0]
 8015436:	4605      	mov	r5, r0
 8015438:	4630      	mov	r0, r6
 801543a:	f7fe fd53 	bl	8013ee4 <_malloc_r>
 801543e:	b948      	cbnz	r0, 8015454 <__smakebuf_r+0x44>
 8015440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015444:	059a      	lsls	r2, r3, #22
 8015446:	d4ef      	bmi.n	8015428 <__smakebuf_r+0x18>
 8015448:	f023 0303 	bic.w	r3, r3, #3
 801544c:	f043 0302 	orr.w	r3, r3, #2
 8015450:	81a3      	strh	r3, [r4, #12]
 8015452:	e7e3      	b.n	801541c <__smakebuf_r+0xc>
 8015454:	4b0d      	ldr	r3, [pc, #52]	; (801548c <__smakebuf_r+0x7c>)
 8015456:	62b3      	str	r3, [r6, #40]	; 0x28
 8015458:	89a3      	ldrh	r3, [r4, #12]
 801545a:	6020      	str	r0, [r4, #0]
 801545c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015460:	81a3      	strh	r3, [r4, #12]
 8015462:	9b00      	ldr	r3, [sp, #0]
 8015464:	6163      	str	r3, [r4, #20]
 8015466:	9b01      	ldr	r3, [sp, #4]
 8015468:	6120      	str	r0, [r4, #16]
 801546a:	b15b      	cbz	r3, 8015484 <__smakebuf_r+0x74>
 801546c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015470:	4630      	mov	r0, r6
 8015472:	f000 f86b 	bl	801554c <_isatty_r>
 8015476:	b128      	cbz	r0, 8015484 <__smakebuf_r+0x74>
 8015478:	89a3      	ldrh	r3, [r4, #12]
 801547a:	f023 0303 	bic.w	r3, r3, #3
 801547e:	f043 0301 	orr.w	r3, r3, #1
 8015482:	81a3      	strh	r3, [r4, #12]
 8015484:	89a0      	ldrh	r0, [r4, #12]
 8015486:	4305      	orrs	r5, r0
 8015488:	81a5      	strh	r5, [r4, #12]
 801548a:	e7cd      	b.n	8015428 <__smakebuf_r+0x18>
 801548c:	08014d11 	.word	0x08014d11

08015490 <_malloc_usable_size_r>:
 8015490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015494:	1f18      	subs	r0, r3, #4
 8015496:	2b00      	cmp	r3, #0
 8015498:	bfbc      	itt	lt
 801549a:	580b      	ldrlt	r3, [r1, r0]
 801549c:	18c0      	addlt	r0, r0, r3
 801549e:	4770      	bx	lr

080154a0 <_raise_r>:
 80154a0:	291f      	cmp	r1, #31
 80154a2:	b538      	push	{r3, r4, r5, lr}
 80154a4:	4604      	mov	r4, r0
 80154a6:	460d      	mov	r5, r1
 80154a8:	d904      	bls.n	80154b4 <_raise_r+0x14>
 80154aa:	2316      	movs	r3, #22
 80154ac:	6003      	str	r3, [r0, #0]
 80154ae:	f04f 30ff 	mov.w	r0, #4294967295
 80154b2:	bd38      	pop	{r3, r4, r5, pc}
 80154b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80154b6:	b112      	cbz	r2, 80154be <_raise_r+0x1e>
 80154b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80154bc:	b94b      	cbnz	r3, 80154d2 <_raise_r+0x32>
 80154be:	4620      	mov	r0, r4
 80154c0:	f000 f830 	bl	8015524 <_getpid_r>
 80154c4:	462a      	mov	r2, r5
 80154c6:	4601      	mov	r1, r0
 80154c8:	4620      	mov	r0, r4
 80154ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80154ce:	f000 b817 	b.w	8015500 <_kill_r>
 80154d2:	2b01      	cmp	r3, #1
 80154d4:	d00a      	beq.n	80154ec <_raise_r+0x4c>
 80154d6:	1c59      	adds	r1, r3, #1
 80154d8:	d103      	bne.n	80154e2 <_raise_r+0x42>
 80154da:	2316      	movs	r3, #22
 80154dc:	6003      	str	r3, [r0, #0]
 80154de:	2001      	movs	r0, #1
 80154e0:	e7e7      	b.n	80154b2 <_raise_r+0x12>
 80154e2:	2400      	movs	r4, #0
 80154e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80154e8:	4628      	mov	r0, r5
 80154ea:	4798      	blx	r3
 80154ec:	2000      	movs	r0, #0
 80154ee:	e7e0      	b.n	80154b2 <_raise_r+0x12>

080154f0 <raise>:
 80154f0:	4b02      	ldr	r3, [pc, #8]	; (80154fc <raise+0xc>)
 80154f2:	4601      	mov	r1, r0
 80154f4:	6818      	ldr	r0, [r3, #0]
 80154f6:	f7ff bfd3 	b.w	80154a0 <_raise_r>
 80154fa:	bf00      	nop
 80154fc:	200002c8 	.word	0x200002c8

08015500 <_kill_r>:
 8015500:	b538      	push	{r3, r4, r5, lr}
 8015502:	4d07      	ldr	r5, [pc, #28]	; (8015520 <_kill_r+0x20>)
 8015504:	2300      	movs	r3, #0
 8015506:	4604      	mov	r4, r0
 8015508:	4608      	mov	r0, r1
 801550a:	4611      	mov	r1, r2
 801550c:	602b      	str	r3, [r5, #0]
 801550e:	f7ed fe01 	bl	8003114 <_kill>
 8015512:	1c43      	adds	r3, r0, #1
 8015514:	d102      	bne.n	801551c <_kill_r+0x1c>
 8015516:	682b      	ldr	r3, [r5, #0]
 8015518:	b103      	cbz	r3, 801551c <_kill_r+0x1c>
 801551a:	6023      	str	r3, [r4, #0]
 801551c:	bd38      	pop	{r3, r4, r5, pc}
 801551e:	bf00      	nop
 8015520:	20000770 	.word	0x20000770

08015524 <_getpid_r>:
 8015524:	f7ed bdee 	b.w	8003104 <_getpid>

08015528 <_fstat_r>:
 8015528:	b538      	push	{r3, r4, r5, lr}
 801552a:	4d07      	ldr	r5, [pc, #28]	; (8015548 <_fstat_r+0x20>)
 801552c:	2300      	movs	r3, #0
 801552e:	4604      	mov	r4, r0
 8015530:	4608      	mov	r0, r1
 8015532:	4611      	mov	r1, r2
 8015534:	602b      	str	r3, [r5, #0]
 8015536:	f7ed fe4c 	bl	80031d2 <_fstat>
 801553a:	1c43      	adds	r3, r0, #1
 801553c:	d102      	bne.n	8015544 <_fstat_r+0x1c>
 801553e:	682b      	ldr	r3, [r5, #0]
 8015540:	b103      	cbz	r3, 8015544 <_fstat_r+0x1c>
 8015542:	6023      	str	r3, [r4, #0]
 8015544:	bd38      	pop	{r3, r4, r5, pc}
 8015546:	bf00      	nop
 8015548:	20000770 	.word	0x20000770

0801554c <_isatty_r>:
 801554c:	b538      	push	{r3, r4, r5, lr}
 801554e:	4d06      	ldr	r5, [pc, #24]	; (8015568 <_isatty_r+0x1c>)
 8015550:	2300      	movs	r3, #0
 8015552:	4604      	mov	r4, r0
 8015554:	4608      	mov	r0, r1
 8015556:	602b      	str	r3, [r5, #0]
 8015558:	f7ed fe4b 	bl	80031f2 <_isatty>
 801555c:	1c43      	adds	r3, r0, #1
 801555e:	d102      	bne.n	8015566 <_isatty_r+0x1a>
 8015560:	682b      	ldr	r3, [r5, #0]
 8015562:	b103      	cbz	r3, 8015566 <_isatty_r+0x1a>
 8015564:	6023      	str	r3, [r4, #0]
 8015566:	bd38      	pop	{r3, r4, r5, pc}
 8015568:	20000770 	.word	0x20000770

0801556c <_init>:
 801556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801556e:	bf00      	nop
 8015570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015572:	bc08      	pop	{r3}
 8015574:	469e      	mov	lr, r3
 8015576:	4770      	bx	lr

08015578 <_fini>:
 8015578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801557a:	bf00      	nop
 801557c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801557e:	bc08      	pop	{r3}
 8015580:	469e      	mov	lr, r3
 8015582:	4770      	bx	lr
