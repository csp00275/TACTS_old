
TACTS_testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000129e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000754  08012bb8  08012bb8  00022bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801330c  0801330c  0003049c  2**0
                  CONTENTS
  4 .ARM          00000008  0801330c  0801330c  0002330c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013314  08013314  0003049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013314  08013314  00023314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013318  08013318  00023318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000049c  20000000  0801331c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000049c  080137b8  0003049c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  080137b8  00030750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003049c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000202dd  00000000  00000000  000304cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038d6  00000000  00000000  000507a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  00054080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  000557a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029607  00000000  00000000  00056d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002145b  00000000  00000000  0008033f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9652  00000000  00000000  000a179a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019adec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007730  00000000  00000000  0019ae3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000049c 	.word	0x2000049c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012ba0 	.word	0x08012ba0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004a0 	.word	0x200004a0
 800020c:	08012ba0 	.word	0x08012ba0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b59      	ldr	r3, [pc, #356]	; (80011d4 <MX_GPIO_Init+0x17c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a58      	ldr	r2, [pc, #352]	; (80011d4 <MX_GPIO_Init+0x17c>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b56      	ldr	r3, [pc, #344]	; (80011d4 <MX_GPIO_Init+0x17c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b53      	ldr	r3, [pc, #332]	; (80011d4 <MX_GPIO_Init+0x17c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a52      	ldr	r2, [pc, #328]	; (80011d4 <MX_GPIO_Init+0x17c>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b50      	ldr	r3, [pc, #320]	; (80011d4 <MX_GPIO_Init+0x17c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800109e:	4b4d      	ldr	r3, [pc, #308]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a4c      	ldr	r2, [pc, #304]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	4b47      	ldr	r3, [pc, #284]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a46      	ldr	r2, [pc, #280]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b44      	ldr	r3, [pc, #272]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ce:	4b41      	ldr	r3, [pc, #260]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a40      	ldr	r2, [pc, #256]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b3e      	ldr	r3, [pc, #248]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2110      	movs	r1, #16
 80010ea:	483b      	ldr	r0, [pc, #236]	; (80011d8 <MX_GPIO_Init+0x180>)
 80010ec:	f001 fcf4 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	210f      	movs	r1, #15
 80010f4:	4839      	ldr	r0, [pc, #228]	; (80011dc <MX_GPIO_Init+0x184>)
 80010f6:	f001 fcef 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	21c0      	movs	r1, #192	; 0xc0
 80010fe:	4838      	ldr	r0, [pc, #224]	; (80011e0 <MX_GPIO_Init+0x188>)
 8001100:	f001 fcea 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001104:	2310      	movs	r3, #16
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	482f      	ldr	r0, [pc, #188]	; (80011d8 <MX_GPIO_Init+0x180>)
 800111c:	f001 f94c 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001120:	230f      	movs	r3, #15
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4829      	ldr	r0, [pc, #164]	; (80011dc <MX_GPIO_Init+0x184>)
 8001138:	f001 f93e 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800113c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001142:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4824      	ldr	r0, [pc, #144]	; (80011e4 <MX_GPIO_Init+0x18c>)
 8001154:	f001 f930 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001158:	23c0      	movs	r3, #192	; 0xc0
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	481c      	ldr	r0, [pc, #112]	; (80011e0 <MX_GPIO_Init+0x188>)
 8001170:	f001 f922 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001174:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4813      	ldr	r0, [pc, #76]	; (80011d8 <MX_GPIO_Init+0x180>)
 800118a:	f001 f915 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800118e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001194:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <MX_GPIO_Init+0x180>)
 80011a6:	f001 f907 	bl	80023b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2017      	movs	r0, #23
 80011b0:	f001 f820 	bl	80021f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011b4:	2017      	movs	r0, #23
 80011b6:	f001 f849 	bl	800224c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2028      	movs	r0, #40	; 0x28
 80011c0:	f001 f818 	bl	80021f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011c4:	2028      	movs	r0, #40	; 0x28
 80011c6:	f001 f841 	bl	800224c <HAL_NVIC_EnableIRQ>

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40022000 	.word	0x40022000
 80011e0:	40021800 	.word	0x40021800
 80011e4:	40020000 	.word	0x40020000

080011e8 <HX711_Init>:




void HX711_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2102      	movs	r1, #2
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <HX711_Init+0x14>)
 80011f2:	f001 fc71 	bl	8002ad8 <HAL_GPIO_WritePin>
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40022000 	.word	0x40022000

08001200 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_I2C1_Init+0x74>)
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <MX_I2C1_Init+0x78>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_I2C1_Init+0x74>)
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <MX_I2C1_Init+0x7c>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_I2C1_Init+0x74>)
 8001218:	2201      	movs	r2, #1
 800121a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_I2C1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_I2C1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_I2C1_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <MX_I2C1_Init+0x74>)
 800123c:	f001 fc90 	bl	8002b60 <HAL_I2C_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001246:	f000 fb1b 	bl	8001880 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124a:	2100      	movs	r1, #0
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <MX_I2C1_Init+0x74>)
 800124e:	f002 fa49 	bl	80036e4 <HAL_I2CEx_ConfigAnalogFilter>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001258:	f000 fb12 	bl	8001880 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800125c:	2100      	movs	r1, #0
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_I2C1_Init+0x74>)
 8001260:	f002 fab6 	bl	80037d0 <HAL_I2CEx_ConfigDigitalFilter>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800126a:	f000 fb09 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200004b8 	.word	0x200004b8
 8001278:	40005400 	.word	0x40005400
 800127c:	6000030d 	.word	0x6000030d

08001280 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b0aa      	sub	sp, #168	; 0xa8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	2284      	movs	r2, #132	; 0x84
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f00d f80b 	bl	800e2bc <memset>
  if(i2cHandle->Instance==I2C1)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a22      	ldr	r2, [pc, #136]	; (8001334 <HAL_I2C_MspInit+0xb4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d13c      	bne.n	800132a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	4618      	mov	r0, r3
 80012c0:	f003 f946 	bl	8004550 <HAL_RCCEx_PeriphCLKConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012ca:	f000 fad9 	bl	8001880 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a19      	ldr	r2, [pc, #100]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ee:	2312      	movs	r3, #18
 80012f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001300:	2304      	movs	r3, #4
 8001302:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800130a:	4619      	mov	r1, r3
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <HAL_I2C_MspInit+0xbc>)
 800130e:	f001 f853 	bl	80023b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 8001318:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800132a:	bf00      	nop
 800132c:	37a8      	adds	r7, #168	; 0xa8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40005400 	.word	0x40005400
 8001338:	40023800 	.word	0x40023800
 800133c:	40020400 	.word	0x40020400

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	f6ad 3df8 	subw	sp, sp, #3064	; 0xbf8
 8001346:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001348:	f000 fde3 	bl	8001f12 <HAL_Init>

  /* USER CODE BEGIN Init */

  uint8_t buffer[100]; // 데이터를 저장할 버퍼
  uint8_t received_data;
  uint32_t string_index = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 3bec 	str.w	r3, [r7, #3052]	; 0xbec
  HAL_StatusTypeDef status;

	// VL53L0X initialization stuff
	//
	uint32_t refSpadCount = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 3b68 	str.w	r3, [r7, #2920]	; 0xb68
	uint8_t isApertureSpads = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	f887 3b67 	strb.w	r3, [r7, #2919]	; 0xb67
	uint8_t VhvSettings = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	f887 3b66 	strb.w	r3, [r7, #2918]	; 0xb66
	uint8_t PhaseCal = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	f887 3b65 	strb.w	r3, [r7, #2917]	; 0xb65
	VL53L0X_Dev_t vl53l0x_s[NUM_SENSOR];
//	VL53L0X_Dev_t vl53l0x_s;

	VL53L0X_DEV Dev;
	//KalmanFilter kalman_filters[NUM_SENSOR];
	uint16_t distance[NUM_SENSOR] = {0,};
 800136a:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 800136e:	f6a3 338c 	subw	r3, r3, #2956	; 0xb8c
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	819a      	strh	r2, [r3, #12]
//	float filtered_distance[NUM_SENSOR] = {0,};

	uint8_t tca_ch[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}; // control register of TCA9548A
 800137c:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8001380:	f6a3 3394 	subw	r3, r3, #2964	; 0xb94
 8001384:	4ab4      	ldr	r2, [pc, #720]	; (8001658 <main+0x318>)
 8001386:	e892 0003 	ldmia.w	r2, {r0, r1}
 800138a:	e883 0003 	stmia.w	r3, {r0, r1}
	//uint8_t tca_ch[8] = {0b00000001, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000, 0b10000000};
	uint8_t tca_ch_reset = 0x00;
 800138e:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8001392:	f6a3 3395 	subw	r3, r3, #2965	; 0xb95
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
	//uint8_t tca_ch_reset = 0b00000000;
    uint8_t tca_addr[] = {0x70};
 800139a:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 800139e:	f6a3 3398 	subw	r3, r3, #2968	; 0xb98
 80013a2:	2270      	movs	r2, #112	; 0x70
 80013a4:	701a      	strb	r2, [r3, #0]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a6:	f000 f96d 	bl	8001684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013aa:	f7ff fe55 	bl	8001058 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013ae:	f7ff ff27 	bl	8001200 <MX_I2C1_Init>
  MX_TIM7_Init();
 80013b2:	f000 fc35 	bl	8001c20 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80013b6:	f000 fcd1 	bl	8001d5c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80013ba:	f000 fbbb 	bl	8001b34 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80013be:	f000 f9cf 	bl	8001760 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80013c2:	2100      	movs	r1, #0
 80013c4:	48a5      	ldr	r0, [pc, #660]	; (800165c <main+0x31c>)
 80013c6:	f004 faf1 	bl	80059ac <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80013ca:	2201      	movs	r2, #1
 80013cc:	49a4      	ldr	r1, [pc, #656]	; (8001660 <main+0x320>)
 80013ce:	48a5      	ldr	r0, [pc, #660]	; (8001664 <main+0x324>)
 80013d0:	f006 fbeb 	bl	8007baa <HAL_UART_Receive_IT>

  // Initialize the HX711
  HX711_Init();
 80013d4:	f7ff ff08 	bl	80011e8 <HX711_Init>

  /* UART interrupt initialization */
  MessageLen = sprintf((char*)Message, "JH VL53L0X test\n\r");
 80013d8:	49a3      	ldr	r1, [pc, #652]	; (8001668 <main+0x328>)
 80013da:	48a4      	ldr	r0, [pc, #656]	; (800166c <main+0x32c>)
 80013dc:	f00d fdf6 	bl	800efcc <siprintf>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	4ba2      	ldr	r3, [pc, #648]	; (8001670 <main+0x330>)
 80013e6:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 80013e8:	4ba1      	ldr	r3, [pc, #644]	; (8001670 <main+0x330>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	2364      	movs	r3, #100	; 0x64
 80013f0:	499e      	ldr	r1, [pc, #632]	; (800166c <main+0x32c>)
 80013f2:	489c      	ldr	r0, [pc, #624]	; (8001664 <main+0x324>)
 80013f4:	f006 fa92 	bl	800791c <HAL_UART_Transmit>



		for (int i = 0; i < sizeof(tca_addr); i++) {
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 3be8 	str.w	r3, [r7, #3048]	; 0xbe8
 80013fe:	e018      	b.n	8001432 <main+0xf2>
		    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[i] << 1, &tca_ch_reset, 1, 1000);
 8001400:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8001404:	f6a3 3298 	subw	r2, r3, #2968	; 0xb98
 8001408:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 800140c:	4413      	add	r3, r2
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	b299      	uxth	r1, r3
 8001416:	f107 025b 	add.w	r2, r7, #91	; 0x5b
 800141a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	4894      	ldr	r0, [pc, #592]	; (8001674 <main+0x334>)
 8001424:	f001 fcbe 	bl	8002da4 <HAL_I2C_Master_Transmit>
		for (int i = 0; i < sizeof(tca_addr); i++) {
 8001428:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 800142c:	3301      	adds	r3, #1
 800142e:	f8c7 3be8 	str.w	r3, [r7, #3048]	; 0xbe8
 8001432:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0e2      	beq.n	8001400 <main+0xc0>
		}

		for (int i = 0; i < NUM_SENSOR; i++) {
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 3be4 	str.w	r3, [r7, #3044]	; 0xbe4
 8001440:	e0be      	b.n	80015c0 <main+0x280>

			uint8_t q = i / 8;
 8001442:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 8001446:	2b00      	cmp	r3, #0
 8001448:	da00      	bge.n	800144c <main+0x10c>
 800144a:	3307      	adds	r3, #7
 800144c:	10db      	asrs	r3, r3, #3
 800144e:	f887 3bde 	strb.w	r3, [r7, #3038]	; 0xbde
			uint8_t r = i % 8;
 8001452:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 8001456:	425a      	negs	r2, r3
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	f002 0207 	and.w	r2, r2, #7
 8001460:	bf58      	it	pl
 8001462:	4253      	negpl	r3, r2
 8001464:	f887 3bdd 	strb.w	r3, [r7, #3037]	; 0xbdd

		    for (int j = 0; j < sizeof(tca_addr); j++) {
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 3be0 	str.w	r3, [r7, #3040]	; 0xbe0
 800146e:	e028      	b.n	80014c2 <main+0x182>
		        uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 8001470:	f897 3bde 	ldrb.w	r3, [r7, #3038]	; 0xbde
 8001474:	f8d7 2be0 	ldr.w	r2, [r7, #3040]	; 0xbe0
 8001478:	429a      	cmp	r2, r3
 800147a:	d105      	bne.n	8001488 <main+0x148>
 800147c:	f897 3bdd 	ldrb.w	r3, [r7, #3037]	; 0xbdd
 8001480:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001484:	4413      	add	r3, r2
 8001486:	e001      	b.n	800148c <main+0x14c>
 8001488:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 800148c:	f8c7 3bd4 	str.w	r3, [r7, #3028]	; 0xbd4
		        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 8001490:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8001494:	f6a3 3298 	subw	r2, r3, #2968	; 0xb98
 8001498:	f8d7 3be0 	ldr.w	r3, [r7, #3040]	; 0xbe0
 800149c:	4413      	add	r3, r2
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	b299      	uxth	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	f8d7 2bd4 	ldr.w	r2, [r7, #3028]	; 0xbd4
 80014b2:	4870      	ldr	r0, [pc, #448]	; (8001674 <main+0x334>)
 80014b4:	f001 fc76 	bl	8002da4 <HAL_I2C_Master_Transmit>
		    for (int j = 0; j < sizeof(tca_addr); j++) {
 80014b8:	f8d7 3be0 	ldr.w	r3, [r7, #3040]	; 0xbe0
 80014bc:	3301      	adds	r3, #1
 80014be:	f8c7 3be0 	str.w	r3, [r7, #3040]	; 0xbe0
 80014c2:	f8d7 3be0 	ldr.w	r3, [r7, #3040]	; 0xbe0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0d2      	beq.n	8001470 <main+0x130>
		    }

			Dev = &vl53l0x_s[i];
 80014ca:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80014ce:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 80014d2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80014d6:	fb01 f303 	mul.w	r3, r1, r3
 80014da:	4413      	add	r3, r2
 80014dc:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
			Dev->I2cHandle = &hi2c1;
 80014e0:	f8d7 3bd8 	ldr.w	r3, [r7, #3032]	; 0xbd8
 80014e4:	4a63      	ldr	r2, [pc, #396]	; (8001674 <main+0x334>)
 80014e6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
			Dev->I2cDevAddr = VL53L0X_ADDR;
 80014ea:	f8d7 3bd8 	ldr.w	r3, [r7, #3032]	; 0xbd8
 80014ee:	2252      	movs	r2, #82	; 0x52
 80014f0:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

			VL53L0X_WaitDeviceBooted( Dev );
 80014f4:	f8d7 0bd8 	ldr.w	r0, [r7, #3032]	; 0xbd8
 80014f8:	f008 f9a4 	bl	8009844 <VL53L0X_WaitDeviceBooted>
			VL53L0X_DataInit( Dev );
 80014fc:	f8d7 0bd8 	ldr.w	r0, [r7, #3032]	; 0xbd8
 8001500:	f007 feba 	bl	8009278 <VL53L0X_DataInit>
			VL53L0X_StaticInit( Dev );
 8001504:	f8d7 0bd8 	ldr.w	r0, [r7, #3032]	; 0xbd8
 8001508:	f008 f81a 	bl	8009540 <VL53L0X_StaticInit>
			VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800150c:	2101      	movs	r1, #1
 800150e:	f8d7 0bd8 	ldr.w	r0, [r7, #3032]	; 0xbd8
 8001512:	f008 fa35 	bl	8009980 <VL53L0X_SetDeviceMode>
			VL53L0X_PerformRefCalibration( Dev, &VhvSettings, &PhaseCal);
 8001516:	f607 3265 	addw	r2, r7, #2917	; 0xb65
 800151a:	f607 3366 	addw	r3, r7, #2918	; 0xb66
 800151e:	4619      	mov	r1, r3
 8001520:	f8d7 0bd8 	ldr.w	r0, [r7, #3032]	; 0xbd8
 8001524:	f008 feae 	bl	800a284 <VL53L0X_PerformRefCalibration>
			VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount, &isApertureSpads);
 8001528:	f607 3267 	addw	r2, r7, #2919	; 0xb67
 800152c:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8001530:	4619      	mov	r1, r3
 8001532:	f8d7 0bd8 	ldr.w	r0, [r7, #3032]	; 0xbd8
 8001536:	f009 fb33 	bl	800aba0 <VL53L0X_PerformRefSpadManagement>
			VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 800153a:	2201      	movs	r2, #1
 800153c:	2100      	movs	r1, #0
 800153e:	f8d7 0bd8 	ldr.w	r0, [r7, #3032]	; 0xbd8
 8001542:	f008 fc99 	bl	8009e78 <VL53L0X_SetLimitCheckEnable>
			VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8001546:	2201      	movs	r2, #1
 8001548:	2101      	movs	r1, #1
 800154a:	f8d7 0bd8 	ldr.w	r0, [r7, #3032]	; 0xbd8
 800154e:	f008 fc93 	bl	8009e78 <VL53L0X_SetLimitCheckEnable>
			VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8001552:	f641 1299 	movw	r2, #6553	; 0x1999
 8001556:	2101      	movs	r1, #1
 8001558:	f8d7 0bd8 	ldr.w	r0, [r7, #3032]	; 0xbd8
 800155c:	f008 fd3c 	bl	8009fd8 <VL53L0X_SetLimitCheckValue>
			VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8001560:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001564:	2100      	movs	r1, #0
 8001566:	f8d7 0bd8 	ldr.w	r0, [r7, #3032]	; 0xbd8
 800156a:	f008 fd35 	bl	8009fd8 <VL53L0X_SetLimitCheckValue>
			VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 800156e:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001572:	f8d7 0bd8 	ldr.w	r0, [r7, #3032]	; 0xbd8
 8001576:	f008 fa61 	bl	8009a3c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
			VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 800157a:	2212      	movs	r2, #18
 800157c:	2100      	movs	r1, #0
 800157e:	f8d7 0bd8 	ldr.w	r0, [r7, #3032]	; 0xbd8
 8001582:	f008 fa81 	bl	8009a88 <VL53L0X_SetVcselPulsePeriod>
			VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001586:	220e      	movs	r2, #14
 8001588:	2101      	movs	r1, #1
 800158a:	f8d7 0bd8 	ldr.w	r0, [r7, #3032]	; 0xbd8
 800158e:	f008 fa7b 	bl	8009a88 <VL53L0X_SetVcselPulsePeriod>
			float R = 1.0f;   // Measurement noise covariance
			KalmanFilter_Init(&kalman_filters[i], Q, R);
			// KalmanFilter initializer END //			 */


			MessageLen = sprintf((char*)Message, "%d complete \n\r",i);
 8001592:	f8d7 2be4 	ldr.w	r2, [r7, #3044]	; 0xbe4
 8001596:	4938      	ldr	r1, [pc, #224]	; (8001678 <main+0x338>)
 8001598:	4834      	ldr	r0, [pc, #208]	; (800166c <main+0x32c>)
 800159a:	f00d fd17 	bl	800efcc <siprintf>
 800159e:	4603      	mov	r3, r0
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4b33      	ldr	r3, [pc, #204]	; (8001670 <main+0x330>)
 80015a4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 80015a6:	4b32      	ldr	r3, [pc, #200]	; (8001670 <main+0x330>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	2364      	movs	r3, #100	; 0x64
 80015ae:	492f      	ldr	r1, [pc, #188]	; (800166c <main+0x32c>)
 80015b0:	482c      	ldr	r0, [pc, #176]	; (8001664 <main+0x324>)
 80015b2:	f006 f9b3 	bl	800791c <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 80015b6:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 80015ba:	3301      	adds	r3, #1
 80015bc:	f8c7 3be4 	str.w	r3, [r7, #3044]	; 0xbe4
 80015c0:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 80015c4:	2b06      	cmp	r3, #6
 80015c6:	f77f af3c 	ble.w	8001442 <main+0x102>
  {



	  while (1) {
	      status = HAL_UART_Receive(&huart1, &received_data, 1, 100); // 한 문자씩 수신
 80015ca:	f607 316f 	addw	r1, r7, #2927	; 0xb6f
 80015ce:	2364      	movs	r3, #100	; 0x64
 80015d0:	2201      	movs	r2, #1
 80015d2:	4824      	ldr	r0, [pc, #144]	; (8001664 <main+0x324>)
 80015d4:	f006 fa25 	bl	8007a22 <HAL_UART_Receive>
 80015d8:	4603      	mov	r3, r0
 80015da:	f887 3bdf 	strb.w	r3, [r7, #3039]	; 0xbdf

	      if (status == HAL_OK) { // 데이터 수신 확인
 80015de:	f897 3bdf 	ldrb.w	r3, [r7, #3039]	; 0xbdf
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f1      	bne.n	80015ca <main+0x28a>
	          if (received_data == '\n') { // 줄바꿈 문자가 수신되면 입력 종료
 80015e6:	f897 3b6f 	ldrb.w	r3, [r7, #2927]	; 0xb6f
 80015ea:	2b0a      	cmp	r3, #10
 80015ec:	d124      	bne.n	8001638 <main+0x2f8>
	              buffer[string_index] = '\0'; // 문자열 끝을 표시하기 위한 null 문자 삽입
 80015ee:	f507 6237 	add.w	r2, r7, #2928	; 0xb70
 80015f2:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	; 0xbec
 80015f6:	4413      	add	r3, r2
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]

	              if (strcmp((char*)buffer, "rev") == 0) { // 수신된 문자열이 "rev"인지 확인
 80015fc:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8001600:	491e      	ldr	r1, [pc, #120]	; (800167c <main+0x33c>)
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe fe04 	bl	8000210 <strcmp>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d110      	bne.n	8001630 <main+0x2f0>
	                  uint8_t response[] = "Put servo distance (cm) & the angle(deg) & distance(mm)\n//////////////////////////";
 800160e:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8001612:	f6a3 33ec 	subw	r3, r3, #3052	; 0xbec
 8001616:	4a1a      	ldr	r2, [pc, #104]	; (8001680 <main+0x340>)
 8001618:	4618      	mov	r0, r3
 800161a:	4611      	mov	r1, r2
 800161c:	2353      	movs	r3, #83	; 0x53
 800161e:	461a      	mov	r2, r3
 8001620:	f00c fe3e 	bl	800e2a0 <memcpy>
	                  HAL_UART_Transmit(&huart1, response, sizeof(response), 100); // 응답 전송
 8001624:	1d39      	adds	r1, r7, #4
 8001626:	2364      	movs	r3, #100	; 0x64
 8001628:	2253      	movs	r2, #83	; 0x53
 800162a:	480e      	ldr	r0, [pc, #56]	; (8001664 <main+0x324>)
 800162c:	f006 f976 	bl	800791c <HAL_UART_Transmit>
	              }

	              string_index = 0; // 문자열 인덱스 초기화
 8001630:	2300      	movs	r3, #0
 8001632:	f8c7 3bec 	str.w	r3, [r7, #3052]	; 0xbec
 8001636:	e7c8      	b.n	80015ca <main+0x28a>
	          } else { // 줄바꿈 문자가 아니면 버퍼에 문자 추가
	              buffer[string_index] = received_data;
 8001638:	f897 1b6f 	ldrb.w	r1, [r7, #2927]	; 0xb6f
 800163c:	f507 6237 	add.w	r2, r7, #2928	; 0xb70
 8001640:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	; 0xbec
 8001644:	4413      	add	r3, r2
 8001646:	460a      	mov	r2, r1
 8001648:	701a      	strb	r2, [r3, #0]
	              string_index++;
 800164a:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	; 0xbec
 800164e:	3301      	adds	r3, #1
 8001650:	f8c7 3bec 	str.w	r3, [r7, #3052]	; 0xbec
	      status = HAL_UART_Receive(&huart1, &received_data, 1, 100); // 한 문자씩 수신
 8001654:	e7b9      	b.n	80015ca <main+0x28a>
 8001656:	bf00      	nop
 8001658:	08012be0 	.word	0x08012be0
 800165c:	200005dc 	.word	0x200005dc
 8001660:	2000058e 	.word	0x2000058e
 8001664:	20000674 	.word	0x20000674
 8001668:	08012bb8 	.word	0x08012bb8
 800166c:	20000590 	.word	0x20000590
 8001670:	200005d0 	.word	0x200005d0
 8001674:	200004b8 	.word	0x200004b8
 8001678:	08012bcc 	.word	0x08012bcc
 800167c:	08012bdc 	.word	0x08012bdc
 8001680:	08012be8 	.word	0x08012be8

08001684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b094      	sub	sp, #80	; 0x50
 8001688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168a:	f107 0320 	add.w	r3, r7, #32
 800168e:	2230      	movs	r2, #48	; 0x30
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f00c fe12 	bl	800e2bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <SystemClock_Config+0xd4>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	4a2a      	ldr	r2, [pc, #168]	; (8001758 <SystemClock_Config+0xd4>)
 80016ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b2:	6413      	str	r3, [r2, #64]	; 0x40
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <SystemClock_Config+0xd4>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c0:	4b26      	ldr	r3, [pc, #152]	; (800175c <SystemClock_Config+0xd8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a25      	ldr	r2, [pc, #148]	; (800175c <SystemClock_Config+0xd8>)
 80016c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b23      	ldr	r3, [pc, #140]	; (800175c <SystemClock_Config+0xd8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d8:	2301      	movs	r3, #1
 80016da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e2:	2302      	movs	r3, #2
 80016e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80016ec:	2319      	movs	r3, #25
 80016ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80016f0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80016f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f6:	2302      	movs	r3, #2
 80016f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016fa:	2302      	movs	r3, #2
 80016fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fe:	f107 0320 	add.w	r3, r7, #32
 8001702:	4618      	mov	r0, r3
 8001704:	f002 f928 	bl	8003958 <HAL_RCC_OscConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800170e:	f000 f8b7 	bl	8001880 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001712:	f002 f8d1 	bl	80038b8 <HAL_PWREx_EnableOverDrive>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800171c:	f000 f8b0 	bl	8001880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001720:	230f      	movs	r3, #15
 8001722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001724:	2302      	movs	r3, #2
 8001726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800172c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	2107      	movs	r1, #7
 800173e:	4618      	mov	r0, r3
 8001740:	f002 fc64 	bl	800400c <HAL_RCC_ClockConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800174a:	f000 f899 	bl	8001880 <Error_Handler>
  }
}
 800174e:	bf00      	nop
 8001750:	3750      	adds	r7, #80	; 0x50
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40007000 	.word	0x40007000

08001760 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2100      	movs	r1, #0
 8001768:	2025      	movs	r0, #37	; 0x25
 800176a:	f000 fd43 	bl	80021f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800176e:	2025      	movs	r0, #37	; 0x25
 8001770:	f000 fd6c 	bl	800224c <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	2101      	movs	r1, #1
 8001778:	2037      	movs	r0, #55	; 0x37
 800177a:	f000 fd3b 	bl	80021f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800177e:	2037      	movs	r0, #55	; 0x37
 8001780:	f000 fd64 	bl	800224c <HAL_NVIC_EnableIRQ>
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a15      	ldr	r2, [pc, #84]	; (80017ec <HAL_UART_RxCpltCallback+0x64>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d124      	bne.n	80017e4 <HAL_UART_RxCpltCallback+0x5c>
  {
    if (rxData != '\n' && rxBufferIndex < RX_BUFFER_SIZE - 1)
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_UART_RxCpltCallback+0x68>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b0a      	cmp	r3, #10
 80017a0:	d00f      	beq.n	80017c2 <HAL_UART_RxCpltCallback+0x3a>
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_UART_RxCpltCallback+0x6c>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	2b7e      	cmp	r3, #126	; 0x7e
 80017a8:	d80b      	bhi.n	80017c2 <HAL_UART_RxCpltCallback+0x3a>
    {
      rxBuffer[rxBufferIndex++] = rxData;
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_UART_RxCpltCallback+0x6c>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	b291      	uxth	r1, r2
 80017b2:	4a10      	ldr	r2, [pc, #64]	; (80017f4 <HAL_UART_RxCpltCallback+0x6c>)
 80017b4:	8011      	strh	r1, [r2, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <HAL_UART_RxCpltCallback+0x68>)
 80017ba:	7819      	ldrb	r1, [r3, #0]
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <HAL_UART_RxCpltCallback+0x70>)
 80017be:	5499      	strb	r1, [r3, r2]
 80017c0:	e00b      	b.n	80017da <HAL_UART_RxCpltCallback+0x52>
    }
    else
    {
      rxBuffer[rxBufferIndex] = '\0';
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_UART_RxCpltCallback+0x6c>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_UART_RxCpltCallback+0x70>)
 80017ca:	2100      	movs	r1, #0
 80017cc:	5499      	strb	r1, [r3, r2]
      rxBufferIndex = 0;
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_UART_RxCpltCallback+0x6c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	801a      	strh	r2, [r3, #0]
      receivedFlag = 1; // 문자?��?�� ?��?��?��?��?��?�� ?��리는 ?��?��그�?? ?��?��?��?��?��.
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_UART_RxCpltCallback+0x74>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80017da:	2201      	movs	r2, #1
 80017dc:	4904      	ldr	r1, [pc, #16]	; (80017f0 <HAL_UART_RxCpltCallback+0x68>)
 80017de:	4808      	ldr	r0, [pc, #32]	; (8001800 <HAL_UART_RxCpltCallback+0x78>)
 80017e0:	f006 f9e3 	bl	8007baa <HAL_UART_Receive_IT>
  }
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40011000 	.word	0x40011000
 80017f0:	2000058e 	.word	0x2000058e
 80017f4:	2000058c 	.word	0x2000058c
 80017f8:	2000050c 	.word	0x2000050c
 80017fc:	2000058f 	.word	0x2000058f
 8001800:	20000674 	.word	0x20000674

08001804 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_8) // A?��?�� ???�� ?��?��?��?��
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001814:	d113      	bne.n	800183e <HAL_GPIO_EXTI_Callback+0x3a>
  {
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) // B?�� 값을 ?��?��
 8001816:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800181a:	4816      	ldr	r0, [pc, #88]	; (8001874 <HAL_GPIO_EXTI_Callback+0x70>)
 800181c:	f001 f93c 	bl	8002a98 <HAL_GPIO_ReadPin>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d005      	beq.n	8001832 <HAL_GPIO_EXTI_Callback+0x2e>
    {
      encoderCount++;
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <HAL_GPIO_EXTI_Callback+0x74>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	4a12      	ldr	r2, [pc, #72]	; (8001878 <HAL_GPIO_EXTI_Callback+0x74>)
 800182e:	6013      	str	r3, [r2, #0]
    else
    {
      encoderCount++;
    }
  }
}
 8001830:	e01c      	b.n	800186c <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount--;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_GPIO_EXTI_Callback+0x74>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3b01      	subs	r3, #1
 8001838:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <HAL_GPIO_EXTI_Callback+0x74>)
 800183a:	6013      	str	r3, [r2, #0]
}
 800183c:	e016      	b.n	800186c <HAL_GPIO_EXTI_Callback+0x68>
  else if (GPIO_Pin == GPIO_PIN_15) // B?��?�� ???�� ?��?��?��?��
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001844:	d112      	bne.n	800186c <HAL_GPIO_EXTI_Callback+0x68>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) // A?�� 값을 ?��?��
 8001846:	f44f 7180 	mov.w	r1, #256	; 0x100
 800184a:	480c      	ldr	r0, [pc, #48]	; (800187c <HAL_GPIO_EXTI_Callback+0x78>)
 800184c:	f001 f924 	bl	8002a98 <HAL_GPIO_ReadPin>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_GPIO_EXTI_Callback+0x5e>
      encoderCount--;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <HAL_GPIO_EXTI_Callback+0x74>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	3b01      	subs	r3, #1
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <HAL_GPIO_EXTI_Callback+0x74>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	e004      	b.n	800186c <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount++;
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_GPIO_EXTI_Callback+0x74>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	4a03      	ldr	r2, [pc, #12]	; (8001878 <HAL_GPIO_EXTI_Callback+0x74>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40020400 	.word	0x40020400
 8001878:	200005d4 	.word	0x200005d4
 800187c:	40020000 	.word	0x40020000

08001880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001884:	b672      	cpsid	i
}
 8001886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001888:	e7fe      	b.n	8001888 <Error_Handler+0x8>

0800188a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <HAL_MspInit+0x44>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <HAL_MspInit+0x44>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_MspInit+0x44>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_MspInit+0x44>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <HAL_MspInit+0x44>)
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_MspInit+0x44>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800

080018e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <NMI_Handler+0x4>

080018ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <HardFault_Handler+0x4>

080018f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <MemManage_Handler+0x4>

080018fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <BusFault_Handler+0x4>

08001900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <UsageFault_Handler+0x4>

08001906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001934:	f000 fb2a 	bl	8001f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}

0800193c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001940:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001944:	f001 f8f4 	bl	8002b30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}

0800194c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <USART1_IRQHandler+0x10>)
 8001952:	f006 f96f 	bl	8007c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000674 	.word	0x20000674

08001960 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001964:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001968:	f001 f8e2 	bl	8002b30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <TIM7_IRQHandler+0x10>)
 8001976:	f004 f9e3 	bl	8005d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000628 	.word	0x20000628

08001984 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return 1;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_kill>:

int _kill(int pid, int sig)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800199e:	f00c fc55 	bl	800e24c <__errno>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2216      	movs	r2, #22
 80019a6:	601a      	str	r2, [r3, #0]
  return -1;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_exit>:

void _exit (int status)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ffe7 	bl	8001994 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019c6:	e7fe      	b.n	80019c6 <_exit+0x12>

080019c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	e00a      	b.n	80019f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019da:	f3af 8000 	nop.w
 80019de:	4601      	mov	r1, r0
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	60ba      	str	r2, [r7, #8]
 80019e6:	b2ca      	uxtb	r2, r1
 80019e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dbf0      	blt.n	80019da <_read+0x12>
  }

  return len;
 80019f8:	687b      	ldr	r3, [r7, #4]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e009      	b.n	8001a28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	60ba      	str	r2, [r7, #8]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbf1      	blt.n	8001a14 <_write+0x12>
  }
  return len;
 8001a30:	687b      	ldr	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_close>:

int _close(int file)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a62:	605a      	str	r2, [r3, #4]
  return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_isatty>:

int _isatty(int file)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aac:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <_sbrk+0x5c>)
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <_sbrk+0x60>)
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <_sbrk+0x64>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <_sbrk+0x68>)
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d207      	bcs.n	8001ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad4:	f00c fbba 	bl	800e24c <__errno>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	220c      	movs	r2, #12
 8001adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	e009      	b.n	8001af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <_sbrk+0x64>)
 8001af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20050000 	.word	0x20050000
 8001b04:	00000400 	.word	0x00000400
 8001b08:	200005d8 	.word	0x200005d8
 8001b0c:	20000750 	.word	0x20000750

08001b10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <SystemInit+0x20>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1a:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <SystemInit+0x20>)
 8001b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08e      	sub	sp, #56	; 0x38
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b54:	463b      	mov	r3, r7
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]
 8001b62:	615a      	str	r2, [r3, #20]
 8001b64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b66:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <MX_TIM2_Init+0xe8>)
 8001b68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8001b6e:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <MX_TIM2_Init+0xe8>)
 8001b70:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001b74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <MX_TIM2_Init+0xe8>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001b7c:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <MX_TIM2_Init+0xe8>)
 8001b7e:	2231      	movs	r2, #49	; 0x31
 8001b80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <MX_TIM2_Init+0xe8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <MX_TIM2_Init+0xe8>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b8e:	4823      	ldr	r0, [pc, #140]	; (8001c1c <MX_TIM2_Init+0xe8>)
 8001b90:	f003 fcc2 	bl	8005518 <HAL_TIM_Base_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b9a:	f7ff fe71 	bl	8001880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ba4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	481c      	ldr	r0, [pc, #112]	; (8001c1c <MX_TIM2_Init+0xe8>)
 8001bac:	f004 fc50 	bl	8006450 <HAL_TIM_ConfigClockSource>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001bb6:	f7ff fe63 	bl	8001880 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bba:	4818      	ldr	r0, [pc, #96]	; (8001c1c <MX_TIM2_Init+0xe8>)
 8001bbc:	f003 fdcc 	bl	8005758 <HAL_TIM_PWM_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001bc6:	f7ff fe5b 	bl	8001880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4810      	ldr	r0, [pc, #64]	; (8001c1c <MX_TIM2_Init+0xe8>)
 8001bda:	f005 fc69 	bl	80074b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001be4:	f7ff fe4c 	bl	8001880 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be8:	2360      	movs	r3, #96	; 0x60
 8001bea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4807      	ldr	r0, [pc, #28]	; (8001c1c <MX_TIM2_Init+0xe8>)
 8001c00:	f004 f9be 	bl	8005f80 <HAL_TIM_PWM_ConfigChannel>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001c0a:	f7ff fe39 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c0e:	4803      	ldr	r0, [pc, #12]	; (8001c1c <MX_TIM2_Init+0xe8>)
 8001c10:	f000 f86e 	bl	8001cf0 <HAL_TIM_MspPostInit>

}
 8001c14:	bf00      	nop
 8001c16:	3738      	adds	r7, #56	; 0x38
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200005dc 	.word	0x200005dc

08001c20 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <MX_TIM7_Init+0x64>)
 8001c32:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <MX_TIM7_Init+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <MX_TIM7_Init+0x64>)
 8001c38:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001c3c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_TIM7_Init+0x64>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50-1;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <MX_TIM7_Init+0x64>)
 8001c46:	2231      	movs	r2, #49	; 0x31
 8001c48:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_TIM7_Init+0x64>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c50:	480c      	ldr	r0, [pc, #48]	; (8001c84 <MX_TIM7_Init+0x64>)
 8001c52:	f003 fc61 	bl	8005518 <HAL_TIM_Base_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001c5c:	f7ff fe10 	bl	8001880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c60:	2300      	movs	r3, #0
 8001c62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_TIM7_Init+0x64>)
 8001c6e:	f005 fc1f 	bl	80074b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001c78:	f7ff fe02 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000628 	.word	0x20000628
 8001c88:	40001400 	.word	0x40001400

08001c8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_TIM_Base_MspInit+0x5c>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	4a11      	ldr	r2, [pc, #68]	; (8001ce8 <HAL_TIM_Base_MspInit+0x5c>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8001caa:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <HAL_TIM_Base_MspInit+0x5c>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001cb6:	e010      	b.n	8001cda <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <HAL_TIM_Base_MspInit+0x60>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10b      	bne.n	8001cda <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_TIM_Base_MspInit+0x5c>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	4a08      	ldr	r2, [pc, #32]	; (8001ce8 <HAL_TIM_Base_MspInit+0x5c>)
 8001cc8:	f043 0320 	orr.w	r3, r3, #32
 8001ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_TIM_Base_MspInit+0x5c>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40001400 	.word	0x40001400

08001cf0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d10:	d11c      	bne.n	8001d4c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_TIM_MspPostInit+0x64>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a0f      	ldr	r2, [pc, #60]	; (8001d54 <HAL_TIM_MspPostInit+0x64>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_TIM_MspPostInit+0x64>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	4619      	mov	r1, r3
 8001d46:	4804      	ldr	r0, [pc, #16]	; (8001d58 <HAL_TIM_MspPostInit+0x68>)
 8001d48:	f000 fb36 	bl	80023b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d4c:	bf00      	nop
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020000 	.word	0x40020000

08001d5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <MX_USART1_UART_Init+0x58>)
 8001d62:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <MX_USART1_UART_Init+0x5c>)
 8001d64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d66:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <MX_USART1_UART_Init+0x58>)
 8001d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_USART1_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_USART1_UART_Init+0x58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_USART1_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_USART1_UART_Init+0x58>)
 8001d82:	220c      	movs	r2, #12
 8001d84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <MX_USART1_UART_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_USART1_UART_Init+0x58>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <MX_USART1_UART_Init+0x58>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_USART1_UART_Init+0x58>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_USART1_UART_Init+0x58>)
 8001da0:	f005 fcfc 	bl	800779c <HAL_UART_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001daa:	f7ff fd69 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000674 	.word	0x20000674
 8001db8:	40011000 	.word	0x40011000

08001dbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b0ac      	sub	sp, #176	; 0xb0
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dd4:	f107 0318 	add.w	r3, r7, #24
 8001dd8:	2284      	movs	r2, #132	; 0x84
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f00c fa6d 	bl	800e2bc <memset>
  if(uartHandle->Instance==USART1)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a32      	ldr	r2, [pc, #200]	; (8001eb0 <HAL_UART_MspInit+0xf4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d15c      	bne.n	8001ea6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001dec:	2340      	movs	r3, #64	; 0x40
 8001dee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001df0:	2300      	movs	r3, #0
 8001df2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df4:	f107 0318 	add.w	r3, r7, #24
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 fba9 	bl	8004550 <HAL_RCCEx_PeriphCLKConfig>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e04:	f7ff fd3c 	bl	8001880 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <HAL_UART_MspInit+0xf8>)
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0c:	4a29      	ldr	r2, [pc, #164]	; (8001eb4 <HAL_UART_MspInit+0xf8>)
 8001e0e:	f043 0310 	orr.w	r3, r3, #16
 8001e12:	6453      	str	r3, [r2, #68]	; 0x44
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <HAL_UART_MspInit+0xf8>)
 8001e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e18:	f003 0310 	and.w	r3, r3, #16
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e20:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_UART_MspInit+0xf8>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	4a23      	ldr	r2, [pc, #140]	; (8001eb4 <HAL_UART_MspInit+0xf8>)
 8001e26:	f043 0302 	orr.w	r3, r3, #2
 8001e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2c:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <HAL_UART_MspInit+0xf8>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e38:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <HAL_UART_MspInit+0xf8>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	4a1d      	ldr	r2, [pc, #116]	; (8001eb4 <HAL_UART_MspInit+0xf8>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6313      	str	r3, [r2, #48]	; 0x30
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_UART_MspInit+0xf8>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e68:	2307      	movs	r3, #7
 8001e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e72:	4619      	mov	r1, r3
 8001e74:	4810      	ldr	r0, [pc, #64]	; (8001eb8 <HAL_UART_MspInit+0xfc>)
 8001e76:	f000 fa9f 	bl	80023b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e94:	2307      	movs	r3, #7
 8001e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4806      	ldr	r0, [pc, #24]	; (8001ebc <HAL_UART_MspInit+0x100>)
 8001ea2:	f000 fa89 	bl	80023b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	37b0      	adds	r7, #176	; 0xb0
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40011000 	.word	0x40011000
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	40020000 	.word	0x40020000

08001ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec4:	480d      	ldr	r0, [pc, #52]	; (8001efc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ec6:	490e      	ldr	r1, [pc, #56]	; (8001f00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ec8:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ecc:	e002      	b.n	8001ed4 <LoopCopyDataInit>

08001ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed2:	3304      	adds	r3, #4

08001ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed8:	d3f9      	bcc.n	8001ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001edc:	4c0b      	ldr	r4, [pc, #44]	; (8001f0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee0:	e001      	b.n	8001ee6 <LoopFillZerobss>

08001ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee4:	3204      	adds	r2, #4

08001ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee8:	d3fb      	bcc.n	8001ee2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eea:	f7ff fe11 	bl	8001b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eee:	f00c f9b3 	bl	800e258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef2:	f7ff fa25 	bl	8001340 <main>
  bx  lr    
 8001ef6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ef8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f00:	2000049c 	.word	0x2000049c
  ldr r2, =_sidata
 8001f04:	0801331c 	.word	0x0801331c
  ldr r2, =_sbss
 8001f08:	2000049c 	.word	0x2000049c
  ldr r4, =_ebss
 8001f0c:	20000750 	.word	0x20000750

08001f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f10:	e7fe      	b.n	8001f10 <ADC_IRQHandler>

08001f12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f16:	2003      	movs	r0, #3
 8001f18:	f000 f94c 	bl	80021b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1c:	200f      	movs	r0, #15
 8001f1e:	f000 f805 	bl	8001f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f22:	f7ff fcbd 	bl	80018a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_InitTick+0x54>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_InitTick+0x58>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f996 	bl	800227c <HAL_SYSTICK_Config>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00e      	b.n	8001f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b0f      	cmp	r3, #15
 8001f5e:	d80a      	bhi.n	8001f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f60:	2200      	movs	r2, #0
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f000 f944 	bl	80021f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f6c:	4a06      	ldr	r2, [pc, #24]	; (8001f88 <HAL_InitTick+0x5c>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e000      	b.n	8001f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000008 	.word	0x20000008
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_IncTick+0x20>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_IncTick+0x24>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <HAL_IncTick+0x24>)
 8001f9e:	6013      	str	r3, [r2, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000008 	.word	0x20000008
 8001fb0:	200006fc 	.word	0x200006fc

08001fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <HAL_GetTick+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	200006fc 	.word	0x200006fc

08001fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff ffee 	bl	8001fb4 <HAL_GetTick>
 8001fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d005      	beq.n	8001ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_Delay+0x44>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ff2:	bf00      	nop
 8001ff4:	f7ff ffde 	bl	8001fb4 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d8f7      	bhi.n	8001ff4 <HAL_Delay+0x28>
  {
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000008 	.word	0x20000008

08002014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <__NVIC_SetPriorityGrouping+0x40>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002030:	4013      	ands	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	4313      	orrs	r3, r2
 8002040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002042:	4a04      	ldr	r2, [pc, #16]	; (8002054 <__NVIC_SetPriorityGrouping+0x40>)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	60d3      	str	r3, [r2, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00
 8002058:	05fa0000 	.word	0x05fa0000

0800205c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <__NVIC_GetPriorityGrouping+0x18>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	f003 0307 	and.w	r3, r3, #7
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	2b00      	cmp	r3, #0
 8002088:	db0b      	blt.n	80020a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	f003 021f 	and.w	r2, r3, #31
 8002090:	4907      	ldr	r1, [pc, #28]	; (80020b0 <__NVIC_EnableIRQ+0x38>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	2001      	movs	r0, #1
 800209a:	fa00 f202 	lsl.w	r2, r0, r2
 800209e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000e100 	.word	0xe000e100

080020b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	6039      	str	r1, [r7, #0]
 80020be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	db0a      	blt.n	80020de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	490c      	ldr	r1, [pc, #48]	; (8002100 <__NVIC_SetPriority+0x4c>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	440b      	add	r3, r1
 80020d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020dc:	e00a      	b.n	80020f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4908      	ldr	r1, [pc, #32]	; (8002104 <__NVIC_SetPriority+0x50>)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	3b04      	subs	r3, #4
 80020ec:	0112      	lsls	r2, r2, #4
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	440b      	add	r3, r1
 80020f2:	761a      	strb	r2, [r3, #24]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000e100 	.word	0xe000e100
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	; 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f1c3 0307 	rsb	r3, r3, #7
 8002122:	2b04      	cmp	r3, #4
 8002124:	bf28      	it	cs
 8002126:	2304      	movcs	r3, #4
 8002128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3304      	adds	r3, #4
 800212e:	2b06      	cmp	r3, #6
 8002130:	d902      	bls.n	8002138 <NVIC_EncodePriority+0x30>
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3b03      	subs	r3, #3
 8002136:	e000      	b.n	800213a <NVIC_EncodePriority+0x32>
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	f04f 32ff 	mov.w	r2, #4294967295
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	401a      	ands	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002150:	f04f 31ff 	mov.w	r1, #4294967295
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	43d9      	mvns	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	4313      	orrs	r3, r2
         );
}
 8002162:	4618      	mov	r0, r3
 8002164:	3724      	adds	r7, #36	; 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002180:	d301      	bcc.n	8002186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002182:	2301      	movs	r3, #1
 8002184:	e00f      	b.n	80021a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <SysTick_Config+0x40>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218e:	210f      	movs	r1, #15
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	f7ff ff8e 	bl	80020b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <SysTick_Config+0x40>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219e:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <SysTick_Config+0x40>)
 80021a0:	2207      	movs	r2, #7
 80021a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	e000e010 	.word	0xe000e010

080021b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b07      	cmp	r3, #7
 80021c0:	d00f      	beq.n	80021e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b06      	cmp	r3, #6
 80021c6:	d00c      	beq.n	80021e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b05      	cmp	r3, #5
 80021cc:	d009      	beq.n	80021e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d006      	beq.n	80021e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d003      	beq.n	80021e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021da:	2191      	movs	r1, #145	; 0x91
 80021dc:	4804      	ldr	r0, [pc, #16]	; (80021f0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80021de:	f7ff fb54 	bl	800188a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff ff16 	bl	8002014 <__NVIC_SetPriorityGrouping>
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	08012c3c 	.word	0x08012c3c

080021f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b0f      	cmp	r3, #15
 800220a:	d903      	bls.n	8002214 <HAL_NVIC_SetPriority+0x20>
 800220c:	21a9      	movs	r1, #169	; 0xa9
 800220e:	480e      	ldr	r0, [pc, #56]	; (8002248 <HAL_NVIC_SetPriority+0x54>)
 8002210:	f7ff fb3b 	bl	800188a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b0f      	cmp	r3, #15
 8002218:	d903      	bls.n	8002222 <HAL_NVIC_SetPriority+0x2e>
 800221a:	21aa      	movs	r1, #170	; 0xaa
 800221c:	480a      	ldr	r0, [pc, #40]	; (8002248 <HAL_NVIC_SetPriority+0x54>)
 800221e:	f7ff fb34 	bl	800188a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002222:	f7ff ff1b 	bl	800205c <__NVIC_GetPriorityGrouping>
 8002226:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	6978      	ldr	r0, [r7, #20]
 800222e:	f7ff ff6b 	bl	8002108 <NVIC_EncodePriority>
 8002232:	4602      	mov	r2, r0
 8002234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff ff3a 	bl	80020b4 <__NVIC_SetPriority>
}
 8002240:	bf00      	nop
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	08012c3c 	.word	0x08012c3c

0800224c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	2b00      	cmp	r3, #0
 800225c:	da03      	bge.n	8002266 <HAL_NVIC_EnableIRQ+0x1a>
 800225e:	21bd      	movs	r1, #189	; 0xbd
 8002260:	4805      	ldr	r0, [pc, #20]	; (8002278 <HAL_NVIC_EnableIRQ+0x2c>)
 8002262:	f7ff fb12 	bl	800188a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff ff04 	bl	8002078 <__NVIC_EnableIRQ>
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	08012c3c 	.word	0x08012c3c

0800227c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff73 	bl	8002170 <SysTick_Config>
 800228a:	4603      	mov	r3, r0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022a2:	f7ff fe87 	bl	8001fb4 <HAL_GetTick>
 80022a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d008      	beq.n	80022c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2280      	movs	r2, #128	; 0x80
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e052      	b.n	800236c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0216 	bic.w	r2, r2, #22
 80022d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d103      	bne.n	80022f6 <HAL_DMA_Abort+0x62>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0208 	bic.w	r2, r2, #8
 8002304:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002316:	e013      	b.n	8002340 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002318:	f7ff fe4c 	bl	8001fb4 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b05      	cmp	r3, #5
 8002324:	d90c      	bls.n	8002340 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2220      	movs	r2, #32
 800232a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2203      	movs	r2, #3
 8002330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e015      	b.n	800236c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1e4      	bne.n	8002318 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	223f      	movs	r2, #63	; 0x3f
 8002354:	409a      	lsls	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d004      	beq.n	8002392 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2280      	movs	r2, #128	; 0x80
 800238c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e00c      	b.n	80023ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2205      	movs	r2, #5
 8002396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0201 	bic.w	r2, r2, #1
 80023a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a3a      	ldr	r2, [pc, #232]	; (80024c0 <HAL_GPIO_Init+0x108>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d02b      	beq.n	8002432 <HAL_GPIO_Init+0x7a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a39      	ldr	r2, [pc, #228]	; (80024c4 <HAL_GPIO_Init+0x10c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d027      	beq.n	8002432 <HAL_GPIO_Init+0x7a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a38      	ldr	r2, [pc, #224]	; (80024c8 <HAL_GPIO_Init+0x110>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d023      	beq.n	8002432 <HAL_GPIO_Init+0x7a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a37      	ldr	r2, [pc, #220]	; (80024cc <HAL_GPIO_Init+0x114>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01f      	beq.n	8002432 <HAL_GPIO_Init+0x7a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a36      	ldr	r2, [pc, #216]	; (80024d0 <HAL_GPIO_Init+0x118>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01b      	beq.n	8002432 <HAL_GPIO_Init+0x7a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a35      	ldr	r2, [pc, #212]	; (80024d4 <HAL_GPIO_Init+0x11c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d017      	beq.n	8002432 <HAL_GPIO_Init+0x7a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a34      	ldr	r2, [pc, #208]	; (80024d8 <HAL_GPIO_Init+0x120>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0x7a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a33      	ldr	r2, [pc, #204]	; (80024dc <HAL_GPIO_Init+0x124>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00f      	beq.n	8002432 <HAL_GPIO_Init+0x7a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a32      	ldr	r2, [pc, #200]	; (80024e0 <HAL_GPIO_Init+0x128>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00b      	beq.n	8002432 <HAL_GPIO_Init+0x7a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a31      	ldr	r2, [pc, #196]	; (80024e4 <HAL_GPIO_Init+0x12c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <HAL_GPIO_Init+0x7a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a30      	ldr	r2, [pc, #192]	; (80024e8 <HAL_GPIO_Init+0x130>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x7a>
 800242a:	21aa      	movs	r1, #170	; 0xaa
 800242c:	482f      	ldr	r0, [pc, #188]	; (80024ec <HAL_GPIO_Init+0x134>)
 800242e:	f7ff fa2c 	bl	800188a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d103      	bne.n	8002444 <HAL_GPIO_Init+0x8c>
 800243c:	21ab      	movs	r1, #171	; 0xab
 800243e:	482b      	ldr	r0, [pc, #172]	; (80024ec <HAL_GPIO_Init+0x134>)
 8002440:	f7ff fa23 	bl	800188a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d035      	beq.n	80024b8 <HAL_GPIO_Init+0x100>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d031      	beq.n	80024b8 <HAL_GPIO_Init+0x100>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b11      	cmp	r3, #17
 800245a:	d02d      	beq.n	80024b8 <HAL_GPIO_Init+0x100>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d029      	beq.n	80024b8 <HAL_GPIO_Init+0x100>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b12      	cmp	r3, #18
 800246a:	d025      	beq.n	80024b8 <HAL_GPIO_Init+0x100>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002474:	d020      	beq.n	80024b8 <HAL_GPIO_Init+0x100>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800247e:	d01b      	beq.n	80024b8 <HAL_GPIO_Init+0x100>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002488:	d016      	beq.n	80024b8 <HAL_GPIO_Init+0x100>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002492:	d011      	beq.n	80024b8 <HAL_GPIO_Init+0x100>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800249c:	d00c      	beq.n	80024b8 <HAL_GPIO_Init+0x100>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80024a6:	d007      	beq.n	80024b8 <HAL_GPIO_Init+0x100>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x100>
 80024b0:	21ac      	movs	r1, #172	; 0xac
 80024b2:	480e      	ldr	r0, [pc, #56]	; (80024ec <HAL_GPIO_Init+0x134>)
 80024b4:	f7ff f9e9 	bl	800188a <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
 80024bc:	e2c7      	b.n	8002a4e <HAL_GPIO_Init+0x696>
 80024be:	bf00      	nop
 80024c0:	40020000 	.word	0x40020000
 80024c4:	40020400 	.word	0x40020400
 80024c8:	40020800 	.word	0x40020800
 80024cc:	40020c00 	.word	0x40020c00
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40021400 	.word	0x40021400
 80024d8:	40021800 	.word	0x40021800
 80024dc:	40021c00 	.word	0x40021c00
 80024e0:	40022000 	.word	0x40022000
 80024e4:	40022400 	.word	0x40022400
 80024e8:	40022800 	.word	0x40022800
 80024ec:	08012c78 	.word	0x08012c78
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024f0:	2201      	movs	r2, #1
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	429a      	cmp	r2, r3
 800250a:	f040 829d 	bne.w	8002a48 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b01      	cmp	r3, #1
 8002518:	d005      	beq.n	8002526 <HAL_GPIO_Init+0x16e>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d144      	bne.n	80025b0 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00f      	beq.n	800254e <HAL_GPIO_Init+0x196>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d00b      	beq.n	800254e <HAL_GPIO_Init+0x196>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d007      	beq.n	800254e <HAL_GPIO_Init+0x196>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b03      	cmp	r3, #3
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x196>
 8002546:	21bd      	movs	r1, #189	; 0xbd
 8002548:	4831      	ldr	r0, [pc, #196]	; (8002610 <HAL_GPIO_Init+0x258>)
 800254a:	f7ff f99e 	bl	800188a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	2203      	movs	r2, #3
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002584:	2201      	movs	r2, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 0201 	and.w	r2, r3, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d02b      	beq.n	8002614 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00b      	beq.n	80025dc <HAL_GPIO_Init+0x224>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d007      	beq.n	80025dc <HAL_GPIO_Init+0x224>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x224>
 80025d4:	21ce      	movs	r1, #206	; 0xce
 80025d6:	480e      	ldr	r0, [pc, #56]	; (8002610 <HAL_GPIO_Init+0x258>)
 80025d8:	f7ff f957 	bl	800188a <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	60da      	str	r2, [r3, #12]
 800260c:	e002      	b.n	8002614 <HAL_GPIO_Init+0x25c>
 800260e:	bf00      	nop
 8002610:	08012c78 	.word	0x08012c78
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b02      	cmp	r3, #2
 800261e:	f040 8134 	bne.w	800288a <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 810b 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	2b01      	cmp	r3, #1
 8002632:	f000 8106 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 8101 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80fc 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 80f7 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	2b01      	cmp	r3, #1
 800265a:	f000 80f2 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b02      	cmp	r3, #2
 8002664:	f000 80ed 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b02      	cmp	r3, #2
 800266e:	f000 80e8 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b02      	cmp	r3, #2
 8002678:	f000 80e3 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b03      	cmp	r3, #3
 8002682:	f000 80de 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b03      	cmp	r3, #3
 800268c:	f000 80d9 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b03      	cmp	r3, #3
 8002696:	f000 80d4 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b03      	cmp	r3, #3
 80026a0:	f000 80cf 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	f000 80ca 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	f000 80c5 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b04      	cmp	r3, #4
 80026be:	f000 80c0 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	f000 80bb 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	f000 80b6 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	2b04      	cmp	r3, #4
 80026dc:	f000 80b1 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	f000 80ac 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	f000 80a7 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	2b05      	cmp	r3, #5
 80026fa:	f000 80a2 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b05      	cmp	r3, #5
 8002704:	f000 809d 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	2b05      	cmp	r3, #5
 800270e:	f000 8098 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b05      	cmp	r3, #5
 8002718:	f000 8093 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	2b05      	cmp	r3, #5
 8002722:	f000 808e 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b06      	cmp	r3, #6
 800272c:	f000 8089 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	2b06      	cmp	r3, #6
 8002736:	f000 8084 	beq.w	8002842 <HAL_GPIO_Init+0x48a>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b07      	cmp	r3, #7
 8002740:	d07f      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b07      	cmp	r3, #7
 8002748:	d07b      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b07      	cmp	r3, #7
 8002750:	d077      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b07      	cmp	r3, #7
 8002758:	d073      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b07      	cmp	r3, #7
 8002760:	d06f      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b07      	cmp	r3, #7
 8002768:	d06b      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b07      	cmp	r3, #7
 8002770:	d067      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	2b08      	cmp	r3, #8
 8002778:	d063      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	2b08      	cmp	r3, #8
 8002780:	d05f      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b08      	cmp	r3, #8
 8002788:	d05b      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b08      	cmp	r3, #8
 8002790:	d057      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b08      	cmp	r3, #8
 8002798:	d053      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d04f      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d04b      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b09      	cmp	r3, #9
 80027b0:	d047      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b09      	cmp	r3, #9
 80027b8:	d043      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2b09      	cmp	r3, #9
 80027c0:	d03f      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b09      	cmp	r3, #9
 80027c8:	d03b      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b09      	cmp	r3, #9
 80027d0:	d037      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2b09      	cmp	r3, #9
 80027d8:	d033      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b09      	cmp	r3, #9
 80027e0:	d02f      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	2b0a      	cmp	r3, #10
 80027e8:	d02b      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b0a      	cmp	r3, #10
 80027f0:	d027      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b0a      	cmp	r3, #10
 80027f8:	d023      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b0a      	cmp	r3, #10
 8002800:	d01f      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b0b      	cmp	r3, #11
 8002808:	d01b      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b0c      	cmp	r3, #12
 8002810:	d017      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b0c      	cmp	r3, #12
 8002818:	d013      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b0c      	cmp	r3, #12
 8002820:	d00f      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b0f      	cmp	r3, #15
 8002828:	d00b      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	2b0d      	cmp	r3, #13
 8002830:	d007      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	2b0e      	cmp	r3, #14
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x48a>
 800283a:	21db      	movs	r1, #219	; 0xdb
 800283c:	4888      	ldr	r0, [pc, #544]	; (8002a60 <HAL_GPIO_Init+0x6a8>)
 800283e:	f7ff f824 	bl	800188a <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	08da      	lsrs	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3208      	adds	r2, #8
 800284a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800284e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	220f      	movs	r2, #15
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	08da      	lsrs	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3208      	adds	r2, #8
 8002884:	69b9      	ldr	r1, [r7, #24]
 8002886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0203 	and.w	r2, r3, #3
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80be 	beq.w	8002a48 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028cc:	4b65      	ldr	r3, [pc, #404]	; (8002a64 <HAL_GPIO_Init+0x6ac>)
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	4a64      	ldr	r2, [pc, #400]	; (8002a64 <HAL_GPIO_Init+0x6ac>)
 80028d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d6:	6453      	str	r3, [r2, #68]	; 0x44
 80028d8:	4b62      	ldr	r3, [pc, #392]	; (8002a64 <HAL_GPIO_Init+0x6ac>)
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028e4:	4a60      	ldr	r2, [pc, #384]	; (8002a68 <HAL_GPIO_Init+0x6b0>)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	220f      	movs	r2, #15
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a58      	ldr	r2, [pc, #352]	; (8002a6c <HAL_GPIO_Init+0x6b4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d037      	beq.n	8002980 <HAL_GPIO_Init+0x5c8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a57      	ldr	r2, [pc, #348]	; (8002a70 <HAL_GPIO_Init+0x6b8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d031      	beq.n	800297c <HAL_GPIO_Init+0x5c4>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a56      	ldr	r2, [pc, #344]	; (8002a74 <HAL_GPIO_Init+0x6bc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d02b      	beq.n	8002978 <HAL_GPIO_Init+0x5c0>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a55      	ldr	r2, [pc, #340]	; (8002a78 <HAL_GPIO_Init+0x6c0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d025      	beq.n	8002974 <HAL_GPIO_Init+0x5bc>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a54      	ldr	r2, [pc, #336]	; (8002a7c <HAL_GPIO_Init+0x6c4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d01f      	beq.n	8002970 <HAL_GPIO_Init+0x5b8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a53      	ldr	r2, [pc, #332]	; (8002a80 <HAL_GPIO_Init+0x6c8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d019      	beq.n	800296c <HAL_GPIO_Init+0x5b4>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a52      	ldr	r2, [pc, #328]	; (8002a84 <HAL_GPIO_Init+0x6cc>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d013      	beq.n	8002968 <HAL_GPIO_Init+0x5b0>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a51      	ldr	r2, [pc, #324]	; (8002a88 <HAL_GPIO_Init+0x6d0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00d      	beq.n	8002964 <HAL_GPIO_Init+0x5ac>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a50      	ldr	r2, [pc, #320]	; (8002a8c <HAL_GPIO_Init+0x6d4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d007      	beq.n	8002960 <HAL_GPIO_Init+0x5a8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a4f      	ldr	r2, [pc, #316]	; (8002a90 <HAL_GPIO_Init+0x6d8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d101      	bne.n	800295c <HAL_GPIO_Init+0x5a4>
 8002958:	2309      	movs	r3, #9
 800295a:	e012      	b.n	8002982 <HAL_GPIO_Init+0x5ca>
 800295c:	230a      	movs	r3, #10
 800295e:	e010      	b.n	8002982 <HAL_GPIO_Init+0x5ca>
 8002960:	2308      	movs	r3, #8
 8002962:	e00e      	b.n	8002982 <HAL_GPIO_Init+0x5ca>
 8002964:	2307      	movs	r3, #7
 8002966:	e00c      	b.n	8002982 <HAL_GPIO_Init+0x5ca>
 8002968:	2306      	movs	r3, #6
 800296a:	e00a      	b.n	8002982 <HAL_GPIO_Init+0x5ca>
 800296c:	2305      	movs	r3, #5
 800296e:	e008      	b.n	8002982 <HAL_GPIO_Init+0x5ca>
 8002970:	2304      	movs	r3, #4
 8002972:	e006      	b.n	8002982 <HAL_GPIO_Init+0x5ca>
 8002974:	2303      	movs	r3, #3
 8002976:	e004      	b.n	8002982 <HAL_GPIO_Init+0x5ca>
 8002978:	2302      	movs	r3, #2
 800297a:	e002      	b.n	8002982 <HAL_GPIO_Init+0x5ca>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_GPIO_Init+0x5ca>
 8002980:	2300      	movs	r3, #0
 8002982:	69fa      	ldr	r2, [r7, #28]
 8002984:	f002 0203 	and.w	r2, r2, #3
 8002988:	0092      	lsls	r2, r2, #2
 800298a:	4093      	lsls	r3, r2
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002992:	4935      	ldr	r1, [pc, #212]	; (8002a68 <HAL_GPIO_Init+0x6b0>)
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a0:	4b3c      	ldr	r3, [pc, #240]	; (8002a94 <HAL_GPIO_Init+0x6dc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029c4:	4a33      	ldr	r2, [pc, #204]	; (8002a94 <HAL_GPIO_Init+0x6dc>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ca:	4b32      	ldr	r3, [pc, #200]	; (8002a94 <HAL_GPIO_Init+0x6dc>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029ee:	4a29      	ldr	r2, [pc, #164]	; (8002a94 <HAL_GPIO_Init+0x6dc>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029f4:	4b27      	ldr	r3, [pc, #156]	; (8002a94 <HAL_GPIO_Init+0x6dc>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a18:	4a1e      	ldr	r2, [pc, #120]	; (8002a94 <HAL_GPIO_Init+0x6dc>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <HAL_GPIO_Init+0x6dc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a42:	4a14      	ldr	r2, [pc, #80]	; (8002a94 <HAL_GPIO_Init+0x6dc>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	2b0f      	cmp	r3, #15
 8002a52:	f67f ad4d 	bls.w	80024f0 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8002a56:	bf00      	nop
 8002a58:	bf00      	nop
 8002a5a:	3720      	adds	r7, #32
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	08012c78 	.word	0x08012c78
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40013800 	.word	0x40013800
 8002a6c:	40020000 	.word	0x40020000
 8002a70:	40020400 	.word	0x40020400
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40020c00 	.word	0x40020c00
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40021400 	.word	0x40021400
 8002a84:	40021800 	.word	0x40021800
 8002a88:	40021c00 	.word	0x40021c00
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	40022400 	.word	0x40022400
 8002a94:	40013c00 	.word	0x40013c00

08002a98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002aa4:	887b      	ldrh	r3, [r7, #2]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d104      	bne.n	8002ab4 <HAL_GPIO_ReadPin+0x1c>
 8002aaa:	f240 1177 	movw	r1, #375	; 0x177
 8002aae:	4809      	ldr	r0, [pc, #36]	; (8002ad4 <HAL_GPIO_ReadPin+0x3c>)
 8002ab0:	f7fe feeb 	bl	800188a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	887b      	ldrh	r3, [r7, #2]
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
 8002ac4:	e001      	b.n	8002aca <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	08012c78 	.word	0x08012c78

08002ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	807b      	strh	r3, [r7, #2]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002ae8:	887b      	ldrh	r3, [r7, #2]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d104      	bne.n	8002af8 <HAL_GPIO_WritePin+0x20>
 8002aee:	f240 1197 	movw	r1, #407	; 0x197
 8002af2:	480e      	ldr	r0, [pc, #56]	; (8002b2c <HAL_GPIO_WritePin+0x54>)
 8002af4:	f7fe fec9 	bl	800188a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002af8:	787b      	ldrb	r3, [r7, #1]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d007      	beq.n	8002b0e <HAL_GPIO_WritePin+0x36>
 8002afe:	787b      	ldrb	r3, [r7, #1]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d004      	beq.n	8002b0e <HAL_GPIO_WritePin+0x36>
 8002b04:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8002b08:	4808      	ldr	r0, [pc, #32]	; (8002b2c <HAL_GPIO_WritePin+0x54>)
 8002b0a:	f7fe febe 	bl	800188a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002b0e:	787b      	ldrb	r3, [r7, #1]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b14:	887a      	ldrh	r2, [r7, #2]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b1a:	e003      	b.n	8002b24 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b1c:	887b      	ldrh	r3, [r7, #2]
 8002b1e:	041a      	lsls	r2, r3, #16
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	619a      	str	r2, [r3, #24]
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	08012c78 	.word	0x08012c78

08002b30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d006      	beq.n	8002b54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b46:	4a05      	ldr	r2, [pc, #20]	; (8002b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fe58 	bl	8001804 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40013c00 	.word	0x40013c00

08002b60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e107      	b.n	8002d82 <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a85      	ldr	r2, [pc, #532]	; (8002d8c <HAL_I2C_Init+0x22c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d013      	beq.n	8002ba4 <HAL_I2C_Init+0x44>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a83      	ldr	r2, [pc, #524]	; (8002d90 <HAL_I2C_Init+0x230>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00e      	beq.n	8002ba4 <HAL_I2C_Init+0x44>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a82      	ldr	r2, [pc, #520]	; (8002d94 <HAL_I2C_Init+0x234>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d009      	beq.n	8002ba4 <HAL_I2C_Init+0x44>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a80      	ldr	r2, [pc, #512]	; (8002d98 <HAL_I2C_Init+0x238>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d004      	beq.n	8002ba4 <HAL_I2C_Init+0x44>
 8002b9a:	f240 2119 	movw	r1, #537	; 0x219
 8002b9e:	487f      	ldr	r0, [pc, #508]	; (8002d9c <HAL_I2C_Init+0x23c>)
 8002ba0:	f7fe fe73 	bl	800188a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bac:	d304      	bcc.n	8002bb8 <HAL_I2C_Init+0x58>
 8002bae:	f240 211a 	movw	r1, #538	; 0x21a
 8002bb2:	487a      	ldr	r0, [pc, #488]	; (8002d9c <HAL_I2C_Init+0x23c>)
 8002bb4:	f7fe fe69 	bl	800188a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d008      	beq.n	8002bd2 <HAL_I2C_Init+0x72>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d004      	beq.n	8002bd2 <HAL_I2C_Init+0x72>
 8002bc8:	f240 211b 	movw	r1, #539	; 0x21b
 8002bcc:	4873      	ldr	r0, [pc, #460]	; (8002d9c <HAL_I2C_Init+0x23c>)
 8002bce:	f7fe fe5c 	bl	800188a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_I2C_Init+0x8e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be2:	d004      	beq.n	8002bee <HAL_I2C_Init+0x8e>
 8002be4:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8002be8:	486c      	ldr	r0, [pc, #432]	; (8002d9c <HAL_I2C_Init+0x23c>)
 8002bea:	f7fe fe4e 	bl	800188a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	2bff      	cmp	r3, #255	; 0xff
 8002bf4:	d904      	bls.n	8002c00 <HAL_I2C_Init+0xa0>
 8002bf6:	f240 211d 	movw	r1, #541	; 0x21d
 8002bfa:	4868      	ldr	r0, [pc, #416]	; (8002d9c <HAL_I2C_Init+0x23c>)
 8002bfc:	f7fe fe45 	bl	800188a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d020      	beq.n	8002c4a <HAL_I2C_Init+0xea>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d01c      	beq.n	8002c4a <HAL_I2C_Init+0xea>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d018      	beq.n	8002c4a <HAL_I2C_Init+0xea>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d014      	beq.n	8002c4a <HAL_I2C_Init+0xea>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d010      	beq.n	8002c4a <HAL_I2C_Init+0xea>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b05      	cmp	r3, #5
 8002c2e:	d00c      	beq.n	8002c4a <HAL_I2C_Init+0xea>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	2b06      	cmp	r3, #6
 8002c36:	d008      	beq.n	8002c4a <HAL_I2C_Init+0xea>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	2b07      	cmp	r3, #7
 8002c3e:	d004      	beq.n	8002c4a <HAL_I2C_Init+0xea>
 8002c40:	f240 211e 	movw	r1, #542	; 0x21e
 8002c44:	4855      	ldr	r0, [pc, #340]	; (8002d9c <HAL_I2C_Init+0x23c>)
 8002c46:	f7fe fe20 	bl	800188a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_I2C_Init+0x106>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c5a:	d004      	beq.n	8002c66 <HAL_I2C_Init+0x106>
 8002c5c:	f240 211f 	movw	r1, #543	; 0x21f
 8002c60:	484e      	ldr	r0, [pc, #312]	; (8002d9c <HAL_I2C_Init+0x23c>)
 8002c62:	f7fe fe12 	bl	800188a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_I2C_Init+0x122>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c76:	d004      	beq.n	8002c82 <HAL_I2C_Init+0x122>
 8002c78:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002c7c:	4847      	ldr	r0, [pc, #284]	; (8002d9c <HAL_I2C_Init+0x23c>)
 8002c7e:	f7fe fe04 	bl	800188a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fe faf2 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2224      	movs	r2, #36	; 0x24
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d107      	bne.n	8002cea <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	e006      	b.n	8002cf8 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002cf6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d104      	bne.n	8002d0a <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_I2C_Init+0x240>)
 8002d16:	430b      	orrs	r3, r1
 8002d18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69d9      	ldr	r1, [r3, #28]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1a      	ldr	r2, [r3, #32]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40005400 	.word	0x40005400
 8002d90:	40005800 	.word	0x40005800
 8002d94:	40005c00 	.word	0x40005c00
 8002d98:	40006000 	.word	0x40006000
 8002d9c:	08012cb4 	.word	0x08012cb4
 8002da0:	02008000 	.word	0x02008000

08002da4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	461a      	mov	r2, r3
 8002db0:	460b      	mov	r3, r1
 8002db2:	817b      	strh	r3, [r7, #10]
 8002db4:	4613      	mov	r3, r2
 8002db6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	f040 80da 	bne.w	8002f7a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_I2C_Master_Transmit+0x30>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e0d3      	b.n	8002f7c <HAL_I2C_Master_Transmit+0x1d8>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ddc:	f7ff f8ea 	bl	8001fb4 <HAL_GetTick>
 8002de0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	2319      	movs	r3, #25
 8002de8:	2201      	movs	r2, #1
 8002dea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f9e6 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0be      	b.n	8002f7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2221      	movs	r2, #33	; 0x21
 8002e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2210      	movs	r2, #16
 8002e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	893a      	ldrh	r2, [r7, #8]
 8002e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2bff      	cmp	r3, #255	; 0xff
 8002e2e:	d90e      	bls.n	8002e4e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	22ff      	movs	r2, #255	; 0xff
 8002e34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	8979      	ldrh	r1, [r7, #10]
 8002e3e:	4b51      	ldr	r3, [pc, #324]	; (8002f84 <HAL_I2C_Master_Transmit+0x1e0>)
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 fbd0 	bl	80035ec <I2C_TransferConfig>
 8002e4c:	e06c      	b.n	8002f28 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	8979      	ldrh	r1, [r7, #10]
 8002e60:	4b48      	ldr	r3, [pc, #288]	; (8002f84 <HAL_I2C_Master_Transmit+0x1e0>)
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 fbbf 	bl	80035ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002e6e:	e05b      	b.n	8002f28 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	6a39      	ldr	r1, [r7, #32]
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f9e3 	bl	8003240 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e07b      	b.n	8002f7c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d034      	beq.n	8002f28 <HAL_I2C_Master_Transmit+0x184>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d130      	bne.n	8002f28 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2180      	movs	r1, #128	; 0x80
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f975 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e04d      	b.n	8002f7c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2bff      	cmp	r3, #255	; 0xff
 8002ee8:	d90e      	bls.n	8002f08 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	22ff      	movs	r2, #255	; 0xff
 8002eee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	8979      	ldrh	r1, [r7, #10]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fb73 	bl	80035ec <I2C_TransferConfig>
 8002f06:	e00f      	b.n	8002f28 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	8979      	ldrh	r1, [r7, #10]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fb62 	bl	80035ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d19e      	bne.n	8002e70 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	6a39      	ldr	r1, [r7, #32]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f9c2 	bl	80032c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e01a      	b.n	8002f7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6859      	ldr	r1, [r3, #4]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_I2C_Master_Transmit+0x1e4>)
 8002f5a:	400b      	ands	r3, r1
 8002f5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e000      	b.n	8002f7c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
  }
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	80002000 	.word	0x80002000
 8002f88:	fe00e800 	.word	0xfe00e800

08002f8c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	607a      	str	r2, [r7, #4]
 8002f96:	461a      	mov	r2, r3
 8002f98:	460b      	mov	r3, r1
 8002f9a:	817b      	strh	r3, [r7, #10]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	f040 80db 	bne.w	8003164 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_I2C_Master_Receive+0x30>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e0d4      	b.n	8003166 <HAL_I2C_Master_Receive+0x1da>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fc4:	f7fe fff6 	bl	8001fb4 <HAL_GetTick>
 8002fc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	2319      	movs	r3, #25
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f8f2 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e0bf      	b.n	8003166 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2222      	movs	r2, #34	; 0x22
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	893a      	ldrh	r2, [r7, #8]
 8003006:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	2bff      	cmp	r3, #255	; 0xff
 8003016:	d90e      	bls.n	8003036 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	22ff      	movs	r2, #255	; 0xff
 800301c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	b2da      	uxtb	r2, r3
 8003024:	8979      	ldrh	r1, [r7, #10]
 8003026:	4b52      	ldr	r3, [pc, #328]	; (8003170 <HAL_I2C_Master_Receive+0x1e4>)
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fadc 	bl	80035ec <I2C_TransferConfig>
 8003034:	e06d      	b.n	8003112 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003044:	b2da      	uxtb	r2, r3
 8003046:	8979      	ldrh	r1, [r7, #10]
 8003048:	4b49      	ldr	r3, [pc, #292]	; (8003170 <HAL_I2C_Master_Receive+0x1e4>)
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 facb 	bl	80035ec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003056:	e05c      	b.n	8003112 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	6a39      	ldr	r1, [r7, #32]
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f96b 	bl	8003338 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e07c      	b.n	8003166 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d034      	beq.n	8003112 <HAL_I2C_Master_Receive+0x186>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d130      	bne.n	8003112 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	2200      	movs	r2, #0
 80030b8:	2180      	movs	r1, #128	; 0x80
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f880 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e04d      	b.n	8003166 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2bff      	cmp	r3, #255	; 0xff
 80030d2:	d90e      	bls.n	80030f2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	22ff      	movs	r2, #255	; 0xff
 80030d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	8979      	ldrh	r1, [r7, #10]
 80030e2:	2300      	movs	r3, #0
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fa7e 	bl	80035ec <I2C_TransferConfig>
 80030f0:	e00f      	b.n	8003112 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	b2da      	uxtb	r2, r3
 8003102:	8979      	ldrh	r1, [r7, #10]
 8003104:	2300      	movs	r3, #0
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 fa6d 	bl	80035ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d19d      	bne.n	8003058 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	6a39      	ldr	r1, [r7, #32]
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f8cd 	bl	80032c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e01a      	b.n	8003166 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2220      	movs	r2, #32
 8003136:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <HAL_I2C_Master_Receive+0x1e8>)
 8003144:	400b      	ands	r3, r1
 8003146:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	e000      	b.n	8003166 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003164:	2302      	movs	r3, #2
  }
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	80002400 	.word	0x80002400
 8003174:	fe00e800 	.word	0xfe00e800

08003178 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b02      	cmp	r3, #2
 800318c:	d103      	bne.n	8003196 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2200      	movs	r2, #0
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d007      	beq.n	80031b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	619a      	str	r2, [r3, #24]
  }
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d0:	e022      	b.n	8003218 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d01e      	beq.n	8003218 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031da:	f7fe feeb 	bl	8001fb4 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d302      	bcc.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d113      	bne.n	8003218 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e00f      	b.n	8003238 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4013      	ands	r3, r2
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	bf0c      	ite	eq
 8003228:	2301      	moveq	r3, #1
 800322a:	2300      	movne	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	429a      	cmp	r2, r3
 8003234:	d0cd      	beq.n	80031d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800324c:	e02c      	b.n	80032a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f8ea 	bl	800342c <I2C_IsErrorOccurred>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e02a      	b.n	80032b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d01e      	beq.n	80032a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326a:	f7fe fea3 	bl	8001fb4 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	429a      	cmp	r2, r3
 8003278:	d302      	bcc.n	8003280 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d113      	bne.n	80032a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	f043 0220 	orr.w	r2, r3, #32
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e007      	b.n	80032b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d1cb      	bne.n	800324e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032cc:	e028      	b.n	8003320 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f8aa 	bl	800342c <I2C_IsErrorOccurred>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e026      	b.n	8003330 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e2:	f7fe fe67 	bl	8001fb4 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d302      	bcc.n	80032f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d113      	bne.n	8003320 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e007      	b.n	8003330 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b20      	cmp	r3, #32
 800332c:	d1cf      	bne.n	80032ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003344:	e064      	b.n	8003410 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f86e 	bl	800342c <I2C_IsErrorOccurred>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e062      	b.n	8003420 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b20      	cmp	r3, #32
 8003366:	d138      	bne.n	80033da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b04      	cmp	r3, #4
 8003374:	d105      	bne.n	8003382 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e04e      	b.n	8003420 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b10      	cmp	r3, #16
 800338e:	d107      	bne.n	80033a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2210      	movs	r2, #16
 8003396:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2204      	movs	r2, #4
 800339c:	645a      	str	r2, [r3, #68]	; 0x44
 800339e:	e002      	b.n	80033a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2220      	movs	r2, #32
 80033ac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80033ba:	400b      	ands	r3, r1
 80033bc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e022      	b.n	8003420 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033da:	f7fe fdeb 	bl	8001fb4 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d302      	bcc.n	80033f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10f      	bne.n	8003410 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	f043 0220 	orr.w	r2, r3, #32
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e007      	b.n	8003420 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b04      	cmp	r3, #4
 800341c:	d193      	bne.n	8003346 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	fe00e800 	.word	0xfe00e800

0800342c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	; 0x28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	d068      	beq.n	800352a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2210      	movs	r2, #16
 800345e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003460:	e049      	b.n	80034f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d045      	beq.n	80034f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800346a:	f7fe fda3 	bl	8001fb4 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	429a      	cmp	r2, r3
 8003478:	d302      	bcc.n	8003480 <I2C_IsErrorOccurred+0x54>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d13a      	bne.n	80034f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003492:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800349e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a2:	d121      	bne.n	80034e8 <I2C_IsErrorOccurred+0xbc>
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034aa:	d01d      	beq.n	80034e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	d01a      	beq.n	80034e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034c2:	f7fe fd77 	bl	8001fb4 <HAL_GetTick>
 80034c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034c8:	e00e      	b.n	80034e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034ca:	f7fe fd73 	bl	8001fb4 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b19      	cmp	r3, #25
 80034d6:	d907      	bls.n	80034e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	f043 0320 	orr.w	r3, r3, #32
 80034de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80034e6:	e006      	b.n	80034f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	d1e9      	bne.n	80034ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b20      	cmp	r3, #32
 8003502:	d003      	beq.n	800350c <I2C_IsErrorOccurred+0xe0>
 8003504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0aa      	beq.n	8003462 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800350c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003510:	2b00      	cmp	r3, #0
 8003512:	d103      	bne.n	800351c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2220      	movs	r2, #32
 800351a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	f043 0304 	orr.w	r3, r3, #4
 8003522:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00b      	beq.n	8003554 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800354c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00b      	beq.n	8003576 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	f043 0308 	orr.w	r3, r3, #8
 8003564:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800356e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	f043 0302 	orr.w	r3, r3, #2
 8003586:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003590:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01c      	beq.n	80035da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f7ff fde9 	bl	8003178 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6859      	ldr	r1, [r3, #4]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <I2C_IsErrorOccurred+0x1bc>)
 80035b2:	400b      	ands	r3, r1
 80035b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	431a      	orrs	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80035da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3728      	adds	r7, #40	; 0x28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	fe00e800 	.word	0xfe00e800

080035ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	607b      	str	r3, [r7, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	817b      	strh	r3, [r7, #10]
 80035fa:	4613      	mov	r3, r2
 80035fc:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a2f      	ldr	r2, [pc, #188]	; (80036c0 <I2C_TransferConfig+0xd4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d013      	beq.n	8003630 <I2C_TransferConfig+0x44>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a2d      	ldr	r2, [pc, #180]	; (80036c4 <I2C_TransferConfig+0xd8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00e      	beq.n	8003630 <I2C_TransferConfig+0x44>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2c      	ldr	r2, [pc, #176]	; (80036c8 <I2C_TransferConfig+0xdc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d009      	beq.n	8003630 <I2C_TransferConfig+0x44>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a2a      	ldr	r2, [pc, #168]	; (80036cc <I2C_TransferConfig+0xe0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d004      	beq.n	8003630 <I2C_TransferConfig+0x44>
 8003626:	f641 3147 	movw	r1, #6983	; 0x1b47
 800362a:	4829      	ldr	r0, [pc, #164]	; (80036d0 <I2C_TransferConfig+0xe4>)
 800362c:	f7fe f92d 	bl	800188a <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003636:	d00b      	beq.n	8003650 <I2C_TransferConfig+0x64>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800363e:	d007      	beq.n	8003650 <I2C_TransferConfig+0x64>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d004      	beq.n	8003650 <I2C_TransferConfig+0x64>
 8003646:	f641 3148 	movw	r1, #6984	; 0x1b48
 800364a:	4821      	ldr	r0, [pc, #132]	; (80036d0 <I2C_TransferConfig+0xe4>)
 800364c:	f7fe f91d 	bl	800188a <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	4a20      	ldr	r2, [pc, #128]	; (80036d4 <I2C_TransferConfig+0xe8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00f      	beq.n	8003678 <I2C_TransferConfig+0x8c>
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	4a1f      	ldr	r2, [pc, #124]	; (80036d8 <I2C_TransferConfig+0xec>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00b      	beq.n	8003678 <I2C_TransferConfig+0x8c>
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	4a1e      	ldr	r2, [pc, #120]	; (80036dc <I2C_TransferConfig+0xf0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d007      	beq.n	8003678 <I2C_TransferConfig+0x8c>
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d004      	beq.n	8003678 <I2C_TransferConfig+0x8c>
 800366e:	f641 3149 	movw	r1, #6985	; 0x1b49
 8003672:	4817      	ldr	r0, [pc, #92]	; (80036d0 <I2C_TransferConfig+0xe4>)
 8003674:	f7fe f909 	bl	800188a <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003678:	897b      	ldrh	r3, [r7, #10]
 800367a:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800367e:	7a7b      	ldrb	r3, [r7, #9]
 8003680:	041b      	lsls	r3, r3, #16
 8003682:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003686:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	4313      	orrs	r3, r2
 8003690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003694:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	0d5b      	lsrs	r3, r3, #21
 80036a0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <I2C_TransferConfig+0xf4>)
 80036a6:	430b      	orrs	r3, r1
 80036a8:	43db      	mvns	r3, r3
 80036aa:	ea02 0103 	and.w	r1, r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036b8:	bf00      	nop
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40005400 	.word	0x40005400
 80036c4:	40005800 	.word	0x40005800
 80036c8:	40005c00 	.word	0x40005c00
 80036cc:	40006000 	.word	0x40006000
 80036d0:	08012cb4 	.word	0x08012cb4
 80036d4:	80004000 	.word	0x80004000
 80036d8:	80002400 	.word	0x80002400
 80036dc:	80002000 	.word	0x80002000
 80036e0:	03ff63ff 	.word	0x03ff63ff

080036e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a32      	ldr	r2, [pc, #200]	; (80037bc <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d012      	beq.n	800371e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a30      	ldr	r2, [pc, #192]	; (80037c0 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00d      	beq.n	800371e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a2f      	ldr	r2, [pc, #188]	; (80037c4 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d008      	beq.n	800371e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a2d      	ldr	r2, [pc, #180]	; (80037c8 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d003      	beq.n	800371e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8003716:	215e      	movs	r1, #94	; 0x5e
 8003718:	482c      	ldr	r0, [pc, #176]	; (80037cc <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800371a:	f7fe f8b6 	bl	800188a <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d007      	beq.n	8003734 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372a:	d003      	beq.n	8003734 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800372c:	215f      	movs	r1, #95	; 0x5f
 800372e:	4827      	ldr	r0, [pc, #156]	; (80037cc <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8003730:	f7fe f8ab 	bl	800188a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b20      	cmp	r3, #32
 800373e:	d138      	bne.n	80037b2 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 800374a:	2302      	movs	r3, #2
 800374c:	e032      	b.n	80037b4 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2224      	movs	r2, #36	; 0x24
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800377c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6819      	ldr	r1, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0201 	orr.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e000      	b.n	80037b4 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80037b2:	2302      	movs	r3, #2
  }
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40005400 	.word	0x40005400
 80037c0:	40005800 	.word	0x40005800
 80037c4:	40005c00 	.word	0x40005c00
 80037c8:	40006000 	.word	0x40006000
 80037cc:	08012cec 	.word	0x08012cec

080037d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a31      	ldr	r2, [pc, #196]	; (80038a4 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d012      	beq.n	800380a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a2f      	ldr	r2, [pc, #188]	; (80038a8 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00d      	beq.n	800380a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a2e      	ldr	r2, [pc, #184]	; (80038ac <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d008      	beq.n	800380a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a2c      	ldr	r2, [pc, #176]	; (80038b0 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d003      	beq.n	800380a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003802:	218c      	movs	r1, #140	; 0x8c
 8003804:	482b      	ldr	r0, [pc, #172]	; (80038b4 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8003806:	f7fe f840 	bl	800188a <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b0f      	cmp	r3, #15
 800380e:	d903      	bls.n	8003818 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8003810:	218d      	movs	r1, #141	; 0x8d
 8003812:	4828      	ldr	r0, [pc, #160]	; (80038b4 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8003814:	f7fe f839 	bl	800188a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b20      	cmp	r3, #32
 8003822:	d139      	bne.n	8003898 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 800382e:	2302      	movs	r3, #2
 8003830:	e033      	b.n	800389a <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2224      	movs	r2, #36	; 0x24
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0201 	bic.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003860:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	e000      	b.n	800389a <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003898:	2302      	movs	r3, #2
  }
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40005400 	.word	0x40005400
 80038a8:	40005800 	.word	0x40005800
 80038ac:	40005c00 	.word	0x40005c00
 80038b0:	40006000 	.word	0x40006000
 80038b4:	08012cec 	.word	0x08012cec

080038b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	4b23      	ldr	r3, [pc, #140]	; (8003950 <HAL_PWREx_EnableOverDrive+0x98>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	4a22      	ldr	r2, [pc, #136]	; (8003950 <HAL_PWREx_EnableOverDrive+0x98>)
 80038c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038cc:	6413      	str	r3, [r2, #64]	; 0x40
 80038ce:	4b20      	ldr	r3, [pc, #128]	; (8003950 <HAL_PWREx_EnableOverDrive+0x98>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038da:	4b1e      	ldr	r3, [pc, #120]	; (8003954 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038e6:	f7fe fb65 	bl	8001fb4 <HAL_GetTick>
 80038ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038ec:	e009      	b.n	8003902 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038ee:	f7fe fb61 	bl	8001fb4 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038fc:	d901      	bls.n	8003902 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e022      	b.n	8003948 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003902:	4b14      	ldr	r3, [pc, #80]	; (8003954 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390e:	d1ee      	bne.n	80038ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003910:	4b10      	ldr	r3, [pc, #64]	; (8003954 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a0f      	ldr	r2, [pc, #60]	; (8003954 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800391a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800391c:	f7fe fb4a 	bl	8001fb4 <HAL_GetTick>
 8003920:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003922:	e009      	b.n	8003938 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003924:	f7fe fb46 	bl	8001fb4 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003932:	d901      	bls.n	8003938 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e007      	b.n	8003948 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_PWREx_EnableOverDrive+0x9c>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003944:	d1ee      	bne.n	8003924 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40023800 	.word	0x40023800
 8003954:	40007000 	.word	0x40007000

08003958 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003960:	2300      	movs	r3, #0
 8003962:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e345      	b.n	8003ffa <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b0f      	cmp	r3, #15
 8003974:	d904      	bls.n	8003980 <HAL_RCC_OscConfig+0x28>
 8003976:	f240 1163 	movw	r1, #355	; 0x163
 800397a:	4892      	ldr	r0, [pc, #584]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 800397c:	f7fd ff85 	bl	800188a <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 809a 	beq.w	8003ac2 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00e      	beq.n	80039b4 <HAL_RCC_OscConfig+0x5c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399e:	d009      	beq.n	80039b4 <HAL_RCC_OscConfig+0x5c>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039a8:	d004      	beq.n	80039b4 <HAL_RCC_OscConfig+0x5c>
 80039aa:	f240 1169 	movw	r1, #361	; 0x169
 80039ae:	4885      	ldr	r0, [pc, #532]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	f7fd ff6b 	bl	800188a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039b4:	4b84      	ldr	r3, [pc, #528]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 030c 	and.w	r3, r3, #12
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d00c      	beq.n	80039da <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039c0:	4b81      	ldr	r3, [pc, #516]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 030c 	and.w	r3, r3, #12
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d112      	bne.n	80039f2 <HAL_RCC_OscConfig+0x9a>
 80039cc:	4b7e      	ldr	r3, [pc, #504]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d8:	d10b      	bne.n	80039f2 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039da:	4b7b      	ldr	r3, [pc, #492]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d06c      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x168>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d168      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e303      	b.n	8003ffa <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039fa:	d106      	bne.n	8003a0a <HAL_RCC_OscConfig+0xb2>
 80039fc:	4b72      	ldr	r3, [pc, #456]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a71      	ldr	r2, [pc, #452]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	e02e      	b.n	8003a68 <HAL_RCC_OscConfig+0x110>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCC_OscConfig+0xd4>
 8003a12:	4b6d      	ldr	r3, [pc, #436]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a6c      	ldr	r2, [pc, #432]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4b6a      	ldr	r3, [pc, #424]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a69      	ldr	r2, [pc, #420]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e01d      	b.n	8003a68 <HAL_RCC_OscConfig+0x110>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0xf8>
 8003a36:	4b64      	ldr	r3, [pc, #400]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a63      	ldr	r2, [pc, #396]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4b61      	ldr	r3, [pc, #388]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a60      	ldr	r2, [pc, #384]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e00b      	b.n	8003a68 <HAL_RCC_OscConfig+0x110>
 8003a50:	4b5d      	ldr	r3, [pc, #372]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a5c      	ldr	r2, [pc, #368]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b5a      	ldr	r3, [pc, #360]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a59      	ldr	r2, [pc, #356]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fe faa0 	bl	8001fb4 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a78:	f7fe fa9c 	bl	8001fb4 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e2b7      	b.n	8003ffa <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	4b4f      	ldr	r3, [pc, #316]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x120>
 8003a96:	e014      	b.n	8003ac2 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fe fa8c 	bl	8001fb4 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7fe fa88 	bl	8001fb4 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	; 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e2a3      	b.n	8003ffa <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab2:	4b45      	ldr	r3, [pc, #276]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x148>
 8003abe:	e000      	b.n	8003ac2 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 8084 	beq.w	8003bd8 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_RCC_OscConfig+0x192>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d004      	beq.n	8003aea <HAL_RCC_OscConfig+0x192>
 8003ae0:	f240 119b 	movw	r1, #411	; 0x19b
 8003ae4:	4837      	ldr	r0, [pc, #220]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003ae6:	f7fd fed0 	bl	800188a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b1f      	cmp	r3, #31
 8003af0:	d904      	bls.n	8003afc <HAL_RCC_OscConfig+0x1a4>
 8003af2:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003af6:	4833      	ldr	r0, [pc, #204]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003af8:	f7fd fec7 	bl	800188a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003afc:	4b32      	ldr	r3, [pc, #200]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 030c 	and.w	r3, r3, #12
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00b      	beq.n	8003b20 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b08:	4b2f      	ldr	r3, [pc, #188]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 030c 	and.w	r3, r3, #12
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d11c      	bne.n	8003b4e <HAL_RCC_OscConfig+0x1f6>
 8003b14:	4b2c      	ldr	r3, [pc, #176]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d116      	bne.n	8003b4e <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b20:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_OscConfig+0x1e0>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e260      	b.n	8003ffa <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b38:	4b23      	ldr	r3, [pc, #140]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4920      	ldr	r1, [pc, #128]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4c:	e044      	b.n	8003bd8 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d023      	beq.n	8003b9e <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b56:	4b1c      	ldr	r3, [pc, #112]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1b      	ldr	r2, [pc, #108]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fe fa27 	bl	8001fb4 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6a:	f7fe fa23 	bl	8001fb4 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e23e      	b.n	8003ffa <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7c:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	490c      	ldr	r1, [pc, #48]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]
 8003b9c:	e01c      	b.n	8003bd8 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b9e:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a09      	ldr	r2, [pc, #36]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fe fa03 	bl	8001fb4 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb0:	e00c      	b.n	8003bcc <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb2:	f7fe f9ff 	bl	8001fb4 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d905      	bls.n	8003bcc <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e21a      	b.n	8003ffa <HAL_RCC_OscConfig+0x6a2>
 8003bc4:	08012d28 	.word	0x08012d28
 8003bc8:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bcc:	4b7e      	ldr	r3, [pc, #504]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1ec      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d043      	beq.n	8003c6c <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_RCC_OscConfig+0x2a6>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d004      	beq.n	8003bfe <HAL_RCC_OscConfig+0x2a6>
 8003bf4:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8003bf8:	4874      	ldr	r0, [pc, #464]	; (8003dcc <HAL_RCC_OscConfig+0x474>)
 8003bfa:	f7fd fe46 	bl	800188a <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d019      	beq.n	8003c3a <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c06:	4b70      	ldr	r3, [pc, #448]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0a:	4a6f      	ldr	r2, [pc, #444]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c12:	f7fe f9cf 	bl	8001fb4 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c1a:	f7fe f9cb 	bl	8001fb4 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e1e6      	b.n	8003ffa <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2c:	4b66      	ldr	r3, [pc, #408]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x2c2>
 8003c38:	e018      	b.n	8003c6c <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c3a:	4b63      	ldr	r3, [pc, #396]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3e:	4a62      	ldr	r2, [pc, #392]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003c40:	f023 0301 	bic.w	r3, r3, #1
 8003c44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c46:	f7fe f9b5 	bl	8001fb4 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c4e:	f7fe f9b1 	bl	8001fb4 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e1cc      	b.n	8003ffa <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c60:	4b59      	ldr	r3, [pc, #356]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f0      	bne.n	8003c4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80bc 	beq.w	8003df2 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00c      	beq.n	8003c9c <HAL_RCC_OscConfig+0x344>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d008      	beq.n	8003c9c <HAL_RCC_OscConfig+0x344>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d004      	beq.n	8003c9c <HAL_RCC_OscConfig+0x344>
 8003c92:	f240 2106 	movw	r1, #518	; 0x206
 8003c96:	484d      	ldr	r0, [pc, #308]	; (8003dcc <HAL_RCC_OscConfig+0x474>)
 8003c98:	f7fd fdf7 	bl	800188a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9c:	4b4a      	ldr	r3, [pc, #296]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10d      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca8:	4b47      	ldr	r3, [pc, #284]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	4a46      	ldr	r2, [pc, #280]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb4:	4b44      	ldr	r3, [pc, #272]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc4:	4b42      	ldr	r3, [pc, #264]	; (8003dd0 <HAL_RCC_OscConfig+0x478>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d118      	bne.n	8003d02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cd0:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <HAL_RCC_OscConfig+0x478>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a3e      	ldr	r2, [pc, #248]	; (8003dd0 <HAL_RCC_OscConfig+0x478>)
 8003cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cdc:	f7fe f96a 	bl	8001fb4 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce4:	f7fe f966 	bl	8001fb4 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	; 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e181      	b.n	8003ffa <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf6:	4b36      	ldr	r3, [pc, #216]	; (8003dd0 <HAL_RCC_OscConfig+0x478>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d106      	bne.n	8003d18 <HAL_RCC_OscConfig+0x3c0>
 8003d0a:	4b2f      	ldr	r3, [pc, #188]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	4a2e      	ldr	r2, [pc, #184]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	6713      	str	r3, [r2, #112]	; 0x70
 8003d16:	e02d      	b.n	8003d74 <HAL_RCC_OscConfig+0x41c>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10c      	bne.n	8003d3a <HAL_RCC_OscConfig+0x3e2>
 8003d20:	4b29      	ldr	r3, [pc, #164]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	4a28      	ldr	r2, [pc, #160]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2c:	4b26      	ldr	r3, [pc, #152]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	4a25      	ldr	r2, [pc, #148]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d32:	f023 0304 	bic.w	r3, r3, #4
 8003d36:	6713      	str	r3, [r2, #112]	; 0x70
 8003d38:	e01c      	b.n	8003d74 <HAL_RCC_OscConfig+0x41c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b05      	cmp	r3, #5
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x404>
 8003d42:	4b21      	ldr	r3, [pc, #132]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	4a20      	ldr	r2, [pc, #128]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d48:	f043 0304 	orr.w	r3, r3, #4
 8003d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4e:	4b1e      	ldr	r3, [pc, #120]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5a:	e00b      	b.n	8003d74 <HAL_RCC_OscConfig+0x41c>
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d62:	f023 0301 	bic.w	r3, r3, #1
 8003d66:	6713      	str	r3, [r2, #112]	; 0x70
 8003d68:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	4a16      	ldr	r2, [pc, #88]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d6e:	f023 0304 	bic.w	r3, r3, #4
 8003d72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d015      	beq.n	8003da8 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7c:	f7fe f91a 	bl	8001fb4 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d82:	e00a      	b.n	8003d9a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d84:	f7fe f916 	bl	8001fb4 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e12f      	b.n	8003ffa <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0ee      	beq.n	8003d84 <HAL_RCC_OscConfig+0x42c>
 8003da6:	e01b      	b.n	8003de0 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da8:	f7fe f904 	bl	8001fb4 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dae:	e011      	b.n	8003dd4 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db0:	f7fe f900 	bl	8001fb4 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d908      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e119      	b.n	8003ffa <HAL_RCC_OscConfig+0x6a2>
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	08012d28 	.word	0x08012d28
 8003dd0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd4:	4b8b      	ldr	r3, [pc, #556]	; (8004004 <HAL_RCC_OscConfig+0x6ac>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e7      	bne.n	8003db0 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003de0:	7dfb      	ldrb	r3, [r7, #23]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d105      	bne.n	8003df2 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de6:	4b87      	ldr	r3, [pc, #540]	; (8004004 <HAL_RCC_OscConfig+0x6ac>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	4a86      	ldr	r2, [pc, #536]	; (8004004 <HAL_RCC_OscConfig+0x6ac>)
 8003dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00c      	beq.n	8003e14 <HAL_RCC_OscConfig+0x4bc>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d008      	beq.n	8003e14 <HAL_RCC_OscConfig+0x4bc>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d004      	beq.n	8003e14 <HAL_RCC_OscConfig+0x4bc>
 8003e0a:	f240 214a 	movw	r1, #586	; 0x24a
 8003e0e:	487e      	ldr	r0, [pc, #504]	; (8004008 <HAL_RCC_OscConfig+0x6b0>)
 8003e10:	f7fd fd3b 	bl	800188a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80ed 	beq.w	8003ff8 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e1e:	4b79      	ldr	r3, [pc, #484]	; (8004004 <HAL_RCC_OscConfig+0x6ac>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	f000 80b4 	beq.w	8003f94 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	f040 8095 	bne.w	8003f60 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d009      	beq.n	8003e52 <HAL_RCC_OscConfig+0x4fa>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e46:	d004      	beq.n	8003e52 <HAL_RCC_OscConfig+0x4fa>
 8003e48:	f240 2153 	movw	r1, #595	; 0x253
 8003e4c:	486e      	ldr	r0, [pc, #440]	; (8004008 <HAL_RCC_OscConfig+0x6b0>)
 8003e4e:	f7fd fd1c 	bl	800188a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d903      	bls.n	8003e62 <HAL_RCC_OscConfig+0x50a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	2b3f      	cmp	r3, #63	; 0x3f
 8003e60:	d904      	bls.n	8003e6c <HAL_RCC_OscConfig+0x514>
 8003e62:	f44f 7115 	mov.w	r1, #596	; 0x254
 8003e66:	4868      	ldr	r0, [pc, #416]	; (8004008 <HAL_RCC_OscConfig+0x6b0>)
 8003e68:	f7fd fd0f 	bl	800188a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	2b31      	cmp	r3, #49	; 0x31
 8003e72:	d904      	bls.n	8003e7e <HAL_RCC_OscConfig+0x526>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003e7c:	d904      	bls.n	8003e88 <HAL_RCC_OscConfig+0x530>
 8003e7e:	f240 2155 	movw	r1, #597	; 0x255
 8003e82:	4861      	ldr	r0, [pc, #388]	; (8004008 <HAL_RCC_OscConfig+0x6b0>)
 8003e84:	f7fd fd01 	bl	800188a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d010      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x55a>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d00c      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x55a>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	2b06      	cmp	r3, #6
 8003e9e:	d008      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x55a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d004      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x55a>
 8003ea8:	f240 2156 	movw	r1, #598	; 0x256
 8003eac:	4856      	ldr	r0, [pc, #344]	; (8004008 <HAL_RCC_OscConfig+0x6b0>)
 8003eae:	f7fd fcec 	bl	800188a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d903      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x56a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	2b0f      	cmp	r3, #15
 8003ec0:	d904      	bls.n	8003ecc <HAL_RCC_OscConfig+0x574>
 8003ec2:	f240 2157 	movw	r1, #599	; 0x257
 8003ec6:	4850      	ldr	r0, [pc, #320]	; (8004008 <HAL_RCC_OscConfig+0x6b0>)
 8003ec8:	f7fd fcdf 	bl	800188a <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ecc:	4b4d      	ldr	r3, [pc, #308]	; (8004004 <HAL_RCC_OscConfig+0x6ac>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a4c      	ldr	r2, [pc, #304]	; (8004004 <HAL_RCC_OscConfig+0x6ac>)
 8003ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fe f86c 	bl	8001fb4 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7fe f868 	bl	8001fb4 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e083      	b.n	8003ffa <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef2:	4b44      	ldr	r3, [pc, #272]	; (8004004 <HAL_RCC_OscConfig+0x6ac>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69da      	ldr	r2, [r3, #28]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	019b      	lsls	r3, r3, #6
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	085b      	lsrs	r3, r3, #1
 8003f16:	3b01      	subs	r3, #1
 8003f18:	041b      	lsls	r3, r3, #16
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	061b      	lsls	r3, r3, #24
 8003f22:	4313      	orrs	r3, r2
 8003f24:	4a37      	ldr	r2, [pc, #220]	; (8004004 <HAL_RCC_OscConfig+0x6ac>)
 8003f26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f2a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f2c:	4b35      	ldr	r3, [pc, #212]	; (8004004 <HAL_RCC_OscConfig+0x6ac>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a34      	ldr	r2, [pc, #208]	; (8004004 <HAL_RCC_OscConfig+0x6ac>)
 8003f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fe f83c 	bl	8001fb4 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f40:	f7fe f838 	bl	8001fb4 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e053      	b.n	8003ffa <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f52:	4b2c      	ldr	r3, [pc, #176]	; (8004004 <HAL_RCC_OscConfig+0x6ac>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0x5e8>
 8003f5e:	e04b      	b.n	8003ff8 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f60:	4b28      	ldr	r3, [pc, #160]	; (8004004 <HAL_RCC_OscConfig+0x6ac>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a27      	ldr	r2, [pc, #156]	; (8004004 <HAL_RCC_OscConfig+0x6ac>)
 8003f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fe f822 	bl	8001fb4 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f74:	f7fe f81e 	bl	8001fb4 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e039      	b.n	8003ffa <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f86:	4b1f      	ldr	r3, [pc, #124]	; (8004004 <HAL_RCC_OscConfig+0x6ac>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x61c>
 8003f92:	e031      	b.n	8003ff8 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f94:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <HAL_RCC_OscConfig+0x6ac>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d028      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d121      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d11a      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d111      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	085b      	lsrs	r3, r3, #1
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d107      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e000      	b.n	8003ffa <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40023800 	.word	0x40023800
 8004008:	08012d28 	.word	0x08012d28

0800400c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e18c      	b.n	800433e <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_RCC_ClockConfig+0x28>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b0f      	cmp	r3, #15
 8004032:	d904      	bls.n	800403e <HAL_RCC_ClockConfig+0x32>
 8004034:	f240 21dd 	movw	r1, #733	; 0x2dd
 8004038:	4887      	ldr	r0, [pc, #540]	; (8004258 <HAL_RCC_ClockConfig+0x24c>)
 800403a:	f7fd fc26 	bl	800188a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d031      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x9c>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d02e      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x9c>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d02b      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x9c>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b03      	cmp	r3, #3
 8004054:	d028      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x9c>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b04      	cmp	r3, #4
 800405a:	d025      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x9c>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2b05      	cmp	r3, #5
 8004060:	d022      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x9c>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b06      	cmp	r3, #6
 8004066:	d01f      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x9c>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b07      	cmp	r3, #7
 800406c:	d01c      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x9c>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d019      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x9c>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b09      	cmp	r3, #9
 8004078:	d016      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x9c>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b0a      	cmp	r3, #10
 800407e:	d013      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x9c>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b0b      	cmp	r3, #11
 8004084:	d010      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x9c>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b0c      	cmp	r3, #12
 800408a:	d00d      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x9c>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	2b0d      	cmp	r3, #13
 8004090:	d00a      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x9c>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b0e      	cmp	r3, #14
 8004096:	d007      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x9c>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2b0f      	cmp	r3, #15
 800409c:	d004      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x9c>
 800409e:	f240 21de 	movw	r1, #734	; 0x2de
 80040a2:	486d      	ldr	r0, [pc, #436]	; (8004258 <HAL_RCC_ClockConfig+0x24c>)
 80040a4:	f7fd fbf1 	bl	800188a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040a8:	4b6c      	ldr	r3, [pc, #432]	; (800425c <HAL_RCC_ClockConfig+0x250>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d910      	bls.n	80040d8 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b69      	ldr	r3, [pc, #420]	; (800425c <HAL_RCC_ClockConfig+0x250>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 020f 	bic.w	r2, r3, #15
 80040be:	4967      	ldr	r1, [pc, #412]	; (800425c <HAL_RCC_ClockConfig+0x250>)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b65      	ldr	r3, [pc, #404]	; (800425c <HAL_RCC_ClockConfig+0x250>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e132      	b.n	800433e <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d049      	beq.n	8004178 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f0:	4b5b      	ldr	r3, [pc, #364]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a5a      	ldr	r2, [pc, #360]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 80040f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004108:	4b55      	ldr	r3, [pc, #340]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	4a54      	ldr	r2, [pc, #336]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 800410e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004112:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d024      	beq.n	8004166 <HAL_RCC_ClockConfig+0x15a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	2b80      	cmp	r3, #128	; 0x80
 8004122:	d020      	beq.n	8004166 <HAL_RCC_ClockConfig+0x15a>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b90      	cmp	r3, #144	; 0x90
 800412a:	d01c      	beq.n	8004166 <HAL_RCC_ClockConfig+0x15a>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2ba0      	cmp	r3, #160	; 0xa0
 8004132:	d018      	beq.n	8004166 <HAL_RCC_ClockConfig+0x15a>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2bb0      	cmp	r3, #176	; 0xb0
 800413a:	d014      	beq.n	8004166 <HAL_RCC_ClockConfig+0x15a>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2bc0      	cmp	r3, #192	; 0xc0
 8004142:	d010      	beq.n	8004166 <HAL_RCC_ClockConfig+0x15a>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2bd0      	cmp	r3, #208	; 0xd0
 800414a:	d00c      	beq.n	8004166 <HAL_RCC_ClockConfig+0x15a>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2be0      	cmp	r3, #224	; 0xe0
 8004152:	d008      	beq.n	8004166 <HAL_RCC_ClockConfig+0x15a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2bf0      	cmp	r3, #240	; 0xf0
 800415a:	d004      	beq.n	8004166 <HAL_RCC_ClockConfig+0x15a>
 800415c:	f240 3102 	movw	r1, #770	; 0x302
 8004160:	483d      	ldr	r0, [pc, #244]	; (8004258 <HAL_RCC_ClockConfig+0x24c>)
 8004162:	f7fd fb92 	bl	800188a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004166:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	493b      	ldr	r1, [pc, #236]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 8004174:	4313      	orrs	r3, r2
 8004176:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d051      	beq.n	8004228 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00c      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x19a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d008      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x19a>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2b02      	cmp	r3, #2
 800419a:	d004      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x19a>
 800419c:	f240 3109 	movw	r1, #777	; 0x309
 80041a0:	482d      	ldr	r0, [pc, #180]	; (8004258 <HAL_RCC_ClockConfig+0x24c>)
 80041a2:	f7fd fb72 	bl	800188a <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d107      	bne.n	80041be <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ae:	4b2c      	ldr	r3, [pc, #176]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d115      	bne.n	80041e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e0bf      	b.n	800433e <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c6:	4b26      	ldr	r3, [pc, #152]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e0b3      	b.n	800433e <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d6:	4b22      	ldr	r3, [pc, #136]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e0ab      	b.n	800433e <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041e6:	4b1e      	ldr	r3, [pc, #120]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f023 0203 	bic.w	r2, r3, #3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	491b      	ldr	r1, [pc, #108]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f8:	f7fd fedc 	bl	8001fb4 <HAL_GetTick>
 80041fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fe:	e00a      	b.n	8004216 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004200:	f7fd fed8 	bl	8001fb4 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f241 3288 	movw	r2, #5000	; 0x1388
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e093      	b.n	800433e <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	4b12      	ldr	r3, [pc, #72]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 020c 	and.w	r2, r3, #12
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	429a      	cmp	r2, r3
 8004226:	d1eb      	bne.n	8004200 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004228:	4b0c      	ldr	r3, [pc, #48]	; (800425c <HAL_RCC_ClockConfig+0x250>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d216      	bcs.n	8004264 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004236:	4b09      	ldr	r3, [pc, #36]	; (800425c <HAL_RCC_ClockConfig+0x250>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f023 020f 	bic.w	r2, r3, #15
 800423e:	4907      	ldr	r1, [pc, #28]	; (800425c <HAL_RCC_ClockConfig+0x250>)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	4313      	orrs	r3, r2
 8004244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004246:	4b05      	ldr	r3, [pc, #20]	; (800425c <HAL_RCC_ClockConfig+0x250>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d007      	beq.n	8004264 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e072      	b.n	800433e <HAL_RCC_ClockConfig+0x332>
 8004258:	08012d28 	.word	0x08012d28
 800425c:	40023c00 	.word	0x40023c00
 8004260:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d025      	beq.n	80042bc <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d018      	beq.n	80042aa <HAL_RCC_ClockConfig+0x29e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004280:	d013      	beq.n	80042aa <HAL_RCC_ClockConfig+0x29e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800428a:	d00e      	beq.n	80042aa <HAL_RCC_ClockConfig+0x29e>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004294:	d009      	beq.n	80042aa <HAL_RCC_ClockConfig+0x29e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800429e:	d004      	beq.n	80042aa <HAL_RCC_ClockConfig+0x29e>
 80042a0:	f240 3146 	movw	r1, #838	; 0x346
 80042a4:	4828      	ldr	r0, [pc, #160]	; (8004348 <HAL_RCC_ClockConfig+0x33c>)
 80042a6:	f7fd faf0 	bl	800188a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042aa:	4b28      	ldr	r3, [pc, #160]	; (800434c <HAL_RCC_ClockConfig+0x340>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	4925      	ldr	r1, [pc, #148]	; (800434c <HAL_RCC_ClockConfig+0x340>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d026      	beq.n	8004316 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d018      	beq.n	8004302 <HAL_RCC_ClockConfig+0x2f6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d8:	d013      	beq.n	8004302 <HAL_RCC_ClockConfig+0x2f6>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042e2:	d00e      	beq.n	8004302 <HAL_RCC_ClockConfig+0x2f6>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80042ec:	d009      	beq.n	8004302 <HAL_RCC_ClockConfig+0x2f6>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80042f6:	d004      	beq.n	8004302 <HAL_RCC_ClockConfig+0x2f6>
 80042f8:	f240 314d 	movw	r1, #845	; 0x34d
 80042fc:	4812      	ldr	r0, [pc, #72]	; (8004348 <HAL_RCC_ClockConfig+0x33c>)
 80042fe:	f7fd fac4 	bl	800188a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004302:	4b12      	ldr	r3, [pc, #72]	; (800434c <HAL_RCC_ClockConfig+0x340>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	490e      	ldr	r1, [pc, #56]	; (800434c <HAL_RCC_ClockConfig+0x340>)
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004316:	f000 f821 	bl	800435c <HAL_RCC_GetSysClockFreq>
 800431a:	4602      	mov	r2, r0
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <HAL_RCC_ClockConfig+0x340>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	490a      	ldr	r1, [pc, #40]	; (8004350 <HAL_RCC_ClockConfig+0x344>)
 8004328:	5ccb      	ldrb	r3, [r1, r3]
 800432a:	fa22 f303 	lsr.w	r3, r2, r3
 800432e:	4a09      	ldr	r2, [pc, #36]	; (8004354 <HAL_RCC_ClockConfig+0x348>)
 8004330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <HAL_RCC_ClockConfig+0x34c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fd fdf8 	bl	8001f2c <HAL_InitTick>

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	08012d28 	.word	0x08012d28
 800434c:	40023800 	.word	0x40023800
 8004350:	08012e4c 	.word	0x08012e4c
 8004354:	20000000 	.word	0x20000000
 8004358:	20000004 	.word	0x20000004

0800435c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800435c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004360:	b090      	sub	sp, #64	; 0x40
 8004362:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	637b      	str	r3, [r7, #52]	; 0x34
 8004368:	2300      	movs	r3, #0
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800436c:	2300      	movs	r3, #0
 800436e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004374:	4b59      	ldr	r3, [pc, #356]	; (80044dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 030c 	and.w	r3, r3, #12
 800437c:	2b08      	cmp	r3, #8
 800437e:	d00d      	beq.n	800439c <HAL_RCC_GetSysClockFreq+0x40>
 8004380:	2b08      	cmp	r3, #8
 8004382:	f200 80a1 	bhi.w	80044c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0x34>
 800438a:	2b04      	cmp	r3, #4
 800438c:	d003      	beq.n	8004396 <HAL_RCC_GetSysClockFreq+0x3a>
 800438e:	e09b      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004390:	4b53      	ldr	r3, [pc, #332]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004392:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004394:	e09b      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004396:	4b53      	ldr	r3, [pc, #332]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004398:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800439a:	e098      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800439c:	4b4f      	ldr	r3, [pc, #316]	; (80044dc <HAL_RCC_GetSysClockFreq+0x180>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043a6:	4b4d      	ldr	r3, [pc, #308]	; (80044dc <HAL_RCC_GetSysClockFreq+0x180>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d028      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b2:	4b4a      	ldr	r3, [pc, #296]	; (80044dc <HAL_RCC_GetSysClockFreq+0x180>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	2200      	movs	r2, #0
 80043ba:	623b      	str	r3, [r7, #32]
 80043bc:	627a      	str	r2, [r7, #36]	; 0x24
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043c4:	2100      	movs	r1, #0
 80043c6:	4b47      	ldr	r3, [pc, #284]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80043c8:	fb03 f201 	mul.w	r2, r3, r1
 80043cc:	2300      	movs	r3, #0
 80043ce:	fb00 f303 	mul.w	r3, r0, r3
 80043d2:	4413      	add	r3, r2
 80043d4:	4a43      	ldr	r2, [pc, #268]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80043d6:	fba0 1202 	umull	r1, r2, r0, r2
 80043da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043dc:	460a      	mov	r2, r1
 80043de:	62ba      	str	r2, [r7, #40]	; 0x28
 80043e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043e2:	4413      	add	r3, r2
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e8:	2200      	movs	r2, #0
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	61fa      	str	r2, [r7, #28]
 80043ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043f6:	f7fc fc77 	bl	8000ce8 <__aeabi_uldivmod>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4613      	mov	r3, r2
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004402:	e053      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004404:	4b35      	ldr	r3, [pc, #212]	; (80044dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	099b      	lsrs	r3, r3, #6
 800440a:	2200      	movs	r2, #0
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	617a      	str	r2, [r7, #20]
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004416:	f04f 0b00 	mov.w	fp, #0
 800441a:	4652      	mov	r2, sl
 800441c:	465b      	mov	r3, fp
 800441e:	f04f 0000 	mov.w	r0, #0
 8004422:	f04f 0100 	mov.w	r1, #0
 8004426:	0159      	lsls	r1, r3, #5
 8004428:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800442c:	0150      	lsls	r0, r2, #5
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	ebb2 080a 	subs.w	r8, r2, sl
 8004436:	eb63 090b 	sbc.w	r9, r3, fp
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004446:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800444a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800444e:	ebb2 0408 	subs.w	r4, r2, r8
 8004452:	eb63 0509 	sbc.w	r5, r3, r9
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	00eb      	lsls	r3, r5, #3
 8004460:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004464:	00e2      	lsls	r2, r4, #3
 8004466:	4614      	mov	r4, r2
 8004468:	461d      	mov	r5, r3
 800446a:	eb14 030a 	adds.w	r3, r4, sl
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	eb45 030b 	adc.w	r3, r5, fp
 8004474:	607b      	str	r3, [r7, #4]
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004482:	4629      	mov	r1, r5
 8004484:	028b      	lsls	r3, r1, #10
 8004486:	4621      	mov	r1, r4
 8004488:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800448c:	4621      	mov	r1, r4
 800448e:	028a      	lsls	r2, r1, #10
 8004490:	4610      	mov	r0, r2
 8004492:	4619      	mov	r1, r3
 8004494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004496:	2200      	movs	r2, #0
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	60fa      	str	r2, [r7, #12]
 800449c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044a0:	f7fc fc22 	bl	8000ce8 <__aeabi_uldivmod>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4613      	mov	r3, r2
 80044aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_RCC_GetSysClockFreq+0x180>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	0c1b      	lsrs	r3, r3, #16
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	3301      	adds	r3, #1
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80044bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044c6:	e002      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044c8:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80044ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3740      	adds	r7, #64	; 0x40
 80044d4:	46bd      	mov	sp, r7
 80044d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044da:	bf00      	nop
 80044dc:	40023800 	.word	0x40023800
 80044e0:	00f42400 	.word	0x00f42400
 80044e4:	017d7840 	.word	0x017d7840

080044e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044ec:	4b03      	ldr	r3, [pc, #12]	; (80044fc <HAL_RCC_GetHCLKFreq+0x14>)
 80044ee:	681b      	ldr	r3, [r3, #0]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	20000000 	.word	0x20000000

08004500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004504:	f7ff fff0 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 8004508:	4602      	mov	r2, r0
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <HAL_RCC_GetPCLK1Freq+0x20>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	0a9b      	lsrs	r3, r3, #10
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	4903      	ldr	r1, [pc, #12]	; (8004524 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004516:	5ccb      	ldrb	r3, [r1, r3]
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40023800 	.word	0x40023800
 8004524:	08012e5c 	.word	0x08012e5c

08004528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800452c:	f7ff ffdc 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 8004530:	4602      	mov	r2, r0
 8004532:	4b05      	ldr	r3, [pc, #20]	; (8004548 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	0b5b      	lsrs	r3, r3, #13
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	4903      	ldr	r1, [pc, #12]	; (800454c <HAL_RCC_GetPCLK2Freq+0x24>)
 800453e:	5ccb      	ldrb	r3, [r1, r3]
 8004540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004544:	4618      	mov	r0, r3
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40023800 	.word	0x40023800
 800454c:	08012e5c 	.word	0x08012e5c

08004550 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	f040 8089 	bne.w	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	f040 8082 	bne.w	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b00      	cmp	r3, #0
 8004592:	d17b      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	d175      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d16f      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d169      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d163      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d15d      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d157      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d151      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d14b      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d145      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d13f      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d139      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d133      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d12d      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d127      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d121      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d11b      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d115      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10f      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d109      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b00      	cmp	r3, #0
 8004682:	d103      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004684:	2172      	movs	r1, #114	; 0x72
 8004686:	4895      	ldr	r0, [pc, #596]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004688:	f7fd f8ff 	bl	800188a <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01f      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046a8:	d003      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80046aa:	2178      	movs	r1, #120	; 0x78
 80046ac:	488b      	ldr	r0, [pc, #556]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80046ae:	f7fd f8ec 	bl	800188a <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046b2:	4b8b      	ldr	r3, [pc, #556]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	4a8a      	ldr	r2, [pc, #552]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80046b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046bc:	6093      	str	r3, [r2, #8]
 80046be:	4b88      	ldr	r3, [pc, #544]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c6:	4986      	ldr	r1, [pc, #536]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 80046d4:	2301      	movs	r3, #1
 80046d6:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d029      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00d      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046f4:	d008      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046fe:	d003      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004700:	2188      	movs	r1, #136	; 0x88
 8004702:	4876      	ldr	r0, [pc, #472]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004704:	f7fd f8c1 	bl	800188a <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004708:	4b75      	ldr	r3, [pc, #468]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800470a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800470e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004716:	4972      	ldr	r1, [pc, #456]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004726:	d101      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8004728:	2301      	movs	r3, #1
 800472a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8004734:	2301      	movs	r3, #1
 8004736:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d029      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00d      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004754:	d008      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800475e:	d003      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004760:	219c      	movs	r1, #156	; 0x9c
 8004762:	485e      	ldr	r0, [pc, #376]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004764:	f7fd f891 	bl	800188a <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004768:	4b5d      	ldr	r3, [pc, #372]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800476a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800476e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	495a      	ldr	r1, [pc, #360]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004786:	d101      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8004788:	2301      	movs	r3, #1
 800478a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8004794:	2301      	movs	r3, #1
 8004796:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 80047a4:	2301      	movs	r3, #1
 80047a6:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8186 	beq.w	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047be:	f000 80e4 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ca:	f000 80de 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	4a44      	ldr	r2, [pc, #272]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	f000 80d8 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	4a42      	ldr	r2, [pc, #264]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	f000 80d2 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	4a40      	ldr	r2, [pc, #256]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	f000 80cc 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	4a3e      	ldr	r2, [pc, #248]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	f000 80c6 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	4a3c      	ldr	r2, [pc, #240]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	f000 80c0 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	4a3a      	ldr	r2, [pc, #232]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	f000 80ba 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	4a38      	ldr	r2, [pc, #224]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800481c:	4293      	cmp	r3, r2
 800481e:	f000 80b4 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	4a36      	ldr	r2, [pc, #216]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	f000 80ae 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	4a34      	ldr	r2, [pc, #208]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	f000 80a8 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	4a32      	ldr	r2, [pc, #200]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	f000 80a2 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	4a30      	ldr	r2, [pc, #192]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800484c:	4293      	cmp	r3, r2
 800484e:	f000 809c 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	4a2e      	ldr	r2, [pc, #184]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	f000 8096 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	4a2c      	ldr	r2, [pc, #176]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	f000 8090 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	4a2a      	ldr	r2, [pc, #168]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	f000 808a 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	4a28      	ldr	r2, [pc, #160]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	f000 8084 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	4a26      	ldr	r2, [pc, #152]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d07e      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	4a24      	ldr	r2, [pc, #144]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d079      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	4a23      	ldr	r2, [pc, #140]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d074      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	4a21      	ldr	r2, [pc, #132]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d06f      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	4a20      	ldr	r2, [pc, #128]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d06a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	4a1e      	ldr	r2, [pc, #120]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d065      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d060      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	4a1b      	ldr	r2, [pc, #108]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d05b      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	4a1a      	ldr	r2, [pc, #104]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	e033      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80048dc:	08012d60 	.word	0x08012d60
 80048e0:	40023800 	.word	0x40023800
 80048e4:	00020300 	.word	0x00020300
 80048e8:	00030300 	.word	0x00030300
 80048ec:	00040300 	.word	0x00040300
 80048f0:	00050300 	.word	0x00050300
 80048f4:	00060300 	.word	0x00060300
 80048f8:	00070300 	.word	0x00070300
 80048fc:	00080300 	.word	0x00080300
 8004900:	00090300 	.word	0x00090300
 8004904:	000a0300 	.word	0x000a0300
 8004908:	000b0300 	.word	0x000b0300
 800490c:	000c0300 	.word	0x000c0300
 8004910:	000d0300 	.word	0x000d0300
 8004914:	000e0300 	.word	0x000e0300
 8004918:	000f0300 	.word	0x000f0300
 800491c:	00100300 	.word	0x00100300
 8004920:	00110300 	.word	0x00110300
 8004924:	00120300 	.word	0x00120300
 8004928:	00130300 	.word	0x00130300
 800492c:	00140300 	.word	0x00140300
 8004930:	00150300 	.word	0x00150300
 8004934:	00160300 	.word	0x00160300
 8004938:	00170300 	.word	0x00170300
 800493c:	00180300 	.word	0x00180300
 8004940:	00190300 	.word	0x00190300
 8004944:	d021      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	4a4c      	ldr	r2, [pc, #304]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d01c      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004954:	4a4a      	ldr	r2, [pc, #296]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d017      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	4a49      	ldr	r2, [pc, #292]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d012      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	4a47      	ldr	r2, [pc, #284]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00d      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	4a46      	ldr	r2, [pc, #280]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d008      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497c:	4a44      	ldr	r2, [pc, #272]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d003      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004982:	21b7      	movs	r1, #183	; 0xb7
 8004984:	4843      	ldr	r0, [pc, #268]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8004986:	f7fc ff80 	bl	800188a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800498a:	4b43      	ldr	r3, [pc, #268]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	4a42      	ldr	r2, [pc, #264]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004994:	6413      	str	r3, [r2, #64]	; 0x40
 8004996:	4b40      	ldr	r3, [pc, #256]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80049a2:	4b3e      	ldr	r3, [pc, #248]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a3d      	ldr	r2, [pc, #244]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80049a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ae:	f7fd fb01 	bl	8001fb4 <HAL_GetTick>
 80049b2:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80049b4:	e009      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b6:	f7fd fafd 	bl	8001fb4 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b64      	cmp	r3, #100	; 0x64
 80049c2:	d902      	bls.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	f000 bd9f 	b.w	8005508 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80049ca:	4b34      	ldr	r3, [pc, #208]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0ef      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049d6:	4b30      	ldr	r3, [pc, #192]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d036      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d02f      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049f4:	4b28      	ldr	r3, [pc, #160]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049fe:	4b26      	ldr	r3, [pc, #152]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	4a25      	ldr	r2, [pc, #148]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a08:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a0a:	4b23      	ldr	r3, [pc, #140]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	4a22      	ldr	r2, [pc, #136]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004a16:	4a20      	ldr	r2, [pc, #128]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a1c:	4b1e      	ldr	r3, [pc, #120]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d115      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a28:	f7fd fac4 	bl	8001fb4 <HAL_GetTick>
 8004a2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2e:	e00b      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a30:	f7fd fac0 	bl	8001fb4 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d902      	bls.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	f000 bd60 	b.w	8005508 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a48:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0ed      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a60:	d120      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004a70:	400b      	ands	r3, r1
 8004a72:	4909      	ldr	r1, [pc, #36]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	608b      	str	r3, [r1, #8]
 8004a78:	e01a      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8004a7a:	bf00      	nop
 8004a7c:	001a0300 	.word	0x001a0300
 8004a80:	001b0300 	.word	0x001b0300
 8004a84:	001c0300 	.word	0x001c0300
 8004a88:	001d0300 	.word	0x001d0300
 8004a8c:	001e0300 	.word	0x001e0300
 8004a90:	001f0300 	.word	0x001f0300
 8004a94:	08012d60 	.word	0x08012d60
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	40007000 	.word	0x40007000
 8004aa0:	0ffffcff 	.word	0x0ffffcff
 8004aa4:	4b9a      	ldr	r3, [pc, #616]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	4a99      	ldr	r2, [pc, #612]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004aaa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004aae:	6093      	str	r3, [r2, #8]
 8004ab0:	4b97      	ldr	r3, [pc, #604]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004ab2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004abc:	4994      	ldr	r1, [pc, #592]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0310 	and.w	r3, r3, #16
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d01d      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d008      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ade:	d003      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004ae0:	21f1      	movs	r1, #241	; 0xf1
 8004ae2:	488c      	ldr	r0, [pc, #560]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004ae4:	f7fc fed1 	bl	800188a <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ae8:	4b89      	ldr	r3, [pc, #548]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aee:	4a88      	ldr	r2, [pc, #544]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004af0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004af4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004af8:	4b85      	ldr	r3, [pc, #532]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004afa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b02:	4983      	ldr	r1, [pc, #524]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d01c      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00d      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b26:	d008      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b30:	d003      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004b32:	21fb      	movs	r1, #251	; 0xfb
 8004b34:	4877      	ldr	r0, [pc, #476]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004b36:	f7fc fea8 	bl	800188a <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b3a:	4b75      	ldr	r3, [pc, #468]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b48:	4971      	ldr	r1, [pc, #452]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01d      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00e      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b6c:	d009      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b76:	d004      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004b78:	f240 1105 	movw	r1, #261	; 0x105
 8004b7c:	4865      	ldr	r0, [pc, #404]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004b7e:	f7fc fe84 	bl	800188a <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b82:	4b63      	ldr	r3, [pc, #396]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b90:	495f      	ldr	r1, [pc, #380]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01d      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00e      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bb4:	d009      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bbe:	d004      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004bc0:	f240 110f 	movw	r1, #271	; 0x10f
 8004bc4:	4853      	ldr	r0, [pc, #332]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004bc6:	f7fc fe60 	bl	800188a <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bca:	4b51      	ldr	r3, [pc, #324]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd8:	494d      	ldr	r1, [pc, #308]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01d      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00e      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bfc:	d009      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c06:	d004      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004c08:	f240 1119 	movw	r1, #281	; 0x119
 8004c0c:	4841      	ldr	r0, [pc, #260]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004c0e:	f7fc fe3c 	bl	800188a <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c12:	4b3f      	ldr	r3, [pc, #252]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c20:	493b      	ldr	r1, [pc, #236]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01f      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d010      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d00c      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d008      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d004      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004c54:	f240 1123 	movw	r1, #291	; 0x123
 8004c58:	482e      	ldr	r0, [pc, #184]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004c5a:	f7fc fe16 	bl	800188a <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c5e:	4b2c      	ldr	r3, [pc, #176]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c64:	f023 0203 	bic.w	r2, r3, #3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6c:	4928      	ldr	r1, [pc, #160]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01f      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d010      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d00c      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c94:	2b0c      	cmp	r3, #12
 8004c96:	d008      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d004      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004ca0:	f240 112d 	movw	r1, #301	; 0x12d
 8004ca4:	481b      	ldr	r0, [pc, #108]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004ca6:	f7fc fdf0 	bl	800188a <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004caa:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb0:	f023 020c 	bic.w	r2, r3, #12
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb8:	4915      	ldr	r1, [pc, #84]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d025      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d010      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d00c      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce0:	2b30      	cmp	r3, #48	; 0x30
 8004ce2:	d008      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d004      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004cec:	f240 1137 	movw	r1, #311	; 0x137
 8004cf0:	4808      	ldr	r0, [pc, #32]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004cf2:	f7fc fdca 	bl	800188a <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cf6:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d04:	4902      	ldr	r1, [pc, #8]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d0c:	e004      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8004d0e:	bf00      	nop
 8004d10:	40023800 	.word	0x40023800
 8004d14:	08012d60 	.word	0x08012d60
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01f      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d010      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d00c      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d38:	2bc0      	cmp	r3, #192	; 0xc0
 8004d3a:	d008      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d40:	2b80      	cmp	r3, #128	; 0x80
 8004d42:	d004      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004d44:	f240 1141 	movw	r1, #321	; 0x141
 8004d48:	48a0      	ldr	r0, [pc, #640]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004d4a:	f7fc fd9e 	bl	800188a <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d4e:	4ba0      	ldr	r3, [pc, #640]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d54:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5c:	499c      	ldr	r1, [pc, #624]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d022      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d013      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d80:	d00e      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d8a:	d009      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d94:	d004      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004d96:	f240 114b 	movw	r1, #331	; 0x14b
 8004d9a:	488c      	ldr	r0, [pc, #560]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004d9c:	f7fc fd75 	bl	800188a <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004da0:	4b8b      	ldr	r3, [pc, #556]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	4988      	ldr	r1, [pc, #544]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d022      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d013      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd2:	d00e      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ddc:	d009      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de6:	d004      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004de8:	f240 1155 	movw	r1, #341	; 0x155
 8004dec:	4877      	ldr	r0, [pc, #476]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004dee:	f7fc fd4c 	bl	800188a <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004df2:	4b77      	ldr	r3, [pc, #476]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e00:	4973      	ldr	r1, [pc, #460]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d022      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d013      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e24:	d00e      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e2e:	d009      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e38:	d004      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004e3a:	f240 115f 	movw	r1, #351	; 0x15f
 8004e3e:	4863      	ldr	r0, [pc, #396]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004e40:	f7fc fd23 	bl	800188a <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e44:	4b62      	ldr	r3, [pc, #392]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e52:	495f      	ldr	r1, [pc, #380]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d022      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d013      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e76:	d00e      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e80:	d009      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e8a:	d004      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004e8c:	f240 1169 	movw	r1, #361	; 0x169
 8004e90:	484e      	ldr	r0, [pc, #312]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004e92:	f7fc fcfa 	bl	800188a <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e96:	4b4e      	ldr	r3, [pc, #312]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea4:	494a      	ldr	r1, [pc, #296]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d018      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ec0:	d008      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d004      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004eca:	f240 1173 	movw	r1, #371	; 0x173
 8004ece:	483f      	ldr	r0, [pc, #252]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004ed0:	f7fc fcdb 	bl	800188a <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ed4:	4b3e      	ldr	r3, [pc, #248]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee2:	493b      	ldr	r1, [pc, #236]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d01f      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004efa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004efe:	d008      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d004      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004f08:	f240 117d 	movw	r1, #381	; 0x17d
 8004f0c:	482f      	ldr	r0, [pc, #188]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004f0e:	f7fc fcbc 	bl	800188a <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f12:	4b2f      	ldr	r3, [pc, #188]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f18:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f20:	492b      	ldr	r1, [pc, #172]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f30:	d101      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 8004f32:	2301      	movs	r3, #1
 8004f34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 8004f42:	2301      	movs	r3, #1
 8004f44:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d022      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d013      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f62:	d00e      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f6c:	d009      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f76:	d004      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004f78:	f240 1195 	movw	r1, #405	; 0x195
 8004f7c:	4813      	ldr	r0, [pc, #76]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004f7e:	f7fc fc84 	bl	800188a <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f82:	4b13      	ldr	r3, [pc, #76]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f90:	490f      	ldr	r1, [pc, #60]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d020      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fae:	d009      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d004      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004fba:	f240 119f 	movw	r1, #415	; 0x19f
 8004fbe:	4803      	ldr	r0, [pc, #12]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004fc0:	f7fc fc63 	bl	800188a <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fc4:	4b02      	ldr	r3, [pc, #8]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fca:	e003      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8004fcc:	08012d60 	.word	0x08012d60
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fde:	4910      	ldr	r1, [pc, #64]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d006      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8155 	beq.w	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ffa:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a08      	ldr	r2, [pc, #32]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8005000:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005006:	f7fc ffd5 	bl	8001fb4 <HAL_GetTick>
 800500a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800500c:	e00a      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800500e:	f7fc ffd1 	bl	8001fb4 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b64      	cmp	r3, #100	; 0x64
 800501a:	d903      	bls.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e273      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8005020:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005024:	4b9a      	ldr	r3, [pc, #616]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1ee      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b31      	cmp	r3, #49	; 0x31
 8005036:	d904      	bls.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005040:	d904      	bls.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8005042:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8005046:	4893      	ldr	r0, [pc, #588]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005048:	f7fc fc1f 	bl	800188a <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d02e      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505c:	2b00      	cmp	r3, #0
 800505e:	d12a      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d903      	bls.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b07      	cmp	r3, #7
 800506e:	d904      	bls.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005070:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005074:	4887      	ldr	r0, [pc, #540]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005076:	f7fc fc08 	bl	800188a <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800507a:	4b85      	ldr	r3, [pc, #532]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800507c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005080:	0c1b      	lsrs	r3, r3, #16
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005088:	4b81      	ldr	r3, [pc, #516]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800508a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800508e:	0e1b      	lsrs	r3, r3, #24
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	019a      	lsls	r2, r3, #6
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	041b      	lsls	r3, r3, #16
 80050a0:	431a      	orrs	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	061b      	lsls	r3, r3, #24
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	071b      	lsls	r3, r3, #28
 80050ae:	4978      	ldr	r1, [pc, #480]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d004      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ca:	d00a      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d048      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050e0:	d143      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d903      	bls.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	2b0f      	cmp	r3, #15
 80050f0:	d904      	bls.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80050f2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80050f6:	4867      	ldr	r0, [pc, #412]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80050f8:	f7fc fbc7 	bl	800188a <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	2b20      	cmp	r3, #32
 800510a:	d904      	bls.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 800510c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8005110:	4860      	ldr	r0, [pc, #384]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005112:	f7fc fbba 	bl	800188a <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005116:	4b5e      	ldr	r3, [pc, #376]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511c:	0c1b      	lsrs	r3, r3, #16
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005124:	4b5a      	ldr	r3, [pc, #360]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800512a:	0f1b      	lsrs	r3, r3, #28
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	019a      	lsls	r2, r3, #6
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	041b      	lsls	r3, r3, #16
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	061b      	lsls	r3, r3, #24
 8005144:	431a      	orrs	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	071b      	lsls	r3, r3, #28
 800514a:	4951      	ldr	r1, [pc, #324]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005152:	4b4f      	ldr	r3, [pc, #316]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005158:	f023 021f 	bic.w	r2, r3, #31
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	3b01      	subs	r3, #1
 8005162:	494b      	ldr	r1, [pc, #300]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d032      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d010      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d00c      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d008      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b03      	cmp	r3, #3
 8005194:	d004      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8005196:	f240 2105 	movw	r1, #517	; 0x205
 800519a:	483e      	ldr	r0, [pc, #248]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800519c:	f7fc fb75 	bl	800188a <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051a0:	4b3b      	ldr	r3, [pc, #236]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80051a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a6:	0e1b      	lsrs	r3, r3, #24
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051ae:	4b38      	ldr	r3, [pc, #224]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80051b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b4:	0f1b      	lsrs	r3, r3, #28
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	019a      	lsls	r2, r3, #6
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	041b      	lsls	r3, r3, #16
 80051c8:	431a      	orrs	r2, r3
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	061b      	lsls	r3, r3, #24
 80051ce:	431a      	orrs	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	071b      	lsls	r3, r3, #28
 80051d4:	492e      	ldr	r1, [pc, #184]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d040      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d010      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d00c      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d008      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	2b03      	cmp	r3, #3
 8005206:	d004      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005208:	f44f 7105 	mov.w	r1, #532	; 0x214
 800520c:	4821      	ldr	r0, [pc, #132]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800520e:	f7fc fb3c 	bl	800188a <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d903      	bls.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b07      	cmp	r3, #7
 8005220:	d904      	bls.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005222:	f240 2115 	movw	r1, #533	; 0x215
 8005226:	481b      	ldr	r0, [pc, #108]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005228:	f7fc fb2f 	bl	800188a <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d903      	bls.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	2b0f      	cmp	r3, #15
 800523a:	d904      	bls.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 800523c:	f240 2116 	movw	r1, #534	; 0x216
 8005240:	4814      	ldr	r0, [pc, #80]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005242:	f7fc fb22 	bl	800188a <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	019a      	lsls	r2, r3, #6
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	041b      	lsls	r3, r3, #16
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	061b      	lsls	r3, r3, #24
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	071b      	lsls	r3, r3, #28
 8005262:	490b      	ldr	r1, [pc, #44]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800526a:	4b09      	ldr	r3, [pc, #36]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a08      	ldr	r2, [pc, #32]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005270:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005276:	f7fc fe9d 	bl	8001fb4 <HAL_GetTick>
 800527a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800527c:	e00c      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800527e:	f7fc fe99 	bl	8001fb4 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b64      	cmp	r3, #100	; 0x64
 800528a:	d905      	bls.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e13b      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8005290:	40023800 	.word	0x40023800
 8005294:	08012d60 	.word	0x08012d60
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005298:	4b9d      	ldr	r3, [pc, #628]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0ec      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	f040 812d 	bne.w	8005506 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052ac:	4b98      	ldr	r3, [pc, #608]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a97      	ldr	r2, [pc, #604]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80052b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b8:	f7fc fe7c 	bl	8001fb4 <HAL_GetTick>
 80052bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052be:	e008      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052c0:	f7fc fe78 	bl	8001fb4 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b64      	cmp	r3, #100	; 0x64
 80052cc:	d901      	bls.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e11a      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052d2:	4b8f      	ldr	r3, [pc, #572]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052de:	d0ef      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	2b31      	cmp	r3, #49	; 0x31
 80052e6:	d904      	bls.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80052f0:	d904      	bls.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80052f2:	f44f 7111 	mov.w	r1, #580	; 0x244
 80052f6:	4887      	ldr	r0, [pc, #540]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80052f8:	f7fc fac7 	bl	800188a <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d009      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005318:	2b00      	cmp	r3, #0
 800531a:	d048      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	2b00      	cmp	r3, #0
 8005322:	d144      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d903      	bls.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	2b0f      	cmp	r3, #15
 8005332:	d904      	bls.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8005334:	f240 214b 	movw	r1, #587	; 0x24b
 8005338:	4876      	ldr	r0, [pc, #472]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800533a:	f7fc faa6 	bl	800188a <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534a:	2b20      	cmp	r3, #32
 800534c:	d904      	bls.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 800534e:	f240 214d 	movw	r1, #589	; 0x24d
 8005352:	4870      	ldr	r0, [pc, #448]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005354:	f7fc fa99 	bl	800188a <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005358:	4b6d      	ldr	r3, [pc, #436]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800535a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535e:	0c1b      	lsrs	r3, r3, #16
 8005360:	f003 0303 	and.w	r3, r3, #3
 8005364:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005366:	4b6a      	ldr	r3, [pc, #424]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536c:	0f1b      	lsrs	r3, r3, #28
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	019a      	lsls	r2, r3, #6
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	041b      	lsls	r3, r3, #16
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	061b      	lsls	r3, r3, #24
 8005386:	431a      	orrs	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	071b      	lsls	r3, r3, #28
 800538c:	4960      	ldr	r1, [pc, #384]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005394:	4b5e      	ldr	r3, [pc, #376]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800539a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a2:	3b01      	subs	r3, #1
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	495a      	ldr	r1, [pc, #360]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d037      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xeda>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c2:	d132      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d010      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d00c      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d008      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d004      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80053e4:	f44f 7118 	mov.w	r1, #608	; 0x260
 80053e8:	484a      	ldr	r0, [pc, #296]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80053ea:	f7fc fa4e 	bl	800188a <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053ee:	4b48      	ldr	r3, [pc, #288]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80053f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f4:	0e1b      	lsrs	r3, r3, #24
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053fc:	4b44      	ldr	r3, [pc, #272]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	0f1b      	lsrs	r3, r3, #28
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	019a      	lsls	r2, r3, #6
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	041b      	lsls	r3, r3, #16
 8005416:	431a      	orrs	r2, r3
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	061b      	lsls	r3, r3, #24
 800541c:	431a      	orrs	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	071b      	lsls	r3, r3, #28
 8005422:	493b      	ldr	r1, [pc, #236]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005424:	4313      	orrs	r3, r2
 8005426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d04d      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d903      	bls.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	2b07      	cmp	r3, #7
 8005444:	d904      	bls.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8005446:	f240 216f 	movw	r1, #623	; 0x26f
 800544a:	4832      	ldr	r0, [pc, #200]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800544c:	f7fc fa1d 	bl	800188a <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	2b00      	cmp	r3, #0
 8005456:	d013      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005460:	d00e      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005466:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800546a:	d009      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005474:	d004      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8005476:	f44f 711c 	mov.w	r1, #624	; 0x270
 800547a:	4826      	ldr	r0, [pc, #152]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800547c:	f7fc fa05 	bl	800188a <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005480:	4b23      	ldr	r3, [pc, #140]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005486:	0e1b      	lsrs	r3, r3, #24
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800548e:	4b20      	ldr	r3, [pc, #128]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005494:	0c1b      	lsrs	r3, r3, #16
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	019a      	lsls	r2, r3, #6
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	041b      	lsls	r3, r3, #16
 80054a6:	431a      	orrs	r2, r3
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	061b      	lsls	r3, r3, #24
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	071b      	lsls	r3, r3, #28
 80054b4:	4916      	ldr	r1, [pc, #88]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80054bc:	4b14      	ldr	r3, [pc, #80]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ca:	4911      	ldr	r1, [pc, #68]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054d2:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a0e      	ldr	r2, [pc, #56]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054de:	f7fc fd69 	bl	8001fb4 <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054e6:	f7fc fd65 	bl	8001fb4 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b64      	cmp	r3, #100	; 0x64
 80054f2:	d901      	bls.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e007      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054f8:	4b05      	ldr	r3, [pc, #20]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005504:	d1ef      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3720      	adds	r7, #32
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40023800 	.word	0x40023800
 8005514:	08012d60 	.word	0x08012d60

08005518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e0f5      	b.n	8005716 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a7c      	ldr	r2, [pc, #496]	; (8005720 <HAL_TIM_Base_Init+0x208>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d045      	beq.n	80055c0 <HAL_TIM_Base_Init+0xa8>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553c:	d040      	beq.n	80055c0 <HAL_TIM_Base_Init+0xa8>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a78      	ldr	r2, [pc, #480]	; (8005724 <HAL_TIM_Base_Init+0x20c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d03b      	beq.n	80055c0 <HAL_TIM_Base_Init+0xa8>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a76      	ldr	r2, [pc, #472]	; (8005728 <HAL_TIM_Base_Init+0x210>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d036      	beq.n	80055c0 <HAL_TIM_Base_Init+0xa8>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a75      	ldr	r2, [pc, #468]	; (800572c <HAL_TIM_Base_Init+0x214>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d031      	beq.n	80055c0 <HAL_TIM_Base_Init+0xa8>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a73      	ldr	r2, [pc, #460]	; (8005730 <HAL_TIM_Base_Init+0x218>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d02c      	beq.n	80055c0 <HAL_TIM_Base_Init+0xa8>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a72      	ldr	r2, [pc, #456]	; (8005734 <HAL_TIM_Base_Init+0x21c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d027      	beq.n	80055c0 <HAL_TIM_Base_Init+0xa8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a70      	ldr	r2, [pc, #448]	; (8005738 <HAL_TIM_Base_Init+0x220>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d022      	beq.n	80055c0 <HAL_TIM_Base_Init+0xa8>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a6f      	ldr	r2, [pc, #444]	; (800573c <HAL_TIM_Base_Init+0x224>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d01d      	beq.n	80055c0 <HAL_TIM_Base_Init+0xa8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a6d      	ldr	r2, [pc, #436]	; (8005740 <HAL_TIM_Base_Init+0x228>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d018      	beq.n	80055c0 <HAL_TIM_Base_Init+0xa8>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a6c      	ldr	r2, [pc, #432]	; (8005744 <HAL_TIM_Base_Init+0x22c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d013      	beq.n	80055c0 <HAL_TIM_Base_Init+0xa8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a6a      	ldr	r2, [pc, #424]	; (8005748 <HAL_TIM_Base_Init+0x230>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00e      	beq.n	80055c0 <HAL_TIM_Base_Init+0xa8>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a69      	ldr	r2, [pc, #420]	; (800574c <HAL_TIM_Base_Init+0x234>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d009      	beq.n	80055c0 <HAL_TIM_Base_Init+0xa8>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a67      	ldr	r2, [pc, #412]	; (8005750 <HAL_TIM_Base_Init+0x238>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d004      	beq.n	80055c0 <HAL_TIM_Base_Init+0xa8>
 80055b6:	f44f 718b 	mov.w	r1, #278	; 0x116
 80055ba:	4866      	ldr	r0, [pc, #408]	; (8005754 <HAL_TIM_Base_Init+0x23c>)
 80055bc:	f7fc f965 	bl	800188a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d014      	beq.n	80055f2 <HAL_TIM_Base_Init+0xda>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2b10      	cmp	r3, #16
 80055ce:	d010      	beq.n	80055f2 <HAL_TIM_Base_Init+0xda>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d00c      	beq.n	80055f2 <HAL_TIM_Base_Init+0xda>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	2b40      	cmp	r3, #64	; 0x40
 80055de:	d008      	beq.n	80055f2 <HAL_TIM_Base_Init+0xda>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b60      	cmp	r3, #96	; 0x60
 80055e6:	d004      	beq.n	80055f2 <HAL_TIM_Base_Init+0xda>
 80055e8:	f240 1117 	movw	r1, #279	; 0x117
 80055ec:	4859      	ldr	r0, [pc, #356]	; (8005754 <HAL_TIM_Base_Init+0x23c>)
 80055ee:	f7fc f94c 	bl	800188a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00e      	beq.n	8005618 <HAL_TIM_Base_Init+0x100>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005602:	d009      	beq.n	8005618 <HAL_TIM_Base_Init+0x100>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800560c:	d004      	beq.n	8005618 <HAL_TIM_Base_Init+0x100>
 800560e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8005612:	4850      	ldr	r0, [pc, #320]	; (8005754 <HAL_TIM_Base_Init+0x23c>)
 8005614:	f7fc f939 	bl	800188a <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005620:	d004      	beq.n	800562c <HAL_TIM_Base_Init+0x114>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a41      	ldr	r2, [pc, #260]	; (800572c <HAL_TIM_Base_Init+0x214>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d107      	bne.n	800563c <HAL_TIM_Base_Init+0x124>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	bf14      	ite	ne
 8005634:	2301      	movne	r3, #1
 8005636:	2300      	moveq	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	e00e      	b.n	800565a <HAL_TIM_Base_Init+0x142>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d006      	beq.n	8005652 <HAL_TIM_Base_Init+0x13a>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800564c:	d201      	bcs.n	8005652 <HAL_TIM_Base_Init+0x13a>
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <HAL_TIM_Base_Init+0x13c>
 8005652:	2300      	movs	r3, #0
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d104      	bne.n	8005668 <HAL_TIM_Base_Init+0x150>
 800565e:	f240 1119 	movw	r1, #281	; 0x119
 8005662:	483c      	ldr	r0, [pc, #240]	; (8005754 <HAL_TIM_Base_Init+0x23c>)
 8005664:	f7fc f911 	bl	800188a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_TIM_Base_Init+0x16a>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	2b80      	cmp	r3, #128	; 0x80
 8005676:	d004      	beq.n	8005682 <HAL_TIM_Base_Init+0x16a>
 8005678:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800567c:	4835      	ldr	r0, [pc, #212]	; (8005754 <HAL_TIM_Base_Init+0x23c>)
 800567e:	f7fc f904 	bl	800188a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fc faf8 	bl	8001c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3304      	adds	r3, #4
 80056ac:	4619      	mov	r1, r3
 80056ae:	4610      	mov	r0, r2
 80056b0:	f001 fa52 	bl	8006b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	40010000 	.word	0x40010000
 8005724:	40000400 	.word	0x40000400
 8005728:	40000800 	.word	0x40000800
 800572c:	40000c00 	.word	0x40000c00
 8005730:	40001000 	.word	0x40001000
 8005734:	40001400 	.word	0x40001400
 8005738:	40010400 	.word	0x40010400
 800573c:	40014000 	.word	0x40014000
 8005740:	40014400 	.word	0x40014400
 8005744:	40014800 	.word	0x40014800
 8005748:	40001800 	.word	0x40001800
 800574c:	40001c00 	.word	0x40001c00
 8005750:	40002000 	.word	0x40002000
 8005754:	08012d9c 	.word	0x08012d9c

08005758 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e0f5      	b.n	8005956 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a7c      	ldr	r2, [pc, #496]	; (8005960 <HAL_TIM_PWM_Init+0x208>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d045      	beq.n	8005800 <HAL_TIM_PWM_Init+0xa8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577c:	d040      	beq.n	8005800 <HAL_TIM_PWM_Init+0xa8>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a78      	ldr	r2, [pc, #480]	; (8005964 <HAL_TIM_PWM_Init+0x20c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d03b      	beq.n	8005800 <HAL_TIM_PWM_Init+0xa8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a76      	ldr	r2, [pc, #472]	; (8005968 <HAL_TIM_PWM_Init+0x210>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d036      	beq.n	8005800 <HAL_TIM_PWM_Init+0xa8>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a75      	ldr	r2, [pc, #468]	; (800596c <HAL_TIM_PWM_Init+0x214>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d031      	beq.n	8005800 <HAL_TIM_PWM_Init+0xa8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a73      	ldr	r2, [pc, #460]	; (8005970 <HAL_TIM_PWM_Init+0x218>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d02c      	beq.n	8005800 <HAL_TIM_PWM_Init+0xa8>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a72      	ldr	r2, [pc, #456]	; (8005974 <HAL_TIM_PWM_Init+0x21c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d027      	beq.n	8005800 <HAL_TIM_PWM_Init+0xa8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a70      	ldr	r2, [pc, #448]	; (8005978 <HAL_TIM_PWM_Init+0x220>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d022      	beq.n	8005800 <HAL_TIM_PWM_Init+0xa8>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a6f      	ldr	r2, [pc, #444]	; (800597c <HAL_TIM_PWM_Init+0x224>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d01d      	beq.n	8005800 <HAL_TIM_PWM_Init+0xa8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a6d      	ldr	r2, [pc, #436]	; (8005980 <HAL_TIM_PWM_Init+0x228>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d018      	beq.n	8005800 <HAL_TIM_PWM_Init+0xa8>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a6c      	ldr	r2, [pc, #432]	; (8005984 <HAL_TIM_PWM_Init+0x22c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d013      	beq.n	8005800 <HAL_TIM_PWM_Init+0xa8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a6a      	ldr	r2, [pc, #424]	; (8005988 <HAL_TIM_PWM_Init+0x230>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00e      	beq.n	8005800 <HAL_TIM_PWM_Init+0xa8>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a69      	ldr	r2, [pc, #420]	; (800598c <HAL_TIM_PWM_Init+0x234>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d009      	beq.n	8005800 <HAL_TIM_PWM_Init+0xa8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a67      	ldr	r2, [pc, #412]	; (8005990 <HAL_TIM_PWM_Init+0x238>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d004      	beq.n	8005800 <HAL_TIM_PWM_Init+0xa8>
 80057f6:	f240 5133 	movw	r1, #1331	; 0x533
 80057fa:	4866      	ldr	r0, [pc, #408]	; (8005994 <HAL_TIM_PWM_Init+0x23c>)
 80057fc:	f7fc f845 	bl	800188a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d014      	beq.n	8005832 <HAL_TIM_PWM_Init+0xda>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	2b10      	cmp	r3, #16
 800580e:	d010      	beq.n	8005832 <HAL_TIM_PWM_Init+0xda>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2b20      	cmp	r3, #32
 8005816:	d00c      	beq.n	8005832 <HAL_TIM_PWM_Init+0xda>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2b40      	cmp	r3, #64	; 0x40
 800581e:	d008      	beq.n	8005832 <HAL_TIM_PWM_Init+0xda>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	2b60      	cmp	r3, #96	; 0x60
 8005826:	d004      	beq.n	8005832 <HAL_TIM_PWM_Init+0xda>
 8005828:	f240 5134 	movw	r1, #1332	; 0x534
 800582c:	4859      	ldr	r0, [pc, #356]	; (8005994 <HAL_TIM_PWM_Init+0x23c>)
 800582e:	f7fc f82c 	bl	800188a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00e      	beq.n	8005858 <HAL_TIM_PWM_Init+0x100>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005842:	d009      	beq.n	8005858 <HAL_TIM_PWM_Init+0x100>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800584c:	d004      	beq.n	8005858 <HAL_TIM_PWM_Init+0x100>
 800584e:	f240 5135 	movw	r1, #1333	; 0x535
 8005852:	4850      	ldr	r0, [pc, #320]	; (8005994 <HAL_TIM_PWM_Init+0x23c>)
 8005854:	f7fc f819 	bl	800188a <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005860:	d004      	beq.n	800586c <HAL_TIM_PWM_Init+0x114>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a41      	ldr	r2, [pc, #260]	; (800596c <HAL_TIM_PWM_Init+0x214>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d107      	bne.n	800587c <HAL_TIM_PWM_Init+0x124>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	bf14      	ite	ne
 8005874:	2301      	movne	r3, #1
 8005876:	2300      	moveq	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	e00e      	b.n	800589a <HAL_TIM_PWM_Init+0x142>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d006      	beq.n	8005892 <HAL_TIM_PWM_Init+0x13a>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588c:	d201      	bcs.n	8005892 <HAL_TIM_PWM_Init+0x13a>
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <HAL_TIM_PWM_Init+0x13c>
 8005892:	2300      	movs	r3, #0
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d104      	bne.n	80058a8 <HAL_TIM_PWM_Init+0x150>
 800589e:	f240 5136 	movw	r1, #1334	; 0x536
 80058a2:	483c      	ldr	r0, [pc, #240]	; (8005994 <HAL_TIM_PWM_Init+0x23c>)
 80058a4:	f7fb fff1 	bl	800188a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <HAL_TIM_PWM_Init+0x16a>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	2b80      	cmp	r3, #128	; 0x80
 80058b6:	d004      	beq.n	80058c2 <HAL_TIM_PWM_Init+0x16a>
 80058b8:	f240 5137 	movw	r1, #1335	; 0x537
 80058bc:	4835      	ldr	r0, [pc, #212]	; (8005994 <HAL_TIM_PWM_Init+0x23c>)
 80058be:	f7fb ffe4 	bl	800188a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f85e 	bl	8005998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3304      	adds	r3, #4
 80058ec:	4619      	mov	r1, r3
 80058ee:	4610      	mov	r0, r2
 80058f0:	f001 f932 	bl	8006b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	40010000 	.word	0x40010000
 8005964:	40000400 	.word	0x40000400
 8005968:	40000800 	.word	0x40000800
 800596c:	40000c00 	.word	0x40000c00
 8005970:	40001000 	.word	0x40001000
 8005974:	40001400 	.word	0x40001400
 8005978:	40010400 	.word	0x40010400
 800597c:	40014000 	.word	0x40014000
 8005980:	40014400 	.word	0x40014400
 8005984:	40014800 	.word	0x40014800
 8005988:	40001800 	.word	0x40001800
 800598c:	40001c00 	.word	0x40001c00
 8005990:	40002000 	.word	0x40002000
 8005994:	08012d9c 	.word	0x08012d9c

08005998 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a89      	ldr	r2, [pc, #548]	; (8005be0 <HAL_TIM_PWM_Start+0x234>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d117      	bne.n	80059f0 <HAL_TIM_PWM_Start+0x44>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 80ae 	beq.w	8005b24 <HAL_TIM_PWM_Start+0x178>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	f000 80aa 	beq.w	8005b24 <HAL_TIM_PWM_Start+0x178>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	f000 80a6 	beq.w	8005b24 <HAL_TIM_PWM_Start+0x178>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b0c      	cmp	r3, #12
 80059dc:	f000 80a2 	beq.w	8005b24 <HAL_TIM_PWM_Start+0x178>
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2b10      	cmp	r3, #16
 80059e4:	f000 809e 	beq.w	8005b24 <HAL_TIM_PWM_Start+0x178>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2b14      	cmp	r3, #20
 80059ec:	f000 809a 	beq.w	8005b24 <HAL_TIM_PWM_Start+0x178>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f8:	d10f      	bne.n	8005a1a <HAL_TIM_PWM_Start+0x6e>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 8091 	beq.w	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	f000 808d 	beq.w	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	f000 8089 	beq.w	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b0c      	cmp	r3, #12
 8005a16:	f000 8085 	beq.w	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a71      	ldr	r2, [pc, #452]	; (8005be4 <HAL_TIM_PWM_Start+0x238>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d10b      	bne.n	8005a3c <HAL_TIM_PWM_Start+0x90>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d07c      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d079      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d076      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b0c      	cmp	r3, #12
 8005a3a:	d073      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a69      	ldr	r2, [pc, #420]	; (8005be8 <HAL_TIM_PWM_Start+0x23c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d10b      	bne.n	8005a5e <HAL_TIM_PWM_Start+0xb2>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d06b      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d068      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d065      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b0c      	cmp	r3, #12
 8005a5c:	d062      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a62      	ldr	r2, [pc, #392]	; (8005bec <HAL_TIM_PWM_Start+0x240>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d10b      	bne.n	8005a80 <HAL_TIM_PWM_Start+0xd4>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d05a      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d057      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d054      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b0c      	cmp	r3, #12
 8005a7e:	d051      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a5a      	ldr	r2, [pc, #360]	; (8005bf0 <HAL_TIM_PWM_Start+0x244>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d111      	bne.n	8005aae <HAL_TIM_PWM_Start+0x102>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d049      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d046      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d043      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b0c      	cmp	r3, #12
 8005aa0:	d040      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b10      	cmp	r3, #16
 8005aa6:	d03d      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b14      	cmp	r3, #20
 8005aac:	d03a      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a50      	ldr	r2, [pc, #320]	; (8005bf4 <HAL_TIM_PWM_Start+0x248>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d105      	bne.n	8005ac4 <HAL_TIM_PWM_Start+0x118>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d032      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d02f      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a4b      	ldr	r2, [pc, #300]	; (8005bf8 <HAL_TIM_PWM_Start+0x24c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d102      	bne.n	8005ad4 <HAL_TIM_PWM_Start+0x128>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d027      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a48      	ldr	r2, [pc, #288]	; (8005bfc <HAL_TIM_PWM_Start+0x250>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d102      	bne.n	8005ae4 <HAL_TIM_PWM_Start+0x138>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01f      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a45      	ldr	r2, [pc, #276]	; (8005c00 <HAL_TIM_PWM_Start+0x254>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d105      	bne.n	8005afa <HAL_TIM_PWM_Start+0x14e>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d017      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d014      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a41      	ldr	r2, [pc, #260]	; (8005c04 <HAL_TIM_PWM_Start+0x258>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d102      	bne.n	8005b0a <HAL_TIM_PWM_Start+0x15e>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00c      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a3e      	ldr	r2, [pc, #248]	; (8005c08 <HAL_TIM_PWM_Start+0x25c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d102      	bne.n	8005b1a <HAL_TIM_PWM_Start+0x16e>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d004      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x178>
 8005b1a:	f240 51bc 	movw	r1, #1468	; 0x5bc
 8005b1e:	483b      	ldr	r0, [pc, #236]	; (8005c0c <HAL_TIM_PWM_Start+0x260>)
 8005b20:	f7fb feb3 	bl	800188a <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d109      	bne.n	8005b3e <HAL_TIM_PWM_Start+0x192>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	bf14      	ite	ne
 8005b36:	2301      	movne	r3, #1
 8005b38:	2300      	moveq	r3, #0
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	e03c      	b.n	8005bb8 <HAL_TIM_PWM_Start+0x20c>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d109      	bne.n	8005b58 <HAL_TIM_PWM_Start+0x1ac>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	bf14      	ite	ne
 8005b50:	2301      	movne	r3, #1
 8005b52:	2300      	moveq	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	e02f      	b.n	8005bb8 <HAL_TIM_PWM_Start+0x20c>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2b08      	cmp	r3, #8
 8005b5c:	d109      	bne.n	8005b72 <HAL_TIM_PWM_Start+0x1c6>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	bf14      	ite	ne
 8005b6a:	2301      	movne	r3, #1
 8005b6c:	2300      	moveq	r3, #0
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	e022      	b.n	8005bb8 <HAL_TIM_PWM_Start+0x20c>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b0c      	cmp	r3, #12
 8005b76:	d109      	bne.n	8005b8c <HAL_TIM_PWM_Start+0x1e0>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	bf14      	ite	ne
 8005b84:	2301      	movne	r3, #1
 8005b86:	2300      	moveq	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	e015      	b.n	8005bb8 <HAL_TIM_PWM_Start+0x20c>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b10      	cmp	r3, #16
 8005b90:	d109      	bne.n	8005ba6 <HAL_TIM_PWM_Start+0x1fa>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	bf14      	ite	ne
 8005b9e:	2301      	movne	r3, #1
 8005ba0:	2300      	moveq	r3, #0
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	e008      	b.n	8005bb8 <HAL_TIM_PWM_Start+0x20c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	bf14      	ite	ne
 8005bb2:	2301      	movne	r3, #1
 8005bb4:	2300      	moveq	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e0aa      	b.n	8005d16 <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <HAL_TIM_PWM_Start+0x224>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bce:	e03b      	b.n	8005c48 <HAL_TIM_PWM_Start+0x29c>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d11c      	bne.n	8005c10 <HAL_TIM_PWM_Start+0x264>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bde:	e033      	b.n	8005c48 <HAL_TIM_PWM_Start+0x29c>
 8005be0:	40010000 	.word	0x40010000
 8005be4:	40000400 	.word	0x40000400
 8005be8:	40000800 	.word	0x40000800
 8005bec:	40000c00 	.word	0x40000c00
 8005bf0:	40010400 	.word	0x40010400
 8005bf4:	40014000 	.word	0x40014000
 8005bf8:	40014400 	.word	0x40014400
 8005bfc:	40014800 	.word	0x40014800
 8005c00:	40001800 	.word	0x40001800
 8005c04:	40001c00 	.word	0x40001c00
 8005c08:	40002000 	.word	0x40002000
 8005c0c:	08012d9c 	.word	0x08012d9c
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d104      	bne.n	8005c20 <HAL_TIM_PWM_Start+0x274>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c1e:	e013      	b.n	8005c48 <HAL_TIM_PWM_Start+0x29c>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b0c      	cmp	r3, #12
 8005c24:	d104      	bne.n	8005c30 <HAL_TIM_PWM_Start+0x284>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c2e:	e00b      	b.n	8005c48 <HAL_TIM_PWM_Start+0x29c>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b10      	cmp	r3, #16
 8005c34:	d104      	bne.n	8005c40 <HAL_TIM_PWM_Start+0x294>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c3e:	e003      	b.n	8005c48 <HAL_TIM_PWM_Start+0x29c>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f001 fba3 	bl	800739c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a31      	ldr	r2, [pc, #196]	; (8005d20 <HAL_TIM_PWM_Start+0x374>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d004      	beq.n	8005c6a <HAL_TIM_PWM_Start+0x2be>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2f      	ldr	r2, [pc, #188]	; (8005d24 <HAL_TIM_PWM_Start+0x378>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d101      	bne.n	8005c6e <HAL_TIM_PWM_Start+0x2c2>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <HAL_TIM_PWM_Start+0x2c4>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d007      	beq.n	8005c84 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a25      	ldr	r2, [pc, #148]	; (8005d20 <HAL_TIM_PWM_Start+0x374>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d022      	beq.n	8005cd4 <HAL_TIM_PWM_Start+0x328>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c96:	d01d      	beq.n	8005cd4 <HAL_TIM_PWM_Start+0x328>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a22      	ldr	r2, [pc, #136]	; (8005d28 <HAL_TIM_PWM_Start+0x37c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d018      	beq.n	8005cd4 <HAL_TIM_PWM_Start+0x328>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a21      	ldr	r2, [pc, #132]	; (8005d2c <HAL_TIM_PWM_Start+0x380>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d013      	beq.n	8005cd4 <HAL_TIM_PWM_Start+0x328>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a1f      	ldr	r2, [pc, #124]	; (8005d30 <HAL_TIM_PWM_Start+0x384>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00e      	beq.n	8005cd4 <HAL_TIM_PWM_Start+0x328>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1a      	ldr	r2, [pc, #104]	; (8005d24 <HAL_TIM_PWM_Start+0x378>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d009      	beq.n	8005cd4 <HAL_TIM_PWM_Start+0x328>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a1b      	ldr	r2, [pc, #108]	; (8005d34 <HAL_TIM_PWM_Start+0x388>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d004      	beq.n	8005cd4 <HAL_TIM_PWM_Start+0x328>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1a      	ldr	r2, [pc, #104]	; (8005d38 <HAL_TIM_PWM_Start+0x38c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d115      	bne.n	8005d00 <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	4b18      	ldr	r3, [pc, #96]	; (8005d3c <HAL_TIM_PWM_Start+0x390>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b06      	cmp	r3, #6
 8005ce4:	d015      	beq.n	8005d12 <HAL_TIM_PWM_Start+0x366>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cec:	d011      	beq.n	8005d12 <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0201 	orr.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfe:	e008      	b.n	8005d12 <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	e000      	b.n	8005d14 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	40010000 	.word	0x40010000
 8005d24:	40010400 	.word	0x40010400
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40000800 	.word	0x40000800
 8005d30:	40000c00 	.word	0x40000c00
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40001800 	.word	0x40001800
 8005d3c:	00010007 	.word	0x00010007

08005d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d122      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d11b      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0202 	mvn.w	r2, #2
 8005d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 feca 	bl	8006b1c <HAL_TIM_IC_CaptureCallback>
 8005d88:	e005      	b.n	8005d96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 febc 	bl	8006b08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fecd 	bl	8006b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d122      	bne.n	8005df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d11b      	bne.n	8005df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0204 	mvn.w	r2, #4
 8005dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fea0 	bl	8006b1c <HAL_TIM_IC_CaptureCallback>
 8005ddc:	e005      	b.n	8005dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fe92 	bl	8006b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fea3 	bl	8006b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d122      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d11b      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0208 	mvn.w	r2, #8
 8005e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2204      	movs	r2, #4
 8005e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fe76 	bl	8006b1c <HAL_TIM_IC_CaptureCallback>
 8005e30:	e005      	b.n	8005e3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fe68 	bl	8006b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fe79 	bl	8006b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0310 	and.w	r3, r3, #16
 8005e4e:	2b10      	cmp	r3, #16
 8005e50:	d122      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d11b      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0210 	mvn.w	r2, #16
 8005e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2208      	movs	r2, #8
 8005e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fe4c 	bl	8006b1c <HAL_TIM_IC_CaptureCallback>
 8005e84:	e005      	b.n	8005e92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fe3e 	bl	8006b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fe4f 	bl	8006b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d10e      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d107      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0201 	mvn.w	r2, #1
 8005ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fe18 	bl	8006af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ece:	2b80      	cmp	r3, #128	; 0x80
 8005ed0:	d10e      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005edc:	2b80      	cmp	r3, #128	; 0x80
 8005ede:	d107      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f001 fc42 	bl	8007774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efe:	d10e      	bne.n	8005f1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0a:	2b80      	cmp	r3, #128	; 0x80
 8005f0c:	d107      	bne.n	8005f1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f001 fc35 	bl	8007788 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f28:	2b40      	cmp	r3, #64	; 0x40
 8005f2a:	d10e      	bne.n	8005f4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f36:	2b40      	cmp	r3, #64	; 0x40
 8005f38:	d107      	bne.n	8005f4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fdfd 	bl	8006b44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	d10e      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	2b20      	cmp	r3, #32
 8005f64:	d107      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f06f 0220 	mvn.w	r2, #32
 8005f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f001 fbf5 	bl	8007760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d016      	beq.n	8005fc4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	d013      	beq.n	8005fc4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d010      	beq.n	8005fc4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b0c      	cmp	r3, #12
 8005fa6:	d00d      	beq.n	8005fc4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b10      	cmp	r3, #16
 8005fac:	d00a      	beq.n	8005fc4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b14      	cmp	r3, #20
 8005fb2:	d007      	beq.n	8005fc4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b3c      	cmp	r3, #60	; 0x3c
 8005fb8:	d004      	beq.n	8005fc4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8005fba:	f241 01af 	movw	r1, #4271	; 0x10af
 8005fbe:	4895      	ldr	r0, [pc, #596]	; (8006214 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8005fc0:	f7fb fc63 	bl	800188a <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b60      	cmp	r3, #96	; 0x60
 8005fca:	d01c      	beq.n	8006006 <HAL_TIM_PWM_ConfigChannel+0x86>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b70      	cmp	r3, #112	; 0x70
 8005fd2:	d018      	beq.n	8006006 <HAL_TIM_PWM_ConfigChannel+0x86>
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a8f      	ldr	r2, [pc, #572]	; (8006218 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d013      	beq.n	8006006 <HAL_TIM_PWM_ConfigChannel+0x86>
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a8e      	ldr	r2, [pc, #568]	; (800621c <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00e      	beq.n	8006006 <HAL_TIM_PWM_ConfigChannel+0x86>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a8c      	ldr	r2, [pc, #560]	; (8006220 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d009      	beq.n	8006006 <HAL_TIM_PWM_ConfigChannel+0x86>
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a8b      	ldr	r2, [pc, #556]	; (8006224 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d004      	beq.n	8006006 <HAL_TIM_PWM_ConfigChannel+0x86>
 8005ffc:	f241 01b0 	movw	r1, #4272	; 0x10b0
 8006000:	4884      	ldr	r0, [pc, #528]	; (8006214 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006002:	f7fb fc42 	bl	800188a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d008      	beq.n	8006020 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d004      	beq.n	8006020 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8006016:	f241 01b1 	movw	r1, #4273	; 0x10b1
 800601a:	487e      	ldr	r0, [pc, #504]	; (8006214 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800601c:	f7fb fc35 	bl	800188a <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <HAL_TIM_PWM_ConfigChannel+0xba>
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	2b04      	cmp	r3, #4
 800602e:	d004      	beq.n	800603a <HAL_TIM_PWM_ConfigChannel+0xba>
 8006030:	f241 01b2 	movw	r1, #4274	; 0x10b2
 8006034:	4877      	ldr	r0, [pc, #476]	; (8006214 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006036:	f7fb fc28 	bl	800188a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8006044:	2302      	movs	r3, #2
 8006046:	e1f3      	b.n	8006430 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b14      	cmp	r3, #20
 8006054:	f200 81e4 	bhi.w	8006420 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8006058:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	080060b5 	.word	0x080060b5
 8006064:	08006421 	.word	0x08006421
 8006068:	08006421 	.word	0x08006421
 800606c:	08006421 	.word	0x08006421
 8006070:	08006177 	.word	0x08006177
 8006074:	08006421 	.word	0x08006421
 8006078:	08006421 	.word	0x08006421
 800607c:	08006421 	.word	0x08006421
 8006080:	08006255 	.word	0x08006255
 8006084:	08006421 	.word	0x08006421
 8006088:	08006421 	.word	0x08006421
 800608c:	08006421 	.word	0x08006421
 8006090:	080062db 	.word	0x080062db
 8006094:	08006421 	.word	0x08006421
 8006098:	08006421 	.word	0x08006421
 800609c:	08006421 	.word	0x08006421
 80060a0:	08006363 	.word	0x08006363
 80060a4:	08006421 	.word	0x08006421
 80060a8:	08006421 	.word	0x08006421
 80060ac:	08006421 	.word	0x08006421
 80060b0:	080063c1 	.word	0x080063c1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a5b      	ldr	r2, [pc, #364]	; (8006228 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d03b      	beq.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c6:	d036      	beq.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a57      	ldr	r2, [pc, #348]	; (800622c <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d031      	beq.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a56      	ldr	r2, [pc, #344]	; (8006230 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d02c      	beq.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a54      	ldr	r2, [pc, #336]	; (8006234 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d027      	beq.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a53      	ldr	r2, [pc, #332]	; (8006238 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d022      	beq.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a51      	ldr	r2, [pc, #324]	; (800623c <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d01d      	beq.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a50      	ldr	r2, [pc, #320]	; (8006240 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d018      	beq.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a4e      	ldr	r2, [pc, #312]	; (8006244 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d013      	beq.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a4d      	ldr	r2, [pc, #308]	; (8006248 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00e      	beq.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a4b      	ldr	r2, [pc, #300]	; (800624c <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d009      	beq.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a4a      	ldr	r2, [pc, #296]	; (8006250 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d004      	beq.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800612c:	f241 01bc 	movw	r1, #4284	; 0x10bc
 8006130:	4838      	ldr	r0, [pc, #224]	; (8006214 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006132:	f7fb fbaa 	bl	800188a <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	4618      	mov	r0, r3
 800613e:	f000 fdab 	bl	8006c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	699a      	ldr	r2, [r3, #24]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f042 0208 	orr.w	r2, r2, #8
 8006150:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	699a      	ldr	r2, [r3, #24]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0204 	bic.w	r2, r2, #4
 8006160:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6999      	ldr	r1, [r3, #24]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	619a      	str	r2, [r3, #24]
      break;
 8006174:	e157      	b.n	8006426 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a2b      	ldr	r2, [pc, #172]	; (8006228 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d027      	beq.n	80061d0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006188:	d022      	beq.n	80061d0 <HAL_TIM_PWM_ConfigChannel+0x250>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a27      	ldr	r2, [pc, #156]	; (800622c <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d01d      	beq.n	80061d0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a25      	ldr	r2, [pc, #148]	; (8006230 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d018      	beq.n	80061d0 <HAL_TIM_PWM_ConfigChannel+0x250>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a24      	ldr	r2, [pc, #144]	; (8006234 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d013      	beq.n	80061d0 <HAL_TIM_PWM_ConfigChannel+0x250>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a22      	ldr	r2, [pc, #136]	; (8006238 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00e      	beq.n	80061d0 <HAL_TIM_PWM_ConfigChannel+0x250>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a21      	ldr	r2, [pc, #132]	; (800623c <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d009      	beq.n	80061d0 <HAL_TIM_PWM_ConfigChannel+0x250>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a21      	ldr	r2, [pc, #132]	; (8006248 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d004      	beq.n	80061d0 <HAL_TIM_PWM_ConfigChannel+0x250>
 80061c6:	f241 01cd 	movw	r1, #4301	; 0x10cd
 80061ca:	4812      	ldr	r0, [pc, #72]	; (8006214 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80061cc:	f7fb fb5d 	bl	800188a <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fdfa 	bl	8006dd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6999      	ldr	r1, [r3, #24]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	021a      	lsls	r2, r3, #8
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	619a      	str	r2, [r3, #24]
      break;
 8006210:	e109      	b.n	8006426 <HAL_TIM_PWM_ConfigChannel+0x4a6>
 8006212:	bf00      	nop
 8006214:	08012d9c 	.word	0x08012d9c
 8006218:	00010040 	.word	0x00010040
 800621c:	00010050 	.word	0x00010050
 8006220:	00010060 	.word	0x00010060
 8006224:	00010070 	.word	0x00010070
 8006228:	40010000 	.word	0x40010000
 800622c:	40000400 	.word	0x40000400
 8006230:	40000800 	.word	0x40000800
 8006234:	40000c00 	.word	0x40000c00
 8006238:	40010400 	.word	0x40010400
 800623c:	40014000 	.word	0x40014000
 8006240:	40014400 	.word	0x40014400
 8006244:	40014800 	.word	0x40014800
 8006248:	40001800 	.word	0x40001800
 800624c:	40001c00 	.word	0x40001c00
 8006250:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a77      	ldr	r2, [pc, #476]	; (8006438 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d01d      	beq.n	800629a <HAL_TIM_PWM_ConfigChannel+0x31a>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006266:	d018      	beq.n	800629a <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a73      	ldr	r2, [pc, #460]	; (800643c <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a72      	ldr	r2, [pc, #456]	; (8006440 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00e      	beq.n	800629a <HAL_TIM_PWM_ConfigChannel+0x31a>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a70      	ldr	r2, [pc, #448]	; (8006444 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d009      	beq.n	800629a <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a6f      	ldr	r2, [pc, #444]	; (8006448 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d004      	beq.n	800629a <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006290:	f241 01de 	movw	r1, #4318	; 0x10de
 8006294:	486d      	ldr	r0, [pc, #436]	; (800644c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006296:	f7fb faf8 	bl	800188a <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fe35 	bl	8006f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0208 	orr.w	r2, r2, #8
 80062b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69da      	ldr	r2, [r3, #28]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0204 	bic.w	r2, r2, #4
 80062c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69d9      	ldr	r1, [r3, #28]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	61da      	str	r2, [r3, #28]
      break;
 80062d8:	e0a5      	b.n	8006426 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a56      	ldr	r2, [pc, #344]	; (8006438 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d01d      	beq.n	8006320 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ec:	d018      	beq.n	8006320 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a52      	ldr	r2, [pc, #328]	; (800643c <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d013      	beq.n	8006320 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a50      	ldr	r2, [pc, #320]	; (8006440 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00e      	beq.n	8006320 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a4f      	ldr	r2, [pc, #316]	; (8006444 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d009      	beq.n	8006320 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a4d      	ldr	r2, [pc, #308]	; (8006448 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d004      	beq.n	8006320 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006316:	f241 01ef 	movw	r1, #4335	; 0x10ef
 800631a:	484c      	ldr	r0, [pc, #304]	; (800644c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800631c:	f7fb fab5 	bl	800188a <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68b9      	ldr	r1, [r7, #8]
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fe92 	bl	8007050 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	69da      	ldr	r2, [r3, #28]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800633a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	69da      	ldr	r2, [r3, #28]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800634a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	69d9      	ldr	r1, [r3, #28]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	021a      	lsls	r2, r3, #8
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	61da      	str	r2, [r3, #28]
      break;
 8006360:	e061      	b.n	8006426 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a34      	ldr	r2, [pc, #208]	; (8006438 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d009      	beq.n	8006380 <HAL_TIM_PWM_ConfigChannel+0x400>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a35      	ldr	r2, [pc, #212]	; (8006448 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d004      	beq.n	8006380 <HAL_TIM_PWM_ConfigChannel+0x400>
 8006376:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800637a:	4834      	ldr	r0, [pc, #208]	; (800644c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800637c:	f7fb fa85 	bl	800188a <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fec8 	bl	800711c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0208 	orr.w	r2, r2, #8
 800639a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0204 	bic.w	r2, r2, #4
 80063aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	691a      	ldr	r2, [r3, #16]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063be:	e032      	b.n	8006426 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a1c      	ldr	r2, [pc, #112]	; (8006438 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d009      	beq.n	80063de <HAL_TIM_PWM_ConfigChannel+0x45e>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a1e      	ldr	r2, [pc, #120]	; (8006448 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d004      	beq.n	80063de <HAL_TIM_PWM_ConfigChannel+0x45e>
 80063d4:	f241 1111 	movw	r1, #4369	; 0x1111
 80063d8:	481c      	ldr	r0, [pc, #112]	; (800644c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80063da:	f7fb fa56 	bl	800188a <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 feeb 	bl	80071c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006408:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	021a      	lsls	r2, r3, #8
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800641e:	e002      	b.n	8006426 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	75fb      	strb	r3, [r7, #23]
      break;
 8006424:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800642e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	40010000 	.word	0x40010000
 800643c:	40000400 	.word	0x40000400
 8006440:	40000800 	.word	0x40000800
 8006444:	40000c00 	.word	0x40000c00
 8006448:	40010400 	.word	0x40010400
 800644c:	08012d9c 	.word	0x08012d9c

08006450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006464:	2b01      	cmp	r3, #1
 8006466:	d101      	bne.n	800646c <HAL_TIM_ConfigClockSource+0x1c>
 8006468:	2302      	movs	r3, #2
 800646a:	e332      	b.n	8006ad2 <HAL_TIM_ConfigClockSource+0x682>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006484:	d029      	beq.n	80064da <HAL_TIM_ConfigClockSource+0x8a>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b70      	cmp	r3, #112	; 0x70
 800648c:	d025      	beq.n	80064da <HAL_TIM_ConfigClockSource+0x8a>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006496:	d020      	beq.n	80064da <HAL_TIM_ConfigClockSource+0x8a>
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b40      	cmp	r3, #64	; 0x40
 800649e:	d01c      	beq.n	80064da <HAL_TIM_ConfigClockSource+0x8a>
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b50      	cmp	r3, #80	; 0x50
 80064a6:	d018      	beq.n	80064da <HAL_TIM_ConfigClockSource+0x8a>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b60      	cmp	r3, #96	; 0x60
 80064ae:	d014      	beq.n	80064da <HAL_TIM_ConfigClockSource+0x8a>
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d010      	beq.n	80064da <HAL_TIM_ConfigClockSource+0x8a>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b10      	cmp	r3, #16
 80064be:	d00c      	beq.n	80064da <HAL_TIM_ConfigClockSource+0x8a>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b20      	cmp	r3, #32
 80064c6:	d008      	beq.n	80064da <HAL_TIM_ConfigClockSource+0x8a>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b30      	cmp	r3, #48	; 0x30
 80064ce:	d004      	beq.n	80064da <HAL_TIM_ConfigClockSource+0x8a>
 80064d0:	f241 514c 	movw	r1, #5452	; 0x154c
 80064d4:	4893      	ldr	r0, [pc, #588]	; (8006724 <HAL_TIM_ConfigClockSource+0x2d4>)
 80064d6:	f7fb f9d8 	bl	800188a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	4b90      	ldr	r3, [pc, #576]	; (8006728 <HAL_TIM_ConfigClockSource+0x2d8>)
 80064e6:	4013      	ands	r3, r2
 80064e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064f0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006502:	f000 812d 	beq.w	8006760 <HAL_TIM_ConfigClockSource+0x310>
 8006506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650a:	f200 82d5 	bhi.w	8006ab8 <HAL_TIM_ConfigClockSource+0x668>
 800650e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006512:	d02e      	beq.n	8006572 <HAL_TIM_ConfigClockSource+0x122>
 8006514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006518:	f200 82ce 	bhi.w	8006ab8 <HAL_TIM_ConfigClockSource+0x668>
 800651c:	2b70      	cmp	r3, #112	; 0x70
 800651e:	f000 8082 	beq.w	8006626 <HAL_TIM_ConfigClockSource+0x1d6>
 8006522:	2b70      	cmp	r3, #112	; 0x70
 8006524:	f200 82c8 	bhi.w	8006ab8 <HAL_TIM_ConfigClockSource+0x668>
 8006528:	2b60      	cmp	r3, #96	; 0x60
 800652a:	f000 81e0 	beq.w	80068ee <HAL_TIM_ConfigClockSource+0x49e>
 800652e:	2b60      	cmp	r3, #96	; 0x60
 8006530:	f200 82c2 	bhi.w	8006ab8 <HAL_TIM_ConfigClockSource+0x668>
 8006534:	2b50      	cmp	r3, #80	; 0x50
 8006536:	f000 8184 	beq.w	8006842 <HAL_TIM_ConfigClockSource+0x3f2>
 800653a:	2b50      	cmp	r3, #80	; 0x50
 800653c:	f200 82bc 	bhi.w	8006ab8 <HAL_TIM_ConfigClockSource+0x668>
 8006540:	2b40      	cmp	r3, #64	; 0x40
 8006542:	f000 8237 	beq.w	80069b4 <HAL_TIM_ConfigClockSource+0x564>
 8006546:	2b40      	cmp	r3, #64	; 0x40
 8006548:	f200 82b6 	bhi.w	8006ab8 <HAL_TIM_ConfigClockSource+0x668>
 800654c:	2b30      	cmp	r3, #48	; 0x30
 800654e:	f000 8287 	beq.w	8006a60 <HAL_TIM_ConfigClockSource+0x610>
 8006552:	2b30      	cmp	r3, #48	; 0x30
 8006554:	f200 82b0 	bhi.w	8006ab8 <HAL_TIM_ConfigClockSource+0x668>
 8006558:	2b20      	cmp	r3, #32
 800655a:	f000 8281 	beq.w	8006a60 <HAL_TIM_ConfigClockSource+0x610>
 800655e:	2b20      	cmp	r3, #32
 8006560:	f200 82aa 	bhi.w	8006ab8 <HAL_TIM_ConfigClockSource+0x668>
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 827b 	beq.w	8006a60 <HAL_TIM_ConfigClockSource+0x610>
 800656a:	2b10      	cmp	r3, #16
 800656c:	f000 8278 	beq.w	8006a60 <HAL_TIM_ConfigClockSource+0x610>
 8006570:	e2a2      	b.n	8006ab8 <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a6d      	ldr	r2, [pc, #436]	; (800672c <HAL_TIM_ConfigClockSource+0x2dc>)
 8006578:	4293      	cmp	r3, r2
 800657a:	f000 82a0 	beq.w	8006abe <HAL_TIM_ConfigClockSource+0x66e>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006586:	f000 829a 	beq.w	8006abe <HAL_TIM_ConfigClockSource+0x66e>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a68      	ldr	r2, [pc, #416]	; (8006730 <HAL_TIM_ConfigClockSource+0x2e0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	f000 8294 	beq.w	8006abe <HAL_TIM_ConfigClockSource+0x66e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a66      	ldr	r2, [pc, #408]	; (8006734 <HAL_TIM_ConfigClockSource+0x2e4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	f000 828e 	beq.w	8006abe <HAL_TIM_ConfigClockSource+0x66e>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a64      	ldr	r2, [pc, #400]	; (8006738 <HAL_TIM_ConfigClockSource+0x2e8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	f000 8288 	beq.w	8006abe <HAL_TIM_ConfigClockSource+0x66e>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a62      	ldr	r2, [pc, #392]	; (800673c <HAL_TIM_ConfigClockSource+0x2ec>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	f000 8282 	beq.w	8006abe <HAL_TIM_ConfigClockSource+0x66e>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a60      	ldr	r2, [pc, #384]	; (8006740 <HAL_TIM_ConfigClockSource+0x2f0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	f000 827c 	beq.w	8006abe <HAL_TIM_ConfigClockSource+0x66e>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a5e      	ldr	r2, [pc, #376]	; (8006744 <HAL_TIM_ConfigClockSource+0x2f4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	f000 8276 	beq.w	8006abe <HAL_TIM_ConfigClockSource+0x66e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a5c      	ldr	r2, [pc, #368]	; (8006748 <HAL_TIM_ConfigClockSource+0x2f8>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	f000 8270 	beq.w	8006abe <HAL_TIM_ConfigClockSource+0x66e>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a5a      	ldr	r2, [pc, #360]	; (800674c <HAL_TIM_ConfigClockSource+0x2fc>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	f000 826a 	beq.w	8006abe <HAL_TIM_ConfigClockSource+0x66e>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a58      	ldr	r2, [pc, #352]	; (8006750 <HAL_TIM_ConfigClockSource+0x300>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	f000 8264 	beq.w	8006abe <HAL_TIM_ConfigClockSource+0x66e>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a56      	ldr	r2, [pc, #344]	; (8006754 <HAL_TIM_ConfigClockSource+0x304>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	f000 825e 	beq.w	8006abe <HAL_TIM_ConfigClockSource+0x66e>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a54      	ldr	r2, [pc, #336]	; (8006758 <HAL_TIM_ConfigClockSource+0x308>)
 8006608:	4293      	cmp	r3, r2
 800660a:	f000 8258 	beq.w	8006abe <HAL_TIM_ConfigClockSource+0x66e>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a52      	ldr	r2, [pc, #328]	; (800675c <HAL_TIM_ConfigClockSource+0x30c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	f000 8252 	beq.w	8006abe <HAL_TIM_ConfigClockSource+0x66e>
 800661a:	f241 5158 	movw	r1, #5464	; 0x1558
 800661e:	4841      	ldr	r0, [pc, #260]	; (8006724 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006620:	f7fb f933 	bl	800188a <assert_failed>
      break;
 8006624:	e24b      	b.n	8006abe <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a40      	ldr	r2, [pc, #256]	; (800672c <HAL_TIM_ConfigClockSource+0x2dc>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d027      	beq.n	8006680 <HAL_TIM_ConfigClockSource+0x230>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006638:	d022      	beq.n	8006680 <HAL_TIM_ConfigClockSource+0x230>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a3c      	ldr	r2, [pc, #240]	; (8006730 <HAL_TIM_ConfigClockSource+0x2e0>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d01d      	beq.n	8006680 <HAL_TIM_ConfigClockSource+0x230>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a3a      	ldr	r2, [pc, #232]	; (8006734 <HAL_TIM_ConfigClockSource+0x2e4>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d018      	beq.n	8006680 <HAL_TIM_ConfigClockSource+0x230>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a39      	ldr	r2, [pc, #228]	; (8006738 <HAL_TIM_ConfigClockSource+0x2e8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d013      	beq.n	8006680 <HAL_TIM_ConfigClockSource+0x230>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a39      	ldr	r2, [pc, #228]	; (8006744 <HAL_TIM_ConfigClockSource+0x2f4>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00e      	beq.n	8006680 <HAL_TIM_ConfigClockSource+0x230>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a38      	ldr	r2, [pc, #224]	; (8006748 <HAL_TIM_ConfigClockSource+0x2f8>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d009      	beq.n	8006680 <HAL_TIM_ConfigClockSource+0x230>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a38      	ldr	r2, [pc, #224]	; (8006754 <HAL_TIM_ConfigClockSource+0x304>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d004      	beq.n	8006680 <HAL_TIM_ConfigClockSource+0x230>
 8006676:	f241 515f 	movw	r1, #5471	; 0x155f
 800667a:	482a      	ldr	r0, [pc, #168]	; (8006724 <HAL_TIM_ConfigClockSource+0x2d4>)
 800667c:	f7fb f905 	bl	800188a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d013      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0x260>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006690:	d00e      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0x260>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800669a:	d009      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0x260>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066a4:	d004      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0x260>
 80066a6:	f241 5162 	movw	r1, #5474	; 0x1562
 80066aa:	481e      	ldr	r0, [pc, #120]	; (8006724 <HAL_TIM_ConfigClockSource+0x2d4>)
 80066ac:	f7fb f8ed 	bl	800188a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b8:	d014      	beq.n	80066e4 <HAL_TIM_ConfigClockSource+0x294>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d010      	beq.n	80066e4 <HAL_TIM_ConfigClockSource+0x294>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00c      	beq.n	80066e4 <HAL_TIM_ConfigClockSource+0x294>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d008      	beq.n	80066e4 <HAL_TIM_ConfigClockSource+0x294>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2b0a      	cmp	r3, #10
 80066d8:	d004      	beq.n	80066e4 <HAL_TIM_ConfigClockSource+0x294>
 80066da:	f241 5163 	movw	r1, #5475	; 0x1563
 80066de:	4811      	ldr	r0, [pc, #68]	; (8006724 <HAL_TIM_ConfigClockSource+0x2d4>)
 80066e0:	f7fb f8d3 	bl	800188a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	2b0f      	cmp	r3, #15
 80066ea:	d904      	bls.n	80066f6 <HAL_TIM_ConfigClockSource+0x2a6>
 80066ec:	f241 5164 	movw	r1, #5476	; 0x1564
 80066f0:	480c      	ldr	r0, [pc, #48]	; (8006724 <HAL_TIM_ConfigClockSource+0x2d4>)
 80066f2:	f7fb f8ca 	bl	800188a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6899      	ldr	r1, [r3, #8]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f000 fe29 	bl	800735c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006718:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	609a      	str	r2, [r3, #8]
      break;
 8006722:	e1cd      	b.n	8006ac0 <HAL_TIM_ConfigClockSource+0x670>
 8006724:	08012d9c 	.word	0x08012d9c
 8006728:	fffeff88 	.word	0xfffeff88
 800672c:	40010000 	.word	0x40010000
 8006730:	40000400 	.word	0x40000400
 8006734:	40000800 	.word	0x40000800
 8006738:	40000c00 	.word	0x40000c00
 800673c:	40001000 	.word	0x40001000
 8006740:	40001400 	.word	0x40001400
 8006744:	40010400 	.word	0x40010400
 8006748:	40014000 	.word	0x40014000
 800674c:	40014400 	.word	0x40014400
 8006750:	40014800 	.word	0x40014800
 8006754:	40001800 	.word	0x40001800
 8006758:	40001c00 	.word	0x40001c00
 800675c:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a8d      	ldr	r2, [pc, #564]	; (800699c <HAL_TIM_ConfigClockSource+0x54c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d01d      	beq.n	80067a6 <HAL_TIM_ConfigClockSource+0x356>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006772:	d018      	beq.n	80067a6 <HAL_TIM_ConfigClockSource+0x356>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a89      	ldr	r2, [pc, #548]	; (80069a0 <HAL_TIM_ConfigClockSource+0x550>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d013      	beq.n	80067a6 <HAL_TIM_ConfigClockSource+0x356>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a88      	ldr	r2, [pc, #544]	; (80069a4 <HAL_TIM_ConfigClockSource+0x554>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00e      	beq.n	80067a6 <HAL_TIM_ConfigClockSource+0x356>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a86      	ldr	r2, [pc, #536]	; (80069a8 <HAL_TIM_ConfigClockSource+0x558>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d009      	beq.n	80067a6 <HAL_TIM_ConfigClockSource+0x356>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a85      	ldr	r2, [pc, #532]	; (80069ac <HAL_TIM_ConfigClockSource+0x55c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d004      	beq.n	80067a6 <HAL_TIM_ConfigClockSource+0x356>
 800679c:	f241 5177 	movw	r1, #5495	; 0x1577
 80067a0:	4883      	ldr	r0, [pc, #524]	; (80069b0 <HAL_TIM_ConfigClockSource+0x560>)
 80067a2:	f7fb f872 	bl	800188a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d013      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x386>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b6:	d00e      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x386>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c0:	d009      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x386>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067ca:	d004      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x386>
 80067cc:	f241 517a 	movw	r1, #5498	; 0x157a
 80067d0:	4877      	ldr	r0, [pc, #476]	; (80069b0 <HAL_TIM_ConfigClockSource+0x560>)
 80067d2:	f7fb f85a 	bl	800188a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067de:	d014      	beq.n	800680a <HAL_TIM_ConfigClockSource+0x3ba>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d010      	beq.n	800680a <HAL_TIM_ConfigClockSource+0x3ba>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00c      	beq.n	800680a <HAL_TIM_ConfigClockSource+0x3ba>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d008      	beq.n	800680a <HAL_TIM_ConfigClockSource+0x3ba>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2b0a      	cmp	r3, #10
 80067fe:	d004      	beq.n	800680a <HAL_TIM_ConfigClockSource+0x3ba>
 8006800:	f241 517b 	movw	r1, #5499	; 0x157b
 8006804:	486a      	ldr	r0, [pc, #424]	; (80069b0 <HAL_TIM_ConfigClockSource+0x560>)
 8006806:	f7fb f840 	bl	800188a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	2b0f      	cmp	r3, #15
 8006810:	d904      	bls.n	800681c <HAL_TIM_ConfigClockSource+0x3cc>
 8006812:	f241 517c 	movw	r1, #5500	; 0x157c
 8006816:	4866      	ldr	r0, [pc, #408]	; (80069b0 <HAL_TIM_ConfigClockSource+0x560>)
 8006818:	f7fb f837 	bl	800188a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	6899      	ldr	r1, [r3, #8]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f000 fd96 	bl	800735c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689a      	ldr	r2, [r3, #8]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800683e:	609a      	str	r2, [r3, #8]
      break;
 8006840:	e13e      	b.n	8006ac0 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a55      	ldr	r2, [pc, #340]	; (800699c <HAL_TIM_ConfigClockSource+0x54c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d01d      	beq.n	8006888 <HAL_TIM_ConfigClockSource+0x438>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006854:	d018      	beq.n	8006888 <HAL_TIM_ConfigClockSource+0x438>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a51      	ldr	r2, [pc, #324]	; (80069a0 <HAL_TIM_ConfigClockSource+0x550>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d013      	beq.n	8006888 <HAL_TIM_ConfigClockSource+0x438>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a4f      	ldr	r2, [pc, #316]	; (80069a4 <HAL_TIM_ConfigClockSource+0x554>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d00e      	beq.n	8006888 <HAL_TIM_ConfigClockSource+0x438>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a4e      	ldr	r2, [pc, #312]	; (80069a8 <HAL_TIM_ConfigClockSource+0x558>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d009      	beq.n	8006888 <HAL_TIM_ConfigClockSource+0x438>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a4c      	ldr	r2, [pc, #304]	; (80069ac <HAL_TIM_ConfigClockSource+0x55c>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d004      	beq.n	8006888 <HAL_TIM_ConfigClockSource+0x438>
 800687e:	f241 518b 	movw	r1, #5515	; 0x158b
 8006882:	484b      	ldr	r0, [pc, #300]	; (80069b0 <HAL_TIM_ConfigClockSource+0x560>)
 8006884:	f7fb f801 	bl	800188a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006890:	d014      	beq.n	80068bc <HAL_TIM_ConfigClockSource+0x46c>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d010      	beq.n	80068bc <HAL_TIM_ConfigClockSource+0x46c>
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00c      	beq.n	80068bc <HAL_TIM_ConfigClockSource+0x46c>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d008      	beq.n	80068bc <HAL_TIM_ConfigClockSource+0x46c>
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	2b0a      	cmp	r3, #10
 80068b0:	d004      	beq.n	80068bc <HAL_TIM_ConfigClockSource+0x46c>
 80068b2:	f241 518e 	movw	r1, #5518	; 0x158e
 80068b6:	483e      	ldr	r0, [pc, #248]	; (80069b0 <HAL_TIM_ConfigClockSource+0x560>)
 80068b8:	f7fa ffe7 	bl	800188a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	2b0f      	cmp	r3, #15
 80068c2:	d904      	bls.n	80068ce <HAL_TIM_ConfigClockSource+0x47e>
 80068c4:	f241 518f 	movw	r1, #5519	; 0x158f
 80068c8:	4839      	ldr	r0, [pc, #228]	; (80069b0 <HAL_TIM_ConfigClockSource+0x560>)
 80068ca:	f7fa ffde 	bl	800188a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	6859      	ldr	r1, [r3, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	461a      	mov	r2, r3
 80068dc:	f000 fcc4 	bl	8007268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2150      	movs	r1, #80	; 0x50
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fd1d 	bl	8007326 <TIM_ITRx_SetConfig>
      break;
 80068ec:	e0e8      	b.n	8006ac0 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a2a      	ldr	r2, [pc, #168]	; (800699c <HAL_TIM_ConfigClockSource+0x54c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d01d      	beq.n	8006934 <HAL_TIM_ConfigClockSource+0x4e4>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006900:	d018      	beq.n	8006934 <HAL_TIM_ConfigClockSource+0x4e4>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a26      	ldr	r2, [pc, #152]	; (80069a0 <HAL_TIM_ConfigClockSource+0x550>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d013      	beq.n	8006934 <HAL_TIM_ConfigClockSource+0x4e4>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a24      	ldr	r2, [pc, #144]	; (80069a4 <HAL_TIM_ConfigClockSource+0x554>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d00e      	beq.n	8006934 <HAL_TIM_ConfigClockSource+0x4e4>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a23      	ldr	r2, [pc, #140]	; (80069a8 <HAL_TIM_ConfigClockSource+0x558>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d009      	beq.n	8006934 <HAL_TIM_ConfigClockSource+0x4e4>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a21      	ldr	r2, [pc, #132]	; (80069ac <HAL_TIM_ConfigClockSource+0x55c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d004      	beq.n	8006934 <HAL_TIM_ConfigClockSource+0x4e4>
 800692a:	f241 519b 	movw	r1, #5531	; 0x159b
 800692e:	4820      	ldr	r0, [pc, #128]	; (80069b0 <HAL_TIM_ConfigClockSource+0x560>)
 8006930:	f7fa ffab 	bl	800188a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800693c:	d014      	beq.n	8006968 <HAL_TIM_ConfigClockSource+0x518>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d010      	beq.n	8006968 <HAL_TIM_ConfigClockSource+0x518>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00c      	beq.n	8006968 <HAL_TIM_ConfigClockSource+0x518>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2b02      	cmp	r3, #2
 8006954:	d008      	beq.n	8006968 <HAL_TIM_ConfigClockSource+0x518>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2b0a      	cmp	r3, #10
 800695c:	d004      	beq.n	8006968 <HAL_TIM_ConfigClockSource+0x518>
 800695e:	f241 519e 	movw	r1, #5534	; 0x159e
 8006962:	4813      	ldr	r0, [pc, #76]	; (80069b0 <HAL_TIM_ConfigClockSource+0x560>)
 8006964:	f7fa ff91 	bl	800188a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	2b0f      	cmp	r3, #15
 800696e:	d904      	bls.n	800697a <HAL_TIM_ConfigClockSource+0x52a>
 8006970:	f241 519f 	movw	r1, #5535	; 0x159f
 8006974:	480e      	ldr	r0, [pc, #56]	; (80069b0 <HAL_TIM_ConfigClockSource+0x560>)
 8006976:	f7fa ff88 	bl	800188a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	6859      	ldr	r1, [r3, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	461a      	mov	r2, r3
 8006988:	f000 fc9d 	bl	80072c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2160      	movs	r1, #96	; 0x60
 8006992:	4618      	mov	r0, r3
 8006994:	f000 fcc7 	bl	8007326 <TIM_ITRx_SetConfig>
      break;
 8006998:	e092      	b.n	8006ac0 <HAL_TIM_ConfigClockSource+0x670>
 800699a:	bf00      	nop
 800699c:	40010000 	.word	0x40010000
 80069a0:	40000400 	.word	0x40000400
 80069a4:	40000800 	.word	0x40000800
 80069a8:	40000c00 	.word	0x40000c00
 80069ac:	40010400 	.word	0x40010400
 80069b0:	08012d9c 	.word	0x08012d9c
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a48      	ldr	r2, [pc, #288]	; (8006adc <HAL_TIM_ConfigClockSource+0x68c>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d01d      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x5aa>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c6:	d018      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x5aa>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a44      	ldr	r2, [pc, #272]	; (8006ae0 <HAL_TIM_ConfigClockSource+0x690>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d013      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x5aa>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a43      	ldr	r2, [pc, #268]	; (8006ae4 <HAL_TIM_ConfigClockSource+0x694>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00e      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x5aa>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a41      	ldr	r2, [pc, #260]	; (8006ae8 <HAL_TIM_ConfigClockSource+0x698>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d009      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x5aa>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a40      	ldr	r2, [pc, #256]	; (8006aec <HAL_TIM_ConfigClockSource+0x69c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d004      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x5aa>
 80069f0:	f241 51ab 	movw	r1, #5547	; 0x15ab
 80069f4:	483e      	ldr	r0, [pc, #248]	; (8006af0 <HAL_TIM_ConfigClockSource+0x6a0>)
 80069f6:	f7fa ff48 	bl	800188a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a02:	d014      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x5de>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d010      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x5de>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00c      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x5de>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d008      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x5de>
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2b0a      	cmp	r3, #10
 8006a22:	d004      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x5de>
 8006a24:	f241 51ae 	movw	r1, #5550	; 0x15ae
 8006a28:	4831      	ldr	r0, [pc, #196]	; (8006af0 <HAL_TIM_ConfigClockSource+0x6a0>)
 8006a2a:	f7fa ff2e 	bl	800188a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	2b0f      	cmp	r3, #15
 8006a34:	d904      	bls.n	8006a40 <HAL_TIM_ConfigClockSource+0x5f0>
 8006a36:	f241 51af 	movw	r1, #5551	; 0x15af
 8006a3a:	482d      	ldr	r0, [pc, #180]	; (8006af0 <HAL_TIM_ConfigClockSource+0x6a0>)
 8006a3c:	f7fa ff25 	bl	800188a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6818      	ldr	r0, [r3, #0]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	6859      	ldr	r1, [r3, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f000 fc0b 	bl	8007268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2140      	movs	r1, #64	; 0x40
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fc64 	bl	8007326 <TIM_ITRx_SetConfig>
      break;
 8006a5e:	e02f      	b.n	8006ac0 <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1d      	ldr	r2, [pc, #116]	; (8006adc <HAL_TIM_ConfigClockSource+0x68c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d01d      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x656>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a72:	d018      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x656>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a19      	ldr	r2, [pc, #100]	; (8006ae0 <HAL_TIM_ConfigClockSource+0x690>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d013      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x656>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a18      	ldr	r2, [pc, #96]	; (8006ae4 <HAL_TIM_ConfigClockSource+0x694>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d00e      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x656>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a16      	ldr	r2, [pc, #88]	; (8006ae8 <HAL_TIM_ConfigClockSource+0x698>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d009      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x656>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a15      	ldr	r2, [pc, #84]	; (8006aec <HAL_TIM_ConfigClockSource+0x69c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d004      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x656>
 8006a9c:	f241 51be 	movw	r1, #5566	; 0x15be
 8006aa0:	4813      	ldr	r0, [pc, #76]	; (8006af0 <HAL_TIM_ConfigClockSource+0x6a0>)
 8006aa2:	f7fa fef2 	bl	800188a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	f000 fc38 	bl	8007326 <TIM_ITRx_SetConfig>
      break;
 8006ab6:	e003      	b.n	8006ac0 <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	73fb      	strb	r3, [r7, #15]
      break;
 8006abc:	e000      	b.n	8006ac0 <HAL_TIM_ConfigClockSource+0x670>
      break;
 8006abe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	40010000 	.word	0x40010000
 8006ae0:	40000400 	.word	0x40000400
 8006ae4:	40000800 	.word	0x40000800
 8006ae8:	40000c00 	.word	0x40000c00
 8006aec:	40010400 	.word	0x40010400
 8006af0:	08012d9c 	.word	0x08012d9c

08006af4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a40      	ldr	r2, [pc, #256]	; (8006c6c <TIM_Base_SetConfig+0x114>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d013      	beq.n	8006b98 <TIM_Base_SetConfig+0x40>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b76:	d00f      	beq.n	8006b98 <TIM_Base_SetConfig+0x40>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a3d      	ldr	r2, [pc, #244]	; (8006c70 <TIM_Base_SetConfig+0x118>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00b      	beq.n	8006b98 <TIM_Base_SetConfig+0x40>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a3c      	ldr	r2, [pc, #240]	; (8006c74 <TIM_Base_SetConfig+0x11c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d007      	beq.n	8006b98 <TIM_Base_SetConfig+0x40>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a3b      	ldr	r2, [pc, #236]	; (8006c78 <TIM_Base_SetConfig+0x120>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d003      	beq.n	8006b98 <TIM_Base_SetConfig+0x40>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a3a      	ldr	r2, [pc, #232]	; (8006c7c <TIM_Base_SetConfig+0x124>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d108      	bne.n	8006baa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a2f      	ldr	r2, [pc, #188]	; (8006c6c <TIM_Base_SetConfig+0x114>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d02b      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb8:	d027      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a2c      	ldr	r2, [pc, #176]	; (8006c70 <TIM_Base_SetConfig+0x118>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d023      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a2b      	ldr	r2, [pc, #172]	; (8006c74 <TIM_Base_SetConfig+0x11c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d01f      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a2a      	ldr	r2, [pc, #168]	; (8006c78 <TIM_Base_SetConfig+0x120>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d01b      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a29      	ldr	r2, [pc, #164]	; (8006c7c <TIM_Base_SetConfig+0x124>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d017      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a28      	ldr	r2, [pc, #160]	; (8006c80 <TIM_Base_SetConfig+0x128>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d013      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a27      	ldr	r2, [pc, #156]	; (8006c84 <TIM_Base_SetConfig+0x12c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d00f      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a26      	ldr	r2, [pc, #152]	; (8006c88 <TIM_Base_SetConfig+0x130>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d00b      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a25      	ldr	r2, [pc, #148]	; (8006c8c <TIM_Base_SetConfig+0x134>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d007      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a24      	ldr	r2, [pc, #144]	; (8006c90 <TIM_Base_SetConfig+0x138>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d003      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a23      	ldr	r2, [pc, #140]	; (8006c94 <TIM_Base_SetConfig+0x13c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d108      	bne.n	8006c1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a0a      	ldr	r2, [pc, #40]	; (8006c6c <TIM_Base_SetConfig+0x114>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d003      	beq.n	8006c50 <TIM_Base_SetConfig+0xf8>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a0c      	ldr	r2, [pc, #48]	; (8006c7c <TIM_Base_SetConfig+0x124>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d103      	bne.n	8006c58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	691a      	ldr	r2, [r3, #16]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	615a      	str	r2, [r3, #20]
}
 8006c5e:	bf00      	nop
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	40010000 	.word	0x40010000
 8006c70:	40000400 	.word	0x40000400
 8006c74:	40000800 	.word	0x40000800
 8006c78:	40000c00 	.word	0x40000c00
 8006c7c:	40010400 	.word	0x40010400
 8006c80:	40014000 	.word	0x40014000
 8006c84:	40014400 	.word	0x40014400
 8006c88:	40014800 	.word	0x40014800
 8006c8c:	40001800 	.word	0x40001800
 8006c90:	40001c00 	.word	0x40001c00
 8006c94:	40002000 	.word	0x40002000

08006c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	f023 0201 	bic.w	r2, r3, #1
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	4b3f      	ldr	r3, [pc, #252]	; (8006dc0 <TIM_OC1_SetConfig+0x128>)
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0303 	bic.w	r3, r3, #3
 8006cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f023 0302 	bic.w	r3, r3, #2
 8006ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a35      	ldr	r2, [pc, #212]	; (8006dc4 <TIM_OC1_SetConfig+0x12c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d003      	beq.n	8006cfc <TIM_OC1_SetConfig+0x64>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a34      	ldr	r2, [pc, #208]	; (8006dc8 <TIM_OC1_SetConfig+0x130>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d119      	bne.n	8006d30 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d008      	beq.n	8006d16 <TIM_OC1_SetConfig+0x7e>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d004      	beq.n	8006d16 <TIM_OC1_SetConfig+0x7e>
 8006d0c:	f641 3167 	movw	r1, #7015	; 0x1b67
 8006d10:	482e      	ldr	r0, [pc, #184]	; (8006dcc <TIM_OC1_SetConfig+0x134>)
 8006d12:	f7fa fdba 	bl	800188a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f023 0308 	bic.w	r3, r3, #8
 8006d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f023 0304 	bic.w	r3, r3, #4
 8006d2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a24      	ldr	r2, [pc, #144]	; (8006dc4 <TIM_OC1_SetConfig+0x12c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d003      	beq.n	8006d40 <TIM_OC1_SetConfig+0xa8>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a23      	ldr	r2, [pc, #140]	; (8006dc8 <TIM_OC1_SetConfig+0x130>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d12d      	bne.n	8006d9c <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d48:	d008      	beq.n	8006d5c <TIM_OC1_SetConfig+0xc4>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d004      	beq.n	8006d5c <TIM_OC1_SetConfig+0xc4>
 8006d52:	f641 3174 	movw	r1, #7028	; 0x1b74
 8006d56:	481d      	ldr	r0, [pc, #116]	; (8006dcc <TIM_OC1_SetConfig+0x134>)
 8006d58:	f7fa fd97 	bl	800188a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d64:	d008      	beq.n	8006d78 <TIM_OC1_SetConfig+0xe0>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d004      	beq.n	8006d78 <TIM_OC1_SetConfig+0xe0>
 8006d6e:	f641 3175 	movw	r1, #7029	; 0x1b75
 8006d72:	4816      	ldr	r0, [pc, #88]	; (8006dcc <TIM_OC1_SetConfig+0x134>)
 8006d74:	f7fa fd89 	bl	800188a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	621a      	str	r2, [r3, #32]
}
 8006db6:	bf00      	nop
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	fffeff8f 	.word	0xfffeff8f
 8006dc4:	40010000 	.word	0x40010000
 8006dc8:	40010400 	.word	0x40010400
 8006dcc:	08012d9c 	.word	0x08012d9c

08006dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	f023 0210 	bic.w	r2, r3, #16
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	4b41      	ldr	r3, [pc, #260]	; (8006f00 <TIM_OC2_SetConfig+0x130>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f023 0320 	bic.w	r3, r3, #32
 8006e1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a36      	ldr	r2, [pc, #216]	; (8006f04 <TIM_OC2_SetConfig+0x134>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d003      	beq.n	8006e38 <TIM_OC2_SetConfig+0x68>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a35      	ldr	r2, [pc, #212]	; (8006f08 <TIM_OC2_SetConfig+0x138>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d11a      	bne.n	8006e6e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d008      	beq.n	8006e52 <TIM_OC2_SetConfig+0x82>
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d004      	beq.n	8006e52 <TIM_OC2_SetConfig+0x82>
 8006e48:	f641 31b2 	movw	r1, #7090	; 0x1bb2
 8006e4c:	482f      	ldr	r0, [pc, #188]	; (8006f0c <TIM_OC2_SetConfig+0x13c>)
 8006e4e:	f7fa fd1c 	bl	800188a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	011b      	lsls	r3, r3, #4
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a24      	ldr	r2, [pc, #144]	; (8006f04 <TIM_OC2_SetConfig+0x134>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d003      	beq.n	8006e7e <TIM_OC2_SetConfig+0xae>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a23      	ldr	r2, [pc, #140]	; (8006f08 <TIM_OC2_SetConfig+0x138>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d12f      	bne.n	8006ede <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e86:	d008      	beq.n	8006e9a <TIM_OC2_SetConfig+0xca>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d004      	beq.n	8006e9a <TIM_OC2_SetConfig+0xca>
 8006e90:	f44f 51de 	mov.w	r1, #7104	; 0x1bc0
 8006e94:	481d      	ldr	r0, [pc, #116]	; (8006f0c <TIM_OC2_SetConfig+0x13c>)
 8006e96:	f7fa fcf8 	bl	800188a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ea2:	d008      	beq.n	8006eb6 <TIM_OC2_SetConfig+0xe6>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d004      	beq.n	8006eb6 <TIM_OC2_SetConfig+0xe6>
 8006eac:	f641 31c1 	movw	r1, #7105	; 0x1bc1
 8006eb0:	4816      	ldr	r0, [pc, #88]	; (8006f0c <TIM_OC2_SetConfig+0x13c>)
 8006eb2:	f7fa fcea 	bl	800188a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	621a      	str	r2, [r3, #32]
}
 8006ef8:	bf00      	nop
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	feff8fff 	.word	0xfeff8fff
 8006f04:	40010000 	.word	0x40010000
 8006f08:	40010400 	.word	0x40010400
 8006f0c:	08012d9c 	.word	0x08012d9c

08006f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4b41      	ldr	r3, [pc, #260]	; (8007040 <TIM_OC3_SetConfig+0x130>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f023 0303 	bic.w	r3, r3, #3
 8006f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a36      	ldr	r2, [pc, #216]	; (8007044 <TIM_OC3_SetConfig+0x134>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d003      	beq.n	8006f76 <TIM_OC3_SetConfig+0x66>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a35      	ldr	r2, [pc, #212]	; (8007048 <TIM_OC3_SetConfig+0x138>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d11a      	bne.n	8006fac <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d008      	beq.n	8006f90 <TIM_OC3_SetConfig+0x80>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	2b08      	cmp	r3, #8
 8006f84:	d004      	beq.n	8006f90 <TIM_OC3_SetConfig+0x80>
 8006f86:	f641 31fd 	movw	r1, #7165	; 0x1bfd
 8006f8a:	4830      	ldr	r0, [pc, #192]	; (800704c <TIM_OC3_SetConfig+0x13c>)
 8006f8c:	f7fa fc7d 	bl	800188a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	021b      	lsls	r3, r3, #8
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006faa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a25      	ldr	r2, [pc, #148]	; (8007044 <TIM_OC3_SetConfig+0x134>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d003      	beq.n	8006fbc <TIM_OC3_SetConfig+0xac>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a24      	ldr	r2, [pc, #144]	; (8007048 <TIM_OC3_SetConfig+0x138>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d12f      	bne.n	800701c <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fc4:	d008      	beq.n	8006fd8 <TIM_OC3_SetConfig+0xc8>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d004      	beq.n	8006fd8 <TIM_OC3_SetConfig+0xc8>
 8006fce:	f641 410a 	movw	r1, #7178	; 0x1c0a
 8006fd2:	481e      	ldr	r0, [pc, #120]	; (800704c <TIM_OC3_SetConfig+0x13c>)
 8006fd4:	f7fa fc59 	bl	800188a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fe0:	d008      	beq.n	8006ff4 <TIM_OC3_SetConfig+0xe4>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d004      	beq.n	8006ff4 <TIM_OC3_SetConfig+0xe4>
 8006fea:	f641 410b 	movw	r1, #7179	; 0x1c0b
 8006fee:	4817      	ldr	r0, [pc, #92]	; (800704c <TIM_OC3_SetConfig+0x13c>)
 8006ff0:	f7fa fc4b 	bl	800188a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ffa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007002:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	011b      	lsls	r3, r3, #4
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	4313      	orrs	r3, r2
 800700e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	011b      	lsls	r3, r3, #4
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	4313      	orrs	r3, r2
 800701a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	621a      	str	r2, [r3, #32]
}
 8007036:	bf00      	nop
 8007038:	3718      	adds	r7, #24
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	fffeff8f 	.word	0xfffeff8f
 8007044:	40010000 	.word	0x40010000
 8007048:	40010400 	.word	0x40010400
 800704c:	08012d9c 	.word	0x08012d9c

08007050 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4b24      	ldr	r3, [pc, #144]	; (800710c <TIM_OC4_SetConfig+0xbc>)
 800707c:	4013      	ands	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	021b      	lsls	r3, r3, #8
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800709a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	031b      	lsls	r3, r3, #12
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a19      	ldr	r2, [pc, #100]	; (8007110 <TIM_OC4_SetConfig+0xc0>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d003      	beq.n	80070b8 <TIM_OC4_SetConfig+0x68>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a18      	ldr	r2, [pc, #96]	; (8007114 <TIM_OC4_SetConfig+0xc4>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d117      	bne.n	80070e8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c0:	d008      	beq.n	80070d4 <TIM_OC4_SetConfig+0x84>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d004      	beq.n	80070d4 <TIM_OC4_SetConfig+0x84>
 80070ca:	f641 4149 	movw	r1, #7241	; 0x1c49
 80070ce:	4812      	ldr	r0, [pc, #72]	; (8007118 <TIM_OC4_SetConfig+0xc8>)
 80070d0:	f7fa fbdb 	bl	800188a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	019b      	lsls	r3, r3, #6
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	621a      	str	r2, [r3, #32]
}
 8007102:	bf00      	nop
 8007104:	3718      	adds	r7, #24
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	feff8fff 	.word	0xfeff8fff
 8007110:	40010000 	.word	0x40010000
 8007114:	40010400 	.word	0x40010400
 8007118:	08012d9c 	.word	0x08012d9c

0800711c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	4b1b      	ldr	r3, [pc, #108]	; (80071b4 <TIM_OC5_SetConfig+0x98>)
 8007148:	4013      	ands	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800715c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	041b      	lsls	r3, r3, #16
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	4313      	orrs	r3, r2
 8007168:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a12      	ldr	r2, [pc, #72]	; (80071b8 <TIM_OC5_SetConfig+0x9c>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d003      	beq.n	800717a <TIM_OC5_SetConfig+0x5e>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a11      	ldr	r2, [pc, #68]	; (80071bc <TIM_OC5_SetConfig+0xa0>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d109      	bne.n	800718e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007180:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	021b      	lsls	r3, r3, #8
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	4313      	orrs	r3, r2
 800718c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	621a      	str	r2, [r3, #32]
}
 80071a8:	bf00      	nop
 80071aa:	371c      	adds	r7, #28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	fffeff8f 	.word	0xfffeff8f
 80071b8:	40010000 	.word	0x40010000
 80071bc:	40010400 	.word	0x40010400

080071c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	4b1c      	ldr	r3, [pc, #112]	; (800725c <TIM_OC6_SetConfig+0x9c>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	021b      	lsls	r3, r3, #8
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	051b      	lsls	r3, r3, #20
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a13      	ldr	r2, [pc, #76]	; (8007260 <TIM_OC6_SetConfig+0xa0>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d003      	beq.n	8007220 <TIM_OC6_SetConfig+0x60>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a12      	ldr	r2, [pc, #72]	; (8007264 <TIM_OC6_SetConfig+0xa4>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d109      	bne.n	8007234 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007226:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	029b      	lsls	r3, r3, #10
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	4313      	orrs	r3, r2
 8007232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	621a      	str	r2, [r3, #32]
}
 800724e:	bf00      	nop
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	feff8fff 	.word	0xfeff8fff
 8007260:	40010000 	.word	0x40010000
 8007264:	40010400 	.word	0x40010400

08007268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f023 0201 	bic.w	r2, r3, #1
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	011b      	lsls	r3, r3, #4
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	4313      	orrs	r3, r2
 800729c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f023 030a 	bic.w	r3, r3, #10
 80072a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	621a      	str	r2, [r3, #32]
}
 80072ba:	bf00      	nop
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b087      	sub	sp, #28
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	f023 0210 	bic.w	r2, r3, #16
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	031b      	lsls	r3, r3, #12
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007302:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	621a      	str	r2, [r3, #32]
}
 800731a:	bf00      	nop
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007326:	b480      	push	{r7}
 8007328:	b085      	sub	sp, #20
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4313      	orrs	r3, r2
 8007344:	f043 0307 	orr.w	r3, r3, #7
 8007348:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	609a      	str	r2, [r3, #8]
}
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007376:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	021a      	lsls	r2, r3, #8
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	431a      	orrs	r2, r3
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4313      	orrs	r3, r2
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	4313      	orrs	r3, r2
 8007388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	609a      	str	r2, [r3, #8]
}
 8007390:	bf00      	nop
 8007392:	371c      	adds	r7, #28
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4a35      	ldr	r2, [pc, #212]	; (8007480 <TIM_CCxChannelCmd+0xe4>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d030      	beq.n	8007412 <TIM_CCxChannelCmd+0x76>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b6:	d02c      	beq.n	8007412 <TIM_CCxChannelCmd+0x76>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4a32      	ldr	r2, [pc, #200]	; (8007484 <TIM_CCxChannelCmd+0xe8>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d028      	beq.n	8007412 <TIM_CCxChannelCmd+0x76>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4a31      	ldr	r2, [pc, #196]	; (8007488 <TIM_CCxChannelCmd+0xec>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d024      	beq.n	8007412 <TIM_CCxChannelCmd+0x76>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	4a30      	ldr	r2, [pc, #192]	; (800748c <TIM_CCxChannelCmd+0xf0>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d020      	beq.n	8007412 <TIM_CCxChannelCmd+0x76>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4a2f      	ldr	r2, [pc, #188]	; (8007490 <TIM_CCxChannelCmd+0xf4>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d01c      	beq.n	8007412 <TIM_CCxChannelCmd+0x76>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4a2e      	ldr	r2, [pc, #184]	; (8007494 <TIM_CCxChannelCmd+0xf8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d018      	beq.n	8007412 <TIM_CCxChannelCmd+0x76>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4a2d      	ldr	r2, [pc, #180]	; (8007498 <TIM_CCxChannelCmd+0xfc>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d014      	beq.n	8007412 <TIM_CCxChannelCmd+0x76>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4a2c      	ldr	r2, [pc, #176]	; (800749c <TIM_CCxChannelCmd+0x100>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d010      	beq.n	8007412 <TIM_CCxChannelCmd+0x76>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4a2b      	ldr	r2, [pc, #172]	; (80074a0 <TIM_CCxChannelCmd+0x104>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d00c      	beq.n	8007412 <TIM_CCxChannelCmd+0x76>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4a2a      	ldr	r2, [pc, #168]	; (80074a4 <TIM_CCxChannelCmd+0x108>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d008      	beq.n	8007412 <TIM_CCxChannelCmd+0x76>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4a29      	ldr	r2, [pc, #164]	; (80074a8 <TIM_CCxChannelCmd+0x10c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d004      	beq.n	8007412 <TIM_CCxChannelCmd+0x76>
 8007408:	f641 61a1 	movw	r1, #7841	; 0x1ea1
 800740c:	4827      	ldr	r0, [pc, #156]	; (80074ac <TIM_CCxChannelCmd+0x110>)
 800740e:	f7fa fa3c 	bl	800188a <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d016      	beq.n	8007446 <TIM_CCxChannelCmd+0xaa>
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2b04      	cmp	r3, #4
 800741c:	d013      	beq.n	8007446 <TIM_CCxChannelCmd+0xaa>
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b08      	cmp	r3, #8
 8007422:	d010      	beq.n	8007446 <TIM_CCxChannelCmd+0xaa>
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2b0c      	cmp	r3, #12
 8007428:	d00d      	beq.n	8007446 <TIM_CCxChannelCmd+0xaa>
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2b10      	cmp	r3, #16
 800742e:	d00a      	beq.n	8007446 <TIM_CCxChannelCmd+0xaa>
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2b14      	cmp	r3, #20
 8007434:	d007      	beq.n	8007446 <TIM_CCxChannelCmd+0xaa>
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b3c      	cmp	r3, #60	; 0x3c
 800743a:	d004      	beq.n	8007446 <TIM_CCxChannelCmd+0xaa>
 800743c:	f641 61a2 	movw	r1, #7842	; 0x1ea2
 8007440:	481a      	ldr	r0, [pc, #104]	; (80074ac <TIM_CCxChannelCmd+0x110>)
 8007442:	f7fa fa22 	bl	800188a <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f003 031f 	and.w	r3, r3, #31
 800744c:	2201      	movs	r2, #1
 800744e:	fa02 f303 	lsl.w	r3, r2, r3
 8007452:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a1a      	ldr	r2, [r3, #32]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	43db      	mvns	r3, r3
 800745c:	401a      	ands	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6a1a      	ldr	r2, [r3, #32]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	f003 031f 	and.w	r3, r3, #31
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	fa01 f303 	lsl.w	r3, r1, r3
 8007472:	431a      	orrs	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	621a      	str	r2, [r3, #32]
}
 8007478:	bf00      	nop
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	40010000 	.word	0x40010000
 8007484:	40000400 	.word	0x40000400
 8007488:	40000800 	.word	0x40000800
 800748c:	40000c00 	.word	0x40000c00
 8007490:	40010400 	.word	0x40010400
 8007494:	40014000 	.word	0x40014000
 8007498:	40014400 	.word	0x40014400
 800749c:	40014800 	.word	0x40014800
 80074a0:	40001800 	.word	0x40001800
 80074a4:	40001c00 	.word	0x40001c00
 80074a8:	40002000 	.word	0x40002000
 80074ac:	08012d9c 	.word	0x08012d9c

080074b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a32      	ldr	r2, [pc, #200]	; (8007588 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d027      	beq.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074cc:	d022      	beq.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a2e      	ldr	r2, [pc, #184]	; (800758c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d01d      	beq.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a2c      	ldr	r2, [pc, #176]	; (8007590 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d018      	beq.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a2b      	ldr	r2, [pc, #172]	; (8007594 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d013      	beq.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a29      	ldr	r2, [pc, #164]	; (8007598 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00e      	beq.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a28      	ldr	r2, [pc, #160]	; (800759c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d009      	beq.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a26      	ldr	r2, [pc, #152]	; (80075a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d004      	beq.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800750a:	f240 71b6 	movw	r1, #1974	; 0x7b6
 800750e:	4825      	ldr	r0, [pc, #148]	; (80075a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007510:	f7fa f9bb 	bl	800188a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d020      	beq.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b10      	cmp	r3, #16
 8007522:	d01c      	beq.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b20      	cmp	r3, #32
 800752a:	d018      	beq.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b30      	cmp	r3, #48	; 0x30
 8007532:	d014      	beq.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b40      	cmp	r3, #64	; 0x40
 800753a:	d010      	beq.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b50      	cmp	r3, #80	; 0x50
 8007542:	d00c      	beq.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b60      	cmp	r3, #96	; 0x60
 800754a:	d008      	beq.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b70      	cmp	r3, #112	; 0x70
 8007552:	d004      	beq.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007554:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8007558:	4812      	ldr	r0, [pc, #72]	; (80075a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800755a:	f7fa f996 	bl	800188a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	2b80      	cmp	r3, #128	; 0x80
 8007564:	d008      	beq.n	8007578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d004      	beq.n	8007578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800756e:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8007572:	480c      	ldr	r0, [pc, #48]	; (80075a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007574:	f7fa f989 	bl	800188a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800757e:	2b01      	cmp	r3, #1
 8007580:	d112      	bne.n	80075a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8007582:	2302      	movs	r3, #2
 8007584:	e0d7      	b.n	8007736 <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8007586:	bf00      	nop
 8007588:	40010000 	.word	0x40010000
 800758c:	40000400 	.word	0x40000400
 8007590:	40000800 	.word	0x40000800
 8007594:	40000c00 	.word	0x40000c00
 8007598:	40001000 	.word	0x40001000
 800759c:	40001400 	.word	0x40001400
 80075a0:	40010400 	.word	0x40010400
 80075a4:	08012dd4 	.word	0x08012dd4
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a5c      	ldr	r2, [pc, #368]	; (8007740 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d004      	beq.n	80075dc <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a5b      	ldr	r2, [pc, #364]	; (8007744 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d161      	bne.n	80076a0 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d054      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075ec:	d04f      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075f6:	d04a      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007600:	d045      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800760a:	d040      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007614:	d03b      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800761e:	d036      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007628:	d031      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8007632:	d02c      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800763c:	d027      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8007646:	d022      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007650:	d01d      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 800765a:	d018      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007664:	d013      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 800766e:	d00e      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8007678:	d009      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8007682:	d004      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007684:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8007688:	482f      	ldr	r0, [pc, #188]	; (8007748 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800768a:	f7fa f8fe 	bl	800188a <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007694:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	4313      	orrs	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a20      	ldr	r2, [pc, #128]	; (8007740 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d022      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076cc:	d01d      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a1e      	ldr	r2, [pc, #120]	; (800774c <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d018      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a1c      	ldr	r2, [pc, #112]	; (8007750 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d013      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a1b      	ldr	r2, [pc, #108]	; (8007754 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d00e      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a14      	ldr	r2, [pc, #80]	; (8007744 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d009      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a17      	ldr	r2, [pc, #92]	; (8007758 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d004      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a15      	ldr	r2, [pc, #84]	; (800775c <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d10c      	bne.n	8007724 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	4313      	orrs	r3, r2
 800771a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	40010000 	.word	0x40010000
 8007744:	40010400 	.word	0x40010400
 8007748:	08012dd4 	.word	0x08012dd4
 800774c:	40000400 	.word	0x40000400
 8007750:	40000800 	.word	0x40000800
 8007754:	40000c00 	.word	0x40000c00
 8007758:	40014000 	.word	0x40014000
 800775c:	40001800 	.word	0x40001800

08007760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e09f      	b.n	80078ee <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d02d      	beq.n	8007812 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a4f      	ldr	r2, [pc, #316]	; (80078f8 <HAL_UART_Init+0x15c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d055      	beq.n	800786c <HAL_UART_Init+0xd0>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a4d      	ldr	r2, [pc, #308]	; (80078fc <HAL_UART_Init+0x160>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d050      	beq.n	800786c <HAL_UART_Init+0xd0>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a4c      	ldr	r2, [pc, #304]	; (8007900 <HAL_UART_Init+0x164>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d04b      	beq.n	800786c <HAL_UART_Init+0xd0>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a4a      	ldr	r2, [pc, #296]	; (8007904 <HAL_UART_Init+0x168>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d046      	beq.n	800786c <HAL_UART_Init+0xd0>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a49      	ldr	r2, [pc, #292]	; (8007908 <HAL_UART_Init+0x16c>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d041      	beq.n	800786c <HAL_UART_Init+0xd0>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a47      	ldr	r2, [pc, #284]	; (800790c <HAL_UART_Init+0x170>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d03c      	beq.n	800786c <HAL_UART_Init+0xd0>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a46      	ldr	r2, [pc, #280]	; (8007910 <HAL_UART_Init+0x174>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d037      	beq.n	800786c <HAL_UART_Init+0xd0>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a44      	ldr	r2, [pc, #272]	; (8007914 <HAL_UART_Init+0x178>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d032      	beq.n	800786c <HAL_UART_Init+0xd0>
 8007806:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800780a:	4843      	ldr	r0, [pc, #268]	; (8007918 <HAL_UART_Init+0x17c>)
 800780c:	f7fa f83d 	bl	800188a <assert_failed>
 8007810:	e02c      	b.n	800786c <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a38      	ldr	r2, [pc, #224]	; (80078f8 <HAL_UART_Init+0x15c>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d027      	beq.n	800786c <HAL_UART_Init+0xd0>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a36      	ldr	r2, [pc, #216]	; (80078fc <HAL_UART_Init+0x160>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d022      	beq.n	800786c <HAL_UART_Init+0xd0>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a35      	ldr	r2, [pc, #212]	; (8007900 <HAL_UART_Init+0x164>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d01d      	beq.n	800786c <HAL_UART_Init+0xd0>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a33      	ldr	r2, [pc, #204]	; (8007904 <HAL_UART_Init+0x168>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d018      	beq.n	800786c <HAL_UART_Init+0xd0>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a32      	ldr	r2, [pc, #200]	; (8007908 <HAL_UART_Init+0x16c>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d013      	beq.n	800786c <HAL_UART_Init+0xd0>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a30      	ldr	r2, [pc, #192]	; (800790c <HAL_UART_Init+0x170>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d00e      	beq.n	800786c <HAL_UART_Init+0xd0>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a2f      	ldr	r2, [pc, #188]	; (8007910 <HAL_UART_Init+0x174>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d009      	beq.n	800786c <HAL_UART_Init+0xd0>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a2d      	ldr	r2, [pc, #180]	; (8007914 <HAL_UART_Init+0x178>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d004      	beq.n	800786c <HAL_UART_Init+0xd0>
 8007862:	f240 1131 	movw	r1, #305	; 0x131
 8007866:	482c      	ldr	r0, [pc, #176]	; (8007918 <HAL_UART_Init+0x17c>)
 8007868:	f7fa f80f 	bl	800188a <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007870:	2b00      	cmp	r3, #0
 8007872:	d106      	bne.n	8007882 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7fa fa9d 	bl	8001dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2224      	movs	r2, #36	; 0x24
 8007886:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 0201 	bic.w	r2, r2, #1
 8007896:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fcbd 	bl	8008218 <UART_SetConfig>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e022      	b.n	80078ee <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 ffa7 	bl	8008804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f042 0201 	orr.w	r2, r2, #1
 80078e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f001 f8e4 	bl	8008ab4 <UART_CheckIdleState>
 80078ec:	4603      	mov	r3, r0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	40011000 	.word	0x40011000
 80078fc:	40004400 	.word	0x40004400
 8007900:	40004800 	.word	0x40004800
 8007904:	40004c00 	.word	0x40004c00
 8007908:	40005000 	.word	0x40005000
 800790c:	40011400 	.word	0x40011400
 8007910:	40007800 	.word	0x40007800
 8007914:	40007c00 	.word	0x40007c00
 8007918:	08012e10 	.word	0x08012e10

0800791c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08a      	sub	sp, #40	; 0x28
 8007920:	af02      	add	r7, sp, #8
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	603b      	str	r3, [r7, #0]
 8007928:	4613      	mov	r3, r2
 800792a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007930:	2b20      	cmp	r3, #32
 8007932:	d171      	bne.n	8007a18 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <HAL_UART_Transmit+0x24>
 800793a:	88fb      	ldrh	r3, [r7, #6]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e06a      	b.n	8007a1a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2221      	movs	r2, #33	; 0x21
 8007950:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007952:	f7fa fb2f 	bl	8001fb4 <HAL_GetTick>
 8007956:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	88fa      	ldrh	r2, [r7, #6]
 800795c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	88fa      	ldrh	r2, [r7, #6]
 8007964:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007970:	d108      	bne.n	8007984 <HAL_UART_Transmit+0x68>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d104      	bne.n	8007984 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800797a:	2300      	movs	r3, #0
 800797c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	61bb      	str	r3, [r7, #24]
 8007982:	e003      	b.n	800798c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007988:	2300      	movs	r3, #0
 800798a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800798c:	e02c      	b.n	80079e8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2200      	movs	r2, #0
 8007996:	2180      	movs	r1, #128	; 0x80
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f001 f8c2 	bl	8008b22 <UART_WaitOnFlagUntilTimeout>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e038      	b.n	8007a1a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10b      	bne.n	80079c6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	3302      	adds	r3, #2
 80079c2:	61bb      	str	r3, [r7, #24]
 80079c4:	e007      	b.n	80079d6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	781a      	ldrb	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	3301      	adds	r3, #1
 80079d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079dc:	b29b      	uxth	r3, r3
 80079de:	3b01      	subs	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1cc      	bne.n	800798e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	2200      	movs	r2, #0
 80079fc:	2140      	movs	r1, #64	; 0x40
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f001 f88f 	bl	8008b22 <UART_WaitOnFlagUntilTimeout>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e005      	b.n	8007a1a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2220      	movs	r2, #32
 8007a12:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	e000      	b.n	8007a1a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007a18:	2302      	movs	r3, #2
  }
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3720      	adds	r7, #32
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b08a      	sub	sp, #40	; 0x28
 8007a26:	af02      	add	r7, sp, #8
 8007a28:	60f8      	str	r0, [r7, #12]
 8007a2a:	60b9      	str	r1, [r7, #8]
 8007a2c:	603b      	str	r3, [r7, #0]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a38:	2b20      	cmp	r3, #32
 8007a3a:	f040 80b1 	bne.w	8007ba0 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <HAL_UART_Receive+0x28>
 8007a44:	88fb      	ldrh	r3, [r7, #6]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e0a9      	b.n	8007ba2 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2222      	movs	r2, #34	; 0x22
 8007a5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a64:	f7fa faa6 	bl	8001fb4 <HAL_GetTick>
 8007a68:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	88fa      	ldrh	r2, [r7, #6]
 8007a6e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	88fa      	ldrh	r2, [r7, #6]
 8007a76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a82:	d10e      	bne.n	8007aa2 <HAL_UART_Receive+0x80>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d105      	bne.n	8007a98 <HAL_UART_Receive+0x76>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a96:	e02d      	b.n	8007af4 <HAL_UART_Receive+0xd2>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	22ff      	movs	r2, #255	; 0xff
 8007a9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007aa0:	e028      	b.n	8007af4 <HAL_UART_Receive+0xd2>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10d      	bne.n	8007ac6 <HAL_UART_Receive+0xa4>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d104      	bne.n	8007abc <HAL_UART_Receive+0x9a>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	22ff      	movs	r2, #255	; 0xff
 8007ab6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007aba:	e01b      	b.n	8007af4 <HAL_UART_Receive+0xd2>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	227f      	movs	r2, #127	; 0x7f
 8007ac0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ac4:	e016      	b.n	8007af4 <HAL_UART_Receive+0xd2>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ace:	d10d      	bne.n	8007aec <HAL_UART_Receive+0xca>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d104      	bne.n	8007ae2 <HAL_UART_Receive+0xc0>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	227f      	movs	r2, #127	; 0x7f
 8007adc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ae0:	e008      	b.n	8007af4 <HAL_UART_Receive+0xd2>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	223f      	movs	r2, #63	; 0x3f
 8007ae6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007aea:	e003      	b.n	8007af4 <HAL_UART_Receive+0xd2>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007afa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b04:	d108      	bne.n	8007b18 <HAL_UART_Receive+0xf6>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d104      	bne.n	8007b18 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	61bb      	str	r3, [r7, #24]
 8007b16:	e003      	b.n	8007b20 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007b20:	e032      	b.n	8007b88 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	2120      	movs	r1, #32
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 fff8 	bl	8008b22 <UART_WaitOnFlagUntilTimeout>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e032      	b.n	8007ba2 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10c      	bne.n	8007b5c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	8a7b      	ldrh	r3, [r7, #18]
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	3302      	adds	r3, #2
 8007b58:	61bb      	str	r3, [r7, #24]
 8007b5a:	e00c      	b.n	8007b76 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	8a7b      	ldrh	r3, [r7, #18]
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	4013      	ands	r3, r2
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	3301      	adds	r3, #1
 8007b74:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1c6      	bne.n	8007b22 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2220      	movs	r2, #32
 8007b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	e000      	b.n	8007ba2 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8007ba0:	2302      	movs	r3, #2
  }
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3720      	adds	r7, #32
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b08a      	sub	sp, #40	; 0x28
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	60f8      	str	r0, [r7, #12]
 8007bb2:	60b9      	str	r1, [r7, #8]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bbe:	2b20      	cmp	r3, #32
 8007bc0:	d132      	bne.n	8007c28 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d002      	beq.n	8007bce <HAL_UART_Receive_IT+0x24>
 8007bc8:	88fb      	ldrh	r3, [r7, #6]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e02b      	b.n	8007c2a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d018      	beq.n	8007c18 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	e853 3f00 	ldrex	r3, [r3]
 8007bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	461a      	mov	r2, r3
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	623b      	str	r3, [r7, #32]
 8007c06:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	69f9      	ldr	r1, [r7, #28]
 8007c0a:	6a3a      	ldr	r2, [r7, #32]
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e6      	bne.n	8007be6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007c18:	88fb      	ldrh	r3, [r7, #6]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	68b9      	ldr	r1, [r7, #8]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f001 f846 	bl	8008cb0 <UART_Start_Receive_IT>
 8007c24:	4603      	mov	r3, r0
 8007c26:	e000      	b.n	8007c2a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007c28:	2302      	movs	r3, #2
  }
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3728      	adds	r7, #40	; 0x28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b0ba      	sub	sp, #232	; 0xe8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007c5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007c62:	4013      	ands	r3, r2
 8007c64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007c68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d115      	bne.n	8007c9c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c74:	f003 0320 	and.w	r3, r3, #32
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00f      	beq.n	8007c9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c80:	f003 0320 	and.w	r3, r3, #32
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d009      	beq.n	8007c9c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 8297 	beq.w	80081c0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	4798      	blx	r3
      }
      return;
 8007c9a:	e291      	b.n	80081c0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 8117 	beq.w	8007ed4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d106      	bne.n	8007cc0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007cb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007cb6:	4b85      	ldr	r3, [pc, #532]	; (8007ecc <HAL_UART_IRQHandler+0x298>)
 8007cb8:	4013      	ands	r3, r2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 810a 	beq.w	8007ed4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d011      	beq.n	8007cf0 <HAL_UART_IRQHandler+0xbc>
 8007ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00b      	beq.n	8007cf0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ce6:	f043 0201 	orr.w	r2, r3, #1
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d011      	beq.n	8007d20 <HAL_UART_IRQHandler+0xec>
 8007cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00b      	beq.n	8007d20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d16:	f043 0204 	orr.w	r2, r3, #4
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d011      	beq.n	8007d50 <HAL_UART_IRQHandler+0x11c>
 8007d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00b      	beq.n	8007d50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2204      	movs	r2, #4
 8007d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d46:	f043 0202 	orr.w	r2, r3, #2
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d54:	f003 0308 	and.w	r3, r3, #8
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d017      	beq.n	8007d8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d60:	f003 0320 	and.w	r3, r3, #32
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d105      	bne.n	8007d74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00b      	beq.n	8007d8c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2208      	movs	r2, #8
 8007d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d82:	f043 0208 	orr.w	r2, r3, #8
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d012      	beq.n	8007dbe <HAL_UART_IRQHandler+0x18a>
 8007d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00c      	beq.n	8007dbe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007db4:	f043 0220 	orr.w	r2, r3, #32
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 81fd 	beq.w	80081c4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00d      	beq.n	8007df2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d007      	beq.n	8007df2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d003      	beq.n	8007df2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007df8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e06:	2b40      	cmp	r3, #64	; 0x40
 8007e08:	d005      	beq.n	8007e16 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d04f      	beq.n	8007eb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f001 f810 	bl	8008e3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e26:	2b40      	cmp	r3, #64	; 0x40
 8007e28:	d141      	bne.n	8007eae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3308      	adds	r3, #8
 8007e30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e38:	e853 3f00 	ldrex	r3, [r3]
 8007e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3308      	adds	r3, #8
 8007e52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1d9      	bne.n	8007e2a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d013      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e82:	4a13      	ldr	r2, [pc, #76]	; (8007ed0 <HAL_UART_IRQHandler+0x29c>)
 8007e84:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fa fa72 	bl	8002374 <HAL_DMA_Abort_IT>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d017      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea4:	e00f      	b.n	8007ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f9a0 	bl	80081ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eac:	e00b      	b.n	8007ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f99c 	bl	80081ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eb4:	e007      	b.n	8007ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f998 	bl	80081ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007ec4:	e17e      	b.n	80081c4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ec6:	bf00      	nop
    return;
 8007ec8:	e17c      	b.n	80081c4 <HAL_UART_IRQHandler+0x590>
 8007eca:	bf00      	nop
 8007ecc:	04000120 	.word	0x04000120
 8007ed0:	08008f05 	.word	0x08008f05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	f040 814c 	bne.w	8008176 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee2:	f003 0310 	and.w	r3, r3, #16
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 8145 	beq.w	8008176 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef0:	f003 0310 	and.w	r3, r3, #16
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 813e 	beq.w	8008176 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2210      	movs	r2, #16
 8007f00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0c:	2b40      	cmp	r3, #64	; 0x40
 8007f0e:	f040 80b6 	bne.w	800807e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f1e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 8150 	beq.w	80081c8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f32:	429a      	cmp	r2, r3
 8007f34:	f080 8148 	bcs.w	80081c8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f4c:	f000 8086 	beq.w	800805c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	461a      	mov	r2, r3
 8007f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f7e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f8a:	e841 2300 	strex	r3, r2, [r1]
 8007f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1da      	bne.n	8007f50 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fac:	f023 0301 	bic.w	r3, r3, #1
 8007fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3308      	adds	r3, #8
 8007fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007fbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007fc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e1      	bne.n	8007f9a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3308      	adds	r3, #8
 8007fdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3308      	adds	r3, #8
 8007ff6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ffa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ffc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008000:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008002:	e841 2300 	strex	r3, r2, [r1]
 8008006:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1e3      	bne.n	8007fd6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2220      	movs	r2, #32
 8008012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008024:	e853 3f00 	ldrex	r3, [r3]
 8008028:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800802a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800802c:	f023 0310 	bic.w	r3, r3, #16
 8008030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	461a      	mov	r2, r3
 800803a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800803e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008040:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008042:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008044:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008046:	e841 2300 	strex	r3, r2, [r1]
 800804a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800804c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1e4      	bne.n	800801c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008056:	4618      	mov	r0, r3
 8008058:	f7fa f91c 	bl	8002294 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800806e:	b29b      	uxth	r3, r3
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	b29b      	uxth	r3, r3
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f8c2 	bl	8008200 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800807c:	e0a4      	b.n	80081c8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800808a:	b29b      	uxth	r3, r3
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008098:	b29b      	uxth	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	f000 8096 	beq.w	80081cc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80080a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 8091 	beq.w	80081cc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	e853 3f00 	ldrex	r3, [r3]
 80080b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080cc:	647b      	str	r3, [r7, #68]	; 0x44
 80080ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080d4:	e841 2300 	strex	r3, r2, [r1]
 80080d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1e4      	bne.n	80080aa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3308      	adds	r3, #8
 80080e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	e853 3f00 	ldrex	r3, [r3]
 80080ee:	623b      	str	r3, [r7, #32]
   return(result);
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	f023 0301 	bic.w	r3, r3, #1
 80080f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3308      	adds	r3, #8
 8008100:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008104:	633a      	str	r2, [r7, #48]	; 0x30
 8008106:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800810a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800810c:	e841 2300 	strex	r3, r2, [r1]
 8008110:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1e3      	bne.n	80080e0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2220      	movs	r2, #32
 800811c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	e853 3f00 	ldrex	r3, [r3]
 8008138:	60fb      	str	r3, [r7, #12]
   return(result);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f023 0310 	bic.w	r3, r3, #16
 8008140:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	461a      	mov	r2, r3
 800814a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800814e:	61fb      	str	r3, [r7, #28]
 8008150:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008152:	69b9      	ldr	r1, [r7, #24]
 8008154:	69fa      	ldr	r2, [r7, #28]
 8008156:	e841 2300 	strex	r3, r2, [r1]
 800815a:	617b      	str	r3, [r7, #20]
   return(result);
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e4      	bne.n	800812c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2202      	movs	r2, #2
 8008166:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008168:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800816c:	4619      	mov	r1, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f846 	bl	8008200 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008174:	e02a      	b.n	80081cc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800817a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00e      	beq.n	80081a0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800818a:	2b00      	cmp	r3, #0
 800818c:	d008      	beq.n	80081a0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008192:	2b00      	cmp	r3, #0
 8008194:	d01c      	beq.n	80081d0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	4798      	blx	r3
    }
    return;
 800819e:	e017      	b.n	80081d0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80081a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d012      	beq.n	80081d2 <HAL_UART_IRQHandler+0x59e>
 80081ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00c      	beq.n	80081d2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 feb9 	bl	8008f30 <UART_EndTransmit_IT>
    return;
 80081be:	e008      	b.n	80081d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80081c0:	bf00      	nop
 80081c2:	e006      	b.n	80081d2 <HAL_UART_IRQHandler+0x59e>
    return;
 80081c4:	bf00      	nop
 80081c6:	e004      	b.n	80081d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80081c8:	bf00      	nop
 80081ca:	e002      	b.n	80081d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80081cc:	bf00      	nop
 80081ce:	e000      	b.n	80081d2 <HAL_UART_IRQHandler+0x59e>
    return;
 80081d0:	bf00      	nop
  }

}
 80081d2:	37e8      	adds	r7, #232	; 0xe8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081f4:	bf00      	nop
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	4aa0      	ldr	r2, [pc, #640]	; (80084ac <UART_SetConfig+0x294>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d904      	bls.n	8008238 <UART_SetConfig+0x20>
 800822e:	f640 315d 	movw	r1, #2909	; 0xb5d
 8008232:	489f      	ldr	r0, [pc, #636]	; (80084b0 <UART_SetConfig+0x298>)
 8008234:	f7f9 fb29 	bl	800188a <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008240:	d00d      	beq.n	800825e <UART_SetConfig+0x46>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d009      	beq.n	800825e <UART_SetConfig+0x46>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008252:	d004      	beq.n	800825e <UART_SetConfig+0x46>
 8008254:	f640 315e 	movw	r1, #2910	; 0xb5e
 8008258:	4895      	ldr	r0, [pc, #596]	; (80084b0 <UART_SetConfig+0x298>)
 800825a:	f7f9 fb16 	bl	800188a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008266:	d012      	beq.n	800828e <UART_SetConfig+0x76>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00e      	beq.n	800828e <UART_SetConfig+0x76>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008278:	d009      	beq.n	800828e <UART_SetConfig+0x76>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008282:	d004      	beq.n	800828e <UART_SetConfig+0x76>
 8008284:	f640 315f 	movw	r1, #2911	; 0xb5f
 8008288:	4889      	ldr	r0, [pc, #548]	; (80084b0 <UART_SetConfig+0x298>)
 800828a:	f7f9 fafe 	bl	800188a <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d009      	beq.n	80082aa <UART_SetConfig+0x92>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800829e:	d004      	beq.n	80082aa <UART_SetConfig+0x92>
 80082a0:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 80082a4:	4882      	ldr	r0, [pc, #520]	; (80084b0 <UART_SetConfig+0x298>)
 80082a6:	f7f9 faf0 	bl	800188a <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00e      	beq.n	80082d0 <UART_SetConfig+0xb8>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082ba:	d009      	beq.n	80082d0 <UART_SetConfig+0xb8>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80082c4:	d004      	beq.n	80082d0 <UART_SetConfig+0xb8>
 80082c6:	f640 3162 	movw	r1, #2914	; 0xb62
 80082ca:	4879      	ldr	r0, [pc, #484]	; (80084b0 <UART_SetConfig+0x298>)
 80082cc:	f7f9 fadd 	bl	800188a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	695b      	ldr	r3, [r3, #20]
 80082d4:	f023 030c 	bic.w	r3, r3, #12
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d103      	bne.n	80082e4 <UART_SetConfig+0xcc>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d104      	bne.n	80082ee <UART_SetConfig+0xd6>
 80082e4:	f640 3163 	movw	r1, #2915	; 0xb63
 80082e8:	4871      	ldr	r0, [pc, #452]	; (80084b0 <UART_SetConfig+0x298>)
 80082ea:	f7f9 face 	bl	800188a <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d013      	beq.n	800831e <UART_SetConfig+0x106>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fe:	d00e      	beq.n	800831e <UART_SetConfig+0x106>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008308:	d009      	beq.n	800831e <UART_SetConfig+0x106>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008312:	d004      	beq.n	800831e <UART_SetConfig+0x106>
 8008314:	f640 3164 	movw	r1, #2916	; 0xb64
 8008318:	4865      	ldr	r0, [pc, #404]	; (80084b0 <UART_SetConfig+0x298>)
 800831a:	f7f9 fab6 	bl	800188a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d009      	beq.n	800833a <UART_SetConfig+0x122>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	69db      	ldr	r3, [r3, #28]
 800832a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800832e:	d004      	beq.n	800833a <UART_SetConfig+0x122>
 8008330:	f640 3165 	movw	r1, #2917	; 0xb65
 8008334:	485e      	ldr	r0, [pc, #376]	; (80084b0 <UART_SetConfig+0x298>)
 8008336:	f7f9 faa8 	bl	800188a <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	689a      	ldr	r2, [r3, #8]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	431a      	orrs	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	4313      	orrs	r3, r2
 8008350:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	4b56      	ldr	r3, [pc, #344]	; (80084b4 <UART_SetConfig+0x29c>)
 800835a:	4013      	ands	r3, r2
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	6812      	ldr	r2, [r2, #0]
 8008360:	6979      	ldr	r1, [r7, #20]
 8008362:	430b      	orrs	r3, r1
 8008364:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68da      	ldr	r2, [r3, #12]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	430a      	orrs	r2, r1
 800837a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	4313      	orrs	r3, r2
 800838a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	430a      	orrs	r2, r1
 800839e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a44      	ldr	r2, [pc, #272]	; (80084b8 <UART_SetConfig+0x2a0>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d121      	bne.n	80083ee <UART_SetConfig+0x1d6>
 80083aa:	4b44      	ldr	r3, [pc, #272]	; (80084bc <UART_SetConfig+0x2a4>)
 80083ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083b0:	f003 0303 	and.w	r3, r3, #3
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d817      	bhi.n	80083e8 <UART_SetConfig+0x1d0>
 80083b8:	a201      	add	r2, pc, #4	; (adr r2, 80083c0 <UART_SetConfig+0x1a8>)
 80083ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083be:	bf00      	nop
 80083c0:	080083d1 	.word	0x080083d1
 80083c4:	080083dd 	.word	0x080083dd
 80083c8:	080083d7 	.word	0x080083d7
 80083cc:	080083e3 	.word	0x080083e3
 80083d0:	2301      	movs	r3, #1
 80083d2:	77fb      	strb	r3, [r7, #31]
 80083d4:	e14c      	b.n	8008670 <UART_SetConfig+0x458>
 80083d6:	2302      	movs	r3, #2
 80083d8:	77fb      	strb	r3, [r7, #31]
 80083da:	e149      	b.n	8008670 <UART_SetConfig+0x458>
 80083dc:	2304      	movs	r3, #4
 80083de:	77fb      	strb	r3, [r7, #31]
 80083e0:	e146      	b.n	8008670 <UART_SetConfig+0x458>
 80083e2:	2308      	movs	r3, #8
 80083e4:	77fb      	strb	r3, [r7, #31]
 80083e6:	e143      	b.n	8008670 <UART_SetConfig+0x458>
 80083e8:	2310      	movs	r3, #16
 80083ea:	77fb      	strb	r3, [r7, #31]
 80083ec:	e140      	b.n	8008670 <UART_SetConfig+0x458>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a33      	ldr	r2, [pc, #204]	; (80084c0 <UART_SetConfig+0x2a8>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d132      	bne.n	800845e <UART_SetConfig+0x246>
 80083f8:	4b30      	ldr	r3, [pc, #192]	; (80084bc <UART_SetConfig+0x2a4>)
 80083fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083fe:	f003 030c 	and.w	r3, r3, #12
 8008402:	2b0c      	cmp	r3, #12
 8008404:	d828      	bhi.n	8008458 <UART_SetConfig+0x240>
 8008406:	a201      	add	r2, pc, #4	; (adr r2, 800840c <UART_SetConfig+0x1f4>)
 8008408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840c:	08008441 	.word	0x08008441
 8008410:	08008459 	.word	0x08008459
 8008414:	08008459 	.word	0x08008459
 8008418:	08008459 	.word	0x08008459
 800841c:	0800844d 	.word	0x0800844d
 8008420:	08008459 	.word	0x08008459
 8008424:	08008459 	.word	0x08008459
 8008428:	08008459 	.word	0x08008459
 800842c:	08008447 	.word	0x08008447
 8008430:	08008459 	.word	0x08008459
 8008434:	08008459 	.word	0x08008459
 8008438:	08008459 	.word	0x08008459
 800843c:	08008453 	.word	0x08008453
 8008440:	2300      	movs	r3, #0
 8008442:	77fb      	strb	r3, [r7, #31]
 8008444:	e114      	b.n	8008670 <UART_SetConfig+0x458>
 8008446:	2302      	movs	r3, #2
 8008448:	77fb      	strb	r3, [r7, #31]
 800844a:	e111      	b.n	8008670 <UART_SetConfig+0x458>
 800844c:	2304      	movs	r3, #4
 800844e:	77fb      	strb	r3, [r7, #31]
 8008450:	e10e      	b.n	8008670 <UART_SetConfig+0x458>
 8008452:	2308      	movs	r3, #8
 8008454:	77fb      	strb	r3, [r7, #31]
 8008456:	e10b      	b.n	8008670 <UART_SetConfig+0x458>
 8008458:	2310      	movs	r3, #16
 800845a:	77fb      	strb	r3, [r7, #31]
 800845c:	e108      	b.n	8008670 <UART_SetConfig+0x458>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a18      	ldr	r2, [pc, #96]	; (80084c4 <UART_SetConfig+0x2ac>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d12f      	bne.n	80084c8 <UART_SetConfig+0x2b0>
 8008468:	4b14      	ldr	r3, [pc, #80]	; (80084bc <UART_SetConfig+0x2a4>)
 800846a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800846e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008472:	2b30      	cmp	r3, #48	; 0x30
 8008474:	d013      	beq.n	800849e <UART_SetConfig+0x286>
 8008476:	2b30      	cmp	r3, #48	; 0x30
 8008478:	d814      	bhi.n	80084a4 <UART_SetConfig+0x28c>
 800847a:	2b20      	cmp	r3, #32
 800847c:	d009      	beq.n	8008492 <UART_SetConfig+0x27a>
 800847e:	2b20      	cmp	r3, #32
 8008480:	d810      	bhi.n	80084a4 <UART_SetConfig+0x28c>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d002      	beq.n	800848c <UART_SetConfig+0x274>
 8008486:	2b10      	cmp	r3, #16
 8008488:	d006      	beq.n	8008498 <UART_SetConfig+0x280>
 800848a:	e00b      	b.n	80084a4 <UART_SetConfig+0x28c>
 800848c:	2300      	movs	r3, #0
 800848e:	77fb      	strb	r3, [r7, #31]
 8008490:	e0ee      	b.n	8008670 <UART_SetConfig+0x458>
 8008492:	2302      	movs	r3, #2
 8008494:	77fb      	strb	r3, [r7, #31]
 8008496:	e0eb      	b.n	8008670 <UART_SetConfig+0x458>
 8008498:	2304      	movs	r3, #4
 800849a:	77fb      	strb	r3, [r7, #31]
 800849c:	e0e8      	b.n	8008670 <UART_SetConfig+0x458>
 800849e:	2308      	movs	r3, #8
 80084a0:	77fb      	strb	r3, [r7, #31]
 80084a2:	e0e5      	b.n	8008670 <UART_SetConfig+0x458>
 80084a4:	2310      	movs	r3, #16
 80084a6:	77fb      	strb	r3, [r7, #31]
 80084a8:	e0e2      	b.n	8008670 <UART_SetConfig+0x458>
 80084aa:	bf00      	nop
 80084ac:	019bfcc0 	.word	0x019bfcc0
 80084b0:	08012e10 	.word	0x08012e10
 80084b4:	efff69f3 	.word	0xefff69f3
 80084b8:	40011000 	.word	0x40011000
 80084bc:	40023800 	.word	0x40023800
 80084c0:	40004400 	.word	0x40004400
 80084c4:	40004800 	.word	0x40004800
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4aa5      	ldr	r2, [pc, #660]	; (8008764 <UART_SetConfig+0x54c>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d120      	bne.n	8008514 <UART_SetConfig+0x2fc>
 80084d2:	4ba5      	ldr	r3, [pc, #660]	; (8008768 <UART_SetConfig+0x550>)
 80084d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80084dc:	2bc0      	cmp	r3, #192	; 0xc0
 80084de:	d013      	beq.n	8008508 <UART_SetConfig+0x2f0>
 80084e0:	2bc0      	cmp	r3, #192	; 0xc0
 80084e2:	d814      	bhi.n	800850e <UART_SetConfig+0x2f6>
 80084e4:	2b80      	cmp	r3, #128	; 0x80
 80084e6:	d009      	beq.n	80084fc <UART_SetConfig+0x2e4>
 80084e8:	2b80      	cmp	r3, #128	; 0x80
 80084ea:	d810      	bhi.n	800850e <UART_SetConfig+0x2f6>
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <UART_SetConfig+0x2de>
 80084f0:	2b40      	cmp	r3, #64	; 0x40
 80084f2:	d006      	beq.n	8008502 <UART_SetConfig+0x2ea>
 80084f4:	e00b      	b.n	800850e <UART_SetConfig+0x2f6>
 80084f6:	2300      	movs	r3, #0
 80084f8:	77fb      	strb	r3, [r7, #31]
 80084fa:	e0b9      	b.n	8008670 <UART_SetConfig+0x458>
 80084fc:	2302      	movs	r3, #2
 80084fe:	77fb      	strb	r3, [r7, #31]
 8008500:	e0b6      	b.n	8008670 <UART_SetConfig+0x458>
 8008502:	2304      	movs	r3, #4
 8008504:	77fb      	strb	r3, [r7, #31]
 8008506:	e0b3      	b.n	8008670 <UART_SetConfig+0x458>
 8008508:	2308      	movs	r3, #8
 800850a:	77fb      	strb	r3, [r7, #31]
 800850c:	e0b0      	b.n	8008670 <UART_SetConfig+0x458>
 800850e:	2310      	movs	r3, #16
 8008510:	77fb      	strb	r3, [r7, #31]
 8008512:	e0ad      	b.n	8008670 <UART_SetConfig+0x458>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a94      	ldr	r2, [pc, #592]	; (800876c <UART_SetConfig+0x554>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d125      	bne.n	800856a <UART_SetConfig+0x352>
 800851e:	4b92      	ldr	r3, [pc, #584]	; (8008768 <UART_SetConfig+0x550>)
 8008520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008528:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800852c:	d017      	beq.n	800855e <UART_SetConfig+0x346>
 800852e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008532:	d817      	bhi.n	8008564 <UART_SetConfig+0x34c>
 8008534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008538:	d00b      	beq.n	8008552 <UART_SetConfig+0x33a>
 800853a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800853e:	d811      	bhi.n	8008564 <UART_SetConfig+0x34c>
 8008540:	2b00      	cmp	r3, #0
 8008542:	d003      	beq.n	800854c <UART_SetConfig+0x334>
 8008544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008548:	d006      	beq.n	8008558 <UART_SetConfig+0x340>
 800854a:	e00b      	b.n	8008564 <UART_SetConfig+0x34c>
 800854c:	2300      	movs	r3, #0
 800854e:	77fb      	strb	r3, [r7, #31]
 8008550:	e08e      	b.n	8008670 <UART_SetConfig+0x458>
 8008552:	2302      	movs	r3, #2
 8008554:	77fb      	strb	r3, [r7, #31]
 8008556:	e08b      	b.n	8008670 <UART_SetConfig+0x458>
 8008558:	2304      	movs	r3, #4
 800855a:	77fb      	strb	r3, [r7, #31]
 800855c:	e088      	b.n	8008670 <UART_SetConfig+0x458>
 800855e:	2308      	movs	r3, #8
 8008560:	77fb      	strb	r3, [r7, #31]
 8008562:	e085      	b.n	8008670 <UART_SetConfig+0x458>
 8008564:	2310      	movs	r3, #16
 8008566:	77fb      	strb	r3, [r7, #31]
 8008568:	e082      	b.n	8008670 <UART_SetConfig+0x458>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a80      	ldr	r2, [pc, #512]	; (8008770 <UART_SetConfig+0x558>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d125      	bne.n	80085c0 <UART_SetConfig+0x3a8>
 8008574:	4b7c      	ldr	r3, [pc, #496]	; (8008768 <UART_SetConfig+0x550>)
 8008576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800857a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800857e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008582:	d017      	beq.n	80085b4 <UART_SetConfig+0x39c>
 8008584:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008588:	d817      	bhi.n	80085ba <UART_SetConfig+0x3a2>
 800858a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800858e:	d00b      	beq.n	80085a8 <UART_SetConfig+0x390>
 8008590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008594:	d811      	bhi.n	80085ba <UART_SetConfig+0x3a2>
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <UART_SetConfig+0x38a>
 800859a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800859e:	d006      	beq.n	80085ae <UART_SetConfig+0x396>
 80085a0:	e00b      	b.n	80085ba <UART_SetConfig+0x3a2>
 80085a2:	2301      	movs	r3, #1
 80085a4:	77fb      	strb	r3, [r7, #31]
 80085a6:	e063      	b.n	8008670 <UART_SetConfig+0x458>
 80085a8:	2302      	movs	r3, #2
 80085aa:	77fb      	strb	r3, [r7, #31]
 80085ac:	e060      	b.n	8008670 <UART_SetConfig+0x458>
 80085ae:	2304      	movs	r3, #4
 80085b0:	77fb      	strb	r3, [r7, #31]
 80085b2:	e05d      	b.n	8008670 <UART_SetConfig+0x458>
 80085b4:	2308      	movs	r3, #8
 80085b6:	77fb      	strb	r3, [r7, #31]
 80085b8:	e05a      	b.n	8008670 <UART_SetConfig+0x458>
 80085ba:	2310      	movs	r3, #16
 80085bc:	77fb      	strb	r3, [r7, #31]
 80085be:	e057      	b.n	8008670 <UART_SetConfig+0x458>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a6b      	ldr	r2, [pc, #428]	; (8008774 <UART_SetConfig+0x55c>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d125      	bne.n	8008616 <UART_SetConfig+0x3fe>
 80085ca:	4b67      	ldr	r3, [pc, #412]	; (8008768 <UART_SetConfig+0x550>)
 80085cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80085d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085d8:	d017      	beq.n	800860a <UART_SetConfig+0x3f2>
 80085da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085de:	d817      	bhi.n	8008610 <UART_SetConfig+0x3f8>
 80085e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085e4:	d00b      	beq.n	80085fe <UART_SetConfig+0x3e6>
 80085e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ea:	d811      	bhi.n	8008610 <UART_SetConfig+0x3f8>
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d003      	beq.n	80085f8 <UART_SetConfig+0x3e0>
 80085f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085f4:	d006      	beq.n	8008604 <UART_SetConfig+0x3ec>
 80085f6:	e00b      	b.n	8008610 <UART_SetConfig+0x3f8>
 80085f8:	2300      	movs	r3, #0
 80085fa:	77fb      	strb	r3, [r7, #31]
 80085fc:	e038      	b.n	8008670 <UART_SetConfig+0x458>
 80085fe:	2302      	movs	r3, #2
 8008600:	77fb      	strb	r3, [r7, #31]
 8008602:	e035      	b.n	8008670 <UART_SetConfig+0x458>
 8008604:	2304      	movs	r3, #4
 8008606:	77fb      	strb	r3, [r7, #31]
 8008608:	e032      	b.n	8008670 <UART_SetConfig+0x458>
 800860a:	2308      	movs	r3, #8
 800860c:	77fb      	strb	r3, [r7, #31]
 800860e:	e02f      	b.n	8008670 <UART_SetConfig+0x458>
 8008610:	2310      	movs	r3, #16
 8008612:	77fb      	strb	r3, [r7, #31]
 8008614:	e02c      	b.n	8008670 <UART_SetConfig+0x458>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a57      	ldr	r2, [pc, #348]	; (8008778 <UART_SetConfig+0x560>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d125      	bne.n	800866c <UART_SetConfig+0x454>
 8008620:	4b51      	ldr	r3, [pc, #324]	; (8008768 <UART_SetConfig+0x550>)
 8008622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008626:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800862a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800862e:	d017      	beq.n	8008660 <UART_SetConfig+0x448>
 8008630:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008634:	d817      	bhi.n	8008666 <UART_SetConfig+0x44e>
 8008636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800863a:	d00b      	beq.n	8008654 <UART_SetConfig+0x43c>
 800863c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008640:	d811      	bhi.n	8008666 <UART_SetConfig+0x44e>
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <UART_SetConfig+0x436>
 8008646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800864a:	d006      	beq.n	800865a <UART_SetConfig+0x442>
 800864c:	e00b      	b.n	8008666 <UART_SetConfig+0x44e>
 800864e:	2300      	movs	r3, #0
 8008650:	77fb      	strb	r3, [r7, #31]
 8008652:	e00d      	b.n	8008670 <UART_SetConfig+0x458>
 8008654:	2302      	movs	r3, #2
 8008656:	77fb      	strb	r3, [r7, #31]
 8008658:	e00a      	b.n	8008670 <UART_SetConfig+0x458>
 800865a:	2304      	movs	r3, #4
 800865c:	77fb      	strb	r3, [r7, #31]
 800865e:	e007      	b.n	8008670 <UART_SetConfig+0x458>
 8008660:	2308      	movs	r3, #8
 8008662:	77fb      	strb	r3, [r7, #31]
 8008664:	e004      	b.n	8008670 <UART_SetConfig+0x458>
 8008666:	2310      	movs	r3, #16
 8008668:	77fb      	strb	r3, [r7, #31]
 800866a:	e001      	b.n	8008670 <UART_SetConfig+0x458>
 800866c:	2310      	movs	r3, #16
 800866e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008678:	d15c      	bne.n	8008734 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 800867a:	7ffb      	ldrb	r3, [r7, #31]
 800867c:	2b08      	cmp	r3, #8
 800867e:	d828      	bhi.n	80086d2 <UART_SetConfig+0x4ba>
 8008680:	a201      	add	r2, pc, #4	; (adr r2, 8008688 <UART_SetConfig+0x470>)
 8008682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008686:	bf00      	nop
 8008688:	080086ad 	.word	0x080086ad
 800868c:	080086b5 	.word	0x080086b5
 8008690:	080086bd 	.word	0x080086bd
 8008694:	080086d3 	.word	0x080086d3
 8008698:	080086c3 	.word	0x080086c3
 800869c:	080086d3 	.word	0x080086d3
 80086a0:	080086d3 	.word	0x080086d3
 80086a4:	080086d3 	.word	0x080086d3
 80086a8:	080086cb 	.word	0x080086cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086ac:	f7fb ff28 	bl	8004500 <HAL_RCC_GetPCLK1Freq>
 80086b0:	61b8      	str	r0, [r7, #24]
        break;
 80086b2:	e013      	b.n	80086dc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086b4:	f7fb ff38 	bl	8004528 <HAL_RCC_GetPCLK2Freq>
 80086b8:	61b8      	str	r0, [r7, #24]
        break;
 80086ba:	e00f      	b.n	80086dc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086bc:	4b2f      	ldr	r3, [pc, #188]	; (800877c <UART_SetConfig+0x564>)
 80086be:	61bb      	str	r3, [r7, #24]
        break;
 80086c0:	e00c      	b.n	80086dc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086c2:	f7fb fe4b 	bl	800435c <HAL_RCC_GetSysClockFreq>
 80086c6:	61b8      	str	r0, [r7, #24]
        break;
 80086c8:	e008      	b.n	80086dc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086ce:	61bb      	str	r3, [r7, #24]
        break;
 80086d0:	e004      	b.n	80086dc <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	77bb      	strb	r3, [r7, #30]
        break;
 80086da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 8082 	beq.w	80087e8 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	005a      	lsls	r2, r3, #1
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	085b      	lsrs	r3, r3, #1
 80086ee:	441a      	add	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b0f      	cmp	r3, #15
 80086fe:	d916      	bls.n	800872e <UART_SetConfig+0x516>
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008706:	d212      	bcs.n	800872e <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	b29b      	uxth	r3, r3
 800870c:	f023 030f 	bic.w	r3, r3, #15
 8008710:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	085b      	lsrs	r3, r3, #1
 8008716:	b29b      	uxth	r3, r3
 8008718:	f003 0307 	and.w	r3, r3, #7
 800871c:	b29a      	uxth	r2, r3
 800871e:	89fb      	ldrh	r3, [r7, #14]
 8008720:	4313      	orrs	r3, r2
 8008722:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	89fa      	ldrh	r2, [r7, #14]
 800872a:	60da      	str	r2, [r3, #12]
 800872c:	e05c      	b.n	80087e8 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	77bb      	strb	r3, [r7, #30]
 8008732:	e059      	b.n	80087e8 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008734:	7ffb      	ldrb	r3, [r7, #31]
 8008736:	2b08      	cmp	r3, #8
 8008738:	d835      	bhi.n	80087a6 <UART_SetConfig+0x58e>
 800873a:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <UART_SetConfig+0x528>)
 800873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008740:	08008781 	.word	0x08008781
 8008744:	08008789 	.word	0x08008789
 8008748:	08008791 	.word	0x08008791
 800874c:	080087a7 	.word	0x080087a7
 8008750:	08008797 	.word	0x08008797
 8008754:	080087a7 	.word	0x080087a7
 8008758:	080087a7 	.word	0x080087a7
 800875c:	080087a7 	.word	0x080087a7
 8008760:	0800879f 	.word	0x0800879f
 8008764:	40004c00 	.word	0x40004c00
 8008768:	40023800 	.word	0x40023800
 800876c:	40005000 	.word	0x40005000
 8008770:	40011400 	.word	0x40011400
 8008774:	40007800 	.word	0x40007800
 8008778:	40007c00 	.word	0x40007c00
 800877c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008780:	f7fb febe 	bl	8004500 <HAL_RCC_GetPCLK1Freq>
 8008784:	61b8      	str	r0, [r7, #24]
        break;
 8008786:	e013      	b.n	80087b0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008788:	f7fb fece 	bl	8004528 <HAL_RCC_GetPCLK2Freq>
 800878c:	61b8      	str	r0, [r7, #24]
        break;
 800878e:	e00f      	b.n	80087b0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008790:	4b1b      	ldr	r3, [pc, #108]	; (8008800 <UART_SetConfig+0x5e8>)
 8008792:	61bb      	str	r3, [r7, #24]
        break;
 8008794:	e00c      	b.n	80087b0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008796:	f7fb fde1 	bl	800435c <HAL_RCC_GetSysClockFreq>
 800879a:	61b8      	str	r0, [r7, #24]
        break;
 800879c:	e008      	b.n	80087b0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800879e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a2:	61bb      	str	r3, [r7, #24]
        break;
 80087a4:	e004      	b.n	80087b0 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	77bb      	strb	r3, [r7, #30]
        break;
 80087ae:	bf00      	nop
    }

    if (pclk != 0U)
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d018      	beq.n	80087e8 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	085a      	lsrs	r2, r3, #1
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	441a      	add	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	2b0f      	cmp	r3, #15
 80087ce:	d909      	bls.n	80087e4 <UART_SetConfig+0x5cc>
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d6:	d205      	bcs.n	80087e4 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	b29a      	uxth	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	60da      	str	r2, [r3, #12]
 80087e2:	e001      	b.n	80087e8 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80087f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3720      	adds	r7, #32
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	00f42400 	.word	0x00f42400

08008804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008810:	2bff      	cmp	r3, #255	; 0xff
 8008812:	d904      	bls.n	800881e <UART_AdvFeatureConfig+0x1a>
 8008814:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8008818:	488e      	ldr	r0, [pc, #568]	; (8008a54 <UART_AdvFeatureConfig+0x250>)
 800881a:	f7f9 f836 	bl	800188a <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d018      	beq.n	800885c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882e:	2b00      	cmp	r3, #0
 8008830:	d009      	beq.n	8008846 <UART_AdvFeatureConfig+0x42>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008836:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800883a:	d004      	beq.n	8008846 <UART_AdvFeatureConfig+0x42>
 800883c:	f640 31eb 	movw	r1, #3051	; 0xbeb
 8008840:	4884      	ldr	r0, [pc, #528]	; (8008a54 <UART_AdvFeatureConfig+0x250>)
 8008842:	f7f9 f822 	bl	800188a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	430a      	orrs	r2, r1
 800885a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	f003 0302 	and.w	r3, r3, #2
 8008864:	2b00      	cmp	r3, #0
 8008866:	d018      	beq.n	800889a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886c:	2b00      	cmp	r3, #0
 800886e:	d009      	beq.n	8008884 <UART_AdvFeatureConfig+0x80>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008878:	d004      	beq.n	8008884 <UART_AdvFeatureConfig+0x80>
 800887a:	f640 31f2 	movw	r1, #3058	; 0xbf2
 800887e:	4875      	ldr	r0, [pc, #468]	; (8008a54 <UART_AdvFeatureConfig+0x250>)
 8008880:	f7f9 f803 	bl	800188a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	430a      	orrs	r2, r1
 8008898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889e:	f003 0304 	and.w	r3, r3, #4
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d018      	beq.n	80088d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d009      	beq.n	80088c2 <UART_AdvFeatureConfig+0xbe>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088b6:	d004      	beq.n	80088c2 <UART_AdvFeatureConfig+0xbe>
 80088b8:	f640 31f9 	movw	r1, #3065	; 0xbf9
 80088bc:	4865      	ldr	r0, [pc, #404]	; (8008a54 <UART_AdvFeatureConfig+0x250>)
 80088be:	f7f8 ffe4 	bl	800188a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	430a      	orrs	r2, r1
 80088d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	f003 0308 	and.w	r3, r3, #8
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d018      	beq.n	8008916 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d009      	beq.n	8008900 <UART_AdvFeatureConfig+0xfc>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088f4:	d004      	beq.n	8008900 <UART_AdvFeatureConfig+0xfc>
 80088f6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80088fa:	4856      	ldr	r0, [pc, #344]	; (8008a54 <UART_AdvFeatureConfig+0x250>)
 80088fc:	f7f8 ffc5 	bl	800188a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891a:	f003 0310 	and.w	r3, r3, #16
 800891e:	2b00      	cmp	r3, #0
 8008920:	d018      	beq.n	8008954 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008926:	2b00      	cmp	r3, #0
 8008928:	d009      	beq.n	800893e <UART_AdvFeatureConfig+0x13a>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008932:	d004      	beq.n	800893e <UART_AdvFeatureConfig+0x13a>
 8008934:	f640 4107 	movw	r1, #3079	; 0xc07
 8008938:	4846      	ldr	r0, [pc, #280]	; (8008a54 <UART_AdvFeatureConfig+0x250>)
 800893a:	f7f8 ffa6 	bl	800188a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	430a      	orrs	r2, r1
 8008952:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	f003 0320 	and.w	r3, r3, #32
 800895c:	2b00      	cmp	r3, #0
 800895e:	d018      	beq.n	8008992 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008964:	2b00      	cmp	r3, #0
 8008966:	d009      	beq.n	800897c <UART_AdvFeatureConfig+0x178>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800896c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008970:	d004      	beq.n	800897c <UART_AdvFeatureConfig+0x178>
 8008972:	f640 410e 	movw	r1, #3086	; 0xc0e
 8008976:	4837      	ldr	r0, [pc, #220]	; (8008a54 <UART_AdvFeatureConfig+0x250>)
 8008978:	f7f8 ff87 	bl	800188a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	d064      	beq.n	8008a68 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a2d      	ldr	r2, [pc, #180]	; (8008a58 <UART_AdvFeatureConfig+0x254>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d013      	beq.n	80089d0 <UART_AdvFeatureConfig+0x1cc>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a2b      	ldr	r2, [pc, #172]	; (8008a5c <UART_AdvFeatureConfig+0x258>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d00e      	beq.n	80089d0 <UART_AdvFeatureConfig+0x1cc>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a2a      	ldr	r2, [pc, #168]	; (8008a60 <UART_AdvFeatureConfig+0x25c>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d009      	beq.n	80089d0 <UART_AdvFeatureConfig+0x1cc>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a28      	ldr	r2, [pc, #160]	; (8008a64 <UART_AdvFeatureConfig+0x260>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d004      	beq.n	80089d0 <UART_AdvFeatureConfig+0x1cc>
 80089c6:	f640 4115 	movw	r1, #3093	; 0xc15
 80089ca:	4822      	ldr	r0, [pc, #136]	; (8008a54 <UART_AdvFeatureConfig+0x250>)
 80089cc:	f7f8 ff5d 	bl	800188a <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d009      	beq.n	80089ec <UART_AdvFeatureConfig+0x1e8>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089e0:	d004      	beq.n	80089ec <UART_AdvFeatureConfig+0x1e8>
 80089e2:	f640 4116 	movw	r1, #3094	; 0xc16
 80089e6:	481b      	ldr	r0, [pc, #108]	; (8008a54 <UART_AdvFeatureConfig+0x250>)
 80089e8:	f7f8 ff4f 	bl	800188a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a0a:	d12d      	bne.n	8008a68 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d013      	beq.n	8008a3c <UART_AdvFeatureConfig+0x238>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a1c:	d00e      	beq.n	8008a3c <UART_AdvFeatureConfig+0x238>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a26:	d009      	beq.n	8008a3c <UART_AdvFeatureConfig+0x238>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a30:	d004      	beq.n	8008a3c <UART_AdvFeatureConfig+0x238>
 8008a32:	f640 411b 	movw	r1, #3099	; 0xc1b
 8008a36:	4807      	ldr	r0, [pc, #28]	; (8008a54 <UART_AdvFeatureConfig+0x250>)
 8008a38:	f7f8 ff27 	bl	800188a <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	605a      	str	r2, [r3, #4]
 8008a52:	e009      	b.n	8008a68 <UART_AdvFeatureConfig+0x264>
 8008a54:	08012e10 	.word	0x08012e10
 8008a58:	40011000 	.word	0x40011000
 8008a5c:	40004400 	.word	0x40004400
 8008a60:	40004800 	.word	0x40004800
 8008a64:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d018      	beq.n	8008aa6 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d009      	beq.n	8008a90 <UART_AdvFeatureConfig+0x28c>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a84:	d004      	beq.n	8008a90 <UART_AdvFeatureConfig+0x28c>
 8008a86:	f640 4123 	movw	r1, #3107	; 0xc23
 8008a8a:	4809      	ldr	r0, [pc, #36]	; (8008ab0 <UART_AdvFeatureConfig+0x2ac>)
 8008a8c:	f7f8 fefd 	bl	800188a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	605a      	str	r2, [r3, #4]
  }
}
 8008aa6:	bf00      	nop
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	08012e10 	.word	0x08012e10

08008ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af02      	add	r7, sp, #8
 8008aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ac4:	f7f9 fa76 	bl	8001fb4 <HAL_GetTick>
 8008ac8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 0308 	and.w	r3, r3, #8
 8008ad4:	2b08      	cmp	r3, #8
 8008ad6:	d10e      	bne.n	8008af6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ad8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f81b 	bl	8008b22 <UART_WaitOnFlagUntilTimeout>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d001      	beq.n	8008af6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e011      	b.n	8008b1a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2220      	movs	r2, #32
 8008afa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2220      	movs	r2, #32
 8008b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b09c      	sub	sp, #112	; 0x70
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	60f8      	str	r0, [r7, #12]
 8008b2a:	60b9      	str	r1, [r7, #8]
 8008b2c:	603b      	str	r3, [r7, #0]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b32:	e0a7      	b.n	8008c84 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3a:	f000 80a3 	beq.w	8008c84 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b3e:	f7f9 fa39 	bl	8001fb4 <HAL_GetTick>
 8008b42:	4602      	mov	r2, r0
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d302      	bcc.n	8008b54 <UART_WaitOnFlagUntilTimeout+0x32>
 8008b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d13f      	bne.n	8008bd4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b5c:	e853 3f00 	ldrex	r3, [r3]
 8008b60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b68:	667b      	str	r3, [r7, #100]	; 0x64
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b74:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b7a:	e841 2300 	strex	r3, r2, [r1]
 8008b7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1e6      	bne.n	8008b54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3308      	adds	r3, #8
 8008b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b90:	e853 3f00 	ldrex	r3, [r3]
 8008b94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b98:	f023 0301 	bic.w	r3, r3, #1
 8008b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ba6:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ba8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008baa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bae:	e841 2300 	strex	r3, r2, [r1]
 8008bb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e5      	bne.n	8008b86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2220      	movs	r2, #32
 8008bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e068      	b.n	8008ca6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0304 	and.w	r3, r3, #4
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d050      	beq.n	8008c84 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69db      	ldr	r3, [r3, #28]
 8008be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bf0:	d148      	bne.n	8008c84 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bfa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c04:	e853 3f00 	ldrex	r3, [r3]
 8008c08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c1c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e6      	bne.n	8008bfc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3308      	adds	r3, #8
 8008c34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	e853 3f00 	ldrex	r3, [r3]
 8008c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f023 0301 	bic.w	r3, r3, #1
 8008c44:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c4e:	623a      	str	r2, [r7, #32]
 8008c50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c52:	69f9      	ldr	r1, [r7, #28]
 8008c54:	6a3a      	ldr	r2, [r7, #32]
 8008c56:	e841 2300 	strex	r3, r2, [r1]
 8008c5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1e5      	bne.n	8008c2e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2220      	movs	r2, #32
 8008c66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2220      	movs	r2, #32
 8008c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008c80:	2303      	movs	r3, #3
 8008c82:	e010      	b.n	8008ca6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	69da      	ldr	r2, [r3, #28]
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	bf0c      	ite	eq
 8008c94:	2301      	moveq	r3, #1
 8008c96:	2300      	movne	r3, #0
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	79fb      	ldrb	r3, [r7, #7]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	f43f af48 	beq.w	8008b34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3770      	adds	r7, #112	; 0x70
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
	...

08008cb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b097      	sub	sp, #92	; 0x5c
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	88fa      	ldrh	r2, [r7, #6]
 8008cc8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	88fa      	ldrh	r2, [r7, #6]
 8008cd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce2:	d10e      	bne.n	8008d02 <UART_Start_Receive_IT+0x52>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d105      	bne.n	8008cf8 <UART_Start_Receive_IT+0x48>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008cf2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cf6:	e02d      	b.n	8008d54 <UART_Start_Receive_IT+0xa4>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	22ff      	movs	r2, #255	; 0xff
 8008cfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d00:	e028      	b.n	8008d54 <UART_Start_Receive_IT+0xa4>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10d      	bne.n	8008d26 <UART_Start_Receive_IT+0x76>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d104      	bne.n	8008d1c <UART_Start_Receive_IT+0x6c>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	22ff      	movs	r2, #255	; 0xff
 8008d16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d1a:	e01b      	b.n	8008d54 <UART_Start_Receive_IT+0xa4>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	227f      	movs	r2, #127	; 0x7f
 8008d20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d24:	e016      	b.n	8008d54 <UART_Start_Receive_IT+0xa4>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d2e:	d10d      	bne.n	8008d4c <UART_Start_Receive_IT+0x9c>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d104      	bne.n	8008d42 <UART_Start_Receive_IT+0x92>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	227f      	movs	r2, #127	; 0x7f
 8008d3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d40:	e008      	b.n	8008d54 <UART_Start_Receive_IT+0xa4>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	223f      	movs	r2, #63	; 0x3f
 8008d46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d4a:	e003      	b.n	8008d54 <UART_Start_Receive_IT+0xa4>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2222      	movs	r2, #34	; 0x22
 8008d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3308      	adds	r3, #8
 8008d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d6e:	e853 3f00 	ldrex	r3, [r3]
 8008d72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d76:	f043 0301 	orr.w	r3, r3, #1
 8008d7a:	657b      	str	r3, [r7, #84]	; 0x54
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3308      	adds	r3, #8
 8008d82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d84:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d86:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d8c:	e841 2300 	strex	r3, r2, [r1]
 8008d90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1e5      	bne.n	8008d64 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008da0:	d107      	bne.n	8008db2 <UART_Start_Receive_IT+0x102>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d103      	bne.n	8008db2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	4a21      	ldr	r2, [pc, #132]	; (8008e34 <UART_Start_Receive_IT+0x184>)
 8008dae:	669a      	str	r2, [r3, #104]	; 0x68
 8008db0:	e002      	b.n	8008db8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	4a20      	ldr	r2, [pc, #128]	; (8008e38 <UART_Start_Receive_IT+0x188>)
 8008db6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d019      	beq.n	8008df4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc8:	e853 3f00 	ldrex	r3, [r3]
 8008dcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dde:	637b      	str	r3, [r7, #52]	; 0x34
 8008de0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1e6      	bne.n	8008dc0 <UART_Start_Receive_IT+0x110>
 8008df2:	e018      	b.n	8008e26 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	e853 3f00 	ldrex	r3, [r3]
 8008e00:	613b      	str	r3, [r7, #16]
   return(result);
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	f043 0320 	orr.w	r3, r3, #32
 8008e08:	653b      	str	r3, [r7, #80]	; 0x50
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e12:	623b      	str	r3, [r7, #32]
 8008e14:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e16:	69f9      	ldr	r1, [r7, #28]
 8008e18:	6a3a      	ldr	r2, [r7, #32]
 8008e1a:	e841 2300 	strex	r3, r2, [r1]
 8008e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1e6      	bne.n	8008df4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	375c      	adds	r7, #92	; 0x5c
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr
 8008e34:	080090eb 	.word	0x080090eb
 8008e38:	08008f85 	.word	0x08008f85

08008e3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b095      	sub	sp, #84	; 0x54
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e4c:	e853 3f00 	ldrex	r3, [r3]
 8008e50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e62:	643b      	str	r3, [r7, #64]	; 0x40
 8008e64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e6a:	e841 2300 	strex	r3, r2, [r1]
 8008e6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1e6      	bne.n	8008e44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	3308      	adds	r3, #8
 8008e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	e853 3f00 	ldrex	r3, [r3]
 8008e84:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	f023 0301 	bic.w	r3, r3, #1
 8008e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3308      	adds	r3, #8
 8008e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e9e:	e841 2300 	strex	r3, r2, [r1]
 8008ea2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1e5      	bne.n	8008e76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d118      	bne.n	8008ee4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	e853 3f00 	ldrex	r3, [r3]
 8008ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f023 0310 	bic.w	r3, r3, #16
 8008ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ed0:	61bb      	str	r3, [r7, #24]
 8008ed2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed4:	6979      	ldr	r1, [r7, #20]
 8008ed6:	69ba      	ldr	r2, [r7, #24]
 8008ed8:	e841 2300 	strex	r3, r2, [r1]
 8008edc:	613b      	str	r3, [r7, #16]
   return(result);
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1e6      	bne.n	8008eb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008ef8:	bf00      	nop
 8008efa:	3754      	adds	r7, #84	; 0x54
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f7ff f962 	bl	80081ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f28:	bf00      	nop
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b088      	sub	sp, #32
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	e853 3f00 	ldrex	r3, [r3]
 8008f44:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f4c:	61fb      	str	r3, [r7, #28]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	461a      	mov	r2, r3
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	61bb      	str	r3, [r7, #24]
 8008f58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5a:	6979      	ldr	r1, [r7, #20]
 8008f5c:	69ba      	ldr	r2, [r7, #24]
 8008f5e:	e841 2300 	strex	r3, r2, [r1]
 8008f62:	613b      	str	r3, [r7, #16]
   return(result);
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1e6      	bne.n	8008f38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7ff f92e 	bl	80081d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f7c:	bf00      	nop
 8008f7e:	3720      	adds	r7, #32
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b096      	sub	sp, #88	; 0x58
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f92:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f9c:	2b22      	cmp	r3, #34	; 0x22
 8008f9e:	f040 8098 	bne.w	80090d2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008fac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008fb0:	b2d9      	uxtb	r1, r3
 8008fb2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fbc:	400a      	ands	r2, r1
 8008fbe:	b2d2      	uxtb	r2, r2
 8008fc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fc6:	1c5a      	adds	r2, r3, #1
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d17b      	bne.n	80090e2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff2:	e853 3f00 	ldrex	r3, [r3]
 8008ff6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ffe:	653b      	str	r3, [r7, #80]	; 0x50
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	461a      	mov	r2, r3
 8009006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009008:	647b      	str	r3, [r7, #68]	; 0x44
 800900a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800900e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009010:	e841 2300 	strex	r3, r2, [r1]
 8009014:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1e6      	bne.n	8008fea <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3308      	adds	r3, #8
 8009022:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009026:	e853 3f00 	ldrex	r3, [r3]
 800902a:	623b      	str	r3, [r7, #32]
   return(result);
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	f023 0301 	bic.w	r3, r3, #1
 8009032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3308      	adds	r3, #8
 800903a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800903c:	633a      	str	r2, [r7, #48]	; 0x30
 800903e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009044:	e841 2300 	strex	r3, r2, [r1]
 8009048:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800904a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1e5      	bne.n	800901c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2220      	movs	r2, #32
 8009054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009068:	2b01      	cmp	r3, #1
 800906a:	d12e      	bne.n	80090ca <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	e853 3f00 	ldrex	r3, [r3]
 800907e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f023 0310 	bic.w	r3, r3, #16
 8009086:	64bb      	str	r3, [r7, #72]	; 0x48
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	461a      	mov	r2, r3
 800908e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009090:	61fb      	str	r3, [r7, #28]
 8009092:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009094:	69b9      	ldr	r1, [r7, #24]
 8009096:	69fa      	ldr	r2, [r7, #28]
 8009098:	e841 2300 	strex	r3, r2, [r1]
 800909c:	617b      	str	r3, [r7, #20]
   return(result);
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1e6      	bne.n	8009072 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	f003 0310 	and.w	r3, r3, #16
 80090ae:	2b10      	cmp	r3, #16
 80090b0:	d103      	bne.n	80090ba <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2210      	movs	r2, #16
 80090b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7ff f89c 	bl	8008200 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090c8:	e00b      	b.n	80090e2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7f8 fb5c 	bl	8001788 <HAL_UART_RxCpltCallback>
}
 80090d0:	e007      	b.n	80090e2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	699a      	ldr	r2, [r3, #24]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f042 0208 	orr.w	r2, r2, #8
 80090e0:	619a      	str	r2, [r3, #24]
}
 80090e2:	bf00      	nop
 80090e4:	3758      	adds	r7, #88	; 0x58
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b096      	sub	sp, #88	; 0x58
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009102:	2b22      	cmp	r3, #34	; 0x22
 8009104:	f040 8098 	bne.w	8009238 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009116:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009118:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800911c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009120:	4013      	ands	r3, r2
 8009122:	b29a      	uxth	r2, r3
 8009124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009126:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800912c:	1c9a      	adds	r2, r3, #2
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009138:	b29b      	uxth	r3, r3
 800913a:	3b01      	subs	r3, #1
 800913c:	b29a      	uxth	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800914a:	b29b      	uxth	r3, r3
 800914c:	2b00      	cmp	r3, #0
 800914e:	d17b      	bne.n	8009248 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009158:	e853 3f00 	ldrex	r3, [r3]
 800915c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009164:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800916e:	643b      	str	r3, [r7, #64]	; 0x40
 8009170:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009172:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009174:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009176:	e841 2300 	strex	r3, r2, [r1]
 800917a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1e6      	bne.n	8009150 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3308      	adds	r3, #8
 8009188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	61fb      	str	r3, [r7, #28]
   return(result);
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	f023 0301 	bic.w	r3, r3, #1
 8009198:	64bb      	str	r3, [r7, #72]	; 0x48
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3308      	adds	r3, #8
 80091a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e5      	bne.n	8009182 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2220      	movs	r2, #32
 80091ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d12e      	bne.n	8009230 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	e853 3f00 	ldrex	r3, [r3]
 80091e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	f023 0310 	bic.w	r3, r3, #16
 80091ec:	647b      	str	r3, [r7, #68]	; 0x44
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	461a      	mov	r2, r3
 80091f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091f6:	61bb      	str	r3, [r7, #24]
 80091f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fa:	6979      	ldr	r1, [r7, #20]
 80091fc:	69ba      	ldr	r2, [r7, #24]
 80091fe:	e841 2300 	strex	r3, r2, [r1]
 8009202:	613b      	str	r3, [r7, #16]
   return(result);
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1e6      	bne.n	80091d8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	69db      	ldr	r3, [r3, #28]
 8009210:	f003 0310 	and.w	r3, r3, #16
 8009214:	2b10      	cmp	r3, #16
 8009216:	d103      	bne.n	8009220 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2210      	movs	r2, #16
 800921e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7fe ffe9 	bl	8008200 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800922e:	e00b      	b.n	8009248 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7f8 faa9 	bl	8001788 <HAL_UART_RxCpltCallback>
}
 8009236:	e007      	b.n	8009248 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	699a      	ldr	r2, [r3, #24]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f042 0208 	orr.w	r2, r2, #8
 8009246:	619a      	str	r2, [r3, #24]
}
 8009248:	bf00      	nop
 800924a:	3758      	adds	r7, #88	; 0x58
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800925a:	2300      	movs	r3, #0
 800925c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f001 fcb2 	bl	800abca <VL53L0X_get_offset_calibration_data_micro_meter>
 8009266:	4603      	mov	r3, r0
 8009268:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800926a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8009278:	b5b0      	push	{r4, r5, r7, lr}
 800927a:	b096      	sub	sp, #88	; 0x58
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009280:	2300      	movs	r3, #0
 8009282:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8009286:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800928a:	2b00      	cmp	r3, #0
 800928c:	d107      	bne.n	800929e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800928e:	2200      	movs	r2, #0
 8009290:	2188      	movs	r1, #136	; 0x88
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f004 feaa 	bl	800dfec <VL53L0X_WrByte>
 8009298:	4603      	mov	r3, r0
 800929a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092ac:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80092b6:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a9e      	ldr	r2, [pc, #632]	; (8009538 <VL53L0X_DataInit+0x2c0>)
 80092be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a9d      	ldr	r2, [pc, #628]	; (800953c <VL53L0X_DataInit+0x2c4>)
 80092c6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80092d0:	f107 0310 	add.w	r3, r7, #16
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fac2 	bl	8009860 <VL53L0X_GetDeviceParameters>
 80092dc:	4603      	mov	r3, r0
 80092de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80092e2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d112      	bne.n	8009310 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80092ea:	2300      	movs	r3, #0
 80092ec:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80092ee:	2300      	movs	r3, #0
 80092f0:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f103 0410 	add.w	r4, r3, #16
 80092f8:	f107 0510 	add.w	r5, r7, #16
 80092fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80092fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009308:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800930c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2264      	movs	r2, #100	; 0x64
 8009314:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800931e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009328:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8009332:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800933e:	2201      	movs	r2, #1
 8009340:	2180      	movs	r1, #128	; 0x80
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f004 fe52 	bl	800dfec <VL53L0X_WrByte>
 8009348:	4603      	mov	r3, r0
 800934a:	461a      	mov	r2, r3
 800934c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009350:	4313      	orrs	r3, r2
 8009352:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009356:	2201      	movs	r2, #1
 8009358:	21ff      	movs	r1, #255	; 0xff
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f004 fe46 	bl	800dfec <VL53L0X_WrByte>
 8009360:	4603      	mov	r3, r0
 8009362:	461a      	mov	r2, r3
 8009364:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009368:	4313      	orrs	r3, r2
 800936a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800936e:	2200      	movs	r2, #0
 8009370:	2100      	movs	r1, #0
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f004 fe3a 	bl	800dfec <VL53L0X_WrByte>
 8009378:	4603      	mov	r3, r0
 800937a:	461a      	mov	r2, r3
 800937c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009380:	4313      	orrs	r3, r2
 8009382:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8009386:	f107 030f 	add.w	r3, r7, #15
 800938a:	461a      	mov	r2, r3
 800938c:	2191      	movs	r1, #145	; 0x91
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f004 feae 	bl	800e0f0 <VL53L0X_RdByte>
 8009394:	4603      	mov	r3, r0
 8009396:	461a      	mov	r2, r3
 8009398:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800939c:	4313      	orrs	r3, r2
 800939e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80093a2:	7bfa      	ldrb	r2, [r7, #15]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80093aa:	2201      	movs	r2, #1
 80093ac:	2100      	movs	r1, #0
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f004 fe1c 	bl	800dfec <VL53L0X_WrByte>
 80093b4:	4603      	mov	r3, r0
 80093b6:	461a      	mov	r2, r3
 80093b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093bc:	4313      	orrs	r3, r2
 80093be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80093c2:	2200      	movs	r2, #0
 80093c4:	21ff      	movs	r1, #255	; 0xff
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f004 fe10 	bl	800dfec <VL53L0X_WrByte>
 80093cc:	4603      	mov	r3, r0
 80093ce:	461a      	mov	r2, r3
 80093d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093d4:	4313      	orrs	r3, r2
 80093d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80093da:	2200      	movs	r2, #0
 80093dc:	2180      	movs	r1, #128	; 0x80
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f004 fe04 	bl	800dfec <VL53L0X_WrByte>
 80093e4:	4603      	mov	r3, r0
 80093e6:	461a      	mov	r2, r3
 80093e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093ec:	4313      	orrs	r3, r2
 80093ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80093f2:	2300      	movs	r3, #0
 80093f4:	653b      	str	r3, [r7, #80]	; 0x50
 80093f6:	e014      	b.n	8009422 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80093f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d114      	bne.n	800942a <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8009400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009402:	b29b      	uxth	r3, r3
 8009404:	2201      	movs	r2, #1
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fd35 	bl	8009e78 <VL53L0X_SetLimitCheckEnable>
 800940e:	4603      	mov	r3, r0
 8009410:	461a      	mov	r2, r3
 8009412:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009416:	4313      	orrs	r3, r2
 8009418:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800941c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800941e:	3301      	adds	r3, #1
 8009420:	653b      	str	r3, [r7, #80]	; 0x50
 8009422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009424:	2b05      	cmp	r3, #5
 8009426:	dde7      	ble.n	80093f8 <VL53L0X_DataInit+0x180>
 8009428:	e000      	b.n	800942c <VL53L0X_DataInit+0x1b4>
		else
			break;
 800942a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800942c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009430:	2b00      	cmp	r3, #0
 8009432:	d107      	bne.n	8009444 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009434:	2200      	movs	r2, #0
 8009436:	2102      	movs	r1, #2
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fd1d 	bl	8009e78 <VL53L0X_SetLimitCheckEnable>
 800943e:	4603      	mov	r3, r0
 8009440:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009444:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009448:	2b00      	cmp	r3, #0
 800944a:	d107      	bne.n	800945c <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800944c:	2200      	movs	r2, #0
 800944e:	2103      	movs	r1, #3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fd11 	bl	8009e78 <VL53L0X_SetLimitCheckEnable>
 8009456:	4603      	mov	r3, r0
 8009458:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800945c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009460:	2b00      	cmp	r3, #0
 8009462:	d107      	bne.n	8009474 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009464:	2200      	movs	r2, #0
 8009466:	2104      	movs	r1, #4
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fd05 	bl	8009e78 <VL53L0X_SetLimitCheckEnable>
 800946e:	4603      	mov	r3, r0
 8009470:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009474:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009478:	2b00      	cmp	r3, #0
 800947a:	d107      	bne.n	800948c <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800947c:	2200      	movs	r2, #0
 800947e:	2105      	movs	r1, #5
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fcf9 	bl	8009e78 <VL53L0X_SetLimitCheckEnable>
 8009486:	4603      	mov	r3, r0
 8009488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800948c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009490:	2b00      	cmp	r3, #0
 8009492:	d108      	bne.n	80094a6 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009494:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8009498:	2100      	movs	r1, #0
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fd9c 	bl	8009fd8 <VL53L0X_SetLimitCheckValue>
 80094a0:	4603      	mov	r3, r0
 80094a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80094a6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d108      	bne.n	80094c0 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80094ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80094b2:	2101      	movs	r1, #1
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fd8f 	bl	8009fd8 <VL53L0X_SetLimitCheckValue>
 80094ba:	4603      	mov	r3, r0
 80094bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80094c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d108      	bne.n	80094da <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80094c8:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80094cc:	2102      	movs	r1, #2
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fd82 	bl	8009fd8 <VL53L0X_SetLimitCheckValue>
 80094d4:	4603      	mov	r3, r0
 80094d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80094da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d107      	bne.n	80094f2 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80094e2:	2200      	movs	r2, #0
 80094e4:	2103      	movs	r1, #3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fd76 	bl	8009fd8 <VL53L0X_SetLimitCheckValue>
 80094ec:	4603      	mov	r3, r0
 80094ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80094f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10f      	bne.n	800951a <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	22ff      	movs	r2, #255	; 0xff
 80094fe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009502:	22ff      	movs	r2, #255	; 0xff
 8009504:	2101      	movs	r1, #1
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f004 fd70 	bl	800dfec <VL53L0X_WrByte>
 800950c:	4603      	mov	r3, r0
 800950e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800951a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800951e:	2b00      	cmp	r3, #0
 8009520:	d103      	bne.n	800952a <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800952a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800952e:	4618      	mov	r0, r3
 8009530:	3758      	adds	r7, #88	; 0x58
 8009532:	46bd      	mov	sp, r7
 8009534:	bdb0      	pop	{r4, r5, r7, pc}
 8009536:	bf00      	nop
 8009538:	00016b85 	.word	0x00016b85
 800953c:	000970a4 	.word	0x000970a4

08009540 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8009540:	b5b0      	push	{r4, r5, r7, lr}
 8009542:	b09e      	sub	sp, #120	; 0x78
 8009544:	af02      	add	r7, sp, #8
 8009546:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009548:	2300      	movs	r3, #0
 800954a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800954e:	f107 031c 	add.w	r3, r7, #28
 8009552:	2240      	movs	r2, #64	; 0x40
 8009554:	2100      	movs	r1, #0
 8009556:	4618      	mov	r0, r3
 8009558:	f004 feb0 	bl	800e2bc <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800955c:	2300      	movs	r3, #0
 800955e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8009560:	2300      	movs	r3, #0
 8009562:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8009564:	2300      	movs	r3, #0
 8009566:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800956a:	2300      	movs	r3, #0
 800956c:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8009576:	2300      	movs	r3, #0
 8009578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800957c:	2101      	movs	r1, #1
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f002 fa79 	bl	800ba76 <VL53L0X_get_info_from_device>
 8009584:	4603      	mov	r3, r0
 8009586:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8009590:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8009598:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800959c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d80d      	bhi.n	80095c0 <VL53L0X_StaticInit+0x80>
 80095a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d102      	bne.n	80095b2 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80095ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095ae:	2b20      	cmp	r3, #32
 80095b0:	d806      	bhi.n	80095c0 <VL53L0X_StaticInit+0x80>
 80095b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10e      	bne.n	80095d8 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80095ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095bc:	2b0c      	cmp	r3, #12
 80095be:	d90b      	bls.n	80095d8 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80095c0:	f107 0218 	add.w	r2, r7, #24
 80095c4:	f107 0314 	add.w	r3, r7, #20
 80095c8:	4619      	mov	r1, r3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f001 fcf8 	bl	800afc0 <VL53L0X_perform_ref_spad_management>
 80095d0:	4603      	mov	r3, r0
 80095d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80095d6:	e009      	b.n	80095ec <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80095d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095dc:	461a      	mov	r2, r3
 80095de:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f001 fef9 	bl	800b3d8 <VL53L0X_set_reference_spads>
 80095e6:	4603      	mov	r3, r0
 80095e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80095ec:	4b94      	ldr	r3, [pc, #592]	; (8009840 <VL53L0X_StaticInit+0x300>)
 80095ee:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80095f0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10f      	bne.n	8009618 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80095fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8009602:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009606:	2b00      	cmp	r3, #0
 8009608:	d104      	bne.n	8009614 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8009610:	66bb      	str	r3, [r7, #104]	; 0x68
 8009612:	e001      	b.n	8009618 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8009614:	4b8a      	ldr	r3, [pc, #552]	; (8009840 <VL53L0X_StaticInit+0x300>)
 8009616:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009618:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800961c:	2b00      	cmp	r3, #0
 800961e:	d106      	bne.n	800962e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8009620:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f003 fdcc 	bl	800d1c0 <VL53L0X_load_tuning_settings>
 8009628:	4603      	mov	r3, r0
 800962a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800962e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10a      	bne.n	800964c <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8009636:	2300      	movs	r3, #0
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	2304      	movs	r3, #4
 800963c:	2200      	movs	r2, #0
 800963e:	2100      	movs	r1, #0
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f001 f8f1 	bl	800a828 <VL53L0X_SetGpioConfig>
 8009646:	4603      	mov	r3, r0
 8009648:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800964c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009650:	2b00      	cmp	r3, #0
 8009652:	d121      	bne.n	8009698 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009654:	2201      	movs	r2, #1
 8009656:	21ff      	movs	r1, #255	; 0xff
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f004 fcc7 	bl	800dfec <VL53L0X_WrByte>
 800965e:	4603      	mov	r3, r0
 8009660:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8009664:	f107 031a 	add.w	r3, r7, #26
 8009668:	461a      	mov	r2, r3
 800966a:	2184      	movs	r1, #132	; 0x84
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f004 fd69 	bl	800e144 <VL53L0X_RdWord>
 8009672:	4603      	mov	r3, r0
 8009674:	461a      	mov	r2, r3
 8009676:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800967a:	4313      	orrs	r3, r2
 800967c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009680:	2200      	movs	r2, #0
 8009682:	21ff      	movs	r1, #255	; 0xff
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f004 fcb1 	bl	800dfec <VL53L0X_WrByte>
 800968a:	4603      	mov	r3, r0
 800968c:	461a      	mov	r2, r3
 800968e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009692:	4313      	orrs	r3, r2
 8009694:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009698:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800969c:	2b00      	cmp	r3, #0
 800969e:	d105      	bne.n	80096ac <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80096a0:	8b7b      	ldrh	r3, [r7, #26]
 80096a2:	011b      	lsls	r3, r3, #4
 80096a4:	461a      	mov	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80096ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d108      	bne.n	80096c6 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80096b4:	f107 031c 	add.w	r3, r7, #28
 80096b8:	4619      	mov	r1, r3
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f8d0 	bl	8009860 <VL53L0X_GetDeviceParameters>
 80096c0:	4603      	mov	r3, r0
 80096c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80096c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d110      	bne.n	80096f0 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80096ce:	f107 0319 	add.w	r3, r7, #25
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 f992 	bl	80099fe <VL53L0X_GetFractionEnable>
 80096da:	4603      	mov	r3, r0
 80096dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80096e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d103      	bne.n	80096f0 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80096e8:	7e7a      	ldrb	r2, [r7, #25]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80096f0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10e      	bne.n	8009716 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f103 0410 	add.w	r4, r3, #16
 80096fe:	f107 051c 	add.w	r5, r7, #28
 8009702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800970a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800970c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800970e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009712:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8009716:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800971a:	2b00      	cmp	r3, #0
 800971c:	d111      	bne.n	8009742 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800971e:	f107 0319 	add.w	r3, r7, #25
 8009722:	461a      	mov	r2, r3
 8009724:	2101      	movs	r1, #1
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f004 fce2 	bl	800e0f0 <VL53L0X_RdByte>
 800972c:	4603      	mov	r3, r0
 800972e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8009732:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009736:	2b00      	cmp	r3, #0
 8009738:	d103      	bne.n	8009742 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800973a:	7e7a      	ldrb	r2, [r7, #25]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8009742:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009746:	2b00      	cmp	r3, #0
 8009748:	d107      	bne.n	800975a <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800974a:	2200      	movs	r2, #0
 800974c:	2100      	movs	r1, #0
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 f9ca 	bl	8009ae8 <VL53L0X_SetSequenceStepEnable>
 8009754:	4603      	mov	r3, r0
 8009756:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800975a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800975e:	2b00      	cmp	r3, #0
 8009760:	d107      	bne.n	8009772 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009762:	2200      	movs	r2, #0
 8009764:	2102      	movs	r1, #2
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f9be 	bl	8009ae8 <VL53L0X_SetSequenceStepEnable>
 800976c:	4603      	mov	r3, r0
 800976e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8009772:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009776:	2b00      	cmp	r3, #0
 8009778:	d103      	bne.n	8009782 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2203      	movs	r2, #3
 800977e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009782:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009786:	2b00      	cmp	r3, #0
 8009788:	d109      	bne.n	800979e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800978a:	f107 0313 	add.w	r3, r7, #19
 800978e:	461a      	mov	r2, r3
 8009790:	2100      	movs	r1, #0
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f990 	bl	8009ab8 <VL53L0X_GetVcselPulsePeriod>
 8009798:	4603      	mov	r3, r0
 800979a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800979e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d103      	bne.n	80097ae <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80097a6:	7cfa      	ldrb	r2, [r7, #19]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80097ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d109      	bne.n	80097ca <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80097b6:	f107 0313 	add.w	r3, r7, #19
 80097ba:	461a      	mov	r2, r3
 80097bc:	2101      	movs	r1, #1
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f97a 	bl	8009ab8 <VL53L0X_GetVcselPulsePeriod>
 80097c4:	4603      	mov	r3, r0
 80097c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80097ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d103      	bne.n	80097da <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80097d2:	7cfa      	ldrb	r2, [r7, #19]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80097da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d109      	bne.n	80097f6 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80097e2:	f107 030c 	add.w	r3, r7, #12
 80097e6:	461a      	mov	r2, r3
 80097e8:	2103      	movs	r1, #3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f002 fec4 	bl	800c578 <get_sequence_step_timeout>
 80097f0:	4603      	mov	r3, r0
 80097f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80097f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d103      	bne.n	8009806 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8009806:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800980a:	2b00      	cmp	r3, #0
 800980c:	d109      	bne.n	8009822 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800980e:	f107 030c 	add.w	r3, r7, #12
 8009812:	461a      	mov	r2, r3
 8009814:	2104      	movs	r1, #4
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f002 feae 	bl	800c578 <get_sequence_step_timeout>
 800981c:	4603      	mov	r3, r0
 800981e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009822:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009826:	2b00      	cmp	r3, #0
 8009828:	d103      	bne.n	8009832 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009832:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8009836:	4618      	mov	r0, r3
 8009838:	3770      	adds	r7, #112	; 0x70
 800983a:	46bd      	mov	sp, r7
 800983c:	bdb0      	pop	{r4, r5, r7, pc}
 800983e:	bf00      	nop
 8009840:	2000000c 	.word	0x2000000c

08009844 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800984c:	239d      	movs	r3, #157	; 0x9d
 800984e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8009850:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800986a:	2300      	movs	r3, #0
 800986c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	4619      	mov	r1, r3
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f8b0 	bl	80099d8 <VL53L0X_GetDeviceMode>
 8009878:	4603      	mov	r3, r0
 800987a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800987c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d107      	bne.n	8009894 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	3308      	adds	r3, #8
 8009888:	4619      	mov	r1, r3
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fa78 	bl	8009d80 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8009890:	4603      	mov	r3, r0
 8009892:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8009894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d102      	bne.n	80098a2 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	2200      	movs	r2, #0
 80098a0:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80098a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d107      	bne.n	80098ba <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	3310      	adds	r3, #16
 80098ae:	4619      	mov	r1, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 faae 	bl	8009e12 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80098b6:	4603      	mov	r3, r0
 80098b8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80098ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d107      	bne.n	80098d2 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	3314      	adds	r3, #20
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7ff fcc1 	bl	8009250 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80098ce:	4603      	mov	r3, r0
 80098d0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80098d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d134      	bne.n	8009944 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80098da:	2300      	movs	r3, #0
 80098dc:	60bb      	str	r3, [r7, #8]
 80098de:	e02a      	b.n	8009936 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80098e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d12a      	bne.n	800993e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	b299      	uxth	r1, r3
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	3308      	adds	r3, #8
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	4413      	add	r3, r2
 80098f6:	3304      	adds	r3, #4
 80098f8:	461a      	mov	r2, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fbce 	bl	800a09c <VL53L0X_GetLimitCheckValue>
 8009900:	4603      	mov	r3, r0
 8009902:	461a      	mov	r2, r3
 8009904:	7bfb      	ldrb	r3, [r7, #15]
 8009906:	4313      	orrs	r3, r2
 8009908:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800990a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d117      	bne.n	8009942 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	b299      	uxth	r1, r3
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	3318      	adds	r3, #24
 800991a:	683a      	ldr	r2, [r7, #0]
 800991c:	4413      	add	r3, r2
 800991e:	461a      	mov	r2, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fb35 	bl	8009f90 <VL53L0X_GetLimitCheckEnable>
 8009926:	4603      	mov	r3, r0
 8009928:	461a      	mov	r2, r3
 800992a:	7bfb      	ldrb	r3, [r7, #15]
 800992c:	4313      	orrs	r3, r2
 800992e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	3301      	adds	r3, #1
 8009934:	60bb      	str	r3, [r7, #8]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b05      	cmp	r3, #5
 800993a:	ddd1      	ble.n	80098e0 <VL53L0X_GetDeviceParameters+0x80>
 800993c:	e002      	b.n	8009944 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800993e:	bf00      	nop
 8009940:	e000      	b.n	8009944 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8009942:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d107      	bne.n	800995c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	333c      	adds	r3, #60	; 0x3c
 8009950:	4619      	mov	r1, r3
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fc30 	bl	800a1b8 <VL53L0X_GetWrapAroundCheckEnable>
 8009958:	4603      	mov	r3, r0
 800995a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800995c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d107      	bne.n	8009974 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	3304      	adds	r3, #4
 8009968:	4619      	mov	r1, r3
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f879 	bl	8009a62 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8009970:	4603      	mov	r3, r0
 8009972:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009974:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800998c:	2300      	movs	r3, #0
 800998e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	2b15      	cmp	r3, #21
 8009994:	bf8c      	ite	hi
 8009996:	2201      	movhi	r2, #1
 8009998:	2200      	movls	r2, #0
 800999a:	b2d2      	uxtb	r2, r2
 800999c:	2a00      	cmp	r2, #0
 800999e:	d10e      	bne.n	80099be <VL53L0X_SetDeviceMode+0x3e>
 80099a0:	2201      	movs	r2, #1
 80099a2:	409a      	lsls	r2, r3
 80099a4:	4b0b      	ldr	r3, [pc, #44]	; (80099d4 <VL53L0X_SetDeviceMode+0x54>)
 80099a6:	4013      	ands	r3, r2
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	bf14      	ite	ne
 80099ac:	2301      	movne	r3, #1
 80099ae:	2300      	moveq	r3, #0
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	78fa      	ldrb	r2, [r7, #3]
 80099ba:	741a      	strb	r2, [r3, #16]
		break;
 80099bc:	e001      	b.n	80099c2 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80099be:	23f8      	movs	r3, #248	; 0xf8
 80099c0:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80099c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	0030000b 	.word	0x0030000b

080099d8 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099e2:	2300      	movs	r3, #0
 80099e4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	7c1a      	ldrb	r2, [r3, #16]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80099ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b084      	sub	sp, #16
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8009a0c:	683a      	ldr	r2, [r7, #0]
 8009a0e:	2109      	movs	r1, #9
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f004 fb6d 	bl	800e0f0 <VL53L0X_RdByte>
 8009a16:	4603      	mov	r3, r0
 8009a18:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d106      	bne.n	8009a30 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a46:	2300      	movs	r3, #0
 8009a48:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8009a4a:	6839      	ldr	r1, [r7, #0]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f003 fa26 	bl	800ce9e <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8009a52:	4603      	mov	r3, r0
 8009a54:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8009a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b084      	sub	sp, #16
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f003 faf3 	bl	800d05e <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8009a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	460b      	mov	r3, r1
 8009a92:	70fb      	strb	r3, [r7, #3]
 8009a94:	4613      	mov	r3, r2
 8009a96:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8009a9c:	78ba      	ldrb	r2, [r7, #2]
 8009a9e:	78fb      	ldrb	r3, [r7, #3]
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f002 ff3b 	bl	800c91e <VL53L0X_set_vcsel_pulse_period>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8009aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	607a      	str	r2, [r7, #4]
 8009ac4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8009aca:	7afb      	ldrb	r3, [r7, #11]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	4619      	mov	r1, r3
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f003 f9ad 	bl	800ce30 <VL53L0X_get_vcsel_pulse_period>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8009ada:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3718      	adds	r7, #24
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
	...

08009ae8 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	70fb      	strb	r3, [r7, #3]
 8009af4:	4613      	mov	r3, r2
 8009af6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009af8:	2300      	movs	r3, #0
 8009afa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8009b00:	2300      	movs	r3, #0
 8009b02:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009b04:	f107 030f 	add.w	r3, r7, #15
 8009b08:	461a      	mov	r2, r3
 8009b0a:	2101      	movs	r1, #1
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f004 faef 	bl	800e0f0 <VL53L0X_RdByte>
 8009b12:	4603      	mov	r3, r0
 8009b14:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8009b16:	7bfb      	ldrb	r3, [r7, #15]
 8009b18:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8009b1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d15a      	bne.n	8009bd8 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8009b22:	78bb      	ldrb	r3, [r7, #2]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d12b      	bne.n	8009b80 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8009b28:	78fb      	ldrb	r3, [r7, #3]
 8009b2a:	2b04      	cmp	r3, #4
 8009b2c:	d825      	bhi.n	8009b7a <VL53L0X_SetSequenceStepEnable+0x92>
 8009b2e:	a201      	add	r2, pc, #4	; (adr r2, 8009b34 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8009b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b34:	08009b49 	.word	0x08009b49
 8009b38:	08009b53 	.word	0x08009b53
 8009b3c:	08009b5d 	.word	0x08009b5d
 8009b40:	08009b67 	.word	0x08009b67
 8009b44:	08009b71 	.word	0x08009b71
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8009b48:	7dbb      	ldrb	r3, [r7, #22]
 8009b4a:	f043 0310 	orr.w	r3, r3, #16
 8009b4e:	75bb      	strb	r3, [r7, #22]
				break;
 8009b50:	e043      	b.n	8009bda <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8009b52:	7dbb      	ldrb	r3, [r7, #22]
 8009b54:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8009b58:	75bb      	strb	r3, [r7, #22]
				break;
 8009b5a:	e03e      	b.n	8009bda <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8009b5c:	7dbb      	ldrb	r3, [r7, #22]
 8009b5e:	f043 0304 	orr.w	r3, r3, #4
 8009b62:	75bb      	strb	r3, [r7, #22]
				break;
 8009b64:	e039      	b.n	8009bda <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8009b66:	7dbb      	ldrb	r3, [r7, #22]
 8009b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b6c:	75bb      	strb	r3, [r7, #22]
				break;
 8009b6e:	e034      	b.n	8009bda <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8009b70:	7dbb      	ldrb	r3, [r7, #22]
 8009b72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b76:	75bb      	strb	r3, [r7, #22]
				break;
 8009b78:	e02f      	b.n	8009bda <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009b7a:	23fc      	movs	r3, #252	; 0xfc
 8009b7c:	75fb      	strb	r3, [r7, #23]
 8009b7e:	e02c      	b.n	8009bda <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8009b80:	78fb      	ldrb	r3, [r7, #3]
 8009b82:	2b04      	cmp	r3, #4
 8009b84:	d825      	bhi.n	8009bd2 <VL53L0X_SetSequenceStepEnable+0xea>
 8009b86:	a201      	add	r2, pc, #4	; (adr r2, 8009b8c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8009b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8c:	08009ba1 	.word	0x08009ba1
 8009b90:	08009bab 	.word	0x08009bab
 8009b94:	08009bb5 	.word	0x08009bb5
 8009b98:	08009bbf 	.word	0x08009bbf
 8009b9c:	08009bc9 	.word	0x08009bc9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8009ba0:	7dbb      	ldrb	r3, [r7, #22]
 8009ba2:	f023 0310 	bic.w	r3, r3, #16
 8009ba6:	75bb      	strb	r3, [r7, #22]
				break;
 8009ba8:	e017      	b.n	8009bda <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8009baa:	7dbb      	ldrb	r3, [r7, #22]
 8009bac:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8009bb0:	75bb      	strb	r3, [r7, #22]
				break;
 8009bb2:	e012      	b.n	8009bda <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8009bb4:	7dbb      	ldrb	r3, [r7, #22]
 8009bb6:	f023 0304 	bic.w	r3, r3, #4
 8009bba:	75bb      	strb	r3, [r7, #22]
				break;
 8009bbc:	e00d      	b.n	8009bda <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8009bbe:	7dbb      	ldrb	r3, [r7, #22]
 8009bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bc4:	75bb      	strb	r3, [r7, #22]
				break;
 8009bc6:	e008      	b.n	8009bda <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8009bc8:	7dbb      	ldrb	r3, [r7, #22]
 8009bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bce:	75bb      	strb	r3, [r7, #22]
				break;
 8009bd0:	e003      	b.n	8009bda <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009bd2:	23fc      	movs	r3, #252	; 0xfc
 8009bd4:	75fb      	strb	r3, [r7, #23]
 8009bd6:	e000      	b.n	8009bda <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8009bd8:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
 8009bdc:	7dba      	ldrb	r2, [r7, #22]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d01e      	beq.n	8009c20 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8009be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d107      	bne.n	8009bfa <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8009bea:	7dbb      	ldrb	r3, [r7, #22]
 8009bec:	461a      	mov	r2, r3
 8009bee:	2101      	movs	r1, #1
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f004 f9fb 	bl	800dfec <VL53L0X_WrByte>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8009bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d103      	bne.n	8009c0a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	7dba      	ldrb	r2, [r7, #22]
 8009c06:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8009c0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d106      	bne.n	8009c20 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8009c18:	6939      	ldr	r1, [r7, #16]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f7ff ff0e 	bl	8009a3c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3718      	adds	r7, #24
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b087      	sub	sp, #28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	607b      	str	r3, [r7, #4]
 8009c36:	460b      	mov	r3, r1
 8009c38:	72fb      	strb	r3, [r7, #11]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8009c48:	7afb      	ldrb	r3, [r7, #11]
 8009c4a:	2b04      	cmp	r3, #4
 8009c4c:	d836      	bhi.n	8009cbc <sequence_step_enabled+0x90>
 8009c4e:	a201      	add	r2, pc, #4	; (adr r2, 8009c54 <sequence_step_enabled+0x28>)
 8009c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c54:	08009c69 	.word	0x08009c69
 8009c58:	08009c7b 	.word	0x08009c7b
 8009c5c:	08009c8d 	.word	0x08009c8d
 8009c60:	08009c9f 	.word	0x08009c9f
 8009c64:	08009cb1 	.word	0x08009cb1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8009c68:	7abb      	ldrb	r3, [r7, #10]
 8009c6a:	111b      	asrs	r3, r3, #4
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	f003 0301 	and.w	r3, r3, #1
 8009c72:	b2da      	uxtb	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	701a      	strb	r2, [r3, #0]
		break;
 8009c78:	e022      	b.n	8009cc0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8009c7a:	7abb      	ldrb	r3, [r7, #10]
 8009c7c:	10db      	asrs	r3, r3, #3
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	f003 0301 	and.w	r3, r3, #1
 8009c84:	b2da      	uxtb	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	701a      	strb	r2, [r3, #0]
		break;
 8009c8a:	e019      	b.n	8009cc0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8009c8c:	7abb      	ldrb	r3, [r7, #10]
 8009c8e:	109b      	asrs	r3, r3, #2
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	701a      	strb	r2, [r3, #0]
		break;
 8009c9c:	e010      	b.n	8009cc0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8009c9e:	7abb      	ldrb	r3, [r7, #10]
 8009ca0:	119b      	asrs	r3, r3, #6
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	f003 0301 	and.w	r3, r3, #1
 8009ca8:	b2da      	uxtb	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	701a      	strb	r2, [r3, #0]
		break;
 8009cae:	e007      	b.n	8009cc0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8009cb0:	7abb      	ldrb	r3, [r7, #10]
 8009cb2:	09db      	lsrs	r3, r3, #7
 8009cb4:	b2da      	uxtb	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	701a      	strb	r2, [r3, #0]
		break;
 8009cba:	e001      	b.n	8009cc0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009cbc:	23fc      	movs	r3, #252	; 0xfc
 8009cbe:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	371c      	adds	r7, #28
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009ce2:	f107 030e 	add.w	r3, r7, #14
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	2101      	movs	r1, #1
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f004 fa00 	bl	800e0f0 <VL53L0X_RdByte>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8009cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d107      	bne.n	8009d0c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8009cfc:	7bba      	ldrb	r2, [r7, #14]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2100      	movs	r1, #0
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f7ff ff92 	bl	8009c2c <sequence_step_enabled>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d108      	bne.n	8009d26 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8009d14:	7bba      	ldrb	r2, [r7, #14]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	3302      	adds	r3, #2
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7ff ff85 	bl	8009c2c <sequence_step_enabled>
 8009d22:	4603      	mov	r3, r0
 8009d24:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d108      	bne.n	8009d40 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8009d2e:	7bba      	ldrb	r2, [r7, #14]
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	3301      	adds	r3, #1
 8009d34:	2102      	movs	r1, #2
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7ff ff78 	bl	8009c2c <sequence_step_enabled>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d108      	bne.n	8009d5a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8009d48:	7bba      	ldrb	r2, [r7, #14]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	3303      	adds	r3, #3
 8009d4e:	2103      	movs	r1, #3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7ff ff6b 	bl	8009c2c <sequence_step_enabled>
 8009d56:	4603      	mov	r3, r0
 8009d58:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d108      	bne.n	8009d74 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8009d62:	7bba      	ldrb	r2, [r7, #14]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	3304      	adds	r3, #4
 8009d68:	2104      	movs	r1, #4
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7ff ff5e 	bl	8009c2c <sequence_step_enabled>
 8009d70:	4603      	mov	r3, r0
 8009d72:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8009d8e:	f107 030c 	add.w	r3, r7, #12
 8009d92:	461a      	mov	r2, r3
 8009d94:	21f8      	movs	r1, #248	; 0xf8
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f004 f9d4 	bl	800e144 <VL53L0X_RdWord>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8009da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d108      	bne.n	8009dba <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8009da8:	f107 0308 	add.w	r3, r7, #8
 8009dac:	461a      	mov	r2, r3
 8009dae:	2104      	movs	r1, #4
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f004 f9ff 	bl	800e1b4 <VL53L0X_RdDWord>
 8009db6:	4603      	mov	r3, r0
 8009db8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10c      	bne.n	8009ddc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8009dc2:	89bb      	ldrh	r3, [r7, #12]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d005      	beq.n	8009dd4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	89ba      	ldrh	r2, [r7, #12]
 8009dcc:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009df2:	2300      	movs	r3, #0
 8009df4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	7f1b      	ldrb	r3, [r3, #28]
 8009dfa:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	7bba      	ldrb	r2, [r7, #14]
 8009e00:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b086      	sub	sp, #24
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8009e20:	f107 030e 	add.w	r3, r7, #14
 8009e24:	461a      	mov	r2, r3
 8009e26:	2120      	movs	r1, #32
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f004 f98b 	bl	800e144 <VL53L0X_RdWord>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8009e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d118      	bne.n	8009e6c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8009e3a:	89fb      	ldrh	r3, [r7, #14]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d109      	bne.n	8009e54 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a1b      	ldr	r3, [r3, #32]
 8009e44:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	771a      	strb	r2, [r3, #28]
 8009e52:	e00b      	b.n	8009e6c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8009e54:	89fb      	ldrh	r3, [r7, #14]
 8009e56:	00db      	lsls	r3, r3, #3
 8009e58:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	693a      	ldr	r2, [r7, #16]
 8009e5e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009e6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3718      	adds	r7, #24
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b086      	sub	sp, #24
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	460b      	mov	r3, r1
 8009e82:	807b      	strh	r3, [r7, #2]
 8009e84:	4613      	mov	r3, r2
 8009e86:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8009e94:	2300      	movs	r3, #0
 8009e96:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009e98:	887b      	ldrh	r3, [r7, #2]
 8009e9a:	2b05      	cmp	r3, #5
 8009e9c:	d902      	bls.n	8009ea4 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e9e:	23fc      	movs	r3, #252	; 0xfc
 8009ea0:	75fb      	strb	r3, [r7, #23]
 8009ea2:	e05b      	b.n	8009f5c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8009ea4:	787b      	ldrb	r3, [r7, #1]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d106      	bne.n	8009eb8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	73bb      	strb	r3, [r7, #14]
 8009eb6:	e00a      	b.n	8009ece <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009eb8:	887b      	ldrh	r3, [r7, #2]
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	330c      	adds	r3, #12
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8009ece:	887b      	ldrh	r3, [r7, #2]
 8009ed0:	2b05      	cmp	r3, #5
 8009ed2:	d841      	bhi.n	8009f58 <VL53L0X_SetLimitCheckEnable+0xe0>
 8009ed4:	a201      	add	r2, pc, #4	; (adr r2, 8009edc <VL53L0X_SetLimitCheckEnable+0x64>)
 8009ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eda:	bf00      	nop
 8009edc:	08009ef5 	.word	0x08009ef5
 8009ee0:	08009eff 	.word	0x08009eff
 8009ee4:	08009f15 	.word	0x08009f15
 8009ee8:	08009f1f 	.word	0x08009f1f
 8009eec:	08009f29 	.word	0x08009f29
 8009ef0:	08009f41 	.word	0x08009f41

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	7bfa      	ldrb	r2, [r7, #15]
 8009ef8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8009efc:	e02e      	b.n	8009f5c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	461a      	mov	r2, r3
 8009f06:	2144      	movs	r1, #68	; 0x44
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f004 f893 	bl	800e034 <VL53L0X_WrWord>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	75fb      	strb	r3, [r7, #23]

			break;
 8009f12:	e023      	b.n	8009f5c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	7bfa      	ldrb	r2, [r7, #15]
 8009f18:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8009f1c:	e01e      	b.n	8009f5c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	7bfa      	ldrb	r2, [r7, #15]
 8009f22:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8009f26:	e019      	b.n	8009f5c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8009f28:	7bbb      	ldrb	r3, [r7, #14]
 8009f2a:	005b      	lsls	r3, r3, #1
 8009f2c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009f2e:	7b7b      	ldrb	r3, [r7, #13]
 8009f30:	22fe      	movs	r2, #254	; 0xfe
 8009f32:	2160      	movs	r1, #96	; 0x60
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f004 f8a7 	bl	800e088 <VL53L0X_UpdateByte>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8009f3e:	e00d      	b.n	8009f5c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8009f40:	7bbb      	ldrb	r3, [r7, #14]
 8009f42:	011b      	lsls	r3, r3, #4
 8009f44:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009f46:	7b7b      	ldrb	r3, [r7, #13]
 8009f48:	22ef      	movs	r2, #239	; 0xef
 8009f4a:	2160      	movs	r1, #96	; 0x60
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f004 f89b 	bl	800e088 <VL53L0X_UpdateByte>
 8009f52:	4603      	mov	r3, r0
 8009f54:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8009f56:	e001      	b.n	8009f5c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009f58:	23fc      	movs	r3, #252	; 0xfc
 8009f5a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10f      	bne.n	8009f84 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8009f64:	787b      	ldrb	r3, [r7, #1]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d106      	bne.n	8009f78 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009f6a:	887b      	ldrh	r3, [r7, #2]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	4413      	add	r3, r2
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009f76:	e005      	b.n	8009f84 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009f78:	887b      	ldrh	r3, [r7, #2]
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3718      	adds	r7, #24
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b087      	sub	sp, #28
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	607a      	str	r2, [r7, #4]
 8009f9c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009fa2:	897b      	ldrh	r3, [r7, #10]
 8009fa4:	2b05      	cmp	r3, #5
 8009fa6:	d905      	bls.n	8009fb4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009fa8:	23fc      	movs	r3, #252	; 0xfc
 8009faa:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	701a      	strb	r2, [r3, #0]
 8009fb2:	e008      	b.n	8009fc6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009fb4:	897b      	ldrh	r3, [r7, #10]
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	4413      	add	r3, r2
 8009fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fbe:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	7dba      	ldrb	r2, [r7, #22]
 8009fc4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	371c      	adds	r7, #28
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
	...

08009fd8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	607a      	str	r2, [r7, #4]
 8009fe4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8009fea:	897b      	ldrh	r3, [r7, #10]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ff4:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8009ff6:	7dbb      	ldrb	r3, [r7, #22]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d107      	bne.n	800a00c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009ffc:	897b      	ldrh	r3, [r7, #10]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	330c      	adds	r3, #12
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	605a      	str	r2, [r3, #4]
 800a00a:	e040      	b.n	800a08e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800a00c:	897b      	ldrh	r3, [r7, #10]
 800a00e:	2b05      	cmp	r3, #5
 800a010:	d830      	bhi.n	800a074 <VL53L0X_SetLimitCheckValue+0x9c>
 800a012:	a201      	add	r2, pc, #4	; (adr r2, 800a018 <VL53L0X_SetLimitCheckValue+0x40>)
 800a014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a018:	0800a031 	.word	0x0800a031
 800a01c:	0800a039 	.word	0x0800a039
 800a020:	0800a04f 	.word	0x0800a04f
 800a024:	0800a057 	.word	0x0800a057
 800a028:	0800a05f 	.word	0x0800a05f
 800a02c:	0800a05f 	.word	0x0800a05f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800a036:	e01f      	b.n	800a078 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	461a      	mov	r2, r3
 800a040:	2144      	movs	r1, #68	; 0x44
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f003 fff6 	bl	800e034 <VL53L0X_WrWord>
 800a048:	4603      	mov	r3, r0
 800a04a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800a04c:	e014      	b.n	800a078 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800a054:	e010      	b.n	800a078 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800a05c:	e00c      	b.n	800a078 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a062:	b29b      	uxth	r3, r3
 800a064:	461a      	mov	r2, r3
 800a066:	2164      	movs	r1, #100	; 0x64
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f003 ffe3 	bl	800e034 <VL53L0X_WrWord>
 800a06e:	4603      	mov	r3, r0
 800a070:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800a072:	e001      	b.n	800a078 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a074:	23fc      	movs	r3, #252	; 0xfc
 800a076:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a078:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d106      	bne.n	800a08e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a080:	897b      	ldrh	r3, [r7, #10]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	330c      	adds	r3, #12
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a08e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3718      	adds	r7, #24
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop

0800a09c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b088      	sub	sp, #32
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	607a      	str	r2, [r7, #4]
 800a0a8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800a0b2:	897b      	ldrh	r3, [r7, #10]
 800a0b4:	2b05      	cmp	r3, #5
 800a0b6:	d847      	bhi.n	800a148 <VL53L0X_GetLimitCheckValue+0xac>
 800a0b8:	a201      	add	r2, pc, #4	; (adr r2, 800a0c0 <VL53L0X_GetLimitCheckValue+0x24>)
 800a0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0be:	bf00      	nop
 800a0c0:	0800a0d9 	.word	0x0800a0d9
 800a0c4:	0800a0e5 	.word	0x0800a0e5
 800a0c8:	0800a10b 	.word	0x0800a10b
 800a0cc:	0800a117 	.word	0x0800a117
 800a0d0:	0800a123 	.word	0x0800a123
 800a0d4:	0800a123 	.word	0x0800a123

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0dc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	77bb      	strb	r3, [r7, #30]
		break;
 800a0e2:	e033      	b.n	800a14c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800a0e4:	f107 0316 	add.w	r3, r7, #22
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	2144      	movs	r1, #68	; 0x44
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f004 f829 	bl	800e144 <VL53L0X_RdWord>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800a0f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d102      	bne.n	800a104 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800a0fe:	8afb      	ldrh	r3, [r7, #22]
 800a100:	025b      	lsls	r3, r3, #9
 800a102:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800a104:	2301      	movs	r3, #1
 800a106:	77bb      	strb	r3, [r7, #30]
		break;
 800a108:	e020      	b.n	800a14c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a10e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800a110:	2300      	movs	r3, #0
 800a112:	77bb      	strb	r3, [r7, #30]
		break;
 800a114:	e01a      	b.n	800a14c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800a11c:	2300      	movs	r3, #0
 800a11e:	77bb      	strb	r3, [r7, #30]
		break;
 800a120:	e014      	b.n	800a14c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800a122:	f107 0316 	add.w	r3, r7, #22
 800a126:	461a      	mov	r2, r3
 800a128:	2164      	movs	r1, #100	; 0x64
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f004 f80a 	bl	800e144 <VL53L0X_RdWord>
 800a130:	4603      	mov	r3, r0
 800a132:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800a134:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d102      	bne.n	800a142 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800a13c:	8afb      	ldrh	r3, [r7, #22]
 800a13e:	025b      	lsls	r3, r3, #9
 800a140:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800a142:	2300      	movs	r3, #0
 800a144:	77bb      	strb	r3, [r7, #30]
		break;
 800a146:	e001      	b.n	800a14c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a148:	23fc      	movs	r3, #252	; 0xfc
 800a14a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a14c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d12a      	bne.n	800a1aa <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800a154:	7fbb      	ldrb	r3, [r7, #30]
 800a156:	2b01      	cmp	r3, #1
 800a158:	d124      	bne.n	800a1a4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d110      	bne.n	800a182 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800a160:	897b      	ldrh	r3, [r7, #10]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	330c      	adds	r3, #12
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	4413      	add	r3, r2
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	69ba      	ldr	r2, [r7, #24]
 800a172:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a174:	897b      	ldrh	r3, [r7, #10]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	4413      	add	r3, r2
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a180:	e013      	b.n	800a1aa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	69ba      	ldr	r2, [r7, #24]
 800a186:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a188:	897b      	ldrh	r3, [r7, #10]
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	330c      	adds	r3, #12
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4413      	add	r3, r2
 800a192:	69ba      	ldr	r2, [r7, #24]
 800a194:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a196:	897b      	ldrh	r3, [r7, #10]
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	4413      	add	r3, r2
 800a19c:	2201      	movs	r2, #1
 800a19e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a1a2:	e002      	b.n	800a1aa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	69ba      	ldr	r2, [r7, #24]
 800a1a8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a1aa:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3720      	adds	r7, #32
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop

0800a1b8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800a1c6:	f107 030e 	add.w	r3, r7, #14
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f003 ff8e 	bl	800e0f0 <VL53L0X_RdByte>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800a1d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10e      	bne.n	800a1fe <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800a1e0:	7bba      	ldrb	r2, [r7, #14]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ea:	b25b      	sxtb	r3, r3
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	da03      	bge.n	800a1f8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	701a      	strb	r2, [r3, #0]
 800a1f6:	e002      	b.n	800a1fe <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a1fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d104      	bne.n	800a210 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	781a      	ldrb	r2, [r3, #0]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a210:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a224:	2300      	movs	r3, #0
 800a226:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800a228:	f107 030e 	add.w	r3, r7, #14
 800a22c:	4619      	mov	r1, r3
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f7ff fbd2 	bl	80099d8 <VL53L0X_GetDeviceMode>
 800a234:	4603      	mov	r3, r0
 800a236:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800a238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d107      	bne.n	800a250 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a240:	7bbb      	ldrb	r3, [r7, #14]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d104      	bne.n	800a250 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f898 	bl	800a37c <VL53L0X_StartMeasurement>
 800a24c:	4603      	mov	r3, r0
 800a24e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d104      	bne.n	800a262 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f001 fb3f 	bl	800b8dc <VL53L0X_measurement_poll_for_completion>
 800a25e:	4603      	mov	r3, r0
 800a260:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800a262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d106      	bne.n	800a278 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a26a:	7bbb      	ldrb	r3, [r7, #14]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d103      	bne.n	800a278 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2203      	movs	r2, #3
 800a274:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800a278:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a290:	2300      	movs	r3, #0
 800a292:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800a294:	2301      	movs	r3, #1
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	68b9      	ldr	r1, [r7, #8]
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f001 fae1 	bl	800b862 <VL53L0X_perform_ref_calibration>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800a2a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3718      	adds	r7, #24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800a2c6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800a2c8:	7dbb      	ldrb	r3, [r7, #22]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d005      	beq.n	800a2da <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800a2ce:	7dbb      	ldrb	r3, [r7, #22]
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d002      	beq.n	800a2da <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800a2d4:	7dbb      	ldrb	r3, [r7, #22]
 800a2d6:	2b03      	cmp	r3, #3
 800a2d8:	d147      	bne.n	800a36a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800a2da:	f107 030c 	add.w	r3, r7, #12
 800a2de:	f107 0210 	add.w	r2, r7, #16
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fbc3 	bl	800aa70 <VL53L0X_GetInterruptThresholds>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800a2f4:	d803      	bhi.n	800a2fe <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800a2f6:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800a2f8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800a2fc:	d935      	bls.n	800a36a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800a2fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d131      	bne.n	800a36a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800a306:	78fb      	ldrb	r3, [r7, #3]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d006      	beq.n	800a31a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800a30c:	491a      	ldr	r1, [pc, #104]	; (800a378 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f002 ff56 	bl	800d1c0 <VL53L0X_load_tuning_settings>
 800a314:	4603      	mov	r3, r0
 800a316:	75fb      	strb	r3, [r7, #23]
 800a318:	e027      	b.n	800a36a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800a31a:	2204      	movs	r2, #4
 800a31c:	21ff      	movs	r1, #255	; 0xff
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f003 fe64 	bl	800dfec <VL53L0X_WrByte>
 800a324:	4603      	mov	r3, r0
 800a326:	461a      	mov	r2, r3
 800a328:	7dfb      	ldrb	r3, [r7, #23]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800a32e:	2200      	movs	r2, #0
 800a330:	2170      	movs	r1, #112	; 0x70
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f003 fe5a 	bl	800dfec <VL53L0X_WrByte>
 800a338:	4603      	mov	r3, r0
 800a33a:	461a      	mov	r2, r3
 800a33c:	7dfb      	ldrb	r3, [r7, #23]
 800a33e:	4313      	orrs	r3, r2
 800a340:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a342:	2200      	movs	r2, #0
 800a344:	21ff      	movs	r1, #255	; 0xff
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f003 fe50 	bl	800dfec <VL53L0X_WrByte>
 800a34c:	4603      	mov	r3, r0
 800a34e:	461a      	mov	r2, r3
 800a350:	7dfb      	ldrb	r3, [r7, #23]
 800a352:	4313      	orrs	r3, r2
 800a354:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a356:	2200      	movs	r2, #0
 800a358:	2180      	movs	r1, #128	; 0x80
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f003 fe46 	bl	800dfec <VL53L0X_WrByte>
 800a360:	4603      	mov	r3, r0
 800a362:	461a      	mov	r2, r3
 800a364:	7dfb      	ldrb	r3, [r7, #23]
 800a366:	4313      	orrs	r3, r2
 800a368:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800a36a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a36e:	4618      	mov	r0, r3
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	20000100 	.word	0x20000100

0800a37c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a384:	2300      	movs	r3, #0
 800a386:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800a388:	2301      	movs	r3, #1
 800a38a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800a38c:	f107 030e 	add.w	r3, r7, #14
 800a390:	4619      	mov	r1, r3
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f7ff fb20 	bl	80099d8 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a398:	2201      	movs	r2, #1
 800a39a:	2180      	movs	r1, #128	; 0x80
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f003 fe25 	bl	800dfec <VL53L0X_WrByte>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	21ff      	movs	r1, #255	; 0xff
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f003 fe1e 	bl	800dfec <VL53L0X_WrByte>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f003 fe17 	bl	800dfec <VL53L0X_WrByte>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	2191      	movs	r1, #145	; 0x91
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f003 fe0d 	bl	800dfec <VL53L0X_WrByte>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	2100      	movs	r1, #0
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f003 fe06 	bl	800dfec <VL53L0X_WrByte>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	21ff      	movs	r1, #255	; 0xff
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f003 fdff 	bl	800dfec <VL53L0X_WrByte>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	2180      	movs	r1, #128	; 0x80
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f003 fdf8 	bl	800dfec <VL53L0X_WrByte>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800a400:	7bbb      	ldrb	r3, [r7, #14]
 800a402:	2b03      	cmp	r3, #3
 800a404:	d054      	beq.n	800a4b0 <VL53L0X_StartMeasurement+0x134>
 800a406:	2b03      	cmp	r3, #3
 800a408:	dc6c      	bgt.n	800a4e4 <VL53L0X_StartMeasurement+0x168>
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d002      	beq.n	800a414 <VL53L0X_StartMeasurement+0x98>
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d034      	beq.n	800a47c <VL53L0X_StartMeasurement+0x100>
 800a412:	e067      	b.n	800a4e4 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800a414:	2201      	movs	r2, #1
 800a416:	2100      	movs	r1, #0
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f003 fde7 	bl	800dfec <VL53L0X_WrByte>
 800a41e:	4603      	mov	r3, r0
 800a420:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800a422:	7bfb      	ldrb	r3, [r7, #15]
 800a424:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800a426:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d15d      	bne.n	800a4ea <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d008      	beq.n	800a44a <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800a438:	f107 030d 	add.w	r3, r7, #13
 800a43c:	461a      	mov	r2, r3
 800a43e:	2100      	movs	r1, #0
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f003 fe55 	bl	800e0f0 <VL53L0X_RdByte>
 800a446:	4603      	mov	r3, r0
 800a448:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	3301      	adds	r3, #1
 800a44e:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800a450:	7b7a      	ldrb	r2, [r7, #13]
 800a452:	7bfb      	ldrb	r3, [r7, #15]
 800a454:	4013      	ands	r3, r2
 800a456:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a458:	7bfa      	ldrb	r2, [r7, #15]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d107      	bne.n	800a46e <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800a45e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d103      	bne.n	800a46e <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a46c:	d3e1      	bcc.n	800a432 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a474:	d339      	bcc.n	800a4ea <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800a476:	23f9      	movs	r3, #249	; 0xf9
 800a478:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800a47a:	e036      	b.n	800a4ea <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a47c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d105      	bne.n	800a490 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a484:	2101      	movs	r1, #1
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff ff12 	bl	800a2b0 <VL53L0X_CheckAndLoadInterruptSettings>
 800a48c:	4603      	mov	r3, r0
 800a48e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a490:	2202      	movs	r2, #2
 800a492:	2100      	movs	r1, #0
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f003 fda9 	bl	800dfec <VL53L0X_WrByte>
 800a49a:	4603      	mov	r3, r0
 800a49c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800a49e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d123      	bne.n	800a4ee <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2204      	movs	r2, #4
 800a4aa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800a4ae:	e01e      	b.n	800a4ee <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a4b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d105      	bne.n	800a4c4 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f7ff fef8 	bl	800a2b0 <VL53L0X_CheckAndLoadInterruptSettings>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a4c4:	2204      	movs	r2, #4
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f003 fd8f 	bl	800dfec <VL53L0X_WrByte>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800a4d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10b      	bne.n	800a4f2 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2204      	movs	r2, #4
 800a4de:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800a4e2:	e006      	b.n	800a4f2 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a4e4:	23f8      	movs	r3, #248	; 0xf8
 800a4e6:	75fb      	strb	r3, [r7, #23]
 800a4e8:	e004      	b.n	800a4f4 <VL53L0X_StartMeasurement+0x178>
		break;
 800a4ea:	bf00      	nop
 800a4ec:	e002      	b.n	800a4f4 <VL53L0X_StartMeasurement+0x178>
		break;
 800a4ee:	bf00      	nop
 800a4f0:	e000      	b.n	800a4f4 <VL53L0X_StartMeasurement+0x178>
		break;
 800a4f2:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800a4f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3718      	adds	r7, #24
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a50a:	2300      	movs	r3, #0
 800a50c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800a514:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800a516:	7bbb      	ldrb	r3, [r7, #14]
 800a518:	2b04      	cmp	r3, #4
 800a51a:	d112      	bne.n	800a542 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800a51c:	f107 0308 	add.w	r3, r7, #8
 800a520:	4619      	mov	r1, r3
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fb1a 	bl	800ab5c <VL53L0X_GetInterruptMaskStatus>
 800a528:	4603      	mov	r3, r0
 800a52a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	2b04      	cmp	r3, #4
 800a530:	d103      	bne.n	800a53a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2201      	movs	r2, #1
 800a536:	701a      	strb	r2, [r3, #0]
 800a538:	e01c      	b.n	800a574 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	2200      	movs	r2, #0
 800a53e:	701a      	strb	r2, [r3, #0]
 800a540:	e018      	b.n	800a574 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800a542:	f107 030d 	add.w	r3, r7, #13
 800a546:	461a      	mov	r2, r3
 800a548:	2114      	movs	r1, #20
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f003 fdd0 	bl	800e0f0 <VL53L0X_RdByte>
 800a550:	4603      	mov	r3, r0
 800a552:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800a554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10b      	bne.n	800a574 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800a55c:	7b7b      	ldrb	r3, [r7, #13]
 800a55e:	f003 0301 	and.w	r3, r3, #1
 800a562:	2b00      	cmp	r3, #0
 800a564:	d003      	beq.n	800a56e <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	2201      	movs	r2, #1
 800a56a:	701a      	strb	r2, [r3, #0]
 800a56c:	e002      	b.n	800a574 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2200      	movs	r2, #0
 800a572:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a574:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a580:	b5b0      	push	{r4, r5, r7, lr}
 800a582:	b096      	sub	sp, #88	; 0x58
 800a584:	af02      	add	r7, sp, #8
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a58a:	2300      	movs	r3, #0
 800a58c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800a590:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a594:	230c      	movs	r3, #12
 800a596:	2114      	movs	r1, #20
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f003 fcfb 	bl	800df94 <VL53L0X_ReadMulti>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800a5a4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f040 80d1 	bne.w	800a750 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800a5ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	021b      	lsls	r3, r3, #8
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	4413      	add	r3, r2
 800a5cc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800a5d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	021b      	lsls	r3, r3, #8
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	4413      	add	r3, r2
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	025b      	lsls	r3, r3, #9
 800a5ec:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5f2:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800a5f4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	021b      	lsls	r3, r3, #8
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a602:	b29b      	uxth	r3, r3
 800a604:	4413      	add	r3, r2
 800a606:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800a60a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a60e:	025b      	lsls	r3, r3, #9
 800a610:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800a616:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	021b      	lsls	r3, r3, #8
 800a61e:	b29a      	uxth	r2, r3
 800a620:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a624:	b29b      	uxth	r3, r3
 800a626:	4413      	add	r3, r2
 800a628:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a632:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800a634:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a638:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800a642:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800a64a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800a64e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a650:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a654:	d046      	beq.n	800a6e4 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800a656:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a658:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a65c:	fb02 f303 	mul.w	r3, r2, r3
 800a660:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a664:	4a57      	ldr	r2, [pc, #348]	; (800a7c4 <VL53L0X_GetRangingMeasurementData+0x244>)
 800a666:	fb82 1203 	smull	r1, r2, r2, r3
 800a66a:	1192      	asrs	r2, r2, #6
 800a66c:	17db      	asrs	r3, r3, #31
 800a66e:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800a670:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a1b      	ldr	r3, [r3, #32]
 800a678:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	7f1b      	ldrb	r3, [r3, #28]
 800a67e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800a682:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a686:	2b00      	cmp	r3, #0
 800a688:	d02c      	beq.n	800a6e4 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800a68a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a68c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a690:	fb02 f303 	mul.w	r3, r2, r3
 800a694:	121a      	asrs	r2, r3, #8
					<= 0) {
 800a696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800a698:	429a      	cmp	r2, r3
 800a69a:	d10d      	bne.n	800a6b8 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800a69c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d004      	beq.n	800a6ae <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800a6a4:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800a6a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a6ac:	e016      	b.n	800a6dc <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800a6ae:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800a6b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a6b6:	e011      	b.n	800a6dc <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800a6b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a6bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6be:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800a6c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a6c4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800a6c8:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800a6cc:	121b      	asrs	r3, r3, #8
 800a6ce:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800a6d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6d2:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800a6d4:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800a6d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800a6dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a6e0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800a6e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00d      	beq.n	800a708 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800a6ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a6f0:	089b      	lsrs	r3, r3, #2
 800a6f2:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800a6f8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	019b      	lsls	r3, r3, #6
 800a700:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	75da      	strb	r2, [r3, #23]
 800a706:	e006      	b.n	800a716 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a70e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	2200      	movs	r2, #0
 800a714:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800a716:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a71a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800a71e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800a722:	9301      	str	r3, [sp, #4]
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	4613      	mov	r3, r2
 800a72a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f003 f9e5 	bl	800dafc <VL53L0X_get_pal_range_status>
 800a732:	4603      	mov	r3, r0
 800a734:	461a      	mov	r2, r3
 800a736:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a73a:	4313      	orrs	r3, r2
 800a73c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800a740:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a744:	2b00      	cmp	r3, #0
 800a746:	d103      	bne.n	800a750 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800a748:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a750:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a754:	2b00      	cmp	r3, #0
 800a756:	d12f      	bne.n	800a7b8 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f107 040c 	add.w	r4, r7, #12
 800a75e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a766:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a76a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800a772:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800a778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800a780:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800a786:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800a78c:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800a792:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800a798:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800a79e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800a7a8:	f107 050c 	add.w	r5, r7, #12
 800a7ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a7b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a7b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a7b8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3750      	adds	r7, #80	; 0x50
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bdb0      	pop	{r4, r5, r7, pc}
 800a7c4:	10624dd3 	.word	0x10624dd3

0800a7c8 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800a7d6:	2100      	movs	r1, #0
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f7ff f8d1 	bl	8009980 <VL53L0X_SetDeviceMode>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a7e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d104      	bne.n	800a7f4 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7ff fd16 	bl	800a21c <VL53L0X_PerformSingleMeasurement>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a7f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d105      	bne.n	800a808 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f7ff febe 	bl	800a580 <VL53L0X_GetRangingMeasurementData>
 800a804:	4603      	mov	r3, r0
 800a806:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800a808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d105      	bne.n	800a81c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a810:	2100      	movs	r1, #0
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f962 	bl	800aadc <VL53L0X_ClearInterruptMask>
 800a818:	4603      	mov	r3, r0
 800a81a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800a81c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	4608      	mov	r0, r1
 800a832:	4611      	mov	r1, r2
 800a834:	461a      	mov	r2, r3
 800a836:	4603      	mov	r3, r0
 800a838:	70fb      	strb	r3, [r7, #3]
 800a83a:	460b      	mov	r3, r1
 800a83c:	70bb      	strb	r3, [r7, #2]
 800a83e:	4613      	mov	r3, r2
 800a840:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a842:	2300      	movs	r3, #0
 800a844:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800a846:	78fb      	ldrb	r3, [r7, #3]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800a84c:	23f6      	movs	r3, #246	; 0xf6
 800a84e:	73fb      	strb	r3, [r7, #15]
 800a850:	e107      	b.n	800aa62 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800a852:	78bb      	ldrb	r3, [r7, #2]
 800a854:	2b14      	cmp	r3, #20
 800a856:	d110      	bne.n	800a87a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a858:	7e3b      	ldrb	r3, [r7, #24]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d102      	bne.n	800a864 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800a85e:	2310      	movs	r3, #16
 800a860:	73bb      	strb	r3, [r7, #14]
 800a862:	e001      	b.n	800a868 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800a864:	2301      	movs	r3, #1
 800a866:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800a868:	7bbb      	ldrb	r3, [r7, #14]
 800a86a:	461a      	mov	r2, r3
 800a86c:	2184      	movs	r1, #132	; 0x84
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f003 fbbc 	bl	800dfec <VL53L0X_WrByte>
 800a874:	4603      	mov	r3, r0
 800a876:	73fb      	strb	r3, [r7, #15]
 800a878:	e0f3      	b.n	800aa62 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800a87a:	78bb      	ldrb	r3, [r7, #2]
 800a87c:	2b15      	cmp	r3, #21
 800a87e:	f040 8097 	bne.w	800a9b0 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a882:	2201      	movs	r2, #1
 800a884:	21ff      	movs	r1, #255	; 0xff
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f003 fbb0 	bl	800dfec <VL53L0X_WrByte>
 800a88c:	4603      	mov	r3, r0
 800a88e:	461a      	mov	r2, r3
 800a890:	7bfb      	ldrb	r3, [r7, #15]
 800a892:	4313      	orrs	r3, r2
 800a894:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a896:	2200      	movs	r2, #0
 800a898:	2100      	movs	r1, #0
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f003 fba6 	bl	800dfec <VL53L0X_WrByte>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	21ff      	movs	r1, #255	; 0xff
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f003 fb9c 	bl	800dfec <VL53L0X_WrByte>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a8be:	2201      	movs	r2, #1
 800a8c0:	2180      	movs	r1, #128	; 0x80
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f003 fb92 	bl	800dfec <VL53L0X_WrByte>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	7bfb      	ldrb	r3, [r7, #15]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800a8d2:	2202      	movs	r2, #2
 800a8d4:	2185      	movs	r1, #133	; 0x85
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f003 fb88 	bl	800dfec <VL53L0X_WrByte>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	461a      	mov	r2, r3
 800a8e0:	7bfb      	ldrb	r3, [r7, #15]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800a8e6:	2204      	movs	r2, #4
 800a8e8:	21ff      	movs	r1, #255	; 0xff
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f003 fb7e 	bl	800dfec <VL53L0X_WrByte>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	7bfb      	ldrb	r3, [r7, #15]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	21cd      	movs	r1, #205	; 0xcd
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f003 fb74 	bl	800dfec <VL53L0X_WrByte>
 800a904:	4603      	mov	r3, r0
 800a906:	461a      	mov	r2, r3
 800a908:	7bfb      	ldrb	r3, [r7, #15]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800a90e:	2211      	movs	r2, #17
 800a910:	21cc      	movs	r1, #204	; 0xcc
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f003 fb6a 	bl	800dfec <VL53L0X_WrByte>
 800a918:	4603      	mov	r3, r0
 800a91a:	461a      	mov	r2, r3
 800a91c:	7bfb      	ldrb	r3, [r7, #15]
 800a91e:	4313      	orrs	r3, r2
 800a920:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800a922:	2207      	movs	r2, #7
 800a924:	21ff      	movs	r1, #255	; 0xff
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f003 fb60 	bl	800dfec <VL53L0X_WrByte>
 800a92c:	4603      	mov	r3, r0
 800a92e:	461a      	mov	r2, r3
 800a930:	7bfb      	ldrb	r3, [r7, #15]
 800a932:	4313      	orrs	r3, r2
 800a934:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800a936:	2200      	movs	r2, #0
 800a938:	21be      	movs	r1, #190	; 0xbe
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f003 fb56 	bl	800dfec <VL53L0X_WrByte>
 800a940:	4603      	mov	r3, r0
 800a942:	461a      	mov	r2, r3
 800a944:	7bfb      	ldrb	r3, [r7, #15]
 800a946:	4313      	orrs	r3, r2
 800a948:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800a94a:	2206      	movs	r2, #6
 800a94c:	21ff      	movs	r1, #255	; 0xff
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f003 fb4c 	bl	800dfec <VL53L0X_WrByte>
 800a954:	4603      	mov	r3, r0
 800a956:	461a      	mov	r2, r3
 800a958:	7bfb      	ldrb	r3, [r7, #15]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800a95e:	2209      	movs	r2, #9
 800a960:	21cc      	movs	r1, #204	; 0xcc
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f003 fb42 	bl	800dfec <VL53L0X_WrByte>
 800a968:	4603      	mov	r3, r0
 800a96a:	461a      	mov	r2, r3
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
 800a96e:	4313      	orrs	r3, r2
 800a970:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a972:	2200      	movs	r2, #0
 800a974:	21ff      	movs	r1, #255	; 0xff
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f003 fb38 	bl	800dfec <VL53L0X_WrByte>
 800a97c:	4603      	mov	r3, r0
 800a97e:	461a      	mov	r2, r3
 800a980:	7bfb      	ldrb	r3, [r7, #15]
 800a982:	4313      	orrs	r3, r2
 800a984:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a986:	2201      	movs	r2, #1
 800a988:	21ff      	movs	r1, #255	; 0xff
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f003 fb2e 	bl	800dfec <VL53L0X_WrByte>
 800a990:	4603      	mov	r3, r0
 800a992:	461a      	mov	r2, r3
 800a994:	7bfb      	ldrb	r3, [r7, #15]
 800a996:	4313      	orrs	r3, r2
 800a998:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a99a:	2200      	movs	r2, #0
 800a99c:	2100      	movs	r1, #0
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f003 fb24 	bl	800dfec <VL53L0X_WrByte>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	73fb      	strb	r3, [r7, #15]
 800a9ae:	e058      	b.n	800aa62 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800a9b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d121      	bne.n	800a9fc <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800a9b8:	787b      	ldrb	r3, [r7, #1]
 800a9ba:	2b04      	cmp	r3, #4
 800a9bc:	d81b      	bhi.n	800a9f6 <VL53L0X_SetGpioConfig+0x1ce>
 800a9be:	a201      	add	r2, pc, #4	; (adr r2, 800a9c4 <VL53L0X_SetGpioConfig+0x19c>)
 800a9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c4:	0800a9d9 	.word	0x0800a9d9
 800a9c8:	0800a9df 	.word	0x0800a9df
 800a9cc:	0800a9e5 	.word	0x0800a9e5
 800a9d0:	0800a9eb 	.word	0x0800a9eb
 800a9d4:	0800a9f1 	.word	0x0800a9f1
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	73bb      	strb	r3, [r7, #14]
				break;
 800a9dc:	e00f      	b.n	800a9fe <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	73bb      	strb	r3, [r7, #14]
				break;
 800a9e2:	e00c      	b.n	800a9fe <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	73bb      	strb	r3, [r7, #14]
				break;
 800a9e8:	e009      	b.n	800a9fe <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	73bb      	strb	r3, [r7, #14]
				break;
 800a9ee:	e006      	b.n	800a9fe <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800a9f0:	2304      	movs	r3, #4
 800a9f2:	73bb      	strb	r3, [r7, #14]
				break;
 800a9f4:	e003      	b.n	800a9fe <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800a9f6:	23f5      	movs	r3, #245	; 0xf5
 800a9f8:	73fb      	strb	r3, [r7, #15]
 800a9fa:	e000      	b.n	800a9fe <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800a9fc:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800a9fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d107      	bne.n	800aa16 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800aa06:	7bbb      	ldrb	r3, [r7, #14]
 800aa08:	461a      	mov	r2, r3
 800aa0a:	210a      	movs	r1, #10
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f003 faed 	bl	800dfec <VL53L0X_WrByte>
 800aa12:	4603      	mov	r3, r0
 800aa14:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800aa16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10f      	bne.n	800aa3e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800aa1e:	7e3b      	ldrb	r3, [r7, #24]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d102      	bne.n	800aa2a <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	73bb      	strb	r3, [r7, #14]
 800aa28:	e001      	b.n	800aa2e <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800aa2a:	2310      	movs	r3, #16
 800aa2c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800aa2e:	7bbb      	ldrb	r3, [r7, #14]
 800aa30:	22ef      	movs	r2, #239	; 0xef
 800aa32:	2184      	movs	r1, #132	; 0x84
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f003 fb27 	bl	800e088 <VL53L0X_UpdateByte>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800aa3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d103      	bne.n	800aa4e <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	787a      	ldrb	r2, [r7, #1]
 800aa4a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800aa4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d105      	bne.n	800aa62 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800aa56:	2100      	movs	r1, #0
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f83f 	bl	800aadc <VL53L0X_ClearInterruptMask>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop

0800aa70 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	607a      	str	r2, [r7, #4]
 800aa7a:	603b      	str	r3, [r7, #0]
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa80:	2300      	movs	r3, #0
 800aa82:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800aa84:	f107 0314 	add.w	r3, r7, #20
 800aa88:	461a      	mov	r2, r3
 800aa8a:	210e      	movs	r1, #14
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f003 fb59 	bl	800e144 <VL53L0X_RdWord>
 800aa92:	4603      	mov	r3, r0
 800aa94:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800aa96:	8abb      	ldrh	r3, [r7, #20]
 800aa98:	045b      	lsls	r3, r3, #17
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	4b0e      	ldr	r3, [pc, #56]	; (800aad8 <VL53L0X_GetInterruptThresholds+0x68>)
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800aaa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d10f      	bne.n	800aacc <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800aaac:	f107 0314 	add.w	r3, r7, #20
 800aab0:	461a      	mov	r2, r3
 800aab2:	210c      	movs	r1, #12
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f003 fb45 	bl	800e144 <VL53L0X_RdWord>
 800aaba:	4603      	mov	r3, r0
 800aabc:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800aabe:	8abb      	ldrh	r3, [r7, #20]
 800aac0:	045b      	lsls	r3, r3, #17
 800aac2:	461a      	mov	r2, r3
 800aac4:	4b04      	ldr	r3, [pc, #16]	; (800aad8 <VL53L0X_GetInterruptThresholds+0x68>)
 800aac6:	4013      	ands	r3, r2
		*pThresholdHigh =
 800aac8:	683a      	ldr	r2, [r7, #0]
 800aaca:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aacc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	1ffe0000 	.word	0x1ffe0000

0800aadc <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aae6:	2300      	movs	r3, #0
 800aae8:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800aaea:	2300      	movs	r3, #0
 800aaec:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800aaee:	2201      	movs	r2, #1
 800aaf0:	210b      	movs	r1, #11
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f003 fa7a 	bl	800dfec <VL53L0X_WrByte>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800aafc:	2200      	movs	r2, #0
 800aafe:	210b      	movs	r1, #11
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f003 fa73 	bl	800dfec <VL53L0X_WrByte>
 800ab06:	4603      	mov	r3, r0
 800ab08:	461a      	mov	r2, r3
 800ab0a:	7bfb      	ldrb	r3, [r7, #15]
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800ab10:	f107 030d 	add.w	r3, r7, #13
 800ab14:	461a      	mov	r2, r3
 800ab16:	2113      	movs	r1, #19
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f003 fae9 	bl	800e0f0 <VL53L0X_RdByte>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	461a      	mov	r2, r3
 800ab22:	7bfb      	ldrb	r3, [r7, #15]
 800ab24:	4313      	orrs	r3, r2
 800ab26:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800ab28:	7bbb      	ldrb	r3, [r7, #14]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800ab2e:	7b7b      	ldrb	r3, [r7, #13]
 800ab30:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d006      	beq.n	800ab46 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800ab38:	7bbb      	ldrb	r3, [r7, #14]
 800ab3a:	2b02      	cmp	r3, #2
 800ab3c:	d803      	bhi.n	800ab46 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800ab3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d0d3      	beq.n	800aaee <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800ab46:	7bbb      	ldrb	r3, [r7, #14]
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d901      	bls.n	800ab50 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800ab4c:	23f4      	movs	r3, #244	; 0xf4
 800ab4e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800ab50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab66:	2300      	movs	r3, #0
 800ab68:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800ab6a:	f107 030e 	add.w	r3, r7, #14
 800ab6e:	461a      	mov	r2, r3
 800ab70:	2113      	movs	r1, #19
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f003 fabc 	bl	800e0f0 <VL53L0X_RdByte>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800ab7c:	7bbb      	ldrb	r3, [r7, #14]
 800ab7e:	f003 0207 	and.w	r2, r3, #7
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800ab86:	7bbb      	ldrb	r3, [r7, #14]
 800ab88:	f003 0318 	and.w	r3, r3, #24
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d001      	beq.n	800ab94 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800ab90:	23fa      	movs	r3, #250	; 0xfa
 800ab92:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800ab94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abac:	2300      	movs	r3, #0
 800abae:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	68b9      	ldr	r1, [r7, #8]
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f000 fa03 	bl	800afc0 <VL53L0X_perform_ref_spad_management>
 800abba:	4603      	mov	r3, r0
 800abbc:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800abbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3718      	adds	r7, #24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b084      	sub	sp, #16
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abd4:	2300      	movs	r3, #0
 800abd6:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800abd8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800abdc:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800abde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abe2:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800abe4:	f107 0308 	add.w	r3, r7, #8
 800abe8:	461a      	mov	r2, r3
 800abea:	2128      	movs	r1, #40	; 0x28
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f003 faa9 	bl	800e144 <VL53L0X_RdWord>
 800abf2:	4603      	mov	r3, r0
 800abf4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800abf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d11e      	bne.n	800ac3c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800abfe:	893b      	ldrh	r3, [r7, #8]
 800ac00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800ac08:	893b      	ldrh	r3, [r7, #8]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	dd0b      	ble.n	800ac2c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800ac14:	893a      	ldrh	r2, [r7, #8]
 800ac16:	897b      	ldrh	r3, [r7, #10]
 800ac18:	1ad3      	subs	r3, r2, r3
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	b21b      	sxth	r3, r3
 800ac1e:	461a      	mov	r2, r3
					* 250;
 800ac20:	23fa      	movs	r3, #250	; 0xfa
 800ac22:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	601a      	str	r2, [r3, #0]
 800ac2a:	e007      	b.n	800ac3c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800ac2c:	893b      	ldrh	r3, [r7, #8]
 800ac2e:	b21b      	sxth	r3, r3
 800ac30:	461a      	mov	r2, r3
 800ac32:	23fa      	movs	r3, #250	; 0xfa
 800ac34:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800ac3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b08b      	sub	sp, #44	; 0x2c
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
 800ac54:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800ac56:	2308      	movs	r3, #8
 800ac58:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	f04f 32ff 	mov.w	r2, #4294967295
 800ac64:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac6e:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	69ba      	ldr	r2, [r7, #24]
 800ac74:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac78:	69b9      	ldr	r1, [r7, #24]
 800ac7a:	fb01 f202 	mul.w	r2, r1, r2
 800ac7e:	1a9b      	subs	r3, r3, r2
 800ac80:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	627b      	str	r3, [r7, #36]	; 0x24
 800ac86:	e030      	b.n	800acea <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac90:	4413      	add	r3, r2
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800ac96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d11e      	bne.n	800acdc <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800ac9e:	7ffa      	ldrb	r2, [r7, #31]
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	fa42 f303 	asr.w	r3, r2, r3
 800aca6:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800acac:	e016      	b.n	800acdc <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800acae:	7ffb      	ldrb	r3, [r7, #31]
 800acb0:	f003 0301 	and.w	r3, r3, #1
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00b      	beq.n	800acd0 <get_next_good_spad+0x88>
				success = 1;
 800acb8:	2301      	movs	r3, #1
 800acba:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800acbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbe:	69ba      	ldr	r2, [r7, #24]
 800acc0:	fb03 f202 	mul.w	r2, r3, r2
 800acc4:	6a3b      	ldr	r3, [r7, #32]
 800acc6:	4413      	add	r3, r2
 800acc8:	461a      	mov	r2, r3
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	601a      	str	r2, [r3, #0]
				break;
 800acce:	e009      	b.n	800ace4 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800acd0:	7ffb      	ldrb	r3, [r7, #31]
 800acd2:	085b      	lsrs	r3, r3, #1
 800acd4:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800acd6:	6a3b      	ldr	r3, [r7, #32]
 800acd8:	3301      	adds	r3, #1
 800acda:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800acdc:	6a3a      	ldr	r2, [r7, #32]
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d3e4      	bcc.n	800acae <get_next_good_spad+0x66>
				coarseIndex++) {
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace6:	3301      	adds	r3, #1
 800ace8:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800acea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d202      	bcs.n	800acf8 <get_next_good_spad+0xb0>
 800acf2:	7fbb      	ldrb	r3, [r7, #30]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d0c7      	beq.n	800ac88 <get_next_good_spad+0x40>
		}
	}
}
 800acf8:	bf00      	nop
 800acfa:	372c      	adds	r7, #44	; 0x2c
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	099b      	lsrs	r3, r3, #6
 800ad14:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800ad16:	4a07      	ldr	r2, [pc, #28]	; (800ad34 <is_aperture+0x30>)
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d101      	bne.n	800ad26 <is_aperture+0x22>
		isAperture = 0;
 800ad22:	2300      	movs	r3, #0
 800ad24:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800ad26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3714      	adds	r7, #20
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	200002b8 	.word	0x200002b8

0800ad38 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b089      	sub	sp, #36	; 0x24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ad44:	2300      	movs	r3, #0
 800ad46:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800ad48:	2308      	movs	r3, #8
 800ad4a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad54:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	69ba      	ldr	r2, [r7, #24]
 800ad5a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad5e:	69b9      	ldr	r1, [r7, #24]
 800ad60:	fb01 f202 	mul.w	r2, r1, r2
 800ad64:	1a9b      	subs	r3, r3, r2
 800ad66:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d302      	bcc.n	800ad76 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ad70:	23ce      	movs	r3, #206	; 0xce
 800ad72:	77fb      	strb	r3, [r7, #31]
 800ad74:	e010      	b.n	800ad98 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	b25a      	sxtb	r2, r3
 800ad80:	2101      	movs	r1, #1
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	fa01 f303 	lsl.w	r3, r1, r3
 800ad88:	b25b      	sxtb	r3, r3
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	b259      	sxtb	r1, r3
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	4413      	add	r3, r2
 800ad94:	b2ca      	uxtb	r2, r1
 800ad96:	701a      	strb	r2, [r3, #0]

	return status;
 800ad98:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3724      	adds	r7, #36	; 0x24
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800adb2:	2306      	movs	r3, #6
 800adb4:	683a      	ldr	r2, [r7, #0]
 800adb6:	21b0      	movs	r1, #176	; 0xb0
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f003 f8bb 	bl	800df34 <VL53L0X_WriteMulti>
 800adbe:	4603      	mov	r3, r0
 800adc0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800adc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b084      	sub	sp, #16
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
 800add6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800add8:	2306      	movs	r3, #6
 800adda:	683a      	ldr	r2, [r7, #0]
 800addc:	21b0      	movs	r1, #176	; 0xb0
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f003 f8d8 	bl	800df94 <VL53L0X_ReadMulti>
 800ade4:	4603      	mov	r3, r0
 800ade6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800ade8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800adec:	4618      	mov	r0, r3
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08c      	sub	sp, #48	; 0x30
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	607a      	str	r2, [r7, #4]
 800adfe:	603b      	str	r3, [r7, #0]
 800ae00:	460b      	mov	r3, r1
 800ae02:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ae04:	2300      	movs	r3, #0
 800ae06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800ae0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae0c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800ae0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae10:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800ae12:	2300      	movs	r3, #0
 800ae14:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae16:	e02b      	b.n	800ae70 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800ae18:	f107 031c 	add.w	r3, r7, #28
 800ae1c:	6a3a      	ldr	r2, [r7, #32]
 800ae1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f7ff ff11 	bl	800ac48 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae2c:	d103      	bne.n	800ae36 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ae2e:	23ce      	movs	r3, #206	; 0xce
 800ae30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800ae34:	e020      	b.n	800ae78 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	461a      	mov	r2, r3
 800ae3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae3c:	4413      	add	r3, r2
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7ff ff60 	bl	800ad04 <is_aperture>
 800ae44:	4603      	mov	r3, r0
 800ae46:	461a      	mov	r2, r3
 800ae48:	7afb      	ldrb	r3, [r7, #11]
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d003      	beq.n	800ae56 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ae4e:	23ce      	movs	r3, #206	; 0xce
 800ae50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800ae54:	e010      	b.n	800ae78 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800ae5a:	6a3a      	ldr	r2, [r7, #32]
 800ae5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae5e:	6838      	ldr	r0, [r7, #0]
 800ae60:	f7ff ff6a 	bl	800ad38 <enable_spad_bit>
		currentSpad++;
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	3301      	adds	r3, #1
 800ae68:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800ae6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d3cf      	bcc.n	800ae18 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800ae78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae7a:	6a3a      	ldr	r2, [r7, #32]
 800ae7c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800ae7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d106      	bne.n	800ae94 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800ae86:	6839      	ldr	r1, [r7, #0]
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f7ff ff8d 	bl	800ada8 <set_ref_spad_map>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800ae94:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d121      	bne.n	800aee0 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800ae9c:	f107 0314 	add.w	r3, r7, #20
 800aea0:	4619      	mov	r1, r3
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f7ff ff93 	bl	800adce <get_ref_spad_map>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800aeb2:	e011      	b.n	800aed8 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800aeb4:	683a      	ldr	r2, [r7, #0]
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb8:	4413      	add	r3, r2
 800aeba:	781a      	ldrb	r2, [r3, #0]
 800aebc:	f107 0114 	add.w	r1, r7, #20
 800aec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec2:	440b      	add	r3, r1
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d003      	beq.n	800aed2 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800aeca:	23ce      	movs	r3, #206	; 0xce
 800aecc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800aed0:	e006      	b.n	800aee0 <enable_ref_spads+0xec>
			}
			i++;
 800aed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed4:	3301      	adds	r3, #1
 800aed6:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800aed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aedc:	429a      	cmp	r2, r3
 800aede:	d3e9      	bcc.n	800aeb4 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800aee0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3730      	adds	r7, #48	; 0x30
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08a      	sub	sp, #40	; 0x28
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800aef6:	2300      	movs	r3, #0
 800aef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800aefc:	2300      	movs	r3, #0
 800aefe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800af08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800af0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af10:	2b00      	cmp	r3, #0
 800af12:	d107      	bne.n	800af24 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800af14:	22c0      	movs	r2, #192	; 0xc0
 800af16:	2101      	movs	r1, #1
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f003 f867 	bl	800dfec <VL53L0X_WrByte>
 800af1e:	4603      	mov	r3, r0
 800af20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800af24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d108      	bne.n	800af3e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800af2c:	f107 0308 	add.w	r3, r7, #8
 800af30:	4619      	mov	r1, r3
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f7ff fc48 	bl	800a7c8 <VL53L0X_PerformSingleRangingMeasurement>
 800af38:	4603      	mov	r3, r0
 800af3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800af3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af42:	2b00      	cmp	r3, #0
 800af44:	d107      	bne.n	800af56 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800af46:	2201      	movs	r2, #1
 800af48:	21ff      	movs	r1, #255	; 0xff
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f003 f84e 	bl	800dfec <VL53L0X_WrByte>
 800af50:	4603      	mov	r3, r0
 800af52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800af56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d107      	bne.n	800af6e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	21b6      	movs	r1, #182	; 0xb6
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f003 f8ee 	bl	800e144 <VL53L0X_RdWord>
 800af68:	4603      	mov	r3, r0
 800af6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800af6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af72:	2b00      	cmp	r3, #0
 800af74:	d107      	bne.n	800af86 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800af76:	2200      	movs	r2, #0
 800af78:	21ff      	movs	r1, #255	; 0xff
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f003 f836 	bl	800dfec <VL53L0X_WrByte>
 800af80:	4603      	mov	r3, r0
 800af82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800af86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d112      	bne.n	800afb4 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800af8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af92:	461a      	mov	r2, r3
 800af94:	2101      	movs	r1, #1
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f003 f828 	bl	800dfec <VL53L0X_WrByte>
 800af9c:	4603      	mov	r3, r0
 800af9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800afa2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d104      	bne.n	800afb4 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800afb0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800afb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3728      	adds	r7, #40	; 0x28
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800afc0:	b590      	push	{r4, r7, lr}
 800afc2:	b09d      	sub	sp, #116	; 0x74
 800afc4:	af06      	add	r7, sp, #24
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afcc:	2300      	movs	r3, #0
 800afce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800afd2:	23b4      	movs	r3, #180	; 0xb4
 800afd4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800afd8:	2303      	movs	r3, #3
 800afda:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800afdc:	232c      	movs	r3, #44	; 0x2c
 800afde:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800afe0:	2300      	movs	r3, #0
 800afe2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800afe4:	2300      	movs	r3, #0
 800afe6:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800afe8:	2300      	movs	r3, #0
 800afea:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800afec:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800aff0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800aff2:	2300      	movs	r3, #0
 800aff4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800affa:	2306      	movs	r3, #6
 800affc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800affe:	2300      	movs	r3, #0
 800b000:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800b002:	2300      	movs	r3, #0
 800b004:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800b006:	2300      	movs	r3, #0
 800b008:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800b00c:	2300      	movs	r3, #0
 800b00e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800b010:	2300      	movs	r3, #0
 800b012:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800b014:	2300      	movs	r3, #0
 800b016:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800b018:	2300      	movs	r3, #0
 800b01a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800b024:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800b026:	2300      	movs	r3, #0
 800b028:	64bb      	str	r3, [r7, #72]	; 0x48
 800b02a:	e009      	b.n	800b040 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b030:	4413      	add	r3, r2
 800b032:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b036:	2200      	movs	r2, #0
 800b038:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800b03a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b03c:	3301      	adds	r3, #1
 800b03e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b044:	429a      	cmp	r2, r3
 800b046:	d3f1      	bcc.n	800b02c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b048:	2201      	movs	r2, #1
 800b04a:	21ff      	movs	r1, #255	; 0xff
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f002 ffcd 	bl	800dfec <VL53L0X_WrByte>
 800b052:	4603      	mov	r3, r0
 800b054:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800b058:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d107      	bne.n	800b070 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800b060:	2200      	movs	r2, #0
 800b062:	214f      	movs	r1, #79	; 0x4f
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f002 ffc1 	bl	800dfec <VL53L0X_WrByte>
 800b06a:	4603      	mov	r3, r0
 800b06c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800b070:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b074:	2b00      	cmp	r3, #0
 800b076:	d107      	bne.n	800b088 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800b078:	222c      	movs	r2, #44	; 0x2c
 800b07a:	214e      	movs	r1, #78	; 0x4e
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f002 ffb5 	bl	800dfec <VL53L0X_WrByte>
 800b082:	4603      	mov	r3, r0
 800b084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b088:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d107      	bne.n	800b0a0 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b090:	2200      	movs	r2, #0
 800b092:	21ff      	movs	r1, #255	; 0xff
 800b094:	68f8      	ldr	r0, [r7, #12]
 800b096:	f002 ffa9 	bl	800dfec <VL53L0X_WrByte>
 800b09a:	4603      	mov	r3, r0
 800b09c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800b0a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d109      	bne.n	800b0bc <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800b0a8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	21b6      	movs	r1, #182	; 0xb6
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f002 ff9b 	bl	800dfec <VL53L0X_WrByte>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800b0bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d107      	bne.n	800b0d4 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	2180      	movs	r1, #128	; 0x80
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f002 ff8f 	bl	800dfec <VL53L0X_WrByte>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800b0d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10a      	bne.n	800b0f2 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800b0dc:	f107 0210 	add.w	r2, r7, #16
 800b0e0:	f107 0111 	add.w	r1, r7, #17
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	f000 fbbb 	bl	800b862 <VL53L0X_perform_ref_calibration>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800b0f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d121      	bne.n	800b13e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800b0fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b100:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800b102:	2300      	movs	r3, #0
 800b104:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800b106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b108:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800b116:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b11a:	f107 0218 	add.w	r2, r7, #24
 800b11e:	9204      	str	r2, [sp, #16]
 800b120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b122:	9203      	str	r2, [sp, #12]
 800b124:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b126:	9202      	str	r2, [sp, #8]
 800b128:	9301      	str	r3, [sp, #4]
 800b12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	4623      	mov	r3, r4
 800b130:	4602      	mov	r2, r0
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f7ff fe5e 	bl	800adf4 <enable_ref_spads>
 800b138:	4603      	mov	r3, r0
 800b13a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b13e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b142:	2b00      	cmp	r3, #0
 800b144:	d174      	bne.n	800b230 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800b14a:	f107 0312 	add.w	r3, r7, #18
 800b14e:	4619      	mov	r1, r3
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f7ff fecb 	bl	800aeec <perform_ref_signal_measurement>
 800b156:	4603      	mov	r3, r0
 800b158:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800b15c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b160:	2b00      	cmp	r3, #0
 800b162:	d161      	bne.n	800b228 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800b164:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800b166:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b168:	429a      	cmp	r2, r3
 800b16a:	d25d      	bcs.n	800b228 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800b16c:	2300      	movs	r3, #0
 800b16e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b170:	e009      	b.n	800b186 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b176:	4413      	add	r3, r2
 800b178:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b17c:	2200      	movs	r2, #0
 800b17e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800b180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b182:	3301      	adds	r3, #1
 800b184:	64bb      	str	r3, [r7, #72]	; 0x48
 800b186:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d3f1      	bcc.n	800b172 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800b18e:	e002      	b.n	800b196 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800b190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b192:	3301      	adds	r3, #1
 800b194:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800b196:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800b19a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b19c:	4413      	add	r3, r2
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7ff fdb0 	bl	800ad04 <is_aperture>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d103      	bne.n	800b1b2 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800b1aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d3ee      	bcc.n	800b190 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800b1b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800b1c6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b1ca:	f107 0218 	add.w	r2, r7, #24
 800b1ce:	9204      	str	r2, [sp, #16]
 800b1d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1d2:	9203      	str	r2, [sp, #12]
 800b1d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1d6:	9202      	str	r2, [sp, #8]
 800b1d8:	9301      	str	r3, [sp, #4]
 800b1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	4623      	mov	r3, r4
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f7ff fe06 	bl	800adf4 <enable_ref_spads>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800b1ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d11b      	bne.n	800b22e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800b1fa:	f107 0312 	add.w	r3, r7, #18
 800b1fe:	4619      	mov	r1, r3
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f7ff fe73 	bl	800aeec <perform_ref_signal_measurement>
 800b206:	4603      	mov	r3, r0
 800b208:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800b20c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b210:	2b00      	cmp	r3, #0
 800b212:	d10c      	bne.n	800b22e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800b214:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800b216:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b218:	429a      	cmp	r2, r3
 800b21a:	d208      	bcs.n	800b22e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800b21c:	2301      	movs	r3, #1
 800b21e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800b222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b224:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800b226:	e002      	b.n	800b22e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800b228:	2300      	movs	r3, #0
 800b22a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b22c:	e000      	b.n	800b230 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800b22e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800b230:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b234:	2b00      	cmp	r3, #0
 800b236:	f040 80af 	bne.w	800b398 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800b23a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800b23c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b23e:	429a      	cmp	r2, r3
 800b240:	f240 80aa 	bls.w	800b398 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800b244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b246:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800b24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800b254:	f107 031c 	add.w	r3, r7, #28
 800b258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b25a:	4618      	mov	r0, r3
 800b25c:	f003 f820 	bl	800e2a0 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800b260:	8a7b      	ldrh	r3, [r7, #18]
 800b262:	461a      	mov	r2, r3
 800b264:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	2b00      	cmp	r3, #0
 800b26a:	bfb8      	it	lt
 800b26c:	425b      	neglt	r3, r3
 800b26e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800b270:	2300      	movs	r3, #0
 800b272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800b276:	e086      	b.n	800b386 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800b27e:	f107 0314 	add.w	r3, r7, #20
 800b282:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b286:	f7ff fcdf 	bl	800ac48 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b290:	d103      	bne.n	800b29a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b292:	23ce      	movs	r3, #206	; 0xce
 800b294:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800b298:	e07e      	b.n	800b398 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800b29a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7ff fd2e 	bl	800ad04 <is_aperture>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d003      	beq.n	800b2ba <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800b2b8:	e06e      	b.n	800b398 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800b2ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2bc:	3301      	adds	r3, #1
 800b2be:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800b2ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7ff fd32 	bl	800ad38 <enable_spad_bit>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800b2da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d10c      	bne.n	800b2fc <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800b2e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	f7ff fd59 	bl	800ada8 <set_ref_spad_map>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800b2fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b300:	2b00      	cmp	r3, #0
 800b302:	d146      	bne.n	800b392 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800b304:	f107 0312 	add.w	r3, r7, #18
 800b308:	4619      	mov	r1, r3
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f7ff fdee 	bl	800aeec <perform_ref_signal_measurement>
 800b310:	4603      	mov	r3, r0
 800b312:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800b316:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d13b      	bne.n	800b396 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800b31e:	8a7b      	ldrh	r3, [r7, #18]
 800b320:	461a      	mov	r2, r3
 800b322:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	2b00      	cmp	r3, #0
 800b328:	bfb8      	it	lt
 800b32a:	425b      	neglt	r3, r3
 800b32c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800b32e:	8a7b      	ldrh	r3, [r7, #18]
 800b330:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b332:	429a      	cmp	r2, r3
 800b334:	d21c      	bcs.n	800b370 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800b336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d914      	bls.n	800b368 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800b33e:	f107 031c 	add.w	r3, r7, #28
 800b342:	4619      	mov	r1, r3
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f7ff fd2f 	bl	800ada8 <set_ref_spad_map>
 800b34a:	4603      	mov	r3, r0
 800b34c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800b356:	f107 011c 	add.w	r1, r7, #28
 800b35a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b35c:	4618      	mov	r0, r3
 800b35e:	f002 ff9f 	bl	800e2a0 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800b362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b364:	3b01      	subs	r3, #1
 800b366:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800b368:	2301      	movs	r3, #1
 800b36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b36e:	e00a      	b.n	800b386 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b372:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800b37a:	f107 031c 	add.w	r3, r7, #28
 800b37e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b380:	4618      	mov	r0, r3
 800b382:	f002 ff8d 	bl	800e2a0 <memcpy>
		while (!complete) {
 800b386:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f43f af74 	beq.w	800b278 <VL53L0X_perform_ref_spad_management+0x2b8>
 800b390:	e002      	b.n	800b398 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b392:	bf00      	nop
 800b394:	e000      	b.n	800b398 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b396:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b398:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d115      	bne.n	800b3cc <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3a4:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800b3ac:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	b2da      	uxtb	r2, r3
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	781a      	ldrb	r2, [r3, #0]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800b3cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	375c      	adds	r7, #92	; 0x5c
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd90      	pop	{r4, r7, pc}

0800b3d8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800b3d8:	b590      	push	{r4, r7, lr}
 800b3da:	b093      	sub	sp, #76	; 0x4c
 800b3dc:	af06      	add	r7, sp, #24
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800b3f0:	23b4      	movs	r3, #180	; 0xb4
 800b3f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800b3f6:	2306      	movs	r3, #6
 800b3f8:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800b3fa:	232c      	movs	r3, #44	; 0x2c
 800b3fc:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b3fe:	2201      	movs	r2, #1
 800b400:	21ff      	movs	r1, #255	; 0xff
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f002 fdf2 	bl	800dfec <VL53L0X_WrByte>
 800b408:	4603      	mov	r3, r0
 800b40a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b40e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b412:	2b00      	cmp	r3, #0
 800b414:	d107      	bne.n	800b426 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800b416:	2200      	movs	r2, #0
 800b418:	214f      	movs	r1, #79	; 0x4f
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f002 fde6 	bl	800dfec <VL53L0X_WrByte>
 800b420:	4603      	mov	r3, r0
 800b422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800b426:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d107      	bne.n	800b43e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800b42e:	222c      	movs	r2, #44	; 0x2c
 800b430:	214e      	movs	r1, #78	; 0x4e
 800b432:	68f8      	ldr	r0, [r7, #12]
 800b434:	f002 fdda 	bl	800dfec <VL53L0X_WrByte>
 800b438:	4603      	mov	r3, r0
 800b43a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b43e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b442:	2b00      	cmp	r3, #0
 800b444:	d107      	bne.n	800b456 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b446:	2200      	movs	r2, #0
 800b448:	21ff      	movs	r1, #255	; 0xff
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f002 fdce 	bl	800dfec <VL53L0X_WrByte>
 800b450:	4603      	mov	r3, r0
 800b452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b456:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d109      	bne.n	800b472 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800b45e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b462:	461a      	mov	r2, r3
 800b464:	21b6      	movs	r1, #182	; 0xb6
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f002 fdc0 	bl	800dfec <VL53L0X_WrByte>
 800b46c:	4603      	mov	r3, r0
 800b46e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800b472:	2300      	movs	r3, #0
 800b474:	627b      	str	r3, [r7, #36]	; 0x24
 800b476:	e009      	b.n	800b48c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47c:	4413      	add	r3, r2
 800b47e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b482:	2200      	movs	r2, #0
 800b484:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800b486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b488:	3301      	adds	r3, #1
 800b48a:	627b      	str	r3, [r7, #36]	; 0x24
 800b48c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b48e:	69fb      	ldr	r3, [r7, #28]
 800b490:	429a      	cmp	r2, r3
 800b492:	d3f1      	bcc.n	800b478 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800b494:	79fb      	ldrb	r3, [r7, #7]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d011      	beq.n	800b4be <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b49a:	e002      	b.n	800b4a2 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800b49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49e:	3301      	adds	r3, #1
 800b4a0:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b4a2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a8:	4413      	add	r3, r2
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7ff fc2a 	bl	800ad04 <is_aperture>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d103      	bne.n	800b4be <VL53L0X_set_reference_spads+0xe6>
 800b4b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d3ee      	bcc.n	800b49c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800b4ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4ce:	79f9      	ldrb	r1, [r7, #7]
 800b4d0:	f107 0214 	add.w	r2, r7, #20
 800b4d4:	9204      	str	r2, [sp, #16]
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	9203      	str	r2, [sp, #12]
 800b4da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4dc:	9202      	str	r2, [sp, #8]
 800b4de:	9301      	str	r3, [sp, #4]
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	4623      	mov	r3, r4
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f7ff fc83 	bl	800adf4 <enable_ref_spads>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800b4f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d10c      	bne.n	800b516 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	b2da      	uxtb	r2, r3
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	79fa      	ldrb	r2, [r7, #7]
 800b512:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800b516:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3734      	adds	r7, #52	; 0x34
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd90      	pop	{r4, r7, pc}

0800b522 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b084      	sub	sp, #16
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
 800b52a:	460b      	mov	r3, r1
 800b52c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b52e:	2300      	movs	r3, #0
 800b530:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10a      	bne.n	800b550 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800b53a:	78fb      	ldrb	r3, [r7, #3]
 800b53c:	f043 0301 	orr.w	r3, r3, #1
 800b540:	b2db      	uxtb	r3, r3
 800b542:	461a      	mov	r2, r3
 800b544:	2100      	movs	r1, #0
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f002 fd50 	bl	800dfec <VL53L0X_WrByte>
 800b54c:	4603      	mov	r3, r0
 800b54e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800b550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d104      	bne.n	800b562 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f9bf 	bl	800b8dc <VL53L0X_measurement_poll_for_completion>
 800b55e:	4603      	mov	r3, r0
 800b560:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d105      	bne.n	800b576 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b56a:	2100      	movs	r1, #0
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7ff fab5 	bl	800aadc <VL53L0X_ClearInterruptMask>
 800b572:	4603      	mov	r3, r0
 800b574:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d106      	bne.n	800b58c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800b57e:	2200      	movs	r2, #0
 800b580:	2100      	movs	r1, #0
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f002 fd32 	bl	800dfec <VL53L0X_WrByte>
 800b588:	4603      	mov	r3, r0
 800b58a:	73fb      	strb	r3, [r7, #15]

	return Status;
 800b58c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	4608      	mov	r0, r1
 800b5a2:	4611      	mov	r1, r2
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	70fb      	strb	r3, [r7, #3]
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	70bb      	strb	r3, [r7, #2]
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	21ff      	movs	r1, #255	; 0xff
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f002 fd14 	bl	800dfec <VL53L0X_WrByte>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f002 fd0a 	bl	800dfec <VL53L0X_WrByte>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	461a      	mov	r2, r3
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	21ff      	movs	r1, #255	; 0xff
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f002 fd00 	bl	800dfec <VL53L0X_WrByte>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	7bfb      	ldrb	r3, [r7, #15]
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800b5f6:	78fb      	ldrb	r3, [r7, #3]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d01e      	beq.n	800b63a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800b5fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d009      	beq.n	800b618 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800b604:	69ba      	ldr	r2, [r7, #24]
 800b606:	21cb      	movs	r1, #203	; 0xcb
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f002 fd71 	bl	800e0f0 <VL53L0X_RdByte>
 800b60e:	4603      	mov	r3, r0
 800b610:	461a      	mov	r2, r3
 800b612:	7bfb      	ldrb	r3, [r7, #15]
 800b614:	4313      	orrs	r3, r2
 800b616:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b618:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d02a      	beq.n	800b676 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800b620:	f107 030e 	add.w	r3, r7, #14
 800b624:	461a      	mov	r2, r3
 800b626:	21ee      	movs	r1, #238	; 0xee
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f002 fd61 	bl	800e0f0 <VL53L0X_RdByte>
 800b62e:	4603      	mov	r3, r0
 800b630:	461a      	mov	r2, r3
 800b632:	7bfb      	ldrb	r3, [r7, #15]
 800b634:	4313      	orrs	r3, r2
 800b636:	73fb      	strb	r3, [r7, #15]
 800b638:	e01d      	b.n	800b676 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800b63a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00a      	beq.n	800b658 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800b642:	78bb      	ldrb	r3, [r7, #2]
 800b644:	461a      	mov	r2, r3
 800b646:	21cb      	movs	r1, #203	; 0xcb
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f002 fccf 	bl	800dfec <VL53L0X_WrByte>
 800b64e:	4603      	mov	r3, r0
 800b650:	461a      	mov	r2, r3
 800b652:	7bfb      	ldrb	r3, [r7, #15]
 800b654:	4313      	orrs	r3, r2
 800b656:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d00a      	beq.n	800b676 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800b660:	787b      	ldrb	r3, [r7, #1]
 800b662:	2280      	movs	r2, #128	; 0x80
 800b664:	21ee      	movs	r1, #238	; 0xee
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f002 fd0e 	bl	800e088 <VL53L0X_UpdateByte>
 800b66c:	4603      	mov	r3, r0
 800b66e:	461a      	mov	r2, r3
 800b670:	7bfb      	ldrb	r3, [r7, #15]
 800b672:	4313      	orrs	r3, r2
 800b674:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b676:	2201      	movs	r2, #1
 800b678:	21ff      	movs	r1, #255	; 0xff
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f002 fcb6 	bl	800dfec <VL53L0X_WrByte>
 800b680:	4603      	mov	r3, r0
 800b682:	461a      	mov	r2, r3
 800b684:	7bfb      	ldrb	r3, [r7, #15]
 800b686:	4313      	orrs	r3, r2
 800b688:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b68a:	2201      	movs	r2, #1
 800b68c:	2100      	movs	r1, #0
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f002 fcac 	bl	800dfec <VL53L0X_WrByte>
 800b694:	4603      	mov	r3, r0
 800b696:	461a      	mov	r2, r3
 800b698:	7bfb      	ldrb	r3, [r7, #15]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b69e:	2200      	movs	r2, #0
 800b6a0:	21ff      	movs	r1, #255	; 0xff
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f002 fca2 	bl	800dfec <VL53L0X_WrByte>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	7bfb      	ldrb	r3, [r7, #15]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800b6b2:	7bbb      	ldrb	r3, [r7, #14]
 800b6b4:	f023 0310 	bic.w	r3, r3, #16
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	701a      	strb	r2, [r3, #0]

	return Status;
 800b6be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b08a      	sub	sp, #40	; 0x28
 800b6ce:	af04      	add	r7, sp, #16
 800b6d0:	60f8      	str	r0, [r7, #12]
 800b6d2:	60b9      	str	r1, [r7, #8]
 800b6d4:	4611      	mov	r1, r2
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	460b      	mov	r3, r1
 800b6da:	71fb      	strb	r3, [r7, #7]
 800b6dc:	4613      	mov	r3, r2
 800b6de:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b6f4:	79bb      	ldrb	r3, [r7, #6]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d003      	beq.n	800b702 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b700:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800b702:	2201      	movs	r2, #1
 800b704:	2101      	movs	r1, #1
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f002 fc70 	bl	800dfec <VL53L0X_WrByte>
 800b70c:	4603      	mov	r3, r0
 800b70e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b710:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d105      	bne.n	800b724 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800b718:	2140      	movs	r1, #64	; 0x40
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	f7ff ff01 	bl	800b522 <VL53L0X_perform_single_ref_calibration>
 800b720:	4603      	mov	r3, r0
 800b722:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b724:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d115      	bne.n	800b758 <VL53L0X_perform_vhv_calibration+0x8e>
 800b72c:	79fb      	ldrb	r3, [r7, #7]
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d112      	bne.n	800b758 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b732:	7d39      	ldrb	r1, [r7, #20]
 800b734:	7d7a      	ldrb	r2, [r7, #21]
 800b736:	2300      	movs	r3, #0
 800b738:	9303      	str	r3, [sp, #12]
 800b73a:	2301      	movs	r3, #1
 800b73c:	9302      	str	r3, [sp, #8]
 800b73e:	f107 0313 	add.w	r3, r7, #19
 800b742:	9301      	str	r3, [sp, #4]
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	460b      	mov	r3, r1
 800b74a:	2101      	movs	r1, #1
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	f7ff ff23 	bl	800b598 <VL53L0X_ref_calibration_io>
 800b752:	4603      	mov	r3, r0
 800b754:	75fb      	strb	r3, [r7, #23]
 800b756:	e002      	b.n	800b75e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	2200      	movs	r2, #0
 800b75c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b75e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d112      	bne.n	800b78c <VL53L0X_perform_vhv_calibration+0xc2>
 800b766:	79bb      	ldrb	r3, [r7, #6]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d00f      	beq.n	800b78c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b76c:	7dbb      	ldrb	r3, [r7, #22]
 800b76e:	461a      	mov	r2, r3
 800b770:	2101      	movs	r1, #1
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f002 fc3a 	bl	800dfec <VL53L0X_WrByte>
 800b778:	4603      	mov	r3, r0
 800b77a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b77c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d103      	bne.n	800b78c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	7dba      	ldrb	r2, [r7, #22]
 800b788:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b78c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b790:	4618      	mov	r0, r3
 800b792:	3718      	adds	r7, #24
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b08a      	sub	sp, #40	; 0x28
 800b79c:	af04      	add	r7, sp, #16
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	4611      	mov	r1, r2
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	71fb      	strb	r3, [r7, #7]
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b7be:	79bb      	ldrb	r3, [r7, #6]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d003      	beq.n	800b7cc <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b7ca:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800b7cc:	2202      	movs	r2, #2
 800b7ce:	2101      	movs	r1, #1
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	f002 fc0b 	bl	800dfec <VL53L0X_WrByte>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b7da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d105      	bne.n	800b7ee <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f7ff fe9c 	bl	800b522 <VL53L0X_perform_single_ref_calibration>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b7ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d115      	bne.n	800b822 <VL53L0X_perform_phase_calibration+0x8a>
 800b7f6:	79fb      	ldrb	r3, [r7, #7]
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d112      	bne.n	800b822 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b7fc:	7d39      	ldrb	r1, [r7, #20]
 800b7fe:	7d7a      	ldrb	r2, [r7, #21]
 800b800:	2301      	movs	r3, #1
 800b802:	9303      	str	r3, [sp, #12]
 800b804:	2300      	movs	r3, #0
 800b806:	9302      	str	r3, [sp, #8]
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	9301      	str	r3, [sp, #4]
 800b80c:	f107 0313 	add.w	r3, r7, #19
 800b810:	9300      	str	r3, [sp, #0]
 800b812:	460b      	mov	r3, r1
 800b814:	2101      	movs	r1, #1
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f7ff febe 	bl	800b598 <VL53L0X_ref_calibration_io>
 800b81c:	4603      	mov	r3, r0
 800b81e:	75fb      	strb	r3, [r7, #23]
 800b820:	e002      	b.n	800b828 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	2200      	movs	r2, #0
 800b826:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b828:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d112      	bne.n	800b856 <VL53L0X_perform_phase_calibration+0xbe>
 800b830:	79bb      	ldrb	r3, [r7, #6]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00f      	beq.n	800b856 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b836:	7dbb      	ldrb	r3, [r7, #22]
 800b838:	461a      	mov	r2, r3
 800b83a:	2101      	movs	r1, #1
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f002 fbd5 	bl	800dfec <VL53L0X_WrByte>
 800b842:	4603      	mov	r3, r0
 800b844:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b846:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d103      	bne.n	800b856 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	7dba      	ldrb	r2, [r7, #22]
 800b852:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3718      	adds	r7, #24
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b086      	sub	sp, #24
 800b866:	af00      	add	r7, sp, #0
 800b868:	60f8      	str	r0, [r7, #12]
 800b86a:	60b9      	str	r1, [r7, #8]
 800b86c:	607a      	str	r2, [r7, #4]
 800b86e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b870:	2300      	movs	r3, #0
 800b872:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b874:	2300      	movs	r3, #0
 800b876:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b87e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800b880:	78fa      	ldrb	r2, [r7, #3]
 800b882:	2300      	movs	r3, #0
 800b884:	68b9      	ldr	r1, [r7, #8]
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	f7ff ff1f 	bl	800b6ca <VL53L0X_perform_vhv_calibration>
 800b88c:	4603      	mov	r3, r0
 800b88e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d107      	bne.n	800b8a8 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800b898:	78fa      	ldrb	r2, [r7, #3]
 800b89a:	2300      	movs	r3, #0
 800b89c:	6879      	ldr	r1, [r7, #4]
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f7ff ff7a 	bl	800b798 <VL53L0X_perform_phase_calibration>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800b8a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d10f      	bne.n	800b8d0 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b8b0:	7dbb      	ldrb	r3, [r7, #22]
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f002 fb98 	bl	800dfec <VL53L0X_WrByte>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b8c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d103      	bne.n	800b8d0 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	7dba      	ldrb	r2, [r7, #22]
 800b8cc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b8d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3718      	adds	r7, #24
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b086      	sub	sp, #24
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b8f0:	f107 030f 	add.w	r3, r7, #15
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f7fe fe02 	bl	800a500 <VL53L0X_GetMeasurementDataReady>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800b900:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d110      	bne.n	800b92a <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800b908:	7bfb      	ldrb	r3, [r7, #15]
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d00f      	beq.n	800b92e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	3301      	adds	r3, #1
 800b912:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b91a:	d302      	bcc.n	800b922 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b91c:	23f9      	movs	r3, #249	; 0xf9
 800b91e:	75fb      	strb	r3, [r7, #23]
			break;
 800b920:	e006      	b.n	800b930 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f002 fc82 	bl	800e22c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b928:	e7e2      	b.n	800b8f0 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800b92a:	bf00      	nop
 800b92c:	e000      	b.n	800b930 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800b92e:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800b930:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3718      	adds	r7, #24
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	4603      	mov	r3, r0
 800b944:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800b946:	2300      	movs	r3, #0
 800b948:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800b94a:	79fb      	ldrb	r3, [r7, #7]
 800b94c:	3301      	adds	r3, #1
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	005b      	lsls	r3, r3, #1
 800b952:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800b954:	7bfb      	ldrb	r3, [r7, #15]
}
 800b956:	4618      	mov	r0, r3
 800b958:	3714      	adds	r7, #20
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800b962:	b480      	push	{r7}
 800b964:	b085      	sub	sp, #20
 800b966:	af00      	add	r7, sp, #0
 800b968:	4603      	mov	r3, r0
 800b96a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800b96c:	2300      	movs	r3, #0
 800b96e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800b970:	79fb      	ldrb	r3, [r7, #7]
 800b972:	085b      	lsrs	r3, r3, #1
 800b974:	b2db      	uxtb	r3, r3
 800b976:	3b01      	subs	r3, #1
 800b978:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3714      	adds	r7, #20
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800b990:	2300      	movs	r3, #0
 800b992:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b994:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b998:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800b99a:	e002      	b.n	800b9a2 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	089b      	lsrs	r3, r3, #2
 800b9a0:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b9a2:	68ba      	ldr	r2, [r7, #8]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d8f8      	bhi.n	800b99c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800b9aa:	e017      	b.n	800b9dc <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d30b      	bcc.n	800b9d0 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	4413      	add	r3, r2
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	085b      	lsrs	r3, r3, #1
 800b9c8:	68ba      	ldr	r2, [r7, #8]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	60fb      	str	r3, [r7, #12]
 800b9ce:	e002      	b.n	800b9d6 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	085b      	lsrs	r3, r3, #1
 800b9d4:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	089b      	lsrs	r3, r3, #2
 800b9da:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1e4      	bne.n	800b9ac <VL53L0X_isqrt+0x24>
	}

	return res;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3714      	adds	r7, #20
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b086      	sub	sp, #24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	2183      	movs	r1, #131	; 0x83
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f002 faf3 	bl	800dfec <VL53L0X_WrByte>
 800ba06:	4603      	mov	r3, r0
 800ba08:	461a      	mov	r2, r3
 800ba0a:	7dfb      	ldrb	r3, [r7, #23]
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800ba10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d11e      	bne.n	800ba56 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800ba1c:	f107 030f 	add.w	r3, r7, #15
 800ba20:	461a      	mov	r2, r3
 800ba22:	2183      	movs	r1, #131	; 0x83
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f002 fb63 	bl	800e0f0 <VL53L0X_RdByte>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800ba2e:	7bfb      	ldrb	r3, [r7, #15]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10a      	bne.n	800ba4a <VL53L0X_device_read_strobe+0x5a>
 800ba34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d106      	bne.n	800ba4a <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ba48:	d3e8      	bcc.n	800ba1c <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ba50:	d301      	bcc.n	800ba56 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800ba52:	23f9      	movs	r3, #249	; 0xf9
 800ba54:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800ba56:	2201      	movs	r2, #1
 800ba58:	2183      	movs	r1, #131	; 0x83
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f002 fac6 	bl	800dfec <VL53L0X_WrByte>
 800ba60:	4603      	mov	r3, r0
 800ba62:	461a      	mov	r2, r3
 800ba64:	7dfb      	ldrb	r3, [r7, #23]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800ba6a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3718      	adds	r7, #24
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b098      	sub	sp, #96	; 0x60
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	460b      	mov	r3, r1
 800ba80:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba82:	2300      	movs	r3, #0
 800ba84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800ba94:	2300      	movs	r3, #0
 800ba96:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800baa0:	2300      	movs	r3, #0
 800baa2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800baa6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800baaa:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800baac:	2300      	movs	r3, #0
 800baae:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800bab0:	2300      	movs	r3, #0
 800bab2:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800bab4:	2300      	movs	r3, #0
 800bab6:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800babe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800bac2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bac6:	2b07      	cmp	r3, #7
 800bac8:	f000 8408 	beq.w	800c2dc <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800bacc:	2201      	movs	r2, #1
 800bace:	2180      	movs	r1, #128	; 0x80
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f002 fa8b 	bl	800dfec <VL53L0X_WrByte>
 800bad6:	4603      	mov	r3, r0
 800bad8:	461a      	mov	r2, r3
 800bada:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bade:	4313      	orrs	r3, r2
 800bae0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bae4:	2201      	movs	r2, #1
 800bae6:	21ff      	movs	r1, #255	; 0xff
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f002 fa7f 	bl	800dfec <VL53L0X_WrByte>
 800baee:	4603      	mov	r3, r0
 800baf0:	461a      	mov	r2, r3
 800baf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baf6:	4313      	orrs	r3, r2
 800baf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800bafc:	2200      	movs	r2, #0
 800bafe:	2100      	movs	r1, #0
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f002 fa73 	bl	800dfec <VL53L0X_WrByte>
 800bb06:	4603      	mov	r3, r0
 800bb08:	461a      	mov	r2, r3
 800bb0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800bb14:	2206      	movs	r2, #6
 800bb16:	21ff      	movs	r1, #255	; 0xff
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f002 fa67 	bl	800dfec <VL53L0X_WrByte>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	461a      	mov	r2, r3
 800bb22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb26:	4313      	orrs	r3, r2
 800bb28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800bb2c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800bb30:	461a      	mov	r2, r3
 800bb32:	2183      	movs	r1, #131	; 0x83
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f002 fadb 	bl	800e0f0 <VL53L0X_RdByte>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb42:	4313      	orrs	r3, r2
 800bb44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800bb48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb4c:	f043 0304 	orr.w	r3, r3, #4
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	461a      	mov	r2, r3
 800bb54:	2183      	movs	r1, #131	; 0x83
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f002 fa48 	bl	800dfec <VL53L0X_WrByte>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	461a      	mov	r2, r3
 800bb60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb64:	4313      	orrs	r3, r2
 800bb66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800bb6a:	2207      	movs	r2, #7
 800bb6c:	21ff      	movs	r1, #255	; 0xff
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f002 fa3c 	bl	800dfec <VL53L0X_WrByte>
 800bb74:	4603      	mov	r3, r0
 800bb76:	461a      	mov	r2, r3
 800bb78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800bb82:	2201      	movs	r2, #1
 800bb84:	2181      	movs	r1, #129	; 0x81
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f002 fa30 	bl	800dfec <VL53L0X_WrByte>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	461a      	mov	r2, r3
 800bb90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb94:	4313      	orrs	r3, r2
 800bb96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f002 fb46 	bl	800e22c <VL53L0X_PollingDelay>
 800bba0:	4603      	mov	r3, r0
 800bba2:	461a      	mov	r2, r3
 800bba4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800bbae:	2201      	movs	r2, #1
 800bbb0:	2180      	movs	r1, #128	; 0x80
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f002 fa1a 	bl	800dfec <VL53L0X_WrByte>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	461a      	mov	r2, r3
 800bbbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800bbc6:	78fb      	ldrb	r3, [r7, #3]
 800bbc8:	f003 0301 	and.w	r3, r3, #1
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	f000 8098 	beq.w	800bd02 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800bbd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bbd6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	f040 8091 	bne.w	800bd02 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800bbe0:	226b      	movs	r2, #107	; 0x6b
 800bbe2:	2194      	movs	r1, #148	; 0x94
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f002 fa01 	bl	800dfec <VL53L0X_WrByte>
 800bbea:	4603      	mov	r3, r0
 800bbec:	461a      	mov	r2, r3
 800bbee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f7ff fef9 	bl	800b9f0 <VL53L0X_device_read_strobe>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	461a      	mov	r2, r3
 800bc02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc06:	4313      	orrs	r3, r2
 800bc08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bc0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc10:	461a      	mov	r2, r3
 800bc12:	2190      	movs	r1, #144	; 0x90
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f002 facd 	bl	800e1b4 <VL53L0X_RdDWord>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc22:	4313      	orrs	r3, r2
 800bc24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800bc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2a:	0a1b      	lsrs	r3, r3, #8
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc32:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800bc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc38:	0bdb      	lsrs	r3, r3, #15
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	f003 0301 	and.w	r3, r3, #1
 800bc40:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800bc44:	2224      	movs	r2, #36	; 0x24
 800bc46:	2194      	movs	r1, #148	; 0x94
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f002 f9cf 	bl	800dfec <VL53L0X_WrByte>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	461a      	mov	r2, r3
 800bc52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc56:	4313      	orrs	r3, r2
 800bc58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f7ff fec7 	bl	800b9f0 <VL53L0X_device_read_strobe>
 800bc62:	4603      	mov	r3, r0
 800bc64:	461a      	mov	r2, r3
 800bc66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bc70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc74:	461a      	mov	r2, r3
 800bc76:	2190      	movs	r1, #144	; 0x90
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f002 fa9b 	bl	800e1b4 <VL53L0X_RdDWord>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	461a      	mov	r2, r3
 800bc82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc86:	4313      	orrs	r3, r2
 800bc88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800bc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8e:	0e1b      	lsrs	r3, r3, #24
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800bc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc96:	0c1b      	lsrs	r3, r3, #16
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9e:	0a1b      	lsrs	r3, r3, #8
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800bca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800bcaa:	2225      	movs	r2, #37	; 0x25
 800bcac:	2194      	movs	r1, #148	; 0x94
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f002 f99c 	bl	800dfec <VL53L0X_WrByte>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f7ff fe94 	bl	800b9f0 <VL53L0X_device_read_strobe>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	461a      	mov	r2, r3
 800bccc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bcd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bcda:	461a      	mov	r2, r3
 800bcdc:	2190      	movs	r1, #144	; 0x90
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f002 fa68 	bl	800e1b4 <VL53L0X_RdDWord>
 800bce4:	4603      	mov	r3, r0
 800bce6:	461a      	mov	r2, r3
 800bce8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcec:	4313      	orrs	r3, r2
 800bcee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800bcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf4:	0e1b      	lsrs	r3, r3, #24
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800bcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfc:	0c1b      	lsrs	r3, r3, #16
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800bd02:	78fb      	ldrb	r3, [r7, #3]
 800bd04:	f003 0302 	and.w	r3, r3, #2
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f000 8189 	beq.w	800c020 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800bd0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bd12:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f040 8182 	bne.w	800c020 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800bd1c:	2202      	movs	r2, #2
 800bd1e:	2194      	movs	r1, #148	; 0x94
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f002 f963 	bl	800dfec <VL53L0X_WrByte>
 800bd26:	4603      	mov	r3, r0
 800bd28:	461a      	mov	r2, r3
 800bd2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f7ff fe5b 	bl	800b9f0 <VL53L0X_device_read_strobe>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd42:	4313      	orrs	r3, r2
 800bd44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800bd48:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	2190      	movs	r1, #144	; 0x90
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f002 f9cd 	bl	800e0f0 <VL53L0X_RdByte>
 800bd56:	4603      	mov	r3, r0
 800bd58:	461a      	mov	r2, r3
 800bd5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800bd64:	227b      	movs	r2, #123	; 0x7b
 800bd66:	2194      	movs	r1, #148	; 0x94
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f002 f93f 	bl	800dfec <VL53L0X_WrByte>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	461a      	mov	r2, r3
 800bd72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd76:	4313      	orrs	r3, r2
 800bd78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f7ff fe37 	bl	800b9f0 <VL53L0X_device_read_strobe>
 800bd82:	4603      	mov	r3, r0
 800bd84:	461a      	mov	r2, r3
 800bd86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800bd90:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800bd94:	461a      	mov	r2, r3
 800bd96:	2190      	movs	r1, #144	; 0x90
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f002 f9a9 	bl	800e0f0 <VL53L0X_RdByte>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	461a      	mov	r2, r3
 800bda2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bda6:	4313      	orrs	r3, r2
 800bda8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800bdac:	2277      	movs	r2, #119	; 0x77
 800bdae:	2194      	movs	r1, #148	; 0x94
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f002 f91b 	bl	800dfec <VL53L0X_WrByte>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	461a      	mov	r2, r3
 800bdba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7ff fe13 	bl	800b9f0 <VL53L0X_device_read_strobe>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	461a      	mov	r2, r3
 800bdce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bdd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bddc:	461a      	mov	r2, r3
 800bdde:	2190      	movs	r1, #144	; 0x90
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f002 f9e7 	bl	800e1b4 <VL53L0X_RdDWord>
 800bde6:	4603      	mov	r3, r0
 800bde8:	461a      	mov	r2, r3
 800bdea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800bdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf6:	0e5b      	lsrs	r3, r3, #25
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	0c9b      	lsrs	r3, r3, #18
 800be06:	b2db      	uxtb	r3, r3
 800be08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800be10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be12:	0adb      	lsrs	r3, r3, #11
 800be14:	b2db      	uxtb	r3, r3
 800be16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800be1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be20:	091b      	lsrs	r3, r3, #4
 800be22:	b2db      	uxtb	r3, r3
 800be24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800be2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	00db      	lsls	r3, r3, #3
 800be32:	b2db      	uxtb	r3, r3
 800be34:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800be3e:	2278      	movs	r2, #120	; 0x78
 800be40:	2194      	movs	r1, #148	; 0x94
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f002 f8d2 	bl	800dfec <VL53L0X_WrByte>
 800be48:	4603      	mov	r3, r0
 800be4a:	461a      	mov	r2, r3
 800be4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be50:	4313      	orrs	r3, r2
 800be52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f7ff fdca 	bl	800b9f0 <VL53L0X_device_read_strobe>
 800be5c:	4603      	mov	r3, r0
 800be5e:	461a      	mov	r2, r3
 800be60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be64:	4313      	orrs	r3, r2
 800be66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800be6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800be6e:	461a      	mov	r2, r3
 800be70:	2190      	movs	r1, #144	; 0x90
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f002 f99e 	bl	800e1b4 <VL53L0X_RdDWord>
 800be78:	4603      	mov	r3, r0
 800be7a:	461a      	mov	r2, r3
 800be7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be80:	4313      	orrs	r3, r2
 800be82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	0f5b      	lsrs	r3, r3, #29
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be90:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800be92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be96:	4413      	add	r3, r2
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800be9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9e:	0d9b      	lsrs	r3, r3, #22
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800beaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beac:	0bdb      	lsrs	r3, r3, #15
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800beb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beba:	0a1b      	lsrs	r3, r3, #8
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800bec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec8:	085b      	lsrs	r3, r3, #1
 800beca:	b2db      	uxtb	r3, r3
 800becc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800bed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	019b      	lsls	r3, r3, #6
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800bee6:	2279      	movs	r2, #121	; 0x79
 800bee8:	2194      	movs	r1, #148	; 0x94
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f002 f87e 	bl	800dfec <VL53L0X_WrByte>
 800bef0:	4603      	mov	r3, r0
 800bef2:	461a      	mov	r2, r3
 800bef4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bef8:	4313      	orrs	r3, r2
 800befa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7ff fd76 	bl	800b9f0 <VL53L0X_device_read_strobe>
 800bf04:	4603      	mov	r3, r0
 800bf06:	461a      	mov	r2, r3
 800bf08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bf12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bf16:	461a      	mov	r2, r3
 800bf18:	2190      	movs	r1, #144	; 0x90
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f002 f94a 	bl	800e1b4 <VL53L0X_RdDWord>
 800bf20:	4603      	mov	r3, r0
 800bf22:	461a      	mov	r2, r3
 800bf24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	0e9b      	lsrs	r3, r3, #26
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf38:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800bf3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf3e:	4413      	add	r3, r2
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800bf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf46:	0cdb      	lsrs	r3, r3, #19
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800bf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf54:	0b1b      	lsrs	r3, r3, #12
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800bf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf62:	095b      	lsrs	r3, r3, #5
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	b2db      	uxtb	r3, r3
 800bf76:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800bf80:	227a      	movs	r2, #122	; 0x7a
 800bf82:	2194      	movs	r1, #148	; 0x94
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f002 f831 	bl	800dfec <VL53L0X_WrByte>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf92:	4313      	orrs	r3, r2
 800bf94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7ff fd29 	bl	800b9f0 <VL53L0X_device_read_strobe>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bfac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	2190      	movs	r1, #144	; 0x90
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f002 f8fd 	bl	800e1b4 <VL53L0X_RdDWord>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800bfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfca:	0f9b      	lsrs	r3, r3, #30
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfd2:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800bfd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bfd8:	4413      	add	r3, r2
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe0:	0ddb      	lsrs	r3, r3, #23
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfe8:	b2db      	uxtb	r3, r3
 800bfea:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800bfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfee:	0c1b      	lsrs	r3, r3, #16
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	0a5b      	lsrs	r3, r3, #9
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c004:	b2db      	uxtb	r3, r3
 800c006:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800c00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00c:	089b      	lsrs	r3, r3, #2
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c014:	b2db      	uxtb	r3, r3
 800c016:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800c01a:	2300      	movs	r3, #0
 800c01c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800c020:	78fb      	ldrb	r3, [r7, #3]
 800c022:	f003 0304 	and.w	r3, r3, #4
 800c026:	2b00      	cmp	r3, #0
 800c028:	f000 80f1 	beq.w	800c20e <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800c02c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c030:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800c034:	2b00      	cmp	r3, #0
 800c036:	f040 80ea 	bne.w	800c20e <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800c03a:	227b      	movs	r2, #123	; 0x7b
 800c03c:	2194      	movs	r1, #148	; 0x94
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f001 ffd4 	bl	800dfec <VL53L0X_WrByte>
 800c044:	4603      	mov	r3, r0
 800c046:	461a      	mov	r2, r3
 800c048:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c04c:	4313      	orrs	r3, r2
 800c04e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f7ff fccc 	bl	800b9f0 <VL53L0X_device_read_strobe>
 800c058:	4603      	mov	r3, r0
 800c05a:	461a      	mov	r2, r3
 800c05c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c060:	4313      	orrs	r3, r2
 800c062:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800c066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c06a:	461a      	mov	r2, r3
 800c06c:	2190      	movs	r1, #144	; 0x90
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f002 f8a0 	bl	800e1b4 <VL53L0X_RdDWord>
 800c074:	4603      	mov	r3, r0
 800c076:	461a      	mov	r2, r3
 800c078:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c07c:	4313      	orrs	r3, r2
 800c07e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800c082:	227c      	movs	r2, #124	; 0x7c
 800c084:	2194      	movs	r1, #148	; 0x94
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f001 ffb0 	bl	800dfec <VL53L0X_WrByte>
 800c08c:	4603      	mov	r3, r0
 800c08e:	461a      	mov	r2, r3
 800c090:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c094:	4313      	orrs	r3, r2
 800c096:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f7ff fca8 	bl	800b9f0 <VL53L0X_device_read_strobe>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800c0ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	2190      	movs	r1, #144	; 0x90
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f002 f87c 	bl	800e1b4 <VL53L0X_RdDWord>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	461a      	mov	r2, r3
 800c0c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800c0ca:	2273      	movs	r2, #115	; 0x73
 800c0cc:	2194      	movs	r1, #148	; 0x94
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f001 ff8c 	bl	800dfec <VL53L0X_WrByte>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7ff fc84 	bl	800b9f0 <VL53L0X_device_read_strobe>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c0f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	2190      	movs	r1, #144	; 0x90
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f002 f858 	bl	800e1b4 <VL53L0X_RdDWord>
 800c104:	4603      	mov	r3, r0
 800c106:	461a      	mov	r2, r3
 800c108:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c10c:	4313      	orrs	r3, r2
 800c10e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800c116:	b29b      	uxth	r3, r3
 800c118:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800c11a:	2274      	movs	r2, #116	; 0x74
 800c11c:	2194      	movs	r1, #148	; 0x94
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f001 ff64 	bl	800dfec <VL53L0X_WrByte>
 800c124:	4603      	mov	r3, r0
 800c126:	461a      	mov	r2, r3
 800c128:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c12c:	4313      	orrs	r3, r2
 800c12e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f7ff fc5c 	bl	800b9f0 <VL53L0X_device_read_strobe>
 800c138:	4603      	mov	r3, r0
 800c13a:	461a      	mov	r2, r3
 800c13c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c140:	4313      	orrs	r3, r2
 800c142:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c146:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c14a:	461a      	mov	r2, r3
 800c14c:	2190      	movs	r1, #144	; 0x90
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f002 f830 	bl	800e1b4 <VL53L0X_RdDWord>
 800c154:	4603      	mov	r3, r0
 800c156:	461a      	mov	r2, r3
 800c158:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c15c:	4313      	orrs	r3, r2
 800c15e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800c162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c164:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800c166:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c168:	4313      	orrs	r3, r2
 800c16a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800c16c:	2275      	movs	r2, #117	; 0x75
 800c16e:	2194      	movs	r1, #148	; 0x94
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f001 ff3b 	bl	800dfec <VL53L0X_WrByte>
 800c176:	4603      	mov	r3, r0
 800c178:	461a      	mov	r2, r3
 800c17a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c17e:	4313      	orrs	r3, r2
 800c180:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f7ff fc33 	bl	800b9f0 <VL53L0X_device_read_strobe>
 800c18a:	4603      	mov	r3, r0
 800c18c:	461a      	mov	r2, r3
 800c18e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c192:	4313      	orrs	r3, r2
 800c194:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c198:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c19c:	461a      	mov	r2, r3
 800c19e:	2190      	movs	r1, #144	; 0x90
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f002 f807 	bl	800e1b4 <VL53L0X_RdDWord>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800c1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b6:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800c1bc:	2276      	movs	r2, #118	; 0x76
 800c1be:	2194      	movs	r1, #148	; 0x94
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f001 ff13 	bl	800dfec <VL53L0X_WrByte>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f7ff fc0b 	bl	800b9f0 <VL53L0X_device_read_strobe>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	461a      	mov	r2, r3
 800c1de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c1e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	2190      	movs	r1, #144	; 0x90
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f001 ffdf 	bl	800e1b4 <VL53L0X_RdDWord>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1fe:	4313      	orrs	r3, r2
 800c200:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800c204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c206:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800c208:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c20a:	4313      	orrs	r3, r2
 800c20c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800c20e:	2200      	movs	r2, #0
 800c210:	2181      	movs	r1, #129	; 0x81
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f001 feea 	bl	800dfec <VL53L0X_WrByte>
 800c218:	4603      	mov	r3, r0
 800c21a:	461a      	mov	r2, r3
 800c21c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c220:	4313      	orrs	r3, r2
 800c222:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c226:	2206      	movs	r2, #6
 800c228:	21ff      	movs	r1, #255	; 0xff
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f001 fede 	bl	800dfec <VL53L0X_WrByte>
 800c230:	4603      	mov	r3, r0
 800c232:	461a      	mov	r2, r3
 800c234:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c238:	4313      	orrs	r3, r2
 800c23a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c23e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800c242:	461a      	mov	r2, r3
 800c244:	2183      	movs	r1, #131	; 0x83
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f001 ff52 	bl	800e0f0 <VL53L0X_RdByte>
 800c24c:	4603      	mov	r3, r0
 800c24e:	461a      	mov	r2, r3
 800c250:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c254:	4313      	orrs	r3, r2
 800c256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800c25a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c25e:	f023 0304 	bic.w	r3, r3, #4
 800c262:	b2db      	uxtb	r3, r3
 800c264:	461a      	mov	r2, r3
 800c266:	2183      	movs	r1, #131	; 0x83
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f001 febf 	bl	800dfec <VL53L0X_WrByte>
 800c26e:	4603      	mov	r3, r0
 800c270:	461a      	mov	r2, r3
 800c272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c276:	4313      	orrs	r3, r2
 800c278:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c27c:	2201      	movs	r2, #1
 800c27e:	21ff      	movs	r1, #255	; 0xff
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f001 feb3 	bl	800dfec <VL53L0X_WrByte>
 800c286:	4603      	mov	r3, r0
 800c288:	461a      	mov	r2, r3
 800c28a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c28e:	4313      	orrs	r3, r2
 800c290:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c294:	2201      	movs	r2, #1
 800c296:	2100      	movs	r1, #0
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f001 fea7 	bl	800dfec <VL53L0X_WrByte>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	21ff      	movs	r1, #255	; 0xff
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f001 fe9b 	bl	800dfec <VL53L0X_WrByte>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	2180      	movs	r1, #128	; 0x80
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f001 fe8f 	bl	800dfec <VL53L0X_WrByte>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800c2dc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f040 808f 	bne.w	800c404 <VL53L0X_get_info_from_device+0x98e>
 800c2e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c2ea:	2b07      	cmp	r3, #7
 800c2ec:	f000 808a 	beq.w	800c404 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	f003 0301 	and.w	r3, r3, #1
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d024      	beq.n	800c344 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c2fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c2fe:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c302:	2b00      	cmp	r3, #0
 800c304:	d11e      	bne.n	800c344 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800c30c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800c316:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c31a:	2300      	movs	r3, #0
 800c31c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c31e:	e00e      	b.n	800c33e <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800c320:	f107 0208 	add.w	r2, r7, #8
 800c324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c326:	4413      	add	r3, r2
 800c328:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c32e:	4413      	add	r3, r2
 800c330:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800c334:	460a      	mov	r2, r1
 800c336:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c33a:	3301      	adds	r3, #1
 800c33c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c33e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c340:	2b05      	cmp	r3, #5
 800c342:	dded      	ble.n	800c320 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800c344:	78fb      	ldrb	r3, [r7, #3]
 800c346:	f003 0302 	and.w	r3, r3, #2
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d018      	beq.n	800c380 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800c34e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c352:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800c356:	2b00      	cmp	r3, #0
 800c358:	d112      	bne.n	800c380 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c35a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c364:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	33f3      	adds	r3, #243	; 0xf3
 800c372:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800c374:	f107 0310 	add.w	r3, r7, #16
 800c378:	4619      	mov	r1, r3
 800c37a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c37c:	f002 fe46 	bl	800f00c <strcpy>

		}

		if (((option & 4) == 4) &&
 800c380:	78fb      	ldrb	r3, [r7, #3]
 800c382:	f003 0304 	and.w	r3, r3, #4
 800c386:	2b00      	cmp	r3, #0
 800c388:	d030      	beq.n	800c3ec <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800c38a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c38e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800c392:	2b00      	cmp	r3, #0
 800c394:	d12a      	bne.n	800c3ec <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c39e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800c3a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3a8:	025b      	lsls	r3, r3, #9
 800c3aa:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3b0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800c3ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d011      	beq.n	800c3e4 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800c3c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3c4:	1ad3      	subs	r3, r2, r3
 800c3c6:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800c3c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c3ce:	fb02 f303 	mul.w	r3, r2, r3
 800c3d2:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800c3d4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800c3d8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800c3dc:	425b      	negs	r3, r3
 800c3de:	b29b      	uxth	r3, r3
 800c3e0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800c3e4:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800c3ec:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c3f0:	78fb      	ldrb	r3, [r7, #3]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800c3fa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c404:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3760      	adds	r7, #96	; 0x60
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800c410:	b480      	push	{r7}
 800c412:	b087      	sub	sp, #28
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	460b      	mov	r3, r1
 800c41a:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800c41c:	f240 6277 	movw	r2, #1655	; 0x677
 800c420:	f04f 0300 	mov.w	r3, #0
 800c424:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800c428:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800c42c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800c42e:	78fb      	ldrb	r3, [r7, #3]
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800c436:	693a      	ldr	r2, [r7, #16]
 800c438:	fb02 f303 	mul.w	r3, r2, r3
 800c43c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800c43e:	68bb      	ldr	r3, [r7, #8]
}
 800c440:	4618      	mov	r0, r3
 800c442:	371c      	adds	r7, #28
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr

0800c44c <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b087      	sub	sp, #28
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800c454:	2300      	movs	r3, #0
 800c456:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800c458:	2300      	movs	r3, #0
 800c45a:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c45c:	2300      	movs	r3, #0
 800c45e:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d017      	beq.n	800c496 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	3b01      	subs	r3, #1
 800c46a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c46c:	e005      	b.n	800c47a <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	085b      	lsrs	r3, r3, #1
 800c472:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800c474:	89fb      	ldrh	r3, [r7, #14]
 800c476:	3301      	adds	r3, #1
 800c478:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c480:	2b00      	cmp	r3, #0
 800c482:	d1f4      	bne.n	800c46e <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800c484:	89fb      	ldrh	r3, [r7, #14]
 800c486:	021b      	lsls	r3, r3, #8
 800c488:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800c492:	4413      	add	r3, r2
 800c494:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800c496:	8afb      	ldrh	r3, [r7, #22]

}
 800c498:	4618      	mov	r0, r3
 800c49a:	371c      	adds	r7, #28
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c4b2:	88fb      	ldrh	r3, [r7, #6]
 800c4b4:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c4b6:	88fa      	ldrh	r2, [r7, #6]
 800c4b8:	0a12      	lsrs	r2, r2, #8
 800c4ba:	b292      	uxth	r2, r2
 800c4bc:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c4be:	3301      	adds	r3, #1
 800c4c0:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3714      	adds	r7, #20
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b088      	sub	sp, #32
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	60b9      	str	r1, [r7, #8]
 800c4da:	4613      	mov	r3, r2
 800c4dc:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c4e2:	79fb      	ldrb	r3, [r7, #7]
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f7ff ff92 	bl	800c410 <VL53L0X_calc_macro_period_ps>
 800c4ec:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c4f4:	4a0a      	ldr	r2, [pc, #40]	; (800c520 <VL53L0X_calc_timeout_mclks+0x50>)
 800c4f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c4fa:	099b      	lsrs	r3, r3, #6
 800c4fc:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c504:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	085b      	lsrs	r3, r3, #1
 800c50c:	441a      	add	r2, r3
	timeout_period_mclks =
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	fbb2 f3f3 	udiv	r3, r2, r3
 800c514:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800c516:	69fb      	ldr	r3, [r7, #28]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3720      	adds	r7, #32
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	10624dd3 	.word	0x10624dd3

0800c524 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	460b      	mov	r3, r1
 800c52e:	807b      	strh	r3, [r7, #2]
 800c530:	4613      	mov	r3, r2
 800c532:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800c534:	2300      	movs	r3, #0
 800c536:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c538:	787b      	ldrb	r3, [r7, #1]
 800c53a:	4619      	mov	r1, r3
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f7ff ff67 	bl	800c410 <VL53L0X_calc_macro_period_ps>
 800c542:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c54a:	4a0a      	ldr	r2, [pc, #40]	; (800c574 <VL53L0X_calc_timeout_us+0x50>)
 800c54c:	fba2 2303 	umull	r2, r3, r2, r3
 800c550:	099b      	lsrs	r3, r3, #6
 800c552:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800c554:	887b      	ldrh	r3, [r7, #2]
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	fb02 f303 	mul.w	r3, r2, r3
 800c55c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800c560:	4a04      	ldr	r2, [pc, #16]	; (800c574 <VL53L0X_calc_timeout_us+0x50>)
 800c562:	fba2 2303 	umull	r2, r3, r2, r3
 800c566:	099b      	lsrs	r3, r3, #6
 800c568:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800c56a:	697b      	ldr	r3, [r7, #20]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3718      	adds	r7, #24
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	10624dd3 	.word	0x10624dd3

0800c578 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b08c      	sub	sp, #48	; 0x30
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	460b      	mov	r3, r1
 800c582:	607a      	str	r2, [r7, #4]
 800c584:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c586:	2300      	movs	r3, #0
 800c588:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800c596:	2300      	movs	r3, #0
 800c598:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c59e:	7afb      	ldrb	r3, [r7, #11]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d005      	beq.n	800c5b0 <get_sequence_step_timeout+0x38>
 800c5a4:	7afb      	ldrb	r3, [r7, #11]
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d002      	beq.n	800c5b0 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c5aa:	7afb      	ldrb	r3, [r7, #11]
 800c5ac:	2b02      	cmp	r3, #2
 800c5ae:	d128      	bne.n	800c602 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c5b0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	2100      	movs	r1, #0
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f7fd fa7d 	bl	8009ab8 <VL53L0X_GetVcselPulsePeriod>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800c5c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d109      	bne.n	800c5e0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800c5cc:	f107 0320 	add.w	r3, r7, #32
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	2146      	movs	r1, #70	; 0x46
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f001 fd8b 	bl	800e0f0 <VL53L0X_RdByte>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800c5e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7ff ff5c 	bl	800c4a4 <VL53L0X_decode_timeout>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c5f0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c5f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	68f8      	ldr	r0, [r7, #12]
 800c5fa:	f7ff ff93 	bl	800c524 <VL53L0X_calc_timeout_us>
 800c5fe:	62b8      	str	r0, [r7, #40]	; 0x28
 800c600:	e092      	b.n	800c728 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c602:	7afb      	ldrb	r3, [r7, #11]
 800c604:	2b03      	cmp	r3, #3
 800c606:	d135      	bne.n	800c674 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c608:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c60c:	461a      	mov	r2, r3
 800c60e:	2100      	movs	r1, #0
 800c610:	68f8      	ldr	r0, [r7, #12]
 800c612:	f7fd fa51 	bl	8009ab8 <VL53L0X_GetVcselPulsePeriod>
 800c616:	4603      	mov	r3, r0
 800c618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c61c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c620:	2b00      	cmp	r3, #0
 800c622:	f040 8081 	bne.w	800c728 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c626:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c62a:	461a      	mov	r2, r3
 800c62c:	2100      	movs	r1, #0
 800c62e:	68f8      	ldr	r0, [r7, #12]
 800c630:	f7fd fa42 	bl	8009ab8 <VL53L0X_GetVcselPulsePeriod>
 800c634:	4603      	mov	r3, r0
 800c636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800c63a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d109      	bne.n	800c656 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800c642:	f107 031e 	add.w	r3, r7, #30
 800c646:	461a      	mov	r2, r3
 800c648:	2151      	movs	r1, #81	; 0x51
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f001 fd7a 	bl	800e144 <VL53L0X_RdWord>
 800c650:	4603      	mov	r3, r0
 800c652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c656:	8bfb      	ldrh	r3, [r7, #30]
 800c658:	4618      	mov	r0, r3
 800c65a:	f7ff ff23 	bl	800c4a4 <VL53L0X_decode_timeout>
 800c65e:	4603      	mov	r3, r0
 800c660:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c662:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c666:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c668:	4619      	mov	r1, r3
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f7ff ff5a 	bl	800c524 <VL53L0X_calc_timeout_us>
 800c670:	62b8      	str	r0, [r7, #40]	; 0x28
 800c672:	e059      	b.n	800c728 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c674:	7afb      	ldrb	r3, [r7, #11]
 800c676:	2b04      	cmp	r3, #4
 800c678:	d156      	bne.n	800c728 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c67a:	f107 0314 	add.w	r3, r7, #20
 800c67e:	4619      	mov	r1, r3
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f7fd fb25 	bl	8009cd0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800c686:	2300      	movs	r3, #0
 800c688:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800c68a:	7dfb      	ldrb	r3, [r7, #23]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d01d      	beq.n	800c6cc <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c690:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c694:	461a      	mov	r2, r3
 800c696:	2100      	movs	r1, #0
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	f7fd fa0d 	bl	8009ab8 <VL53L0X_GetVcselPulsePeriod>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800c6a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d10f      	bne.n	800c6cc <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800c6ac:	f107 031e 	add.w	r3, r7, #30
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	2151      	movs	r1, #81	; 0x51
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f001 fd45 	bl	800e144 <VL53L0X_RdWord>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c6c0:	8bfb      	ldrh	r3, [r7, #30]
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7ff feee 	bl	800c4a4 <VL53L0X_decode_timeout>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c6cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d109      	bne.n	800c6e8 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c6d4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c6d8:	461a      	mov	r2, r3
 800c6da:	2101      	movs	r1, #1
 800c6dc:	68f8      	ldr	r0, [r7, #12]
 800c6de:	f7fd f9eb 	bl	8009ab8 <VL53L0X_GetVcselPulsePeriod>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c6e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d10f      	bne.n	800c710 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800c6f0:	f107 031c 	add.w	r3, r7, #28
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	2171      	movs	r1, #113	; 0x71
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f001 fd23 	bl	800e144 <VL53L0X_RdWord>
 800c6fe:	4603      	mov	r3, r0
 800c700:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c704:	8bbb      	ldrh	r3, [r7, #28]
 800c706:	4618      	mov	r0, r3
 800c708:	f7ff fecc 	bl	800c4a4 <VL53L0X_decode_timeout>
 800c70c:	4603      	mov	r3, r0
 800c70e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800c710:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c712:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c714:	1ad3      	subs	r3, r2, r3
 800c716:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c718:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c71c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c71e:	4619      	mov	r1, r3
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	f7ff feff 	bl	800c524 <VL53L0X_calc_timeout_us>
 800c726:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c72c:	601a      	str	r2, [r3, #0]

	return Status;
 800c72e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c732:	4618      	mov	r0, r3
 800c734:	3730      	adds	r7, #48	; 0x30
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b08a      	sub	sp, #40	; 0x28
 800c73e:	af00      	add	r7, sp, #0
 800c740:	60f8      	str	r0, [r7, #12]
 800c742:	460b      	mov	r3, r1
 800c744:	607a      	str	r2, [r7, #4]
 800c746:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c748:	2300      	movs	r3, #0
 800c74a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c74e:	7afb      	ldrb	r3, [r7, #11]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d005      	beq.n	800c760 <set_sequence_step_timeout+0x26>
 800c754:	7afb      	ldrb	r3, [r7, #11]
 800c756:	2b01      	cmp	r3, #1
 800c758:	d002      	beq.n	800c760 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c75a:	7afb      	ldrb	r3, [r7, #11]
 800c75c:	2b02      	cmp	r3, #2
 800c75e:	d138      	bne.n	800c7d2 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c760:	f107 031b 	add.w	r3, r7, #27
 800c764:	461a      	mov	r2, r3
 800c766:	2100      	movs	r1, #0
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	f7fd f9a5 	bl	8009ab8 <VL53L0X_GetVcselPulsePeriod>
 800c76e:	4603      	mov	r3, r0
 800c770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800c774:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d11a      	bne.n	800c7b2 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800c77c:	7efb      	ldrb	r3, [r7, #27]
 800c77e:	461a      	mov	r2, r3
 800c780:	6879      	ldr	r1, [r7, #4]
 800c782:	68f8      	ldr	r0, [r7, #12]
 800c784:	f7ff fea4 	bl	800c4d0 <VL53L0X_calc_timeout_mclks>
 800c788:	4603      	mov	r3, r0
 800c78a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800c78c:	8bbb      	ldrh	r3, [r7, #28]
 800c78e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c792:	d903      	bls.n	800c79c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800c794:	23ff      	movs	r3, #255	; 0xff
 800c796:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c79a:	e004      	b.n	800c7a6 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800c79c:	8bbb      	ldrh	r3, [r7, #28]
 800c79e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800c7a0:	3b01      	subs	r3, #1
 800c7a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c7a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c7aa:	b29a      	uxth	r2, r3
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c7b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	f040 80ab 	bne.w	800c912 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800c7bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	2146      	movs	r1, #70	; 0x46
 800c7c4:	68f8      	ldr	r0, [r7, #12]
 800c7c6:	f001 fc11 	bl	800dfec <VL53L0X_WrByte>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800c7d0:	e09f      	b.n	800c912 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c7d2:	7afb      	ldrb	r3, [r7, #11]
 800c7d4:	2b03      	cmp	r3, #3
 800c7d6:	d135      	bne.n	800c844 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800c7d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d11b      	bne.n	800c818 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c7e0:	f107 031b 	add.w	r3, r7, #27
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	68f8      	ldr	r0, [r7, #12]
 800c7ea:	f7fd f965 	bl	8009ab8 <VL53L0X_GetVcselPulsePeriod>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c7f4:	7efb      	ldrb	r3, [r7, #27]
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	6879      	ldr	r1, [r7, #4]
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f7ff fe68 	bl	800c4d0 <VL53L0X_calc_timeout_mclks>
 800c800:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800c802:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800c804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c806:	4618      	mov	r0, r3
 800c808:	f7ff fe20 	bl	800c44c <VL53L0X_encode_timeout>
 800c80c:	4603      	mov	r3, r0
 800c80e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c810:	8b3a      	ldrh	r2, [r7, #24]
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c818:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d108      	bne.n	800c832 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800c820:	8b3b      	ldrh	r3, [r7, #24]
 800c822:	461a      	mov	r2, r3
 800c824:	2151      	movs	r1, #81	; 0x51
 800c826:	68f8      	ldr	r0, [r7, #12]
 800c828:	f001 fc04 	bl	800e034 <VL53L0X_WrWord>
 800c82c:	4603      	mov	r3, r0
 800c82e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c832:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c836:	2b00      	cmp	r3, #0
 800c838:	d16b      	bne.n	800c912 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800c842:	e066      	b.n	800c912 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c844:	7afb      	ldrb	r3, [r7, #11]
 800c846:	2b04      	cmp	r3, #4
 800c848:	d160      	bne.n	800c90c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800c84a:	f107 0310 	add.w	r3, r7, #16
 800c84e:	4619      	mov	r1, r3
 800c850:	68f8      	ldr	r0, [r7, #12]
 800c852:	f7fd fa3d 	bl	8009cd0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800c856:	2300      	movs	r3, #0
 800c858:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800c85a:	7cfb      	ldrb	r3, [r7, #19]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d01d      	beq.n	800c89c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c860:	f107 031b 	add.w	r3, r7, #27
 800c864:	461a      	mov	r2, r3
 800c866:	2100      	movs	r1, #0
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f7fd f925 	bl	8009ab8 <VL53L0X_GetVcselPulsePeriod>
 800c86e:	4603      	mov	r3, r0
 800c870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800c874:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d10f      	bne.n	800c89c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800c87c:	f107 0318 	add.w	r3, r7, #24
 800c880:	461a      	mov	r2, r3
 800c882:	2151      	movs	r1, #81	; 0x51
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f001 fc5d 	bl	800e144 <VL53L0X_RdWord>
 800c88a:	4603      	mov	r3, r0
 800c88c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800c890:	8b3b      	ldrh	r3, [r7, #24]
 800c892:	4618      	mov	r0, r3
 800c894:	f7ff fe06 	bl	800c4a4 <VL53L0X_decode_timeout>
 800c898:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800c89a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800c89c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d109      	bne.n	800c8b8 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c8a4:	f107 031b 	add.w	r3, r7, #27
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	2101      	movs	r1, #1
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f7fd f903 	bl	8009ab8 <VL53L0X_GetVcselPulsePeriod>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800c8b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d128      	bne.n	800c912 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c8c0:	7efb      	ldrb	r3, [r7, #27]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	6879      	ldr	r1, [r7, #4]
 800c8c6:	68f8      	ldr	r0, [r7, #12]
 800c8c8:	f7ff fe02 	bl	800c4d0 <VL53L0X_calc_timeout_mclks>
 800c8cc:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800c8ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8d0:	6a3a      	ldr	r2, [r7, #32]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800c8d6:	6a38      	ldr	r0, [r7, #32]
 800c8d8:	f7ff fdb8 	bl	800c44c <VL53L0X_encode_timeout>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800c8e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d108      	bne.n	800c8fa <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800c8e8:	8bfb      	ldrh	r3, [r7, #30]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	2171      	movs	r1, #113	; 0x71
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	f001 fba0 	bl	800e034 <VL53L0X_WrWord>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800c8fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d107      	bne.n	800c912 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800c90a:	e002      	b.n	800c912 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c90c:	23fc      	movs	r3, #252	; 0xfc
 800c90e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800c912:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c916:	4618      	mov	r0, r3
 800c918:	3728      	adds	r7, #40	; 0x28
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b08a      	sub	sp, #40	; 0x28
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	460b      	mov	r3, r1
 800c928:	70fb      	strb	r3, [r7, #3]
 800c92a:	4613      	mov	r3, r2
 800c92c:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c92e:	2300      	movs	r3, #0
 800c930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800c934:	230c      	movs	r3, #12
 800c936:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800c93a:	2312      	movs	r3, #18
 800c93c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800c940:	2308      	movs	r3, #8
 800c942:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800c946:	230e      	movs	r3, #14
 800c948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800c94c:	2300      	movs	r3, #0
 800c94e:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800c950:	78bb      	ldrb	r3, [r7, #2]
 800c952:	f003 0301 	and.w	r3, r3, #1
 800c956:	b2db      	uxtb	r3, r3
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d003      	beq.n	800c964 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c95c:	23fc      	movs	r3, #252	; 0xfc
 800c95e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c962:	e020      	b.n	800c9a6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800c964:	78fb      	ldrb	r3, [r7, #3]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d10d      	bne.n	800c986 <VL53L0X_set_vcsel_pulse_period+0x68>
 800c96a:	78ba      	ldrb	r2, [r7, #2]
 800c96c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c970:	429a      	cmp	r2, r3
 800c972:	d304      	bcc.n	800c97e <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800c974:	78ba      	ldrb	r2, [r7, #2]
 800c976:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d903      	bls.n	800c986 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c97e:	23fc      	movs	r3, #252	; 0xfc
 800c980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c984:	e00f      	b.n	800c9a6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800c986:	78fb      	ldrb	r3, [r7, #3]
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d10c      	bne.n	800c9a6 <VL53L0X_set_vcsel_pulse_period+0x88>
 800c98c:	78ba      	ldrb	r2, [r7, #2]
 800c98e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c992:	429a      	cmp	r2, r3
 800c994:	d304      	bcc.n	800c9a0 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800c996:	78ba      	ldrb	r2, [r7, #2]
 800c998:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d902      	bls.n	800c9a6 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c9a0:	23fc      	movs	r3, #252	; 0xfc
 800c9a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800c9a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d002      	beq.n	800c9b4 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800c9ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c9b2:	e239      	b.n	800ce28 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800c9b4:	78fb      	ldrb	r3, [r7, #3]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d150      	bne.n	800ca5c <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800c9ba:	78bb      	ldrb	r3, [r7, #2]
 800c9bc:	2b0c      	cmp	r3, #12
 800c9be:	d110      	bne.n	800c9e2 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800c9c0:	2218      	movs	r2, #24
 800c9c2:	2157      	movs	r1, #87	; 0x57
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f001 fb11 	bl	800dfec <VL53L0X_WrByte>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800c9d0:	2208      	movs	r2, #8
 800c9d2:	2156      	movs	r1, #86	; 0x56
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f001 fb09 	bl	800dfec <VL53L0X_WrByte>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9e0:	e17f      	b.n	800cce2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800c9e2:	78bb      	ldrb	r3, [r7, #2]
 800c9e4:	2b0e      	cmp	r3, #14
 800c9e6:	d110      	bne.n	800ca0a <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800c9e8:	2230      	movs	r2, #48	; 0x30
 800c9ea:	2157      	movs	r1, #87	; 0x57
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f001 fafd 	bl	800dfec <VL53L0X_WrByte>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800c9f8:	2208      	movs	r2, #8
 800c9fa:	2156      	movs	r1, #86	; 0x56
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f001 faf5 	bl	800dfec <VL53L0X_WrByte>
 800ca02:	4603      	mov	r3, r0
 800ca04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca08:	e16b      	b.n	800cce2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800ca0a:	78bb      	ldrb	r3, [r7, #2]
 800ca0c:	2b10      	cmp	r3, #16
 800ca0e:	d110      	bne.n	800ca32 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800ca10:	2240      	movs	r2, #64	; 0x40
 800ca12:	2157      	movs	r1, #87	; 0x57
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f001 fae9 	bl	800dfec <VL53L0X_WrByte>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800ca20:	2208      	movs	r2, #8
 800ca22:	2156      	movs	r1, #86	; 0x56
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f001 fae1 	bl	800dfec <VL53L0X_WrByte>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca30:	e157      	b.n	800cce2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800ca32:	78bb      	ldrb	r3, [r7, #2]
 800ca34:	2b12      	cmp	r3, #18
 800ca36:	f040 8154 	bne.w	800cce2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800ca3a:	2250      	movs	r2, #80	; 0x50
 800ca3c:	2157      	movs	r1, #87	; 0x57
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f001 fad4 	bl	800dfec <VL53L0X_WrByte>
 800ca44:	4603      	mov	r3, r0
 800ca46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800ca4a:	2208      	movs	r2, #8
 800ca4c:	2156      	movs	r1, #86	; 0x56
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f001 facc 	bl	800dfec <VL53L0X_WrByte>
 800ca54:	4603      	mov	r3, r0
 800ca56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca5a:	e142      	b.n	800cce2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800ca5c:	78fb      	ldrb	r3, [r7, #3]
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	f040 813f 	bne.w	800cce2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800ca64:	78bb      	ldrb	r3, [r7, #2]
 800ca66:	2b08      	cmp	r3, #8
 800ca68:	d14c      	bne.n	800cb04 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800ca6a:	2210      	movs	r2, #16
 800ca6c:	2148      	movs	r1, #72	; 0x48
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f001 fabc 	bl	800dfec <VL53L0X_WrByte>
 800ca74:	4603      	mov	r3, r0
 800ca76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800ca7a:	2208      	movs	r2, #8
 800ca7c:	2147      	movs	r1, #71	; 0x47
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f001 fab4 	bl	800dfec <VL53L0X_WrByte>
 800ca84:	4603      	mov	r3, r0
 800ca86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ca8a:	2202      	movs	r2, #2
 800ca8c:	2132      	movs	r1, #50	; 0x32
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f001 faac 	bl	800dfec <VL53L0X_WrByte>
 800ca94:	4603      	mov	r3, r0
 800ca96:	461a      	mov	r2, r3
 800ca98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800caa2:	220c      	movs	r2, #12
 800caa4:	2130      	movs	r1, #48	; 0x30
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f001 faa0 	bl	800dfec <VL53L0X_WrByte>
 800caac:	4603      	mov	r3, r0
 800caae:	461a      	mov	r2, r3
 800cab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cab4:	4313      	orrs	r3, r2
 800cab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800caba:	2201      	movs	r2, #1
 800cabc:	21ff      	movs	r1, #255	; 0xff
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f001 fa94 	bl	800dfec <VL53L0X_WrByte>
 800cac4:	4603      	mov	r3, r0
 800cac6:	461a      	mov	r2, r3
 800cac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cacc:	4313      	orrs	r3, r2
 800cace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800cad2:	2230      	movs	r2, #48	; 0x30
 800cad4:	2130      	movs	r1, #48	; 0x30
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f001 fa88 	bl	800dfec <VL53L0X_WrByte>
 800cadc:	4603      	mov	r3, r0
 800cade:	461a      	mov	r2, r3
 800cae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cae4:	4313      	orrs	r3, r2
 800cae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800caea:	2200      	movs	r2, #0
 800caec:	21ff      	movs	r1, #255	; 0xff
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f001 fa7c 	bl	800dfec <VL53L0X_WrByte>
 800caf4:	4603      	mov	r3, r0
 800caf6:	461a      	mov	r2, r3
 800caf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cafc:	4313      	orrs	r3, r2
 800cafe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb02:	e0ee      	b.n	800cce2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800cb04:	78bb      	ldrb	r3, [r7, #2]
 800cb06:	2b0a      	cmp	r3, #10
 800cb08:	d14c      	bne.n	800cba4 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800cb0a:	2228      	movs	r2, #40	; 0x28
 800cb0c:	2148      	movs	r1, #72	; 0x48
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f001 fa6c 	bl	800dfec <VL53L0X_WrByte>
 800cb14:	4603      	mov	r3, r0
 800cb16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800cb1a:	2208      	movs	r2, #8
 800cb1c:	2147      	movs	r1, #71	; 0x47
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f001 fa64 	bl	800dfec <VL53L0X_WrByte>
 800cb24:	4603      	mov	r3, r0
 800cb26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800cb2a:	2203      	movs	r2, #3
 800cb2c:	2132      	movs	r1, #50	; 0x32
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f001 fa5c 	bl	800dfec <VL53L0X_WrByte>
 800cb34:	4603      	mov	r3, r0
 800cb36:	461a      	mov	r2, r3
 800cb38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800cb42:	2209      	movs	r2, #9
 800cb44:	2130      	movs	r1, #48	; 0x30
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f001 fa50 	bl	800dfec <VL53L0X_WrByte>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	461a      	mov	r2, r3
 800cb50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb54:	4313      	orrs	r3, r2
 800cb56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	21ff      	movs	r1, #255	; 0xff
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f001 fa44 	bl	800dfec <VL53L0X_WrByte>
 800cb64:	4603      	mov	r3, r0
 800cb66:	461a      	mov	r2, r3
 800cb68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800cb72:	2220      	movs	r2, #32
 800cb74:	2130      	movs	r1, #48	; 0x30
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f001 fa38 	bl	800dfec <VL53L0X_WrByte>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	461a      	mov	r2, r3
 800cb80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb84:	4313      	orrs	r3, r2
 800cb86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	21ff      	movs	r1, #255	; 0xff
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f001 fa2c 	bl	800dfec <VL53L0X_WrByte>
 800cb94:	4603      	mov	r3, r0
 800cb96:	461a      	mov	r2, r3
 800cb98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cba2:	e09e      	b.n	800cce2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800cba4:	78bb      	ldrb	r3, [r7, #2]
 800cba6:	2b0c      	cmp	r3, #12
 800cba8:	d14c      	bne.n	800cc44 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800cbaa:	2238      	movs	r2, #56	; 0x38
 800cbac:	2148      	movs	r1, #72	; 0x48
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f001 fa1c 	bl	800dfec <VL53L0X_WrByte>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800cbba:	2208      	movs	r2, #8
 800cbbc:	2147      	movs	r1, #71	; 0x47
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f001 fa14 	bl	800dfec <VL53L0X_WrByte>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800cbca:	2203      	movs	r2, #3
 800cbcc:	2132      	movs	r1, #50	; 0x32
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f001 fa0c 	bl	800dfec <VL53L0X_WrByte>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800cbe2:	2208      	movs	r2, #8
 800cbe4:	2130      	movs	r1, #48	; 0x30
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f001 fa00 	bl	800dfec <VL53L0X_WrByte>
 800cbec:	4603      	mov	r3, r0
 800cbee:	461a      	mov	r2, r3
 800cbf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	21ff      	movs	r1, #255	; 0xff
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f001 f9f4 	bl	800dfec <VL53L0X_WrByte>
 800cc04:	4603      	mov	r3, r0
 800cc06:	461a      	mov	r2, r3
 800cc08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800cc12:	2220      	movs	r2, #32
 800cc14:	2130      	movs	r1, #48	; 0x30
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f001 f9e8 	bl	800dfec <VL53L0X_WrByte>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	461a      	mov	r2, r3
 800cc20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc24:	4313      	orrs	r3, r2
 800cc26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	21ff      	movs	r1, #255	; 0xff
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f001 f9dc 	bl	800dfec <VL53L0X_WrByte>
 800cc34:	4603      	mov	r3, r0
 800cc36:	461a      	mov	r2, r3
 800cc38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc42:	e04e      	b.n	800cce2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800cc44:	78bb      	ldrb	r3, [r7, #2]
 800cc46:	2b0e      	cmp	r3, #14
 800cc48:	d14b      	bne.n	800cce2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800cc4a:	2248      	movs	r2, #72	; 0x48
 800cc4c:	2148      	movs	r1, #72	; 0x48
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f001 f9cc 	bl	800dfec <VL53L0X_WrByte>
 800cc54:	4603      	mov	r3, r0
 800cc56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800cc5a:	2208      	movs	r2, #8
 800cc5c:	2147      	movs	r1, #71	; 0x47
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f001 f9c4 	bl	800dfec <VL53L0X_WrByte>
 800cc64:	4603      	mov	r3, r0
 800cc66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800cc6a:	2203      	movs	r2, #3
 800cc6c:	2132      	movs	r1, #50	; 0x32
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f001 f9bc 	bl	800dfec <VL53L0X_WrByte>
 800cc74:	4603      	mov	r3, r0
 800cc76:	461a      	mov	r2, r3
 800cc78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800cc82:	2207      	movs	r2, #7
 800cc84:	2130      	movs	r1, #48	; 0x30
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f001 f9b0 	bl	800dfec <VL53L0X_WrByte>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	461a      	mov	r2, r3
 800cc90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc94:	4313      	orrs	r3, r2
 800cc96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	21ff      	movs	r1, #255	; 0xff
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f001 f9a4 	bl	800dfec <VL53L0X_WrByte>
 800cca4:	4603      	mov	r3, r0
 800cca6:	461a      	mov	r2, r3
 800cca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccac:	4313      	orrs	r3, r2
 800ccae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ccb2:	2220      	movs	r2, #32
 800ccb4:	2130      	movs	r1, #48	; 0x30
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f001 f998 	bl	800dfec <VL53L0X_WrByte>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ccca:	2200      	movs	r2, #0
 800cccc:	21ff      	movs	r1, #255	; 0xff
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f001 f98c 	bl	800dfec <VL53L0X_WrByte>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800cce2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d17f      	bne.n	800cdea <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800ccea:	78bb      	ldrb	r3, [r7, #2]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7fe fe38 	bl	800b962 <VL53L0X_encode_vcsel_period>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800ccf8:	78fb      	ldrb	r3, [r7, #3]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d002      	beq.n	800cd04 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d045      	beq.n	800cd8e <VL53L0X_set_vcsel_pulse_period+0x470>
 800cd02:	e06e      	b.n	800cde2 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800cd04:	f107 0314 	add.w	r3, r7, #20
 800cd08:	461a      	mov	r2, r3
 800cd0a:	2103      	movs	r1, #3
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f7ff fc33 	bl	800c578 <get_sequence_step_timeout>
 800cd12:	4603      	mov	r3, r0
 800cd14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800cd18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d109      	bne.n	800cd34 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800cd20:	f107 0310 	add.w	r3, r7, #16
 800cd24:	461a      	mov	r2, r3
 800cd26:	2102      	movs	r1, #2
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f7ff fc25 	bl	800c578 <get_sequence_step_timeout>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800cd34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d109      	bne.n	800cd50 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800cd3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cd40:	461a      	mov	r2, r3
 800cd42:	2150      	movs	r1, #80	; 0x50
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f001 f951 	bl	800dfec <VL53L0X_WrByte>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800cd50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d108      	bne.n	800cd6a <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	2103      	movs	r1, #3
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f7ff fceb 	bl	800c73a <set_sequence_step_timeout>
 800cd64:	4603      	mov	r3, r0
 800cd66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800cd6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d108      	bne.n	800cd84 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	461a      	mov	r2, r3
 800cd76:	2102      	movs	r1, #2
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f7ff fcde 	bl	800c73a <set_sequence_step_timeout>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	78ba      	ldrb	r2, [r7, #2]
 800cd88:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800cd8c:	e02e      	b.n	800cdec <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800cd8e:	f107 0318 	add.w	r3, r7, #24
 800cd92:	461a      	mov	r2, r3
 800cd94:	2104      	movs	r1, #4
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f7ff fbee 	bl	800c578 <get_sequence_step_timeout>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800cda2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d109      	bne.n	800cdbe <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800cdaa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cdae:	461a      	mov	r2, r3
 800cdb0:	2170      	movs	r1, #112	; 0x70
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f001 f91a 	bl	800dfec <VL53L0X_WrByte>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800cdbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d108      	bne.n	800cdd8 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	461a      	mov	r2, r3
 800cdca:	2104      	movs	r1, #4
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f7ff fcb4 	bl	800c73a <set_sequence_step_timeout>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	78ba      	ldrb	r2, [r7, #2]
 800cddc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800cde0:	e004      	b.n	800cdec <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cde2:	23fc      	movs	r3, #252	; 0xfc
 800cde4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cde8:	e000      	b.n	800cdec <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800cdea:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800cdec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d109      	bne.n	800ce08 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	695b      	ldr	r3, [r3, #20]
 800cdf8:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800cdfa:	69f9      	ldr	r1, [r7, #28]
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f7fc fe1d 	bl	8009a3c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800ce02:	4603      	mov	r3, r0
 800ce04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800ce08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d109      	bne.n	800ce24 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800ce10:	f107 010f 	add.w	r1, r7, #15
 800ce14:	2301      	movs	r3, #1
 800ce16:	2200      	movs	r2, #0
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7fe fcbd 	bl	800b798 <VL53L0X_perform_phase_calibration>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800ce24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3728      	adds	r7, #40	; 0x28
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b086      	sub	sp, #24
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	460b      	mov	r3, r1
 800ce3a:	607a      	str	r2, [r7, #4]
 800ce3c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800ce42:	7afb      	ldrb	r3, [r7, #11]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d002      	beq.n	800ce4e <VL53L0X_get_vcsel_pulse_period+0x1e>
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d00a      	beq.n	800ce62 <VL53L0X_get_vcsel_pulse_period+0x32>
 800ce4c:	e013      	b.n	800ce76 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ce4e:	f107 0316 	add.w	r3, r7, #22
 800ce52:	461a      	mov	r2, r3
 800ce54:	2150      	movs	r1, #80	; 0x50
 800ce56:	68f8      	ldr	r0, [r7, #12]
 800ce58:	f001 f94a 	bl	800e0f0 <VL53L0X_RdByte>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ce60:	e00b      	b.n	800ce7a <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ce62:	f107 0316 	add.w	r3, r7, #22
 800ce66:	461a      	mov	r2, r3
 800ce68:	2170      	movs	r1, #112	; 0x70
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	f001 f940 	bl	800e0f0 <VL53L0X_RdByte>
 800ce70:	4603      	mov	r3, r0
 800ce72:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ce74:	e001      	b.n	800ce7a <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce76:	23fc      	movs	r3, #252	; 0xfc
 800ce78:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800ce7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d107      	bne.n	800ce92 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ce82:	7dbb      	ldrb	r3, [r7, #22]
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fe fd59 	bl	800b93c <VL53L0X_decode_vcsel_period>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	701a      	strb	r2, [r3, #0]

	return Status;
 800ce92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3718      	adds	r7, #24
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b092      	sub	sp, #72	; 0x48
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
 800cea6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ceae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ceb2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ceb4:	f240 7376 	movw	r3, #1910	; 0x776
 800ceb8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800ceba:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800cebe:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800cec0:	f44f 7325 	mov.w	r3, #660	; 0x294
 800cec4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800cec6:	f240 234e 	movw	r3, #590	; 0x24e
 800ceca:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800cecc:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ced0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ced2:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ced6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ced8:	f240 2326 	movw	r3, #550	; 0x226
 800cedc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800cede:	2300      	movs	r3, #0
 800cee0:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800cee2:	f644 6320 	movw	r3, #20000	; 0x4e20
 800cee6:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800cee8:	2300      	movs	r3, #0
 800ceea:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800ceec:	683a      	ldr	r2, [r7, #0]
 800ceee:	6a3b      	ldr	r3, [r7, #32]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d205      	bcs.n	800cf00 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cef4:	23fc      	movs	r3, #252	; 0xfc
 800cef6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800cefa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cefe:	e0aa      	b.n	800d056 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800cf00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf04:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800cf06:	683a      	ldr	r2, [r7, #0]
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800cf0c:	f107 0314 	add.w	r3, r7, #20
 800cf10:	4619      	mov	r1, r3
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7fc fedc 	bl	8009cd0 <VL53L0X_GetSequenceStepEnables>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800cf1e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d15b      	bne.n	800cfde <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800cf26:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d105      	bne.n	800cf38 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800cf2c:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d102      	bne.n	800cf38 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800cf32:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d052      	beq.n	800cfde <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800cf38:	f107 0310 	add.w	r3, r7, #16
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	2102      	movs	r1, #2
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f7ff fb19 	bl	800c578 <get_sequence_step_timeout>
 800cf46:	4603      	mov	r3, r0
 800cf48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800cf4c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d002      	beq.n	800cf5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800cf54:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cf58:	e07d      	b.n	800d056 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800cf5a:	7d3b      	ldrb	r3, [r7, #20]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00f      	beq.n	800cf80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800cf60:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800cf62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf64:	4413      	add	r3, r2
 800cf66:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800cf68:	69fa      	ldr	r2, [r7, #28]
 800cf6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d204      	bcs.n	800cf7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800cf70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	1ad3      	subs	r3, r2, r3
 800cf76:	643b      	str	r3, [r7, #64]	; 0x40
 800cf78:	e002      	b.n	800cf80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cf7a:	23fc      	movs	r3, #252	; 0xfc
 800cf7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800cf80:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d002      	beq.n	800cf8e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800cf88:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cf8c:	e063      	b.n	800d056 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800cf8e:	7dbb      	ldrb	r3, [r7, #22]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d011      	beq.n	800cfb8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800cf94:	693a      	ldr	r2, [r7, #16]
 800cf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf98:	4413      	add	r3, r2
 800cf9a:	005b      	lsls	r3, r3, #1
 800cf9c:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cf9e:	69fa      	ldr	r2, [r7, #28]
 800cfa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d204      	bcs.n	800cfb0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800cfa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	1ad3      	subs	r3, r2, r3
 800cfac:	643b      	str	r3, [r7, #64]	; 0x40
 800cfae:	e016      	b.n	800cfde <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cfb0:	23fc      	movs	r3, #252	; 0xfc
 800cfb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cfb6:	e012      	b.n	800cfde <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800cfb8:	7d7b      	ldrb	r3, [r7, #21]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d00f      	beq.n	800cfde <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfc2:	4413      	add	r3, r2
 800cfc4:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cfc6:	69fa      	ldr	r2, [r7, #28]
 800cfc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d204      	bcs.n	800cfd8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800cfce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	1ad3      	subs	r3, r2, r3
 800cfd4:	643b      	str	r3, [r7, #64]	; 0x40
 800cfd6:	e002      	b.n	800cfde <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cfd8:	23fc      	movs	r3, #252	; 0xfc
 800cfda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800cfde:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d002      	beq.n	800cfec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800cfe6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cfea:	e034      	b.n	800d056 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800cfec:	7dfb      	ldrb	r3, [r7, #23]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d019      	beq.n	800d026 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800cff2:	f107 030c 	add.w	r3, r7, #12
 800cff6:	461a      	mov	r2, r3
 800cff8:	2103      	movs	r1, #3
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f7ff fabc 	bl	800c578 <get_sequence_step_timeout>
 800d000:	4603      	mov	r3, r0
 800d002:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d00a:	4413      	add	r3, r2
 800d00c:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800d00e:	69fa      	ldr	r2, [r7, #28]
 800d010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d012:	429a      	cmp	r2, r3
 800d014:	d204      	bcs.n	800d020 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800d016:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	1ad3      	subs	r3, r2, r3
 800d01c:	643b      	str	r3, [r7, #64]	; 0x40
 800d01e:	e002      	b.n	800d026 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d020:	23fc      	movs	r3, #252	; 0xfc
 800d022:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800d026:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d111      	bne.n	800d052 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800d02e:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00e      	beq.n	800d052 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800d034:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d038:	1ad3      	subs	r3, r2, r3
 800d03a:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800d03c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d03e:	2104      	movs	r1, #4
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f7ff fb7a 	bl	800c73a <set_sequence_step_timeout>
 800d046:	4603      	mov	r3, r0
 800d048:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	683a      	ldr	r2, [r7, #0]
 800d050:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800d052:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800d056:	4618      	mov	r0, r3
 800d058:	3748      	adds	r7, #72	; 0x48
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b090      	sub	sp, #64	; 0x40
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
 800d066:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d068:	2300      	movs	r3, #0
 800d06a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800d06e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d072:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800d074:	f240 7376 	movw	r3, #1910	; 0x776
 800d078:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800d07a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800d07e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800d080:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d084:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800d086:	f240 234e 	movw	r3, #590	; 0x24e
 800d08a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800d08c:	f240 23b2 	movw	r3, #690	; 0x2b2
 800d090:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800d092:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d096:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800d098:	f240 2326 	movw	r3, #550	; 0x226
 800d09c:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800d0a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a6:	441a      	add	r2, r3
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d0ac:	f107 0318 	add.w	r3, r7, #24
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f7fc fe0c 	bl	8009cd0 <VL53L0X_GetSequenceStepEnables>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800d0be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d002      	beq.n	800d0cc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800d0c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d0ca:	e075      	b.n	800d1b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800d0cc:	7e3b      	ldrb	r3, [r7, #24]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d105      	bne.n	800d0de <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800d0d2:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d102      	bne.n	800d0de <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800d0d8:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d030      	beq.n	800d140 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800d0de:	f107 0310 	add.w	r3, r7, #16
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	2102      	movs	r1, #2
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f7ff fa46 	bl	800c578 <get_sequence_step_timeout>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800d0f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d122      	bne.n	800d140 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800d0fa:	7e3b      	ldrb	r3, [r7, #24]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d007      	beq.n	800d110 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800d104:	6939      	ldr	r1, [r7, #16]
 800d106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d108:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d10a:	441a      	add	r2, r3
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800d110:	7ebb      	ldrb	r3, [r7, #26]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d009      	beq.n	800d12a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800d11a:	6939      	ldr	r1, [r7, #16]
 800d11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11e:	440b      	add	r3, r1
 800d120:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d122:	441a      	add	r2, r3
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	601a      	str	r2, [r3, #0]
 800d128:	e00a      	b.n	800d140 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800d12a:	7e7b      	ldrb	r3, [r7, #25]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d007      	beq.n	800d140 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800d134:	6939      	ldr	r1, [r7, #16]
 800d136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d138:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d13a:	441a      	add	r2, r3
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d140:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d144:	2b00      	cmp	r3, #0
 800d146:	d114      	bne.n	800d172 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800d148:	7efb      	ldrb	r3, [r7, #27]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d011      	beq.n	800d172 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800d14e:	f107 030c 	add.w	r3, r7, #12
 800d152:	461a      	mov	r2, r3
 800d154:	2103      	movs	r1, #3
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7ff fa0e 	bl	800c578 <get_sequence_step_timeout>
 800d15c:	4603      	mov	r3, r0
 800d15e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800d166:	68f9      	ldr	r1, [r7, #12]
 800d168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800d16c:	441a      	add	r2, r3
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d172:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d176:	2b00      	cmp	r3, #0
 800d178:	d114      	bne.n	800d1a4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800d17a:	7f3b      	ldrb	r3, [r7, #28]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d011      	beq.n	800d1a4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800d180:	f107 0314 	add.w	r3, r7, #20
 800d184:	461a      	mov	r2, r3
 800d186:	2104      	movs	r1, #4
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f7ff f9f5 	bl	800c578 <get_sequence_step_timeout>
 800d18e:	4603      	mov	r3, r0
 800d190:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800d198:	6979      	ldr	r1, [r7, #20]
 800d19a:	6a3b      	ldr	r3, [r7, #32]
 800d19c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800d19e:	441a      	add	r2, r3
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d1a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d103      	bne.n	800d1b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	681a      	ldr	r2, [r3, #0]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d1b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3740      	adds	r7, #64	; 0x40
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b088      	sub	sp, #32
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800d1d2:	e0c6      	b.n	800d362 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	683a      	ldr	r2, [r7, #0]
 800d1d8:	4413      	add	r3, r2
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	74fb      	strb	r3, [r7, #19]
		Index++;
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800d1e4:	7cfb      	ldrb	r3, [r7, #19]
 800d1e6:	2bff      	cmp	r3, #255	; 0xff
 800d1e8:	f040 808d 	bne.w	800d306 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	683a      	ldr	r2, [r7, #0]
 800d1f0:	4413      	add	r3, r2
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	747b      	strb	r3, [r7, #17]
			Index++;
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800d1fc:	7c7b      	ldrb	r3, [r7, #17]
 800d1fe:	2b03      	cmp	r3, #3
 800d200:	d87e      	bhi.n	800d300 <VL53L0X_load_tuning_settings+0x140>
 800d202:	a201      	add	r2, pc, #4	; (adr r2, 800d208 <VL53L0X_load_tuning_settings+0x48>)
 800d204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d208:	0800d219 	.word	0x0800d219
 800d20c:	0800d253 	.word	0x0800d253
 800d210:	0800d28d 	.word	0x0800d28d
 800d214:	0800d2c7 	.word	0x0800d2c7
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	683a      	ldr	r2, [r7, #0]
 800d21c:	4413      	add	r3, r2
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	743b      	strb	r3, [r7, #16]
				Index++;
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	3301      	adds	r3, #1
 800d226:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	683a      	ldr	r2, [r7, #0]
 800d22c:	4413      	add	r3, r2
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	3301      	adds	r3, #1
 800d236:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d238:	7c3b      	ldrb	r3, [r7, #16]
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	021b      	lsls	r3, r3, #8
 800d23e:	b29a      	uxth	r2, r3
 800d240:	7bfb      	ldrb	r3, [r7, #15]
 800d242:	b29b      	uxth	r3, r3
 800d244:	4413      	add	r3, r2
 800d246:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	89ba      	ldrh	r2, [r7, #12]
 800d24c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800d250:	e087      	b.n	800d362 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	683a      	ldr	r2, [r7, #0]
 800d256:	4413      	add	r3, r2
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	743b      	strb	r3, [r7, #16]
				Index++;
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	3301      	adds	r3, #1
 800d260:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	683a      	ldr	r2, [r7, #0]
 800d266:	4413      	add	r3, r2
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	3301      	adds	r3, #1
 800d270:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d272:	7c3b      	ldrb	r3, [r7, #16]
 800d274:	b29b      	uxth	r3, r3
 800d276:	021b      	lsls	r3, r3, #8
 800d278:	b29a      	uxth	r2, r3
 800d27a:	7bfb      	ldrb	r3, [r7, #15]
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	4413      	add	r3, r2
 800d280:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	89ba      	ldrh	r2, [r7, #12]
 800d286:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800d28a:	e06a      	b.n	800d362 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	683a      	ldr	r2, [r7, #0]
 800d290:	4413      	add	r3, r2
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	743b      	strb	r3, [r7, #16]
				Index++;
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	3301      	adds	r3, #1
 800d29a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	683a      	ldr	r2, [r7, #0]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d2ac:	7c3b      	ldrb	r3, [r7, #16]
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	021b      	lsls	r3, r3, #8
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	7bfb      	ldrb	r3, [r7, #15]
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	4413      	add	r3, r2
 800d2ba:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	89ba      	ldrh	r2, [r7, #12]
 800d2c0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800d2c4:	e04d      	b.n	800d362 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	683a      	ldr	r2, [r7, #0]
 800d2ca:	4413      	add	r3, r2
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	743b      	strb	r3, [r7, #16]
				Index++;
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	683a      	ldr	r2, [r7, #0]
 800d2da:	4413      	add	r3, r2
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d2e6:	7c3b      	ldrb	r3, [r7, #16]
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	021b      	lsls	r3, r3, #8
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	7bfb      	ldrb	r3, [r7, #15]
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	4413      	add	r3, r2
 800d2f4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	89ba      	ldrh	r2, [r7, #12]
 800d2fa:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800d2fe:	e030      	b.n	800d362 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d300:	23fc      	movs	r3, #252	; 0xfc
 800d302:	77fb      	strb	r3, [r7, #31]
 800d304:	e02d      	b.n	800d362 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800d306:	7cfb      	ldrb	r3, [r7, #19]
 800d308:	2b04      	cmp	r3, #4
 800d30a:	d828      	bhi.n	800d35e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	683a      	ldr	r2, [r7, #0]
 800d310:	4413      	add	r3, r2
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	74bb      	strb	r3, [r7, #18]
			Index++;
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	3301      	adds	r3, #1
 800d31a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800d31c:	2300      	movs	r3, #0
 800d31e:	61bb      	str	r3, [r7, #24]
 800d320:	e00f      	b.n	800d342 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	683a      	ldr	r2, [r7, #0]
 800d326:	4413      	add	r3, r2
 800d328:	7819      	ldrb	r1, [r3, #0]
 800d32a:	f107 0208 	add.w	r2, r7, #8
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	4413      	add	r3, r2
 800d332:	460a      	mov	r2, r1
 800d334:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	3301      	adds	r3, #1
 800d33a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800d33c:	69bb      	ldr	r3, [r7, #24]
 800d33e:	3301      	adds	r3, #1
 800d340:	61bb      	str	r3, [r7, #24]
 800d342:	7cfb      	ldrb	r3, [r7, #19]
 800d344:	69ba      	ldr	r2, [r7, #24]
 800d346:	429a      	cmp	r2, r3
 800d348:	dbeb      	blt.n	800d322 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800d34a:	7cfb      	ldrb	r3, [r7, #19]
 800d34c:	f107 0208 	add.w	r2, r7, #8
 800d350:	7cb9      	ldrb	r1, [r7, #18]
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f000 fdee 	bl	800df34 <VL53L0X_WriteMulti>
 800d358:	4603      	mov	r3, r0
 800d35a:	77fb      	strb	r3, [r7, #31]
 800d35c:	e001      	b.n	800d362 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d35e:	23fc      	movs	r3, #252	; 0xfc
 800d360:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	683a      	ldr	r2, [r7, #0]
 800d366:	4413      	add	r3, r2
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d004      	beq.n	800d378 <VL53L0X_load_tuning_settings+0x1b8>
 800d36e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d372:	2b00      	cmp	r3, #0
 800d374:	f43f af2e 	beq.w	800d1d4 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d378:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3720      	adds	r7, #32
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b088      	sub	sp, #32
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d390:	2300      	movs	r3, #0
 800d392:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2200      	movs	r2, #0
 800d398:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800d39a:	f107 0313 	add.w	r3, r7, #19
 800d39e:	4619      	mov	r1, r3
 800d3a0:	68f8      	ldr	r0, [r7, #12]
 800d3a2:	f7fc fd21 	bl	8009de8 <VL53L0X_GetXTalkCompensationEnable>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800d3aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d111      	bne.n	800d3d6 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800d3b2:	7cfb      	ldrb	r3, [r7, #19]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d00e      	beq.n	800d3d6 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6a1b      	ldr	r3, [r3, #32]
 800d3bc:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	8a9b      	ldrh	r3, [r3, #20]
 800d3c2:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800d3c4:	69bb      	ldr	r3, [r7, #24]
 800d3c6:	fb02 f303 	mul.w	r3, r2, r3
 800d3ca:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	3380      	adds	r3, #128	; 0x80
 800d3d0:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800d3d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3720      	adds	r7, #32
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b086      	sub	sp, #24
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	60f8      	str	r0, [r7, #12]
 800d3ea:	60b9      	str	r1, [r7, #8]
 800d3ec:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800d3fa:	f107 0310 	add.w	r3, r7, #16
 800d3fe:	461a      	mov	r2, r3
 800d400:	68b9      	ldr	r1, [r7, #8]
 800d402:	68f8      	ldr	r0, [r7, #12]
 800d404:	f7ff ffbe 	bl	800d384 <VL53L0X_get_total_xtalk_rate>
 800d408:	4603      	mov	r3, r0
 800d40a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800d40c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d105      	bne.n	800d420 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	441a      	add	r2, r3
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	601a      	str	r2, [r3, #0]

	return Status;
 800d420:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d424:	4618      	mov	r0, r3
 800d426:	3718      	adds	r7, #24
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b09a      	sub	sp, #104	; 0x68
 800d430:	af00      	add	r7, sp, #0
 800d432:	60f8      	str	r0, [r7, #12]
 800d434:	60b9      	str	r1, [r7, #8]
 800d436:	607a      	str	r2, [r7, #4]
 800d438:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800d43a:	2312      	movs	r3, #18
 800d43c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800d43e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d442:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800d444:	2342      	movs	r3, #66	; 0x42
 800d446:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800d448:	2306      	movs	r3, #6
 800d44a:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800d44c:	2307      	movs	r3, #7
 800d44e:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d450:	2300      	movs	r3, #0
 800d452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800d45c:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800d464:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800d466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d46a:	fb02 f303 	mul.w	r3, r2, r3
 800d46e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800d470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d472:	3380      	adds	r3, #128	; 0x80
 800d474:	0a1b      	lsrs	r3, r3, #8
 800d476:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800d478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d47a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d47c:	fb02 f303 	mul.w	r3, r2, r3
 800d480:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800d482:	2300      	movs	r3, #0
 800d484:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d01a      	beq.n	800d4c2 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	029b      	lsls	r3, r3, #10
 800d490:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800d496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d498:	4413      	add	r3, r2
 800d49a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800d49c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4a4:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800d4a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d4a8:	4613      	mov	r3, r2
 800d4aa:	005b      	lsls	r3, r3, #1
 800d4ac:	4413      	add	r3, r2
 800d4ae:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800d4b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4b2:	fb03 f303 	mul.w	r3, r3, r3
 800d4b6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800d4b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d4be:	0c1b      	lsrs	r3, r3, #16
 800d4c0:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d4c6:	fb02 f303 	mul.w	r3, r2, r3
 800d4ca:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800d4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d4d2:	0c1b      	lsrs	r3, r3, #16
 800d4d4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800d4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d8:	fb03 f303 	mul.w	r3, r3, r3
 800d4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800d4de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d4e4:	0c1b      	lsrs	r3, r3, #16
 800d4e6:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800d4e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4ea:	085a      	lsrs	r2, r3, #1
 800d4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ee:	441a      	add	r2, r3
 800d4f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4f6:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800d4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4fc:	fb02 f303 	mul.w	r3, r2, r3
 800d500:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800d502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d508:	d302      	bcc.n	800d510 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800d50a:	4b54      	ldr	r3, [pc, #336]	; (800d65c <VL53L0X_calc_dmax+0x230>)
 800d50c:	663b      	str	r3, [r7, #96]	; 0x60
 800d50e:	e015      	b.n	800d53c <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800d510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d512:	085a      	lsrs	r2, r3, #1
 800d514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d516:	441a      	add	r2, r3
 800d518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d51a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d51e:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800d520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d522:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d524:	fb02 f303 	mul.w	r3, r2, r3
 800d528:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800d52a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d52c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d530:	0c1b      	lsrs	r3, r3, #16
 800d532:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800d534:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d536:	fb03 f303 	mul.w	r3, r3, r3
 800d53a:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800d53c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d53e:	039b      	lsls	r3, r3, #14
 800d540:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d544:	4a46      	ldr	r2, [pc, #280]	; (800d660 <VL53L0X_calc_dmax+0x234>)
 800d546:	fba2 2303 	umull	r2, r3, r2, r3
 800d54a:	099b      	lsrs	r3, r3, #6
 800d54c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800d54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d550:	fb03 f303 	mul.w	r3, r3, r3
 800d554:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800d556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d558:	fb03 f303 	mul.w	r3, r3, r3
 800d55c:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800d55e:	6a3b      	ldr	r3, [r7, #32]
 800d560:	3308      	adds	r3, #8
 800d562:	091b      	lsrs	r3, r3, #4
 800d564:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800d566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d568:	6a3b      	ldr	r3, [r7, #32]
 800d56a:	1ad3      	subs	r3, r2, r3
 800d56c:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800d56e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d570:	4613      	mov	r3, r2
 800d572:	005b      	lsls	r3, r3, #1
 800d574:	4413      	add	r3, r2
 800d576:	011b      	lsls	r3, r3, #4
 800d578:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d580:	0b9b      	lsrs	r3, r3, #14
 800d582:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800d584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d588:	4413      	add	r3, r2
 800d58a:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800d58c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d58e:	085b      	lsrs	r3, r3, #1
 800d590:	69ba      	ldr	r2, [r7, #24]
 800d592:	4413      	add	r3, r2
 800d594:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800d596:	69ba      	ldr	r2, [r7, #24]
 800d598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d59a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d59e:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	039b      	lsls	r3, r3, #14
 800d5a4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	085b      	lsrs	r3, r3, #1
 800d5aa:	69ba      	ldr	r2, [r7, #24]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800d5b0:	69ba      	ldr	r2, [r7, #24]
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5b8:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d5be:	fb02 f303 	mul.w	r3, r2, r3
 800d5c2:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d5ca:	4a25      	ldr	r2, [pc, #148]	; (800d660 <VL53L0X_calc_dmax+0x234>)
 800d5cc:	fba2 2303 	umull	r2, r3, r2, r3
 800d5d0:	099b      	lsrs	r3, r3, #6
 800d5d2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800d5d4:	69bb      	ldr	r3, [r7, #24]
 800d5d6:	011b      	lsls	r3, r3, #4
 800d5d8:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d5e0:	4a1f      	ldr	r2, [pc, #124]	; (800d660 <VL53L0X_calc_dmax+0x234>)
 800d5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5e6:	099b      	lsrs	r3, r3, #6
 800d5e8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800d5ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5ec:	3380      	adds	r3, #128	; 0x80
 800d5ee:	0a1b      	lsrs	r3, r3, #8
 800d5f0:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d008      	beq.n	800d60a <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	085a      	lsrs	r2, r3, #1
 800d5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5fe:	441a      	add	r2, r3
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	fbb2 f3f3 	udiv	r3, r2, r3
 800d606:	65bb      	str	r3, [r7, #88]	; 0x58
 800d608:	e001      	b.n	800d60e <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800d60a:	2300      	movs	r3, #0
 800d60c:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800d60e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d610:	f7fe f9ba 	bl	800b988 <VL53L0X_isqrt>
 800d614:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d008      	beq.n	800d62e <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800d61c:	69bb      	ldr	r3, [r7, #24]
 800d61e:	085a      	lsrs	r2, r3, #1
 800d620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d622:	441a      	add	r2, r3
 800d624:	69bb      	ldr	r3, [r7, #24]
 800d626:	fbb2 f3f3 	udiv	r3, r2, r3
 800d62a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d62c:	e001      	b.n	800d632 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800d62e:	2300      	movs	r3, #0
 800d630:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800d632:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d634:	f7fe f9a8 	bl	800b988 <VL53L0X_isqrt>
 800d638:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800d63a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d63c:	693a      	ldr	r2, [r7, #16]
 800d63e:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800d640:	693a      	ldr	r2, [r7, #16]
 800d642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d644:	429a      	cmp	r2, r3
 800d646:	d902      	bls.n	800d64e <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800d648:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d64a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d64c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800d64e:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800d652:	4618      	mov	r0, r3
 800d654:	3768      	adds	r7, #104	; 0x68
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	fff00000 	.word	0xfff00000
 800d660:	10624dd3 	.word	0x10624dd3

0800d664 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b0b4      	sub	sp, #208	; 0xd0
 800d668:	af04      	add	r7, sp, #16
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]
 800d670:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800d672:	f44f 7348 	mov.w	r3, #800	; 0x320
 800d676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800d67a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800d67e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800d682:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800d686:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800d68a:	f241 235c 	movw	r3, #4700	; 0x125c
 800d68e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800d692:	4b9e      	ldr	r3, [pc, #632]	; (800d90c <VL53L0X_calc_sigma_estimate+0x2a8>)
 800d694:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800d698:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800d69c:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800d69e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800d6a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6aa:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800d6ac:	4b98      	ldr	r3, [pc, #608]	; (800d910 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800d6ae:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800d6b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d6b4:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800d6b6:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800d6ba:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800d6bc:	f240 6377 	movw	r3, #1655	; 0x677
 800d6c0:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	6a1b      	ldr	r3, [r3, #32]
 800d6cc:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	691b      	ldr	r3, [r3, #16]
 800d6d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d6d6:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800d6da:	0c1b      	lsrs	r3, r3, #16
 800d6dc:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	68db      	ldr	r3, [r3, #12]
 800d6e2:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800d6e4:	f107 0310 	add.w	r3, r7, #16
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	68b9      	ldr	r1, [r7, #8]
 800d6ec:	68f8      	ldr	r0, [r7, #12]
 800d6ee:	f7ff fe78 	bl	800d3e2 <VL53L0X_get_total_signal_rate>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800d6f8:	f107 0314 	add.w	r3, r7, #20
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	68b9      	ldr	r1, [r7, #8]
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	f7ff fe3f 	bl	800d384 <VL53L0X_get_total_xtalk_rate>
 800d706:	4603      	mov	r3, r0
 800d708:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d712:	fb02 f303 	mul.w	r3, r2, r3
 800d716:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800d718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d71a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d71e:	0c1b      	lsrs	r3, r3, #16
 800d720:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d728:	fb02 f303 	mul.w	r3, r2, r3
 800d72c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800d730:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d736:	429a      	cmp	r2, r3
 800d738:	d902      	bls.n	800d740 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800d73a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d73c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800d740:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d744:	2b00      	cmp	r3, #0
 800d746:	d168      	bne.n	800d81a <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d74e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800d758:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d75c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d760:	461a      	mov	r2, r3
 800d762:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800d766:	68f8      	ldr	r0, [r7, #12]
 800d768:	f7fe feb2 	bl	800c4d0 <VL53L0X_calc_timeout_mclks>
 800d76c:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800d77e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d782:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d786:	461a      	mov	r2, r3
 800d788:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d78c:	68f8      	ldr	r0, [r7, #12]
 800d78e:	f7fe fe9f 	bl	800c4d0 <VL53L0X_calc_timeout_mclks>
 800d792:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800d794:	2303      	movs	r3, #3
 800d796:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800d79a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d79e:	2b08      	cmp	r3, #8
 800d7a0:	d102      	bne.n	800d7a8 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800d7a2:	2302      	movs	r3, #2
 800d7a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800d7a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d7aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7ac:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800d7ae:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d7b2:	fb02 f303 	mul.w	r3, r2, r3
 800d7b6:	02db      	lsls	r3, r3, #11
 800d7b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d7bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d7c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d7c4:	4a53      	ldr	r2, [pc, #332]	; (800d914 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d7c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d7ca:	099b      	lsrs	r3, r3, #6
 800d7cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800d7d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d7d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d7d6:	fb02 f303 	mul.w	r3, r2, r3
 800d7da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d7de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d7e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d7e6:	4a4b      	ldr	r2, [pc, #300]	; (800d914 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d7e8:	fba2 2303 	umull	r2, r3, r2, r3
 800d7ec:	099b      	lsrs	r3, r3, #6
 800d7ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	3380      	adds	r3, #128	; 0x80
 800d7f6:	0a1b      	lsrs	r3, r3, #8
 800d7f8:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800d7fa:	693a      	ldr	r2, [r7, #16]
 800d7fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d800:	fb02 f303 	mul.w	r3, r2, r3
 800d804:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800d808:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d80c:	3380      	adds	r3, #128	; 0x80
 800d80e:	0a1b      	lsrs	r3, r3, #8
 800d810:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	021b      	lsls	r3, r3, #8
 800d818:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800d81a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d002      	beq.n	800d828 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800d822:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d826:	e15e      	b.n	800dae6 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800d828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d10c      	bne.n	800d848 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d834:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d83c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	2200      	movs	r2, #0
 800d844:	601a      	str	r2, [r3, #0]
 800d846:	e14c      	b.n	800dae2 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800d848:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d102      	bne.n	800d856 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800d850:	2301      	movs	r3, #1
 800d852:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800d856:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d85a:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800d85c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d85e:	041a      	lsls	r2, r3, #16
 800d860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d862:	fbb2 f3f3 	udiv	r3, r2, r3
 800d866:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800d86a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d86e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d870:	429a      	cmp	r2, r3
 800d872:	d902      	bls.n	800d87a <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800d874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d876:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800d87a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d87e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d882:	fb02 f303 	mul.w	r3, r2, r3
 800d886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800d88a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d88e:	4613      	mov	r3, r2
 800d890:	005b      	lsls	r3, r3, #1
 800d892:	4413      	add	r3, r2
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	4618      	mov	r0, r3
 800d898:	f7fe f876 	bl	800b988 <VL53L0X_isqrt>
 800d89c:	4603      	mov	r3, r0
 800d89e:	005b      	lsls	r3, r3, #1
 800d8a0:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	891b      	ldrh	r3, [r3, #8]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8aa:	fb02 f303 	mul.w	r3, r2, r3
 800d8ae:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d8b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8b2:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d8b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d8b8:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d8ba:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d8bc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d8c0:	4a14      	ldr	r2, [pc, #80]	; (800d914 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d8c6:	099b      	lsrs	r3, r3, #6
 800d8c8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800d8ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8cc:	041b      	lsls	r3, r3, #16
 800d8ce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d8d2:	4a10      	ldr	r2, [pc, #64]	; (800d914 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d8d4:	fba2 2303 	umull	r2, r3, r2, r3
 800d8d8:	099b      	lsrs	r3, r3, #6
 800d8da:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800d8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8de:	021b      	lsls	r3, r3, #8
 800d8e0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800d8e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	bfb8      	it	lt
 800d8ee:	425b      	neglt	r3, r3
 800d8f0:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800d8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8f4:	021b      	lsls	r3, r3, #8
 800d8f6:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	7e1b      	ldrb	r3, [r3, #24]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d00b      	beq.n	800d918 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800d900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d908:	e033      	b.n	800d972 <VL53L0X_calc_sigma_estimate+0x30e>
 800d90a:	bf00      	nop
 800d90c:	028f87ae 	.word	0x028f87ae
 800d910:	0006999a 	.word	0x0006999a
 800d914:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800d918:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d91a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d91e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800d926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d928:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800d92c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d930:	fb02 f303 	mul.w	r3, r2, r3
 800d934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800d938:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d93c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d93e:	4413      	add	r3, r2
 800d940:	0c1b      	lsrs	r3, r3, #16
 800d942:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800d946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d94a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d94e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800d952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d956:	085b      	lsrs	r3, r3, #1
 800d958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800d95c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d960:	fb03 f303 	mul.w	r3, r3, r3
 800d964:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800d968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d96c:	0b9b      	lsrs	r3, r3, #14
 800d96e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800d972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d978:	fb02 f303 	mul.w	r3, r2, r3
 800d97c:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800d97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d980:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d984:	0c1b      	lsrs	r3, r3, #16
 800d986:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800d988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98a:	fb03 f303 	mul.w	r3, r3, r3
 800d98e:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800d990:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d994:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800d996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d998:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d99c:	0c1b      	lsrs	r3, r3, #16
 800d99e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800d9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a2:	fb03 f303 	mul.w	r3, r3, r3
 800d9a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800d9a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ac:	4413      	add	r3, r2
 800d9ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800d9b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9b2:	f7fd ffe9 	bl	800b988 <VL53L0X_isqrt>
 800d9b6:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800d9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ba:	041b      	lsls	r3, r3, #16
 800d9bc:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800d9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c0:	3332      	adds	r3, #50	; 0x32
 800d9c2:	4a4b      	ldr	r2, [pc, #300]	; (800daf0 <VL53L0X_calc_sigma_estimate+0x48c>)
 800d9c4:	fba2 2303 	umull	r2, r3, r2, r3
 800d9c8:	095a      	lsrs	r2, r3, #5
 800d9ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800d9d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d9d8:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800d9dc:	fb02 f303 	mul.w	r3, r2, r3
 800d9e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800d9e4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d9e8:	f241 3388 	movw	r3, #5000	; 0x1388
 800d9ec:	4413      	add	r3, r2
 800d9ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800d9f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d9f6:	4a3f      	ldr	r2, [pc, #252]	; (800daf4 <VL53L0X_calc_sigma_estimate+0x490>)
 800d9f8:	fba2 2303 	umull	r2, r3, r2, r3
 800d9fc:	0b5b      	lsrs	r3, r3, #13
 800d9fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800da02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800da06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da08:	429a      	cmp	r2, r3
 800da0a:	d902      	bls.n	800da12 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800da0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800da12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800da16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da1a:	4413      	add	r3, r2
 800da1c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800da20:	4a35      	ldr	r2, [pc, #212]	; (800daf8 <VL53L0X_calc_sigma_estimate+0x494>)
 800da22:	fba2 2303 	umull	r2, r3, r2, r3
 800da26:	099b      	lsrs	r3, r3, #6
 800da28:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800da2a:	6a3b      	ldr	r3, [r7, #32]
 800da2c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800da2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da32:	441a      	add	r2, r3
 800da34:	6a3b      	ldr	r3, [r7, #32]
 800da36:	fbb2 f3f3 	udiv	r3, r2, r3
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7fd ffa4 	bl	800b988 <VL53L0X_isqrt>
 800da40:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	021b      	lsls	r3, r3, #8
 800da46:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800da48:	69fb      	ldr	r3, [r7, #28]
 800da4a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800da4e:	4a2a      	ldr	r2, [pc, #168]	; (800daf8 <VL53L0X_calc_sigma_estimate+0x494>)
 800da50:	fba2 2303 	umull	r2, r3, r2, r3
 800da54:	099b      	lsrs	r3, r3, #6
 800da56:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800da58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da5c:	fb03 f303 	mul.w	r3, r3, r3
 800da60:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	fb03 f303 	mul.w	r3, r3, r3
 800da68:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800da6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6e:	4413      	add	r3, r2
 800da70:	4618      	mov	r0, r3
 800da72:	f7fd ff89 	bl	800b988 <VL53L0X_isqrt>
 800da76:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da7e:	fb02 f303 	mul.w	r3, r2, r3
 800da82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800da86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d009      	beq.n	800daa0 <VL53L0X_calc_sigma_estimate+0x43c>
 800da8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800da90:	2b00      	cmp	r3, #0
 800da92:	d005      	beq.n	800daa0 <VL53L0X_calc_sigma_estimate+0x43c>
 800da94:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800da98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d903      	bls.n	800daa8 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800daa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800daa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800daae:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800daba:	6939      	ldr	r1, [r7, #16]
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	9303      	str	r3, [sp, #12]
 800dac0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dac4:	9302      	str	r3, [sp, #8]
 800dac6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800daca:	9301      	str	r3, [sp, #4]
 800dacc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dace:	9300      	str	r3, [sp, #0]
 800dad0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dad4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	f7ff fca8 	bl	800d42c <VL53L0X_calc_dmax>
 800dadc:	4603      	mov	r3, r0
 800dade:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800dae2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	37c0      	adds	r7, #192	; 0xc0
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	51eb851f 	.word	0x51eb851f
 800daf4:	d1b71759 	.word	0xd1b71759
 800daf8:	10624dd3 	.word	0x10624dd3

0800dafc <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b090      	sub	sp, #64	; 0x40
 800db00:	af00      	add	r7, sp, #0
 800db02:	60f8      	str	r0, [r7, #12]
 800db04:	607a      	str	r2, [r7, #4]
 800db06:	461a      	mov	r2, r3
 800db08:	460b      	mov	r3, r1
 800db0a:	72fb      	strb	r3, [r7, #11]
 800db0c:	4613      	mov	r3, r2
 800db0e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db10:	2300      	movs	r3, #0
 800db12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800db16:	2300      	movs	r3, #0
 800db18:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800db1c:	2300      	movs	r3, #0
 800db1e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800db22:	2300      	movs	r3, #0
 800db24:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800db28:	2300      	movs	r3, #0
 800db2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800db2e:	2300      	movs	r3, #0
 800db30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800db34:	2300      	movs	r3, #0
 800db36:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800db3a:	2300      	movs	r3, #0
 800db3c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800db40:	2300      	movs	r3, #0
 800db42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800db46:	2300      	movs	r3, #0
 800db48:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800db4a:	2300      	movs	r3, #0
 800db4c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800db4e:	7afb      	ldrb	r3, [r7, #11]
 800db50:	10db      	asrs	r3, r3, #3
 800db52:	b2db      	uxtb	r3, r3
 800db54:	f003 030f 	and.w	r3, r3, #15
 800db58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800db5c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db60:	2b00      	cmp	r3, #0
 800db62:	d017      	beq.n	800db94 <VL53L0X_get_pal_range_status+0x98>
 800db64:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db68:	2b05      	cmp	r3, #5
 800db6a:	d013      	beq.n	800db94 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800db6c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db70:	2b07      	cmp	r3, #7
 800db72:	d00f      	beq.n	800db94 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800db74:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db78:	2b0c      	cmp	r3, #12
 800db7a:	d00b      	beq.n	800db94 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800db7c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db80:	2b0d      	cmp	r3, #13
 800db82:	d007      	beq.n	800db94 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800db84:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db88:	2b0e      	cmp	r3, #14
 800db8a:	d003      	beq.n	800db94 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800db8c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db90:	2b0f      	cmp	r3, #15
 800db92:	d103      	bne.n	800db9c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800db94:	2301      	movs	r3, #1
 800db96:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800db9a:	e002      	b.n	800dba2 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800db9c:	2300      	movs	r3, #0
 800db9e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800dba2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d109      	bne.n	800dbbe <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800dbaa:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800dbae:	461a      	mov	r2, r3
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	f7fc f9ec 	bl	8009f90 <VL53L0X_GetLimitCheckEnable>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800dbbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d02e      	beq.n	800dc24 <VL53L0X_get_pal_range_status+0x128>
 800dbc6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d12a      	bne.n	800dc24 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800dbce:	f107 0310 	add.w	r3, r7, #16
 800dbd2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800dbd6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dbd8:	68f8      	ldr	r0, [r7, #12]
 800dbda:	f7ff fd43 	bl	800d664 <VL53L0X_calc_sigma_estimate>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800dbe4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d103      	bne.n	800dbf4 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	b29a      	uxth	r2, r3
 800dbf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbf2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800dbf4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d113      	bne.n	800dc24 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800dbfc:	f107 0320 	add.w	r3, r7, #32
 800dc00:	461a      	mov	r2, r3
 800dc02:	2100      	movs	r1, #0
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f7fc fa49 	bl	800a09c <VL53L0X_GetLimitCheckValue>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800dc10:	6a3b      	ldr	r3, [r7, #32]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d006      	beq.n	800dc24 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800dc16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc18:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d902      	bls.n	800dc24 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800dc24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d109      	bne.n	800dc40 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800dc2c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800dc30:	461a      	mov	r2, r3
 800dc32:	2102      	movs	r1, #2
 800dc34:	68f8      	ldr	r0, [r7, #12]
 800dc36:	f7fc f9ab 	bl	8009f90 <VL53L0X_GetLimitCheckEnable>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800dc40:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d044      	beq.n	800dcd2 <VL53L0X_get_pal_range_status+0x1d6>
 800dc48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d140      	bne.n	800dcd2 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800dc50:	f107 031c 	add.w	r3, r7, #28
 800dc54:	461a      	mov	r2, r3
 800dc56:	2102      	movs	r1, #2
 800dc58:	68f8      	ldr	r0, [r7, #12]
 800dc5a:	f7fc fa1f 	bl	800a09c <VL53L0X_GetLimitCheckValue>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800dc64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d107      	bne.n	800dc7c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	21ff      	movs	r1, #255	; 0xff
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f000 f9bb 	bl	800dfec <VL53L0X_WrByte>
 800dc76:	4603      	mov	r3, r0
 800dc78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800dc7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d109      	bne.n	800dc98 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800dc84:	f107 0316 	add.w	r3, r7, #22
 800dc88:	461a      	mov	r2, r3
 800dc8a:	21b6      	movs	r1, #182	; 0xb6
 800dc8c:	68f8      	ldr	r0, [r7, #12]
 800dc8e:	f000 fa59 	bl	800e144 <VL53L0X_RdWord>
 800dc92:	4603      	mov	r3, r0
 800dc94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800dc98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d107      	bne.n	800dcb0 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800dca0:	2200      	movs	r2, #0
 800dca2:	21ff      	movs	r1, #255	; 0xff
 800dca4:	68f8      	ldr	r0, [r7, #12]
 800dca6:	f000 f9a1 	bl	800dfec <VL53L0X_WrByte>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800dcb0:	8afb      	ldrh	r3, [r7, #22]
 800dcb2:	025b      	lsls	r3, r3, #9
 800dcb4:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcba:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d006      	beq.n	800dcd2 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800dcc4:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800dcc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d902      	bls.n	800dcd2 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800dccc:	2301      	movs	r3, #1
 800dcce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800dcd2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d109      	bne.n	800dcee <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800dcda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dcde:	461a      	mov	r2, r3
 800dce0:	2103      	movs	r1, #3
 800dce2:	68f8      	ldr	r0, [r7, #12]
 800dce4:	f7fc f954 	bl	8009f90 <VL53L0X_GetLimitCheckEnable>
 800dce8:	4603      	mov	r3, r0
 800dcea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800dcee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d023      	beq.n	800dd3e <VL53L0X_get_pal_range_status+0x242>
 800dcf6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d11f      	bne.n	800dd3e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800dcfe:	893b      	ldrh	r3, [r7, #8]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d102      	bne.n	800dd0a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800dd04:	2300      	movs	r3, #0
 800dd06:	637b      	str	r3, [r7, #52]	; 0x34
 800dd08:	e005      	b.n	800dd16 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	021a      	lsls	r2, r3, #8
 800dd0e:	893b      	ldrh	r3, [r7, #8]
 800dd10:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd14:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800dd16:	f107 0318 	add.w	r3, r7, #24
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	2103      	movs	r1, #3
 800dd1e:	68f8      	ldr	r0, [r7, #12]
 800dd20:	f7fc f9bc 	bl	800a09c <VL53L0X_GetLimitCheckValue>
 800dd24:	4603      	mov	r3, r0
 800dd26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d006      	beq.n	800dd3e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800dd30:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800dd32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d202      	bcs.n	800dd3e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800dd3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d14a      	bne.n	800dddc <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800dd46:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	d103      	bne.n	800dd56 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800dd4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd50:	22ff      	movs	r2, #255	; 0xff
 800dd52:	701a      	strb	r2, [r3, #0]
 800dd54:	e042      	b.n	800dddc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800dd56:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d007      	beq.n	800dd6e <VL53L0X_get_pal_range_status+0x272>
 800dd5e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dd62:	2b02      	cmp	r3, #2
 800dd64:	d003      	beq.n	800dd6e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800dd66:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dd6a:	2b03      	cmp	r3, #3
 800dd6c:	d103      	bne.n	800dd76 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800dd6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd70:	2205      	movs	r2, #5
 800dd72:	701a      	strb	r2, [r3, #0]
 800dd74:	e032      	b.n	800dddc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800dd76:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dd7a:	2b06      	cmp	r3, #6
 800dd7c:	d003      	beq.n	800dd86 <VL53L0X_get_pal_range_status+0x28a>
 800dd7e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dd82:	2b09      	cmp	r3, #9
 800dd84:	d103      	bne.n	800dd8e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800dd86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd88:	2204      	movs	r2, #4
 800dd8a:	701a      	strb	r2, [r3, #0]
 800dd8c:	e026      	b.n	800dddc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800dd8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dd92:	2b08      	cmp	r3, #8
 800dd94:	d007      	beq.n	800dda6 <VL53L0X_get_pal_range_status+0x2aa>
 800dd96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dd9a:	2b0a      	cmp	r3, #10
 800dd9c:	d003      	beq.n	800dda6 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800dd9e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dda2:	2b01      	cmp	r3, #1
 800dda4:	d103      	bne.n	800ddae <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800dda6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda8:	2203      	movs	r2, #3
 800ddaa:	701a      	strb	r2, [r3, #0]
 800ddac:	e016      	b.n	800dddc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800ddae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ddb2:	2b04      	cmp	r3, #4
 800ddb4:	d003      	beq.n	800ddbe <VL53L0X_get_pal_range_status+0x2c2>
 800ddb6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d103      	bne.n	800ddc6 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800ddbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddc0:	2202      	movs	r2, #2
 800ddc2:	701a      	strb	r2, [r3, #0]
 800ddc4:	e00a      	b.n	800dddc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800ddc6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d103      	bne.n	800ddd6 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800ddce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	701a      	strb	r2, [r3, #0]
 800ddd4:	e002      	b.n	800dddc <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800ddd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddd8:	2200      	movs	r2, #0
 800ddda:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800dddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d102      	bne.n	800ddea <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800dde4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dde6:	2200      	movs	r2, #0
 800dde8:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ddea:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800ddee:	461a      	mov	r2, r3
 800ddf0:	2101      	movs	r1, #1
 800ddf2:	68f8      	ldr	r0, [r7, #12]
 800ddf4:	f7fc f8cc 	bl	8009f90 <VL53L0X_GetLimitCheckEnable>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800ddfe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800de02:	2b00      	cmp	r3, #0
 800de04:	d14f      	bne.n	800dea6 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800de06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d003      	beq.n	800de16 <VL53L0X_get_pal_range_status+0x31a>
 800de0e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800de12:	2b01      	cmp	r3, #1
 800de14:	d103      	bne.n	800de1e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800de16:	2301      	movs	r3, #1
 800de18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de1c:	e002      	b.n	800de24 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800de1e:	2300      	movs	r3, #0
 800de20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800de2a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800de2e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800de32:	2b04      	cmp	r3, #4
 800de34:	d003      	beq.n	800de3e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800de36:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d103      	bne.n	800de46 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800de3e:	2301      	movs	r3, #1
 800de40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de44:	e002      	b.n	800de4c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800de46:	2300      	movs	r3, #0
 800de48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800de52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800de56:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d003      	beq.n	800de66 <VL53L0X_get_pal_range_status+0x36a>
 800de5e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800de62:	2b01      	cmp	r3, #1
 800de64:	d103      	bne.n	800de6e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800de66:	2301      	movs	r3, #1
 800de68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de6c:	e002      	b.n	800de74 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800de6e:	2300      	movs	r3, #0
 800de70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800de7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800de7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800de82:	2b00      	cmp	r3, #0
 800de84:	d003      	beq.n	800de8e <VL53L0X_get_pal_range_status+0x392>
 800de86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d103      	bne.n	800de96 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800de8e:	2301      	movs	r3, #1
 800de90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de94:	e002      	b.n	800de9c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800de96:	2300      	movs	r3, #0
 800de98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800dea2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800dea6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800deaa:	4618      	mov	r0, r3
 800deac:	3740      	adds	r7, #64	; 0x40
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}

0800deb2 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b088      	sub	sp, #32
 800deb6:	af02      	add	r7, sp, #8
 800deb8:	60f8      	str	r0, [r7, #12]
 800deba:	60b9      	str	r1, [r7, #8]
 800debc:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	330a      	adds	r3, #10
 800dec2:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ded0:	b299      	uxth	r1, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	b29a      	uxth	r2, r3
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	9300      	str	r3, [sp, #0]
 800deda:	4613      	mov	r3, r2
 800dedc:	68ba      	ldr	r2, [r7, #8]
 800dede:	f7f4 ff61 	bl	8002da4 <HAL_I2C_Master_Transmit>
 800dee2:	4603      	mov	r3, r0
 800dee4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800dee6:	693b      	ldr	r3, [r7, #16]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3718      	adds	r7, #24
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800def0:	b580      	push	{r7, lr}
 800def2:	b088      	sub	sp, #32
 800def4:	af02      	add	r7, sp, #8
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	330a      	adds	r3, #10
 800df00:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800df0e:	f043 0301 	orr.w	r3, r3, #1
 800df12:	b2db      	uxtb	r3, r3
 800df14:	b299      	uxth	r1, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	b29a      	uxth	r2, r3
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	9300      	str	r3, [sp, #0]
 800df1e:	4613      	mov	r3, r2
 800df20:	68ba      	ldr	r2, [r7, #8]
 800df22:	f7f5 f833 	bl	8002f8c <HAL_I2C_Master_Receive>
 800df26:	4603      	mov	r3, r0
 800df28:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800df2a:	693b      	ldr	r3, [r7, #16]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3718      	adds	r7, #24
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800df34:	b580      	push	{r7, lr}
 800df36:	b086      	sub	sp, #24
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	607a      	str	r2, [r7, #4]
 800df3e:	603b      	str	r3, [r7, #0]
 800df40:	460b      	mov	r3, r1
 800df42:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800df44:	2300      	movs	r3, #0
 800df46:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	2b3f      	cmp	r3, #63	; 0x3f
 800df4c:	d902      	bls.n	800df54 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800df4e:	f06f 0303 	mvn.w	r3, #3
 800df52:	e016      	b.n	800df82 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800df54:	4a0d      	ldr	r2, [pc, #52]	; (800df8c <VL53L0X_WriteMulti+0x58>)
 800df56:	7afb      	ldrb	r3, [r7, #11]
 800df58:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800df5a:	683a      	ldr	r2, [r7, #0]
 800df5c:	6879      	ldr	r1, [r7, #4]
 800df5e:	480c      	ldr	r0, [pc, #48]	; (800df90 <VL53L0X_WriteMulti+0x5c>)
 800df60:	f000 f99e 	bl	800e2a0 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	3301      	adds	r3, #1
 800df68:	461a      	mov	r2, r3
 800df6a:	4908      	ldr	r1, [pc, #32]	; (800df8c <VL53L0X_WriteMulti+0x58>)
 800df6c:	68f8      	ldr	r0, [r7, #12]
 800df6e:	f7ff ffa0 	bl	800deb2 <_I2CWrite>
 800df72:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d001      	beq.n	800df7e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800df7a:	23ec      	movs	r3, #236	; 0xec
 800df7c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800df7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df82:	4618      	mov	r0, r3
 800df84:	3718      	adds	r7, #24
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	20000700 	.word	0x20000700
 800df90:	20000701 	.word	0x20000701

0800df94 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800df94:	b580      	push	{r7, lr}
 800df96:	b086      	sub	sp, #24
 800df98:	af00      	add	r7, sp, #0
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	607a      	str	r2, [r7, #4]
 800df9e:	603b      	str	r3, [r7, #0]
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800dfa8:	f107 030b 	add.w	r3, r7, #11
 800dfac:	2201      	movs	r2, #1
 800dfae:	4619      	mov	r1, r3
 800dfb0:	68f8      	ldr	r0, [r7, #12]
 800dfb2:	f7ff ff7e 	bl	800deb2 <_I2CWrite>
 800dfb6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d002      	beq.n	800dfc4 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dfbe:	23ec      	movs	r3, #236	; 0xec
 800dfc0:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dfc2:	e00c      	b.n	800dfde <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800dfc4:	683a      	ldr	r2, [r7, #0]
 800dfc6:	6879      	ldr	r1, [r7, #4]
 800dfc8:	68f8      	ldr	r0, [r7, #12]
 800dfca:	f7ff ff91 	bl	800def0 <_I2CRead>
 800dfce:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d002      	beq.n	800dfdc <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dfd6:	23ec      	movs	r3, #236	; 0xec
 800dfd8:	75fb      	strb	r3, [r7, #23]
 800dfda:	e000      	b.n	800dfde <VL53L0X_ReadMulti+0x4a>
    }
done:
 800dfdc:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800dfde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3718      	adds	r7, #24
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
	...

0800dfec <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b084      	sub	sp, #16
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	460b      	mov	r3, r1
 800dff6:	70fb      	strb	r3, [r7, #3]
 800dff8:	4613      	mov	r3, r2
 800dffa:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dffc:	2300      	movs	r3, #0
 800dffe:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800e000:	4a0b      	ldr	r2, [pc, #44]	; (800e030 <VL53L0X_WrByte+0x44>)
 800e002:	78fb      	ldrb	r3, [r7, #3]
 800e004:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800e006:	4a0a      	ldr	r2, [pc, #40]	; (800e030 <VL53L0X_WrByte+0x44>)
 800e008:	78bb      	ldrb	r3, [r7, #2]
 800e00a:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800e00c:	2202      	movs	r2, #2
 800e00e:	4908      	ldr	r1, [pc, #32]	; (800e030 <VL53L0X_WrByte+0x44>)
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f7ff ff4e 	bl	800deb2 <_I2CWrite>
 800e016:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d001      	beq.n	800e022 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e01e:	23ec      	movs	r3, #236	; 0xec
 800e020:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800e022:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e026:	4618      	mov	r0, r3
 800e028:	3710      	adds	r7, #16
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	20000700 	.word	0x20000700

0800e034 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800e034:	b580      	push	{r7, lr}
 800e036:	b084      	sub	sp, #16
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	460b      	mov	r3, r1
 800e03e:	70fb      	strb	r3, [r7, #3]
 800e040:	4613      	mov	r3, r2
 800e042:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e044:	2300      	movs	r3, #0
 800e046:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800e048:	4a0e      	ldr	r2, [pc, #56]	; (800e084 <VL53L0X_WrWord+0x50>)
 800e04a:	78fb      	ldrb	r3, [r7, #3]
 800e04c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800e04e:	883b      	ldrh	r3, [r7, #0]
 800e050:	0a1b      	lsrs	r3, r3, #8
 800e052:	b29b      	uxth	r3, r3
 800e054:	b2da      	uxtb	r2, r3
 800e056:	4b0b      	ldr	r3, [pc, #44]	; (800e084 <VL53L0X_WrWord+0x50>)
 800e058:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800e05a:	883b      	ldrh	r3, [r7, #0]
 800e05c:	b2da      	uxtb	r2, r3
 800e05e:	4b09      	ldr	r3, [pc, #36]	; (800e084 <VL53L0X_WrWord+0x50>)
 800e060:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800e062:	2203      	movs	r2, #3
 800e064:	4907      	ldr	r1, [pc, #28]	; (800e084 <VL53L0X_WrWord+0x50>)
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f7ff ff23 	bl	800deb2 <_I2CWrite>
 800e06c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d001      	beq.n	800e078 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e074:	23ec      	movs	r3, #236	; 0xec
 800e076:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800e078:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3710      	adds	r7, #16
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}
 800e084:	20000700 	.word	0x20000700

0800e088 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	4608      	mov	r0, r1
 800e092:	4611      	mov	r1, r2
 800e094:	461a      	mov	r2, r3
 800e096:	4603      	mov	r3, r0
 800e098:	70fb      	strb	r3, [r7, #3]
 800e09a:	460b      	mov	r3, r1
 800e09c:	70bb      	strb	r3, [r7, #2]
 800e09e:	4613      	mov	r3, r2
 800e0a0:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800e0a6:	f107 020e 	add.w	r2, r7, #14
 800e0aa:	78fb      	ldrb	r3, [r7, #3]
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 f81e 	bl	800e0f0 <VL53L0X_RdByte>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800e0b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d110      	bne.n	800e0e2 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800e0c0:	7bba      	ldrb	r2, [r7, #14]
 800e0c2:	78bb      	ldrb	r3, [r7, #2]
 800e0c4:	4013      	ands	r3, r2
 800e0c6:	b2da      	uxtb	r2, r3
 800e0c8:	787b      	ldrb	r3, [r7, #1]
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800e0d0:	7bba      	ldrb	r2, [r7, #14]
 800e0d2:	78fb      	ldrb	r3, [r7, #3]
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f7ff ff88 	bl	800dfec <VL53L0X_WrByte>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	73fb      	strb	r3, [r7, #15]
 800e0e0:	e000      	b.n	800e0e4 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800e0e2:	bf00      	nop
done:
    return Status;
 800e0e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3710      	adds	r7, #16
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b086      	sub	sp, #24
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	460b      	mov	r3, r1
 800e0fa:	607a      	str	r2, [r7, #4]
 800e0fc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e0fe:	2300      	movs	r3, #0
 800e100:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e102:	f107 030b 	add.w	r3, r7, #11
 800e106:	2201      	movs	r2, #1
 800e108:	4619      	mov	r1, r3
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	f7ff fed1 	bl	800deb2 <_I2CWrite>
 800e110:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d002      	beq.n	800e11e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e118:	23ec      	movs	r3, #236	; 0xec
 800e11a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e11c:	e00c      	b.n	800e138 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800e11e:	2201      	movs	r2, #1
 800e120:	6879      	ldr	r1, [r7, #4]
 800e122:	68f8      	ldr	r0, [r7, #12]
 800e124:	f7ff fee4 	bl	800def0 <_I2CRead>
 800e128:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d002      	beq.n	800e136 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e130:	23ec      	movs	r3, #236	; 0xec
 800e132:	75fb      	strb	r3, [r7, #23]
 800e134:	e000      	b.n	800e138 <VL53L0X_RdByte+0x48>
    }
done:
 800e136:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800e138:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3718      	adds	r7, #24
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800e144:	b580      	push	{r7, lr}
 800e146:	b086      	sub	sp, #24
 800e148:	af00      	add	r7, sp, #0
 800e14a:	60f8      	str	r0, [r7, #12]
 800e14c:	460b      	mov	r3, r1
 800e14e:	607a      	str	r2, [r7, #4]
 800e150:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e152:	2300      	movs	r3, #0
 800e154:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e156:	f107 030b 	add.w	r3, r7, #11
 800e15a:	2201      	movs	r2, #1
 800e15c:	4619      	mov	r1, r3
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f7ff fea7 	bl	800deb2 <_I2CWrite>
 800e164:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d002      	beq.n	800e172 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e16c:	23ec      	movs	r3, #236	; 0xec
 800e16e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e170:	e017      	b.n	800e1a2 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800e172:	2202      	movs	r2, #2
 800e174:	490e      	ldr	r1, [pc, #56]	; (800e1b0 <VL53L0X_RdWord+0x6c>)
 800e176:	68f8      	ldr	r0, [r7, #12]
 800e178:	f7ff feba 	bl	800def0 <_I2CRead>
 800e17c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d002      	beq.n	800e18a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e184:	23ec      	movs	r3, #236	; 0xec
 800e186:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e188:	e00b      	b.n	800e1a2 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800e18a:	4b09      	ldr	r3, [pc, #36]	; (800e1b0 <VL53L0X_RdWord+0x6c>)
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	b29b      	uxth	r3, r3
 800e190:	021b      	lsls	r3, r3, #8
 800e192:	b29a      	uxth	r2, r3
 800e194:	4b06      	ldr	r3, [pc, #24]	; (800e1b0 <VL53L0X_RdWord+0x6c>)
 800e196:	785b      	ldrb	r3, [r3, #1]
 800e198:	b29b      	uxth	r3, r3
 800e19a:	4413      	add	r3, r2
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800e1a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3718      	adds	r7, #24
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	20000700 	.word	0x20000700

0800e1b4 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b086      	sub	sp, #24
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	460b      	mov	r3, r1
 800e1be:	607a      	str	r2, [r7, #4]
 800e1c0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e1c6:	f107 030b 	add.w	r3, r7, #11
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f7ff fe6f 	bl	800deb2 <_I2CWrite>
 800e1d4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d002      	beq.n	800e1e2 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e1dc:	23ec      	movs	r3, #236	; 0xec
 800e1de:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e1e0:	e01b      	b.n	800e21a <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800e1e2:	2204      	movs	r2, #4
 800e1e4:	4910      	ldr	r1, [pc, #64]	; (800e228 <VL53L0X_RdDWord+0x74>)
 800e1e6:	68f8      	ldr	r0, [r7, #12]
 800e1e8:	f7ff fe82 	bl	800def0 <_I2CRead>
 800e1ec:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d002      	beq.n	800e1fa <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e1f4:	23ec      	movs	r3, #236	; 0xec
 800e1f6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e1f8:	e00f      	b.n	800e21a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800e1fa:	4b0b      	ldr	r3, [pc, #44]	; (800e228 <VL53L0X_RdDWord+0x74>)
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	061a      	lsls	r2, r3, #24
 800e200:	4b09      	ldr	r3, [pc, #36]	; (800e228 <VL53L0X_RdDWord+0x74>)
 800e202:	785b      	ldrb	r3, [r3, #1]
 800e204:	041b      	lsls	r3, r3, #16
 800e206:	441a      	add	r2, r3
 800e208:	4b07      	ldr	r3, [pc, #28]	; (800e228 <VL53L0X_RdDWord+0x74>)
 800e20a:	789b      	ldrb	r3, [r3, #2]
 800e20c:	021b      	lsls	r3, r3, #8
 800e20e:	4413      	add	r3, r2
 800e210:	4a05      	ldr	r2, [pc, #20]	; (800e228 <VL53L0X_RdDWord+0x74>)
 800e212:	78d2      	ldrb	r2, [r2, #3]
 800e214:	441a      	add	r2, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800e21a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3718      	adds	r7, #24
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	20000700 	.word	0x20000700

0800e22c <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800e234:	2300      	movs	r3, #0
 800e236:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800e238:	2002      	movs	r0, #2
 800e23a:	f7f3 fec7 	bl	8001fcc <HAL_Delay>
    return status;
 800e23e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e242:	4618      	mov	r0, r3
 800e244:	3710      	adds	r7, #16
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
	...

0800e24c <__errno>:
 800e24c:	4b01      	ldr	r3, [pc, #4]	; (800e254 <__errno+0x8>)
 800e24e:	6818      	ldr	r0, [r3, #0]
 800e250:	4770      	bx	lr
 800e252:	bf00      	nop
 800e254:	200002c8 	.word	0x200002c8

0800e258 <__libc_init_array>:
 800e258:	b570      	push	{r4, r5, r6, lr}
 800e25a:	4d0d      	ldr	r5, [pc, #52]	; (800e290 <__libc_init_array+0x38>)
 800e25c:	4c0d      	ldr	r4, [pc, #52]	; (800e294 <__libc_init_array+0x3c>)
 800e25e:	1b64      	subs	r4, r4, r5
 800e260:	10a4      	asrs	r4, r4, #2
 800e262:	2600      	movs	r6, #0
 800e264:	42a6      	cmp	r6, r4
 800e266:	d109      	bne.n	800e27c <__libc_init_array+0x24>
 800e268:	4d0b      	ldr	r5, [pc, #44]	; (800e298 <__libc_init_array+0x40>)
 800e26a:	4c0c      	ldr	r4, [pc, #48]	; (800e29c <__libc_init_array+0x44>)
 800e26c:	f004 fc98 	bl	8012ba0 <_init>
 800e270:	1b64      	subs	r4, r4, r5
 800e272:	10a4      	asrs	r4, r4, #2
 800e274:	2600      	movs	r6, #0
 800e276:	42a6      	cmp	r6, r4
 800e278:	d105      	bne.n	800e286 <__libc_init_array+0x2e>
 800e27a:	bd70      	pop	{r4, r5, r6, pc}
 800e27c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e280:	4798      	blx	r3
 800e282:	3601      	adds	r6, #1
 800e284:	e7ee      	b.n	800e264 <__libc_init_array+0xc>
 800e286:	f855 3b04 	ldr.w	r3, [r5], #4
 800e28a:	4798      	blx	r3
 800e28c:	3601      	adds	r6, #1
 800e28e:	e7f2      	b.n	800e276 <__libc_init_array+0x1e>
 800e290:	08013314 	.word	0x08013314
 800e294:	08013314 	.word	0x08013314
 800e298:	08013314 	.word	0x08013314
 800e29c:	08013318 	.word	0x08013318

0800e2a0 <memcpy>:
 800e2a0:	440a      	add	r2, r1
 800e2a2:	4291      	cmp	r1, r2
 800e2a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2a8:	d100      	bne.n	800e2ac <memcpy+0xc>
 800e2aa:	4770      	bx	lr
 800e2ac:	b510      	push	{r4, lr}
 800e2ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2b6:	4291      	cmp	r1, r2
 800e2b8:	d1f9      	bne.n	800e2ae <memcpy+0xe>
 800e2ba:	bd10      	pop	{r4, pc}

0800e2bc <memset>:
 800e2bc:	4402      	add	r2, r0
 800e2be:	4603      	mov	r3, r0
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d100      	bne.n	800e2c6 <memset+0xa>
 800e2c4:	4770      	bx	lr
 800e2c6:	f803 1b01 	strb.w	r1, [r3], #1
 800e2ca:	e7f9      	b.n	800e2c0 <memset+0x4>

0800e2cc <__cvt>:
 800e2cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2d0:	ec55 4b10 	vmov	r4, r5, d0
 800e2d4:	2d00      	cmp	r5, #0
 800e2d6:	460e      	mov	r6, r1
 800e2d8:	4619      	mov	r1, r3
 800e2da:	462b      	mov	r3, r5
 800e2dc:	bfbb      	ittet	lt
 800e2de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e2e2:	461d      	movlt	r5, r3
 800e2e4:	2300      	movge	r3, #0
 800e2e6:	232d      	movlt	r3, #45	; 0x2d
 800e2e8:	700b      	strb	r3, [r1, #0]
 800e2ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e2f0:	4691      	mov	r9, r2
 800e2f2:	f023 0820 	bic.w	r8, r3, #32
 800e2f6:	bfbc      	itt	lt
 800e2f8:	4622      	movlt	r2, r4
 800e2fa:	4614      	movlt	r4, r2
 800e2fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e300:	d005      	beq.n	800e30e <__cvt+0x42>
 800e302:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e306:	d100      	bne.n	800e30a <__cvt+0x3e>
 800e308:	3601      	adds	r6, #1
 800e30a:	2102      	movs	r1, #2
 800e30c:	e000      	b.n	800e310 <__cvt+0x44>
 800e30e:	2103      	movs	r1, #3
 800e310:	ab03      	add	r3, sp, #12
 800e312:	9301      	str	r3, [sp, #4]
 800e314:	ab02      	add	r3, sp, #8
 800e316:	9300      	str	r3, [sp, #0]
 800e318:	ec45 4b10 	vmov	d0, r4, r5
 800e31c:	4653      	mov	r3, sl
 800e31e:	4632      	mov	r2, r6
 800e320:	f001 fdb6 	bl	800fe90 <_dtoa_r>
 800e324:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e328:	4607      	mov	r7, r0
 800e32a:	d102      	bne.n	800e332 <__cvt+0x66>
 800e32c:	f019 0f01 	tst.w	r9, #1
 800e330:	d022      	beq.n	800e378 <__cvt+0xac>
 800e332:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e336:	eb07 0906 	add.w	r9, r7, r6
 800e33a:	d110      	bne.n	800e35e <__cvt+0x92>
 800e33c:	783b      	ldrb	r3, [r7, #0]
 800e33e:	2b30      	cmp	r3, #48	; 0x30
 800e340:	d10a      	bne.n	800e358 <__cvt+0x8c>
 800e342:	2200      	movs	r2, #0
 800e344:	2300      	movs	r3, #0
 800e346:	4620      	mov	r0, r4
 800e348:	4629      	mov	r1, r5
 800e34a:	f7f2 fbed 	bl	8000b28 <__aeabi_dcmpeq>
 800e34e:	b918      	cbnz	r0, 800e358 <__cvt+0x8c>
 800e350:	f1c6 0601 	rsb	r6, r6, #1
 800e354:	f8ca 6000 	str.w	r6, [sl]
 800e358:	f8da 3000 	ldr.w	r3, [sl]
 800e35c:	4499      	add	r9, r3
 800e35e:	2200      	movs	r2, #0
 800e360:	2300      	movs	r3, #0
 800e362:	4620      	mov	r0, r4
 800e364:	4629      	mov	r1, r5
 800e366:	f7f2 fbdf 	bl	8000b28 <__aeabi_dcmpeq>
 800e36a:	b108      	cbz	r0, 800e370 <__cvt+0xa4>
 800e36c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e370:	2230      	movs	r2, #48	; 0x30
 800e372:	9b03      	ldr	r3, [sp, #12]
 800e374:	454b      	cmp	r3, r9
 800e376:	d307      	bcc.n	800e388 <__cvt+0xbc>
 800e378:	9b03      	ldr	r3, [sp, #12]
 800e37a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e37c:	1bdb      	subs	r3, r3, r7
 800e37e:	4638      	mov	r0, r7
 800e380:	6013      	str	r3, [r2, #0]
 800e382:	b004      	add	sp, #16
 800e384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e388:	1c59      	adds	r1, r3, #1
 800e38a:	9103      	str	r1, [sp, #12]
 800e38c:	701a      	strb	r2, [r3, #0]
 800e38e:	e7f0      	b.n	800e372 <__cvt+0xa6>

0800e390 <__exponent>:
 800e390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e392:	4603      	mov	r3, r0
 800e394:	2900      	cmp	r1, #0
 800e396:	bfb8      	it	lt
 800e398:	4249      	neglt	r1, r1
 800e39a:	f803 2b02 	strb.w	r2, [r3], #2
 800e39e:	bfb4      	ite	lt
 800e3a0:	222d      	movlt	r2, #45	; 0x2d
 800e3a2:	222b      	movge	r2, #43	; 0x2b
 800e3a4:	2909      	cmp	r1, #9
 800e3a6:	7042      	strb	r2, [r0, #1]
 800e3a8:	dd2a      	ble.n	800e400 <__exponent+0x70>
 800e3aa:	f10d 0407 	add.w	r4, sp, #7
 800e3ae:	46a4      	mov	ip, r4
 800e3b0:	270a      	movs	r7, #10
 800e3b2:	46a6      	mov	lr, r4
 800e3b4:	460a      	mov	r2, r1
 800e3b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800e3ba:	fb07 1516 	mls	r5, r7, r6, r1
 800e3be:	3530      	adds	r5, #48	; 0x30
 800e3c0:	2a63      	cmp	r2, #99	; 0x63
 800e3c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800e3c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e3ca:	4631      	mov	r1, r6
 800e3cc:	dcf1      	bgt.n	800e3b2 <__exponent+0x22>
 800e3ce:	3130      	adds	r1, #48	; 0x30
 800e3d0:	f1ae 0502 	sub.w	r5, lr, #2
 800e3d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e3d8:	1c44      	adds	r4, r0, #1
 800e3da:	4629      	mov	r1, r5
 800e3dc:	4561      	cmp	r1, ip
 800e3de:	d30a      	bcc.n	800e3f6 <__exponent+0x66>
 800e3e0:	f10d 0209 	add.w	r2, sp, #9
 800e3e4:	eba2 020e 	sub.w	r2, r2, lr
 800e3e8:	4565      	cmp	r5, ip
 800e3ea:	bf88      	it	hi
 800e3ec:	2200      	movhi	r2, #0
 800e3ee:	4413      	add	r3, r2
 800e3f0:	1a18      	subs	r0, r3, r0
 800e3f2:	b003      	add	sp, #12
 800e3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e3fe:	e7ed      	b.n	800e3dc <__exponent+0x4c>
 800e400:	2330      	movs	r3, #48	; 0x30
 800e402:	3130      	adds	r1, #48	; 0x30
 800e404:	7083      	strb	r3, [r0, #2]
 800e406:	70c1      	strb	r1, [r0, #3]
 800e408:	1d03      	adds	r3, r0, #4
 800e40a:	e7f1      	b.n	800e3f0 <__exponent+0x60>

0800e40c <_printf_float>:
 800e40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e410:	ed2d 8b02 	vpush	{d8}
 800e414:	b08d      	sub	sp, #52	; 0x34
 800e416:	460c      	mov	r4, r1
 800e418:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e41c:	4616      	mov	r6, r2
 800e41e:	461f      	mov	r7, r3
 800e420:	4605      	mov	r5, r0
 800e422:	f002 fe93 	bl	801114c <_localeconv_r>
 800e426:	f8d0 a000 	ldr.w	sl, [r0]
 800e42a:	4650      	mov	r0, sl
 800e42c:	f7f1 fefa 	bl	8000224 <strlen>
 800e430:	2300      	movs	r3, #0
 800e432:	930a      	str	r3, [sp, #40]	; 0x28
 800e434:	6823      	ldr	r3, [r4, #0]
 800e436:	9305      	str	r3, [sp, #20]
 800e438:	f8d8 3000 	ldr.w	r3, [r8]
 800e43c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e440:	3307      	adds	r3, #7
 800e442:	f023 0307 	bic.w	r3, r3, #7
 800e446:	f103 0208 	add.w	r2, r3, #8
 800e44a:	f8c8 2000 	str.w	r2, [r8]
 800e44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e452:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e456:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e45a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e45e:	9307      	str	r3, [sp, #28]
 800e460:	f8cd 8018 	str.w	r8, [sp, #24]
 800e464:	ee08 0a10 	vmov	s16, r0
 800e468:	4b9f      	ldr	r3, [pc, #636]	; (800e6e8 <_printf_float+0x2dc>)
 800e46a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e46e:	f04f 32ff 	mov.w	r2, #4294967295
 800e472:	f7f2 fb8b 	bl	8000b8c <__aeabi_dcmpun>
 800e476:	bb88      	cbnz	r0, 800e4dc <_printf_float+0xd0>
 800e478:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e47c:	4b9a      	ldr	r3, [pc, #616]	; (800e6e8 <_printf_float+0x2dc>)
 800e47e:	f04f 32ff 	mov.w	r2, #4294967295
 800e482:	f7f2 fb65 	bl	8000b50 <__aeabi_dcmple>
 800e486:	bb48      	cbnz	r0, 800e4dc <_printf_float+0xd0>
 800e488:	2200      	movs	r2, #0
 800e48a:	2300      	movs	r3, #0
 800e48c:	4640      	mov	r0, r8
 800e48e:	4649      	mov	r1, r9
 800e490:	f7f2 fb54 	bl	8000b3c <__aeabi_dcmplt>
 800e494:	b110      	cbz	r0, 800e49c <_printf_float+0x90>
 800e496:	232d      	movs	r3, #45	; 0x2d
 800e498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e49c:	4b93      	ldr	r3, [pc, #588]	; (800e6ec <_printf_float+0x2e0>)
 800e49e:	4894      	ldr	r0, [pc, #592]	; (800e6f0 <_printf_float+0x2e4>)
 800e4a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e4a4:	bf94      	ite	ls
 800e4a6:	4698      	movls	r8, r3
 800e4a8:	4680      	movhi	r8, r0
 800e4aa:	2303      	movs	r3, #3
 800e4ac:	6123      	str	r3, [r4, #16]
 800e4ae:	9b05      	ldr	r3, [sp, #20]
 800e4b0:	f023 0204 	bic.w	r2, r3, #4
 800e4b4:	6022      	str	r2, [r4, #0]
 800e4b6:	f04f 0900 	mov.w	r9, #0
 800e4ba:	9700      	str	r7, [sp, #0]
 800e4bc:	4633      	mov	r3, r6
 800e4be:	aa0b      	add	r2, sp, #44	; 0x2c
 800e4c0:	4621      	mov	r1, r4
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	f000 f9d8 	bl	800e878 <_printf_common>
 800e4c8:	3001      	adds	r0, #1
 800e4ca:	f040 8090 	bne.w	800e5ee <_printf_float+0x1e2>
 800e4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e4d2:	b00d      	add	sp, #52	; 0x34
 800e4d4:	ecbd 8b02 	vpop	{d8}
 800e4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4dc:	4642      	mov	r2, r8
 800e4de:	464b      	mov	r3, r9
 800e4e0:	4640      	mov	r0, r8
 800e4e2:	4649      	mov	r1, r9
 800e4e4:	f7f2 fb52 	bl	8000b8c <__aeabi_dcmpun>
 800e4e8:	b140      	cbz	r0, 800e4fc <_printf_float+0xf0>
 800e4ea:	464b      	mov	r3, r9
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	bfbc      	itt	lt
 800e4f0:	232d      	movlt	r3, #45	; 0x2d
 800e4f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e4f6:	487f      	ldr	r0, [pc, #508]	; (800e6f4 <_printf_float+0x2e8>)
 800e4f8:	4b7f      	ldr	r3, [pc, #508]	; (800e6f8 <_printf_float+0x2ec>)
 800e4fa:	e7d1      	b.n	800e4a0 <_printf_float+0x94>
 800e4fc:	6863      	ldr	r3, [r4, #4]
 800e4fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e502:	9206      	str	r2, [sp, #24]
 800e504:	1c5a      	adds	r2, r3, #1
 800e506:	d13f      	bne.n	800e588 <_printf_float+0x17c>
 800e508:	2306      	movs	r3, #6
 800e50a:	6063      	str	r3, [r4, #4]
 800e50c:	9b05      	ldr	r3, [sp, #20]
 800e50e:	6861      	ldr	r1, [r4, #4]
 800e510:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e514:	2300      	movs	r3, #0
 800e516:	9303      	str	r3, [sp, #12]
 800e518:	ab0a      	add	r3, sp, #40	; 0x28
 800e51a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e51e:	ab09      	add	r3, sp, #36	; 0x24
 800e520:	ec49 8b10 	vmov	d0, r8, r9
 800e524:	9300      	str	r3, [sp, #0]
 800e526:	6022      	str	r2, [r4, #0]
 800e528:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e52c:	4628      	mov	r0, r5
 800e52e:	f7ff fecd 	bl	800e2cc <__cvt>
 800e532:	9b06      	ldr	r3, [sp, #24]
 800e534:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e536:	2b47      	cmp	r3, #71	; 0x47
 800e538:	4680      	mov	r8, r0
 800e53a:	d108      	bne.n	800e54e <_printf_float+0x142>
 800e53c:	1cc8      	adds	r0, r1, #3
 800e53e:	db02      	blt.n	800e546 <_printf_float+0x13a>
 800e540:	6863      	ldr	r3, [r4, #4]
 800e542:	4299      	cmp	r1, r3
 800e544:	dd41      	ble.n	800e5ca <_printf_float+0x1be>
 800e546:	f1ab 0b02 	sub.w	fp, fp, #2
 800e54a:	fa5f fb8b 	uxtb.w	fp, fp
 800e54e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e552:	d820      	bhi.n	800e596 <_printf_float+0x18a>
 800e554:	3901      	subs	r1, #1
 800e556:	465a      	mov	r2, fp
 800e558:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e55c:	9109      	str	r1, [sp, #36]	; 0x24
 800e55e:	f7ff ff17 	bl	800e390 <__exponent>
 800e562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e564:	1813      	adds	r3, r2, r0
 800e566:	2a01      	cmp	r2, #1
 800e568:	4681      	mov	r9, r0
 800e56a:	6123      	str	r3, [r4, #16]
 800e56c:	dc02      	bgt.n	800e574 <_printf_float+0x168>
 800e56e:	6822      	ldr	r2, [r4, #0]
 800e570:	07d2      	lsls	r2, r2, #31
 800e572:	d501      	bpl.n	800e578 <_printf_float+0x16c>
 800e574:	3301      	adds	r3, #1
 800e576:	6123      	str	r3, [r4, #16]
 800e578:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d09c      	beq.n	800e4ba <_printf_float+0xae>
 800e580:	232d      	movs	r3, #45	; 0x2d
 800e582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e586:	e798      	b.n	800e4ba <_printf_float+0xae>
 800e588:	9a06      	ldr	r2, [sp, #24]
 800e58a:	2a47      	cmp	r2, #71	; 0x47
 800e58c:	d1be      	bne.n	800e50c <_printf_float+0x100>
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d1bc      	bne.n	800e50c <_printf_float+0x100>
 800e592:	2301      	movs	r3, #1
 800e594:	e7b9      	b.n	800e50a <_printf_float+0xfe>
 800e596:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e59a:	d118      	bne.n	800e5ce <_printf_float+0x1c2>
 800e59c:	2900      	cmp	r1, #0
 800e59e:	6863      	ldr	r3, [r4, #4]
 800e5a0:	dd0b      	ble.n	800e5ba <_printf_float+0x1ae>
 800e5a2:	6121      	str	r1, [r4, #16]
 800e5a4:	b913      	cbnz	r3, 800e5ac <_printf_float+0x1a0>
 800e5a6:	6822      	ldr	r2, [r4, #0]
 800e5a8:	07d0      	lsls	r0, r2, #31
 800e5aa:	d502      	bpl.n	800e5b2 <_printf_float+0x1a6>
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	440b      	add	r3, r1
 800e5b0:	6123      	str	r3, [r4, #16]
 800e5b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800e5b4:	f04f 0900 	mov.w	r9, #0
 800e5b8:	e7de      	b.n	800e578 <_printf_float+0x16c>
 800e5ba:	b913      	cbnz	r3, 800e5c2 <_printf_float+0x1b6>
 800e5bc:	6822      	ldr	r2, [r4, #0]
 800e5be:	07d2      	lsls	r2, r2, #31
 800e5c0:	d501      	bpl.n	800e5c6 <_printf_float+0x1ba>
 800e5c2:	3302      	adds	r3, #2
 800e5c4:	e7f4      	b.n	800e5b0 <_printf_float+0x1a4>
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e7f2      	b.n	800e5b0 <_printf_float+0x1a4>
 800e5ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e5ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5d0:	4299      	cmp	r1, r3
 800e5d2:	db05      	blt.n	800e5e0 <_printf_float+0x1d4>
 800e5d4:	6823      	ldr	r3, [r4, #0]
 800e5d6:	6121      	str	r1, [r4, #16]
 800e5d8:	07d8      	lsls	r0, r3, #31
 800e5da:	d5ea      	bpl.n	800e5b2 <_printf_float+0x1a6>
 800e5dc:	1c4b      	adds	r3, r1, #1
 800e5de:	e7e7      	b.n	800e5b0 <_printf_float+0x1a4>
 800e5e0:	2900      	cmp	r1, #0
 800e5e2:	bfd4      	ite	le
 800e5e4:	f1c1 0202 	rsble	r2, r1, #2
 800e5e8:	2201      	movgt	r2, #1
 800e5ea:	4413      	add	r3, r2
 800e5ec:	e7e0      	b.n	800e5b0 <_printf_float+0x1a4>
 800e5ee:	6823      	ldr	r3, [r4, #0]
 800e5f0:	055a      	lsls	r2, r3, #21
 800e5f2:	d407      	bmi.n	800e604 <_printf_float+0x1f8>
 800e5f4:	6923      	ldr	r3, [r4, #16]
 800e5f6:	4642      	mov	r2, r8
 800e5f8:	4631      	mov	r1, r6
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	47b8      	blx	r7
 800e5fe:	3001      	adds	r0, #1
 800e600:	d12c      	bne.n	800e65c <_printf_float+0x250>
 800e602:	e764      	b.n	800e4ce <_printf_float+0xc2>
 800e604:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e608:	f240 80e0 	bls.w	800e7cc <_printf_float+0x3c0>
 800e60c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e610:	2200      	movs	r2, #0
 800e612:	2300      	movs	r3, #0
 800e614:	f7f2 fa88 	bl	8000b28 <__aeabi_dcmpeq>
 800e618:	2800      	cmp	r0, #0
 800e61a:	d034      	beq.n	800e686 <_printf_float+0x27a>
 800e61c:	4a37      	ldr	r2, [pc, #220]	; (800e6fc <_printf_float+0x2f0>)
 800e61e:	2301      	movs	r3, #1
 800e620:	4631      	mov	r1, r6
 800e622:	4628      	mov	r0, r5
 800e624:	47b8      	blx	r7
 800e626:	3001      	adds	r0, #1
 800e628:	f43f af51 	beq.w	800e4ce <_printf_float+0xc2>
 800e62c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e630:	429a      	cmp	r2, r3
 800e632:	db02      	blt.n	800e63a <_printf_float+0x22e>
 800e634:	6823      	ldr	r3, [r4, #0]
 800e636:	07d8      	lsls	r0, r3, #31
 800e638:	d510      	bpl.n	800e65c <_printf_float+0x250>
 800e63a:	ee18 3a10 	vmov	r3, s16
 800e63e:	4652      	mov	r2, sl
 800e640:	4631      	mov	r1, r6
 800e642:	4628      	mov	r0, r5
 800e644:	47b8      	blx	r7
 800e646:	3001      	adds	r0, #1
 800e648:	f43f af41 	beq.w	800e4ce <_printf_float+0xc2>
 800e64c:	f04f 0800 	mov.w	r8, #0
 800e650:	f104 091a 	add.w	r9, r4, #26
 800e654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e656:	3b01      	subs	r3, #1
 800e658:	4543      	cmp	r3, r8
 800e65a:	dc09      	bgt.n	800e670 <_printf_float+0x264>
 800e65c:	6823      	ldr	r3, [r4, #0]
 800e65e:	079b      	lsls	r3, r3, #30
 800e660:	f100 8105 	bmi.w	800e86e <_printf_float+0x462>
 800e664:	68e0      	ldr	r0, [r4, #12]
 800e666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e668:	4298      	cmp	r0, r3
 800e66a:	bfb8      	it	lt
 800e66c:	4618      	movlt	r0, r3
 800e66e:	e730      	b.n	800e4d2 <_printf_float+0xc6>
 800e670:	2301      	movs	r3, #1
 800e672:	464a      	mov	r2, r9
 800e674:	4631      	mov	r1, r6
 800e676:	4628      	mov	r0, r5
 800e678:	47b8      	blx	r7
 800e67a:	3001      	adds	r0, #1
 800e67c:	f43f af27 	beq.w	800e4ce <_printf_float+0xc2>
 800e680:	f108 0801 	add.w	r8, r8, #1
 800e684:	e7e6      	b.n	800e654 <_printf_float+0x248>
 800e686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e688:	2b00      	cmp	r3, #0
 800e68a:	dc39      	bgt.n	800e700 <_printf_float+0x2f4>
 800e68c:	4a1b      	ldr	r2, [pc, #108]	; (800e6fc <_printf_float+0x2f0>)
 800e68e:	2301      	movs	r3, #1
 800e690:	4631      	mov	r1, r6
 800e692:	4628      	mov	r0, r5
 800e694:	47b8      	blx	r7
 800e696:	3001      	adds	r0, #1
 800e698:	f43f af19 	beq.w	800e4ce <_printf_float+0xc2>
 800e69c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	d102      	bne.n	800e6aa <_printf_float+0x29e>
 800e6a4:	6823      	ldr	r3, [r4, #0]
 800e6a6:	07d9      	lsls	r1, r3, #31
 800e6a8:	d5d8      	bpl.n	800e65c <_printf_float+0x250>
 800e6aa:	ee18 3a10 	vmov	r3, s16
 800e6ae:	4652      	mov	r2, sl
 800e6b0:	4631      	mov	r1, r6
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	47b8      	blx	r7
 800e6b6:	3001      	adds	r0, #1
 800e6b8:	f43f af09 	beq.w	800e4ce <_printf_float+0xc2>
 800e6bc:	f04f 0900 	mov.w	r9, #0
 800e6c0:	f104 0a1a 	add.w	sl, r4, #26
 800e6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6c6:	425b      	negs	r3, r3
 800e6c8:	454b      	cmp	r3, r9
 800e6ca:	dc01      	bgt.n	800e6d0 <_printf_float+0x2c4>
 800e6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6ce:	e792      	b.n	800e5f6 <_printf_float+0x1ea>
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	4652      	mov	r2, sl
 800e6d4:	4631      	mov	r1, r6
 800e6d6:	4628      	mov	r0, r5
 800e6d8:	47b8      	blx	r7
 800e6da:	3001      	adds	r0, #1
 800e6dc:	f43f aef7 	beq.w	800e4ce <_printf_float+0xc2>
 800e6e0:	f109 0901 	add.w	r9, r9, #1
 800e6e4:	e7ee      	b.n	800e6c4 <_printf_float+0x2b8>
 800e6e6:	bf00      	nop
 800e6e8:	7fefffff 	.word	0x7fefffff
 800e6ec:	08012e68 	.word	0x08012e68
 800e6f0:	08012e6c 	.word	0x08012e6c
 800e6f4:	08012e74 	.word	0x08012e74
 800e6f8:	08012e70 	.word	0x08012e70
 800e6fc:	08012e78 	.word	0x08012e78
 800e700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e704:	429a      	cmp	r2, r3
 800e706:	bfa8      	it	ge
 800e708:	461a      	movge	r2, r3
 800e70a:	2a00      	cmp	r2, #0
 800e70c:	4691      	mov	r9, r2
 800e70e:	dc37      	bgt.n	800e780 <_printf_float+0x374>
 800e710:	f04f 0b00 	mov.w	fp, #0
 800e714:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e718:	f104 021a 	add.w	r2, r4, #26
 800e71c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e71e:	9305      	str	r3, [sp, #20]
 800e720:	eba3 0309 	sub.w	r3, r3, r9
 800e724:	455b      	cmp	r3, fp
 800e726:	dc33      	bgt.n	800e790 <_printf_float+0x384>
 800e728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e72c:	429a      	cmp	r2, r3
 800e72e:	db3b      	blt.n	800e7a8 <_printf_float+0x39c>
 800e730:	6823      	ldr	r3, [r4, #0]
 800e732:	07da      	lsls	r2, r3, #31
 800e734:	d438      	bmi.n	800e7a8 <_printf_float+0x39c>
 800e736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e738:	9a05      	ldr	r2, [sp, #20]
 800e73a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e73c:	1a9a      	subs	r2, r3, r2
 800e73e:	eba3 0901 	sub.w	r9, r3, r1
 800e742:	4591      	cmp	r9, r2
 800e744:	bfa8      	it	ge
 800e746:	4691      	movge	r9, r2
 800e748:	f1b9 0f00 	cmp.w	r9, #0
 800e74c:	dc35      	bgt.n	800e7ba <_printf_float+0x3ae>
 800e74e:	f04f 0800 	mov.w	r8, #0
 800e752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e756:	f104 0a1a 	add.w	sl, r4, #26
 800e75a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e75e:	1a9b      	subs	r3, r3, r2
 800e760:	eba3 0309 	sub.w	r3, r3, r9
 800e764:	4543      	cmp	r3, r8
 800e766:	f77f af79 	ble.w	800e65c <_printf_float+0x250>
 800e76a:	2301      	movs	r3, #1
 800e76c:	4652      	mov	r2, sl
 800e76e:	4631      	mov	r1, r6
 800e770:	4628      	mov	r0, r5
 800e772:	47b8      	blx	r7
 800e774:	3001      	adds	r0, #1
 800e776:	f43f aeaa 	beq.w	800e4ce <_printf_float+0xc2>
 800e77a:	f108 0801 	add.w	r8, r8, #1
 800e77e:	e7ec      	b.n	800e75a <_printf_float+0x34e>
 800e780:	4613      	mov	r3, r2
 800e782:	4631      	mov	r1, r6
 800e784:	4642      	mov	r2, r8
 800e786:	4628      	mov	r0, r5
 800e788:	47b8      	blx	r7
 800e78a:	3001      	adds	r0, #1
 800e78c:	d1c0      	bne.n	800e710 <_printf_float+0x304>
 800e78e:	e69e      	b.n	800e4ce <_printf_float+0xc2>
 800e790:	2301      	movs	r3, #1
 800e792:	4631      	mov	r1, r6
 800e794:	4628      	mov	r0, r5
 800e796:	9205      	str	r2, [sp, #20]
 800e798:	47b8      	blx	r7
 800e79a:	3001      	adds	r0, #1
 800e79c:	f43f ae97 	beq.w	800e4ce <_printf_float+0xc2>
 800e7a0:	9a05      	ldr	r2, [sp, #20]
 800e7a2:	f10b 0b01 	add.w	fp, fp, #1
 800e7a6:	e7b9      	b.n	800e71c <_printf_float+0x310>
 800e7a8:	ee18 3a10 	vmov	r3, s16
 800e7ac:	4652      	mov	r2, sl
 800e7ae:	4631      	mov	r1, r6
 800e7b0:	4628      	mov	r0, r5
 800e7b2:	47b8      	blx	r7
 800e7b4:	3001      	adds	r0, #1
 800e7b6:	d1be      	bne.n	800e736 <_printf_float+0x32a>
 800e7b8:	e689      	b.n	800e4ce <_printf_float+0xc2>
 800e7ba:	9a05      	ldr	r2, [sp, #20]
 800e7bc:	464b      	mov	r3, r9
 800e7be:	4442      	add	r2, r8
 800e7c0:	4631      	mov	r1, r6
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	47b8      	blx	r7
 800e7c6:	3001      	adds	r0, #1
 800e7c8:	d1c1      	bne.n	800e74e <_printf_float+0x342>
 800e7ca:	e680      	b.n	800e4ce <_printf_float+0xc2>
 800e7cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7ce:	2a01      	cmp	r2, #1
 800e7d0:	dc01      	bgt.n	800e7d6 <_printf_float+0x3ca>
 800e7d2:	07db      	lsls	r3, r3, #31
 800e7d4:	d538      	bpl.n	800e848 <_printf_float+0x43c>
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	4642      	mov	r2, r8
 800e7da:	4631      	mov	r1, r6
 800e7dc:	4628      	mov	r0, r5
 800e7de:	47b8      	blx	r7
 800e7e0:	3001      	adds	r0, #1
 800e7e2:	f43f ae74 	beq.w	800e4ce <_printf_float+0xc2>
 800e7e6:	ee18 3a10 	vmov	r3, s16
 800e7ea:	4652      	mov	r2, sl
 800e7ec:	4631      	mov	r1, r6
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	47b8      	blx	r7
 800e7f2:	3001      	adds	r0, #1
 800e7f4:	f43f ae6b 	beq.w	800e4ce <_printf_float+0xc2>
 800e7f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	2300      	movs	r3, #0
 800e800:	f7f2 f992 	bl	8000b28 <__aeabi_dcmpeq>
 800e804:	b9d8      	cbnz	r0, 800e83e <_printf_float+0x432>
 800e806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e808:	f108 0201 	add.w	r2, r8, #1
 800e80c:	3b01      	subs	r3, #1
 800e80e:	4631      	mov	r1, r6
 800e810:	4628      	mov	r0, r5
 800e812:	47b8      	blx	r7
 800e814:	3001      	adds	r0, #1
 800e816:	d10e      	bne.n	800e836 <_printf_float+0x42a>
 800e818:	e659      	b.n	800e4ce <_printf_float+0xc2>
 800e81a:	2301      	movs	r3, #1
 800e81c:	4652      	mov	r2, sl
 800e81e:	4631      	mov	r1, r6
 800e820:	4628      	mov	r0, r5
 800e822:	47b8      	blx	r7
 800e824:	3001      	adds	r0, #1
 800e826:	f43f ae52 	beq.w	800e4ce <_printf_float+0xc2>
 800e82a:	f108 0801 	add.w	r8, r8, #1
 800e82e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e830:	3b01      	subs	r3, #1
 800e832:	4543      	cmp	r3, r8
 800e834:	dcf1      	bgt.n	800e81a <_printf_float+0x40e>
 800e836:	464b      	mov	r3, r9
 800e838:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e83c:	e6dc      	b.n	800e5f8 <_printf_float+0x1ec>
 800e83e:	f04f 0800 	mov.w	r8, #0
 800e842:	f104 0a1a 	add.w	sl, r4, #26
 800e846:	e7f2      	b.n	800e82e <_printf_float+0x422>
 800e848:	2301      	movs	r3, #1
 800e84a:	4642      	mov	r2, r8
 800e84c:	e7df      	b.n	800e80e <_printf_float+0x402>
 800e84e:	2301      	movs	r3, #1
 800e850:	464a      	mov	r2, r9
 800e852:	4631      	mov	r1, r6
 800e854:	4628      	mov	r0, r5
 800e856:	47b8      	blx	r7
 800e858:	3001      	adds	r0, #1
 800e85a:	f43f ae38 	beq.w	800e4ce <_printf_float+0xc2>
 800e85e:	f108 0801 	add.w	r8, r8, #1
 800e862:	68e3      	ldr	r3, [r4, #12]
 800e864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e866:	1a5b      	subs	r3, r3, r1
 800e868:	4543      	cmp	r3, r8
 800e86a:	dcf0      	bgt.n	800e84e <_printf_float+0x442>
 800e86c:	e6fa      	b.n	800e664 <_printf_float+0x258>
 800e86e:	f04f 0800 	mov.w	r8, #0
 800e872:	f104 0919 	add.w	r9, r4, #25
 800e876:	e7f4      	b.n	800e862 <_printf_float+0x456>

0800e878 <_printf_common>:
 800e878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e87c:	4616      	mov	r6, r2
 800e87e:	4699      	mov	r9, r3
 800e880:	688a      	ldr	r2, [r1, #8]
 800e882:	690b      	ldr	r3, [r1, #16]
 800e884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e888:	4293      	cmp	r3, r2
 800e88a:	bfb8      	it	lt
 800e88c:	4613      	movlt	r3, r2
 800e88e:	6033      	str	r3, [r6, #0]
 800e890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e894:	4607      	mov	r7, r0
 800e896:	460c      	mov	r4, r1
 800e898:	b10a      	cbz	r2, 800e89e <_printf_common+0x26>
 800e89a:	3301      	adds	r3, #1
 800e89c:	6033      	str	r3, [r6, #0]
 800e89e:	6823      	ldr	r3, [r4, #0]
 800e8a0:	0699      	lsls	r1, r3, #26
 800e8a2:	bf42      	ittt	mi
 800e8a4:	6833      	ldrmi	r3, [r6, #0]
 800e8a6:	3302      	addmi	r3, #2
 800e8a8:	6033      	strmi	r3, [r6, #0]
 800e8aa:	6825      	ldr	r5, [r4, #0]
 800e8ac:	f015 0506 	ands.w	r5, r5, #6
 800e8b0:	d106      	bne.n	800e8c0 <_printf_common+0x48>
 800e8b2:	f104 0a19 	add.w	sl, r4, #25
 800e8b6:	68e3      	ldr	r3, [r4, #12]
 800e8b8:	6832      	ldr	r2, [r6, #0]
 800e8ba:	1a9b      	subs	r3, r3, r2
 800e8bc:	42ab      	cmp	r3, r5
 800e8be:	dc26      	bgt.n	800e90e <_printf_common+0x96>
 800e8c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e8c4:	1e13      	subs	r3, r2, #0
 800e8c6:	6822      	ldr	r2, [r4, #0]
 800e8c8:	bf18      	it	ne
 800e8ca:	2301      	movne	r3, #1
 800e8cc:	0692      	lsls	r2, r2, #26
 800e8ce:	d42b      	bmi.n	800e928 <_printf_common+0xb0>
 800e8d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e8d4:	4649      	mov	r1, r9
 800e8d6:	4638      	mov	r0, r7
 800e8d8:	47c0      	blx	r8
 800e8da:	3001      	adds	r0, #1
 800e8dc:	d01e      	beq.n	800e91c <_printf_common+0xa4>
 800e8de:	6823      	ldr	r3, [r4, #0]
 800e8e0:	68e5      	ldr	r5, [r4, #12]
 800e8e2:	6832      	ldr	r2, [r6, #0]
 800e8e4:	f003 0306 	and.w	r3, r3, #6
 800e8e8:	2b04      	cmp	r3, #4
 800e8ea:	bf08      	it	eq
 800e8ec:	1aad      	subeq	r5, r5, r2
 800e8ee:	68a3      	ldr	r3, [r4, #8]
 800e8f0:	6922      	ldr	r2, [r4, #16]
 800e8f2:	bf0c      	ite	eq
 800e8f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e8f8:	2500      	movne	r5, #0
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	bfc4      	itt	gt
 800e8fe:	1a9b      	subgt	r3, r3, r2
 800e900:	18ed      	addgt	r5, r5, r3
 800e902:	2600      	movs	r6, #0
 800e904:	341a      	adds	r4, #26
 800e906:	42b5      	cmp	r5, r6
 800e908:	d11a      	bne.n	800e940 <_printf_common+0xc8>
 800e90a:	2000      	movs	r0, #0
 800e90c:	e008      	b.n	800e920 <_printf_common+0xa8>
 800e90e:	2301      	movs	r3, #1
 800e910:	4652      	mov	r2, sl
 800e912:	4649      	mov	r1, r9
 800e914:	4638      	mov	r0, r7
 800e916:	47c0      	blx	r8
 800e918:	3001      	adds	r0, #1
 800e91a:	d103      	bne.n	800e924 <_printf_common+0xac>
 800e91c:	f04f 30ff 	mov.w	r0, #4294967295
 800e920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e924:	3501      	adds	r5, #1
 800e926:	e7c6      	b.n	800e8b6 <_printf_common+0x3e>
 800e928:	18e1      	adds	r1, r4, r3
 800e92a:	1c5a      	adds	r2, r3, #1
 800e92c:	2030      	movs	r0, #48	; 0x30
 800e92e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e932:	4422      	add	r2, r4
 800e934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e93c:	3302      	adds	r3, #2
 800e93e:	e7c7      	b.n	800e8d0 <_printf_common+0x58>
 800e940:	2301      	movs	r3, #1
 800e942:	4622      	mov	r2, r4
 800e944:	4649      	mov	r1, r9
 800e946:	4638      	mov	r0, r7
 800e948:	47c0      	blx	r8
 800e94a:	3001      	adds	r0, #1
 800e94c:	d0e6      	beq.n	800e91c <_printf_common+0xa4>
 800e94e:	3601      	adds	r6, #1
 800e950:	e7d9      	b.n	800e906 <_printf_common+0x8e>
	...

0800e954 <_printf_i>:
 800e954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e958:	7e0f      	ldrb	r7, [r1, #24]
 800e95a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e95c:	2f78      	cmp	r7, #120	; 0x78
 800e95e:	4691      	mov	r9, r2
 800e960:	4680      	mov	r8, r0
 800e962:	460c      	mov	r4, r1
 800e964:	469a      	mov	sl, r3
 800e966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e96a:	d807      	bhi.n	800e97c <_printf_i+0x28>
 800e96c:	2f62      	cmp	r7, #98	; 0x62
 800e96e:	d80a      	bhi.n	800e986 <_printf_i+0x32>
 800e970:	2f00      	cmp	r7, #0
 800e972:	f000 80d8 	beq.w	800eb26 <_printf_i+0x1d2>
 800e976:	2f58      	cmp	r7, #88	; 0x58
 800e978:	f000 80a3 	beq.w	800eac2 <_printf_i+0x16e>
 800e97c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e984:	e03a      	b.n	800e9fc <_printf_i+0xa8>
 800e986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e98a:	2b15      	cmp	r3, #21
 800e98c:	d8f6      	bhi.n	800e97c <_printf_i+0x28>
 800e98e:	a101      	add	r1, pc, #4	; (adr r1, 800e994 <_printf_i+0x40>)
 800e990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e994:	0800e9ed 	.word	0x0800e9ed
 800e998:	0800ea01 	.word	0x0800ea01
 800e99c:	0800e97d 	.word	0x0800e97d
 800e9a0:	0800e97d 	.word	0x0800e97d
 800e9a4:	0800e97d 	.word	0x0800e97d
 800e9a8:	0800e97d 	.word	0x0800e97d
 800e9ac:	0800ea01 	.word	0x0800ea01
 800e9b0:	0800e97d 	.word	0x0800e97d
 800e9b4:	0800e97d 	.word	0x0800e97d
 800e9b8:	0800e97d 	.word	0x0800e97d
 800e9bc:	0800e97d 	.word	0x0800e97d
 800e9c0:	0800eb0d 	.word	0x0800eb0d
 800e9c4:	0800ea31 	.word	0x0800ea31
 800e9c8:	0800eaef 	.word	0x0800eaef
 800e9cc:	0800e97d 	.word	0x0800e97d
 800e9d0:	0800e97d 	.word	0x0800e97d
 800e9d4:	0800eb2f 	.word	0x0800eb2f
 800e9d8:	0800e97d 	.word	0x0800e97d
 800e9dc:	0800ea31 	.word	0x0800ea31
 800e9e0:	0800e97d 	.word	0x0800e97d
 800e9e4:	0800e97d 	.word	0x0800e97d
 800e9e8:	0800eaf7 	.word	0x0800eaf7
 800e9ec:	682b      	ldr	r3, [r5, #0]
 800e9ee:	1d1a      	adds	r2, r3, #4
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	602a      	str	r2, [r5, #0]
 800e9f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e9f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	e0a3      	b.n	800eb48 <_printf_i+0x1f4>
 800ea00:	6820      	ldr	r0, [r4, #0]
 800ea02:	6829      	ldr	r1, [r5, #0]
 800ea04:	0606      	lsls	r6, r0, #24
 800ea06:	f101 0304 	add.w	r3, r1, #4
 800ea0a:	d50a      	bpl.n	800ea22 <_printf_i+0xce>
 800ea0c:	680e      	ldr	r6, [r1, #0]
 800ea0e:	602b      	str	r3, [r5, #0]
 800ea10:	2e00      	cmp	r6, #0
 800ea12:	da03      	bge.n	800ea1c <_printf_i+0xc8>
 800ea14:	232d      	movs	r3, #45	; 0x2d
 800ea16:	4276      	negs	r6, r6
 800ea18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea1c:	485e      	ldr	r0, [pc, #376]	; (800eb98 <_printf_i+0x244>)
 800ea1e:	230a      	movs	r3, #10
 800ea20:	e019      	b.n	800ea56 <_printf_i+0x102>
 800ea22:	680e      	ldr	r6, [r1, #0]
 800ea24:	602b      	str	r3, [r5, #0]
 800ea26:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ea2a:	bf18      	it	ne
 800ea2c:	b236      	sxthne	r6, r6
 800ea2e:	e7ef      	b.n	800ea10 <_printf_i+0xbc>
 800ea30:	682b      	ldr	r3, [r5, #0]
 800ea32:	6820      	ldr	r0, [r4, #0]
 800ea34:	1d19      	adds	r1, r3, #4
 800ea36:	6029      	str	r1, [r5, #0]
 800ea38:	0601      	lsls	r1, r0, #24
 800ea3a:	d501      	bpl.n	800ea40 <_printf_i+0xec>
 800ea3c:	681e      	ldr	r6, [r3, #0]
 800ea3e:	e002      	b.n	800ea46 <_printf_i+0xf2>
 800ea40:	0646      	lsls	r6, r0, #25
 800ea42:	d5fb      	bpl.n	800ea3c <_printf_i+0xe8>
 800ea44:	881e      	ldrh	r6, [r3, #0]
 800ea46:	4854      	ldr	r0, [pc, #336]	; (800eb98 <_printf_i+0x244>)
 800ea48:	2f6f      	cmp	r7, #111	; 0x6f
 800ea4a:	bf0c      	ite	eq
 800ea4c:	2308      	moveq	r3, #8
 800ea4e:	230a      	movne	r3, #10
 800ea50:	2100      	movs	r1, #0
 800ea52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea56:	6865      	ldr	r5, [r4, #4]
 800ea58:	60a5      	str	r5, [r4, #8]
 800ea5a:	2d00      	cmp	r5, #0
 800ea5c:	bfa2      	ittt	ge
 800ea5e:	6821      	ldrge	r1, [r4, #0]
 800ea60:	f021 0104 	bicge.w	r1, r1, #4
 800ea64:	6021      	strge	r1, [r4, #0]
 800ea66:	b90e      	cbnz	r6, 800ea6c <_printf_i+0x118>
 800ea68:	2d00      	cmp	r5, #0
 800ea6a:	d04d      	beq.n	800eb08 <_printf_i+0x1b4>
 800ea6c:	4615      	mov	r5, r2
 800ea6e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ea72:	fb03 6711 	mls	r7, r3, r1, r6
 800ea76:	5dc7      	ldrb	r7, [r0, r7]
 800ea78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ea7c:	4637      	mov	r7, r6
 800ea7e:	42bb      	cmp	r3, r7
 800ea80:	460e      	mov	r6, r1
 800ea82:	d9f4      	bls.n	800ea6e <_printf_i+0x11a>
 800ea84:	2b08      	cmp	r3, #8
 800ea86:	d10b      	bne.n	800eaa0 <_printf_i+0x14c>
 800ea88:	6823      	ldr	r3, [r4, #0]
 800ea8a:	07de      	lsls	r6, r3, #31
 800ea8c:	d508      	bpl.n	800eaa0 <_printf_i+0x14c>
 800ea8e:	6923      	ldr	r3, [r4, #16]
 800ea90:	6861      	ldr	r1, [r4, #4]
 800ea92:	4299      	cmp	r1, r3
 800ea94:	bfde      	ittt	le
 800ea96:	2330      	movle	r3, #48	; 0x30
 800ea98:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ea9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eaa0:	1b52      	subs	r2, r2, r5
 800eaa2:	6122      	str	r2, [r4, #16]
 800eaa4:	f8cd a000 	str.w	sl, [sp]
 800eaa8:	464b      	mov	r3, r9
 800eaaa:	aa03      	add	r2, sp, #12
 800eaac:	4621      	mov	r1, r4
 800eaae:	4640      	mov	r0, r8
 800eab0:	f7ff fee2 	bl	800e878 <_printf_common>
 800eab4:	3001      	adds	r0, #1
 800eab6:	d14c      	bne.n	800eb52 <_printf_i+0x1fe>
 800eab8:	f04f 30ff 	mov.w	r0, #4294967295
 800eabc:	b004      	add	sp, #16
 800eabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eac2:	4835      	ldr	r0, [pc, #212]	; (800eb98 <_printf_i+0x244>)
 800eac4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800eac8:	6829      	ldr	r1, [r5, #0]
 800eaca:	6823      	ldr	r3, [r4, #0]
 800eacc:	f851 6b04 	ldr.w	r6, [r1], #4
 800ead0:	6029      	str	r1, [r5, #0]
 800ead2:	061d      	lsls	r5, r3, #24
 800ead4:	d514      	bpl.n	800eb00 <_printf_i+0x1ac>
 800ead6:	07df      	lsls	r7, r3, #31
 800ead8:	bf44      	itt	mi
 800eada:	f043 0320 	orrmi.w	r3, r3, #32
 800eade:	6023      	strmi	r3, [r4, #0]
 800eae0:	b91e      	cbnz	r6, 800eaea <_printf_i+0x196>
 800eae2:	6823      	ldr	r3, [r4, #0]
 800eae4:	f023 0320 	bic.w	r3, r3, #32
 800eae8:	6023      	str	r3, [r4, #0]
 800eaea:	2310      	movs	r3, #16
 800eaec:	e7b0      	b.n	800ea50 <_printf_i+0xfc>
 800eaee:	6823      	ldr	r3, [r4, #0]
 800eaf0:	f043 0320 	orr.w	r3, r3, #32
 800eaf4:	6023      	str	r3, [r4, #0]
 800eaf6:	2378      	movs	r3, #120	; 0x78
 800eaf8:	4828      	ldr	r0, [pc, #160]	; (800eb9c <_printf_i+0x248>)
 800eafa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eafe:	e7e3      	b.n	800eac8 <_printf_i+0x174>
 800eb00:	0659      	lsls	r1, r3, #25
 800eb02:	bf48      	it	mi
 800eb04:	b2b6      	uxthmi	r6, r6
 800eb06:	e7e6      	b.n	800ead6 <_printf_i+0x182>
 800eb08:	4615      	mov	r5, r2
 800eb0a:	e7bb      	b.n	800ea84 <_printf_i+0x130>
 800eb0c:	682b      	ldr	r3, [r5, #0]
 800eb0e:	6826      	ldr	r6, [r4, #0]
 800eb10:	6961      	ldr	r1, [r4, #20]
 800eb12:	1d18      	adds	r0, r3, #4
 800eb14:	6028      	str	r0, [r5, #0]
 800eb16:	0635      	lsls	r5, r6, #24
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	d501      	bpl.n	800eb20 <_printf_i+0x1cc>
 800eb1c:	6019      	str	r1, [r3, #0]
 800eb1e:	e002      	b.n	800eb26 <_printf_i+0x1d2>
 800eb20:	0670      	lsls	r0, r6, #25
 800eb22:	d5fb      	bpl.n	800eb1c <_printf_i+0x1c8>
 800eb24:	8019      	strh	r1, [r3, #0]
 800eb26:	2300      	movs	r3, #0
 800eb28:	6123      	str	r3, [r4, #16]
 800eb2a:	4615      	mov	r5, r2
 800eb2c:	e7ba      	b.n	800eaa4 <_printf_i+0x150>
 800eb2e:	682b      	ldr	r3, [r5, #0]
 800eb30:	1d1a      	adds	r2, r3, #4
 800eb32:	602a      	str	r2, [r5, #0]
 800eb34:	681d      	ldr	r5, [r3, #0]
 800eb36:	6862      	ldr	r2, [r4, #4]
 800eb38:	2100      	movs	r1, #0
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	f7f1 fb80 	bl	8000240 <memchr>
 800eb40:	b108      	cbz	r0, 800eb46 <_printf_i+0x1f2>
 800eb42:	1b40      	subs	r0, r0, r5
 800eb44:	6060      	str	r0, [r4, #4]
 800eb46:	6863      	ldr	r3, [r4, #4]
 800eb48:	6123      	str	r3, [r4, #16]
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb50:	e7a8      	b.n	800eaa4 <_printf_i+0x150>
 800eb52:	6923      	ldr	r3, [r4, #16]
 800eb54:	462a      	mov	r2, r5
 800eb56:	4649      	mov	r1, r9
 800eb58:	4640      	mov	r0, r8
 800eb5a:	47d0      	blx	sl
 800eb5c:	3001      	adds	r0, #1
 800eb5e:	d0ab      	beq.n	800eab8 <_printf_i+0x164>
 800eb60:	6823      	ldr	r3, [r4, #0]
 800eb62:	079b      	lsls	r3, r3, #30
 800eb64:	d413      	bmi.n	800eb8e <_printf_i+0x23a>
 800eb66:	68e0      	ldr	r0, [r4, #12]
 800eb68:	9b03      	ldr	r3, [sp, #12]
 800eb6a:	4298      	cmp	r0, r3
 800eb6c:	bfb8      	it	lt
 800eb6e:	4618      	movlt	r0, r3
 800eb70:	e7a4      	b.n	800eabc <_printf_i+0x168>
 800eb72:	2301      	movs	r3, #1
 800eb74:	4632      	mov	r2, r6
 800eb76:	4649      	mov	r1, r9
 800eb78:	4640      	mov	r0, r8
 800eb7a:	47d0      	blx	sl
 800eb7c:	3001      	adds	r0, #1
 800eb7e:	d09b      	beq.n	800eab8 <_printf_i+0x164>
 800eb80:	3501      	adds	r5, #1
 800eb82:	68e3      	ldr	r3, [r4, #12]
 800eb84:	9903      	ldr	r1, [sp, #12]
 800eb86:	1a5b      	subs	r3, r3, r1
 800eb88:	42ab      	cmp	r3, r5
 800eb8a:	dcf2      	bgt.n	800eb72 <_printf_i+0x21e>
 800eb8c:	e7eb      	b.n	800eb66 <_printf_i+0x212>
 800eb8e:	2500      	movs	r5, #0
 800eb90:	f104 0619 	add.w	r6, r4, #25
 800eb94:	e7f5      	b.n	800eb82 <_printf_i+0x22e>
 800eb96:	bf00      	nop
 800eb98:	08012e7a 	.word	0x08012e7a
 800eb9c:	08012e8b 	.word	0x08012e8b

0800eba0 <_scanf_float>:
 800eba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba4:	b087      	sub	sp, #28
 800eba6:	4617      	mov	r7, r2
 800eba8:	9303      	str	r3, [sp, #12]
 800ebaa:	688b      	ldr	r3, [r1, #8]
 800ebac:	1e5a      	subs	r2, r3, #1
 800ebae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ebb2:	bf83      	ittte	hi
 800ebb4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ebb8:	195b      	addhi	r3, r3, r5
 800ebba:	9302      	strhi	r3, [sp, #8]
 800ebbc:	2300      	movls	r3, #0
 800ebbe:	bf86      	itte	hi
 800ebc0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ebc4:	608b      	strhi	r3, [r1, #8]
 800ebc6:	9302      	strls	r3, [sp, #8]
 800ebc8:	680b      	ldr	r3, [r1, #0]
 800ebca:	468b      	mov	fp, r1
 800ebcc:	2500      	movs	r5, #0
 800ebce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ebd2:	f84b 3b1c 	str.w	r3, [fp], #28
 800ebd6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ebda:	4680      	mov	r8, r0
 800ebdc:	460c      	mov	r4, r1
 800ebde:	465e      	mov	r6, fp
 800ebe0:	46aa      	mov	sl, r5
 800ebe2:	46a9      	mov	r9, r5
 800ebe4:	9501      	str	r5, [sp, #4]
 800ebe6:	68a2      	ldr	r2, [r4, #8]
 800ebe8:	b152      	cbz	r2, 800ec00 <_scanf_float+0x60>
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	781b      	ldrb	r3, [r3, #0]
 800ebee:	2b4e      	cmp	r3, #78	; 0x4e
 800ebf0:	d864      	bhi.n	800ecbc <_scanf_float+0x11c>
 800ebf2:	2b40      	cmp	r3, #64	; 0x40
 800ebf4:	d83c      	bhi.n	800ec70 <_scanf_float+0xd0>
 800ebf6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ebfa:	b2c8      	uxtb	r0, r1
 800ebfc:	280e      	cmp	r0, #14
 800ebfe:	d93a      	bls.n	800ec76 <_scanf_float+0xd6>
 800ec00:	f1b9 0f00 	cmp.w	r9, #0
 800ec04:	d003      	beq.n	800ec0e <_scanf_float+0x6e>
 800ec06:	6823      	ldr	r3, [r4, #0]
 800ec08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ec0c:	6023      	str	r3, [r4, #0]
 800ec0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec12:	f1ba 0f01 	cmp.w	sl, #1
 800ec16:	f200 8113 	bhi.w	800ee40 <_scanf_float+0x2a0>
 800ec1a:	455e      	cmp	r6, fp
 800ec1c:	f200 8105 	bhi.w	800ee2a <_scanf_float+0x28a>
 800ec20:	2501      	movs	r5, #1
 800ec22:	4628      	mov	r0, r5
 800ec24:	b007      	add	sp, #28
 800ec26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec2a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ec2e:	2a0d      	cmp	r2, #13
 800ec30:	d8e6      	bhi.n	800ec00 <_scanf_float+0x60>
 800ec32:	a101      	add	r1, pc, #4	; (adr r1, 800ec38 <_scanf_float+0x98>)
 800ec34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ec38:	0800ed77 	.word	0x0800ed77
 800ec3c:	0800ec01 	.word	0x0800ec01
 800ec40:	0800ec01 	.word	0x0800ec01
 800ec44:	0800ec01 	.word	0x0800ec01
 800ec48:	0800edd7 	.word	0x0800edd7
 800ec4c:	0800edaf 	.word	0x0800edaf
 800ec50:	0800ec01 	.word	0x0800ec01
 800ec54:	0800ec01 	.word	0x0800ec01
 800ec58:	0800ed85 	.word	0x0800ed85
 800ec5c:	0800ec01 	.word	0x0800ec01
 800ec60:	0800ec01 	.word	0x0800ec01
 800ec64:	0800ec01 	.word	0x0800ec01
 800ec68:	0800ec01 	.word	0x0800ec01
 800ec6c:	0800ed3d 	.word	0x0800ed3d
 800ec70:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ec74:	e7db      	b.n	800ec2e <_scanf_float+0x8e>
 800ec76:	290e      	cmp	r1, #14
 800ec78:	d8c2      	bhi.n	800ec00 <_scanf_float+0x60>
 800ec7a:	a001      	add	r0, pc, #4	; (adr r0, 800ec80 <_scanf_float+0xe0>)
 800ec7c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ec80:	0800ed2f 	.word	0x0800ed2f
 800ec84:	0800ec01 	.word	0x0800ec01
 800ec88:	0800ed2f 	.word	0x0800ed2f
 800ec8c:	0800edc3 	.word	0x0800edc3
 800ec90:	0800ec01 	.word	0x0800ec01
 800ec94:	0800ecdd 	.word	0x0800ecdd
 800ec98:	0800ed19 	.word	0x0800ed19
 800ec9c:	0800ed19 	.word	0x0800ed19
 800eca0:	0800ed19 	.word	0x0800ed19
 800eca4:	0800ed19 	.word	0x0800ed19
 800eca8:	0800ed19 	.word	0x0800ed19
 800ecac:	0800ed19 	.word	0x0800ed19
 800ecb0:	0800ed19 	.word	0x0800ed19
 800ecb4:	0800ed19 	.word	0x0800ed19
 800ecb8:	0800ed19 	.word	0x0800ed19
 800ecbc:	2b6e      	cmp	r3, #110	; 0x6e
 800ecbe:	d809      	bhi.n	800ecd4 <_scanf_float+0x134>
 800ecc0:	2b60      	cmp	r3, #96	; 0x60
 800ecc2:	d8b2      	bhi.n	800ec2a <_scanf_float+0x8a>
 800ecc4:	2b54      	cmp	r3, #84	; 0x54
 800ecc6:	d077      	beq.n	800edb8 <_scanf_float+0x218>
 800ecc8:	2b59      	cmp	r3, #89	; 0x59
 800ecca:	d199      	bne.n	800ec00 <_scanf_float+0x60>
 800eccc:	2d07      	cmp	r5, #7
 800ecce:	d197      	bne.n	800ec00 <_scanf_float+0x60>
 800ecd0:	2508      	movs	r5, #8
 800ecd2:	e029      	b.n	800ed28 <_scanf_float+0x188>
 800ecd4:	2b74      	cmp	r3, #116	; 0x74
 800ecd6:	d06f      	beq.n	800edb8 <_scanf_float+0x218>
 800ecd8:	2b79      	cmp	r3, #121	; 0x79
 800ecda:	e7f6      	b.n	800ecca <_scanf_float+0x12a>
 800ecdc:	6821      	ldr	r1, [r4, #0]
 800ecde:	05c8      	lsls	r0, r1, #23
 800ece0:	d51a      	bpl.n	800ed18 <_scanf_float+0x178>
 800ece2:	9b02      	ldr	r3, [sp, #8]
 800ece4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ece8:	6021      	str	r1, [r4, #0]
 800ecea:	f109 0901 	add.w	r9, r9, #1
 800ecee:	b11b      	cbz	r3, 800ecf8 <_scanf_float+0x158>
 800ecf0:	3b01      	subs	r3, #1
 800ecf2:	3201      	adds	r2, #1
 800ecf4:	9302      	str	r3, [sp, #8]
 800ecf6:	60a2      	str	r2, [r4, #8]
 800ecf8:	68a3      	ldr	r3, [r4, #8]
 800ecfa:	3b01      	subs	r3, #1
 800ecfc:	60a3      	str	r3, [r4, #8]
 800ecfe:	6923      	ldr	r3, [r4, #16]
 800ed00:	3301      	adds	r3, #1
 800ed02:	6123      	str	r3, [r4, #16]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	3b01      	subs	r3, #1
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	607b      	str	r3, [r7, #4]
 800ed0c:	f340 8084 	ble.w	800ee18 <_scanf_float+0x278>
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	3301      	adds	r3, #1
 800ed14:	603b      	str	r3, [r7, #0]
 800ed16:	e766      	b.n	800ebe6 <_scanf_float+0x46>
 800ed18:	eb1a 0f05 	cmn.w	sl, r5
 800ed1c:	f47f af70 	bne.w	800ec00 <_scanf_float+0x60>
 800ed20:	6822      	ldr	r2, [r4, #0]
 800ed22:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ed26:	6022      	str	r2, [r4, #0]
 800ed28:	f806 3b01 	strb.w	r3, [r6], #1
 800ed2c:	e7e4      	b.n	800ecf8 <_scanf_float+0x158>
 800ed2e:	6822      	ldr	r2, [r4, #0]
 800ed30:	0610      	lsls	r0, r2, #24
 800ed32:	f57f af65 	bpl.w	800ec00 <_scanf_float+0x60>
 800ed36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ed3a:	e7f4      	b.n	800ed26 <_scanf_float+0x186>
 800ed3c:	f1ba 0f00 	cmp.w	sl, #0
 800ed40:	d10e      	bne.n	800ed60 <_scanf_float+0x1c0>
 800ed42:	f1b9 0f00 	cmp.w	r9, #0
 800ed46:	d10e      	bne.n	800ed66 <_scanf_float+0x1c6>
 800ed48:	6822      	ldr	r2, [r4, #0]
 800ed4a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ed4e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ed52:	d108      	bne.n	800ed66 <_scanf_float+0x1c6>
 800ed54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ed58:	6022      	str	r2, [r4, #0]
 800ed5a:	f04f 0a01 	mov.w	sl, #1
 800ed5e:	e7e3      	b.n	800ed28 <_scanf_float+0x188>
 800ed60:	f1ba 0f02 	cmp.w	sl, #2
 800ed64:	d055      	beq.n	800ee12 <_scanf_float+0x272>
 800ed66:	2d01      	cmp	r5, #1
 800ed68:	d002      	beq.n	800ed70 <_scanf_float+0x1d0>
 800ed6a:	2d04      	cmp	r5, #4
 800ed6c:	f47f af48 	bne.w	800ec00 <_scanf_float+0x60>
 800ed70:	3501      	adds	r5, #1
 800ed72:	b2ed      	uxtb	r5, r5
 800ed74:	e7d8      	b.n	800ed28 <_scanf_float+0x188>
 800ed76:	f1ba 0f01 	cmp.w	sl, #1
 800ed7a:	f47f af41 	bne.w	800ec00 <_scanf_float+0x60>
 800ed7e:	f04f 0a02 	mov.w	sl, #2
 800ed82:	e7d1      	b.n	800ed28 <_scanf_float+0x188>
 800ed84:	b97d      	cbnz	r5, 800eda6 <_scanf_float+0x206>
 800ed86:	f1b9 0f00 	cmp.w	r9, #0
 800ed8a:	f47f af3c 	bne.w	800ec06 <_scanf_float+0x66>
 800ed8e:	6822      	ldr	r2, [r4, #0]
 800ed90:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ed94:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ed98:	f47f af39 	bne.w	800ec0e <_scanf_float+0x6e>
 800ed9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eda0:	6022      	str	r2, [r4, #0]
 800eda2:	2501      	movs	r5, #1
 800eda4:	e7c0      	b.n	800ed28 <_scanf_float+0x188>
 800eda6:	2d03      	cmp	r5, #3
 800eda8:	d0e2      	beq.n	800ed70 <_scanf_float+0x1d0>
 800edaa:	2d05      	cmp	r5, #5
 800edac:	e7de      	b.n	800ed6c <_scanf_float+0x1cc>
 800edae:	2d02      	cmp	r5, #2
 800edb0:	f47f af26 	bne.w	800ec00 <_scanf_float+0x60>
 800edb4:	2503      	movs	r5, #3
 800edb6:	e7b7      	b.n	800ed28 <_scanf_float+0x188>
 800edb8:	2d06      	cmp	r5, #6
 800edba:	f47f af21 	bne.w	800ec00 <_scanf_float+0x60>
 800edbe:	2507      	movs	r5, #7
 800edc0:	e7b2      	b.n	800ed28 <_scanf_float+0x188>
 800edc2:	6822      	ldr	r2, [r4, #0]
 800edc4:	0591      	lsls	r1, r2, #22
 800edc6:	f57f af1b 	bpl.w	800ec00 <_scanf_float+0x60>
 800edca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800edce:	6022      	str	r2, [r4, #0]
 800edd0:	f8cd 9004 	str.w	r9, [sp, #4]
 800edd4:	e7a8      	b.n	800ed28 <_scanf_float+0x188>
 800edd6:	6822      	ldr	r2, [r4, #0]
 800edd8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800eddc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ede0:	d006      	beq.n	800edf0 <_scanf_float+0x250>
 800ede2:	0550      	lsls	r0, r2, #21
 800ede4:	f57f af0c 	bpl.w	800ec00 <_scanf_float+0x60>
 800ede8:	f1b9 0f00 	cmp.w	r9, #0
 800edec:	f43f af0f 	beq.w	800ec0e <_scanf_float+0x6e>
 800edf0:	0591      	lsls	r1, r2, #22
 800edf2:	bf58      	it	pl
 800edf4:	9901      	ldrpl	r1, [sp, #4]
 800edf6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800edfa:	bf58      	it	pl
 800edfc:	eba9 0101 	subpl.w	r1, r9, r1
 800ee00:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ee04:	bf58      	it	pl
 800ee06:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ee0a:	6022      	str	r2, [r4, #0]
 800ee0c:	f04f 0900 	mov.w	r9, #0
 800ee10:	e78a      	b.n	800ed28 <_scanf_float+0x188>
 800ee12:	f04f 0a03 	mov.w	sl, #3
 800ee16:	e787      	b.n	800ed28 <_scanf_float+0x188>
 800ee18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ee1c:	4639      	mov	r1, r7
 800ee1e:	4640      	mov	r0, r8
 800ee20:	4798      	blx	r3
 800ee22:	2800      	cmp	r0, #0
 800ee24:	f43f aedf 	beq.w	800ebe6 <_scanf_float+0x46>
 800ee28:	e6ea      	b.n	800ec00 <_scanf_float+0x60>
 800ee2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ee32:	463a      	mov	r2, r7
 800ee34:	4640      	mov	r0, r8
 800ee36:	4798      	blx	r3
 800ee38:	6923      	ldr	r3, [r4, #16]
 800ee3a:	3b01      	subs	r3, #1
 800ee3c:	6123      	str	r3, [r4, #16]
 800ee3e:	e6ec      	b.n	800ec1a <_scanf_float+0x7a>
 800ee40:	1e6b      	subs	r3, r5, #1
 800ee42:	2b06      	cmp	r3, #6
 800ee44:	d825      	bhi.n	800ee92 <_scanf_float+0x2f2>
 800ee46:	2d02      	cmp	r5, #2
 800ee48:	d836      	bhi.n	800eeb8 <_scanf_float+0x318>
 800ee4a:	455e      	cmp	r6, fp
 800ee4c:	f67f aee8 	bls.w	800ec20 <_scanf_float+0x80>
 800ee50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee54:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ee58:	463a      	mov	r2, r7
 800ee5a:	4640      	mov	r0, r8
 800ee5c:	4798      	blx	r3
 800ee5e:	6923      	ldr	r3, [r4, #16]
 800ee60:	3b01      	subs	r3, #1
 800ee62:	6123      	str	r3, [r4, #16]
 800ee64:	e7f1      	b.n	800ee4a <_scanf_float+0x2aa>
 800ee66:	9802      	ldr	r0, [sp, #8]
 800ee68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee6c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ee70:	9002      	str	r0, [sp, #8]
 800ee72:	463a      	mov	r2, r7
 800ee74:	4640      	mov	r0, r8
 800ee76:	4798      	blx	r3
 800ee78:	6923      	ldr	r3, [r4, #16]
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	6123      	str	r3, [r4, #16]
 800ee7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee82:	fa5f fa8a 	uxtb.w	sl, sl
 800ee86:	f1ba 0f02 	cmp.w	sl, #2
 800ee8a:	d1ec      	bne.n	800ee66 <_scanf_float+0x2c6>
 800ee8c:	3d03      	subs	r5, #3
 800ee8e:	b2ed      	uxtb	r5, r5
 800ee90:	1b76      	subs	r6, r6, r5
 800ee92:	6823      	ldr	r3, [r4, #0]
 800ee94:	05da      	lsls	r2, r3, #23
 800ee96:	d52f      	bpl.n	800eef8 <_scanf_float+0x358>
 800ee98:	055b      	lsls	r3, r3, #21
 800ee9a:	d510      	bpl.n	800eebe <_scanf_float+0x31e>
 800ee9c:	455e      	cmp	r6, fp
 800ee9e:	f67f aebf 	bls.w	800ec20 <_scanf_float+0x80>
 800eea2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eea6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eeaa:	463a      	mov	r2, r7
 800eeac:	4640      	mov	r0, r8
 800eeae:	4798      	blx	r3
 800eeb0:	6923      	ldr	r3, [r4, #16]
 800eeb2:	3b01      	subs	r3, #1
 800eeb4:	6123      	str	r3, [r4, #16]
 800eeb6:	e7f1      	b.n	800ee9c <_scanf_float+0x2fc>
 800eeb8:	46aa      	mov	sl, r5
 800eeba:	9602      	str	r6, [sp, #8]
 800eebc:	e7df      	b.n	800ee7e <_scanf_float+0x2de>
 800eebe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800eec2:	6923      	ldr	r3, [r4, #16]
 800eec4:	2965      	cmp	r1, #101	; 0x65
 800eec6:	f103 33ff 	add.w	r3, r3, #4294967295
 800eeca:	f106 35ff 	add.w	r5, r6, #4294967295
 800eece:	6123      	str	r3, [r4, #16]
 800eed0:	d00c      	beq.n	800eeec <_scanf_float+0x34c>
 800eed2:	2945      	cmp	r1, #69	; 0x45
 800eed4:	d00a      	beq.n	800eeec <_scanf_float+0x34c>
 800eed6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eeda:	463a      	mov	r2, r7
 800eedc:	4640      	mov	r0, r8
 800eede:	4798      	blx	r3
 800eee0:	6923      	ldr	r3, [r4, #16]
 800eee2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800eee6:	3b01      	subs	r3, #1
 800eee8:	1eb5      	subs	r5, r6, #2
 800eeea:	6123      	str	r3, [r4, #16]
 800eeec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eef0:	463a      	mov	r2, r7
 800eef2:	4640      	mov	r0, r8
 800eef4:	4798      	blx	r3
 800eef6:	462e      	mov	r6, r5
 800eef8:	6825      	ldr	r5, [r4, #0]
 800eefa:	f015 0510 	ands.w	r5, r5, #16
 800eefe:	d159      	bne.n	800efb4 <_scanf_float+0x414>
 800ef00:	7035      	strb	r5, [r6, #0]
 800ef02:	6823      	ldr	r3, [r4, #0]
 800ef04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ef08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef0c:	d11b      	bne.n	800ef46 <_scanf_float+0x3a6>
 800ef0e:	9b01      	ldr	r3, [sp, #4]
 800ef10:	454b      	cmp	r3, r9
 800ef12:	eba3 0209 	sub.w	r2, r3, r9
 800ef16:	d123      	bne.n	800ef60 <_scanf_float+0x3c0>
 800ef18:	2200      	movs	r2, #0
 800ef1a:	4659      	mov	r1, fp
 800ef1c:	4640      	mov	r0, r8
 800ef1e:	f000 fea1 	bl	800fc64 <_strtod_r>
 800ef22:	6822      	ldr	r2, [r4, #0]
 800ef24:	9b03      	ldr	r3, [sp, #12]
 800ef26:	f012 0f02 	tst.w	r2, #2
 800ef2a:	ec57 6b10 	vmov	r6, r7, d0
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	d021      	beq.n	800ef76 <_scanf_float+0x3d6>
 800ef32:	9903      	ldr	r1, [sp, #12]
 800ef34:	1d1a      	adds	r2, r3, #4
 800ef36:	600a      	str	r2, [r1, #0]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	e9c3 6700 	strd	r6, r7, [r3]
 800ef3e:	68e3      	ldr	r3, [r4, #12]
 800ef40:	3301      	adds	r3, #1
 800ef42:	60e3      	str	r3, [r4, #12]
 800ef44:	e66d      	b.n	800ec22 <_scanf_float+0x82>
 800ef46:	9b04      	ldr	r3, [sp, #16]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d0e5      	beq.n	800ef18 <_scanf_float+0x378>
 800ef4c:	9905      	ldr	r1, [sp, #20]
 800ef4e:	230a      	movs	r3, #10
 800ef50:	462a      	mov	r2, r5
 800ef52:	3101      	adds	r1, #1
 800ef54:	4640      	mov	r0, r8
 800ef56:	f000 ff0d 	bl	800fd74 <_strtol_r>
 800ef5a:	9b04      	ldr	r3, [sp, #16]
 800ef5c:	9e05      	ldr	r6, [sp, #20]
 800ef5e:	1ac2      	subs	r2, r0, r3
 800ef60:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ef64:	429e      	cmp	r6, r3
 800ef66:	bf28      	it	cs
 800ef68:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ef6c:	4912      	ldr	r1, [pc, #72]	; (800efb8 <_scanf_float+0x418>)
 800ef6e:	4630      	mov	r0, r6
 800ef70:	f000 f82c 	bl	800efcc <siprintf>
 800ef74:	e7d0      	b.n	800ef18 <_scanf_float+0x378>
 800ef76:	9903      	ldr	r1, [sp, #12]
 800ef78:	f012 0f04 	tst.w	r2, #4
 800ef7c:	f103 0204 	add.w	r2, r3, #4
 800ef80:	600a      	str	r2, [r1, #0]
 800ef82:	d1d9      	bne.n	800ef38 <_scanf_float+0x398>
 800ef84:	f8d3 8000 	ldr.w	r8, [r3]
 800ef88:	ee10 2a10 	vmov	r2, s0
 800ef8c:	ee10 0a10 	vmov	r0, s0
 800ef90:	463b      	mov	r3, r7
 800ef92:	4639      	mov	r1, r7
 800ef94:	f7f1 fdfa 	bl	8000b8c <__aeabi_dcmpun>
 800ef98:	b128      	cbz	r0, 800efa6 <_scanf_float+0x406>
 800ef9a:	4808      	ldr	r0, [pc, #32]	; (800efbc <_scanf_float+0x41c>)
 800ef9c:	f000 f810 	bl	800efc0 <nanf>
 800efa0:	ed88 0a00 	vstr	s0, [r8]
 800efa4:	e7cb      	b.n	800ef3e <_scanf_float+0x39e>
 800efa6:	4630      	mov	r0, r6
 800efa8:	4639      	mov	r1, r7
 800efaa:	f7f1 fe4d 	bl	8000c48 <__aeabi_d2f>
 800efae:	f8c8 0000 	str.w	r0, [r8]
 800efb2:	e7c4      	b.n	800ef3e <_scanf_float+0x39e>
 800efb4:	2500      	movs	r5, #0
 800efb6:	e634      	b.n	800ec22 <_scanf_float+0x82>
 800efb8:	08012e9c 	.word	0x08012e9c
 800efbc:	080132a8 	.word	0x080132a8

0800efc0 <nanf>:
 800efc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800efc8 <nanf+0x8>
 800efc4:	4770      	bx	lr
 800efc6:	bf00      	nop
 800efc8:	7fc00000 	.word	0x7fc00000

0800efcc <siprintf>:
 800efcc:	b40e      	push	{r1, r2, r3}
 800efce:	b500      	push	{lr}
 800efd0:	b09c      	sub	sp, #112	; 0x70
 800efd2:	ab1d      	add	r3, sp, #116	; 0x74
 800efd4:	9002      	str	r0, [sp, #8]
 800efd6:	9006      	str	r0, [sp, #24]
 800efd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800efdc:	4809      	ldr	r0, [pc, #36]	; (800f004 <siprintf+0x38>)
 800efde:	9107      	str	r1, [sp, #28]
 800efe0:	9104      	str	r1, [sp, #16]
 800efe2:	4909      	ldr	r1, [pc, #36]	; (800f008 <siprintf+0x3c>)
 800efe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800efe8:	9105      	str	r1, [sp, #20]
 800efea:	6800      	ldr	r0, [r0, #0]
 800efec:	9301      	str	r3, [sp, #4]
 800efee:	a902      	add	r1, sp, #8
 800eff0:	f002 fede 	bl	8011db0 <_svfiprintf_r>
 800eff4:	9b02      	ldr	r3, [sp, #8]
 800eff6:	2200      	movs	r2, #0
 800eff8:	701a      	strb	r2, [r3, #0]
 800effa:	b01c      	add	sp, #112	; 0x70
 800effc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f000:	b003      	add	sp, #12
 800f002:	4770      	bx	lr
 800f004:	200002c8 	.word	0x200002c8
 800f008:	ffff0208 	.word	0xffff0208

0800f00c <strcpy>:
 800f00c:	4603      	mov	r3, r0
 800f00e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f012:	f803 2b01 	strb.w	r2, [r3], #1
 800f016:	2a00      	cmp	r2, #0
 800f018:	d1f9      	bne.n	800f00e <strcpy+0x2>
 800f01a:	4770      	bx	lr

0800f01c <sulp>:
 800f01c:	b570      	push	{r4, r5, r6, lr}
 800f01e:	4604      	mov	r4, r0
 800f020:	460d      	mov	r5, r1
 800f022:	ec45 4b10 	vmov	d0, r4, r5
 800f026:	4616      	mov	r6, r2
 800f028:	f002 fc20 	bl	801186c <__ulp>
 800f02c:	ec51 0b10 	vmov	r0, r1, d0
 800f030:	b17e      	cbz	r6, 800f052 <sulp+0x36>
 800f032:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f036:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	dd09      	ble.n	800f052 <sulp+0x36>
 800f03e:	051b      	lsls	r3, r3, #20
 800f040:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f044:	2400      	movs	r4, #0
 800f046:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f04a:	4622      	mov	r2, r4
 800f04c:	462b      	mov	r3, r5
 800f04e:	f7f1 fb03 	bl	8000658 <__aeabi_dmul>
 800f052:	bd70      	pop	{r4, r5, r6, pc}
 800f054:	0000      	movs	r0, r0
	...

0800f058 <_strtod_l>:
 800f058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f05c:	ed2d 8b02 	vpush	{d8}
 800f060:	b09d      	sub	sp, #116	; 0x74
 800f062:	461f      	mov	r7, r3
 800f064:	2300      	movs	r3, #0
 800f066:	9318      	str	r3, [sp, #96]	; 0x60
 800f068:	4ba2      	ldr	r3, [pc, #648]	; (800f2f4 <_strtod_l+0x29c>)
 800f06a:	9213      	str	r2, [sp, #76]	; 0x4c
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	9305      	str	r3, [sp, #20]
 800f070:	4604      	mov	r4, r0
 800f072:	4618      	mov	r0, r3
 800f074:	4688      	mov	r8, r1
 800f076:	f7f1 f8d5 	bl	8000224 <strlen>
 800f07a:	f04f 0a00 	mov.w	sl, #0
 800f07e:	4605      	mov	r5, r0
 800f080:	f04f 0b00 	mov.w	fp, #0
 800f084:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f088:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f08a:	781a      	ldrb	r2, [r3, #0]
 800f08c:	2a2b      	cmp	r2, #43	; 0x2b
 800f08e:	d04e      	beq.n	800f12e <_strtod_l+0xd6>
 800f090:	d83b      	bhi.n	800f10a <_strtod_l+0xb2>
 800f092:	2a0d      	cmp	r2, #13
 800f094:	d834      	bhi.n	800f100 <_strtod_l+0xa8>
 800f096:	2a08      	cmp	r2, #8
 800f098:	d834      	bhi.n	800f104 <_strtod_l+0xac>
 800f09a:	2a00      	cmp	r2, #0
 800f09c:	d03e      	beq.n	800f11c <_strtod_l+0xc4>
 800f09e:	2300      	movs	r3, #0
 800f0a0:	930a      	str	r3, [sp, #40]	; 0x28
 800f0a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f0a4:	7833      	ldrb	r3, [r6, #0]
 800f0a6:	2b30      	cmp	r3, #48	; 0x30
 800f0a8:	f040 80b0 	bne.w	800f20c <_strtod_l+0x1b4>
 800f0ac:	7873      	ldrb	r3, [r6, #1]
 800f0ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f0b2:	2b58      	cmp	r3, #88	; 0x58
 800f0b4:	d168      	bne.n	800f188 <_strtod_l+0x130>
 800f0b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0b8:	9301      	str	r3, [sp, #4]
 800f0ba:	ab18      	add	r3, sp, #96	; 0x60
 800f0bc:	9702      	str	r7, [sp, #8]
 800f0be:	9300      	str	r3, [sp, #0]
 800f0c0:	4a8d      	ldr	r2, [pc, #564]	; (800f2f8 <_strtod_l+0x2a0>)
 800f0c2:	ab19      	add	r3, sp, #100	; 0x64
 800f0c4:	a917      	add	r1, sp, #92	; 0x5c
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	f001 fd38 	bl	8010b3c <__gethex>
 800f0cc:	f010 0707 	ands.w	r7, r0, #7
 800f0d0:	4605      	mov	r5, r0
 800f0d2:	d005      	beq.n	800f0e0 <_strtod_l+0x88>
 800f0d4:	2f06      	cmp	r7, #6
 800f0d6:	d12c      	bne.n	800f132 <_strtod_l+0xda>
 800f0d8:	3601      	adds	r6, #1
 800f0da:	2300      	movs	r3, #0
 800f0dc:	9617      	str	r6, [sp, #92]	; 0x5c
 800f0de:	930a      	str	r3, [sp, #40]	; 0x28
 800f0e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	f040 8590 	bne.w	800fc08 <_strtod_l+0xbb0>
 800f0e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0ea:	b1eb      	cbz	r3, 800f128 <_strtod_l+0xd0>
 800f0ec:	4652      	mov	r2, sl
 800f0ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f0f2:	ec43 2b10 	vmov	d0, r2, r3
 800f0f6:	b01d      	add	sp, #116	; 0x74
 800f0f8:	ecbd 8b02 	vpop	{d8}
 800f0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f100:	2a20      	cmp	r2, #32
 800f102:	d1cc      	bne.n	800f09e <_strtod_l+0x46>
 800f104:	3301      	adds	r3, #1
 800f106:	9317      	str	r3, [sp, #92]	; 0x5c
 800f108:	e7be      	b.n	800f088 <_strtod_l+0x30>
 800f10a:	2a2d      	cmp	r2, #45	; 0x2d
 800f10c:	d1c7      	bne.n	800f09e <_strtod_l+0x46>
 800f10e:	2201      	movs	r2, #1
 800f110:	920a      	str	r2, [sp, #40]	; 0x28
 800f112:	1c5a      	adds	r2, r3, #1
 800f114:	9217      	str	r2, [sp, #92]	; 0x5c
 800f116:	785b      	ldrb	r3, [r3, #1]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d1c2      	bne.n	800f0a2 <_strtod_l+0x4a>
 800f11c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f11e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f122:	2b00      	cmp	r3, #0
 800f124:	f040 856e 	bne.w	800fc04 <_strtod_l+0xbac>
 800f128:	4652      	mov	r2, sl
 800f12a:	465b      	mov	r3, fp
 800f12c:	e7e1      	b.n	800f0f2 <_strtod_l+0x9a>
 800f12e:	2200      	movs	r2, #0
 800f130:	e7ee      	b.n	800f110 <_strtod_l+0xb8>
 800f132:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f134:	b13a      	cbz	r2, 800f146 <_strtod_l+0xee>
 800f136:	2135      	movs	r1, #53	; 0x35
 800f138:	a81a      	add	r0, sp, #104	; 0x68
 800f13a:	f002 fca2 	bl	8011a82 <__copybits>
 800f13e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f140:	4620      	mov	r0, r4
 800f142:	f002 f861 	bl	8011208 <_Bfree>
 800f146:	3f01      	subs	r7, #1
 800f148:	2f04      	cmp	r7, #4
 800f14a:	d806      	bhi.n	800f15a <_strtod_l+0x102>
 800f14c:	e8df f007 	tbb	[pc, r7]
 800f150:	1714030a 	.word	0x1714030a
 800f154:	0a          	.byte	0x0a
 800f155:	00          	.byte	0x00
 800f156:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f15a:	0728      	lsls	r0, r5, #28
 800f15c:	d5c0      	bpl.n	800f0e0 <_strtod_l+0x88>
 800f15e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f162:	e7bd      	b.n	800f0e0 <_strtod_l+0x88>
 800f164:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f168:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f16a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f16e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f172:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f176:	e7f0      	b.n	800f15a <_strtod_l+0x102>
 800f178:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f2fc <_strtod_l+0x2a4>
 800f17c:	e7ed      	b.n	800f15a <_strtod_l+0x102>
 800f17e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f182:	f04f 3aff 	mov.w	sl, #4294967295
 800f186:	e7e8      	b.n	800f15a <_strtod_l+0x102>
 800f188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f18a:	1c5a      	adds	r2, r3, #1
 800f18c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f18e:	785b      	ldrb	r3, [r3, #1]
 800f190:	2b30      	cmp	r3, #48	; 0x30
 800f192:	d0f9      	beq.n	800f188 <_strtod_l+0x130>
 800f194:	2b00      	cmp	r3, #0
 800f196:	d0a3      	beq.n	800f0e0 <_strtod_l+0x88>
 800f198:	2301      	movs	r3, #1
 800f19a:	f04f 0900 	mov.w	r9, #0
 800f19e:	9304      	str	r3, [sp, #16]
 800f1a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f1a2:	9308      	str	r3, [sp, #32]
 800f1a4:	f8cd 901c 	str.w	r9, [sp, #28]
 800f1a8:	464f      	mov	r7, r9
 800f1aa:	220a      	movs	r2, #10
 800f1ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f1ae:	7806      	ldrb	r6, [r0, #0]
 800f1b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f1b4:	b2d9      	uxtb	r1, r3
 800f1b6:	2909      	cmp	r1, #9
 800f1b8:	d92a      	bls.n	800f210 <_strtod_l+0x1b8>
 800f1ba:	9905      	ldr	r1, [sp, #20]
 800f1bc:	462a      	mov	r2, r5
 800f1be:	f002 ff0f 	bl	8011fe0 <strncmp>
 800f1c2:	b398      	cbz	r0, 800f22c <_strtod_l+0x1d4>
 800f1c4:	2000      	movs	r0, #0
 800f1c6:	4632      	mov	r2, r6
 800f1c8:	463d      	mov	r5, r7
 800f1ca:	9005      	str	r0, [sp, #20]
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	2a65      	cmp	r2, #101	; 0x65
 800f1d0:	d001      	beq.n	800f1d6 <_strtod_l+0x17e>
 800f1d2:	2a45      	cmp	r2, #69	; 0x45
 800f1d4:	d118      	bne.n	800f208 <_strtod_l+0x1b0>
 800f1d6:	b91d      	cbnz	r5, 800f1e0 <_strtod_l+0x188>
 800f1d8:	9a04      	ldr	r2, [sp, #16]
 800f1da:	4302      	orrs	r2, r0
 800f1dc:	d09e      	beq.n	800f11c <_strtod_l+0xc4>
 800f1de:	2500      	movs	r5, #0
 800f1e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f1e4:	f108 0201 	add.w	r2, r8, #1
 800f1e8:	9217      	str	r2, [sp, #92]	; 0x5c
 800f1ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f1ee:	2a2b      	cmp	r2, #43	; 0x2b
 800f1f0:	d075      	beq.n	800f2de <_strtod_l+0x286>
 800f1f2:	2a2d      	cmp	r2, #45	; 0x2d
 800f1f4:	d07b      	beq.n	800f2ee <_strtod_l+0x296>
 800f1f6:	f04f 0c00 	mov.w	ip, #0
 800f1fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f1fe:	2909      	cmp	r1, #9
 800f200:	f240 8082 	bls.w	800f308 <_strtod_l+0x2b0>
 800f204:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f208:	2600      	movs	r6, #0
 800f20a:	e09d      	b.n	800f348 <_strtod_l+0x2f0>
 800f20c:	2300      	movs	r3, #0
 800f20e:	e7c4      	b.n	800f19a <_strtod_l+0x142>
 800f210:	2f08      	cmp	r7, #8
 800f212:	bfd8      	it	le
 800f214:	9907      	ldrle	r1, [sp, #28]
 800f216:	f100 0001 	add.w	r0, r0, #1
 800f21a:	bfda      	itte	le
 800f21c:	fb02 3301 	mlale	r3, r2, r1, r3
 800f220:	9307      	strle	r3, [sp, #28]
 800f222:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f226:	3701      	adds	r7, #1
 800f228:	9017      	str	r0, [sp, #92]	; 0x5c
 800f22a:	e7bf      	b.n	800f1ac <_strtod_l+0x154>
 800f22c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f22e:	195a      	adds	r2, r3, r5
 800f230:	9217      	str	r2, [sp, #92]	; 0x5c
 800f232:	5d5a      	ldrb	r2, [r3, r5]
 800f234:	2f00      	cmp	r7, #0
 800f236:	d037      	beq.n	800f2a8 <_strtod_l+0x250>
 800f238:	9005      	str	r0, [sp, #20]
 800f23a:	463d      	mov	r5, r7
 800f23c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f240:	2b09      	cmp	r3, #9
 800f242:	d912      	bls.n	800f26a <_strtod_l+0x212>
 800f244:	2301      	movs	r3, #1
 800f246:	e7c2      	b.n	800f1ce <_strtod_l+0x176>
 800f248:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f24a:	1c5a      	adds	r2, r3, #1
 800f24c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f24e:	785a      	ldrb	r2, [r3, #1]
 800f250:	3001      	adds	r0, #1
 800f252:	2a30      	cmp	r2, #48	; 0x30
 800f254:	d0f8      	beq.n	800f248 <_strtod_l+0x1f0>
 800f256:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f25a:	2b08      	cmp	r3, #8
 800f25c:	f200 84d9 	bhi.w	800fc12 <_strtod_l+0xbba>
 800f260:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f262:	9005      	str	r0, [sp, #20]
 800f264:	2000      	movs	r0, #0
 800f266:	9308      	str	r3, [sp, #32]
 800f268:	4605      	mov	r5, r0
 800f26a:	3a30      	subs	r2, #48	; 0x30
 800f26c:	f100 0301 	add.w	r3, r0, #1
 800f270:	d014      	beq.n	800f29c <_strtod_l+0x244>
 800f272:	9905      	ldr	r1, [sp, #20]
 800f274:	4419      	add	r1, r3
 800f276:	9105      	str	r1, [sp, #20]
 800f278:	462b      	mov	r3, r5
 800f27a:	eb00 0e05 	add.w	lr, r0, r5
 800f27e:	210a      	movs	r1, #10
 800f280:	4573      	cmp	r3, lr
 800f282:	d113      	bne.n	800f2ac <_strtod_l+0x254>
 800f284:	182b      	adds	r3, r5, r0
 800f286:	2b08      	cmp	r3, #8
 800f288:	f105 0501 	add.w	r5, r5, #1
 800f28c:	4405      	add	r5, r0
 800f28e:	dc1c      	bgt.n	800f2ca <_strtod_l+0x272>
 800f290:	9907      	ldr	r1, [sp, #28]
 800f292:	230a      	movs	r3, #10
 800f294:	fb03 2301 	mla	r3, r3, r1, r2
 800f298:	9307      	str	r3, [sp, #28]
 800f29a:	2300      	movs	r3, #0
 800f29c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f29e:	1c51      	adds	r1, r2, #1
 800f2a0:	9117      	str	r1, [sp, #92]	; 0x5c
 800f2a2:	7852      	ldrb	r2, [r2, #1]
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	e7c9      	b.n	800f23c <_strtod_l+0x1e4>
 800f2a8:	4638      	mov	r0, r7
 800f2aa:	e7d2      	b.n	800f252 <_strtod_l+0x1fa>
 800f2ac:	2b08      	cmp	r3, #8
 800f2ae:	dc04      	bgt.n	800f2ba <_strtod_l+0x262>
 800f2b0:	9e07      	ldr	r6, [sp, #28]
 800f2b2:	434e      	muls	r6, r1
 800f2b4:	9607      	str	r6, [sp, #28]
 800f2b6:	3301      	adds	r3, #1
 800f2b8:	e7e2      	b.n	800f280 <_strtod_l+0x228>
 800f2ba:	f103 0c01 	add.w	ip, r3, #1
 800f2be:	f1bc 0f10 	cmp.w	ip, #16
 800f2c2:	bfd8      	it	le
 800f2c4:	fb01 f909 	mulle.w	r9, r1, r9
 800f2c8:	e7f5      	b.n	800f2b6 <_strtod_l+0x25e>
 800f2ca:	2d10      	cmp	r5, #16
 800f2cc:	bfdc      	itt	le
 800f2ce:	230a      	movle	r3, #10
 800f2d0:	fb03 2909 	mlale	r9, r3, r9, r2
 800f2d4:	e7e1      	b.n	800f29a <_strtod_l+0x242>
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	9305      	str	r3, [sp, #20]
 800f2da:	2301      	movs	r3, #1
 800f2dc:	e77c      	b.n	800f1d8 <_strtod_l+0x180>
 800f2de:	f04f 0c00 	mov.w	ip, #0
 800f2e2:	f108 0202 	add.w	r2, r8, #2
 800f2e6:	9217      	str	r2, [sp, #92]	; 0x5c
 800f2e8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f2ec:	e785      	b.n	800f1fa <_strtod_l+0x1a2>
 800f2ee:	f04f 0c01 	mov.w	ip, #1
 800f2f2:	e7f6      	b.n	800f2e2 <_strtod_l+0x28a>
 800f2f4:	080130f0 	.word	0x080130f0
 800f2f8:	08012ea4 	.word	0x08012ea4
 800f2fc:	7ff00000 	.word	0x7ff00000
 800f300:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f302:	1c51      	adds	r1, r2, #1
 800f304:	9117      	str	r1, [sp, #92]	; 0x5c
 800f306:	7852      	ldrb	r2, [r2, #1]
 800f308:	2a30      	cmp	r2, #48	; 0x30
 800f30a:	d0f9      	beq.n	800f300 <_strtod_l+0x2a8>
 800f30c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f310:	2908      	cmp	r1, #8
 800f312:	f63f af79 	bhi.w	800f208 <_strtod_l+0x1b0>
 800f316:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f31a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f31c:	9206      	str	r2, [sp, #24]
 800f31e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f320:	1c51      	adds	r1, r2, #1
 800f322:	9117      	str	r1, [sp, #92]	; 0x5c
 800f324:	7852      	ldrb	r2, [r2, #1]
 800f326:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f32a:	2e09      	cmp	r6, #9
 800f32c:	d937      	bls.n	800f39e <_strtod_l+0x346>
 800f32e:	9e06      	ldr	r6, [sp, #24]
 800f330:	1b89      	subs	r1, r1, r6
 800f332:	2908      	cmp	r1, #8
 800f334:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f338:	dc02      	bgt.n	800f340 <_strtod_l+0x2e8>
 800f33a:	4576      	cmp	r6, lr
 800f33c:	bfa8      	it	ge
 800f33e:	4676      	movge	r6, lr
 800f340:	f1bc 0f00 	cmp.w	ip, #0
 800f344:	d000      	beq.n	800f348 <_strtod_l+0x2f0>
 800f346:	4276      	negs	r6, r6
 800f348:	2d00      	cmp	r5, #0
 800f34a:	d14d      	bne.n	800f3e8 <_strtod_l+0x390>
 800f34c:	9904      	ldr	r1, [sp, #16]
 800f34e:	4301      	orrs	r1, r0
 800f350:	f47f aec6 	bne.w	800f0e0 <_strtod_l+0x88>
 800f354:	2b00      	cmp	r3, #0
 800f356:	f47f aee1 	bne.w	800f11c <_strtod_l+0xc4>
 800f35a:	2a69      	cmp	r2, #105	; 0x69
 800f35c:	d027      	beq.n	800f3ae <_strtod_l+0x356>
 800f35e:	dc24      	bgt.n	800f3aa <_strtod_l+0x352>
 800f360:	2a49      	cmp	r2, #73	; 0x49
 800f362:	d024      	beq.n	800f3ae <_strtod_l+0x356>
 800f364:	2a4e      	cmp	r2, #78	; 0x4e
 800f366:	f47f aed9 	bne.w	800f11c <_strtod_l+0xc4>
 800f36a:	499f      	ldr	r1, [pc, #636]	; (800f5e8 <_strtod_l+0x590>)
 800f36c:	a817      	add	r0, sp, #92	; 0x5c
 800f36e:	f001 fe3d 	bl	8010fec <__match>
 800f372:	2800      	cmp	r0, #0
 800f374:	f43f aed2 	beq.w	800f11c <_strtod_l+0xc4>
 800f378:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	2b28      	cmp	r3, #40	; 0x28
 800f37e:	d12d      	bne.n	800f3dc <_strtod_l+0x384>
 800f380:	499a      	ldr	r1, [pc, #616]	; (800f5ec <_strtod_l+0x594>)
 800f382:	aa1a      	add	r2, sp, #104	; 0x68
 800f384:	a817      	add	r0, sp, #92	; 0x5c
 800f386:	f001 fe45 	bl	8011014 <__hexnan>
 800f38a:	2805      	cmp	r0, #5
 800f38c:	d126      	bne.n	800f3dc <_strtod_l+0x384>
 800f38e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f390:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f394:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f398:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f39c:	e6a0      	b.n	800f0e0 <_strtod_l+0x88>
 800f39e:	210a      	movs	r1, #10
 800f3a0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f3a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f3a8:	e7b9      	b.n	800f31e <_strtod_l+0x2c6>
 800f3aa:	2a6e      	cmp	r2, #110	; 0x6e
 800f3ac:	e7db      	b.n	800f366 <_strtod_l+0x30e>
 800f3ae:	4990      	ldr	r1, [pc, #576]	; (800f5f0 <_strtod_l+0x598>)
 800f3b0:	a817      	add	r0, sp, #92	; 0x5c
 800f3b2:	f001 fe1b 	bl	8010fec <__match>
 800f3b6:	2800      	cmp	r0, #0
 800f3b8:	f43f aeb0 	beq.w	800f11c <_strtod_l+0xc4>
 800f3bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f3be:	498d      	ldr	r1, [pc, #564]	; (800f5f4 <_strtod_l+0x59c>)
 800f3c0:	3b01      	subs	r3, #1
 800f3c2:	a817      	add	r0, sp, #92	; 0x5c
 800f3c4:	9317      	str	r3, [sp, #92]	; 0x5c
 800f3c6:	f001 fe11 	bl	8010fec <__match>
 800f3ca:	b910      	cbnz	r0, 800f3d2 <_strtod_l+0x37a>
 800f3cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f3ce:	3301      	adds	r3, #1
 800f3d0:	9317      	str	r3, [sp, #92]	; 0x5c
 800f3d2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f604 <_strtod_l+0x5ac>
 800f3d6:	f04f 0a00 	mov.w	sl, #0
 800f3da:	e681      	b.n	800f0e0 <_strtod_l+0x88>
 800f3dc:	4886      	ldr	r0, [pc, #536]	; (800f5f8 <_strtod_l+0x5a0>)
 800f3de:	f002 fde7 	bl	8011fb0 <nan>
 800f3e2:	ec5b ab10 	vmov	sl, fp, d0
 800f3e6:	e67b      	b.n	800f0e0 <_strtod_l+0x88>
 800f3e8:	9b05      	ldr	r3, [sp, #20]
 800f3ea:	9807      	ldr	r0, [sp, #28]
 800f3ec:	1af3      	subs	r3, r6, r3
 800f3ee:	2f00      	cmp	r7, #0
 800f3f0:	bf08      	it	eq
 800f3f2:	462f      	moveq	r7, r5
 800f3f4:	2d10      	cmp	r5, #16
 800f3f6:	9306      	str	r3, [sp, #24]
 800f3f8:	46a8      	mov	r8, r5
 800f3fa:	bfa8      	it	ge
 800f3fc:	f04f 0810 	movge.w	r8, #16
 800f400:	f7f1 f8b0 	bl	8000564 <__aeabi_ui2d>
 800f404:	2d09      	cmp	r5, #9
 800f406:	4682      	mov	sl, r0
 800f408:	468b      	mov	fp, r1
 800f40a:	dd13      	ble.n	800f434 <_strtod_l+0x3dc>
 800f40c:	4b7b      	ldr	r3, [pc, #492]	; (800f5fc <_strtod_l+0x5a4>)
 800f40e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f412:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f416:	f7f1 f91f 	bl	8000658 <__aeabi_dmul>
 800f41a:	4682      	mov	sl, r0
 800f41c:	4648      	mov	r0, r9
 800f41e:	468b      	mov	fp, r1
 800f420:	f7f1 f8a0 	bl	8000564 <__aeabi_ui2d>
 800f424:	4602      	mov	r2, r0
 800f426:	460b      	mov	r3, r1
 800f428:	4650      	mov	r0, sl
 800f42a:	4659      	mov	r1, fp
 800f42c:	f7f0 ff5e 	bl	80002ec <__adddf3>
 800f430:	4682      	mov	sl, r0
 800f432:	468b      	mov	fp, r1
 800f434:	2d0f      	cmp	r5, #15
 800f436:	dc38      	bgt.n	800f4aa <_strtod_l+0x452>
 800f438:	9b06      	ldr	r3, [sp, #24]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	f43f ae50 	beq.w	800f0e0 <_strtod_l+0x88>
 800f440:	dd24      	ble.n	800f48c <_strtod_l+0x434>
 800f442:	2b16      	cmp	r3, #22
 800f444:	dc0b      	bgt.n	800f45e <_strtod_l+0x406>
 800f446:	496d      	ldr	r1, [pc, #436]	; (800f5fc <_strtod_l+0x5a4>)
 800f448:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f44c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f450:	4652      	mov	r2, sl
 800f452:	465b      	mov	r3, fp
 800f454:	f7f1 f900 	bl	8000658 <__aeabi_dmul>
 800f458:	4682      	mov	sl, r0
 800f45a:	468b      	mov	fp, r1
 800f45c:	e640      	b.n	800f0e0 <_strtod_l+0x88>
 800f45e:	9a06      	ldr	r2, [sp, #24]
 800f460:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f464:	4293      	cmp	r3, r2
 800f466:	db20      	blt.n	800f4aa <_strtod_l+0x452>
 800f468:	4c64      	ldr	r4, [pc, #400]	; (800f5fc <_strtod_l+0x5a4>)
 800f46a:	f1c5 050f 	rsb	r5, r5, #15
 800f46e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f472:	4652      	mov	r2, sl
 800f474:	465b      	mov	r3, fp
 800f476:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f47a:	f7f1 f8ed 	bl	8000658 <__aeabi_dmul>
 800f47e:	9b06      	ldr	r3, [sp, #24]
 800f480:	1b5d      	subs	r5, r3, r5
 800f482:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f486:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f48a:	e7e3      	b.n	800f454 <_strtod_l+0x3fc>
 800f48c:	9b06      	ldr	r3, [sp, #24]
 800f48e:	3316      	adds	r3, #22
 800f490:	db0b      	blt.n	800f4aa <_strtod_l+0x452>
 800f492:	9b05      	ldr	r3, [sp, #20]
 800f494:	1b9e      	subs	r6, r3, r6
 800f496:	4b59      	ldr	r3, [pc, #356]	; (800f5fc <_strtod_l+0x5a4>)
 800f498:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f49c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f4a0:	4650      	mov	r0, sl
 800f4a2:	4659      	mov	r1, fp
 800f4a4:	f7f1 fa02 	bl	80008ac <__aeabi_ddiv>
 800f4a8:	e7d6      	b.n	800f458 <_strtod_l+0x400>
 800f4aa:	9b06      	ldr	r3, [sp, #24]
 800f4ac:	eba5 0808 	sub.w	r8, r5, r8
 800f4b0:	4498      	add	r8, r3
 800f4b2:	f1b8 0f00 	cmp.w	r8, #0
 800f4b6:	dd74      	ble.n	800f5a2 <_strtod_l+0x54a>
 800f4b8:	f018 030f 	ands.w	r3, r8, #15
 800f4bc:	d00a      	beq.n	800f4d4 <_strtod_l+0x47c>
 800f4be:	494f      	ldr	r1, [pc, #316]	; (800f5fc <_strtod_l+0x5a4>)
 800f4c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f4c4:	4652      	mov	r2, sl
 800f4c6:	465b      	mov	r3, fp
 800f4c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4cc:	f7f1 f8c4 	bl	8000658 <__aeabi_dmul>
 800f4d0:	4682      	mov	sl, r0
 800f4d2:	468b      	mov	fp, r1
 800f4d4:	f038 080f 	bics.w	r8, r8, #15
 800f4d8:	d04f      	beq.n	800f57a <_strtod_l+0x522>
 800f4da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f4de:	dd22      	ble.n	800f526 <_strtod_l+0x4ce>
 800f4e0:	2500      	movs	r5, #0
 800f4e2:	462e      	mov	r6, r5
 800f4e4:	9507      	str	r5, [sp, #28]
 800f4e6:	9505      	str	r5, [sp, #20]
 800f4e8:	2322      	movs	r3, #34	; 0x22
 800f4ea:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f604 <_strtod_l+0x5ac>
 800f4ee:	6023      	str	r3, [r4, #0]
 800f4f0:	f04f 0a00 	mov.w	sl, #0
 800f4f4:	9b07      	ldr	r3, [sp, #28]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	f43f adf2 	beq.w	800f0e0 <_strtod_l+0x88>
 800f4fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f4fe:	4620      	mov	r0, r4
 800f500:	f001 fe82 	bl	8011208 <_Bfree>
 800f504:	9905      	ldr	r1, [sp, #20]
 800f506:	4620      	mov	r0, r4
 800f508:	f001 fe7e 	bl	8011208 <_Bfree>
 800f50c:	4631      	mov	r1, r6
 800f50e:	4620      	mov	r0, r4
 800f510:	f001 fe7a 	bl	8011208 <_Bfree>
 800f514:	9907      	ldr	r1, [sp, #28]
 800f516:	4620      	mov	r0, r4
 800f518:	f001 fe76 	bl	8011208 <_Bfree>
 800f51c:	4629      	mov	r1, r5
 800f51e:	4620      	mov	r0, r4
 800f520:	f001 fe72 	bl	8011208 <_Bfree>
 800f524:	e5dc      	b.n	800f0e0 <_strtod_l+0x88>
 800f526:	4b36      	ldr	r3, [pc, #216]	; (800f600 <_strtod_l+0x5a8>)
 800f528:	9304      	str	r3, [sp, #16]
 800f52a:	2300      	movs	r3, #0
 800f52c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f530:	4650      	mov	r0, sl
 800f532:	4659      	mov	r1, fp
 800f534:	4699      	mov	r9, r3
 800f536:	f1b8 0f01 	cmp.w	r8, #1
 800f53a:	dc21      	bgt.n	800f580 <_strtod_l+0x528>
 800f53c:	b10b      	cbz	r3, 800f542 <_strtod_l+0x4ea>
 800f53e:	4682      	mov	sl, r0
 800f540:	468b      	mov	fp, r1
 800f542:	4b2f      	ldr	r3, [pc, #188]	; (800f600 <_strtod_l+0x5a8>)
 800f544:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f548:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f54c:	4652      	mov	r2, sl
 800f54e:	465b      	mov	r3, fp
 800f550:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f554:	f7f1 f880 	bl	8000658 <__aeabi_dmul>
 800f558:	4b2a      	ldr	r3, [pc, #168]	; (800f604 <_strtod_l+0x5ac>)
 800f55a:	460a      	mov	r2, r1
 800f55c:	400b      	ands	r3, r1
 800f55e:	492a      	ldr	r1, [pc, #168]	; (800f608 <_strtod_l+0x5b0>)
 800f560:	428b      	cmp	r3, r1
 800f562:	4682      	mov	sl, r0
 800f564:	d8bc      	bhi.n	800f4e0 <_strtod_l+0x488>
 800f566:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f56a:	428b      	cmp	r3, r1
 800f56c:	bf86      	itte	hi
 800f56e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f60c <_strtod_l+0x5b4>
 800f572:	f04f 3aff 	movhi.w	sl, #4294967295
 800f576:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f57a:	2300      	movs	r3, #0
 800f57c:	9304      	str	r3, [sp, #16]
 800f57e:	e084      	b.n	800f68a <_strtod_l+0x632>
 800f580:	f018 0f01 	tst.w	r8, #1
 800f584:	d005      	beq.n	800f592 <_strtod_l+0x53a>
 800f586:	9b04      	ldr	r3, [sp, #16]
 800f588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58c:	f7f1 f864 	bl	8000658 <__aeabi_dmul>
 800f590:	2301      	movs	r3, #1
 800f592:	9a04      	ldr	r2, [sp, #16]
 800f594:	3208      	adds	r2, #8
 800f596:	f109 0901 	add.w	r9, r9, #1
 800f59a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f59e:	9204      	str	r2, [sp, #16]
 800f5a0:	e7c9      	b.n	800f536 <_strtod_l+0x4de>
 800f5a2:	d0ea      	beq.n	800f57a <_strtod_l+0x522>
 800f5a4:	f1c8 0800 	rsb	r8, r8, #0
 800f5a8:	f018 020f 	ands.w	r2, r8, #15
 800f5ac:	d00a      	beq.n	800f5c4 <_strtod_l+0x56c>
 800f5ae:	4b13      	ldr	r3, [pc, #76]	; (800f5fc <_strtod_l+0x5a4>)
 800f5b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f5b4:	4650      	mov	r0, sl
 800f5b6:	4659      	mov	r1, fp
 800f5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5bc:	f7f1 f976 	bl	80008ac <__aeabi_ddiv>
 800f5c0:	4682      	mov	sl, r0
 800f5c2:	468b      	mov	fp, r1
 800f5c4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f5c8:	d0d7      	beq.n	800f57a <_strtod_l+0x522>
 800f5ca:	f1b8 0f1f 	cmp.w	r8, #31
 800f5ce:	dd1f      	ble.n	800f610 <_strtod_l+0x5b8>
 800f5d0:	2500      	movs	r5, #0
 800f5d2:	462e      	mov	r6, r5
 800f5d4:	9507      	str	r5, [sp, #28]
 800f5d6:	9505      	str	r5, [sp, #20]
 800f5d8:	2322      	movs	r3, #34	; 0x22
 800f5da:	f04f 0a00 	mov.w	sl, #0
 800f5de:	f04f 0b00 	mov.w	fp, #0
 800f5e2:	6023      	str	r3, [r4, #0]
 800f5e4:	e786      	b.n	800f4f4 <_strtod_l+0x49c>
 800f5e6:	bf00      	nop
 800f5e8:	08012e75 	.word	0x08012e75
 800f5ec:	08012eb8 	.word	0x08012eb8
 800f5f0:	08012e6d 	.word	0x08012e6d
 800f5f4:	08012ffc 	.word	0x08012ffc
 800f5f8:	080132a8 	.word	0x080132a8
 800f5fc:	08013188 	.word	0x08013188
 800f600:	08013160 	.word	0x08013160
 800f604:	7ff00000 	.word	0x7ff00000
 800f608:	7ca00000 	.word	0x7ca00000
 800f60c:	7fefffff 	.word	0x7fefffff
 800f610:	f018 0310 	ands.w	r3, r8, #16
 800f614:	bf18      	it	ne
 800f616:	236a      	movne	r3, #106	; 0x6a
 800f618:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f9c8 <_strtod_l+0x970>
 800f61c:	9304      	str	r3, [sp, #16]
 800f61e:	4650      	mov	r0, sl
 800f620:	4659      	mov	r1, fp
 800f622:	2300      	movs	r3, #0
 800f624:	f018 0f01 	tst.w	r8, #1
 800f628:	d004      	beq.n	800f634 <_strtod_l+0x5dc>
 800f62a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f62e:	f7f1 f813 	bl	8000658 <__aeabi_dmul>
 800f632:	2301      	movs	r3, #1
 800f634:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f638:	f109 0908 	add.w	r9, r9, #8
 800f63c:	d1f2      	bne.n	800f624 <_strtod_l+0x5cc>
 800f63e:	b10b      	cbz	r3, 800f644 <_strtod_l+0x5ec>
 800f640:	4682      	mov	sl, r0
 800f642:	468b      	mov	fp, r1
 800f644:	9b04      	ldr	r3, [sp, #16]
 800f646:	b1c3      	cbz	r3, 800f67a <_strtod_l+0x622>
 800f648:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f64c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f650:	2b00      	cmp	r3, #0
 800f652:	4659      	mov	r1, fp
 800f654:	dd11      	ble.n	800f67a <_strtod_l+0x622>
 800f656:	2b1f      	cmp	r3, #31
 800f658:	f340 8124 	ble.w	800f8a4 <_strtod_l+0x84c>
 800f65c:	2b34      	cmp	r3, #52	; 0x34
 800f65e:	bfde      	ittt	le
 800f660:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f664:	f04f 33ff 	movle.w	r3, #4294967295
 800f668:	fa03 f202 	lslle.w	r2, r3, r2
 800f66c:	f04f 0a00 	mov.w	sl, #0
 800f670:	bfcc      	ite	gt
 800f672:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f676:	ea02 0b01 	andle.w	fp, r2, r1
 800f67a:	2200      	movs	r2, #0
 800f67c:	2300      	movs	r3, #0
 800f67e:	4650      	mov	r0, sl
 800f680:	4659      	mov	r1, fp
 800f682:	f7f1 fa51 	bl	8000b28 <__aeabi_dcmpeq>
 800f686:	2800      	cmp	r0, #0
 800f688:	d1a2      	bne.n	800f5d0 <_strtod_l+0x578>
 800f68a:	9b07      	ldr	r3, [sp, #28]
 800f68c:	9300      	str	r3, [sp, #0]
 800f68e:	9908      	ldr	r1, [sp, #32]
 800f690:	462b      	mov	r3, r5
 800f692:	463a      	mov	r2, r7
 800f694:	4620      	mov	r0, r4
 800f696:	f001 fe1f 	bl	80112d8 <__s2b>
 800f69a:	9007      	str	r0, [sp, #28]
 800f69c:	2800      	cmp	r0, #0
 800f69e:	f43f af1f 	beq.w	800f4e0 <_strtod_l+0x488>
 800f6a2:	9b05      	ldr	r3, [sp, #20]
 800f6a4:	1b9e      	subs	r6, r3, r6
 800f6a6:	9b06      	ldr	r3, [sp, #24]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	bfb4      	ite	lt
 800f6ac:	4633      	movlt	r3, r6
 800f6ae:	2300      	movge	r3, #0
 800f6b0:	930c      	str	r3, [sp, #48]	; 0x30
 800f6b2:	9b06      	ldr	r3, [sp, #24]
 800f6b4:	2500      	movs	r5, #0
 800f6b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f6ba:	9312      	str	r3, [sp, #72]	; 0x48
 800f6bc:	462e      	mov	r6, r5
 800f6be:	9b07      	ldr	r3, [sp, #28]
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	6859      	ldr	r1, [r3, #4]
 800f6c4:	f001 fd60 	bl	8011188 <_Balloc>
 800f6c8:	9005      	str	r0, [sp, #20]
 800f6ca:	2800      	cmp	r0, #0
 800f6cc:	f43f af0c 	beq.w	800f4e8 <_strtod_l+0x490>
 800f6d0:	9b07      	ldr	r3, [sp, #28]
 800f6d2:	691a      	ldr	r2, [r3, #16]
 800f6d4:	3202      	adds	r2, #2
 800f6d6:	f103 010c 	add.w	r1, r3, #12
 800f6da:	0092      	lsls	r2, r2, #2
 800f6dc:	300c      	adds	r0, #12
 800f6de:	f7fe fddf 	bl	800e2a0 <memcpy>
 800f6e2:	ec4b ab10 	vmov	d0, sl, fp
 800f6e6:	aa1a      	add	r2, sp, #104	; 0x68
 800f6e8:	a919      	add	r1, sp, #100	; 0x64
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	f002 f93a 	bl	8011964 <__d2b>
 800f6f0:	ec4b ab18 	vmov	d8, sl, fp
 800f6f4:	9018      	str	r0, [sp, #96]	; 0x60
 800f6f6:	2800      	cmp	r0, #0
 800f6f8:	f43f aef6 	beq.w	800f4e8 <_strtod_l+0x490>
 800f6fc:	2101      	movs	r1, #1
 800f6fe:	4620      	mov	r0, r4
 800f700:	f001 fe84 	bl	801140c <__i2b>
 800f704:	4606      	mov	r6, r0
 800f706:	2800      	cmp	r0, #0
 800f708:	f43f aeee 	beq.w	800f4e8 <_strtod_l+0x490>
 800f70c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f70e:	9904      	ldr	r1, [sp, #16]
 800f710:	2b00      	cmp	r3, #0
 800f712:	bfab      	itete	ge
 800f714:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f716:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f718:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f71a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f71e:	bfac      	ite	ge
 800f720:	eb03 0902 	addge.w	r9, r3, r2
 800f724:	1ad7      	sublt	r7, r2, r3
 800f726:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f728:	eba3 0801 	sub.w	r8, r3, r1
 800f72c:	4490      	add	r8, r2
 800f72e:	4ba1      	ldr	r3, [pc, #644]	; (800f9b4 <_strtod_l+0x95c>)
 800f730:	f108 38ff 	add.w	r8, r8, #4294967295
 800f734:	4598      	cmp	r8, r3
 800f736:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f73a:	f280 80c7 	bge.w	800f8cc <_strtod_l+0x874>
 800f73e:	eba3 0308 	sub.w	r3, r3, r8
 800f742:	2b1f      	cmp	r3, #31
 800f744:	eba2 0203 	sub.w	r2, r2, r3
 800f748:	f04f 0101 	mov.w	r1, #1
 800f74c:	f300 80b1 	bgt.w	800f8b2 <_strtod_l+0x85a>
 800f750:	fa01 f303 	lsl.w	r3, r1, r3
 800f754:	930d      	str	r3, [sp, #52]	; 0x34
 800f756:	2300      	movs	r3, #0
 800f758:	9308      	str	r3, [sp, #32]
 800f75a:	eb09 0802 	add.w	r8, r9, r2
 800f75e:	9b04      	ldr	r3, [sp, #16]
 800f760:	45c1      	cmp	r9, r8
 800f762:	4417      	add	r7, r2
 800f764:	441f      	add	r7, r3
 800f766:	464b      	mov	r3, r9
 800f768:	bfa8      	it	ge
 800f76a:	4643      	movge	r3, r8
 800f76c:	42bb      	cmp	r3, r7
 800f76e:	bfa8      	it	ge
 800f770:	463b      	movge	r3, r7
 800f772:	2b00      	cmp	r3, #0
 800f774:	bfc2      	ittt	gt
 800f776:	eba8 0803 	subgt.w	r8, r8, r3
 800f77a:	1aff      	subgt	r7, r7, r3
 800f77c:	eba9 0903 	subgt.w	r9, r9, r3
 800f780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f782:	2b00      	cmp	r3, #0
 800f784:	dd17      	ble.n	800f7b6 <_strtod_l+0x75e>
 800f786:	4631      	mov	r1, r6
 800f788:	461a      	mov	r2, r3
 800f78a:	4620      	mov	r0, r4
 800f78c:	f001 fefe 	bl	801158c <__pow5mult>
 800f790:	4606      	mov	r6, r0
 800f792:	2800      	cmp	r0, #0
 800f794:	f43f aea8 	beq.w	800f4e8 <_strtod_l+0x490>
 800f798:	4601      	mov	r1, r0
 800f79a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f79c:	4620      	mov	r0, r4
 800f79e:	f001 fe4b 	bl	8011438 <__multiply>
 800f7a2:	900b      	str	r0, [sp, #44]	; 0x2c
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	f43f ae9f 	beq.w	800f4e8 <_strtod_l+0x490>
 800f7aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f001 fd2b 	bl	8011208 <_Bfree>
 800f7b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7b4:	9318      	str	r3, [sp, #96]	; 0x60
 800f7b6:	f1b8 0f00 	cmp.w	r8, #0
 800f7ba:	f300 808c 	bgt.w	800f8d6 <_strtod_l+0x87e>
 800f7be:	9b06      	ldr	r3, [sp, #24]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	dd08      	ble.n	800f7d6 <_strtod_l+0x77e>
 800f7c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f7c6:	9905      	ldr	r1, [sp, #20]
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	f001 fedf 	bl	801158c <__pow5mult>
 800f7ce:	9005      	str	r0, [sp, #20]
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	f43f ae89 	beq.w	800f4e8 <_strtod_l+0x490>
 800f7d6:	2f00      	cmp	r7, #0
 800f7d8:	dd08      	ble.n	800f7ec <_strtod_l+0x794>
 800f7da:	9905      	ldr	r1, [sp, #20]
 800f7dc:	463a      	mov	r2, r7
 800f7de:	4620      	mov	r0, r4
 800f7e0:	f001 ff2e 	bl	8011640 <__lshift>
 800f7e4:	9005      	str	r0, [sp, #20]
 800f7e6:	2800      	cmp	r0, #0
 800f7e8:	f43f ae7e 	beq.w	800f4e8 <_strtod_l+0x490>
 800f7ec:	f1b9 0f00 	cmp.w	r9, #0
 800f7f0:	dd08      	ble.n	800f804 <_strtod_l+0x7ac>
 800f7f2:	4631      	mov	r1, r6
 800f7f4:	464a      	mov	r2, r9
 800f7f6:	4620      	mov	r0, r4
 800f7f8:	f001 ff22 	bl	8011640 <__lshift>
 800f7fc:	4606      	mov	r6, r0
 800f7fe:	2800      	cmp	r0, #0
 800f800:	f43f ae72 	beq.w	800f4e8 <_strtod_l+0x490>
 800f804:	9a05      	ldr	r2, [sp, #20]
 800f806:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f808:	4620      	mov	r0, r4
 800f80a:	f001 ffa5 	bl	8011758 <__mdiff>
 800f80e:	4605      	mov	r5, r0
 800f810:	2800      	cmp	r0, #0
 800f812:	f43f ae69 	beq.w	800f4e8 <_strtod_l+0x490>
 800f816:	68c3      	ldr	r3, [r0, #12]
 800f818:	930b      	str	r3, [sp, #44]	; 0x2c
 800f81a:	2300      	movs	r3, #0
 800f81c:	60c3      	str	r3, [r0, #12]
 800f81e:	4631      	mov	r1, r6
 800f820:	f001 ff7e 	bl	8011720 <__mcmp>
 800f824:	2800      	cmp	r0, #0
 800f826:	da60      	bge.n	800f8ea <_strtod_l+0x892>
 800f828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f82a:	ea53 030a 	orrs.w	r3, r3, sl
 800f82e:	f040 8082 	bne.w	800f936 <_strtod_l+0x8de>
 800f832:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f836:	2b00      	cmp	r3, #0
 800f838:	d17d      	bne.n	800f936 <_strtod_l+0x8de>
 800f83a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f83e:	0d1b      	lsrs	r3, r3, #20
 800f840:	051b      	lsls	r3, r3, #20
 800f842:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f846:	d976      	bls.n	800f936 <_strtod_l+0x8de>
 800f848:	696b      	ldr	r3, [r5, #20]
 800f84a:	b913      	cbnz	r3, 800f852 <_strtod_l+0x7fa>
 800f84c:	692b      	ldr	r3, [r5, #16]
 800f84e:	2b01      	cmp	r3, #1
 800f850:	dd71      	ble.n	800f936 <_strtod_l+0x8de>
 800f852:	4629      	mov	r1, r5
 800f854:	2201      	movs	r2, #1
 800f856:	4620      	mov	r0, r4
 800f858:	f001 fef2 	bl	8011640 <__lshift>
 800f85c:	4631      	mov	r1, r6
 800f85e:	4605      	mov	r5, r0
 800f860:	f001 ff5e 	bl	8011720 <__mcmp>
 800f864:	2800      	cmp	r0, #0
 800f866:	dd66      	ble.n	800f936 <_strtod_l+0x8de>
 800f868:	9904      	ldr	r1, [sp, #16]
 800f86a:	4a53      	ldr	r2, [pc, #332]	; (800f9b8 <_strtod_l+0x960>)
 800f86c:	465b      	mov	r3, fp
 800f86e:	2900      	cmp	r1, #0
 800f870:	f000 8081 	beq.w	800f976 <_strtod_l+0x91e>
 800f874:	ea02 010b 	and.w	r1, r2, fp
 800f878:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f87c:	dc7b      	bgt.n	800f976 <_strtod_l+0x91e>
 800f87e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f882:	f77f aea9 	ble.w	800f5d8 <_strtod_l+0x580>
 800f886:	4b4d      	ldr	r3, [pc, #308]	; (800f9bc <_strtod_l+0x964>)
 800f888:	4650      	mov	r0, sl
 800f88a:	4659      	mov	r1, fp
 800f88c:	2200      	movs	r2, #0
 800f88e:	f7f0 fee3 	bl	8000658 <__aeabi_dmul>
 800f892:	460b      	mov	r3, r1
 800f894:	4303      	orrs	r3, r0
 800f896:	bf08      	it	eq
 800f898:	2322      	moveq	r3, #34	; 0x22
 800f89a:	4682      	mov	sl, r0
 800f89c:	468b      	mov	fp, r1
 800f89e:	bf08      	it	eq
 800f8a0:	6023      	streq	r3, [r4, #0]
 800f8a2:	e62b      	b.n	800f4fc <_strtod_l+0x4a4>
 800f8a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800f8ac:	ea03 0a0a 	and.w	sl, r3, sl
 800f8b0:	e6e3      	b.n	800f67a <_strtod_l+0x622>
 800f8b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f8b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f8ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f8be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f8c2:	fa01 f308 	lsl.w	r3, r1, r8
 800f8c6:	9308      	str	r3, [sp, #32]
 800f8c8:	910d      	str	r1, [sp, #52]	; 0x34
 800f8ca:	e746      	b.n	800f75a <_strtod_l+0x702>
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	9308      	str	r3, [sp, #32]
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	930d      	str	r3, [sp, #52]	; 0x34
 800f8d4:	e741      	b.n	800f75a <_strtod_l+0x702>
 800f8d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f8d8:	4642      	mov	r2, r8
 800f8da:	4620      	mov	r0, r4
 800f8dc:	f001 feb0 	bl	8011640 <__lshift>
 800f8e0:	9018      	str	r0, [sp, #96]	; 0x60
 800f8e2:	2800      	cmp	r0, #0
 800f8e4:	f47f af6b 	bne.w	800f7be <_strtod_l+0x766>
 800f8e8:	e5fe      	b.n	800f4e8 <_strtod_l+0x490>
 800f8ea:	465f      	mov	r7, fp
 800f8ec:	d16e      	bne.n	800f9cc <_strtod_l+0x974>
 800f8ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f8f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f8f4:	b342      	cbz	r2, 800f948 <_strtod_l+0x8f0>
 800f8f6:	4a32      	ldr	r2, [pc, #200]	; (800f9c0 <_strtod_l+0x968>)
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d128      	bne.n	800f94e <_strtod_l+0x8f6>
 800f8fc:	9b04      	ldr	r3, [sp, #16]
 800f8fe:	4651      	mov	r1, sl
 800f900:	b1eb      	cbz	r3, 800f93e <_strtod_l+0x8e6>
 800f902:	4b2d      	ldr	r3, [pc, #180]	; (800f9b8 <_strtod_l+0x960>)
 800f904:	403b      	ands	r3, r7
 800f906:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f90a:	f04f 32ff 	mov.w	r2, #4294967295
 800f90e:	d819      	bhi.n	800f944 <_strtod_l+0x8ec>
 800f910:	0d1b      	lsrs	r3, r3, #20
 800f912:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f916:	fa02 f303 	lsl.w	r3, r2, r3
 800f91a:	4299      	cmp	r1, r3
 800f91c:	d117      	bne.n	800f94e <_strtod_l+0x8f6>
 800f91e:	4b29      	ldr	r3, [pc, #164]	; (800f9c4 <_strtod_l+0x96c>)
 800f920:	429f      	cmp	r7, r3
 800f922:	d102      	bne.n	800f92a <_strtod_l+0x8d2>
 800f924:	3101      	adds	r1, #1
 800f926:	f43f addf 	beq.w	800f4e8 <_strtod_l+0x490>
 800f92a:	4b23      	ldr	r3, [pc, #140]	; (800f9b8 <_strtod_l+0x960>)
 800f92c:	403b      	ands	r3, r7
 800f92e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f932:	f04f 0a00 	mov.w	sl, #0
 800f936:	9b04      	ldr	r3, [sp, #16]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d1a4      	bne.n	800f886 <_strtod_l+0x82e>
 800f93c:	e5de      	b.n	800f4fc <_strtod_l+0x4a4>
 800f93e:	f04f 33ff 	mov.w	r3, #4294967295
 800f942:	e7ea      	b.n	800f91a <_strtod_l+0x8c2>
 800f944:	4613      	mov	r3, r2
 800f946:	e7e8      	b.n	800f91a <_strtod_l+0x8c2>
 800f948:	ea53 030a 	orrs.w	r3, r3, sl
 800f94c:	d08c      	beq.n	800f868 <_strtod_l+0x810>
 800f94e:	9b08      	ldr	r3, [sp, #32]
 800f950:	b1db      	cbz	r3, 800f98a <_strtod_l+0x932>
 800f952:	423b      	tst	r3, r7
 800f954:	d0ef      	beq.n	800f936 <_strtod_l+0x8de>
 800f956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f958:	9a04      	ldr	r2, [sp, #16]
 800f95a:	4650      	mov	r0, sl
 800f95c:	4659      	mov	r1, fp
 800f95e:	b1c3      	cbz	r3, 800f992 <_strtod_l+0x93a>
 800f960:	f7ff fb5c 	bl	800f01c <sulp>
 800f964:	4602      	mov	r2, r0
 800f966:	460b      	mov	r3, r1
 800f968:	ec51 0b18 	vmov	r0, r1, d8
 800f96c:	f7f0 fcbe 	bl	80002ec <__adddf3>
 800f970:	4682      	mov	sl, r0
 800f972:	468b      	mov	fp, r1
 800f974:	e7df      	b.n	800f936 <_strtod_l+0x8de>
 800f976:	4013      	ands	r3, r2
 800f978:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f97c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f980:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f984:	f04f 3aff 	mov.w	sl, #4294967295
 800f988:	e7d5      	b.n	800f936 <_strtod_l+0x8de>
 800f98a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f98c:	ea13 0f0a 	tst.w	r3, sl
 800f990:	e7e0      	b.n	800f954 <_strtod_l+0x8fc>
 800f992:	f7ff fb43 	bl	800f01c <sulp>
 800f996:	4602      	mov	r2, r0
 800f998:	460b      	mov	r3, r1
 800f99a:	ec51 0b18 	vmov	r0, r1, d8
 800f99e:	f7f0 fca3 	bl	80002e8 <__aeabi_dsub>
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	4682      	mov	sl, r0
 800f9a8:	468b      	mov	fp, r1
 800f9aa:	f7f1 f8bd 	bl	8000b28 <__aeabi_dcmpeq>
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	d0c1      	beq.n	800f936 <_strtod_l+0x8de>
 800f9b2:	e611      	b.n	800f5d8 <_strtod_l+0x580>
 800f9b4:	fffffc02 	.word	0xfffffc02
 800f9b8:	7ff00000 	.word	0x7ff00000
 800f9bc:	39500000 	.word	0x39500000
 800f9c0:	000fffff 	.word	0x000fffff
 800f9c4:	7fefffff 	.word	0x7fefffff
 800f9c8:	08012ed0 	.word	0x08012ed0
 800f9cc:	4631      	mov	r1, r6
 800f9ce:	4628      	mov	r0, r5
 800f9d0:	f002 f824 	bl	8011a1c <__ratio>
 800f9d4:	ec59 8b10 	vmov	r8, r9, d0
 800f9d8:	ee10 0a10 	vmov	r0, s0
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f9e2:	4649      	mov	r1, r9
 800f9e4:	f7f1 f8b4 	bl	8000b50 <__aeabi_dcmple>
 800f9e8:	2800      	cmp	r0, #0
 800f9ea:	d07a      	beq.n	800fae2 <_strtod_l+0xa8a>
 800f9ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d04a      	beq.n	800fa88 <_strtod_l+0xa30>
 800f9f2:	4b95      	ldr	r3, [pc, #596]	; (800fc48 <_strtod_l+0xbf0>)
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f9fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800fc48 <_strtod_l+0xbf0>
 800f9fe:	f04f 0800 	mov.w	r8, #0
 800fa02:	4b92      	ldr	r3, [pc, #584]	; (800fc4c <_strtod_l+0xbf4>)
 800fa04:	403b      	ands	r3, r7
 800fa06:	930d      	str	r3, [sp, #52]	; 0x34
 800fa08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa0a:	4b91      	ldr	r3, [pc, #580]	; (800fc50 <_strtod_l+0xbf8>)
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	f040 80b0 	bne.w	800fb72 <_strtod_l+0xb1a>
 800fa12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fa16:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800fa1a:	ec4b ab10 	vmov	d0, sl, fp
 800fa1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fa22:	f001 ff23 	bl	801186c <__ulp>
 800fa26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fa2a:	ec53 2b10 	vmov	r2, r3, d0
 800fa2e:	f7f0 fe13 	bl	8000658 <__aeabi_dmul>
 800fa32:	4652      	mov	r2, sl
 800fa34:	465b      	mov	r3, fp
 800fa36:	f7f0 fc59 	bl	80002ec <__adddf3>
 800fa3a:	460b      	mov	r3, r1
 800fa3c:	4983      	ldr	r1, [pc, #524]	; (800fc4c <_strtod_l+0xbf4>)
 800fa3e:	4a85      	ldr	r2, [pc, #532]	; (800fc54 <_strtod_l+0xbfc>)
 800fa40:	4019      	ands	r1, r3
 800fa42:	4291      	cmp	r1, r2
 800fa44:	4682      	mov	sl, r0
 800fa46:	d960      	bls.n	800fb0a <_strtod_l+0xab2>
 800fa48:	ee18 3a90 	vmov	r3, s17
 800fa4c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d104      	bne.n	800fa5e <_strtod_l+0xa06>
 800fa54:	ee18 3a10 	vmov	r3, s16
 800fa58:	3301      	adds	r3, #1
 800fa5a:	f43f ad45 	beq.w	800f4e8 <_strtod_l+0x490>
 800fa5e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800fc60 <_strtod_l+0xc08>
 800fa62:	f04f 3aff 	mov.w	sl, #4294967295
 800fa66:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fa68:	4620      	mov	r0, r4
 800fa6a:	f001 fbcd 	bl	8011208 <_Bfree>
 800fa6e:	9905      	ldr	r1, [sp, #20]
 800fa70:	4620      	mov	r0, r4
 800fa72:	f001 fbc9 	bl	8011208 <_Bfree>
 800fa76:	4631      	mov	r1, r6
 800fa78:	4620      	mov	r0, r4
 800fa7a:	f001 fbc5 	bl	8011208 <_Bfree>
 800fa7e:	4629      	mov	r1, r5
 800fa80:	4620      	mov	r0, r4
 800fa82:	f001 fbc1 	bl	8011208 <_Bfree>
 800fa86:	e61a      	b.n	800f6be <_strtod_l+0x666>
 800fa88:	f1ba 0f00 	cmp.w	sl, #0
 800fa8c:	d11b      	bne.n	800fac6 <_strtod_l+0xa6e>
 800fa8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa92:	b9f3      	cbnz	r3, 800fad2 <_strtod_l+0xa7a>
 800fa94:	4b6c      	ldr	r3, [pc, #432]	; (800fc48 <_strtod_l+0xbf0>)
 800fa96:	2200      	movs	r2, #0
 800fa98:	4640      	mov	r0, r8
 800fa9a:	4649      	mov	r1, r9
 800fa9c:	f7f1 f84e 	bl	8000b3c <__aeabi_dcmplt>
 800faa0:	b9d0      	cbnz	r0, 800fad8 <_strtod_l+0xa80>
 800faa2:	4640      	mov	r0, r8
 800faa4:	4649      	mov	r1, r9
 800faa6:	4b6c      	ldr	r3, [pc, #432]	; (800fc58 <_strtod_l+0xc00>)
 800faa8:	2200      	movs	r2, #0
 800faaa:	f7f0 fdd5 	bl	8000658 <__aeabi_dmul>
 800faae:	4680      	mov	r8, r0
 800fab0:	4689      	mov	r9, r1
 800fab2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fab6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800faba:	9315      	str	r3, [sp, #84]	; 0x54
 800fabc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fac0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fac4:	e79d      	b.n	800fa02 <_strtod_l+0x9aa>
 800fac6:	f1ba 0f01 	cmp.w	sl, #1
 800faca:	d102      	bne.n	800fad2 <_strtod_l+0xa7a>
 800facc:	2f00      	cmp	r7, #0
 800face:	f43f ad83 	beq.w	800f5d8 <_strtod_l+0x580>
 800fad2:	4b62      	ldr	r3, [pc, #392]	; (800fc5c <_strtod_l+0xc04>)
 800fad4:	2200      	movs	r2, #0
 800fad6:	e78e      	b.n	800f9f6 <_strtod_l+0x99e>
 800fad8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800fc58 <_strtod_l+0xc00>
 800fadc:	f04f 0800 	mov.w	r8, #0
 800fae0:	e7e7      	b.n	800fab2 <_strtod_l+0xa5a>
 800fae2:	4b5d      	ldr	r3, [pc, #372]	; (800fc58 <_strtod_l+0xc00>)
 800fae4:	4640      	mov	r0, r8
 800fae6:	4649      	mov	r1, r9
 800fae8:	2200      	movs	r2, #0
 800faea:	f7f0 fdb5 	bl	8000658 <__aeabi_dmul>
 800faee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800faf0:	4680      	mov	r8, r0
 800faf2:	4689      	mov	r9, r1
 800faf4:	b933      	cbnz	r3, 800fb04 <_strtod_l+0xaac>
 800faf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fafa:	900e      	str	r0, [sp, #56]	; 0x38
 800fafc:	930f      	str	r3, [sp, #60]	; 0x3c
 800fafe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800fb02:	e7dd      	b.n	800fac0 <_strtod_l+0xa68>
 800fb04:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800fb08:	e7f9      	b.n	800fafe <_strtod_l+0xaa6>
 800fb0a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fb0e:	9b04      	ldr	r3, [sp, #16]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d1a8      	bne.n	800fa66 <_strtod_l+0xa0e>
 800fb14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fb18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb1a:	0d1b      	lsrs	r3, r3, #20
 800fb1c:	051b      	lsls	r3, r3, #20
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d1a1      	bne.n	800fa66 <_strtod_l+0xa0e>
 800fb22:	4640      	mov	r0, r8
 800fb24:	4649      	mov	r1, r9
 800fb26:	f7f1 f8f7 	bl	8000d18 <__aeabi_d2lz>
 800fb2a:	f7f0 fd67 	bl	80005fc <__aeabi_l2d>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	460b      	mov	r3, r1
 800fb32:	4640      	mov	r0, r8
 800fb34:	4649      	mov	r1, r9
 800fb36:	f7f0 fbd7 	bl	80002e8 <__aeabi_dsub>
 800fb3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fb3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fb40:	ea43 030a 	orr.w	r3, r3, sl
 800fb44:	4313      	orrs	r3, r2
 800fb46:	4680      	mov	r8, r0
 800fb48:	4689      	mov	r9, r1
 800fb4a:	d055      	beq.n	800fbf8 <_strtod_l+0xba0>
 800fb4c:	a336      	add	r3, pc, #216	; (adr r3, 800fc28 <_strtod_l+0xbd0>)
 800fb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb52:	f7f0 fff3 	bl	8000b3c <__aeabi_dcmplt>
 800fb56:	2800      	cmp	r0, #0
 800fb58:	f47f acd0 	bne.w	800f4fc <_strtod_l+0x4a4>
 800fb5c:	a334      	add	r3, pc, #208	; (adr r3, 800fc30 <_strtod_l+0xbd8>)
 800fb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb62:	4640      	mov	r0, r8
 800fb64:	4649      	mov	r1, r9
 800fb66:	f7f1 f807 	bl	8000b78 <__aeabi_dcmpgt>
 800fb6a:	2800      	cmp	r0, #0
 800fb6c:	f43f af7b 	beq.w	800fa66 <_strtod_l+0xa0e>
 800fb70:	e4c4      	b.n	800f4fc <_strtod_l+0x4a4>
 800fb72:	9b04      	ldr	r3, [sp, #16]
 800fb74:	b333      	cbz	r3, 800fbc4 <_strtod_l+0xb6c>
 800fb76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb78:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fb7c:	d822      	bhi.n	800fbc4 <_strtod_l+0xb6c>
 800fb7e:	a32e      	add	r3, pc, #184	; (adr r3, 800fc38 <_strtod_l+0xbe0>)
 800fb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb84:	4640      	mov	r0, r8
 800fb86:	4649      	mov	r1, r9
 800fb88:	f7f0 ffe2 	bl	8000b50 <__aeabi_dcmple>
 800fb8c:	b1a0      	cbz	r0, 800fbb8 <_strtod_l+0xb60>
 800fb8e:	4649      	mov	r1, r9
 800fb90:	4640      	mov	r0, r8
 800fb92:	f7f1 f839 	bl	8000c08 <__aeabi_d2uiz>
 800fb96:	2801      	cmp	r0, #1
 800fb98:	bf38      	it	cc
 800fb9a:	2001      	movcc	r0, #1
 800fb9c:	f7f0 fce2 	bl	8000564 <__aeabi_ui2d>
 800fba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fba2:	4680      	mov	r8, r0
 800fba4:	4689      	mov	r9, r1
 800fba6:	bb23      	cbnz	r3, 800fbf2 <_strtod_l+0xb9a>
 800fba8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fbac:	9010      	str	r0, [sp, #64]	; 0x40
 800fbae:	9311      	str	r3, [sp, #68]	; 0x44
 800fbb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fbb4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fbb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fbbc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fbc0:	1a9b      	subs	r3, r3, r2
 800fbc2:	9309      	str	r3, [sp, #36]	; 0x24
 800fbc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fbc8:	eeb0 0a48 	vmov.f32	s0, s16
 800fbcc:	eef0 0a68 	vmov.f32	s1, s17
 800fbd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fbd4:	f001 fe4a 	bl	801186c <__ulp>
 800fbd8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fbdc:	ec53 2b10 	vmov	r2, r3, d0
 800fbe0:	f7f0 fd3a 	bl	8000658 <__aeabi_dmul>
 800fbe4:	ec53 2b18 	vmov	r2, r3, d8
 800fbe8:	f7f0 fb80 	bl	80002ec <__adddf3>
 800fbec:	4682      	mov	sl, r0
 800fbee:	468b      	mov	fp, r1
 800fbf0:	e78d      	b.n	800fb0e <_strtod_l+0xab6>
 800fbf2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800fbf6:	e7db      	b.n	800fbb0 <_strtod_l+0xb58>
 800fbf8:	a311      	add	r3, pc, #68	; (adr r3, 800fc40 <_strtod_l+0xbe8>)
 800fbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfe:	f7f0 ff9d 	bl	8000b3c <__aeabi_dcmplt>
 800fc02:	e7b2      	b.n	800fb6a <_strtod_l+0xb12>
 800fc04:	2300      	movs	r3, #0
 800fc06:	930a      	str	r3, [sp, #40]	; 0x28
 800fc08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fc0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc0c:	6013      	str	r3, [r2, #0]
 800fc0e:	f7ff ba6b 	b.w	800f0e8 <_strtod_l+0x90>
 800fc12:	2a65      	cmp	r2, #101	; 0x65
 800fc14:	f43f ab5f 	beq.w	800f2d6 <_strtod_l+0x27e>
 800fc18:	2a45      	cmp	r2, #69	; 0x45
 800fc1a:	f43f ab5c 	beq.w	800f2d6 <_strtod_l+0x27e>
 800fc1e:	2301      	movs	r3, #1
 800fc20:	f7ff bb94 	b.w	800f34c <_strtod_l+0x2f4>
 800fc24:	f3af 8000 	nop.w
 800fc28:	94a03595 	.word	0x94a03595
 800fc2c:	3fdfffff 	.word	0x3fdfffff
 800fc30:	35afe535 	.word	0x35afe535
 800fc34:	3fe00000 	.word	0x3fe00000
 800fc38:	ffc00000 	.word	0xffc00000
 800fc3c:	41dfffff 	.word	0x41dfffff
 800fc40:	94a03595 	.word	0x94a03595
 800fc44:	3fcfffff 	.word	0x3fcfffff
 800fc48:	3ff00000 	.word	0x3ff00000
 800fc4c:	7ff00000 	.word	0x7ff00000
 800fc50:	7fe00000 	.word	0x7fe00000
 800fc54:	7c9fffff 	.word	0x7c9fffff
 800fc58:	3fe00000 	.word	0x3fe00000
 800fc5c:	bff00000 	.word	0xbff00000
 800fc60:	7fefffff 	.word	0x7fefffff

0800fc64 <_strtod_r>:
 800fc64:	4b01      	ldr	r3, [pc, #4]	; (800fc6c <_strtod_r+0x8>)
 800fc66:	f7ff b9f7 	b.w	800f058 <_strtod_l>
 800fc6a:	bf00      	nop
 800fc6c:	20000330 	.word	0x20000330

0800fc70 <_strtol_l.constprop.0>:
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc76:	d001      	beq.n	800fc7c <_strtol_l.constprop.0+0xc>
 800fc78:	2b24      	cmp	r3, #36	; 0x24
 800fc7a:	d906      	bls.n	800fc8a <_strtol_l.constprop.0+0x1a>
 800fc7c:	f7fe fae6 	bl	800e24c <__errno>
 800fc80:	2316      	movs	r3, #22
 800fc82:	6003      	str	r3, [r0, #0]
 800fc84:	2000      	movs	r0, #0
 800fc86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc8a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fd70 <_strtol_l.constprop.0+0x100>
 800fc8e:	460d      	mov	r5, r1
 800fc90:	462e      	mov	r6, r5
 800fc92:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc96:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fc9a:	f017 0708 	ands.w	r7, r7, #8
 800fc9e:	d1f7      	bne.n	800fc90 <_strtol_l.constprop.0+0x20>
 800fca0:	2c2d      	cmp	r4, #45	; 0x2d
 800fca2:	d132      	bne.n	800fd0a <_strtol_l.constprop.0+0x9a>
 800fca4:	782c      	ldrb	r4, [r5, #0]
 800fca6:	2701      	movs	r7, #1
 800fca8:	1cb5      	adds	r5, r6, #2
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d05b      	beq.n	800fd66 <_strtol_l.constprop.0+0xf6>
 800fcae:	2b10      	cmp	r3, #16
 800fcb0:	d109      	bne.n	800fcc6 <_strtol_l.constprop.0+0x56>
 800fcb2:	2c30      	cmp	r4, #48	; 0x30
 800fcb4:	d107      	bne.n	800fcc6 <_strtol_l.constprop.0+0x56>
 800fcb6:	782c      	ldrb	r4, [r5, #0]
 800fcb8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fcbc:	2c58      	cmp	r4, #88	; 0x58
 800fcbe:	d14d      	bne.n	800fd5c <_strtol_l.constprop.0+0xec>
 800fcc0:	786c      	ldrb	r4, [r5, #1]
 800fcc2:	2310      	movs	r3, #16
 800fcc4:	3502      	adds	r5, #2
 800fcc6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fcca:	f108 38ff 	add.w	r8, r8, #4294967295
 800fcce:	f04f 0c00 	mov.w	ip, #0
 800fcd2:	fbb8 f9f3 	udiv	r9, r8, r3
 800fcd6:	4666      	mov	r6, ip
 800fcd8:	fb03 8a19 	mls	sl, r3, r9, r8
 800fcdc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fce0:	f1be 0f09 	cmp.w	lr, #9
 800fce4:	d816      	bhi.n	800fd14 <_strtol_l.constprop.0+0xa4>
 800fce6:	4674      	mov	r4, lr
 800fce8:	42a3      	cmp	r3, r4
 800fcea:	dd24      	ble.n	800fd36 <_strtol_l.constprop.0+0xc6>
 800fcec:	f1bc 0f00 	cmp.w	ip, #0
 800fcf0:	db1e      	blt.n	800fd30 <_strtol_l.constprop.0+0xc0>
 800fcf2:	45b1      	cmp	r9, r6
 800fcf4:	d31c      	bcc.n	800fd30 <_strtol_l.constprop.0+0xc0>
 800fcf6:	d101      	bne.n	800fcfc <_strtol_l.constprop.0+0x8c>
 800fcf8:	45a2      	cmp	sl, r4
 800fcfa:	db19      	blt.n	800fd30 <_strtol_l.constprop.0+0xc0>
 800fcfc:	fb06 4603 	mla	r6, r6, r3, r4
 800fd00:	f04f 0c01 	mov.w	ip, #1
 800fd04:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd08:	e7e8      	b.n	800fcdc <_strtol_l.constprop.0+0x6c>
 800fd0a:	2c2b      	cmp	r4, #43	; 0x2b
 800fd0c:	bf04      	itt	eq
 800fd0e:	782c      	ldrbeq	r4, [r5, #0]
 800fd10:	1cb5      	addeq	r5, r6, #2
 800fd12:	e7ca      	b.n	800fcaa <_strtol_l.constprop.0+0x3a>
 800fd14:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fd18:	f1be 0f19 	cmp.w	lr, #25
 800fd1c:	d801      	bhi.n	800fd22 <_strtol_l.constprop.0+0xb2>
 800fd1e:	3c37      	subs	r4, #55	; 0x37
 800fd20:	e7e2      	b.n	800fce8 <_strtol_l.constprop.0+0x78>
 800fd22:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fd26:	f1be 0f19 	cmp.w	lr, #25
 800fd2a:	d804      	bhi.n	800fd36 <_strtol_l.constprop.0+0xc6>
 800fd2c:	3c57      	subs	r4, #87	; 0x57
 800fd2e:	e7db      	b.n	800fce8 <_strtol_l.constprop.0+0x78>
 800fd30:	f04f 3cff 	mov.w	ip, #4294967295
 800fd34:	e7e6      	b.n	800fd04 <_strtol_l.constprop.0+0x94>
 800fd36:	f1bc 0f00 	cmp.w	ip, #0
 800fd3a:	da05      	bge.n	800fd48 <_strtol_l.constprop.0+0xd8>
 800fd3c:	2322      	movs	r3, #34	; 0x22
 800fd3e:	6003      	str	r3, [r0, #0]
 800fd40:	4646      	mov	r6, r8
 800fd42:	b942      	cbnz	r2, 800fd56 <_strtol_l.constprop.0+0xe6>
 800fd44:	4630      	mov	r0, r6
 800fd46:	e79e      	b.n	800fc86 <_strtol_l.constprop.0+0x16>
 800fd48:	b107      	cbz	r7, 800fd4c <_strtol_l.constprop.0+0xdc>
 800fd4a:	4276      	negs	r6, r6
 800fd4c:	2a00      	cmp	r2, #0
 800fd4e:	d0f9      	beq.n	800fd44 <_strtol_l.constprop.0+0xd4>
 800fd50:	f1bc 0f00 	cmp.w	ip, #0
 800fd54:	d000      	beq.n	800fd58 <_strtol_l.constprop.0+0xe8>
 800fd56:	1e69      	subs	r1, r5, #1
 800fd58:	6011      	str	r1, [r2, #0]
 800fd5a:	e7f3      	b.n	800fd44 <_strtol_l.constprop.0+0xd4>
 800fd5c:	2430      	movs	r4, #48	; 0x30
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d1b1      	bne.n	800fcc6 <_strtol_l.constprop.0+0x56>
 800fd62:	2308      	movs	r3, #8
 800fd64:	e7af      	b.n	800fcc6 <_strtol_l.constprop.0+0x56>
 800fd66:	2c30      	cmp	r4, #48	; 0x30
 800fd68:	d0a5      	beq.n	800fcb6 <_strtol_l.constprop.0+0x46>
 800fd6a:	230a      	movs	r3, #10
 800fd6c:	e7ab      	b.n	800fcc6 <_strtol_l.constprop.0+0x56>
 800fd6e:	bf00      	nop
 800fd70:	08012ef9 	.word	0x08012ef9

0800fd74 <_strtol_r>:
 800fd74:	f7ff bf7c 	b.w	800fc70 <_strtol_l.constprop.0>

0800fd78 <quorem>:
 800fd78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd7c:	6903      	ldr	r3, [r0, #16]
 800fd7e:	690c      	ldr	r4, [r1, #16]
 800fd80:	42a3      	cmp	r3, r4
 800fd82:	4607      	mov	r7, r0
 800fd84:	f2c0 8081 	blt.w	800fe8a <quorem+0x112>
 800fd88:	3c01      	subs	r4, #1
 800fd8a:	f101 0814 	add.w	r8, r1, #20
 800fd8e:	f100 0514 	add.w	r5, r0, #20
 800fd92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd96:	9301      	str	r3, [sp, #4]
 800fd98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fda0:	3301      	adds	r3, #1
 800fda2:	429a      	cmp	r2, r3
 800fda4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fda8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fdac:	fbb2 f6f3 	udiv	r6, r2, r3
 800fdb0:	d331      	bcc.n	800fe16 <quorem+0x9e>
 800fdb2:	f04f 0e00 	mov.w	lr, #0
 800fdb6:	4640      	mov	r0, r8
 800fdb8:	46ac      	mov	ip, r5
 800fdba:	46f2      	mov	sl, lr
 800fdbc:	f850 2b04 	ldr.w	r2, [r0], #4
 800fdc0:	b293      	uxth	r3, r2
 800fdc2:	fb06 e303 	mla	r3, r6, r3, lr
 800fdc6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fdca:	b29b      	uxth	r3, r3
 800fdcc:	ebaa 0303 	sub.w	r3, sl, r3
 800fdd0:	f8dc a000 	ldr.w	sl, [ip]
 800fdd4:	0c12      	lsrs	r2, r2, #16
 800fdd6:	fa13 f38a 	uxtah	r3, r3, sl
 800fdda:	fb06 e202 	mla	r2, r6, r2, lr
 800fdde:	9300      	str	r3, [sp, #0]
 800fde0:	9b00      	ldr	r3, [sp, #0]
 800fde2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fde6:	b292      	uxth	r2, r2
 800fde8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fdec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fdf0:	f8bd 3000 	ldrh.w	r3, [sp]
 800fdf4:	4581      	cmp	r9, r0
 800fdf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fdfa:	f84c 3b04 	str.w	r3, [ip], #4
 800fdfe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fe02:	d2db      	bcs.n	800fdbc <quorem+0x44>
 800fe04:	f855 300b 	ldr.w	r3, [r5, fp]
 800fe08:	b92b      	cbnz	r3, 800fe16 <quorem+0x9e>
 800fe0a:	9b01      	ldr	r3, [sp, #4]
 800fe0c:	3b04      	subs	r3, #4
 800fe0e:	429d      	cmp	r5, r3
 800fe10:	461a      	mov	r2, r3
 800fe12:	d32e      	bcc.n	800fe72 <quorem+0xfa>
 800fe14:	613c      	str	r4, [r7, #16]
 800fe16:	4638      	mov	r0, r7
 800fe18:	f001 fc82 	bl	8011720 <__mcmp>
 800fe1c:	2800      	cmp	r0, #0
 800fe1e:	db24      	blt.n	800fe6a <quorem+0xf2>
 800fe20:	3601      	adds	r6, #1
 800fe22:	4628      	mov	r0, r5
 800fe24:	f04f 0c00 	mov.w	ip, #0
 800fe28:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe2c:	f8d0 e000 	ldr.w	lr, [r0]
 800fe30:	b293      	uxth	r3, r2
 800fe32:	ebac 0303 	sub.w	r3, ip, r3
 800fe36:	0c12      	lsrs	r2, r2, #16
 800fe38:	fa13 f38e 	uxtah	r3, r3, lr
 800fe3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fe40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe44:	b29b      	uxth	r3, r3
 800fe46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe4a:	45c1      	cmp	r9, r8
 800fe4c:	f840 3b04 	str.w	r3, [r0], #4
 800fe50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fe54:	d2e8      	bcs.n	800fe28 <quorem+0xb0>
 800fe56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe5e:	b922      	cbnz	r2, 800fe6a <quorem+0xf2>
 800fe60:	3b04      	subs	r3, #4
 800fe62:	429d      	cmp	r5, r3
 800fe64:	461a      	mov	r2, r3
 800fe66:	d30a      	bcc.n	800fe7e <quorem+0x106>
 800fe68:	613c      	str	r4, [r7, #16]
 800fe6a:	4630      	mov	r0, r6
 800fe6c:	b003      	add	sp, #12
 800fe6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe72:	6812      	ldr	r2, [r2, #0]
 800fe74:	3b04      	subs	r3, #4
 800fe76:	2a00      	cmp	r2, #0
 800fe78:	d1cc      	bne.n	800fe14 <quorem+0x9c>
 800fe7a:	3c01      	subs	r4, #1
 800fe7c:	e7c7      	b.n	800fe0e <quorem+0x96>
 800fe7e:	6812      	ldr	r2, [r2, #0]
 800fe80:	3b04      	subs	r3, #4
 800fe82:	2a00      	cmp	r2, #0
 800fe84:	d1f0      	bne.n	800fe68 <quorem+0xf0>
 800fe86:	3c01      	subs	r4, #1
 800fe88:	e7eb      	b.n	800fe62 <quorem+0xea>
 800fe8a:	2000      	movs	r0, #0
 800fe8c:	e7ee      	b.n	800fe6c <quorem+0xf4>
	...

0800fe90 <_dtoa_r>:
 800fe90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe94:	ed2d 8b04 	vpush	{d8-d9}
 800fe98:	ec57 6b10 	vmov	r6, r7, d0
 800fe9c:	b093      	sub	sp, #76	; 0x4c
 800fe9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fea0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fea4:	9106      	str	r1, [sp, #24]
 800fea6:	ee10 aa10 	vmov	sl, s0
 800feaa:	4604      	mov	r4, r0
 800feac:	9209      	str	r2, [sp, #36]	; 0x24
 800feae:	930c      	str	r3, [sp, #48]	; 0x30
 800feb0:	46bb      	mov	fp, r7
 800feb2:	b975      	cbnz	r5, 800fed2 <_dtoa_r+0x42>
 800feb4:	2010      	movs	r0, #16
 800feb6:	f001 f94d 	bl	8011154 <malloc>
 800feba:	4602      	mov	r2, r0
 800febc:	6260      	str	r0, [r4, #36]	; 0x24
 800febe:	b920      	cbnz	r0, 800feca <_dtoa_r+0x3a>
 800fec0:	4ba7      	ldr	r3, [pc, #668]	; (8010160 <_dtoa_r+0x2d0>)
 800fec2:	21ea      	movs	r1, #234	; 0xea
 800fec4:	48a7      	ldr	r0, [pc, #668]	; (8010164 <_dtoa_r+0x2d4>)
 800fec6:	f002 f8ad 	bl	8012024 <__assert_func>
 800feca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fece:	6005      	str	r5, [r0, #0]
 800fed0:	60c5      	str	r5, [r0, #12]
 800fed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fed4:	6819      	ldr	r1, [r3, #0]
 800fed6:	b151      	cbz	r1, 800feee <_dtoa_r+0x5e>
 800fed8:	685a      	ldr	r2, [r3, #4]
 800feda:	604a      	str	r2, [r1, #4]
 800fedc:	2301      	movs	r3, #1
 800fede:	4093      	lsls	r3, r2
 800fee0:	608b      	str	r3, [r1, #8]
 800fee2:	4620      	mov	r0, r4
 800fee4:	f001 f990 	bl	8011208 <_Bfree>
 800fee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800feea:	2200      	movs	r2, #0
 800feec:	601a      	str	r2, [r3, #0]
 800feee:	1e3b      	subs	r3, r7, #0
 800fef0:	bfaa      	itet	ge
 800fef2:	2300      	movge	r3, #0
 800fef4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fef8:	f8c8 3000 	strge.w	r3, [r8]
 800fefc:	4b9a      	ldr	r3, [pc, #616]	; (8010168 <_dtoa_r+0x2d8>)
 800fefe:	bfbc      	itt	lt
 800ff00:	2201      	movlt	r2, #1
 800ff02:	f8c8 2000 	strlt.w	r2, [r8]
 800ff06:	ea33 030b 	bics.w	r3, r3, fp
 800ff0a:	d11b      	bne.n	800ff44 <_dtoa_r+0xb4>
 800ff0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ff0e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ff12:	6013      	str	r3, [r2, #0]
 800ff14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff18:	4333      	orrs	r3, r6
 800ff1a:	f000 8592 	beq.w	8010a42 <_dtoa_r+0xbb2>
 800ff1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff20:	b963      	cbnz	r3, 800ff3c <_dtoa_r+0xac>
 800ff22:	4b92      	ldr	r3, [pc, #584]	; (801016c <_dtoa_r+0x2dc>)
 800ff24:	e022      	b.n	800ff6c <_dtoa_r+0xdc>
 800ff26:	4b92      	ldr	r3, [pc, #584]	; (8010170 <_dtoa_r+0x2e0>)
 800ff28:	9301      	str	r3, [sp, #4]
 800ff2a:	3308      	adds	r3, #8
 800ff2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ff2e:	6013      	str	r3, [r2, #0]
 800ff30:	9801      	ldr	r0, [sp, #4]
 800ff32:	b013      	add	sp, #76	; 0x4c
 800ff34:	ecbd 8b04 	vpop	{d8-d9}
 800ff38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff3c:	4b8b      	ldr	r3, [pc, #556]	; (801016c <_dtoa_r+0x2dc>)
 800ff3e:	9301      	str	r3, [sp, #4]
 800ff40:	3303      	adds	r3, #3
 800ff42:	e7f3      	b.n	800ff2c <_dtoa_r+0x9c>
 800ff44:	2200      	movs	r2, #0
 800ff46:	2300      	movs	r3, #0
 800ff48:	4650      	mov	r0, sl
 800ff4a:	4659      	mov	r1, fp
 800ff4c:	f7f0 fdec 	bl	8000b28 <__aeabi_dcmpeq>
 800ff50:	ec4b ab19 	vmov	d9, sl, fp
 800ff54:	4680      	mov	r8, r0
 800ff56:	b158      	cbz	r0, 800ff70 <_dtoa_r+0xe0>
 800ff58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	6013      	str	r3, [r2, #0]
 800ff5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	f000 856b 	beq.w	8010a3c <_dtoa_r+0xbac>
 800ff66:	4883      	ldr	r0, [pc, #524]	; (8010174 <_dtoa_r+0x2e4>)
 800ff68:	6018      	str	r0, [r3, #0]
 800ff6a:	1e43      	subs	r3, r0, #1
 800ff6c:	9301      	str	r3, [sp, #4]
 800ff6e:	e7df      	b.n	800ff30 <_dtoa_r+0xa0>
 800ff70:	ec4b ab10 	vmov	d0, sl, fp
 800ff74:	aa10      	add	r2, sp, #64	; 0x40
 800ff76:	a911      	add	r1, sp, #68	; 0x44
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f001 fcf3 	bl	8011964 <__d2b>
 800ff7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ff82:	ee08 0a10 	vmov	s16, r0
 800ff86:	2d00      	cmp	r5, #0
 800ff88:	f000 8084 	beq.w	8010094 <_dtoa_r+0x204>
 800ff8c:	ee19 3a90 	vmov	r3, s19
 800ff90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ff98:	4656      	mov	r6, sl
 800ff9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ff9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ffa2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ffa6:	4b74      	ldr	r3, [pc, #464]	; (8010178 <_dtoa_r+0x2e8>)
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	4630      	mov	r0, r6
 800ffac:	4639      	mov	r1, r7
 800ffae:	f7f0 f99b 	bl	80002e8 <__aeabi_dsub>
 800ffb2:	a365      	add	r3, pc, #404	; (adr r3, 8010148 <_dtoa_r+0x2b8>)
 800ffb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb8:	f7f0 fb4e 	bl	8000658 <__aeabi_dmul>
 800ffbc:	a364      	add	r3, pc, #400	; (adr r3, 8010150 <_dtoa_r+0x2c0>)
 800ffbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc2:	f7f0 f993 	bl	80002ec <__adddf3>
 800ffc6:	4606      	mov	r6, r0
 800ffc8:	4628      	mov	r0, r5
 800ffca:	460f      	mov	r7, r1
 800ffcc:	f7f0 fada 	bl	8000584 <__aeabi_i2d>
 800ffd0:	a361      	add	r3, pc, #388	; (adr r3, 8010158 <_dtoa_r+0x2c8>)
 800ffd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd6:	f7f0 fb3f 	bl	8000658 <__aeabi_dmul>
 800ffda:	4602      	mov	r2, r0
 800ffdc:	460b      	mov	r3, r1
 800ffde:	4630      	mov	r0, r6
 800ffe0:	4639      	mov	r1, r7
 800ffe2:	f7f0 f983 	bl	80002ec <__adddf3>
 800ffe6:	4606      	mov	r6, r0
 800ffe8:	460f      	mov	r7, r1
 800ffea:	f7f0 fde5 	bl	8000bb8 <__aeabi_d2iz>
 800ffee:	2200      	movs	r2, #0
 800fff0:	9000      	str	r0, [sp, #0]
 800fff2:	2300      	movs	r3, #0
 800fff4:	4630      	mov	r0, r6
 800fff6:	4639      	mov	r1, r7
 800fff8:	f7f0 fda0 	bl	8000b3c <__aeabi_dcmplt>
 800fffc:	b150      	cbz	r0, 8010014 <_dtoa_r+0x184>
 800fffe:	9800      	ldr	r0, [sp, #0]
 8010000:	f7f0 fac0 	bl	8000584 <__aeabi_i2d>
 8010004:	4632      	mov	r2, r6
 8010006:	463b      	mov	r3, r7
 8010008:	f7f0 fd8e 	bl	8000b28 <__aeabi_dcmpeq>
 801000c:	b910      	cbnz	r0, 8010014 <_dtoa_r+0x184>
 801000e:	9b00      	ldr	r3, [sp, #0]
 8010010:	3b01      	subs	r3, #1
 8010012:	9300      	str	r3, [sp, #0]
 8010014:	9b00      	ldr	r3, [sp, #0]
 8010016:	2b16      	cmp	r3, #22
 8010018:	d85a      	bhi.n	80100d0 <_dtoa_r+0x240>
 801001a:	9a00      	ldr	r2, [sp, #0]
 801001c:	4b57      	ldr	r3, [pc, #348]	; (801017c <_dtoa_r+0x2ec>)
 801001e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010026:	ec51 0b19 	vmov	r0, r1, d9
 801002a:	f7f0 fd87 	bl	8000b3c <__aeabi_dcmplt>
 801002e:	2800      	cmp	r0, #0
 8010030:	d050      	beq.n	80100d4 <_dtoa_r+0x244>
 8010032:	9b00      	ldr	r3, [sp, #0]
 8010034:	3b01      	subs	r3, #1
 8010036:	9300      	str	r3, [sp, #0]
 8010038:	2300      	movs	r3, #0
 801003a:	930b      	str	r3, [sp, #44]	; 0x2c
 801003c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801003e:	1b5d      	subs	r5, r3, r5
 8010040:	1e6b      	subs	r3, r5, #1
 8010042:	9305      	str	r3, [sp, #20]
 8010044:	bf45      	ittet	mi
 8010046:	f1c5 0301 	rsbmi	r3, r5, #1
 801004a:	9304      	strmi	r3, [sp, #16]
 801004c:	2300      	movpl	r3, #0
 801004e:	2300      	movmi	r3, #0
 8010050:	bf4c      	ite	mi
 8010052:	9305      	strmi	r3, [sp, #20]
 8010054:	9304      	strpl	r3, [sp, #16]
 8010056:	9b00      	ldr	r3, [sp, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	db3d      	blt.n	80100d8 <_dtoa_r+0x248>
 801005c:	9b05      	ldr	r3, [sp, #20]
 801005e:	9a00      	ldr	r2, [sp, #0]
 8010060:	920a      	str	r2, [sp, #40]	; 0x28
 8010062:	4413      	add	r3, r2
 8010064:	9305      	str	r3, [sp, #20]
 8010066:	2300      	movs	r3, #0
 8010068:	9307      	str	r3, [sp, #28]
 801006a:	9b06      	ldr	r3, [sp, #24]
 801006c:	2b09      	cmp	r3, #9
 801006e:	f200 8089 	bhi.w	8010184 <_dtoa_r+0x2f4>
 8010072:	2b05      	cmp	r3, #5
 8010074:	bfc4      	itt	gt
 8010076:	3b04      	subgt	r3, #4
 8010078:	9306      	strgt	r3, [sp, #24]
 801007a:	9b06      	ldr	r3, [sp, #24]
 801007c:	f1a3 0302 	sub.w	r3, r3, #2
 8010080:	bfcc      	ite	gt
 8010082:	2500      	movgt	r5, #0
 8010084:	2501      	movle	r5, #1
 8010086:	2b03      	cmp	r3, #3
 8010088:	f200 8087 	bhi.w	801019a <_dtoa_r+0x30a>
 801008c:	e8df f003 	tbb	[pc, r3]
 8010090:	59383a2d 	.word	0x59383a2d
 8010094:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010098:	441d      	add	r5, r3
 801009a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801009e:	2b20      	cmp	r3, #32
 80100a0:	bfc1      	itttt	gt
 80100a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80100a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80100aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80100ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80100b2:	bfda      	itte	le
 80100b4:	f1c3 0320 	rsble	r3, r3, #32
 80100b8:	fa06 f003 	lslle.w	r0, r6, r3
 80100bc:	4318      	orrgt	r0, r3
 80100be:	f7f0 fa51 	bl	8000564 <__aeabi_ui2d>
 80100c2:	2301      	movs	r3, #1
 80100c4:	4606      	mov	r6, r0
 80100c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80100ca:	3d01      	subs	r5, #1
 80100cc:	930e      	str	r3, [sp, #56]	; 0x38
 80100ce:	e76a      	b.n	800ffa6 <_dtoa_r+0x116>
 80100d0:	2301      	movs	r3, #1
 80100d2:	e7b2      	b.n	801003a <_dtoa_r+0x1aa>
 80100d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80100d6:	e7b1      	b.n	801003c <_dtoa_r+0x1ac>
 80100d8:	9b04      	ldr	r3, [sp, #16]
 80100da:	9a00      	ldr	r2, [sp, #0]
 80100dc:	1a9b      	subs	r3, r3, r2
 80100de:	9304      	str	r3, [sp, #16]
 80100e0:	4253      	negs	r3, r2
 80100e2:	9307      	str	r3, [sp, #28]
 80100e4:	2300      	movs	r3, #0
 80100e6:	930a      	str	r3, [sp, #40]	; 0x28
 80100e8:	e7bf      	b.n	801006a <_dtoa_r+0x1da>
 80100ea:	2300      	movs	r3, #0
 80100ec:	9308      	str	r3, [sp, #32]
 80100ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	dc55      	bgt.n	80101a0 <_dtoa_r+0x310>
 80100f4:	2301      	movs	r3, #1
 80100f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80100fa:	461a      	mov	r2, r3
 80100fc:	9209      	str	r2, [sp, #36]	; 0x24
 80100fe:	e00c      	b.n	801011a <_dtoa_r+0x28a>
 8010100:	2301      	movs	r3, #1
 8010102:	e7f3      	b.n	80100ec <_dtoa_r+0x25c>
 8010104:	2300      	movs	r3, #0
 8010106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010108:	9308      	str	r3, [sp, #32]
 801010a:	9b00      	ldr	r3, [sp, #0]
 801010c:	4413      	add	r3, r2
 801010e:	9302      	str	r3, [sp, #8]
 8010110:	3301      	adds	r3, #1
 8010112:	2b01      	cmp	r3, #1
 8010114:	9303      	str	r3, [sp, #12]
 8010116:	bfb8      	it	lt
 8010118:	2301      	movlt	r3, #1
 801011a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801011c:	2200      	movs	r2, #0
 801011e:	6042      	str	r2, [r0, #4]
 8010120:	2204      	movs	r2, #4
 8010122:	f102 0614 	add.w	r6, r2, #20
 8010126:	429e      	cmp	r6, r3
 8010128:	6841      	ldr	r1, [r0, #4]
 801012a:	d93d      	bls.n	80101a8 <_dtoa_r+0x318>
 801012c:	4620      	mov	r0, r4
 801012e:	f001 f82b 	bl	8011188 <_Balloc>
 8010132:	9001      	str	r0, [sp, #4]
 8010134:	2800      	cmp	r0, #0
 8010136:	d13b      	bne.n	80101b0 <_dtoa_r+0x320>
 8010138:	4b11      	ldr	r3, [pc, #68]	; (8010180 <_dtoa_r+0x2f0>)
 801013a:	4602      	mov	r2, r0
 801013c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010140:	e6c0      	b.n	800fec4 <_dtoa_r+0x34>
 8010142:	2301      	movs	r3, #1
 8010144:	e7df      	b.n	8010106 <_dtoa_r+0x276>
 8010146:	bf00      	nop
 8010148:	636f4361 	.word	0x636f4361
 801014c:	3fd287a7 	.word	0x3fd287a7
 8010150:	8b60c8b3 	.word	0x8b60c8b3
 8010154:	3fc68a28 	.word	0x3fc68a28
 8010158:	509f79fb 	.word	0x509f79fb
 801015c:	3fd34413 	.word	0x3fd34413
 8010160:	08013006 	.word	0x08013006
 8010164:	0801301d 	.word	0x0801301d
 8010168:	7ff00000 	.word	0x7ff00000
 801016c:	08013002 	.word	0x08013002
 8010170:	08012ff9 	.word	0x08012ff9
 8010174:	08012e79 	.word	0x08012e79
 8010178:	3ff80000 	.word	0x3ff80000
 801017c:	08013188 	.word	0x08013188
 8010180:	08013078 	.word	0x08013078
 8010184:	2501      	movs	r5, #1
 8010186:	2300      	movs	r3, #0
 8010188:	9306      	str	r3, [sp, #24]
 801018a:	9508      	str	r5, [sp, #32]
 801018c:	f04f 33ff 	mov.w	r3, #4294967295
 8010190:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010194:	2200      	movs	r2, #0
 8010196:	2312      	movs	r3, #18
 8010198:	e7b0      	b.n	80100fc <_dtoa_r+0x26c>
 801019a:	2301      	movs	r3, #1
 801019c:	9308      	str	r3, [sp, #32]
 801019e:	e7f5      	b.n	801018c <_dtoa_r+0x2fc>
 80101a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80101a6:	e7b8      	b.n	801011a <_dtoa_r+0x28a>
 80101a8:	3101      	adds	r1, #1
 80101aa:	6041      	str	r1, [r0, #4]
 80101ac:	0052      	lsls	r2, r2, #1
 80101ae:	e7b8      	b.n	8010122 <_dtoa_r+0x292>
 80101b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101b2:	9a01      	ldr	r2, [sp, #4]
 80101b4:	601a      	str	r2, [r3, #0]
 80101b6:	9b03      	ldr	r3, [sp, #12]
 80101b8:	2b0e      	cmp	r3, #14
 80101ba:	f200 809d 	bhi.w	80102f8 <_dtoa_r+0x468>
 80101be:	2d00      	cmp	r5, #0
 80101c0:	f000 809a 	beq.w	80102f8 <_dtoa_r+0x468>
 80101c4:	9b00      	ldr	r3, [sp, #0]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	dd32      	ble.n	8010230 <_dtoa_r+0x3a0>
 80101ca:	4ab7      	ldr	r2, [pc, #732]	; (80104a8 <_dtoa_r+0x618>)
 80101cc:	f003 030f 	and.w	r3, r3, #15
 80101d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80101d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80101d8:	9b00      	ldr	r3, [sp, #0]
 80101da:	05d8      	lsls	r0, r3, #23
 80101dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80101e0:	d516      	bpl.n	8010210 <_dtoa_r+0x380>
 80101e2:	4bb2      	ldr	r3, [pc, #712]	; (80104ac <_dtoa_r+0x61c>)
 80101e4:	ec51 0b19 	vmov	r0, r1, d9
 80101e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80101ec:	f7f0 fb5e 	bl	80008ac <__aeabi_ddiv>
 80101f0:	f007 070f 	and.w	r7, r7, #15
 80101f4:	4682      	mov	sl, r0
 80101f6:	468b      	mov	fp, r1
 80101f8:	2503      	movs	r5, #3
 80101fa:	4eac      	ldr	r6, [pc, #688]	; (80104ac <_dtoa_r+0x61c>)
 80101fc:	b957      	cbnz	r7, 8010214 <_dtoa_r+0x384>
 80101fe:	4642      	mov	r2, r8
 8010200:	464b      	mov	r3, r9
 8010202:	4650      	mov	r0, sl
 8010204:	4659      	mov	r1, fp
 8010206:	f7f0 fb51 	bl	80008ac <__aeabi_ddiv>
 801020a:	4682      	mov	sl, r0
 801020c:	468b      	mov	fp, r1
 801020e:	e028      	b.n	8010262 <_dtoa_r+0x3d2>
 8010210:	2502      	movs	r5, #2
 8010212:	e7f2      	b.n	80101fa <_dtoa_r+0x36a>
 8010214:	07f9      	lsls	r1, r7, #31
 8010216:	d508      	bpl.n	801022a <_dtoa_r+0x39a>
 8010218:	4640      	mov	r0, r8
 801021a:	4649      	mov	r1, r9
 801021c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010220:	f7f0 fa1a 	bl	8000658 <__aeabi_dmul>
 8010224:	3501      	adds	r5, #1
 8010226:	4680      	mov	r8, r0
 8010228:	4689      	mov	r9, r1
 801022a:	107f      	asrs	r7, r7, #1
 801022c:	3608      	adds	r6, #8
 801022e:	e7e5      	b.n	80101fc <_dtoa_r+0x36c>
 8010230:	f000 809b 	beq.w	801036a <_dtoa_r+0x4da>
 8010234:	9b00      	ldr	r3, [sp, #0]
 8010236:	4f9d      	ldr	r7, [pc, #628]	; (80104ac <_dtoa_r+0x61c>)
 8010238:	425e      	negs	r6, r3
 801023a:	4b9b      	ldr	r3, [pc, #620]	; (80104a8 <_dtoa_r+0x618>)
 801023c:	f006 020f 	and.w	r2, r6, #15
 8010240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010248:	ec51 0b19 	vmov	r0, r1, d9
 801024c:	f7f0 fa04 	bl	8000658 <__aeabi_dmul>
 8010250:	1136      	asrs	r6, r6, #4
 8010252:	4682      	mov	sl, r0
 8010254:	468b      	mov	fp, r1
 8010256:	2300      	movs	r3, #0
 8010258:	2502      	movs	r5, #2
 801025a:	2e00      	cmp	r6, #0
 801025c:	d17a      	bne.n	8010354 <_dtoa_r+0x4c4>
 801025e:	2b00      	cmp	r3, #0
 8010260:	d1d3      	bne.n	801020a <_dtoa_r+0x37a>
 8010262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010264:	2b00      	cmp	r3, #0
 8010266:	f000 8082 	beq.w	801036e <_dtoa_r+0x4de>
 801026a:	4b91      	ldr	r3, [pc, #580]	; (80104b0 <_dtoa_r+0x620>)
 801026c:	2200      	movs	r2, #0
 801026e:	4650      	mov	r0, sl
 8010270:	4659      	mov	r1, fp
 8010272:	f7f0 fc63 	bl	8000b3c <__aeabi_dcmplt>
 8010276:	2800      	cmp	r0, #0
 8010278:	d079      	beq.n	801036e <_dtoa_r+0x4de>
 801027a:	9b03      	ldr	r3, [sp, #12]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d076      	beq.n	801036e <_dtoa_r+0x4de>
 8010280:	9b02      	ldr	r3, [sp, #8]
 8010282:	2b00      	cmp	r3, #0
 8010284:	dd36      	ble.n	80102f4 <_dtoa_r+0x464>
 8010286:	9b00      	ldr	r3, [sp, #0]
 8010288:	4650      	mov	r0, sl
 801028a:	4659      	mov	r1, fp
 801028c:	1e5f      	subs	r7, r3, #1
 801028e:	2200      	movs	r2, #0
 8010290:	4b88      	ldr	r3, [pc, #544]	; (80104b4 <_dtoa_r+0x624>)
 8010292:	f7f0 f9e1 	bl	8000658 <__aeabi_dmul>
 8010296:	9e02      	ldr	r6, [sp, #8]
 8010298:	4682      	mov	sl, r0
 801029a:	468b      	mov	fp, r1
 801029c:	3501      	adds	r5, #1
 801029e:	4628      	mov	r0, r5
 80102a0:	f7f0 f970 	bl	8000584 <__aeabi_i2d>
 80102a4:	4652      	mov	r2, sl
 80102a6:	465b      	mov	r3, fp
 80102a8:	f7f0 f9d6 	bl	8000658 <__aeabi_dmul>
 80102ac:	4b82      	ldr	r3, [pc, #520]	; (80104b8 <_dtoa_r+0x628>)
 80102ae:	2200      	movs	r2, #0
 80102b0:	f7f0 f81c 	bl	80002ec <__adddf3>
 80102b4:	46d0      	mov	r8, sl
 80102b6:	46d9      	mov	r9, fp
 80102b8:	4682      	mov	sl, r0
 80102ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80102be:	2e00      	cmp	r6, #0
 80102c0:	d158      	bne.n	8010374 <_dtoa_r+0x4e4>
 80102c2:	4b7e      	ldr	r3, [pc, #504]	; (80104bc <_dtoa_r+0x62c>)
 80102c4:	2200      	movs	r2, #0
 80102c6:	4640      	mov	r0, r8
 80102c8:	4649      	mov	r1, r9
 80102ca:	f7f0 f80d 	bl	80002e8 <__aeabi_dsub>
 80102ce:	4652      	mov	r2, sl
 80102d0:	465b      	mov	r3, fp
 80102d2:	4680      	mov	r8, r0
 80102d4:	4689      	mov	r9, r1
 80102d6:	f7f0 fc4f 	bl	8000b78 <__aeabi_dcmpgt>
 80102da:	2800      	cmp	r0, #0
 80102dc:	f040 8295 	bne.w	801080a <_dtoa_r+0x97a>
 80102e0:	4652      	mov	r2, sl
 80102e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80102e6:	4640      	mov	r0, r8
 80102e8:	4649      	mov	r1, r9
 80102ea:	f7f0 fc27 	bl	8000b3c <__aeabi_dcmplt>
 80102ee:	2800      	cmp	r0, #0
 80102f0:	f040 8289 	bne.w	8010806 <_dtoa_r+0x976>
 80102f4:	ec5b ab19 	vmov	sl, fp, d9
 80102f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	f2c0 8148 	blt.w	8010590 <_dtoa_r+0x700>
 8010300:	9a00      	ldr	r2, [sp, #0]
 8010302:	2a0e      	cmp	r2, #14
 8010304:	f300 8144 	bgt.w	8010590 <_dtoa_r+0x700>
 8010308:	4b67      	ldr	r3, [pc, #412]	; (80104a8 <_dtoa_r+0x618>)
 801030a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801030e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010314:	2b00      	cmp	r3, #0
 8010316:	f280 80d5 	bge.w	80104c4 <_dtoa_r+0x634>
 801031a:	9b03      	ldr	r3, [sp, #12]
 801031c:	2b00      	cmp	r3, #0
 801031e:	f300 80d1 	bgt.w	80104c4 <_dtoa_r+0x634>
 8010322:	f040 826f 	bne.w	8010804 <_dtoa_r+0x974>
 8010326:	4b65      	ldr	r3, [pc, #404]	; (80104bc <_dtoa_r+0x62c>)
 8010328:	2200      	movs	r2, #0
 801032a:	4640      	mov	r0, r8
 801032c:	4649      	mov	r1, r9
 801032e:	f7f0 f993 	bl	8000658 <__aeabi_dmul>
 8010332:	4652      	mov	r2, sl
 8010334:	465b      	mov	r3, fp
 8010336:	f7f0 fc15 	bl	8000b64 <__aeabi_dcmpge>
 801033a:	9e03      	ldr	r6, [sp, #12]
 801033c:	4637      	mov	r7, r6
 801033e:	2800      	cmp	r0, #0
 8010340:	f040 8245 	bne.w	80107ce <_dtoa_r+0x93e>
 8010344:	9d01      	ldr	r5, [sp, #4]
 8010346:	2331      	movs	r3, #49	; 0x31
 8010348:	f805 3b01 	strb.w	r3, [r5], #1
 801034c:	9b00      	ldr	r3, [sp, #0]
 801034e:	3301      	adds	r3, #1
 8010350:	9300      	str	r3, [sp, #0]
 8010352:	e240      	b.n	80107d6 <_dtoa_r+0x946>
 8010354:	07f2      	lsls	r2, r6, #31
 8010356:	d505      	bpl.n	8010364 <_dtoa_r+0x4d4>
 8010358:	e9d7 2300 	ldrd	r2, r3, [r7]
 801035c:	f7f0 f97c 	bl	8000658 <__aeabi_dmul>
 8010360:	3501      	adds	r5, #1
 8010362:	2301      	movs	r3, #1
 8010364:	1076      	asrs	r6, r6, #1
 8010366:	3708      	adds	r7, #8
 8010368:	e777      	b.n	801025a <_dtoa_r+0x3ca>
 801036a:	2502      	movs	r5, #2
 801036c:	e779      	b.n	8010262 <_dtoa_r+0x3d2>
 801036e:	9f00      	ldr	r7, [sp, #0]
 8010370:	9e03      	ldr	r6, [sp, #12]
 8010372:	e794      	b.n	801029e <_dtoa_r+0x40e>
 8010374:	9901      	ldr	r1, [sp, #4]
 8010376:	4b4c      	ldr	r3, [pc, #304]	; (80104a8 <_dtoa_r+0x618>)
 8010378:	4431      	add	r1, r6
 801037a:	910d      	str	r1, [sp, #52]	; 0x34
 801037c:	9908      	ldr	r1, [sp, #32]
 801037e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010382:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010386:	2900      	cmp	r1, #0
 8010388:	d043      	beq.n	8010412 <_dtoa_r+0x582>
 801038a:	494d      	ldr	r1, [pc, #308]	; (80104c0 <_dtoa_r+0x630>)
 801038c:	2000      	movs	r0, #0
 801038e:	f7f0 fa8d 	bl	80008ac <__aeabi_ddiv>
 8010392:	4652      	mov	r2, sl
 8010394:	465b      	mov	r3, fp
 8010396:	f7ef ffa7 	bl	80002e8 <__aeabi_dsub>
 801039a:	9d01      	ldr	r5, [sp, #4]
 801039c:	4682      	mov	sl, r0
 801039e:	468b      	mov	fp, r1
 80103a0:	4649      	mov	r1, r9
 80103a2:	4640      	mov	r0, r8
 80103a4:	f7f0 fc08 	bl	8000bb8 <__aeabi_d2iz>
 80103a8:	4606      	mov	r6, r0
 80103aa:	f7f0 f8eb 	bl	8000584 <__aeabi_i2d>
 80103ae:	4602      	mov	r2, r0
 80103b0:	460b      	mov	r3, r1
 80103b2:	4640      	mov	r0, r8
 80103b4:	4649      	mov	r1, r9
 80103b6:	f7ef ff97 	bl	80002e8 <__aeabi_dsub>
 80103ba:	3630      	adds	r6, #48	; 0x30
 80103bc:	f805 6b01 	strb.w	r6, [r5], #1
 80103c0:	4652      	mov	r2, sl
 80103c2:	465b      	mov	r3, fp
 80103c4:	4680      	mov	r8, r0
 80103c6:	4689      	mov	r9, r1
 80103c8:	f7f0 fbb8 	bl	8000b3c <__aeabi_dcmplt>
 80103cc:	2800      	cmp	r0, #0
 80103ce:	d163      	bne.n	8010498 <_dtoa_r+0x608>
 80103d0:	4642      	mov	r2, r8
 80103d2:	464b      	mov	r3, r9
 80103d4:	4936      	ldr	r1, [pc, #216]	; (80104b0 <_dtoa_r+0x620>)
 80103d6:	2000      	movs	r0, #0
 80103d8:	f7ef ff86 	bl	80002e8 <__aeabi_dsub>
 80103dc:	4652      	mov	r2, sl
 80103de:	465b      	mov	r3, fp
 80103e0:	f7f0 fbac 	bl	8000b3c <__aeabi_dcmplt>
 80103e4:	2800      	cmp	r0, #0
 80103e6:	f040 80b5 	bne.w	8010554 <_dtoa_r+0x6c4>
 80103ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103ec:	429d      	cmp	r5, r3
 80103ee:	d081      	beq.n	80102f4 <_dtoa_r+0x464>
 80103f0:	4b30      	ldr	r3, [pc, #192]	; (80104b4 <_dtoa_r+0x624>)
 80103f2:	2200      	movs	r2, #0
 80103f4:	4650      	mov	r0, sl
 80103f6:	4659      	mov	r1, fp
 80103f8:	f7f0 f92e 	bl	8000658 <__aeabi_dmul>
 80103fc:	4b2d      	ldr	r3, [pc, #180]	; (80104b4 <_dtoa_r+0x624>)
 80103fe:	4682      	mov	sl, r0
 8010400:	468b      	mov	fp, r1
 8010402:	4640      	mov	r0, r8
 8010404:	4649      	mov	r1, r9
 8010406:	2200      	movs	r2, #0
 8010408:	f7f0 f926 	bl	8000658 <__aeabi_dmul>
 801040c:	4680      	mov	r8, r0
 801040e:	4689      	mov	r9, r1
 8010410:	e7c6      	b.n	80103a0 <_dtoa_r+0x510>
 8010412:	4650      	mov	r0, sl
 8010414:	4659      	mov	r1, fp
 8010416:	f7f0 f91f 	bl	8000658 <__aeabi_dmul>
 801041a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801041c:	9d01      	ldr	r5, [sp, #4]
 801041e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010420:	4682      	mov	sl, r0
 8010422:	468b      	mov	fp, r1
 8010424:	4649      	mov	r1, r9
 8010426:	4640      	mov	r0, r8
 8010428:	f7f0 fbc6 	bl	8000bb8 <__aeabi_d2iz>
 801042c:	4606      	mov	r6, r0
 801042e:	f7f0 f8a9 	bl	8000584 <__aeabi_i2d>
 8010432:	3630      	adds	r6, #48	; 0x30
 8010434:	4602      	mov	r2, r0
 8010436:	460b      	mov	r3, r1
 8010438:	4640      	mov	r0, r8
 801043a:	4649      	mov	r1, r9
 801043c:	f7ef ff54 	bl	80002e8 <__aeabi_dsub>
 8010440:	f805 6b01 	strb.w	r6, [r5], #1
 8010444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010446:	429d      	cmp	r5, r3
 8010448:	4680      	mov	r8, r0
 801044a:	4689      	mov	r9, r1
 801044c:	f04f 0200 	mov.w	r2, #0
 8010450:	d124      	bne.n	801049c <_dtoa_r+0x60c>
 8010452:	4b1b      	ldr	r3, [pc, #108]	; (80104c0 <_dtoa_r+0x630>)
 8010454:	4650      	mov	r0, sl
 8010456:	4659      	mov	r1, fp
 8010458:	f7ef ff48 	bl	80002ec <__adddf3>
 801045c:	4602      	mov	r2, r0
 801045e:	460b      	mov	r3, r1
 8010460:	4640      	mov	r0, r8
 8010462:	4649      	mov	r1, r9
 8010464:	f7f0 fb88 	bl	8000b78 <__aeabi_dcmpgt>
 8010468:	2800      	cmp	r0, #0
 801046a:	d173      	bne.n	8010554 <_dtoa_r+0x6c4>
 801046c:	4652      	mov	r2, sl
 801046e:	465b      	mov	r3, fp
 8010470:	4913      	ldr	r1, [pc, #76]	; (80104c0 <_dtoa_r+0x630>)
 8010472:	2000      	movs	r0, #0
 8010474:	f7ef ff38 	bl	80002e8 <__aeabi_dsub>
 8010478:	4602      	mov	r2, r0
 801047a:	460b      	mov	r3, r1
 801047c:	4640      	mov	r0, r8
 801047e:	4649      	mov	r1, r9
 8010480:	f7f0 fb5c 	bl	8000b3c <__aeabi_dcmplt>
 8010484:	2800      	cmp	r0, #0
 8010486:	f43f af35 	beq.w	80102f4 <_dtoa_r+0x464>
 801048a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801048c:	1e6b      	subs	r3, r5, #1
 801048e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010490:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010494:	2b30      	cmp	r3, #48	; 0x30
 8010496:	d0f8      	beq.n	801048a <_dtoa_r+0x5fa>
 8010498:	9700      	str	r7, [sp, #0]
 801049a:	e049      	b.n	8010530 <_dtoa_r+0x6a0>
 801049c:	4b05      	ldr	r3, [pc, #20]	; (80104b4 <_dtoa_r+0x624>)
 801049e:	f7f0 f8db 	bl	8000658 <__aeabi_dmul>
 80104a2:	4680      	mov	r8, r0
 80104a4:	4689      	mov	r9, r1
 80104a6:	e7bd      	b.n	8010424 <_dtoa_r+0x594>
 80104a8:	08013188 	.word	0x08013188
 80104ac:	08013160 	.word	0x08013160
 80104b0:	3ff00000 	.word	0x3ff00000
 80104b4:	40240000 	.word	0x40240000
 80104b8:	401c0000 	.word	0x401c0000
 80104bc:	40140000 	.word	0x40140000
 80104c0:	3fe00000 	.word	0x3fe00000
 80104c4:	9d01      	ldr	r5, [sp, #4]
 80104c6:	4656      	mov	r6, sl
 80104c8:	465f      	mov	r7, fp
 80104ca:	4642      	mov	r2, r8
 80104cc:	464b      	mov	r3, r9
 80104ce:	4630      	mov	r0, r6
 80104d0:	4639      	mov	r1, r7
 80104d2:	f7f0 f9eb 	bl	80008ac <__aeabi_ddiv>
 80104d6:	f7f0 fb6f 	bl	8000bb8 <__aeabi_d2iz>
 80104da:	4682      	mov	sl, r0
 80104dc:	f7f0 f852 	bl	8000584 <__aeabi_i2d>
 80104e0:	4642      	mov	r2, r8
 80104e2:	464b      	mov	r3, r9
 80104e4:	f7f0 f8b8 	bl	8000658 <__aeabi_dmul>
 80104e8:	4602      	mov	r2, r0
 80104ea:	460b      	mov	r3, r1
 80104ec:	4630      	mov	r0, r6
 80104ee:	4639      	mov	r1, r7
 80104f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80104f4:	f7ef fef8 	bl	80002e8 <__aeabi_dsub>
 80104f8:	f805 6b01 	strb.w	r6, [r5], #1
 80104fc:	9e01      	ldr	r6, [sp, #4]
 80104fe:	9f03      	ldr	r7, [sp, #12]
 8010500:	1bae      	subs	r6, r5, r6
 8010502:	42b7      	cmp	r7, r6
 8010504:	4602      	mov	r2, r0
 8010506:	460b      	mov	r3, r1
 8010508:	d135      	bne.n	8010576 <_dtoa_r+0x6e6>
 801050a:	f7ef feef 	bl	80002ec <__adddf3>
 801050e:	4642      	mov	r2, r8
 8010510:	464b      	mov	r3, r9
 8010512:	4606      	mov	r6, r0
 8010514:	460f      	mov	r7, r1
 8010516:	f7f0 fb2f 	bl	8000b78 <__aeabi_dcmpgt>
 801051a:	b9d0      	cbnz	r0, 8010552 <_dtoa_r+0x6c2>
 801051c:	4642      	mov	r2, r8
 801051e:	464b      	mov	r3, r9
 8010520:	4630      	mov	r0, r6
 8010522:	4639      	mov	r1, r7
 8010524:	f7f0 fb00 	bl	8000b28 <__aeabi_dcmpeq>
 8010528:	b110      	cbz	r0, 8010530 <_dtoa_r+0x6a0>
 801052a:	f01a 0f01 	tst.w	sl, #1
 801052e:	d110      	bne.n	8010552 <_dtoa_r+0x6c2>
 8010530:	4620      	mov	r0, r4
 8010532:	ee18 1a10 	vmov	r1, s16
 8010536:	f000 fe67 	bl	8011208 <_Bfree>
 801053a:	2300      	movs	r3, #0
 801053c:	9800      	ldr	r0, [sp, #0]
 801053e:	702b      	strb	r3, [r5, #0]
 8010540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010542:	3001      	adds	r0, #1
 8010544:	6018      	str	r0, [r3, #0]
 8010546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010548:	2b00      	cmp	r3, #0
 801054a:	f43f acf1 	beq.w	800ff30 <_dtoa_r+0xa0>
 801054e:	601d      	str	r5, [r3, #0]
 8010550:	e4ee      	b.n	800ff30 <_dtoa_r+0xa0>
 8010552:	9f00      	ldr	r7, [sp, #0]
 8010554:	462b      	mov	r3, r5
 8010556:	461d      	mov	r5, r3
 8010558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801055c:	2a39      	cmp	r2, #57	; 0x39
 801055e:	d106      	bne.n	801056e <_dtoa_r+0x6de>
 8010560:	9a01      	ldr	r2, [sp, #4]
 8010562:	429a      	cmp	r2, r3
 8010564:	d1f7      	bne.n	8010556 <_dtoa_r+0x6c6>
 8010566:	9901      	ldr	r1, [sp, #4]
 8010568:	2230      	movs	r2, #48	; 0x30
 801056a:	3701      	adds	r7, #1
 801056c:	700a      	strb	r2, [r1, #0]
 801056e:	781a      	ldrb	r2, [r3, #0]
 8010570:	3201      	adds	r2, #1
 8010572:	701a      	strb	r2, [r3, #0]
 8010574:	e790      	b.n	8010498 <_dtoa_r+0x608>
 8010576:	4ba6      	ldr	r3, [pc, #664]	; (8010810 <_dtoa_r+0x980>)
 8010578:	2200      	movs	r2, #0
 801057a:	f7f0 f86d 	bl	8000658 <__aeabi_dmul>
 801057e:	2200      	movs	r2, #0
 8010580:	2300      	movs	r3, #0
 8010582:	4606      	mov	r6, r0
 8010584:	460f      	mov	r7, r1
 8010586:	f7f0 facf 	bl	8000b28 <__aeabi_dcmpeq>
 801058a:	2800      	cmp	r0, #0
 801058c:	d09d      	beq.n	80104ca <_dtoa_r+0x63a>
 801058e:	e7cf      	b.n	8010530 <_dtoa_r+0x6a0>
 8010590:	9a08      	ldr	r2, [sp, #32]
 8010592:	2a00      	cmp	r2, #0
 8010594:	f000 80d7 	beq.w	8010746 <_dtoa_r+0x8b6>
 8010598:	9a06      	ldr	r2, [sp, #24]
 801059a:	2a01      	cmp	r2, #1
 801059c:	f300 80ba 	bgt.w	8010714 <_dtoa_r+0x884>
 80105a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80105a2:	2a00      	cmp	r2, #0
 80105a4:	f000 80b2 	beq.w	801070c <_dtoa_r+0x87c>
 80105a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80105ac:	9e07      	ldr	r6, [sp, #28]
 80105ae:	9d04      	ldr	r5, [sp, #16]
 80105b0:	9a04      	ldr	r2, [sp, #16]
 80105b2:	441a      	add	r2, r3
 80105b4:	9204      	str	r2, [sp, #16]
 80105b6:	9a05      	ldr	r2, [sp, #20]
 80105b8:	2101      	movs	r1, #1
 80105ba:	441a      	add	r2, r3
 80105bc:	4620      	mov	r0, r4
 80105be:	9205      	str	r2, [sp, #20]
 80105c0:	f000 ff24 	bl	801140c <__i2b>
 80105c4:	4607      	mov	r7, r0
 80105c6:	2d00      	cmp	r5, #0
 80105c8:	dd0c      	ble.n	80105e4 <_dtoa_r+0x754>
 80105ca:	9b05      	ldr	r3, [sp, #20]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	dd09      	ble.n	80105e4 <_dtoa_r+0x754>
 80105d0:	42ab      	cmp	r3, r5
 80105d2:	9a04      	ldr	r2, [sp, #16]
 80105d4:	bfa8      	it	ge
 80105d6:	462b      	movge	r3, r5
 80105d8:	1ad2      	subs	r2, r2, r3
 80105da:	9204      	str	r2, [sp, #16]
 80105dc:	9a05      	ldr	r2, [sp, #20]
 80105de:	1aed      	subs	r5, r5, r3
 80105e0:	1ad3      	subs	r3, r2, r3
 80105e2:	9305      	str	r3, [sp, #20]
 80105e4:	9b07      	ldr	r3, [sp, #28]
 80105e6:	b31b      	cbz	r3, 8010630 <_dtoa_r+0x7a0>
 80105e8:	9b08      	ldr	r3, [sp, #32]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	f000 80af 	beq.w	801074e <_dtoa_r+0x8be>
 80105f0:	2e00      	cmp	r6, #0
 80105f2:	dd13      	ble.n	801061c <_dtoa_r+0x78c>
 80105f4:	4639      	mov	r1, r7
 80105f6:	4632      	mov	r2, r6
 80105f8:	4620      	mov	r0, r4
 80105fa:	f000 ffc7 	bl	801158c <__pow5mult>
 80105fe:	ee18 2a10 	vmov	r2, s16
 8010602:	4601      	mov	r1, r0
 8010604:	4607      	mov	r7, r0
 8010606:	4620      	mov	r0, r4
 8010608:	f000 ff16 	bl	8011438 <__multiply>
 801060c:	ee18 1a10 	vmov	r1, s16
 8010610:	4680      	mov	r8, r0
 8010612:	4620      	mov	r0, r4
 8010614:	f000 fdf8 	bl	8011208 <_Bfree>
 8010618:	ee08 8a10 	vmov	s16, r8
 801061c:	9b07      	ldr	r3, [sp, #28]
 801061e:	1b9a      	subs	r2, r3, r6
 8010620:	d006      	beq.n	8010630 <_dtoa_r+0x7a0>
 8010622:	ee18 1a10 	vmov	r1, s16
 8010626:	4620      	mov	r0, r4
 8010628:	f000 ffb0 	bl	801158c <__pow5mult>
 801062c:	ee08 0a10 	vmov	s16, r0
 8010630:	2101      	movs	r1, #1
 8010632:	4620      	mov	r0, r4
 8010634:	f000 feea 	bl	801140c <__i2b>
 8010638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801063a:	2b00      	cmp	r3, #0
 801063c:	4606      	mov	r6, r0
 801063e:	f340 8088 	ble.w	8010752 <_dtoa_r+0x8c2>
 8010642:	461a      	mov	r2, r3
 8010644:	4601      	mov	r1, r0
 8010646:	4620      	mov	r0, r4
 8010648:	f000 ffa0 	bl	801158c <__pow5mult>
 801064c:	9b06      	ldr	r3, [sp, #24]
 801064e:	2b01      	cmp	r3, #1
 8010650:	4606      	mov	r6, r0
 8010652:	f340 8081 	ble.w	8010758 <_dtoa_r+0x8c8>
 8010656:	f04f 0800 	mov.w	r8, #0
 801065a:	6933      	ldr	r3, [r6, #16]
 801065c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010660:	6918      	ldr	r0, [r3, #16]
 8010662:	f000 fe83 	bl	801136c <__hi0bits>
 8010666:	f1c0 0020 	rsb	r0, r0, #32
 801066a:	9b05      	ldr	r3, [sp, #20]
 801066c:	4418      	add	r0, r3
 801066e:	f010 001f 	ands.w	r0, r0, #31
 8010672:	f000 8092 	beq.w	801079a <_dtoa_r+0x90a>
 8010676:	f1c0 0320 	rsb	r3, r0, #32
 801067a:	2b04      	cmp	r3, #4
 801067c:	f340 808a 	ble.w	8010794 <_dtoa_r+0x904>
 8010680:	f1c0 001c 	rsb	r0, r0, #28
 8010684:	9b04      	ldr	r3, [sp, #16]
 8010686:	4403      	add	r3, r0
 8010688:	9304      	str	r3, [sp, #16]
 801068a:	9b05      	ldr	r3, [sp, #20]
 801068c:	4403      	add	r3, r0
 801068e:	4405      	add	r5, r0
 8010690:	9305      	str	r3, [sp, #20]
 8010692:	9b04      	ldr	r3, [sp, #16]
 8010694:	2b00      	cmp	r3, #0
 8010696:	dd07      	ble.n	80106a8 <_dtoa_r+0x818>
 8010698:	ee18 1a10 	vmov	r1, s16
 801069c:	461a      	mov	r2, r3
 801069e:	4620      	mov	r0, r4
 80106a0:	f000 ffce 	bl	8011640 <__lshift>
 80106a4:	ee08 0a10 	vmov	s16, r0
 80106a8:	9b05      	ldr	r3, [sp, #20]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	dd05      	ble.n	80106ba <_dtoa_r+0x82a>
 80106ae:	4631      	mov	r1, r6
 80106b0:	461a      	mov	r2, r3
 80106b2:	4620      	mov	r0, r4
 80106b4:	f000 ffc4 	bl	8011640 <__lshift>
 80106b8:	4606      	mov	r6, r0
 80106ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d06e      	beq.n	801079e <_dtoa_r+0x90e>
 80106c0:	ee18 0a10 	vmov	r0, s16
 80106c4:	4631      	mov	r1, r6
 80106c6:	f001 f82b 	bl	8011720 <__mcmp>
 80106ca:	2800      	cmp	r0, #0
 80106cc:	da67      	bge.n	801079e <_dtoa_r+0x90e>
 80106ce:	9b00      	ldr	r3, [sp, #0]
 80106d0:	3b01      	subs	r3, #1
 80106d2:	ee18 1a10 	vmov	r1, s16
 80106d6:	9300      	str	r3, [sp, #0]
 80106d8:	220a      	movs	r2, #10
 80106da:	2300      	movs	r3, #0
 80106dc:	4620      	mov	r0, r4
 80106de:	f000 fdb5 	bl	801124c <__multadd>
 80106e2:	9b08      	ldr	r3, [sp, #32]
 80106e4:	ee08 0a10 	vmov	s16, r0
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	f000 81b1 	beq.w	8010a50 <_dtoa_r+0xbc0>
 80106ee:	2300      	movs	r3, #0
 80106f0:	4639      	mov	r1, r7
 80106f2:	220a      	movs	r2, #10
 80106f4:	4620      	mov	r0, r4
 80106f6:	f000 fda9 	bl	801124c <__multadd>
 80106fa:	9b02      	ldr	r3, [sp, #8]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	4607      	mov	r7, r0
 8010700:	f300 808e 	bgt.w	8010820 <_dtoa_r+0x990>
 8010704:	9b06      	ldr	r3, [sp, #24]
 8010706:	2b02      	cmp	r3, #2
 8010708:	dc51      	bgt.n	80107ae <_dtoa_r+0x91e>
 801070a:	e089      	b.n	8010820 <_dtoa_r+0x990>
 801070c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801070e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010712:	e74b      	b.n	80105ac <_dtoa_r+0x71c>
 8010714:	9b03      	ldr	r3, [sp, #12]
 8010716:	1e5e      	subs	r6, r3, #1
 8010718:	9b07      	ldr	r3, [sp, #28]
 801071a:	42b3      	cmp	r3, r6
 801071c:	bfbf      	itttt	lt
 801071e:	9b07      	ldrlt	r3, [sp, #28]
 8010720:	9607      	strlt	r6, [sp, #28]
 8010722:	1af2      	sublt	r2, r6, r3
 8010724:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010726:	bfb6      	itet	lt
 8010728:	189b      	addlt	r3, r3, r2
 801072a:	1b9e      	subge	r6, r3, r6
 801072c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801072e:	9b03      	ldr	r3, [sp, #12]
 8010730:	bfb8      	it	lt
 8010732:	2600      	movlt	r6, #0
 8010734:	2b00      	cmp	r3, #0
 8010736:	bfb7      	itett	lt
 8010738:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801073c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010740:	1a9d      	sublt	r5, r3, r2
 8010742:	2300      	movlt	r3, #0
 8010744:	e734      	b.n	80105b0 <_dtoa_r+0x720>
 8010746:	9e07      	ldr	r6, [sp, #28]
 8010748:	9d04      	ldr	r5, [sp, #16]
 801074a:	9f08      	ldr	r7, [sp, #32]
 801074c:	e73b      	b.n	80105c6 <_dtoa_r+0x736>
 801074e:	9a07      	ldr	r2, [sp, #28]
 8010750:	e767      	b.n	8010622 <_dtoa_r+0x792>
 8010752:	9b06      	ldr	r3, [sp, #24]
 8010754:	2b01      	cmp	r3, #1
 8010756:	dc18      	bgt.n	801078a <_dtoa_r+0x8fa>
 8010758:	f1ba 0f00 	cmp.w	sl, #0
 801075c:	d115      	bne.n	801078a <_dtoa_r+0x8fa>
 801075e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010762:	b993      	cbnz	r3, 801078a <_dtoa_r+0x8fa>
 8010764:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010768:	0d1b      	lsrs	r3, r3, #20
 801076a:	051b      	lsls	r3, r3, #20
 801076c:	b183      	cbz	r3, 8010790 <_dtoa_r+0x900>
 801076e:	9b04      	ldr	r3, [sp, #16]
 8010770:	3301      	adds	r3, #1
 8010772:	9304      	str	r3, [sp, #16]
 8010774:	9b05      	ldr	r3, [sp, #20]
 8010776:	3301      	adds	r3, #1
 8010778:	9305      	str	r3, [sp, #20]
 801077a:	f04f 0801 	mov.w	r8, #1
 801077e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010780:	2b00      	cmp	r3, #0
 8010782:	f47f af6a 	bne.w	801065a <_dtoa_r+0x7ca>
 8010786:	2001      	movs	r0, #1
 8010788:	e76f      	b.n	801066a <_dtoa_r+0x7da>
 801078a:	f04f 0800 	mov.w	r8, #0
 801078e:	e7f6      	b.n	801077e <_dtoa_r+0x8ee>
 8010790:	4698      	mov	r8, r3
 8010792:	e7f4      	b.n	801077e <_dtoa_r+0x8ee>
 8010794:	f43f af7d 	beq.w	8010692 <_dtoa_r+0x802>
 8010798:	4618      	mov	r0, r3
 801079a:	301c      	adds	r0, #28
 801079c:	e772      	b.n	8010684 <_dtoa_r+0x7f4>
 801079e:	9b03      	ldr	r3, [sp, #12]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	dc37      	bgt.n	8010814 <_dtoa_r+0x984>
 80107a4:	9b06      	ldr	r3, [sp, #24]
 80107a6:	2b02      	cmp	r3, #2
 80107a8:	dd34      	ble.n	8010814 <_dtoa_r+0x984>
 80107aa:	9b03      	ldr	r3, [sp, #12]
 80107ac:	9302      	str	r3, [sp, #8]
 80107ae:	9b02      	ldr	r3, [sp, #8]
 80107b0:	b96b      	cbnz	r3, 80107ce <_dtoa_r+0x93e>
 80107b2:	4631      	mov	r1, r6
 80107b4:	2205      	movs	r2, #5
 80107b6:	4620      	mov	r0, r4
 80107b8:	f000 fd48 	bl	801124c <__multadd>
 80107bc:	4601      	mov	r1, r0
 80107be:	4606      	mov	r6, r0
 80107c0:	ee18 0a10 	vmov	r0, s16
 80107c4:	f000 ffac 	bl	8011720 <__mcmp>
 80107c8:	2800      	cmp	r0, #0
 80107ca:	f73f adbb 	bgt.w	8010344 <_dtoa_r+0x4b4>
 80107ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107d0:	9d01      	ldr	r5, [sp, #4]
 80107d2:	43db      	mvns	r3, r3
 80107d4:	9300      	str	r3, [sp, #0]
 80107d6:	f04f 0800 	mov.w	r8, #0
 80107da:	4631      	mov	r1, r6
 80107dc:	4620      	mov	r0, r4
 80107de:	f000 fd13 	bl	8011208 <_Bfree>
 80107e2:	2f00      	cmp	r7, #0
 80107e4:	f43f aea4 	beq.w	8010530 <_dtoa_r+0x6a0>
 80107e8:	f1b8 0f00 	cmp.w	r8, #0
 80107ec:	d005      	beq.n	80107fa <_dtoa_r+0x96a>
 80107ee:	45b8      	cmp	r8, r7
 80107f0:	d003      	beq.n	80107fa <_dtoa_r+0x96a>
 80107f2:	4641      	mov	r1, r8
 80107f4:	4620      	mov	r0, r4
 80107f6:	f000 fd07 	bl	8011208 <_Bfree>
 80107fa:	4639      	mov	r1, r7
 80107fc:	4620      	mov	r0, r4
 80107fe:	f000 fd03 	bl	8011208 <_Bfree>
 8010802:	e695      	b.n	8010530 <_dtoa_r+0x6a0>
 8010804:	2600      	movs	r6, #0
 8010806:	4637      	mov	r7, r6
 8010808:	e7e1      	b.n	80107ce <_dtoa_r+0x93e>
 801080a:	9700      	str	r7, [sp, #0]
 801080c:	4637      	mov	r7, r6
 801080e:	e599      	b.n	8010344 <_dtoa_r+0x4b4>
 8010810:	40240000 	.word	0x40240000
 8010814:	9b08      	ldr	r3, [sp, #32]
 8010816:	2b00      	cmp	r3, #0
 8010818:	f000 80ca 	beq.w	80109b0 <_dtoa_r+0xb20>
 801081c:	9b03      	ldr	r3, [sp, #12]
 801081e:	9302      	str	r3, [sp, #8]
 8010820:	2d00      	cmp	r5, #0
 8010822:	dd05      	ble.n	8010830 <_dtoa_r+0x9a0>
 8010824:	4639      	mov	r1, r7
 8010826:	462a      	mov	r2, r5
 8010828:	4620      	mov	r0, r4
 801082a:	f000 ff09 	bl	8011640 <__lshift>
 801082e:	4607      	mov	r7, r0
 8010830:	f1b8 0f00 	cmp.w	r8, #0
 8010834:	d05b      	beq.n	80108ee <_dtoa_r+0xa5e>
 8010836:	6879      	ldr	r1, [r7, #4]
 8010838:	4620      	mov	r0, r4
 801083a:	f000 fca5 	bl	8011188 <_Balloc>
 801083e:	4605      	mov	r5, r0
 8010840:	b928      	cbnz	r0, 801084e <_dtoa_r+0x9be>
 8010842:	4b87      	ldr	r3, [pc, #540]	; (8010a60 <_dtoa_r+0xbd0>)
 8010844:	4602      	mov	r2, r0
 8010846:	f240 21ea 	movw	r1, #746	; 0x2ea
 801084a:	f7ff bb3b 	b.w	800fec4 <_dtoa_r+0x34>
 801084e:	693a      	ldr	r2, [r7, #16]
 8010850:	3202      	adds	r2, #2
 8010852:	0092      	lsls	r2, r2, #2
 8010854:	f107 010c 	add.w	r1, r7, #12
 8010858:	300c      	adds	r0, #12
 801085a:	f7fd fd21 	bl	800e2a0 <memcpy>
 801085e:	2201      	movs	r2, #1
 8010860:	4629      	mov	r1, r5
 8010862:	4620      	mov	r0, r4
 8010864:	f000 feec 	bl	8011640 <__lshift>
 8010868:	9b01      	ldr	r3, [sp, #4]
 801086a:	f103 0901 	add.w	r9, r3, #1
 801086e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010872:	4413      	add	r3, r2
 8010874:	9305      	str	r3, [sp, #20]
 8010876:	f00a 0301 	and.w	r3, sl, #1
 801087a:	46b8      	mov	r8, r7
 801087c:	9304      	str	r3, [sp, #16]
 801087e:	4607      	mov	r7, r0
 8010880:	4631      	mov	r1, r6
 8010882:	ee18 0a10 	vmov	r0, s16
 8010886:	f7ff fa77 	bl	800fd78 <quorem>
 801088a:	4641      	mov	r1, r8
 801088c:	9002      	str	r0, [sp, #8]
 801088e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010892:	ee18 0a10 	vmov	r0, s16
 8010896:	f000 ff43 	bl	8011720 <__mcmp>
 801089a:	463a      	mov	r2, r7
 801089c:	9003      	str	r0, [sp, #12]
 801089e:	4631      	mov	r1, r6
 80108a0:	4620      	mov	r0, r4
 80108a2:	f000 ff59 	bl	8011758 <__mdiff>
 80108a6:	68c2      	ldr	r2, [r0, #12]
 80108a8:	f109 3bff 	add.w	fp, r9, #4294967295
 80108ac:	4605      	mov	r5, r0
 80108ae:	bb02      	cbnz	r2, 80108f2 <_dtoa_r+0xa62>
 80108b0:	4601      	mov	r1, r0
 80108b2:	ee18 0a10 	vmov	r0, s16
 80108b6:	f000 ff33 	bl	8011720 <__mcmp>
 80108ba:	4602      	mov	r2, r0
 80108bc:	4629      	mov	r1, r5
 80108be:	4620      	mov	r0, r4
 80108c0:	9207      	str	r2, [sp, #28]
 80108c2:	f000 fca1 	bl	8011208 <_Bfree>
 80108c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80108ca:	ea43 0102 	orr.w	r1, r3, r2
 80108ce:	9b04      	ldr	r3, [sp, #16]
 80108d0:	430b      	orrs	r3, r1
 80108d2:	464d      	mov	r5, r9
 80108d4:	d10f      	bne.n	80108f6 <_dtoa_r+0xa66>
 80108d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80108da:	d02a      	beq.n	8010932 <_dtoa_r+0xaa2>
 80108dc:	9b03      	ldr	r3, [sp, #12]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	dd02      	ble.n	80108e8 <_dtoa_r+0xa58>
 80108e2:	9b02      	ldr	r3, [sp, #8]
 80108e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80108e8:	f88b a000 	strb.w	sl, [fp]
 80108ec:	e775      	b.n	80107da <_dtoa_r+0x94a>
 80108ee:	4638      	mov	r0, r7
 80108f0:	e7ba      	b.n	8010868 <_dtoa_r+0x9d8>
 80108f2:	2201      	movs	r2, #1
 80108f4:	e7e2      	b.n	80108bc <_dtoa_r+0xa2c>
 80108f6:	9b03      	ldr	r3, [sp, #12]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	db04      	blt.n	8010906 <_dtoa_r+0xa76>
 80108fc:	9906      	ldr	r1, [sp, #24]
 80108fe:	430b      	orrs	r3, r1
 8010900:	9904      	ldr	r1, [sp, #16]
 8010902:	430b      	orrs	r3, r1
 8010904:	d122      	bne.n	801094c <_dtoa_r+0xabc>
 8010906:	2a00      	cmp	r2, #0
 8010908:	ddee      	ble.n	80108e8 <_dtoa_r+0xa58>
 801090a:	ee18 1a10 	vmov	r1, s16
 801090e:	2201      	movs	r2, #1
 8010910:	4620      	mov	r0, r4
 8010912:	f000 fe95 	bl	8011640 <__lshift>
 8010916:	4631      	mov	r1, r6
 8010918:	ee08 0a10 	vmov	s16, r0
 801091c:	f000 ff00 	bl	8011720 <__mcmp>
 8010920:	2800      	cmp	r0, #0
 8010922:	dc03      	bgt.n	801092c <_dtoa_r+0xa9c>
 8010924:	d1e0      	bne.n	80108e8 <_dtoa_r+0xa58>
 8010926:	f01a 0f01 	tst.w	sl, #1
 801092a:	d0dd      	beq.n	80108e8 <_dtoa_r+0xa58>
 801092c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010930:	d1d7      	bne.n	80108e2 <_dtoa_r+0xa52>
 8010932:	2339      	movs	r3, #57	; 0x39
 8010934:	f88b 3000 	strb.w	r3, [fp]
 8010938:	462b      	mov	r3, r5
 801093a:	461d      	mov	r5, r3
 801093c:	3b01      	subs	r3, #1
 801093e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010942:	2a39      	cmp	r2, #57	; 0x39
 8010944:	d071      	beq.n	8010a2a <_dtoa_r+0xb9a>
 8010946:	3201      	adds	r2, #1
 8010948:	701a      	strb	r2, [r3, #0]
 801094a:	e746      	b.n	80107da <_dtoa_r+0x94a>
 801094c:	2a00      	cmp	r2, #0
 801094e:	dd07      	ble.n	8010960 <_dtoa_r+0xad0>
 8010950:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010954:	d0ed      	beq.n	8010932 <_dtoa_r+0xaa2>
 8010956:	f10a 0301 	add.w	r3, sl, #1
 801095a:	f88b 3000 	strb.w	r3, [fp]
 801095e:	e73c      	b.n	80107da <_dtoa_r+0x94a>
 8010960:	9b05      	ldr	r3, [sp, #20]
 8010962:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010966:	4599      	cmp	r9, r3
 8010968:	d047      	beq.n	80109fa <_dtoa_r+0xb6a>
 801096a:	ee18 1a10 	vmov	r1, s16
 801096e:	2300      	movs	r3, #0
 8010970:	220a      	movs	r2, #10
 8010972:	4620      	mov	r0, r4
 8010974:	f000 fc6a 	bl	801124c <__multadd>
 8010978:	45b8      	cmp	r8, r7
 801097a:	ee08 0a10 	vmov	s16, r0
 801097e:	f04f 0300 	mov.w	r3, #0
 8010982:	f04f 020a 	mov.w	r2, #10
 8010986:	4641      	mov	r1, r8
 8010988:	4620      	mov	r0, r4
 801098a:	d106      	bne.n	801099a <_dtoa_r+0xb0a>
 801098c:	f000 fc5e 	bl	801124c <__multadd>
 8010990:	4680      	mov	r8, r0
 8010992:	4607      	mov	r7, r0
 8010994:	f109 0901 	add.w	r9, r9, #1
 8010998:	e772      	b.n	8010880 <_dtoa_r+0x9f0>
 801099a:	f000 fc57 	bl	801124c <__multadd>
 801099e:	4639      	mov	r1, r7
 80109a0:	4680      	mov	r8, r0
 80109a2:	2300      	movs	r3, #0
 80109a4:	220a      	movs	r2, #10
 80109a6:	4620      	mov	r0, r4
 80109a8:	f000 fc50 	bl	801124c <__multadd>
 80109ac:	4607      	mov	r7, r0
 80109ae:	e7f1      	b.n	8010994 <_dtoa_r+0xb04>
 80109b0:	9b03      	ldr	r3, [sp, #12]
 80109b2:	9302      	str	r3, [sp, #8]
 80109b4:	9d01      	ldr	r5, [sp, #4]
 80109b6:	ee18 0a10 	vmov	r0, s16
 80109ba:	4631      	mov	r1, r6
 80109bc:	f7ff f9dc 	bl	800fd78 <quorem>
 80109c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80109c4:	9b01      	ldr	r3, [sp, #4]
 80109c6:	f805 ab01 	strb.w	sl, [r5], #1
 80109ca:	1aea      	subs	r2, r5, r3
 80109cc:	9b02      	ldr	r3, [sp, #8]
 80109ce:	4293      	cmp	r3, r2
 80109d0:	dd09      	ble.n	80109e6 <_dtoa_r+0xb56>
 80109d2:	ee18 1a10 	vmov	r1, s16
 80109d6:	2300      	movs	r3, #0
 80109d8:	220a      	movs	r2, #10
 80109da:	4620      	mov	r0, r4
 80109dc:	f000 fc36 	bl	801124c <__multadd>
 80109e0:	ee08 0a10 	vmov	s16, r0
 80109e4:	e7e7      	b.n	80109b6 <_dtoa_r+0xb26>
 80109e6:	9b02      	ldr	r3, [sp, #8]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	bfc8      	it	gt
 80109ec:	461d      	movgt	r5, r3
 80109ee:	9b01      	ldr	r3, [sp, #4]
 80109f0:	bfd8      	it	le
 80109f2:	2501      	movle	r5, #1
 80109f4:	441d      	add	r5, r3
 80109f6:	f04f 0800 	mov.w	r8, #0
 80109fa:	ee18 1a10 	vmov	r1, s16
 80109fe:	2201      	movs	r2, #1
 8010a00:	4620      	mov	r0, r4
 8010a02:	f000 fe1d 	bl	8011640 <__lshift>
 8010a06:	4631      	mov	r1, r6
 8010a08:	ee08 0a10 	vmov	s16, r0
 8010a0c:	f000 fe88 	bl	8011720 <__mcmp>
 8010a10:	2800      	cmp	r0, #0
 8010a12:	dc91      	bgt.n	8010938 <_dtoa_r+0xaa8>
 8010a14:	d102      	bne.n	8010a1c <_dtoa_r+0xb8c>
 8010a16:	f01a 0f01 	tst.w	sl, #1
 8010a1a:	d18d      	bne.n	8010938 <_dtoa_r+0xaa8>
 8010a1c:	462b      	mov	r3, r5
 8010a1e:	461d      	mov	r5, r3
 8010a20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a24:	2a30      	cmp	r2, #48	; 0x30
 8010a26:	d0fa      	beq.n	8010a1e <_dtoa_r+0xb8e>
 8010a28:	e6d7      	b.n	80107da <_dtoa_r+0x94a>
 8010a2a:	9a01      	ldr	r2, [sp, #4]
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d184      	bne.n	801093a <_dtoa_r+0xaaa>
 8010a30:	9b00      	ldr	r3, [sp, #0]
 8010a32:	3301      	adds	r3, #1
 8010a34:	9300      	str	r3, [sp, #0]
 8010a36:	2331      	movs	r3, #49	; 0x31
 8010a38:	7013      	strb	r3, [r2, #0]
 8010a3a:	e6ce      	b.n	80107da <_dtoa_r+0x94a>
 8010a3c:	4b09      	ldr	r3, [pc, #36]	; (8010a64 <_dtoa_r+0xbd4>)
 8010a3e:	f7ff ba95 	b.w	800ff6c <_dtoa_r+0xdc>
 8010a42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	f47f aa6e 	bne.w	800ff26 <_dtoa_r+0x96>
 8010a4a:	4b07      	ldr	r3, [pc, #28]	; (8010a68 <_dtoa_r+0xbd8>)
 8010a4c:	f7ff ba8e 	b.w	800ff6c <_dtoa_r+0xdc>
 8010a50:	9b02      	ldr	r3, [sp, #8]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	dcae      	bgt.n	80109b4 <_dtoa_r+0xb24>
 8010a56:	9b06      	ldr	r3, [sp, #24]
 8010a58:	2b02      	cmp	r3, #2
 8010a5a:	f73f aea8 	bgt.w	80107ae <_dtoa_r+0x91e>
 8010a5e:	e7a9      	b.n	80109b4 <_dtoa_r+0xb24>
 8010a60:	08013078 	.word	0x08013078
 8010a64:	08012e78 	.word	0x08012e78
 8010a68:	08012ff9 	.word	0x08012ff9

08010a6c <rshift>:
 8010a6c:	6903      	ldr	r3, [r0, #16]
 8010a6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010a72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a76:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010a7a:	f100 0414 	add.w	r4, r0, #20
 8010a7e:	dd45      	ble.n	8010b0c <rshift+0xa0>
 8010a80:	f011 011f 	ands.w	r1, r1, #31
 8010a84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010a88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010a8c:	d10c      	bne.n	8010aa8 <rshift+0x3c>
 8010a8e:	f100 0710 	add.w	r7, r0, #16
 8010a92:	4629      	mov	r1, r5
 8010a94:	42b1      	cmp	r1, r6
 8010a96:	d334      	bcc.n	8010b02 <rshift+0x96>
 8010a98:	1a9b      	subs	r3, r3, r2
 8010a9a:	009b      	lsls	r3, r3, #2
 8010a9c:	1eea      	subs	r2, r5, #3
 8010a9e:	4296      	cmp	r6, r2
 8010aa0:	bf38      	it	cc
 8010aa2:	2300      	movcc	r3, #0
 8010aa4:	4423      	add	r3, r4
 8010aa6:	e015      	b.n	8010ad4 <rshift+0x68>
 8010aa8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010aac:	f1c1 0820 	rsb	r8, r1, #32
 8010ab0:	40cf      	lsrs	r7, r1
 8010ab2:	f105 0e04 	add.w	lr, r5, #4
 8010ab6:	46a1      	mov	r9, r4
 8010ab8:	4576      	cmp	r6, lr
 8010aba:	46f4      	mov	ip, lr
 8010abc:	d815      	bhi.n	8010aea <rshift+0x7e>
 8010abe:	1a9a      	subs	r2, r3, r2
 8010ac0:	0092      	lsls	r2, r2, #2
 8010ac2:	3a04      	subs	r2, #4
 8010ac4:	3501      	adds	r5, #1
 8010ac6:	42ae      	cmp	r6, r5
 8010ac8:	bf38      	it	cc
 8010aca:	2200      	movcc	r2, #0
 8010acc:	18a3      	adds	r3, r4, r2
 8010ace:	50a7      	str	r7, [r4, r2]
 8010ad0:	b107      	cbz	r7, 8010ad4 <rshift+0x68>
 8010ad2:	3304      	adds	r3, #4
 8010ad4:	1b1a      	subs	r2, r3, r4
 8010ad6:	42a3      	cmp	r3, r4
 8010ad8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010adc:	bf08      	it	eq
 8010ade:	2300      	moveq	r3, #0
 8010ae0:	6102      	str	r2, [r0, #16]
 8010ae2:	bf08      	it	eq
 8010ae4:	6143      	streq	r3, [r0, #20]
 8010ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010aea:	f8dc c000 	ldr.w	ip, [ip]
 8010aee:	fa0c fc08 	lsl.w	ip, ip, r8
 8010af2:	ea4c 0707 	orr.w	r7, ip, r7
 8010af6:	f849 7b04 	str.w	r7, [r9], #4
 8010afa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010afe:	40cf      	lsrs	r7, r1
 8010b00:	e7da      	b.n	8010ab8 <rshift+0x4c>
 8010b02:	f851 cb04 	ldr.w	ip, [r1], #4
 8010b06:	f847 cf04 	str.w	ip, [r7, #4]!
 8010b0a:	e7c3      	b.n	8010a94 <rshift+0x28>
 8010b0c:	4623      	mov	r3, r4
 8010b0e:	e7e1      	b.n	8010ad4 <rshift+0x68>

08010b10 <__hexdig_fun>:
 8010b10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010b14:	2b09      	cmp	r3, #9
 8010b16:	d802      	bhi.n	8010b1e <__hexdig_fun+0xe>
 8010b18:	3820      	subs	r0, #32
 8010b1a:	b2c0      	uxtb	r0, r0
 8010b1c:	4770      	bx	lr
 8010b1e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010b22:	2b05      	cmp	r3, #5
 8010b24:	d801      	bhi.n	8010b2a <__hexdig_fun+0x1a>
 8010b26:	3847      	subs	r0, #71	; 0x47
 8010b28:	e7f7      	b.n	8010b1a <__hexdig_fun+0xa>
 8010b2a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010b2e:	2b05      	cmp	r3, #5
 8010b30:	d801      	bhi.n	8010b36 <__hexdig_fun+0x26>
 8010b32:	3827      	subs	r0, #39	; 0x27
 8010b34:	e7f1      	b.n	8010b1a <__hexdig_fun+0xa>
 8010b36:	2000      	movs	r0, #0
 8010b38:	4770      	bx	lr
	...

08010b3c <__gethex>:
 8010b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b40:	ed2d 8b02 	vpush	{d8}
 8010b44:	b089      	sub	sp, #36	; 0x24
 8010b46:	ee08 0a10 	vmov	s16, r0
 8010b4a:	9304      	str	r3, [sp, #16]
 8010b4c:	4bb4      	ldr	r3, [pc, #720]	; (8010e20 <__gethex+0x2e4>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	9301      	str	r3, [sp, #4]
 8010b52:	4618      	mov	r0, r3
 8010b54:	468b      	mov	fp, r1
 8010b56:	4690      	mov	r8, r2
 8010b58:	f7ef fb64 	bl	8000224 <strlen>
 8010b5c:	9b01      	ldr	r3, [sp, #4]
 8010b5e:	f8db 2000 	ldr.w	r2, [fp]
 8010b62:	4403      	add	r3, r0
 8010b64:	4682      	mov	sl, r0
 8010b66:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010b6a:	9305      	str	r3, [sp, #20]
 8010b6c:	1c93      	adds	r3, r2, #2
 8010b6e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010b72:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010b76:	32fe      	adds	r2, #254	; 0xfe
 8010b78:	18d1      	adds	r1, r2, r3
 8010b7a:	461f      	mov	r7, r3
 8010b7c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010b80:	9100      	str	r1, [sp, #0]
 8010b82:	2830      	cmp	r0, #48	; 0x30
 8010b84:	d0f8      	beq.n	8010b78 <__gethex+0x3c>
 8010b86:	f7ff ffc3 	bl	8010b10 <__hexdig_fun>
 8010b8a:	4604      	mov	r4, r0
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	d13a      	bne.n	8010c06 <__gethex+0xca>
 8010b90:	9901      	ldr	r1, [sp, #4]
 8010b92:	4652      	mov	r2, sl
 8010b94:	4638      	mov	r0, r7
 8010b96:	f001 fa23 	bl	8011fe0 <strncmp>
 8010b9a:	4605      	mov	r5, r0
 8010b9c:	2800      	cmp	r0, #0
 8010b9e:	d168      	bne.n	8010c72 <__gethex+0x136>
 8010ba0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010ba4:	eb07 060a 	add.w	r6, r7, sl
 8010ba8:	f7ff ffb2 	bl	8010b10 <__hexdig_fun>
 8010bac:	2800      	cmp	r0, #0
 8010bae:	d062      	beq.n	8010c76 <__gethex+0x13a>
 8010bb0:	4633      	mov	r3, r6
 8010bb2:	7818      	ldrb	r0, [r3, #0]
 8010bb4:	2830      	cmp	r0, #48	; 0x30
 8010bb6:	461f      	mov	r7, r3
 8010bb8:	f103 0301 	add.w	r3, r3, #1
 8010bbc:	d0f9      	beq.n	8010bb2 <__gethex+0x76>
 8010bbe:	f7ff ffa7 	bl	8010b10 <__hexdig_fun>
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	fab0 f480 	clz	r4, r0
 8010bc8:	0964      	lsrs	r4, r4, #5
 8010bca:	4635      	mov	r5, r6
 8010bcc:	9300      	str	r3, [sp, #0]
 8010bce:	463a      	mov	r2, r7
 8010bd0:	4616      	mov	r6, r2
 8010bd2:	3201      	adds	r2, #1
 8010bd4:	7830      	ldrb	r0, [r6, #0]
 8010bd6:	f7ff ff9b 	bl	8010b10 <__hexdig_fun>
 8010bda:	2800      	cmp	r0, #0
 8010bdc:	d1f8      	bne.n	8010bd0 <__gethex+0x94>
 8010bde:	9901      	ldr	r1, [sp, #4]
 8010be0:	4652      	mov	r2, sl
 8010be2:	4630      	mov	r0, r6
 8010be4:	f001 f9fc 	bl	8011fe0 <strncmp>
 8010be8:	b980      	cbnz	r0, 8010c0c <__gethex+0xd0>
 8010bea:	b94d      	cbnz	r5, 8010c00 <__gethex+0xc4>
 8010bec:	eb06 050a 	add.w	r5, r6, sl
 8010bf0:	462a      	mov	r2, r5
 8010bf2:	4616      	mov	r6, r2
 8010bf4:	3201      	adds	r2, #1
 8010bf6:	7830      	ldrb	r0, [r6, #0]
 8010bf8:	f7ff ff8a 	bl	8010b10 <__hexdig_fun>
 8010bfc:	2800      	cmp	r0, #0
 8010bfe:	d1f8      	bne.n	8010bf2 <__gethex+0xb6>
 8010c00:	1bad      	subs	r5, r5, r6
 8010c02:	00ad      	lsls	r5, r5, #2
 8010c04:	e004      	b.n	8010c10 <__gethex+0xd4>
 8010c06:	2400      	movs	r4, #0
 8010c08:	4625      	mov	r5, r4
 8010c0a:	e7e0      	b.n	8010bce <__gethex+0x92>
 8010c0c:	2d00      	cmp	r5, #0
 8010c0e:	d1f7      	bne.n	8010c00 <__gethex+0xc4>
 8010c10:	7833      	ldrb	r3, [r6, #0]
 8010c12:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010c16:	2b50      	cmp	r3, #80	; 0x50
 8010c18:	d13b      	bne.n	8010c92 <__gethex+0x156>
 8010c1a:	7873      	ldrb	r3, [r6, #1]
 8010c1c:	2b2b      	cmp	r3, #43	; 0x2b
 8010c1e:	d02c      	beq.n	8010c7a <__gethex+0x13e>
 8010c20:	2b2d      	cmp	r3, #45	; 0x2d
 8010c22:	d02e      	beq.n	8010c82 <__gethex+0x146>
 8010c24:	1c71      	adds	r1, r6, #1
 8010c26:	f04f 0900 	mov.w	r9, #0
 8010c2a:	7808      	ldrb	r0, [r1, #0]
 8010c2c:	f7ff ff70 	bl	8010b10 <__hexdig_fun>
 8010c30:	1e43      	subs	r3, r0, #1
 8010c32:	b2db      	uxtb	r3, r3
 8010c34:	2b18      	cmp	r3, #24
 8010c36:	d82c      	bhi.n	8010c92 <__gethex+0x156>
 8010c38:	f1a0 0210 	sub.w	r2, r0, #16
 8010c3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010c40:	f7ff ff66 	bl	8010b10 <__hexdig_fun>
 8010c44:	1e43      	subs	r3, r0, #1
 8010c46:	b2db      	uxtb	r3, r3
 8010c48:	2b18      	cmp	r3, #24
 8010c4a:	d91d      	bls.n	8010c88 <__gethex+0x14c>
 8010c4c:	f1b9 0f00 	cmp.w	r9, #0
 8010c50:	d000      	beq.n	8010c54 <__gethex+0x118>
 8010c52:	4252      	negs	r2, r2
 8010c54:	4415      	add	r5, r2
 8010c56:	f8cb 1000 	str.w	r1, [fp]
 8010c5a:	b1e4      	cbz	r4, 8010c96 <__gethex+0x15a>
 8010c5c:	9b00      	ldr	r3, [sp, #0]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	bf14      	ite	ne
 8010c62:	2700      	movne	r7, #0
 8010c64:	2706      	moveq	r7, #6
 8010c66:	4638      	mov	r0, r7
 8010c68:	b009      	add	sp, #36	; 0x24
 8010c6a:	ecbd 8b02 	vpop	{d8}
 8010c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c72:	463e      	mov	r6, r7
 8010c74:	4625      	mov	r5, r4
 8010c76:	2401      	movs	r4, #1
 8010c78:	e7ca      	b.n	8010c10 <__gethex+0xd4>
 8010c7a:	f04f 0900 	mov.w	r9, #0
 8010c7e:	1cb1      	adds	r1, r6, #2
 8010c80:	e7d3      	b.n	8010c2a <__gethex+0xee>
 8010c82:	f04f 0901 	mov.w	r9, #1
 8010c86:	e7fa      	b.n	8010c7e <__gethex+0x142>
 8010c88:	230a      	movs	r3, #10
 8010c8a:	fb03 0202 	mla	r2, r3, r2, r0
 8010c8e:	3a10      	subs	r2, #16
 8010c90:	e7d4      	b.n	8010c3c <__gethex+0x100>
 8010c92:	4631      	mov	r1, r6
 8010c94:	e7df      	b.n	8010c56 <__gethex+0x11a>
 8010c96:	1bf3      	subs	r3, r6, r7
 8010c98:	3b01      	subs	r3, #1
 8010c9a:	4621      	mov	r1, r4
 8010c9c:	2b07      	cmp	r3, #7
 8010c9e:	dc0b      	bgt.n	8010cb8 <__gethex+0x17c>
 8010ca0:	ee18 0a10 	vmov	r0, s16
 8010ca4:	f000 fa70 	bl	8011188 <_Balloc>
 8010ca8:	4604      	mov	r4, r0
 8010caa:	b940      	cbnz	r0, 8010cbe <__gethex+0x182>
 8010cac:	4b5d      	ldr	r3, [pc, #372]	; (8010e24 <__gethex+0x2e8>)
 8010cae:	4602      	mov	r2, r0
 8010cb0:	21de      	movs	r1, #222	; 0xde
 8010cb2:	485d      	ldr	r0, [pc, #372]	; (8010e28 <__gethex+0x2ec>)
 8010cb4:	f001 f9b6 	bl	8012024 <__assert_func>
 8010cb8:	3101      	adds	r1, #1
 8010cba:	105b      	asrs	r3, r3, #1
 8010cbc:	e7ee      	b.n	8010c9c <__gethex+0x160>
 8010cbe:	f100 0914 	add.w	r9, r0, #20
 8010cc2:	f04f 0b00 	mov.w	fp, #0
 8010cc6:	f1ca 0301 	rsb	r3, sl, #1
 8010cca:	f8cd 9008 	str.w	r9, [sp, #8]
 8010cce:	f8cd b000 	str.w	fp, [sp]
 8010cd2:	9306      	str	r3, [sp, #24]
 8010cd4:	42b7      	cmp	r7, r6
 8010cd6:	d340      	bcc.n	8010d5a <__gethex+0x21e>
 8010cd8:	9802      	ldr	r0, [sp, #8]
 8010cda:	9b00      	ldr	r3, [sp, #0]
 8010cdc:	f840 3b04 	str.w	r3, [r0], #4
 8010ce0:	eba0 0009 	sub.w	r0, r0, r9
 8010ce4:	1080      	asrs	r0, r0, #2
 8010ce6:	0146      	lsls	r6, r0, #5
 8010ce8:	6120      	str	r0, [r4, #16]
 8010cea:	4618      	mov	r0, r3
 8010cec:	f000 fb3e 	bl	801136c <__hi0bits>
 8010cf0:	1a30      	subs	r0, r6, r0
 8010cf2:	f8d8 6000 	ldr.w	r6, [r8]
 8010cf6:	42b0      	cmp	r0, r6
 8010cf8:	dd63      	ble.n	8010dc2 <__gethex+0x286>
 8010cfa:	1b87      	subs	r7, r0, r6
 8010cfc:	4639      	mov	r1, r7
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f000 fee2 	bl	8011ac8 <__any_on>
 8010d04:	4682      	mov	sl, r0
 8010d06:	b1a8      	cbz	r0, 8010d34 <__gethex+0x1f8>
 8010d08:	1e7b      	subs	r3, r7, #1
 8010d0a:	1159      	asrs	r1, r3, #5
 8010d0c:	f003 021f 	and.w	r2, r3, #31
 8010d10:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010d14:	f04f 0a01 	mov.w	sl, #1
 8010d18:	fa0a f202 	lsl.w	r2, sl, r2
 8010d1c:	420a      	tst	r2, r1
 8010d1e:	d009      	beq.n	8010d34 <__gethex+0x1f8>
 8010d20:	4553      	cmp	r3, sl
 8010d22:	dd05      	ble.n	8010d30 <__gethex+0x1f4>
 8010d24:	1eb9      	subs	r1, r7, #2
 8010d26:	4620      	mov	r0, r4
 8010d28:	f000 fece 	bl	8011ac8 <__any_on>
 8010d2c:	2800      	cmp	r0, #0
 8010d2e:	d145      	bne.n	8010dbc <__gethex+0x280>
 8010d30:	f04f 0a02 	mov.w	sl, #2
 8010d34:	4639      	mov	r1, r7
 8010d36:	4620      	mov	r0, r4
 8010d38:	f7ff fe98 	bl	8010a6c <rshift>
 8010d3c:	443d      	add	r5, r7
 8010d3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d42:	42ab      	cmp	r3, r5
 8010d44:	da4c      	bge.n	8010de0 <__gethex+0x2a4>
 8010d46:	ee18 0a10 	vmov	r0, s16
 8010d4a:	4621      	mov	r1, r4
 8010d4c:	f000 fa5c 	bl	8011208 <_Bfree>
 8010d50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010d52:	2300      	movs	r3, #0
 8010d54:	6013      	str	r3, [r2, #0]
 8010d56:	27a3      	movs	r7, #163	; 0xa3
 8010d58:	e785      	b.n	8010c66 <__gethex+0x12a>
 8010d5a:	1e73      	subs	r3, r6, #1
 8010d5c:	9a05      	ldr	r2, [sp, #20]
 8010d5e:	9303      	str	r3, [sp, #12]
 8010d60:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010d64:	4293      	cmp	r3, r2
 8010d66:	d019      	beq.n	8010d9c <__gethex+0x260>
 8010d68:	f1bb 0f20 	cmp.w	fp, #32
 8010d6c:	d107      	bne.n	8010d7e <__gethex+0x242>
 8010d6e:	9b02      	ldr	r3, [sp, #8]
 8010d70:	9a00      	ldr	r2, [sp, #0]
 8010d72:	f843 2b04 	str.w	r2, [r3], #4
 8010d76:	9302      	str	r3, [sp, #8]
 8010d78:	2300      	movs	r3, #0
 8010d7a:	9300      	str	r3, [sp, #0]
 8010d7c:	469b      	mov	fp, r3
 8010d7e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010d82:	f7ff fec5 	bl	8010b10 <__hexdig_fun>
 8010d86:	9b00      	ldr	r3, [sp, #0]
 8010d88:	f000 000f 	and.w	r0, r0, #15
 8010d8c:	fa00 f00b 	lsl.w	r0, r0, fp
 8010d90:	4303      	orrs	r3, r0
 8010d92:	9300      	str	r3, [sp, #0]
 8010d94:	f10b 0b04 	add.w	fp, fp, #4
 8010d98:	9b03      	ldr	r3, [sp, #12]
 8010d9a:	e00d      	b.n	8010db8 <__gethex+0x27c>
 8010d9c:	9b03      	ldr	r3, [sp, #12]
 8010d9e:	9a06      	ldr	r2, [sp, #24]
 8010da0:	4413      	add	r3, r2
 8010da2:	42bb      	cmp	r3, r7
 8010da4:	d3e0      	bcc.n	8010d68 <__gethex+0x22c>
 8010da6:	4618      	mov	r0, r3
 8010da8:	9901      	ldr	r1, [sp, #4]
 8010daa:	9307      	str	r3, [sp, #28]
 8010dac:	4652      	mov	r2, sl
 8010dae:	f001 f917 	bl	8011fe0 <strncmp>
 8010db2:	9b07      	ldr	r3, [sp, #28]
 8010db4:	2800      	cmp	r0, #0
 8010db6:	d1d7      	bne.n	8010d68 <__gethex+0x22c>
 8010db8:	461e      	mov	r6, r3
 8010dba:	e78b      	b.n	8010cd4 <__gethex+0x198>
 8010dbc:	f04f 0a03 	mov.w	sl, #3
 8010dc0:	e7b8      	b.n	8010d34 <__gethex+0x1f8>
 8010dc2:	da0a      	bge.n	8010dda <__gethex+0x29e>
 8010dc4:	1a37      	subs	r7, r6, r0
 8010dc6:	4621      	mov	r1, r4
 8010dc8:	ee18 0a10 	vmov	r0, s16
 8010dcc:	463a      	mov	r2, r7
 8010dce:	f000 fc37 	bl	8011640 <__lshift>
 8010dd2:	1bed      	subs	r5, r5, r7
 8010dd4:	4604      	mov	r4, r0
 8010dd6:	f100 0914 	add.w	r9, r0, #20
 8010dda:	f04f 0a00 	mov.w	sl, #0
 8010dde:	e7ae      	b.n	8010d3e <__gethex+0x202>
 8010de0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010de4:	42a8      	cmp	r0, r5
 8010de6:	dd72      	ble.n	8010ece <__gethex+0x392>
 8010de8:	1b45      	subs	r5, r0, r5
 8010dea:	42ae      	cmp	r6, r5
 8010dec:	dc36      	bgt.n	8010e5c <__gethex+0x320>
 8010dee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010df2:	2b02      	cmp	r3, #2
 8010df4:	d02a      	beq.n	8010e4c <__gethex+0x310>
 8010df6:	2b03      	cmp	r3, #3
 8010df8:	d02c      	beq.n	8010e54 <__gethex+0x318>
 8010dfa:	2b01      	cmp	r3, #1
 8010dfc:	d11c      	bne.n	8010e38 <__gethex+0x2fc>
 8010dfe:	42ae      	cmp	r6, r5
 8010e00:	d11a      	bne.n	8010e38 <__gethex+0x2fc>
 8010e02:	2e01      	cmp	r6, #1
 8010e04:	d112      	bne.n	8010e2c <__gethex+0x2f0>
 8010e06:	9a04      	ldr	r2, [sp, #16]
 8010e08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010e0c:	6013      	str	r3, [r2, #0]
 8010e0e:	2301      	movs	r3, #1
 8010e10:	6123      	str	r3, [r4, #16]
 8010e12:	f8c9 3000 	str.w	r3, [r9]
 8010e16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010e18:	2762      	movs	r7, #98	; 0x62
 8010e1a:	601c      	str	r4, [r3, #0]
 8010e1c:	e723      	b.n	8010c66 <__gethex+0x12a>
 8010e1e:	bf00      	nop
 8010e20:	080130f0 	.word	0x080130f0
 8010e24:	08013078 	.word	0x08013078
 8010e28:	08013089 	.word	0x08013089
 8010e2c:	1e71      	subs	r1, r6, #1
 8010e2e:	4620      	mov	r0, r4
 8010e30:	f000 fe4a 	bl	8011ac8 <__any_on>
 8010e34:	2800      	cmp	r0, #0
 8010e36:	d1e6      	bne.n	8010e06 <__gethex+0x2ca>
 8010e38:	ee18 0a10 	vmov	r0, s16
 8010e3c:	4621      	mov	r1, r4
 8010e3e:	f000 f9e3 	bl	8011208 <_Bfree>
 8010e42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010e44:	2300      	movs	r3, #0
 8010e46:	6013      	str	r3, [r2, #0]
 8010e48:	2750      	movs	r7, #80	; 0x50
 8010e4a:	e70c      	b.n	8010c66 <__gethex+0x12a>
 8010e4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d1f2      	bne.n	8010e38 <__gethex+0x2fc>
 8010e52:	e7d8      	b.n	8010e06 <__gethex+0x2ca>
 8010e54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d1d5      	bne.n	8010e06 <__gethex+0x2ca>
 8010e5a:	e7ed      	b.n	8010e38 <__gethex+0x2fc>
 8010e5c:	1e6f      	subs	r7, r5, #1
 8010e5e:	f1ba 0f00 	cmp.w	sl, #0
 8010e62:	d131      	bne.n	8010ec8 <__gethex+0x38c>
 8010e64:	b127      	cbz	r7, 8010e70 <__gethex+0x334>
 8010e66:	4639      	mov	r1, r7
 8010e68:	4620      	mov	r0, r4
 8010e6a:	f000 fe2d 	bl	8011ac8 <__any_on>
 8010e6e:	4682      	mov	sl, r0
 8010e70:	117b      	asrs	r3, r7, #5
 8010e72:	2101      	movs	r1, #1
 8010e74:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010e78:	f007 071f 	and.w	r7, r7, #31
 8010e7c:	fa01 f707 	lsl.w	r7, r1, r7
 8010e80:	421f      	tst	r7, r3
 8010e82:	4629      	mov	r1, r5
 8010e84:	4620      	mov	r0, r4
 8010e86:	bf18      	it	ne
 8010e88:	f04a 0a02 	orrne.w	sl, sl, #2
 8010e8c:	1b76      	subs	r6, r6, r5
 8010e8e:	f7ff fded 	bl	8010a6c <rshift>
 8010e92:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010e96:	2702      	movs	r7, #2
 8010e98:	f1ba 0f00 	cmp.w	sl, #0
 8010e9c:	d048      	beq.n	8010f30 <__gethex+0x3f4>
 8010e9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010ea2:	2b02      	cmp	r3, #2
 8010ea4:	d015      	beq.n	8010ed2 <__gethex+0x396>
 8010ea6:	2b03      	cmp	r3, #3
 8010ea8:	d017      	beq.n	8010eda <__gethex+0x39e>
 8010eaa:	2b01      	cmp	r3, #1
 8010eac:	d109      	bne.n	8010ec2 <__gethex+0x386>
 8010eae:	f01a 0f02 	tst.w	sl, #2
 8010eb2:	d006      	beq.n	8010ec2 <__gethex+0x386>
 8010eb4:	f8d9 0000 	ldr.w	r0, [r9]
 8010eb8:	ea4a 0a00 	orr.w	sl, sl, r0
 8010ebc:	f01a 0f01 	tst.w	sl, #1
 8010ec0:	d10e      	bne.n	8010ee0 <__gethex+0x3a4>
 8010ec2:	f047 0710 	orr.w	r7, r7, #16
 8010ec6:	e033      	b.n	8010f30 <__gethex+0x3f4>
 8010ec8:	f04f 0a01 	mov.w	sl, #1
 8010ecc:	e7d0      	b.n	8010e70 <__gethex+0x334>
 8010ece:	2701      	movs	r7, #1
 8010ed0:	e7e2      	b.n	8010e98 <__gethex+0x35c>
 8010ed2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ed4:	f1c3 0301 	rsb	r3, r3, #1
 8010ed8:	9315      	str	r3, [sp, #84]	; 0x54
 8010eda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d0f0      	beq.n	8010ec2 <__gethex+0x386>
 8010ee0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010ee4:	f104 0314 	add.w	r3, r4, #20
 8010ee8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010eec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010ef0:	f04f 0c00 	mov.w	ip, #0
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010efa:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010efe:	d01c      	beq.n	8010f3a <__gethex+0x3fe>
 8010f00:	3201      	adds	r2, #1
 8010f02:	6002      	str	r2, [r0, #0]
 8010f04:	2f02      	cmp	r7, #2
 8010f06:	f104 0314 	add.w	r3, r4, #20
 8010f0a:	d13f      	bne.n	8010f8c <__gethex+0x450>
 8010f0c:	f8d8 2000 	ldr.w	r2, [r8]
 8010f10:	3a01      	subs	r2, #1
 8010f12:	42b2      	cmp	r2, r6
 8010f14:	d10a      	bne.n	8010f2c <__gethex+0x3f0>
 8010f16:	1171      	asrs	r1, r6, #5
 8010f18:	2201      	movs	r2, #1
 8010f1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f1e:	f006 061f 	and.w	r6, r6, #31
 8010f22:	fa02 f606 	lsl.w	r6, r2, r6
 8010f26:	421e      	tst	r6, r3
 8010f28:	bf18      	it	ne
 8010f2a:	4617      	movne	r7, r2
 8010f2c:	f047 0720 	orr.w	r7, r7, #32
 8010f30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010f32:	601c      	str	r4, [r3, #0]
 8010f34:	9b04      	ldr	r3, [sp, #16]
 8010f36:	601d      	str	r5, [r3, #0]
 8010f38:	e695      	b.n	8010c66 <__gethex+0x12a>
 8010f3a:	4299      	cmp	r1, r3
 8010f3c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010f40:	d8d8      	bhi.n	8010ef4 <__gethex+0x3b8>
 8010f42:	68a3      	ldr	r3, [r4, #8]
 8010f44:	459b      	cmp	fp, r3
 8010f46:	db19      	blt.n	8010f7c <__gethex+0x440>
 8010f48:	6861      	ldr	r1, [r4, #4]
 8010f4a:	ee18 0a10 	vmov	r0, s16
 8010f4e:	3101      	adds	r1, #1
 8010f50:	f000 f91a 	bl	8011188 <_Balloc>
 8010f54:	4681      	mov	r9, r0
 8010f56:	b918      	cbnz	r0, 8010f60 <__gethex+0x424>
 8010f58:	4b1a      	ldr	r3, [pc, #104]	; (8010fc4 <__gethex+0x488>)
 8010f5a:	4602      	mov	r2, r0
 8010f5c:	2184      	movs	r1, #132	; 0x84
 8010f5e:	e6a8      	b.n	8010cb2 <__gethex+0x176>
 8010f60:	6922      	ldr	r2, [r4, #16]
 8010f62:	3202      	adds	r2, #2
 8010f64:	f104 010c 	add.w	r1, r4, #12
 8010f68:	0092      	lsls	r2, r2, #2
 8010f6a:	300c      	adds	r0, #12
 8010f6c:	f7fd f998 	bl	800e2a0 <memcpy>
 8010f70:	4621      	mov	r1, r4
 8010f72:	ee18 0a10 	vmov	r0, s16
 8010f76:	f000 f947 	bl	8011208 <_Bfree>
 8010f7a:	464c      	mov	r4, r9
 8010f7c:	6923      	ldr	r3, [r4, #16]
 8010f7e:	1c5a      	adds	r2, r3, #1
 8010f80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010f84:	6122      	str	r2, [r4, #16]
 8010f86:	2201      	movs	r2, #1
 8010f88:	615a      	str	r2, [r3, #20]
 8010f8a:	e7bb      	b.n	8010f04 <__gethex+0x3c8>
 8010f8c:	6922      	ldr	r2, [r4, #16]
 8010f8e:	455a      	cmp	r2, fp
 8010f90:	dd0b      	ble.n	8010faa <__gethex+0x46e>
 8010f92:	2101      	movs	r1, #1
 8010f94:	4620      	mov	r0, r4
 8010f96:	f7ff fd69 	bl	8010a6c <rshift>
 8010f9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f9e:	3501      	adds	r5, #1
 8010fa0:	42ab      	cmp	r3, r5
 8010fa2:	f6ff aed0 	blt.w	8010d46 <__gethex+0x20a>
 8010fa6:	2701      	movs	r7, #1
 8010fa8:	e7c0      	b.n	8010f2c <__gethex+0x3f0>
 8010faa:	f016 061f 	ands.w	r6, r6, #31
 8010fae:	d0fa      	beq.n	8010fa6 <__gethex+0x46a>
 8010fb0:	4453      	add	r3, sl
 8010fb2:	f1c6 0620 	rsb	r6, r6, #32
 8010fb6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010fba:	f000 f9d7 	bl	801136c <__hi0bits>
 8010fbe:	42b0      	cmp	r0, r6
 8010fc0:	dbe7      	blt.n	8010f92 <__gethex+0x456>
 8010fc2:	e7f0      	b.n	8010fa6 <__gethex+0x46a>
 8010fc4:	08013078 	.word	0x08013078

08010fc8 <L_shift>:
 8010fc8:	f1c2 0208 	rsb	r2, r2, #8
 8010fcc:	0092      	lsls	r2, r2, #2
 8010fce:	b570      	push	{r4, r5, r6, lr}
 8010fd0:	f1c2 0620 	rsb	r6, r2, #32
 8010fd4:	6843      	ldr	r3, [r0, #4]
 8010fd6:	6804      	ldr	r4, [r0, #0]
 8010fd8:	fa03 f506 	lsl.w	r5, r3, r6
 8010fdc:	432c      	orrs	r4, r5
 8010fde:	40d3      	lsrs	r3, r2
 8010fe0:	6004      	str	r4, [r0, #0]
 8010fe2:	f840 3f04 	str.w	r3, [r0, #4]!
 8010fe6:	4288      	cmp	r0, r1
 8010fe8:	d3f4      	bcc.n	8010fd4 <L_shift+0xc>
 8010fea:	bd70      	pop	{r4, r5, r6, pc}

08010fec <__match>:
 8010fec:	b530      	push	{r4, r5, lr}
 8010fee:	6803      	ldr	r3, [r0, #0]
 8010ff0:	3301      	adds	r3, #1
 8010ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ff6:	b914      	cbnz	r4, 8010ffe <__match+0x12>
 8010ff8:	6003      	str	r3, [r0, #0]
 8010ffa:	2001      	movs	r0, #1
 8010ffc:	bd30      	pop	{r4, r5, pc}
 8010ffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011002:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011006:	2d19      	cmp	r5, #25
 8011008:	bf98      	it	ls
 801100a:	3220      	addls	r2, #32
 801100c:	42a2      	cmp	r2, r4
 801100e:	d0f0      	beq.n	8010ff2 <__match+0x6>
 8011010:	2000      	movs	r0, #0
 8011012:	e7f3      	b.n	8010ffc <__match+0x10>

08011014 <__hexnan>:
 8011014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011018:	680b      	ldr	r3, [r1, #0]
 801101a:	115e      	asrs	r6, r3, #5
 801101c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011020:	f013 031f 	ands.w	r3, r3, #31
 8011024:	b087      	sub	sp, #28
 8011026:	bf18      	it	ne
 8011028:	3604      	addne	r6, #4
 801102a:	2500      	movs	r5, #0
 801102c:	1f37      	subs	r7, r6, #4
 801102e:	4690      	mov	r8, r2
 8011030:	6802      	ldr	r2, [r0, #0]
 8011032:	9301      	str	r3, [sp, #4]
 8011034:	4682      	mov	sl, r0
 8011036:	f846 5c04 	str.w	r5, [r6, #-4]
 801103a:	46b9      	mov	r9, r7
 801103c:	463c      	mov	r4, r7
 801103e:	9502      	str	r5, [sp, #8]
 8011040:	46ab      	mov	fp, r5
 8011042:	7851      	ldrb	r1, [r2, #1]
 8011044:	1c53      	adds	r3, r2, #1
 8011046:	9303      	str	r3, [sp, #12]
 8011048:	b341      	cbz	r1, 801109c <__hexnan+0x88>
 801104a:	4608      	mov	r0, r1
 801104c:	9205      	str	r2, [sp, #20]
 801104e:	9104      	str	r1, [sp, #16]
 8011050:	f7ff fd5e 	bl	8010b10 <__hexdig_fun>
 8011054:	2800      	cmp	r0, #0
 8011056:	d14f      	bne.n	80110f8 <__hexnan+0xe4>
 8011058:	9904      	ldr	r1, [sp, #16]
 801105a:	9a05      	ldr	r2, [sp, #20]
 801105c:	2920      	cmp	r1, #32
 801105e:	d818      	bhi.n	8011092 <__hexnan+0x7e>
 8011060:	9b02      	ldr	r3, [sp, #8]
 8011062:	459b      	cmp	fp, r3
 8011064:	dd13      	ble.n	801108e <__hexnan+0x7a>
 8011066:	454c      	cmp	r4, r9
 8011068:	d206      	bcs.n	8011078 <__hexnan+0x64>
 801106a:	2d07      	cmp	r5, #7
 801106c:	dc04      	bgt.n	8011078 <__hexnan+0x64>
 801106e:	462a      	mov	r2, r5
 8011070:	4649      	mov	r1, r9
 8011072:	4620      	mov	r0, r4
 8011074:	f7ff ffa8 	bl	8010fc8 <L_shift>
 8011078:	4544      	cmp	r4, r8
 801107a:	d950      	bls.n	801111e <__hexnan+0x10a>
 801107c:	2300      	movs	r3, #0
 801107e:	f1a4 0904 	sub.w	r9, r4, #4
 8011082:	f844 3c04 	str.w	r3, [r4, #-4]
 8011086:	f8cd b008 	str.w	fp, [sp, #8]
 801108a:	464c      	mov	r4, r9
 801108c:	461d      	mov	r5, r3
 801108e:	9a03      	ldr	r2, [sp, #12]
 8011090:	e7d7      	b.n	8011042 <__hexnan+0x2e>
 8011092:	2929      	cmp	r1, #41	; 0x29
 8011094:	d156      	bne.n	8011144 <__hexnan+0x130>
 8011096:	3202      	adds	r2, #2
 8011098:	f8ca 2000 	str.w	r2, [sl]
 801109c:	f1bb 0f00 	cmp.w	fp, #0
 80110a0:	d050      	beq.n	8011144 <__hexnan+0x130>
 80110a2:	454c      	cmp	r4, r9
 80110a4:	d206      	bcs.n	80110b4 <__hexnan+0xa0>
 80110a6:	2d07      	cmp	r5, #7
 80110a8:	dc04      	bgt.n	80110b4 <__hexnan+0xa0>
 80110aa:	462a      	mov	r2, r5
 80110ac:	4649      	mov	r1, r9
 80110ae:	4620      	mov	r0, r4
 80110b0:	f7ff ff8a 	bl	8010fc8 <L_shift>
 80110b4:	4544      	cmp	r4, r8
 80110b6:	d934      	bls.n	8011122 <__hexnan+0x10e>
 80110b8:	f1a8 0204 	sub.w	r2, r8, #4
 80110bc:	4623      	mov	r3, r4
 80110be:	f853 1b04 	ldr.w	r1, [r3], #4
 80110c2:	f842 1f04 	str.w	r1, [r2, #4]!
 80110c6:	429f      	cmp	r7, r3
 80110c8:	d2f9      	bcs.n	80110be <__hexnan+0xaa>
 80110ca:	1b3b      	subs	r3, r7, r4
 80110cc:	f023 0303 	bic.w	r3, r3, #3
 80110d0:	3304      	adds	r3, #4
 80110d2:	3401      	adds	r4, #1
 80110d4:	3e03      	subs	r6, #3
 80110d6:	42b4      	cmp	r4, r6
 80110d8:	bf88      	it	hi
 80110da:	2304      	movhi	r3, #4
 80110dc:	4443      	add	r3, r8
 80110de:	2200      	movs	r2, #0
 80110e0:	f843 2b04 	str.w	r2, [r3], #4
 80110e4:	429f      	cmp	r7, r3
 80110e6:	d2fb      	bcs.n	80110e0 <__hexnan+0xcc>
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	b91b      	cbnz	r3, 80110f4 <__hexnan+0xe0>
 80110ec:	4547      	cmp	r7, r8
 80110ee:	d127      	bne.n	8011140 <__hexnan+0x12c>
 80110f0:	2301      	movs	r3, #1
 80110f2:	603b      	str	r3, [r7, #0]
 80110f4:	2005      	movs	r0, #5
 80110f6:	e026      	b.n	8011146 <__hexnan+0x132>
 80110f8:	3501      	adds	r5, #1
 80110fa:	2d08      	cmp	r5, #8
 80110fc:	f10b 0b01 	add.w	fp, fp, #1
 8011100:	dd06      	ble.n	8011110 <__hexnan+0xfc>
 8011102:	4544      	cmp	r4, r8
 8011104:	d9c3      	bls.n	801108e <__hexnan+0x7a>
 8011106:	2300      	movs	r3, #0
 8011108:	f844 3c04 	str.w	r3, [r4, #-4]
 801110c:	2501      	movs	r5, #1
 801110e:	3c04      	subs	r4, #4
 8011110:	6822      	ldr	r2, [r4, #0]
 8011112:	f000 000f 	and.w	r0, r0, #15
 8011116:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801111a:	6022      	str	r2, [r4, #0]
 801111c:	e7b7      	b.n	801108e <__hexnan+0x7a>
 801111e:	2508      	movs	r5, #8
 8011120:	e7b5      	b.n	801108e <__hexnan+0x7a>
 8011122:	9b01      	ldr	r3, [sp, #4]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d0df      	beq.n	80110e8 <__hexnan+0xd4>
 8011128:	f04f 32ff 	mov.w	r2, #4294967295
 801112c:	f1c3 0320 	rsb	r3, r3, #32
 8011130:	fa22 f303 	lsr.w	r3, r2, r3
 8011134:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011138:	401a      	ands	r2, r3
 801113a:	f846 2c04 	str.w	r2, [r6, #-4]
 801113e:	e7d3      	b.n	80110e8 <__hexnan+0xd4>
 8011140:	3f04      	subs	r7, #4
 8011142:	e7d1      	b.n	80110e8 <__hexnan+0xd4>
 8011144:	2004      	movs	r0, #4
 8011146:	b007      	add	sp, #28
 8011148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801114c <_localeconv_r>:
 801114c:	4800      	ldr	r0, [pc, #0]	; (8011150 <_localeconv_r+0x4>)
 801114e:	4770      	bx	lr
 8011150:	20000420 	.word	0x20000420

08011154 <malloc>:
 8011154:	4b02      	ldr	r3, [pc, #8]	; (8011160 <malloc+0xc>)
 8011156:	4601      	mov	r1, r0
 8011158:	6818      	ldr	r0, [r3, #0]
 801115a:	f000 bd59 	b.w	8011c10 <_malloc_r>
 801115e:	bf00      	nop
 8011160:	200002c8 	.word	0x200002c8

08011164 <__ascii_mbtowc>:
 8011164:	b082      	sub	sp, #8
 8011166:	b901      	cbnz	r1, 801116a <__ascii_mbtowc+0x6>
 8011168:	a901      	add	r1, sp, #4
 801116a:	b142      	cbz	r2, 801117e <__ascii_mbtowc+0x1a>
 801116c:	b14b      	cbz	r3, 8011182 <__ascii_mbtowc+0x1e>
 801116e:	7813      	ldrb	r3, [r2, #0]
 8011170:	600b      	str	r3, [r1, #0]
 8011172:	7812      	ldrb	r2, [r2, #0]
 8011174:	1e10      	subs	r0, r2, #0
 8011176:	bf18      	it	ne
 8011178:	2001      	movne	r0, #1
 801117a:	b002      	add	sp, #8
 801117c:	4770      	bx	lr
 801117e:	4610      	mov	r0, r2
 8011180:	e7fb      	b.n	801117a <__ascii_mbtowc+0x16>
 8011182:	f06f 0001 	mvn.w	r0, #1
 8011186:	e7f8      	b.n	801117a <__ascii_mbtowc+0x16>

08011188 <_Balloc>:
 8011188:	b570      	push	{r4, r5, r6, lr}
 801118a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801118c:	4604      	mov	r4, r0
 801118e:	460d      	mov	r5, r1
 8011190:	b976      	cbnz	r6, 80111b0 <_Balloc+0x28>
 8011192:	2010      	movs	r0, #16
 8011194:	f7ff ffde 	bl	8011154 <malloc>
 8011198:	4602      	mov	r2, r0
 801119a:	6260      	str	r0, [r4, #36]	; 0x24
 801119c:	b920      	cbnz	r0, 80111a8 <_Balloc+0x20>
 801119e:	4b18      	ldr	r3, [pc, #96]	; (8011200 <_Balloc+0x78>)
 80111a0:	4818      	ldr	r0, [pc, #96]	; (8011204 <_Balloc+0x7c>)
 80111a2:	2166      	movs	r1, #102	; 0x66
 80111a4:	f000 ff3e 	bl	8012024 <__assert_func>
 80111a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111ac:	6006      	str	r6, [r0, #0]
 80111ae:	60c6      	str	r6, [r0, #12]
 80111b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80111b2:	68f3      	ldr	r3, [r6, #12]
 80111b4:	b183      	cbz	r3, 80111d8 <_Balloc+0x50>
 80111b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80111be:	b9b8      	cbnz	r0, 80111f0 <_Balloc+0x68>
 80111c0:	2101      	movs	r1, #1
 80111c2:	fa01 f605 	lsl.w	r6, r1, r5
 80111c6:	1d72      	adds	r2, r6, #5
 80111c8:	0092      	lsls	r2, r2, #2
 80111ca:	4620      	mov	r0, r4
 80111cc:	f000 fc9d 	bl	8011b0a <_calloc_r>
 80111d0:	b160      	cbz	r0, 80111ec <_Balloc+0x64>
 80111d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80111d6:	e00e      	b.n	80111f6 <_Balloc+0x6e>
 80111d8:	2221      	movs	r2, #33	; 0x21
 80111da:	2104      	movs	r1, #4
 80111dc:	4620      	mov	r0, r4
 80111de:	f000 fc94 	bl	8011b0a <_calloc_r>
 80111e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111e4:	60f0      	str	r0, [r6, #12]
 80111e6:	68db      	ldr	r3, [r3, #12]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d1e4      	bne.n	80111b6 <_Balloc+0x2e>
 80111ec:	2000      	movs	r0, #0
 80111ee:	bd70      	pop	{r4, r5, r6, pc}
 80111f0:	6802      	ldr	r2, [r0, #0]
 80111f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80111f6:	2300      	movs	r3, #0
 80111f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80111fc:	e7f7      	b.n	80111ee <_Balloc+0x66>
 80111fe:	bf00      	nop
 8011200:	08013006 	.word	0x08013006
 8011204:	08013104 	.word	0x08013104

08011208 <_Bfree>:
 8011208:	b570      	push	{r4, r5, r6, lr}
 801120a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801120c:	4605      	mov	r5, r0
 801120e:	460c      	mov	r4, r1
 8011210:	b976      	cbnz	r6, 8011230 <_Bfree+0x28>
 8011212:	2010      	movs	r0, #16
 8011214:	f7ff ff9e 	bl	8011154 <malloc>
 8011218:	4602      	mov	r2, r0
 801121a:	6268      	str	r0, [r5, #36]	; 0x24
 801121c:	b920      	cbnz	r0, 8011228 <_Bfree+0x20>
 801121e:	4b09      	ldr	r3, [pc, #36]	; (8011244 <_Bfree+0x3c>)
 8011220:	4809      	ldr	r0, [pc, #36]	; (8011248 <_Bfree+0x40>)
 8011222:	218a      	movs	r1, #138	; 0x8a
 8011224:	f000 fefe 	bl	8012024 <__assert_func>
 8011228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801122c:	6006      	str	r6, [r0, #0]
 801122e:	60c6      	str	r6, [r0, #12]
 8011230:	b13c      	cbz	r4, 8011242 <_Bfree+0x3a>
 8011232:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011234:	6862      	ldr	r2, [r4, #4]
 8011236:	68db      	ldr	r3, [r3, #12]
 8011238:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801123c:	6021      	str	r1, [r4, #0]
 801123e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011242:	bd70      	pop	{r4, r5, r6, pc}
 8011244:	08013006 	.word	0x08013006
 8011248:	08013104 	.word	0x08013104

0801124c <__multadd>:
 801124c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011250:	690d      	ldr	r5, [r1, #16]
 8011252:	4607      	mov	r7, r0
 8011254:	460c      	mov	r4, r1
 8011256:	461e      	mov	r6, r3
 8011258:	f101 0c14 	add.w	ip, r1, #20
 801125c:	2000      	movs	r0, #0
 801125e:	f8dc 3000 	ldr.w	r3, [ip]
 8011262:	b299      	uxth	r1, r3
 8011264:	fb02 6101 	mla	r1, r2, r1, r6
 8011268:	0c1e      	lsrs	r6, r3, #16
 801126a:	0c0b      	lsrs	r3, r1, #16
 801126c:	fb02 3306 	mla	r3, r2, r6, r3
 8011270:	b289      	uxth	r1, r1
 8011272:	3001      	adds	r0, #1
 8011274:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011278:	4285      	cmp	r5, r0
 801127a:	f84c 1b04 	str.w	r1, [ip], #4
 801127e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011282:	dcec      	bgt.n	801125e <__multadd+0x12>
 8011284:	b30e      	cbz	r6, 80112ca <__multadd+0x7e>
 8011286:	68a3      	ldr	r3, [r4, #8]
 8011288:	42ab      	cmp	r3, r5
 801128a:	dc19      	bgt.n	80112c0 <__multadd+0x74>
 801128c:	6861      	ldr	r1, [r4, #4]
 801128e:	4638      	mov	r0, r7
 8011290:	3101      	adds	r1, #1
 8011292:	f7ff ff79 	bl	8011188 <_Balloc>
 8011296:	4680      	mov	r8, r0
 8011298:	b928      	cbnz	r0, 80112a6 <__multadd+0x5a>
 801129a:	4602      	mov	r2, r0
 801129c:	4b0c      	ldr	r3, [pc, #48]	; (80112d0 <__multadd+0x84>)
 801129e:	480d      	ldr	r0, [pc, #52]	; (80112d4 <__multadd+0x88>)
 80112a0:	21b5      	movs	r1, #181	; 0xb5
 80112a2:	f000 febf 	bl	8012024 <__assert_func>
 80112a6:	6922      	ldr	r2, [r4, #16]
 80112a8:	3202      	adds	r2, #2
 80112aa:	f104 010c 	add.w	r1, r4, #12
 80112ae:	0092      	lsls	r2, r2, #2
 80112b0:	300c      	adds	r0, #12
 80112b2:	f7fc fff5 	bl	800e2a0 <memcpy>
 80112b6:	4621      	mov	r1, r4
 80112b8:	4638      	mov	r0, r7
 80112ba:	f7ff ffa5 	bl	8011208 <_Bfree>
 80112be:	4644      	mov	r4, r8
 80112c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80112c4:	3501      	adds	r5, #1
 80112c6:	615e      	str	r6, [r3, #20]
 80112c8:	6125      	str	r5, [r4, #16]
 80112ca:	4620      	mov	r0, r4
 80112cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112d0:	08013078 	.word	0x08013078
 80112d4:	08013104 	.word	0x08013104

080112d8 <__s2b>:
 80112d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112dc:	460c      	mov	r4, r1
 80112de:	4615      	mov	r5, r2
 80112e0:	461f      	mov	r7, r3
 80112e2:	2209      	movs	r2, #9
 80112e4:	3308      	adds	r3, #8
 80112e6:	4606      	mov	r6, r0
 80112e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80112ec:	2100      	movs	r1, #0
 80112ee:	2201      	movs	r2, #1
 80112f0:	429a      	cmp	r2, r3
 80112f2:	db09      	blt.n	8011308 <__s2b+0x30>
 80112f4:	4630      	mov	r0, r6
 80112f6:	f7ff ff47 	bl	8011188 <_Balloc>
 80112fa:	b940      	cbnz	r0, 801130e <__s2b+0x36>
 80112fc:	4602      	mov	r2, r0
 80112fe:	4b19      	ldr	r3, [pc, #100]	; (8011364 <__s2b+0x8c>)
 8011300:	4819      	ldr	r0, [pc, #100]	; (8011368 <__s2b+0x90>)
 8011302:	21ce      	movs	r1, #206	; 0xce
 8011304:	f000 fe8e 	bl	8012024 <__assert_func>
 8011308:	0052      	lsls	r2, r2, #1
 801130a:	3101      	adds	r1, #1
 801130c:	e7f0      	b.n	80112f0 <__s2b+0x18>
 801130e:	9b08      	ldr	r3, [sp, #32]
 8011310:	6143      	str	r3, [r0, #20]
 8011312:	2d09      	cmp	r5, #9
 8011314:	f04f 0301 	mov.w	r3, #1
 8011318:	6103      	str	r3, [r0, #16]
 801131a:	dd16      	ble.n	801134a <__s2b+0x72>
 801131c:	f104 0909 	add.w	r9, r4, #9
 8011320:	46c8      	mov	r8, r9
 8011322:	442c      	add	r4, r5
 8011324:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011328:	4601      	mov	r1, r0
 801132a:	3b30      	subs	r3, #48	; 0x30
 801132c:	220a      	movs	r2, #10
 801132e:	4630      	mov	r0, r6
 8011330:	f7ff ff8c 	bl	801124c <__multadd>
 8011334:	45a0      	cmp	r8, r4
 8011336:	d1f5      	bne.n	8011324 <__s2b+0x4c>
 8011338:	f1a5 0408 	sub.w	r4, r5, #8
 801133c:	444c      	add	r4, r9
 801133e:	1b2d      	subs	r5, r5, r4
 8011340:	1963      	adds	r3, r4, r5
 8011342:	42bb      	cmp	r3, r7
 8011344:	db04      	blt.n	8011350 <__s2b+0x78>
 8011346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801134a:	340a      	adds	r4, #10
 801134c:	2509      	movs	r5, #9
 801134e:	e7f6      	b.n	801133e <__s2b+0x66>
 8011350:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011354:	4601      	mov	r1, r0
 8011356:	3b30      	subs	r3, #48	; 0x30
 8011358:	220a      	movs	r2, #10
 801135a:	4630      	mov	r0, r6
 801135c:	f7ff ff76 	bl	801124c <__multadd>
 8011360:	e7ee      	b.n	8011340 <__s2b+0x68>
 8011362:	bf00      	nop
 8011364:	08013078 	.word	0x08013078
 8011368:	08013104 	.word	0x08013104

0801136c <__hi0bits>:
 801136c:	0c03      	lsrs	r3, r0, #16
 801136e:	041b      	lsls	r3, r3, #16
 8011370:	b9d3      	cbnz	r3, 80113a8 <__hi0bits+0x3c>
 8011372:	0400      	lsls	r0, r0, #16
 8011374:	2310      	movs	r3, #16
 8011376:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801137a:	bf04      	itt	eq
 801137c:	0200      	lsleq	r0, r0, #8
 801137e:	3308      	addeq	r3, #8
 8011380:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011384:	bf04      	itt	eq
 8011386:	0100      	lsleq	r0, r0, #4
 8011388:	3304      	addeq	r3, #4
 801138a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801138e:	bf04      	itt	eq
 8011390:	0080      	lsleq	r0, r0, #2
 8011392:	3302      	addeq	r3, #2
 8011394:	2800      	cmp	r0, #0
 8011396:	db05      	blt.n	80113a4 <__hi0bits+0x38>
 8011398:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801139c:	f103 0301 	add.w	r3, r3, #1
 80113a0:	bf08      	it	eq
 80113a2:	2320      	moveq	r3, #32
 80113a4:	4618      	mov	r0, r3
 80113a6:	4770      	bx	lr
 80113a8:	2300      	movs	r3, #0
 80113aa:	e7e4      	b.n	8011376 <__hi0bits+0xa>

080113ac <__lo0bits>:
 80113ac:	6803      	ldr	r3, [r0, #0]
 80113ae:	f013 0207 	ands.w	r2, r3, #7
 80113b2:	4601      	mov	r1, r0
 80113b4:	d00b      	beq.n	80113ce <__lo0bits+0x22>
 80113b6:	07da      	lsls	r2, r3, #31
 80113b8:	d423      	bmi.n	8011402 <__lo0bits+0x56>
 80113ba:	0798      	lsls	r0, r3, #30
 80113bc:	bf49      	itett	mi
 80113be:	085b      	lsrmi	r3, r3, #1
 80113c0:	089b      	lsrpl	r3, r3, #2
 80113c2:	2001      	movmi	r0, #1
 80113c4:	600b      	strmi	r3, [r1, #0]
 80113c6:	bf5c      	itt	pl
 80113c8:	600b      	strpl	r3, [r1, #0]
 80113ca:	2002      	movpl	r0, #2
 80113cc:	4770      	bx	lr
 80113ce:	b298      	uxth	r0, r3
 80113d0:	b9a8      	cbnz	r0, 80113fe <__lo0bits+0x52>
 80113d2:	0c1b      	lsrs	r3, r3, #16
 80113d4:	2010      	movs	r0, #16
 80113d6:	b2da      	uxtb	r2, r3
 80113d8:	b90a      	cbnz	r2, 80113de <__lo0bits+0x32>
 80113da:	3008      	adds	r0, #8
 80113dc:	0a1b      	lsrs	r3, r3, #8
 80113de:	071a      	lsls	r2, r3, #28
 80113e0:	bf04      	itt	eq
 80113e2:	091b      	lsreq	r3, r3, #4
 80113e4:	3004      	addeq	r0, #4
 80113e6:	079a      	lsls	r2, r3, #30
 80113e8:	bf04      	itt	eq
 80113ea:	089b      	lsreq	r3, r3, #2
 80113ec:	3002      	addeq	r0, #2
 80113ee:	07da      	lsls	r2, r3, #31
 80113f0:	d403      	bmi.n	80113fa <__lo0bits+0x4e>
 80113f2:	085b      	lsrs	r3, r3, #1
 80113f4:	f100 0001 	add.w	r0, r0, #1
 80113f8:	d005      	beq.n	8011406 <__lo0bits+0x5a>
 80113fa:	600b      	str	r3, [r1, #0]
 80113fc:	4770      	bx	lr
 80113fe:	4610      	mov	r0, r2
 8011400:	e7e9      	b.n	80113d6 <__lo0bits+0x2a>
 8011402:	2000      	movs	r0, #0
 8011404:	4770      	bx	lr
 8011406:	2020      	movs	r0, #32
 8011408:	4770      	bx	lr
	...

0801140c <__i2b>:
 801140c:	b510      	push	{r4, lr}
 801140e:	460c      	mov	r4, r1
 8011410:	2101      	movs	r1, #1
 8011412:	f7ff feb9 	bl	8011188 <_Balloc>
 8011416:	4602      	mov	r2, r0
 8011418:	b928      	cbnz	r0, 8011426 <__i2b+0x1a>
 801141a:	4b05      	ldr	r3, [pc, #20]	; (8011430 <__i2b+0x24>)
 801141c:	4805      	ldr	r0, [pc, #20]	; (8011434 <__i2b+0x28>)
 801141e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011422:	f000 fdff 	bl	8012024 <__assert_func>
 8011426:	2301      	movs	r3, #1
 8011428:	6144      	str	r4, [r0, #20]
 801142a:	6103      	str	r3, [r0, #16]
 801142c:	bd10      	pop	{r4, pc}
 801142e:	bf00      	nop
 8011430:	08013078 	.word	0x08013078
 8011434:	08013104 	.word	0x08013104

08011438 <__multiply>:
 8011438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801143c:	4691      	mov	r9, r2
 801143e:	690a      	ldr	r2, [r1, #16]
 8011440:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011444:	429a      	cmp	r2, r3
 8011446:	bfb8      	it	lt
 8011448:	460b      	movlt	r3, r1
 801144a:	460c      	mov	r4, r1
 801144c:	bfbc      	itt	lt
 801144e:	464c      	movlt	r4, r9
 8011450:	4699      	movlt	r9, r3
 8011452:	6927      	ldr	r7, [r4, #16]
 8011454:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011458:	68a3      	ldr	r3, [r4, #8]
 801145a:	6861      	ldr	r1, [r4, #4]
 801145c:	eb07 060a 	add.w	r6, r7, sl
 8011460:	42b3      	cmp	r3, r6
 8011462:	b085      	sub	sp, #20
 8011464:	bfb8      	it	lt
 8011466:	3101      	addlt	r1, #1
 8011468:	f7ff fe8e 	bl	8011188 <_Balloc>
 801146c:	b930      	cbnz	r0, 801147c <__multiply+0x44>
 801146e:	4602      	mov	r2, r0
 8011470:	4b44      	ldr	r3, [pc, #272]	; (8011584 <__multiply+0x14c>)
 8011472:	4845      	ldr	r0, [pc, #276]	; (8011588 <__multiply+0x150>)
 8011474:	f240 115d 	movw	r1, #349	; 0x15d
 8011478:	f000 fdd4 	bl	8012024 <__assert_func>
 801147c:	f100 0514 	add.w	r5, r0, #20
 8011480:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011484:	462b      	mov	r3, r5
 8011486:	2200      	movs	r2, #0
 8011488:	4543      	cmp	r3, r8
 801148a:	d321      	bcc.n	80114d0 <__multiply+0x98>
 801148c:	f104 0314 	add.w	r3, r4, #20
 8011490:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011494:	f109 0314 	add.w	r3, r9, #20
 8011498:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801149c:	9202      	str	r2, [sp, #8]
 801149e:	1b3a      	subs	r2, r7, r4
 80114a0:	3a15      	subs	r2, #21
 80114a2:	f022 0203 	bic.w	r2, r2, #3
 80114a6:	3204      	adds	r2, #4
 80114a8:	f104 0115 	add.w	r1, r4, #21
 80114ac:	428f      	cmp	r7, r1
 80114ae:	bf38      	it	cc
 80114b0:	2204      	movcc	r2, #4
 80114b2:	9201      	str	r2, [sp, #4]
 80114b4:	9a02      	ldr	r2, [sp, #8]
 80114b6:	9303      	str	r3, [sp, #12]
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d80c      	bhi.n	80114d6 <__multiply+0x9e>
 80114bc:	2e00      	cmp	r6, #0
 80114be:	dd03      	ble.n	80114c8 <__multiply+0x90>
 80114c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d05a      	beq.n	801157e <__multiply+0x146>
 80114c8:	6106      	str	r6, [r0, #16]
 80114ca:	b005      	add	sp, #20
 80114cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114d0:	f843 2b04 	str.w	r2, [r3], #4
 80114d4:	e7d8      	b.n	8011488 <__multiply+0x50>
 80114d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80114da:	f1ba 0f00 	cmp.w	sl, #0
 80114de:	d024      	beq.n	801152a <__multiply+0xf2>
 80114e0:	f104 0e14 	add.w	lr, r4, #20
 80114e4:	46a9      	mov	r9, r5
 80114e6:	f04f 0c00 	mov.w	ip, #0
 80114ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80114ee:	f8d9 1000 	ldr.w	r1, [r9]
 80114f2:	fa1f fb82 	uxth.w	fp, r2
 80114f6:	b289      	uxth	r1, r1
 80114f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80114fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011500:	f8d9 2000 	ldr.w	r2, [r9]
 8011504:	4461      	add	r1, ip
 8011506:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801150a:	fb0a c20b 	mla	r2, sl, fp, ip
 801150e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011512:	b289      	uxth	r1, r1
 8011514:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011518:	4577      	cmp	r7, lr
 801151a:	f849 1b04 	str.w	r1, [r9], #4
 801151e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011522:	d8e2      	bhi.n	80114ea <__multiply+0xb2>
 8011524:	9a01      	ldr	r2, [sp, #4]
 8011526:	f845 c002 	str.w	ip, [r5, r2]
 801152a:	9a03      	ldr	r2, [sp, #12]
 801152c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011530:	3304      	adds	r3, #4
 8011532:	f1b9 0f00 	cmp.w	r9, #0
 8011536:	d020      	beq.n	801157a <__multiply+0x142>
 8011538:	6829      	ldr	r1, [r5, #0]
 801153a:	f104 0c14 	add.w	ip, r4, #20
 801153e:	46ae      	mov	lr, r5
 8011540:	f04f 0a00 	mov.w	sl, #0
 8011544:	f8bc b000 	ldrh.w	fp, [ip]
 8011548:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801154c:	fb09 220b 	mla	r2, r9, fp, r2
 8011550:	4492      	add	sl, r2
 8011552:	b289      	uxth	r1, r1
 8011554:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011558:	f84e 1b04 	str.w	r1, [lr], #4
 801155c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011560:	f8be 1000 	ldrh.w	r1, [lr]
 8011564:	0c12      	lsrs	r2, r2, #16
 8011566:	fb09 1102 	mla	r1, r9, r2, r1
 801156a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801156e:	4567      	cmp	r7, ip
 8011570:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011574:	d8e6      	bhi.n	8011544 <__multiply+0x10c>
 8011576:	9a01      	ldr	r2, [sp, #4]
 8011578:	50a9      	str	r1, [r5, r2]
 801157a:	3504      	adds	r5, #4
 801157c:	e79a      	b.n	80114b4 <__multiply+0x7c>
 801157e:	3e01      	subs	r6, #1
 8011580:	e79c      	b.n	80114bc <__multiply+0x84>
 8011582:	bf00      	nop
 8011584:	08013078 	.word	0x08013078
 8011588:	08013104 	.word	0x08013104

0801158c <__pow5mult>:
 801158c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011590:	4615      	mov	r5, r2
 8011592:	f012 0203 	ands.w	r2, r2, #3
 8011596:	4606      	mov	r6, r0
 8011598:	460f      	mov	r7, r1
 801159a:	d007      	beq.n	80115ac <__pow5mult+0x20>
 801159c:	4c25      	ldr	r4, [pc, #148]	; (8011634 <__pow5mult+0xa8>)
 801159e:	3a01      	subs	r2, #1
 80115a0:	2300      	movs	r3, #0
 80115a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80115a6:	f7ff fe51 	bl	801124c <__multadd>
 80115aa:	4607      	mov	r7, r0
 80115ac:	10ad      	asrs	r5, r5, #2
 80115ae:	d03d      	beq.n	801162c <__pow5mult+0xa0>
 80115b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80115b2:	b97c      	cbnz	r4, 80115d4 <__pow5mult+0x48>
 80115b4:	2010      	movs	r0, #16
 80115b6:	f7ff fdcd 	bl	8011154 <malloc>
 80115ba:	4602      	mov	r2, r0
 80115bc:	6270      	str	r0, [r6, #36]	; 0x24
 80115be:	b928      	cbnz	r0, 80115cc <__pow5mult+0x40>
 80115c0:	4b1d      	ldr	r3, [pc, #116]	; (8011638 <__pow5mult+0xac>)
 80115c2:	481e      	ldr	r0, [pc, #120]	; (801163c <__pow5mult+0xb0>)
 80115c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80115c8:	f000 fd2c 	bl	8012024 <__assert_func>
 80115cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80115d0:	6004      	str	r4, [r0, #0]
 80115d2:	60c4      	str	r4, [r0, #12]
 80115d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80115d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80115dc:	b94c      	cbnz	r4, 80115f2 <__pow5mult+0x66>
 80115de:	f240 2171 	movw	r1, #625	; 0x271
 80115e2:	4630      	mov	r0, r6
 80115e4:	f7ff ff12 	bl	801140c <__i2b>
 80115e8:	2300      	movs	r3, #0
 80115ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80115ee:	4604      	mov	r4, r0
 80115f0:	6003      	str	r3, [r0, #0]
 80115f2:	f04f 0900 	mov.w	r9, #0
 80115f6:	07eb      	lsls	r3, r5, #31
 80115f8:	d50a      	bpl.n	8011610 <__pow5mult+0x84>
 80115fa:	4639      	mov	r1, r7
 80115fc:	4622      	mov	r2, r4
 80115fe:	4630      	mov	r0, r6
 8011600:	f7ff ff1a 	bl	8011438 <__multiply>
 8011604:	4639      	mov	r1, r7
 8011606:	4680      	mov	r8, r0
 8011608:	4630      	mov	r0, r6
 801160a:	f7ff fdfd 	bl	8011208 <_Bfree>
 801160e:	4647      	mov	r7, r8
 8011610:	106d      	asrs	r5, r5, #1
 8011612:	d00b      	beq.n	801162c <__pow5mult+0xa0>
 8011614:	6820      	ldr	r0, [r4, #0]
 8011616:	b938      	cbnz	r0, 8011628 <__pow5mult+0x9c>
 8011618:	4622      	mov	r2, r4
 801161a:	4621      	mov	r1, r4
 801161c:	4630      	mov	r0, r6
 801161e:	f7ff ff0b 	bl	8011438 <__multiply>
 8011622:	6020      	str	r0, [r4, #0]
 8011624:	f8c0 9000 	str.w	r9, [r0]
 8011628:	4604      	mov	r4, r0
 801162a:	e7e4      	b.n	80115f6 <__pow5mult+0x6a>
 801162c:	4638      	mov	r0, r7
 801162e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011632:	bf00      	nop
 8011634:	08013250 	.word	0x08013250
 8011638:	08013006 	.word	0x08013006
 801163c:	08013104 	.word	0x08013104

08011640 <__lshift>:
 8011640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011644:	460c      	mov	r4, r1
 8011646:	6849      	ldr	r1, [r1, #4]
 8011648:	6923      	ldr	r3, [r4, #16]
 801164a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801164e:	68a3      	ldr	r3, [r4, #8]
 8011650:	4607      	mov	r7, r0
 8011652:	4691      	mov	r9, r2
 8011654:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011658:	f108 0601 	add.w	r6, r8, #1
 801165c:	42b3      	cmp	r3, r6
 801165e:	db0b      	blt.n	8011678 <__lshift+0x38>
 8011660:	4638      	mov	r0, r7
 8011662:	f7ff fd91 	bl	8011188 <_Balloc>
 8011666:	4605      	mov	r5, r0
 8011668:	b948      	cbnz	r0, 801167e <__lshift+0x3e>
 801166a:	4602      	mov	r2, r0
 801166c:	4b2a      	ldr	r3, [pc, #168]	; (8011718 <__lshift+0xd8>)
 801166e:	482b      	ldr	r0, [pc, #172]	; (801171c <__lshift+0xdc>)
 8011670:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011674:	f000 fcd6 	bl	8012024 <__assert_func>
 8011678:	3101      	adds	r1, #1
 801167a:	005b      	lsls	r3, r3, #1
 801167c:	e7ee      	b.n	801165c <__lshift+0x1c>
 801167e:	2300      	movs	r3, #0
 8011680:	f100 0114 	add.w	r1, r0, #20
 8011684:	f100 0210 	add.w	r2, r0, #16
 8011688:	4618      	mov	r0, r3
 801168a:	4553      	cmp	r3, sl
 801168c:	db37      	blt.n	80116fe <__lshift+0xbe>
 801168e:	6920      	ldr	r0, [r4, #16]
 8011690:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011694:	f104 0314 	add.w	r3, r4, #20
 8011698:	f019 091f 	ands.w	r9, r9, #31
 801169c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80116a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80116a4:	d02f      	beq.n	8011706 <__lshift+0xc6>
 80116a6:	f1c9 0e20 	rsb	lr, r9, #32
 80116aa:	468a      	mov	sl, r1
 80116ac:	f04f 0c00 	mov.w	ip, #0
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	fa02 f209 	lsl.w	r2, r2, r9
 80116b6:	ea42 020c 	orr.w	r2, r2, ip
 80116ba:	f84a 2b04 	str.w	r2, [sl], #4
 80116be:	f853 2b04 	ldr.w	r2, [r3], #4
 80116c2:	4298      	cmp	r0, r3
 80116c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80116c8:	d8f2      	bhi.n	80116b0 <__lshift+0x70>
 80116ca:	1b03      	subs	r3, r0, r4
 80116cc:	3b15      	subs	r3, #21
 80116ce:	f023 0303 	bic.w	r3, r3, #3
 80116d2:	3304      	adds	r3, #4
 80116d4:	f104 0215 	add.w	r2, r4, #21
 80116d8:	4290      	cmp	r0, r2
 80116da:	bf38      	it	cc
 80116dc:	2304      	movcc	r3, #4
 80116de:	f841 c003 	str.w	ip, [r1, r3]
 80116e2:	f1bc 0f00 	cmp.w	ip, #0
 80116e6:	d001      	beq.n	80116ec <__lshift+0xac>
 80116e8:	f108 0602 	add.w	r6, r8, #2
 80116ec:	3e01      	subs	r6, #1
 80116ee:	4638      	mov	r0, r7
 80116f0:	612e      	str	r6, [r5, #16]
 80116f2:	4621      	mov	r1, r4
 80116f4:	f7ff fd88 	bl	8011208 <_Bfree>
 80116f8:	4628      	mov	r0, r5
 80116fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8011702:	3301      	adds	r3, #1
 8011704:	e7c1      	b.n	801168a <__lshift+0x4a>
 8011706:	3904      	subs	r1, #4
 8011708:	f853 2b04 	ldr.w	r2, [r3], #4
 801170c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011710:	4298      	cmp	r0, r3
 8011712:	d8f9      	bhi.n	8011708 <__lshift+0xc8>
 8011714:	e7ea      	b.n	80116ec <__lshift+0xac>
 8011716:	bf00      	nop
 8011718:	08013078 	.word	0x08013078
 801171c:	08013104 	.word	0x08013104

08011720 <__mcmp>:
 8011720:	b530      	push	{r4, r5, lr}
 8011722:	6902      	ldr	r2, [r0, #16]
 8011724:	690c      	ldr	r4, [r1, #16]
 8011726:	1b12      	subs	r2, r2, r4
 8011728:	d10e      	bne.n	8011748 <__mcmp+0x28>
 801172a:	f100 0314 	add.w	r3, r0, #20
 801172e:	3114      	adds	r1, #20
 8011730:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011734:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011738:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801173c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011740:	42a5      	cmp	r5, r4
 8011742:	d003      	beq.n	801174c <__mcmp+0x2c>
 8011744:	d305      	bcc.n	8011752 <__mcmp+0x32>
 8011746:	2201      	movs	r2, #1
 8011748:	4610      	mov	r0, r2
 801174a:	bd30      	pop	{r4, r5, pc}
 801174c:	4283      	cmp	r3, r0
 801174e:	d3f3      	bcc.n	8011738 <__mcmp+0x18>
 8011750:	e7fa      	b.n	8011748 <__mcmp+0x28>
 8011752:	f04f 32ff 	mov.w	r2, #4294967295
 8011756:	e7f7      	b.n	8011748 <__mcmp+0x28>

08011758 <__mdiff>:
 8011758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801175c:	460c      	mov	r4, r1
 801175e:	4606      	mov	r6, r0
 8011760:	4611      	mov	r1, r2
 8011762:	4620      	mov	r0, r4
 8011764:	4690      	mov	r8, r2
 8011766:	f7ff ffdb 	bl	8011720 <__mcmp>
 801176a:	1e05      	subs	r5, r0, #0
 801176c:	d110      	bne.n	8011790 <__mdiff+0x38>
 801176e:	4629      	mov	r1, r5
 8011770:	4630      	mov	r0, r6
 8011772:	f7ff fd09 	bl	8011188 <_Balloc>
 8011776:	b930      	cbnz	r0, 8011786 <__mdiff+0x2e>
 8011778:	4b3a      	ldr	r3, [pc, #232]	; (8011864 <__mdiff+0x10c>)
 801177a:	4602      	mov	r2, r0
 801177c:	f240 2132 	movw	r1, #562	; 0x232
 8011780:	4839      	ldr	r0, [pc, #228]	; (8011868 <__mdiff+0x110>)
 8011782:	f000 fc4f 	bl	8012024 <__assert_func>
 8011786:	2301      	movs	r3, #1
 8011788:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801178c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011790:	bfa4      	itt	ge
 8011792:	4643      	movge	r3, r8
 8011794:	46a0      	movge	r8, r4
 8011796:	4630      	mov	r0, r6
 8011798:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801179c:	bfa6      	itte	ge
 801179e:	461c      	movge	r4, r3
 80117a0:	2500      	movge	r5, #0
 80117a2:	2501      	movlt	r5, #1
 80117a4:	f7ff fcf0 	bl	8011188 <_Balloc>
 80117a8:	b920      	cbnz	r0, 80117b4 <__mdiff+0x5c>
 80117aa:	4b2e      	ldr	r3, [pc, #184]	; (8011864 <__mdiff+0x10c>)
 80117ac:	4602      	mov	r2, r0
 80117ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80117b2:	e7e5      	b.n	8011780 <__mdiff+0x28>
 80117b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80117b8:	6926      	ldr	r6, [r4, #16]
 80117ba:	60c5      	str	r5, [r0, #12]
 80117bc:	f104 0914 	add.w	r9, r4, #20
 80117c0:	f108 0514 	add.w	r5, r8, #20
 80117c4:	f100 0e14 	add.w	lr, r0, #20
 80117c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80117cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80117d0:	f108 0210 	add.w	r2, r8, #16
 80117d4:	46f2      	mov	sl, lr
 80117d6:	2100      	movs	r1, #0
 80117d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80117dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80117e0:	fa1f f883 	uxth.w	r8, r3
 80117e4:	fa11 f18b 	uxtah	r1, r1, fp
 80117e8:	0c1b      	lsrs	r3, r3, #16
 80117ea:	eba1 0808 	sub.w	r8, r1, r8
 80117ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80117f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80117f6:	fa1f f888 	uxth.w	r8, r8
 80117fa:	1419      	asrs	r1, r3, #16
 80117fc:	454e      	cmp	r6, r9
 80117fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011802:	f84a 3b04 	str.w	r3, [sl], #4
 8011806:	d8e7      	bhi.n	80117d8 <__mdiff+0x80>
 8011808:	1b33      	subs	r3, r6, r4
 801180a:	3b15      	subs	r3, #21
 801180c:	f023 0303 	bic.w	r3, r3, #3
 8011810:	3304      	adds	r3, #4
 8011812:	3415      	adds	r4, #21
 8011814:	42a6      	cmp	r6, r4
 8011816:	bf38      	it	cc
 8011818:	2304      	movcc	r3, #4
 801181a:	441d      	add	r5, r3
 801181c:	4473      	add	r3, lr
 801181e:	469e      	mov	lr, r3
 8011820:	462e      	mov	r6, r5
 8011822:	4566      	cmp	r6, ip
 8011824:	d30e      	bcc.n	8011844 <__mdiff+0xec>
 8011826:	f10c 0203 	add.w	r2, ip, #3
 801182a:	1b52      	subs	r2, r2, r5
 801182c:	f022 0203 	bic.w	r2, r2, #3
 8011830:	3d03      	subs	r5, #3
 8011832:	45ac      	cmp	ip, r5
 8011834:	bf38      	it	cc
 8011836:	2200      	movcc	r2, #0
 8011838:	441a      	add	r2, r3
 801183a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801183e:	b17b      	cbz	r3, 8011860 <__mdiff+0x108>
 8011840:	6107      	str	r7, [r0, #16]
 8011842:	e7a3      	b.n	801178c <__mdiff+0x34>
 8011844:	f856 8b04 	ldr.w	r8, [r6], #4
 8011848:	fa11 f288 	uxtah	r2, r1, r8
 801184c:	1414      	asrs	r4, r2, #16
 801184e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011852:	b292      	uxth	r2, r2
 8011854:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011858:	f84e 2b04 	str.w	r2, [lr], #4
 801185c:	1421      	asrs	r1, r4, #16
 801185e:	e7e0      	b.n	8011822 <__mdiff+0xca>
 8011860:	3f01      	subs	r7, #1
 8011862:	e7ea      	b.n	801183a <__mdiff+0xe2>
 8011864:	08013078 	.word	0x08013078
 8011868:	08013104 	.word	0x08013104

0801186c <__ulp>:
 801186c:	b082      	sub	sp, #8
 801186e:	ed8d 0b00 	vstr	d0, [sp]
 8011872:	9b01      	ldr	r3, [sp, #4]
 8011874:	4912      	ldr	r1, [pc, #72]	; (80118c0 <__ulp+0x54>)
 8011876:	4019      	ands	r1, r3
 8011878:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801187c:	2900      	cmp	r1, #0
 801187e:	dd05      	ble.n	801188c <__ulp+0x20>
 8011880:	2200      	movs	r2, #0
 8011882:	460b      	mov	r3, r1
 8011884:	ec43 2b10 	vmov	d0, r2, r3
 8011888:	b002      	add	sp, #8
 801188a:	4770      	bx	lr
 801188c:	4249      	negs	r1, r1
 801188e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011892:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011896:	f04f 0200 	mov.w	r2, #0
 801189a:	f04f 0300 	mov.w	r3, #0
 801189e:	da04      	bge.n	80118aa <__ulp+0x3e>
 80118a0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80118a4:	fa41 f300 	asr.w	r3, r1, r0
 80118a8:	e7ec      	b.n	8011884 <__ulp+0x18>
 80118aa:	f1a0 0114 	sub.w	r1, r0, #20
 80118ae:	291e      	cmp	r1, #30
 80118b0:	bfda      	itte	le
 80118b2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80118b6:	fa20 f101 	lsrle.w	r1, r0, r1
 80118ba:	2101      	movgt	r1, #1
 80118bc:	460a      	mov	r2, r1
 80118be:	e7e1      	b.n	8011884 <__ulp+0x18>
 80118c0:	7ff00000 	.word	0x7ff00000

080118c4 <__b2d>:
 80118c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118c6:	6905      	ldr	r5, [r0, #16]
 80118c8:	f100 0714 	add.w	r7, r0, #20
 80118cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80118d0:	1f2e      	subs	r6, r5, #4
 80118d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80118d6:	4620      	mov	r0, r4
 80118d8:	f7ff fd48 	bl	801136c <__hi0bits>
 80118dc:	f1c0 0320 	rsb	r3, r0, #32
 80118e0:	280a      	cmp	r0, #10
 80118e2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011960 <__b2d+0x9c>
 80118e6:	600b      	str	r3, [r1, #0]
 80118e8:	dc14      	bgt.n	8011914 <__b2d+0x50>
 80118ea:	f1c0 0e0b 	rsb	lr, r0, #11
 80118ee:	fa24 f10e 	lsr.w	r1, r4, lr
 80118f2:	42b7      	cmp	r7, r6
 80118f4:	ea41 030c 	orr.w	r3, r1, ip
 80118f8:	bf34      	ite	cc
 80118fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80118fe:	2100      	movcs	r1, #0
 8011900:	3015      	adds	r0, #21
 8011902:	fa04 f000 	lsl.w	r0, r4, r0
 8011906:	fa21 f10e 	lsr.w	r1, r1, lr
 801190a:	ea40 0201 	orr.w	r2, r0, r1
 801190e:	ec43 2b10 	vmov	d0, r2, r3
 8011912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011914:	42b7      	cmp	r7, r6
 8011916:	bf3a      	itte	cc
 8011918:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801191c:	f1a5 0608 	subcc.w	r6, r5, #8
 8011920:	2100      	movcs	r1, #0
 8011922:	380b      	subs	r0, #11
 8011924:	d017      	beq.n	8011956 <__b2d+0x92>
 8011926:	f1c0 0c20 	rsb	ip, r0, #32
 801192a:	fa04 f500 	lsl.w	r5, r4, r0
 801192e:	42be      	cmp	r6, r7
 8011930:	fa21 f40c 	lsr.w	r4, r1, ip
 8011934:	ea45 0504 	orr.w	r5, r5, r4
 8011938:	bf8c      	ite	hi
 801193a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801193e:	2400      	movls	r4, #0
 8011940:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011944:	fa01 f000 	lsl.w	r0, r1, r0
 8011948:	fa24 f40c 	lsr.w	r4, r4, ip
 801194c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011950:	ea40 0204 	orr.w	r2, r0, r4
 8011954:	e7db      	b.n	801190e <__b2d+0x4a>
 8011956:	ea44 030c 	orr.w	r3, r4, ip
 801195a:	460a      	mov	r2, r1
 801195c:	e7d7      	b.n	801190e <__b2d+0x4a>
 801195e:	bf00      	nop
 8011960:	3ff00000 	.word	0x3ff00000

08011964 <__d2b>:
 8011964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011968:	4689      	mov	r9, r1
 801196a:	2101      	movs	r1, #1
 801196c:	ec57 6b10 	vmov	r6, r7, d0
 8011970:	4690      	mov	r8, r2
 8011972:	f7ff fc09 	bl	8011188 <_Balloc>
 8011976:	4604      	mov	r4, r0
 8011978:	b930      	cbnz	r0, 8011988 <__d2b+0x24>
 801197a:	4602      	mov	r2, r0
 801197c:	4b25      	ldr	r3, [pc, #148]	; (8011a14 <__d2b+0xb0>)
 801197e:	4826      	ldr	r0, [pc, #152]	; (8011a18 <__d2b+0xb4>)
 8011980:	f240 310a 	movw	r1, #778	; 0x30a
 8011984:	f000 fb4e 	bl	8012024 <__assert_func>
 8011988:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801198c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011990:	bb35      	cbnz	r5, 80119e0 <__d2b+0x7c>
 8011992:	2e00      	cmp	r6, #0
 8011994:	9301      	str	r3, [sp, #4]
 8011996:	d028      	beq.n	80119ea <__d2b+0x86>
 8011998:	4668      	mov	r0, sp
 801199a:	9600      	str	r6, [sp, #0]
 801199c:	f7ff fd06 	bl	80113ac <__lo0bits>
 80119a0:	9900      	ldr	r1, [sp, #0]
 80119a2:	b300      	cbz	r0, 80119e6 <__d2b+0x82>
 80119a4:	9a01      	ldr	r2, [sp, #4]
 80119a6:	f1c0 0320 	rsb	r3, r0, #32
 80119aa:	fa02 f303 	lsl.w	r3, r2, r3
 80119ae:	430b      	orrs	r3, r1
 80119b0:	40c2      	lsrs	r2, r0
 80119b2:	6163      	str	r3, [r4, #20]
 80119b4:	9201      	str	r2, [sp, #4]
 80119b6:	9b01      	ldr	r3, [sp, #4]
 80119b8:	61a3      	str	r3, [r4, #24]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	bf14      	ite	ne
 80119be:	2202      	movne	r2, #2
 80119c0:	2201      	moveq	r2, #1
 80119c2:	6122      	str	r2, [r4, #16]
 80119c4:	b1d5      	cbz	r5, 80119fc <__d2b+0x98>
 80119c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80119ca:	4405      	add	r5, r0
 80119cc:	f8c9 5000 	str.w	r5, [r9]
 80119d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80119d4:	f8c8 0000 	str.w	r0, [r8]
 80119d8:	4620      	mov	r0, r4
 80119da:	b003      	add	sp, #12
 80119dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80119e4:	e7d5      	b.n	8011992 <__d2b+0x2e>
 80119e6:	6161      	str	r1, [r4, #20]
 80119e8:	e7e5      	b.n	80119b6 <__d2b+0x52>
 80119ea:	a801      	add	r0, sp, #4
 80119ec:	f7ff fcde 	bl	80113ac <__lo0bits>
 80119f0:	9b01      	ldr	r3, [sp, #4]
 80119f2:	6163      	str	r3, [r4, #20]
 80119f4:	2201      	movs	r2, #1
 80119f6:	6122      	str	r2, [r4, #16]
 80119f8:	3020      	adds	r0, #32
 80119fa:	e7e3      	b.n	80119c4 <__d2b+0x60>
 80119fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011a00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011a04:	f8c9 0000 	str.w	r0, [r9]
 8011a08:	6918      	ldr	r0, [r3, #16]
 8011a0a:	f7ff fcaf 	bl	801136c <__hi0bits>
 8011a0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011a12:	e7df      	b.n	80119d4 <__d2b+0x70>
 8011a14:	08013078 	.word	0x08013078
 8011a18:	08013104 	.word	0x08013104

08011a1c <__ratio>:
 8011a1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a20:	4688      	mov	r8, r1
 8011a22:	4669      	mov	r1, sp
 8011a24:	4681      	mov	r9, r0
 8011a26:	f7ff ff4d 	bl	80118c4 <__b2d>
 8011a2a:	a901      	add	r1, sp, #4
 8011a2c:	4640      	mov	r0, r8
 8011a2e:	ec55 4b10 	vmov	r4, r5, d0
 8011a32:	f7ff ff47 	bl	80118c4 <__b2d>
 8011a36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011a3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011a3e:	eba3 0c02 	sub.w	ip, r3, r2
 8011a42:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011a46:	1a9b      	subs	r3, r3, r2
 8011a48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011a4c:	ec51 0b10 	vmov	r0, r1, d0
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	bfd6      	itet	le
 8011a54:	460a      	movle	r2, r1
 8011a56:	462a      	movgt	r2, r5
 8011a58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011a5c:	468b      	mov	fp, r1
 8011a5e:	462f      	mov	r7, r5
 8011a60:	bfd4      	ite	le
 8011a62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011a66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	ee10 2a10 	vmov	r2, s0
 8011a70:	465b      	mov	r3, fp
 8011a72:	4639      	mov	r1, r7
 8011a74:	f7ee ff1a 	bl	80008ac <__aeabi_ddiv>
 8011a78:	ec41 0b10 	vmov	d0, r0, r1
 8011a7c:	b003      	add	sp, #12
 8011a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a82 <__copybits>:
 8011a82:	3901      	subs	r1, #1
 8011a84:	b570      	push	{r4, r5, r6, lr}
 8011a86:	1149      	asrs	r1, r1, #5
 8011a88:	6914      	ldr	r4, [r2, #16]
 8011a8a:	3101      	adds	r1, #1
 8011a8c:	f102 0314 	add.w	r3, r2, #20
 8011a90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011a94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011a98:	1f05      	subs	r5, r0, #4
 8011a9a:	42a3      	cmp	r3, r4
 8011a9c:	d30c      	bcc.n	8011ab8 <__copybits+0x36>
 8011a9e:	1aa3      	subs	r3, r4, r2
 8011aa0:	3b11      	subs	r3, #17
 8011aa2:	f023 0303 	bic.w	r3, r3, #3
 8011aa6:	3211      	adds	r2, #17
 8011aa8:	42a2      	cmp	r2, r4
 8011aaa:	bf88      	it	hi
 8011aac:	2300      	movhi	r3, #0
 8011aae:	4418      	add	r0, r3
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	4288      	cmp	r0, r1
 8011ab4:	d305      	bcc.n	8011ac2 <__copybits+0x40>
 8011ab6:	bd70      	pop	{r4, r5, r6, pc}
 8011ab8:	f853 6b04 	ldr.w	r6, [r3], #4
 8011abc:	f845 6f04 	str.w	r6, [r5, #4]!
 8011ac0:	e7eb      	b.n	8011a9a <__copybits+0x18>
 8011ac2:	f840 3b04 	str.w	r3, [r0], #4
 8011ac6:	e7f4      	b.n	8011ab2 <__copybits+0x30>

08011ac8 <__any_on>:
 8011ac8:	f100 0214 	add.w	r2, r0, #20
 8011acc:	6900      	ldr	r0, [r0, #16]
 8011ace:	114b      	asrs	r3, r1, #5
 8011ad0:	4298      	cmp	r0, r3
 8011ad2:	b510      	push	{r4, lr}
 8011ad4:	db11      	blt.n	8011afa <__any_on+0x32>
 8011ad6:	dd0a      	ble.n	8011aee <__any_on+0x26>
 8011ad8:	f011 011f 	ands.w	r1, r1, #31
 8011adc:	d007      	beq.n	8011aee <__any_on+0x26>
 8011ade:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011ae2:	fa24 f001 	lsr.w	r0, r4, r1
 8011ae6:	fa00 f101 	lsl.w	r1, r0, r1
 8011aea:	428c      	cmp	r4, r1
 8011aec:	d10b      	bne.n	8011b06 <__any_on+0x3e>
 8011aee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011af2:	4293      	cmp	r3, r2
 8011af4:	d803      	bhi.n	8011afe <__any_on+0x36>
 8011af6:	2000      	movs	r0, #0
 8011af8:	bd10      	pop	{r4, pc}
 8011afa:	4603      	mov	r3, r0
 8011afc:	e7f7      	b.n	8011aee <__any_on+0x26>
 8011afe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b02:	2900      	cmp	r1, #0
 8011b04:	d0f5      	beq.n	8011af2 <__any_on+0x2a>
 8011b06:	2001      	movs	r0, #1
 8011b08:	e7f6      	b.n	8011af8 <__any_on+0x30>

08011b0a <_calloc_r>:
 8011b0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b0c:	fba1 2402 	umull	r2, r4, r1, r2
 8011b10:	b94c      	cbnz	r4, 8011b26 <_calloc_r+0x1c>
 8011b12:	4611      	mov	r1, r2
 8011b14:	9201      	str	r2, [sp, #4]
 8011b16:	f000 f87b 	bl	8011c10 <_malloc_r>
 8011b1a:	9a01      	ldr	r2, [sp, #4]
 8011b1c:	4605      	mov	r5, r0
 8011b1e:	b930      	cbnz	r0, 8011b2e <_calloc_r+0x24>
 8011b20:	4628      	mov	r0, r5
 8011b22:	b003      	add	sp, #12
 8011b24:	bd30      	pop	{r4, r5, pc}
 8011b26:	220c      	movs	r2, #12
 8011b28:	6002      	str	r2, [r0, #0]
 8011b2a:	2500      	movs	r5, #0
 8011b2c:	e7f8      	b.n	8011b20 <_calloc_r+0x16>
 8011b2e:	4621      	mov	r1, r4
 8011b30:	f7fc fbc4 	bl	800e2bc <memset>
 8011b34:	e7f4      	b.n	8011b20 <_calloc_r+0x16>
	...

08011b38 <_free_r>:
 8011b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b3a:	2900      	cmp	r1, #0
 8011b3c:	d044      	beq.n	8011bc8 <_free_r+0x90>
 8011b3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b42:	9001      	str	r0, [sp, #4]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	f1a1 0404 	sub.w	r4, r1, #4
 8011b4a:	bfb8      	it	lt
 8011b4c:	18e4      	addlt	r4, r4, r3
 8011b4e:	f000 fab3 	bl	80120b8 <__malloc_lock>
 8011b52:	4a1e      	ldr	r2, [pc, #120]	; (8011bcc <_free_r+0x94>)
 8011b54:	9801      	ldr	r0, [sp, #4]
 8011b56:	6813      	ldr	r3, [r2, #0]
 8011b58:	b933      	cbnz	r3, 8011b68 <_free_r+0x30>
 8011b5a:	6063      	str	r3, [r4, #4]
 8011b5c:	6014      	str	r4, [r2, #0]
 8011b5e:	b003      	add	sp, #12
 8011b60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b64:	f000 baae 	b.w	80120c4 <__malloc_unlock>
 8011b68:	42a3      	cmp	r3, r4
 8011b6a:	d908      	bls.n	8011b7e <_free_r+0x46>
 8011b6c:	6825      	ldr	r5, [r4, #0]
 8011b6e:	1961      	adds	r1, r4, r5
 8011b70:	428b      	cmp	r3, r1
 8011b72:	bf01      	itttt	eq
 8011b74:	6819      	ldreq	r1, [r3, #0]
 8011b76:	685b      	ldreq	r3, [r3, #4]
 8011b78:	1949      	addeq	r1, r1, r5
 8011b7a:	6021      	streq	r1, [r4, #0]
 8011b7c:	e7ed      	b.n	8011b5a <_free_r+0x22>
 8011b7e:	461a      	mov	r2, r3
 8011b80:	685b      	ldr	r3, [r3, #4]
 8011b82:	b10b      	cbz	r3, 8011b88 <_free_r+0x50>
 8011b84:	42a3      	cmp	r3, r4
 8011b86:	d9fa      	bls.n	8011b7e <_free_r+0x46>
 8011b88:	6811      	ldr	r1, [r2, #0]
 8011b8a:	1855      	adds	r5, r2, r1
 8011b8c:	42a5      	cmp	r5, r4
 8011b8e:	d10b      	bne.n	8011ba8 <_free_r+0x70>
 8011b90:	6824      	ldr	r4, [r4, #0]
 8011b92:	4421      	add	r1, r4
 8011b94:	1854      	adds	r4, r2, r1
 8011b96:	42a3      	cmp	r3, r4
 8011b98:	6011      	str	r1, [r2, #0]
 8011b9a:	d1e0      	bne.n	8011b5e <_free_r+0x26>
 8011b9c:	681c      	ldr	r4, [r3, #0]
 8011b9e:	685b      	ldr	r3, [r3, #4]
 8011ba0:	6053      	str	r3, [r2, #4]
 8011ba2:	4421      	add	r1, r4
 8011ba4:	6011      	str	r1, [r2, #0]
 8011ba6:	e7da      	b.n	8011b5e <_free_r+0x26>
 8011ba8:	d902      	bls.n	8011bb0 <_free_r+0x78>
 8011baa:	230c      	movs	r3, #12
 8011bac:	6003      	str	r3, [r0, #0]
 8011bae:	e7d6      	b.n	8011b5e <_free_r+0x26>
 8011bb0:	6825      	ldr	r5, [r4, #0]
 8011bb2:	1961      	adds	r1, r4, r5
 8011bb4:	428b      	cmp	r3, r1
 8011bb6:	bf04      	itt	eq
 8011bb8:	6819      	ldreq	r1, [r3, #0]
 8011bba:	685b      	ldreq	r3, [r3, #4]
 8011bbc:	6063      	str	r3, [r4, #4]
 8011bbe:	bf04      	itt	eq
 8011bc0:	1949      	addeq	r1, r1, r5
 8011bc2:	6021      	streq	r1, [r4, #0]
 8011bc4:	6054      	str	r4, [r2, #4]
 8011bc6:	e7ca      	b.n	8011b5e <_free_r+0x26>
 8011bc8:	b003      	add	sp, #12
 8011bca:	bd30      	pop	{r4, r5, pc}
 8011bcc:	20000740 	.word	0x20000740

08011bd0 <sbrk_aligned>:
 8011bd0:	b570      	push	{r4, r5, r6, lr}
 8011bd2:	4e0e      	ldr	r6, [pc, #56]	; (8011c0c <sbrk_aligned+0x3c>)
 8011bd4:	460c      	mov	r4, r1
 8011bd6:	6831      	ldr	r1, [r6, #0]
 8011bd8:	4605      	mov	r5, r0
 8011bda:	b911      	cbnz	r1, 8011be2 <sbrk_aligned+0x12>
 8011bdc:	f000 f9f0 	bl	8011fc0 <_sbrk_r>
 8011be0:	6030      	str	r0, [r6, #0]
 8011be2:	4621      	mov	r1, r4
 8011be4:	4628      	mov	r0, r5
 8011be6:	f000 f9eb 	bl	8011fc0 <_sbrk_r>
 8011bea:	1c43      	adds	r3, r0, #1
 8011bec:	d00a      	beq.n	8011c04 <sbrk_aligned+0x34>
 8011bee:	1cc4      	adds	r4, r0, #3
 8011bf0:	f024 0403 	bic.w	r4, r4, #3
 8011bf4:	42a0      	cmp	r0, r4
 8011bf6:	d007      	beq.n	8011c08 <sbrk_aligned+0x38>
 8011bf8:	1a21      	subs	r1, r4, r0
 8011bfa:	4628      	mov	r0, r5
 8011bfc:	f000 f9e0 	bl	8011fc0 <_sbrk_r>
 8011c00:	3001      	adds	r0, #1
 8011c02:	d101      	bne.n	8011c08 <sbrk_aligned+0x38>
 8011c04:	f04f 34ff 	mov.w	r4, #4294967295
 8011c08:	4620      	mov	r0, r4
 8011c0a:	bd70      	pop	{r4, r5, r6, pc}
 8011c0c:	20000744 	.word	0x20000744

08011c10 <_malloc_r>:
 8011c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c14:	1ccd      	adds	r5, r1, #3
 8011c16:	f025 0503 	bic.w	r5, r5, #3
 8011c1a:	3508      	adds	r5, #8
 8011c1c:	2d0c      	cmp	r5, #12
 8011c1e:	bf38      	it	cc
 8011c20:	250c      	movcc	r5, #12
 8011c22:	2d00      	cmp	r5, #0
 8011c24:	4607      	mov	r7, r0
 8011c26:	db01      	blt.n	8011c2c <_malloc_r+0x1c>
 8011c28:	42a9      	cmp	r1, r5
 8011c2a:	d905      	bls.n	8011c38 <_malloc_r+0x28>
 8011c2c:	230c      	movs	r3, #12
 8011c2e:	603b      	str	r3, [r7, #0]
 8011c30:	2600      	movs	r6, #0
 8011c32:	4630      	mov	r0, r6
 8011c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c38:	4e2e      	ldr	r6, [pc, #184]	; (8011cf4 <_malloc_r+0xe4>)
 8011c3a:	f000 fa3d 	bl	80120b8 <__malloc_lock>
 8011c3e:	6833      	ldr	r3, [r6, #0]
 8011c40:	461c      	mov	r4, r3
 8011c42:	bb34      	cbnz	r4, 8011c92 <_malloc_r+0x82>
 8011c44:	4629      	mov	r1, r5
 8011c46:	4638      	mov	r0, r7
 8011c48:	f7ff ffc2 	bl	8011bd0 <sbrk_aligned>
 8011c4c:	1c43      	adds	r3, r0, #1
 8011c4e:	4604      	mov	r4, r0
 8011c50:	d14d      	bne.n	8011cee <_malloc_r+0xde>
 8011c52:	6834      	ldr	r4, [r6, #0]
 8011c54:	4626      	mov	r6, r4
 8011c56:	2e00      	cmp	r6, #0
 8011c58:	d140      	bne.n	8011cdc <_malloc_r+0xcc>
 8011c5a:	6823      	ldr	r3, [r4, #0]
 8011c5c:	4631      	mov	r1, r6
 8011c5e:	4638      	mov	r0, r7
 8011c60:	eb04 0803 	add.w	r8, r4, r3
 8011c64:	f000 f9ac 	bl	8011fc0 <_sbrk_r>
 8011c68:	4580      	cmp	r8, r0
 8011c6a:	d13a      	bne.n	8011ce2 <_malloc_r+0xd2>
 8011c6c:	6821      	ldr	r1, [r4, #0]
 8011c6e:	3503      	adds	r5, #3
 8011c70:	1a6d      	subs	r5, r5, r1
 8011c72:	f025 0503 	bic.w	r5, r5, #3
 8011c76:	3508      	adds	r5, #8
 8011c78:	2d0c      	cmp	r5, #12
 8011c7a:	bf38      	it	cc
 8011c7c:	250c      	movcc	r5, #12
 8011c7e:	4629      	mov	r1, r5
 8011c80:	4638      	mov	r0, r7
 8011c82:	f7ff ffa5 	bl	8011bd0 <sbrk_aligned>
 8011c86:	3001      	adds	r0, #1
 8011c88:	d02b      	beq.n	8011ce2 <_malloc_r+0xd2>
 8011c8a:	6823      	ldr	r3, [r4, #0]
 8011c8c:	442b      	add	r3, r5
 8011c8e:	6023      	str	r3, [r4, #0]
 8011c90:	e00e      	b.n	8011cb0 <_malloc_r+0xa0>
 8011c92:	6822      	ldr	r2, [r4, #0]
 8011c94:	1b52      	subs	r2, r2, r5
 8011c96:	d41e      	bmi.n	8011cd6 <_malloc_r+0xc6>
 8011c98:	2a0b      	cmp	r2, #11
 8011c9a:	d916      	bls.n	8011cca <_malloc_r+0xba>
 8011c9c:	1961      	adds	r1, r4, r5
 8011c9e:	42a3      	cmp	r3, r4
 8011ca0:	6025      	str	r5, [r4, #0]
 8011ca2:	bf18      	it	ne
 8011ca4:	6059      	strne	r1, [r3, #4]
 8011ca6:	6863      	ldr	r3, [r4, #4]
 8011ca8:	bf08      	it	eq
 8011caa:	6031      	streq	r1, [r6, #0]
 8011cac:	5162      	str	r2, [r4, r5]
 8011cae:	604b      	str	r3, [r1, #4]
 8011cb0:	4638      	mov	r0, r7
 8011cb2:	f104 060b 	add.w	r6, r4, #11
 8011cb6:	f000 fa05 	bl	80120c4 <__malloc_unlock>
 8011cba:	f026 0607 	bic.w	r6, r6, #7
 8011cbe:	1d23      	adds	r3, r4, #4
 8011cc0:	1af2      	subs	r2, r6, r3
 8011cc2:	d0b6      	beq.n	8011c32 <_malloc_r+0x22>
 8011cc4:	1b9b      	subs	r3, r3, r6
 8011cc6:	50a3      	str	r3, [r4, r2]
 8011cc8:	e7b3      	b.n	8011c32 <_malloc_r+0x22>
 8011cca:	6862      	ldr	r2, [r4, #4]
 8011ccc:	42a3      	cmp	r3, r4
 8011cce:	bf0c      	ite	eq
 8011cd0:	6032      	streq	r2, [r6, #0]
 8011cd2:	605a      	strne	r2, [r3, #4]
 8011cd4:	e7ec      	b.n	8011cb0 <_malloc_r+0xa0>
 8011cd6:	4623      	mov	r3, r4
 8011cd8:	6864      	ldr	r4, [r4, #4]
 8011cda:	e7b2      	b.n	8011c42 <_malloc_r+0x32>
 8011cdc:	4634      	mov	r4, r6
 8011cde:	6876      	ldr	r6, [r6, #4]
 8011ce0:	e7b9      	b.n	8011c56 <_malloc_r+0x46>
 8011ce2:	230c      	movs	r3, #12
 8011ce4:	603b      	str	r3, [r7, #0]
 8011ce6:	4638      	mov	r0, r7
 8011ce8:	f000 f9ec 	bl	80120c4 <__malloc_unlock>
 8011cec:	e7a1      	b.n	8011c32 <_malloc_r+0x22>
 8011cee:	6025      	str	r5, [r4, #0]
 8011cf0:	e7de      	b.n	8011cb0 <_malloc_r+0xa0>
 8011cf2:	bf00      	nop
 8011cf4:	20000740 	.word	0x20000740

08011cf8 <__ssputs_r>:
 8011cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cfc:	688e      	ldr	r6, [r1, #8]
 8011cfe:	429e      	cmp	r6, r3
 8011d00:	4682      	mov	sl, r0
 8011d02:	460c      	mov	r4, r1
 8011d04:	4690      	mov	r8, r2
 8011d06:	461f      	mov	r7, r3
 8011d08:	d838      	bhi.n	8011d7c <__ssputs_r+0x84>
 8011d0a:	898a      	ldrh	r2, [r1, #12]
 8011d0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011d10:	d032      	beq.n	8011d78 <__ssputs_r+0x80>
 8011d12:	6825      	ldr	r5, [r4, #0]
 8011d14:	6909      	ldr	r1, [r1, #16]
 8011d16:	eba5 0901 	sub.w	r9, r5, r1
 8011d1a:	6965      	ldr	r5, [r4, #20]
 8011d1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011d24:	3301      	adds	r3, #1
 8011d26:	444b      	add	r3, r9
 8011d28:	106d      	asrs	r5, r5, #1
 8011d2a:	429d      	cmp	r5, r3
 8011d2c:	bf38      	it	cc
 8011d2e:	461d      	movcc	r5, r3
 8011d30:	0553      	lsls	r3, r2, #21
 8011d32:	d531      	bpl.n	8011d98 <__ssputs_r+0xa0>
 8011d34:	4629      	mov	r1, r5
 8011d36:	f7ff ff6b 	bl	8011c10 <_malloc_r>
 8011d3a:	4606      	mov	r6, r0
 8011d3c:	b950      	cbnz	r0, 8011d54 <__ssputs_r+0x5c>
 8011d3e:	230c      	movs	r3, #12
 8011d40:	f8ca 3000 	str.w	r3, [sl]
 8011d44:	89a3      	ldrh	r3, [r4, #12]
 8011d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d4a:	81a3      	strh	r3, [r4, #12]
 8011d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d54:	6921      	ldr	r1, [r4, #16]
 8011d56:	464a      	mov	r2, r9
 8011d58:	f7fc faa2 	bl	800e2a0 <memcpy>
 8011d5c:	89a3      	ldrh	r3, [r4, #12]
 8011d5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d66:	81a3      	strh	r3, [r4, #12]
 8011d68:	6126      	str	r6, [r4, #16]
 8011d6a:	6165      	str	r5, [r4, #20]
 8011d6c:	444e      	add	r6, r9
 8011d6e:	eba5 0509 	sub.w	r5, r5, r9
 8011d72:	6026      	str	r6, [r4, #0]
 8011d74:	60a5      	str	r5, [r4, #8]
 8011d76:	463e      	mov	r6, r7
 8011d78:	42be      	cmp	r6, r7
 8011d7a:	d900      	bls.n	8011d7e <__ssputs_r+0x86>
 8011d7c:	463e      	mov	r6, r7
 8011d7e:	6820      	ldr	r0, [r4, #0]
 8011d80:	4632      	mov	r2, r6
 8011d82:	4641      	mov	r1, r8
 8011d84:	f000 f97e 	bl	8012084 <memmove>
 8011d88:	68a3      	ldr	r3, [r4, #8]
 8011d8a:	1b9b      	subs	r3, r3, r6
 8011d8c:	60a3      	str	r3, [r4, #8]
 8011d8e:	6823      	ldr	r3, [r4, #0]
 8011d90:	4433      	add	r3, r6
 8011d92:	6023      	str	r3, [r4, #0]
 8011d94:	2000      	movs	r0, #0
 8011d96:	e7db      	b.n	8011d50 <__ssputs_r+0x58>
 8011d98:	462a      	mov	r2, r5
 8011d9a:	f000 f999 	bl	80120d0 <_realloc_r>
 8011d9e:	4606      	mov	r6, r0
 8011da0:	2800      	cmp	r0, #0
 8011da2:	d1e1      	bne.n	8011d68 <__ssputs_r+0x70>
 8011da4:	6921      	ldr	r1, [r4, #16]
 8011da6:	4650      	mov	r0, sl
 8011da8:	f7ff fec6 	bl	8011b38 <_free_r>
 8011dac:	e7c7      	b.n	8011d3e <__ssputs_r+0x46>
	...

08011db0 <_svfiprintf_r>:
 8011db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011db4:	4698      	mov	r8, r3
 8011db6:	898b      	ldrh	r3, [r1, #12]
 8011db8:	061b      	lsls	r3, r3, #24
 8011dba:	b09d      	sub	sp, #116	; 0x74
 8011dbc:	4607      	mov	r7, r0
 8011dbe:	460d      	mov	r5, r1
 8011dc0:	4614      	mov	r4, r2
 8011dc2:	d50e      	bpl.n	8011de2 <_svfiprintf_r+0x32>
 8011dc4:	690b      	ldr	r3, [r1, #16]
 8011dc6:	b963      	cbnz	r3, 8011de2 <_svfiprintf_r+0x32>
 8011dc8:	2140      	movs	r1, #64	; 0x40
 8011dca:	f7ff ff21 	bl	8011c10 <_malloc_r>
 8011dce:	6028      	str	r0, [r5, #0]
 8011dd0:	6128      	str	r0, [r5, #16]
 8011dd2:	b920      	cbnz	r0, 8011dde <_svfiprintf_r+0x2e>
 8011dd4:	230c      	movs	r3, #12
 8011dd6:	603b      	str	r3, [r7, #0]
 8011dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ddc:	e0d1      	b.n	8011f82 <_svfiprintf_r+0x1d2>
 8011dde:	2340      	movs	r3, #64	; 0x40
 8011de0:	616b      	str	r3, [r5, #20]
 8011de2:	2300      	movs	r3, #0
 8011de4:	9309      	str	r3, [sp, #36]	; 0x24
 8011de6:	2320      	movs	r3, #32
 8011de8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8011df0:	2330      	movs	r3, #48	; 0x30
 8011df2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011f9c <_svfiprintf_r+0x1ec>
 8011df6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011dfa:	f04f 0901 	mov.w	r9, #1
 8011dfe:	4623      	mov	r3, r4
 8011e00:	469a      	mov	sl, r3
 8011e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e06:	b10a      	cbz	r2, 8011e0c <_svfiprintf_r+0x5c>
 8011e08:	2a25      	cmp	r2, #37	; 0x25
 8011e0a:	d1f9      	bne.n	8011e00 <_svfiprintf_r+0x50>
 8011e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8011e10:	d00b      	beq.n	8011e2a <_svfiprintf_r+0x7a>
 8011e12:	465b      	mov	r3, fp
 8011e14:	4622      	mov	r2, r4
 8011e16:	4629      	mov	r1, r5
 8011e18:	4638      	mov	r0, r7
 8011e1a:	f7ff ff6d 	bl	8011cf8 <__ssputs_r>
 8011e1e:	3001      	adds	r0, #1
 8011e20:	f000 80aa 	beq.w	8011f78 <_svfiprintf_r+0x1c8>
 8011e24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e26:	445a      	add	r2, fp
 8011e28:	9209      	str	r2, [sp, #36]	; 0x24
 8011e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	f000 80a2 	beq.w	8011f78 <_svfiprintf_r+0x1c8>
 8011e34:	2300      	movs	r3, #0
 8011e36:	f04f 32ff 	mov.w	r2, #4294967295
 8011e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e3e:	f10a 0a01 	add.w	sl, sl, #1
 8011e42:	9304      	str	r3, [sp, #16]
 8011e44:	9307      	str	r3, [sp, #28]
 8011e46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e4a:	931a      	str	r3, [sp, #104]	; 0x68
 8011e4c:	4654      	mov	r4, sl
 8011e4e:	2205      	movs	r2, #5
 8011e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e54:	4851      	ldr	r0, [pc, #324]	; (8011f9c <_svfiprintf_r+0x1ec>)
 8011e56:	f7ee f9f3 	bl	8000240 <memchr>
 8011e5a:	9a04      	ldr	r2, [sp, #16]
 8011e5c:	b9d8      	cbnz	r0, 8011e96 <_svfiprintf_r+0xe6>
 8011e5e:	06d0      	lsls	r0, r2, #27
 8011e60:	bf44      	itt	mi
 8011e62:	2320      	movmi	r3, #32
 8011e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e68:	0711      	lsls	r1, r2, #28
 8011e6a:	bf44      	itt	mi
 8011e6c:	232b      	movmi	r3, #43	; 0x2b
 8011e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e72:	f89a 3000 	ldrb.w	r3, [sl]
 8011e76:	2b2a      	cmp	r3, #42	; 0x2a
 8011e78:	d015      	beq.n	8011ea6 <_svfiprintf_r+0xf6>
 8011e7a:	9a07      	ldr	r2, [sp, #28]
 8011e7c:	4654      	mov	r4, sl
 8011e7e:	2000      	movs	r0, #0
 8011e80:	f04f 0c0a 	mov.w	ip, #10
 8011e84:	4621      	mov	r1, r4
 8011e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e8a:	3b30      	subs	r3, #48	; 0x30
 8011e8c:	2b09      	cmp	r3, #9
 8011e8e:	d94e      	bls.n	8011f2e <_svfiprintf_r+0x17e>
 8011e90:	b1b0      	cbz	r0, 8011ec0 <_svfiprintf_r+0x110>
 8011e92:	9207      	str	r2, [sp, #28]
 8011e94:	e014      	b.n	8011ec0 <_svfiprintf_r+0x110>
 8011e96:	eba0 0308 	sub.w	r3, r0, r8
 8011e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8011e9e:	4313      	orrs	r3, r2
 8011ea0:	9304      	str	r3, [sp, #16]
 8011ea2:	46a2      	mov	sl, r4
 8011ea4:	e7d2      	b.n	8011e4c <_svfiprintf_r+0x9c>
 8011ea6:	9b03      	ldr	r3, [sp, #12]
 8011ea8:	1d19      	adds	r1, r3, #4
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	9103      	str	r1, [sp, #12]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	bfbb      	ittet	lt
 8011eb2:	425b      	neglt	r3, r3
 8011eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8011eb8:	9307      	strge	r3, [sp, #28]
 8011eba:	9307      	strlt	r3, [sp, #28]
 8011ebc:	bfb8      	it	lt
 8011ebe:	9204      	strlt	r2, [sp, #16]
 8011ec0:	7823      	ldrb	r3, [r4, #0]
 8011ec2:	2b2e      	cmp	r3, #46	; 0x2e
 8011ec4:	d10c      	bne.n	8011ee0 <_svfiprintf_r+0x130>
 8011ec6:	7863      	ldrb	r3, [r4, #1]
 8011ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8011eca:	d135      	bne.n	8011f38 <_svfiprintf_r+0x188>
 8011ecc:	9b03      	ldr	r3, [sp, #12]
 8011ece:	1d1a      	adds	r2, r3, #4
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	9203      	str	r2, [sp, #12]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	bfb8      	it	lt
 8011ed8:	f04f 33ff 	movlt.w	r3, #4294967295
 8011edc:	3402      	adds	r4, #2
 8011ede:	9305      	str	r3, [sp, #20]
 8011ee0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011fac <_svfiprintf_r+0x1fc>
 8011ee4:	7821      	ldrb	r1, [r4, #0]
 8011ee6:	2203      	movs	r2, #3
 8011ee8:	4650      	mov	r0, sl
 8011eea:	f7ee f9a9 	bl	8000240 <memchr>
 8011eee:	b140      	cbz	r0, 8011f02 <_svfiprintf_r+0x152>
 8011ef0:	2340      	movs	r3, #64	; 0x40
 8011ef2:	eba0 000a 	sub.w	r0, r0, sl
 8011ef6:	fa03 f000 	lsl.w	r0, r3, r0
 8011efa:	9b04      	ldr	r3, [sp, #16]
 8011efc:	4303      	orrs	r3, r0
 8011efe:	3401      	adds	r4, #1
 8011f00:	9304      	str	r3, [sp, #16]
 8011f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f06:	4826      	ldr	r0, [pc, #152]	; (8011fa0 <_svfiprintf_r+0x1f0>)
 8011f08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f0c:	2206      	movs	r2, #6
 8011f0e:	f7ee f997 	bl	8000240 <memchr>
 8011f12:	2800      	cmp	r0, #0
 8011f14:	d038      	beq.n	8011f88 <_svfiprintf_r+0x1d8>
 8011f16:	4b23      	ldr	r3, [pc, #140]	; (8011fa4 <_svfiprintf_r+0x1f4>)
 8011f18:	bb1b      	cbnz	r3, 8011f62 <_svfiprintf_r+0x1b2>
 8011f1a:	9b03      	ldr	r3, [sp, #12]
 8011f1c:	3307      	adds	r3, #7
 8011f1e:	f023 0307 	bic.w	r3, r3, #7
 8011f22:	3308      	adds	r3, #8
 8011f24:	9303      	str	r3, [sp, #12]
 8011f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f28:	4433      	add	r3, r6
 8011f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8011f2c:	e767      	b.n	8011dfe <_svfiprintf_r+0x4e>
 8011f2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f32:	460c      	mov	r4, r1
 8011f34:	2001      	movs	r0, #1
 8011f36:	e7a5      	b.n	8011e84 <_svfiprintf_r+0xd4>
 8011f38:	2300      	movs	r3, #0
 8011f3a:	3401      	adds	r4, #1
 8011f3c:	9305      	str	r3, [sp, #20]
 8011f3e:	4619      	mov	r1, r3
 8011f40:	f04f 0c0a 	mov.w	ip, #10
 8011f44:	4620      	mov	r0, r4
 8011f46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f4a:	3a30      	subs	r2, #48	; 0x30
 8011f4c:	2a09      	cmp	r2, #9
 8011f4e:	d903      	bls.n	8011f58 <_svfiprintf_r+0x1a8>
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d0c5      	beq.n	8011ee0 <_svfiprintf_r+0x130>
 8011f54:	9105      	str	r1, [sp, #20]
 8011f56:	e7c3      	b.n	8011ee0 <_svfiprintf_r+0x130>
 8011f58:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f5c:	4604      	mov	r4, r0
 8011f5e:	2301      	movs	r3, #1
 8011f60:	e7f0      	b.n	8011f44 <_svfiprintf_r+0x194>
 8011f62:	ab03      	add	r3, sp, #12
 8011f64:	9300      	str	r3, [sp, #0]
 8011f66:	462a      	mov	r2, r5
 8011f68:	4b0f      	ldr	r3, [pc, #60]	; (8011fa8 <_svfiprintf_r+0x1f8>)
 8011f6a:	a904      	add	r1, sp, #16
 8011f6c:	4638      	mov	r0, r7
 8011f6e:	f7fc fa4d 	bl	800e40c <_printf_float>
 8011f72:	1c42      	adds	r2, r0, #1
 8011f74:	4606      	mov	r6, r0
 8011f76:	d1d6      	bne.n	8011f26 <_svfiprintf_r+0x176>
 8011f78:	89ab      	ldrh	r3, [r5, #12]
 8011f7a:	065b      	lsls	r3, r3, #25
 8011f7c:	f53f af2c 	bmi.w	8011dd8 <_svfiprintf_r+0x28>
 8011f80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f82:	b01d      	add	sp, #116	; 0x74
 8011f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f88:	ab03      	add	r3, sp, #12
 8011f8a:	9300      	str	r3, [sp, #0]
 8011f8c:	462a      	mov	r2, r5
 8011f8e:	4b06      	ldr	r3, [pc, #24]	; (8011fa8 <_svfiprintf_r+0x1f8>)
 8011f90:	a904      	add	r1, sp, #16
 8011f92:	4638      	mov	r0, r7
 8011f94:	f7fc fcde 	bl	800e954 <_printf_i>
 8011f98:	e7eb      	b.n	8011f72 <_svfiprintf_r+0x1c2>
 8011f9a:	bf00      	nop
 8011f9c:	0801325c 	.word	0x0801325c
 8011fa0:	08013266 	.word	0x08013266
 8011fa4:	0800e40d 	.word	0x0800e40d
 8011fa8:	08011cf9 	.word	0x08011cf9
 8011fac:	08013262 	.word	0x08013262

08011fb0 <nan>:
 8011fb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011fb8 <nan+0x8>
 8011fb4:	4770      	bx	lr
 8011fb6:	bf00      	nop
 8011fb8:	00000000 	.word	0x00000000
 8011fbc:	7ff80000 	.word	0x7ff80000

08011fc0 <_sbrk_r>:
 8011fc0:	b538      	push	{r3, r4, r5, lr}
 8011fc2:	4d06      	ldr	r5, [pc, #24]	; (8011fdc <_sbrk_r+0x1c>)
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	4604      	mov	r4, r0
 8011fc8:	4608      	mov	r0, r1
 8011fca:	602b      	str	r3, [r5, #0]
 8011fcc:	f7ef fd6a 	bl	8001aa4 <_sbrk>
 8011fd0:	1c43      	adds	r3, r0, #1
 8011fd2:	d102      	bne.n	8011fda <_sbrk_r+0x1a>
 8011fd4:	682b      	ldr	r3, [r5, #0]
 8011fd6:	b103      	cbz	r3, 8011fda <_sbrk_r+0x1a>
 8011fd8:	6023      	str	r3, [r4, #0]
 8011fda:	bd38      	pop	{r3, r4, r5, pc}
 8011fdc:	20000748 	.word	0x20000748

08011fe0 <strncmp>:
 8011fe0:	b510      	push	{r4, lr}
 8011fe2:	b17a      	cbz	r2, 8012004 <strncmp+0x24>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	3901      	subs	r1, #1
 8011fe8:	1884      	adds	r4, r0, r2
 8011fea:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011fee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011ff2:	4290      	cmp	r0, r2
 8011ff4:	d101      	bne.n	8011ffa <strncmp+0x1a>
 8011ff6:	42a3      	cmp	r3, r4
 8011ff8:	d101      	bne.n	8011ffe <strncmp+0x1e>
 8011ffa:	1a80      	subs	r0, r0, r2
 8011ffc:	bd10      	pop	{r4, pc}
 8011ffe:	2800      	cmp	r0, #0
 8012000:	d1f3      	bne.n	8011fea <strncmp+0xa>
 8012002:	e7fa      	b.n	8011ffa <strncmp+0x1a>
 8012004:	4610      	mov	r0, r2
 8012006:	e7f9      	b.n	8011ffc <strncmp+0x1c>

08012008 <__ascii_wctomb>:
 8012008:	b149      	cbz	r1, 801201e <__ascii_wctomb+0x16>
 801200a:	2aff      	cmp	r2, #255	; 0xff
 801200c:	bf85      	ittet	hi
 801200e:	238a      	movhi	r3, #138	; 0x8a
 8012010:	6003      	strhi	r3, [r0, #0]
 8012012:	700a      	strbls	r2, [r1, #0]
 8012014:	f04f 30ff 	movhi.w	r0, #4294967295
 8012018:	bf98      	it	ls
 801201a:	2001      	movls	r0, #1
 801201c:	4770      	bx	lr
 801201e:	4608      	mov	r0, r1
 8012020:	4770      	bx	lr
	...

08012024 <__assert_func>:
 8012024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012026:	4614      	mov	r4, r2
 8012028:	461a      	mov	r2, r3
 801202a:	4b09      	ldr	r3, [pc, #36]	; (8012050 <__assert_func+0x2c>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	4605      	mov	r5, r0
 8012030:	68d8      	ldr	r0, [r3, #12]
 8012032:	b14c      	cbz	r4, 8012048 <__assert_func+0x24>
 8012034:	4b07      	ldr	r3, [pc, #28]	; (8012054 <__assert_func+0x30>)
 8012036:	9100      	str	r1, [sp, #0]
 8012038:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801203c:	4906      	ldr	r1, [pc, #24]	; (8012058 <__assert_func+0x34>)
 801203e:	462b      	mov	r3, r5
 8012040:	f000 f80e 	bl	8012060 <fiprintf>
 8012044:	f000 fa8c 	bl	8012560 <abort>
 8012048:	4b04      	ldr	r3, [pc, #16]	; (801205c <__assert_func+0x38>)
 801204a:	461c      	mov	r4, r3
 801204c:	e7f3      	b.n	8012036 <__assert_func+0x12>
 801204e:	bf00      	nop
 8012050:	200002c8 	.word	0x200002c8
 8012054:	0801326d 	.word	0x0801326d
 8012058:	0801327a 	.word	0x0801327a
 801205c:	080132a8 	.word	0x080132a8

08012060 <fiprintf>:
 8012060:	b40e      	push	{r1, r2, r3}
 8012062:	b503      	push	{r0, r1, lr}
 8012064:	4601      	mov	r1, r0
 8012066:	ab03      	add	r3, sp, #12
 8012068:	4805      	ldr	r0, [pc, #20]	; (8012080 <fiprintf+0x20>)
 801206a:	f853 2b04 	ldr.w	r2, [r3], #4
 801206e:	6800      	ldr	r0, [r0, #0]
 8012070:	9301      	str	r3, [sp, #4]
 8012072:	f000 f885 	bl	8012180 <_vfiprintf_r>
 8012076:	b002      	add	sp, #8
 8012078:	f85d eb04 	ldr.w	lr, [sp], #4
 801207c:	b003      	add	sp, #12
 801207e:	4770      	bx	lr
 8012080:	200002c8 	.word	0x200002c8

08012084 <memmove>:
 8012084:	4288      	cmp	r0, r1
 8012086:	b510      	push	{r4, lr}
 8012088:	eb01 0402 	add.w	r4, r1, r2
 801208c:	d902      	bls.n	8012094 <memmove+0x10>
 801208e:	4284      	cmp	r4, r0
 8012090:	4623      	mov	r3, r4
 8012092:	d807      	bhi.n	80120a4 <memmove+0x20>
 8012094:	1e43      	subs	r3, r0, #1
 8012096:	42a1      	cmp	r1, r4
 8012098:	d008      	beq.n	80120ac <memmove+0x28>
 801209a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801209e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80120a2:	e7f8      	b.n	8012096 <memmove+0x12>
 80120a4:	4402      	add	r2, r0
 80120a6:	4601      	mov	r1, r0
 80120a8:	428a      	cmp	r2, r1
 80120aa:	d100      	bne.n	80120ae <memmove+0x2a>
 80120ac:	bd10      	pop	{r4, pc}
 80120ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80120b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80120b6:	e7f7      	b.n	80120a8 <memmove+0x24>

080120b8 <__malloc_lock>:
 80120b8:	4801      	ldr	r0, [pc, #4]	; (80120c0 <__malloc_lock+0x8>)
 80120ba:	f000 bc11 	b.w	80128e0 <__retarget_lock_acquire_recursive>
 80120be:	bf00      	nop
 80120c0:	2000074c 	.word	0x2000074c

080120c4 <__malloc_unlock>:
 80120c4:	4801      	ldr	r0, [pc, #4]	; (80120cc <__malloc_unlock+0x8>)
 80120c6:	f000 bc0c 	b.w	80128e2 <__retarget_lock_release_recursive>
 80120ca:	bf00      	nop
 80120cc:	2000074c 	.word	0x2000074c

080120d0 <_realloc_r>:
 80120d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120d4:	4680      	mov	r8, r0
 80120d6:	4614      	mov	r4, r2
 80120d8:	460e      	mov	r6, r1
 80120da:	b921      	cbnz	r1, 80120e6 <_realloc_r+0x16>
 80120dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120e0:	4611      	mov	r1, r2
 80120e2:	f7ff bd95 	b.w	8011c10 <_malloc_r>
 80120e6:	b92a      	cbnz	r2, 80120f4 <_realloc_r+0x24>
 80120e8:	f7ff fd26 	bl	8011b38 <_free_r>
 80120ec:	4625      	mov	r5, r4
 80120ee:	4628      	mov	r0, r5
 80120f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120f4:	f000 fc5c 	bl	80129b0 <_malloc_usable_size_r>
 80120f8:	4284      	cmp	r4, r0
 80120fa:	4607      	mov	r7, r0
 80120fc:	d802      	bhi.n	8012104 <_realloc_r+0x34>
 80120fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012102:	d812      	bhi.n	801212a <_realloc_r+0x5a>
 8012104:	4621      	mov	r1, r4
 8012106:	4640      	mov	r0, r8
 8012108:	f7ff fd82 	bl	8011c10 <_malloc_r>
 801210c:	4605      	mov	r5, r0
 801210e:	2800      	cmp	r0, #0
 8012110:	d0ed      	beq.n	80120ee <_realloc_r+0x1e>
 8012112:	42bc      	cmp	r4, r7
 8012114:	4622      	mov	r2, r4
 8012116:	4631      	mov	r1, r6
 8012118:	bf28      	it	cs
 801211a:	463a      	movcs	r2, r7
 801211c:	f7fc f8c0 	bl	800e2a0 <memcpy>
 8012120:	4631      	mov	r1, r6
 8012122:	4640      	mov	r0, r8
 8012124:	f7ff fd08 	bl	8011b38 <_free_r>
 8012128:	e7e1      	b.n	80120ee <_realloc_r+0x1e>
 801212a:	4635      	mov	r5, r6
 801212c:	e7df      	b.n	80120ee <_realloc_r+0x1e>

0801212e <__sfputc_r>:
 801212e:	6893      	ldr	r3, [r2, #8]
 8012130:	3b01      	subs	r3, #1
 8012132:	2b00      	cmp	r3, #0
 8012134:	b410      	push	{r4}
 8012136:	6093      	str	r3, [r2, #8]
 8012138:	da08      	bge.n	801214c <__sfputc_r+0x1e>
 801213a:	6994      	ldr	r4, [r2, #24]
 801213c:	42a3      	cmp	r3, r4
 801213e:	db01      	blt.n	8012144 <__sfputc_r+0x16>
 8012140:	290a      	cmp	r1, #10
 8012142:	d103      	bne.n	801214c <__sfputc_r+0x1e>
 8012144:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012148:	f000 b94a 	b.w	80123e0 <__swbuf_r>
 801214c:	6813      	ldr	r3, [r2, #0]
 801214e:	1c58      	adds	r0, r3, #1
 8012150:	6010      	str	r0, [r2, #0]
 8012152:	7019      	strb	r1, [r3, #0]
 8012154:	4608      	mov	r0, r1
 8012156:	f85d 4b04 	ldr.w	r4, [sp], #4
 801215a:	4770      	bx	lr

0801215c <__sfputs_r>:
 801215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801215e:	4606      	mov	r6, r0
 8012160:	460f      	mov	r7, r1
 8012162:	4614      	mov	r4, r2
 8012164:	18d5      	adds	r5, r2, r3
 8012166:	42ac      	cmp	r4, r5
 8012168:	d101      	bne.n	801216e <__sfputs_r+0x12>
 801216a:	2000      	movs	r0, #0
 801216c:	e007      	b.n	801217e <__sfputs_r+0x22>
 801216e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012172:	463a      	mov	r2, r7
 8012174:	4630      	mov	r0, r6
 8012176:	f7ff ffda 	bl	801212e <__sfputc_r>
 801217a:	1c43      	adds	r3, r0, #1
 801217c:	d1f3      	bne.n	8012166 <__sfputs_r+0xa>
 801217e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012180 <_vfiprintf_r>:
 8012180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012184:	460d      	mov	r5, r1
 8012186:	b09d      	sub	sp, #116	; 0x74
 8012188:	4614      	mov	r4, r2
 801218a:	4698      	mov	r8, r3
 801218c:	4606      	mov	r6, r0
 801218e:	b118      	cbz	r0, 8012198 <_vfiprintf_r+0x18>
 8012190:	6983      	ldr	r3, [r0, #24]
 8012192:	b90b      	cbnz	r3, 8012198 <_vfiprintf_r+0x18>
 8012194:	f000 fb06 	bl	80127a4 <__sinit>
 8012198:	4b89      	ldr	r3, [pc, #548]	; (80123c0 <_vfiprintf_r+0x240>)
 801219a:	429d      	cmp	r5, r3
 801219c:	d11b      	bne.n	80121d6 <_vfiprintf_r+0x56>
 801219e:	6875      	ldr	r5, [r6, #4]
 80121a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121a2:	07d9      	lsls	r1, r3, #31
 80121a4:	d405      	bmi.n	80121b2 <_vfiprintf_r+0x32>
 80121a6:	89ab      	ldrh	r3, [r5, #12]
 80121a8:	059a      	lsls	r2, r3, #22
 80121aa:	d402      	bmi.n	80121b2 <_vfiprintf_r+0x32>
 80121ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121ae:	f000 fb97 	bl	80128e0 <__retarget_lock_acquire_recursive>
 80121b2:	89ab      	ldrh	r3, [r5, #12]
 80121b4:	071b      	lsls	r3, r3, #28
 80121b6:	d501      	bpl.n	80121bc <_vfiprintf_r+0x3c>
 80121b8:	692b      	ldr	r3, [r5, #16]
 80121ba:	b9eb      	cbnz	r3, 80121f8 <_vfiprintf_r+0x78>
 80121bc:	4629      	mov	r1, r5
 80121be:	4630      	mov	r0, r6
 80121c0:	f000 f960 	bl	8012484 <__swsetup_r>
 80121c4:	b1c0      	cbz	r0, 80121f8 <_vfiprintf_r+0x78>
 80121c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121c8:	07dc      	lsls	r4, r3, #31
 80121ca:	d50e      	bpl.n	80121ea <_vfiprintf_r+0x6a>
 80121cc:	f04f 30ff 	mov.w	r0, #4294967295
 80121d0:	b01d      	add	sp, #116	; 0x74
 80121d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121d6:	4b7b      	ldr	r3, [pc, #492]	; (80123c4 <_vfiprintf_r+0x244>)
 80121d8:	429d      	cmp	r5, r3
 80121da:	d101      	bne.n	80121e0 <_vfiprintf_r+0x60>
 80121dc:	68b5      	ldr	r5, [r6, #8]
 80121de:	e7df      	b.n	80121a0 <_vfiprintf_r+0x20>
 80121e0:	4b79      	ldr	r3, [pc, #484]	; (80123c8 <_vfiprintf_r+0x248>)
 80121e2:	429d      	cmp	r5, r3
 80121e4:	bf08      	it	eq
 80121e6:	68f5      	ldreq	r5, [r6, #12]
 80121e8:	e7da      	b.n	80121a0 <_vfiprintf_r+0x20>
 80121ea:	89ab      	ldrh	r3, [r5, #12]
 80121ec:	0598      	lsls	r0, r3, #22
 80121ee:	d4ed      	bmi.n	80121cc <_vfiprintf_r+0x4c>
 80121f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121f2:	f000 fb76 	bl	80128e2 <__retarget_lock_release_recursive>
 80121f6:	e7e9      	b.n	80121cc <_vfiprintf_r+0x4c>
 80121f8:	2300      	movs	r3, #0
 80121fa:	9309      	str	r3, [sp, #36]	; 0x24
 80121fc:	2320      	movs	r3, #32
 80121fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012202:	f8cd 800c 	str.w	r8, [sp, #12]
 8012206:	2330      	movs	r3, #48	; 0x30
 8012208:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80123cc <_vfiprintf_r+0x24c>
 801220c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012210:	f04f 0901 	mov.w	r9, #1
 8012214:	4623      	mov	r3, r4
 8012216:	469a      	mov	sl, r3
 8012218:	f813 2b01 	ldrb.w	r2, [r3], #1
 801221c:	b10a      	cbz	r2, 8012222 <_vfiprintf_r+0xa2>
 801221e:	2a25      	cmp	r2, #37	; 0x25
 8012220:	d1f9      	bne.n	8012216 <_vfiprintf_r+0x96>
 8012222:	ebba 0b04 	subs.w	fp, sl, r4
 8012226:	d00b      	beq.n	8012240 <_vfiprintf_r+0xc0>
 8012228:	465b      	mov	r3, fp
 801222a:	4622      	mov	r2, r4
 801222c:	4629      	mov	r1, r5
 801222e:	4630      	mov	r0, r6
 8012230:	f7ff ff94 	bl	801215c <__sfputs_r>
 8012234:	3001      	adds	r0, #1
 8012236:	f000 80aa 	beq.w	801238e <_vfiprintf_r+0x20e>
 801223a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801223c:	445a      	add	r2, fp
 801223e:	9209      	str	r2, [sp, #36]	; 0x24
 8012240:	f89a 3000 	ldrb.w	r3, [sl]
 8012244:	2b00      	cmp	r3, #0
 8012246:	f000 80a2 	beq.w	801238e <_vfiprintf_r+0x20e>
 801224a:	2300      	movs	r3, #0
 801224c:	f04f 32ff 	mov.w	r2, #4294967295
 8012250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012254:	f10a 0a01 	add.w	sl, sl, #1
 8012258:	9304      	str	r3, [sp, #16]
 801225a:	9307      	str	r3, [sp, #28]
 801225c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012260:	931a      	str	r3, [sp, #104]	; 0x68
 8012262:	4654      	mov	r4, sl
 8012264:	2205      	movs	r2, #5
 8012266:	f814 1b01 	ldrb.w	r1, [r4], #1
 801226a:	4858      	ldr	r0, [pc, #352]	; (80123cc <_vfiprintf_r+0x24c>)
 801226c:	f7ed ffe8 	bl	8000240 <memchr>
 8012270:	9a04      	ldr	r2, [sp, #16]
 8012272:	b9d8      	cbnz	r0, 80122ac <_vfiprintf_r+0x12c>
 8012274:	06d1      	lsls	r1, r2, #27
 8012276:	bf44      	itt	mi
 8012278:	2320      	movmi	r3, #32
 801227a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801227e:	0713      	lsls	r3, r2, #28
 8012280:	bf44      	itt	mi
 8012282:	232b      	movmi	r3, #43	; 0x2b
 8012284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012288:	f89a 3000 	ldrb.w	r3, [sl]
 801228c:	2b2a      	cmp	r3, #42	; 0x2a
 801228e:	d015      	beq.n	80122bc <_vfiprintf_r+0x13c>
 8012290:	9a07      	ldr	r2, [sp, #28]
 8012292:	4654      	mov	r4, sl
 8012294:	2000      	movs	r0, #0
 8012296:	f04f 0c0a 	mov.w	ip, #10
 801229a:	4621      	mov	r1, r4
 801229c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122a0:	3b30      	subs	r3, #48	; 0x30
 80122a2:	2b09      	cmp	r3, #9
 80122a4:	d94e      	bls.n	8012344 <_vfiprintf_r+0x1c4>
 80122a6:	b1b0      	cbz	r0, 80122d6 <_vfiprintf_r+0x156>
 80122a8:	9207      	str	r2, [sp, #28]
 80122aa:	e014      	b.n	80122d6 <_vfiprintf_r+0x156>
 80122ac:	eba0 0308 	sub.w	r3, r0, r8
 80122b0:	fa09 f303 	lsl.w	r3, r9, r3
 80122b4:	4313      	orrs	r3, r2
 80122b6:	9304      	str	r3, [sp, #16]
 80122b8:	46a2      	mov	sl, r4
 80122ba:	e7d2      	b.n	8012262 <_vfiprintf_r+0xe2>
 80122bc:	9b03      	ldr	r3, [sp, #12]
 80122be:	1d19      	adds	r1, r3, #4
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	9103      	str	r1, [sp, #12]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	bfbb      	ittet	lt
 80122c8:	425b      	neglt	r3, r3
 80122ca:	f042 0202 	orrlt.w	r2, r2, #2
 80122ce:	9307      	strge	r3, [sp, #28]
 80122d0:	9307      	strlt	r3, [sp, #28]
 80122d2:	bfb8      	it	lt
 80122d4:	9204      	strlt	r2, [sp, #16]
 80122d6:	7823      	ldrb	r3, [r4, #0]
 80122d8:	2b2e      	cmp	r3, #46	; 0x2e
 80122da:	d10c      	bne.n	80122f6 <_vfiprintf_r+0x176>
 80122dc:	7863      	ldrb	r3, [r4, #1]
 80122de:	2b2a      	cmp	r3, #42	; 0x2a
 80122e0:	d135      	bne.n	801234e <_vfiprintf_r+0x1ce>
 80122e2:	9b03      	ldr	r3, [sp, #12]
 80122e4:	1d1a      	adds	r2, r3, #4
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	9203      	str	r2, [sp, #12]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	bfb8      	it	lt
 80122ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80122f2:	3402      	adds	r4, #2
 80122f4:	9305      	str	r3, [sp, #20]
 80122f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80123dc <_vfiprintf_r+0x25c>
 80122fa:	7821      	ldrb	r1, [r4, #0]
 80122fc:	2203      	movs	r2, #3
 80122fe:	4650      	mov	r0, sl
 8012300:	f7ed ff9e 	bl	8000240 <memchr>
 8012304:	b140      	cbz	r0, 8012318 <_vfiprintf_r+0x198>
 8012306:	2340      	movs	r3, #64	; 0x40
 8012308:	eba0 000a 	sub.w	r0, r0, sl
 801230c:	fa03 f000 	lsl.w	r0, r3, r0
 8012310:	9b04      	ldr	r3, [sp, #16]
 8012312:	4303      	orrs	r3, r0
 8012314:	3401      	adds	r4, #1
 8012316:	9304      	str	r3, [sp, #16]
 8012318:	f814 1b01 	ldrb.w	r1, [r4], #1
 801231c:	482c      	ldr	r0, [pc, #176]	; (80123d0 <_vfiprintf_r+0x250>)
 801231e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012322:	2206      	movs	r2, #6
 8012324:	f7ed ff8c 	bl	8000240 <memchr>
 8012328:	2800      	cmp	r0, #0
 801232a:	d03f      	beq.n	80123ac <_vfiprintf_r+0x22c>
 801232c:	4b29      	ldr	r3, [pc, #164]	; (80123d4 <_vfiprintf_r+0x254>)
 801232e:	bb1b      	cbnz	r3, 8012378 <_vfiprintf_r+0x1f8>
 8012330:	9b03      	ldr	r3, [sp, #12]
 8012332:	3307      	adds	r3, #7
 8012334:	f023 0307 	bic.w	r3, r3, #7
 8012338:	3308      	adds	r3, #8
 801233a:	9303      	str	r3, [sp, #12]
 801233c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801233e:	443b      	add	r3, r7
 8012340:	9309      	str	r3, [sp, #36]	; 0x24
 8012342:	e767      	b.n	8012214 <_vfiprintf_r+0x94>
 8012344:	fb0c 3202 	mla	r2, ip, r2, r3
 8012348:	460c      	mov	r4, r1
 801234a:	2001      	movs	r0, #1
 801234c:	e7a5      	b.n	801229a <_vfiprintf_r+0x11a>
 801234e:	2300      	movs	r3, #0
 8012350:	3401      	adds	r4, #1
 8012352:	9305      	str	r3, [sp, #20]
 8012354:	4619      	mov	r1, r3
 8012356:	f04f 0c0a 	mov.w	ip, #10
 801235a:	4620      	mov	r0, r4
 801235c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012360:	3a30      	subs	r2, #48	; 0x30
 8012362:	2a09      	cmp	r2, #9
 8012364:	d903      	bls.n	801236e <_vfiprintf_r+0x1ee>
 8012366:	2b00      	cmp	r3, #0
 8012368:	d0c5      	beq.n	80122f6 <_vfiprintf_r+0x176>
 801236a:	9105      	str	r1, [sp, #20]
 801236c:	e7c3      	b.n	80122f6 <_vfiprintf_r+0x176>
 801236e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012372:	4604      	mov	r4, r0
 8012374:	2301      	movs	r3, #1
 8012376:	e7f0      	b.n	801235a <_vfiprintf_r+0x1da>
 8012378:	ab03      	add	r3, sp, #12
 801237a:	9300      	str	r3, [sp, #0]
 801237c:	462a      	mov	r2, r5
 801237e:	4b16      	ldr	r3, [pc, #88]	; (80123d8 <_vfiprintf_r+0x258>)
 8012380:	a904      	add	r1, sp, #16
 8012382:	4630      	mov	r0, r6
 8012384:	f7fc f842 	bl	800e40c <_printf_float>
 8012388:	4607      	mov	r7, r0
 801238a:	1c78      	adds	r0, r7, #1
 801238c:	d1d6      	bne.n	801233c <_vfiprintf_r+0x1bc>
 801238e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012390:	07d9      	lsls	r1, r3, #31
 8012392:	d405      	bmi.n	80123a0 <_vfiprintf_r+0x220>
 8012394:	89ab      	ldrh	r3, [r5, #12]
 8012396:	059a      	lsls	r2, r3, #22
 8012398:	d402      	bmi.n	80123a0 <_vfiprintf_r+0x220>
 801239a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801239c:	f000 faa1 	bl	80128e2 <__retarget_lock_release_recursive>
 80123a0:	89ab      	ldrh	r3, [r5, #12]
 80123a2:	065b      	lsls	r3, r3, #25
 80123a4:	f53f af12 	bmi.w	80121cc <_vfiprintf_r+0x4c>
 80123a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123aa:	e711      	b.n	80121d0 <_vfiprintf_r+0x50>
 80123ac:	ab03      	add	r3, sp, #12
 80123ae:	9300      	str	r3, [sp, #0]
 80123b0:	462a      	mov	r2, r5
 80123b2:	4b09      	ldr	r3, [pc, #36]	; (80123d8 <_vfiprintf_r+0x258>)
 80123b4:	a904      	add	r1, sp, #16
 80123b6:	4630      	mov	r0, r6
 80123b8:	f7fc facc 	bl	800e954 <_printf_i>
 80123bc:	e7e4      	b.n	8012388 <_vfiprintf_r+0x208>
 80123be:	bf00      	nop
 80123c0:	080132cc 	.word	0x080132cc
 80123c4:	080132ec 	.word	0x080132ec
 80123c8:	080132ac 	.word	0x080132ac
 80123cc:	0801325c 	.word	0x0801325c
 80123d0:	08013266 	.word	0x08013266
 80123d4:	0800e40d 	.word	0x0800e40d
 80123d8:	0801215d 	.word	0x0801215d
 80123dc:	08013262 	.word	0x08013262

080123e0 <__swbuf_r>:
 80123e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123e2:	460e      	mov	r6, r1
 80123e4:	4614      	mov	r4, r2
 80123e6:	4605      	mov	r5, r0
 80123e8:	b118      	cbz	r0, 80123f2 <__swbuf_r+0x12>
 80123ea:	6983      	ldr	r3, [r0, #24]
 80123ec:	b90b      	cbnz	r3, 80123f2 <__swbuf_r+0x12>
 80123ee:	f000 f9d9 	bl	80127a4 <__sinit>
 80123f2:	4b21      	ldr	r3, [pc, #132]	; (8012478 <__swbuf_r+0x98>)
 80123f4:	429c      	cmp	r4, r3
 80123f6:	d12b      	bne.n	8012450 <__swbuf_r+0x70>
 80123f8:	686c      	ldr	r4, [r5, #4]
 80123fa:	69a3      	ldr	r3, [r4, #24]
 80123fc:	60a3      	str	r3, [r4, #8]
 80123fe:	89a3      	ldrh	r3, [r4, #12]
 8012400:	071a      	lsls	r2, r3, #28
 8012402:	d52f      	bpl.n	8012464 <__swbuf_r+0x84>
 8012404:	6923      	ldr	r3, [r4, #16]
 8012406:	b36b      	cbz	r3, 8012464 <__swbuf_r+0x84>
 8012408:	6923      	ldr	r3, [r4, #16]
 801240a:	6820      	ldr	r0, [r4, #0]
 801240c:	1ac0      	subs	r0, r0, r3
 801240e:	6963      	ldr	r3, [r4, #20]
 8012410:	b2f6      	uxtb	r6, r6
 8012412:	4283      	cmp	r3, r0
 8012414:	4637      	mov	r7, r6
 8012416:	dc04      	bgt.n	8012422 <__swbuf_r+0x42>
 8012418:	4621      	mov	r1, r4
 801241a:	4628      	mov	r0, r5
 801241c:	f000 f92e 	bl	801267c <_fflush_r>
 8012420:	bb30      	cbnz	r0, 8012470 <__swbuf_r+0x90>
 8012422:	68a3      	ldr	r3, [r4, #8]
 8012424:	3b01      	subs	r3, #1
 8012426:	60a3      	str	r3, [r4, #8]
 8012428:	6823      	ldr	r3, [r4, #0]
 801242a:	1c5a      	adds	r2, r3, #1
 801242c:	6022      	str	r2, [r4, #0]
 801242e:	701e      	strb	r6, [r3, #0]
 8012430:	6963      	ldr	r3, [r4, #20]
 8012432:	3001      	adds	r0, #1
 8012434:	4283      	cmp	r3, r0
 8012436:	d004      	beq.n	8012442 <__swbuf_r+0x62>
 8012438:	89a3      	ldrh	r3, [r4, #12]
 801243a:	07db      	lsls	r3, r3, #31
 801243c:	d506      	bpl.n	801244c <__swbuf_r+0x6c>
 801243e:	2e0a      	cmp	r6, #10
 8012440:	d104      	bne.n	801244c <__swbuf_r+0x6c>
 8012442:	4621      	mov	r1, r4
 8012444:	4628      	mov	r0, r5
 8012446:	f000 f919 	bl	801267c <_fflush_r>
 801244a:	b988      	cbnz	r0, 8012470 <__swbuf_r+0x90>
 801244c:	4638      	mov	r0, r7
 801244e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012450:	4b0a      	ldr	r3, [pc, #40]	; (801247c <__swbuf_r+0x9c>)
 8012452:	429c      	cmp	r4, r3
 8012454:	d101      	bne.n	801245a <__swbuf_r+0x7a>
 8012456:	68ac      	ldr	r4, [r5, #8]
 8012458:	e7cf      	b.n	80123fa <__swbuf_r+0x1a>
 801245a:	4b09      	ldr	r3, [pc, #36]	; (8012480 <__swbuf_r+0xa0>)
 801245c:	429c      	cmp	r4, r3
 801245e:	bf08      	it	eq
 8012460:	68ec      	ldreq	r4, [r5, #12]
 8012462:	e7ca      	b.n	80123fa <__swbuf_r+0x1a>
 8012464:	4621      	mov	r1, r4
 8012466:	4628      	mov	r0, r5
 8012468:	f000 f80c 	bl	8012484 <__swsetup_r>
 801246c:	2800      	cmp	r0, #0
 801246e:	d0cb      	beq.n	8012408 <__swbuf_r+0x28>
 8012470:	f04f 37ff 	mov.w	r7, #4294967295
 8012474:	e7ea      	b.n	801244c <__swbuf_r+0x6c>
 8012476:	bf00      	nop
 8012478:	080132cc 	.word	0x080132cc
 801247c:	080132ec 	.word	0x080132ec
 8012480:	080132ac 	.word	0x080132ac

08012484 <__swsetup_r>:
 8012484:	4b32      	ldr	r3, [pc, #200]	; (8012550 <__swsetup_r+0xcc>)
 8012486:	b570      	push	{r4, r5, r6, lr}
 8012488:	681d      	ldr	r5, [r3, #0]
 801248a:	4606      	mov	r6, r0
 801248c:	460c      	mov	r4, r1
 801248e:	b125      	cbz	r5, 801249a <__swsetup_r+0x16>
 8012490:	69ab      	ldr	r3, [r5, #24]
 8012492:	b913      	cbnz	r3, 801249a <__swsetup_r+0x16>
 8012494:	4628      	mov	r0, r5
 8012496:	f000 f985 	bl	80127a4 <__sinit>
 801249a:	4b2e      	ldr	r3, [pc, #184]	; (8012554 <__swsetup_r+0xd0>)
 801249c:	429c      	cmp	r4, r3
 801249e:	d10f      	bne.n	80124c0 <__swsetup_r+0x3c>
 80124a0:	686c      	ldr	r4, [r5, #4]
 80124a2:	89a3      	ldrh	r3, [r4, #12]
 80124a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80124a8:	0719      	lsls	r1, r3, #28
 80124aa:	d42c      	bmi.n	8012506 <__swsetup_r+0x82>
 80124ac:	06dd      	lsls	r5, r3, #27
 80124ae:	d411      	bmi.n	80124d4 <__swsetup_r+0x50>
 80124b0:	2309      	movs	r3, #9
 80124b2:	6033      	str	r3, [r6, #0]
 80124b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80124b8:	81a3      	strh	r3, [r4, #12]
 80124ba:	f04f 30ff 	mov.w	r0, #4294967295
 80124be:	e03e      	b.n	801253e <__swsetup_r+0xba>
 80124c0:	4b25      	ldr	r3, [pc, #148]	; (8012558 <__swsetup_r+0xd4>)
 80124c2:	429c      	cmp	r4, r3
 80124c4:	d101      	bne.n	80124ca <__swsetup_r+0x46>
 80124c6:	68ac      	ldr	r4, [r5, #8]
 80124c8:	e7eb      	b.n	80124a2 <__swsetup_r+0x1e>
 80124ca:	4b24      	ldr	r3, [pc, #144]	; (801255c <__swsetup_r+0xd8>)
 80124cc:	429c      	cmp	r4, r3
 80124ce:	bf08      	it	eq
 80124d0:	68ec      	ldreq	r4, [r5, #12]
 80124d2:	e7e6      	b.n	80124a2 <__swsetup_r+0x1e>
 80124d4:	0758      	lsls	r0, r3, #29
 80124d6:	d512      	bpl.n	80124fe <__swsetup_r+0x7a>
 80124d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80124da:	b141      	cbz	r1, 80124ee <__swsetup_r+0x6a>
 80124dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80124e0:	4299      	cmp	r1, r3
 80124e2:	d002      	beq.n	80124ea <__swsetup_r+0x66>
 80124e4:	4630      	mov	r0, r6
 80124e6:	f7ff fb27 	bl	8011b38 <_free_r>
 80124ea:	2300      	movs	r3, #0
 80124ec:	6363      	str	r3, [r4, #52]	; 0x34
 80124ee:	89a3      	ldrh	r3, [r4, #12]
 80124f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80124f4:	81a3      	strh	r3, [r4, #12]
 80124f6:	2300      	movs	r3, #0
 80124f8:	6063      	str	r3, [r4, #4]
 80124fa:	6923      	ldr	r3, [r4, #16]
 80124fc:	6023      	str	r3, [r4, #0]
 80124fe:	89a3      	ldrh	r3, [r4, #12]
 8012500:	f043 0308 	orr.w	r3, r3, #8
 8012504:	81a3      	strh	r3, [r4, #12]
 8012506:	6923      	ldr	r3, [r4, #16]
 8012508:	b94b      	cbnz	r3, 801251e <__swsetup_r+0x9a>
 801250a:	89a3      	ldrh	r3, [r4, #12]
 801250c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012514:	d003      	beq.n	801251e <__swsetup_r+0x9a>
 8012516:	4621      	mov	r1, r4
 8012518:	4630      	mov	r0, r6
 801251a:	f000 fa09 	bl	8012930 <__smakebuf_r>
 801251e:	89a0      	ldrh	r0, [r4, #12]
 8012520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012524:	f010 0301 	ands.w	r3, r0, #1
 8012528:	d00a      	beq.n	8012540 <__swsetup_r+0xbc>
 801252a:	2300      	movs	r3, #0
 801252c:	60a3      	str	r3, [r4, #8]
 801252e:	6963      	ldr	r3, [r4, #20]
 8012530:	425b      	negs	r3, r3
 8012532:	61a3      	str	r3, [r4, #24]
 8012534:	6923      	ldr	r3, [r4, #16]
 8012536:	b943      	cbnz	r3, 801254a <__swsetup_r+0xc6>
 8012538:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801253c:	d1ba      	bne.n	80124b4 <__swsetup_r+0x30>
 801253e:	bd70      	pop	{r4, r5, r6, pc}
 8012540:	0781      	lsls	r1, r0, #30
 8012542:	bf58      	it	pl
 8012544:	6963      	ldrpl	r3, [r4, #20]
 8012546:	60a3      	str	r3, [r4, #8]
 8012548:	e7f4      	b.n	8012534 <__swsetup_r+0xb0>
 801254a:	2000      	movs	r0, #0
 801254c:	e7f7      	b.n	801253e <__swsetup_r+0xba>
 801254e:	bf00      	nop
 8012550:	200002c8 	.word	0x200002c8
 8012554:	080132cc 	.word	0x080132cc
 8012558:	080132ec 	.word	0x080132ec
 801255c:	080132ac 	.word	0x080132ac

08012560 <abort>:
 8012560:	b508      	push	{r3, lr}
 8012562:	2006      	movs	r0, #6
 8012564:	f000 fa54 	bl	8012a10 <raise>
 8012568:	2001      	movs	r0, #1
 801256a:	f7ef fa23 	bl	80019b4 <_exit>
	...

08012570 <__sflush_r>:
 8012570:	898a      	ldrh	r2, [r1, #12]
 8012572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012576:	4605      	mov	r5, r0
 8012578:	0710      	lsls	r0, r2, #28
 801257a:	460c      	mov	r4, r1
 801257c:	d458      	bmi.n	8012630 <__sflush_r+0xc0>
 801257e:	684b      	ldr	r3, [r1, #4]
 8012580:	2b00      	cmp	r3, #0
 8012582:	dc05      	bgt.n	8012590 <__sflush_r+0x20>
 8012584:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012586:	2b00      	cmp	r3, #0
 8012588:	dc02      	bgt.n	8012590 <__sflush_r+0x20>
 801258a:	2000      	movs	r0, #0
 801258c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012590:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012592:	2e00      	cmp	r6, #0
 8012594:	d0f9      	beq.n	801258a <__sflush_r+0x1a>
 8012596:	2300      	movs	r3, #0
 8012598:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801259c:	682f      	ldr	r7, [r5, #0]
 801259e:	602b      	str	r3, [r5, #0]
 80125a0:	d032      	beq.n	8012608 <__sflush_r+0x98>
 80125a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80125a4:	89a3      	ldrh	r3, [r4, #12]
 80125a6:	075a      	lsls	r2, r3, #29
 80125a8:	d505      	bpl.n	80125b6 <__sflush_r+0x46>
 80125aa:	6863      	ldr	r3, [r4, #4]
 80125ac:	1ac0      	subs	r0, r0, r3
 80125ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80125b0:	b10b      	cbz	r3, 80125b6 <__sflush_r+0x46>
 80125b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80125b4:	1ac0      	subs	r0, r0, r3
 80125b6:	2300      	movs	r3, #0
 80125b8:	4602      	mov	r2, r0
 80125ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80125bc:	6a21      	ldr	r1, [r4, #32]
 80125be:	4628      	mov	r0, r5
 80125c0:	47b0      	blx	r6
 80125c2:	1c43      	adds	r3, r0, #1
 80125c4:	89a3      	ldrh	r3, [r4, #12]
 80125c6:	d106      	bne.n	80125d6 <__sflush_r+0x66>
 80125c8:	6829      	ldr	r1, [r5, #0]
 80125ca:	291d      	cmp	r1, #29
 80125cc:	d82c      	bhi.n	8012628 <__sflush_r+0xb8>
 80125ce:	4a2a      	ldr	r2, [pc, #168]	; (8012678 <__sflush_r+0x108>)
 80125d0:	40ca      	lsrs	r2, r1
 80125d2:	07d6      	lsls	r6, r2, #31
 80125d4:	d528      	bpl.n	8012628 <__sflush_r+0xb8>
 80125d6:	2200      	movs	r2, #0
 80125d8:	6062      	str	r2, [r4, #4]
 80125da:	04d9      	lsls	r1, r3, #19
 80125dc:	6922      	ldr	r2, [r4, #16]
 80125de:	6022      	str	r2, [r4, #0]
 80125e0:	d504      	bpl.n	80125ec <__sflush_r+0x7c>
 80125e2:	1c42      	adds	r2, r0, #1
 80125e4:	d101      	bne.n	80125ea <__sflush_r+0x7a>
 80125e6:	682b      	ldr	r3, [r5, #0]
 80125e8:	b903      	cbnz	r3, 80125ec <__sflush_r+0x7c>
 80125ea:	6560      	str	r0, [r4, #84]	; 0x54
 80125ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80125ee:	602f      	str	r7, [r5, #0]
 80125f0:	2900      	cmp	r1, #0
 80125f2:	d0ca      	beq.n	801258a <__sflush_r+0x1a>
 80125f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80125f8:	4299      	cmp	r1, r3
 80125fa:	d002      	beq.n	8012602 <__sflush_r+0x92>
 80125fc:	4628      	mov	r0, r5
 80125fe:	f7ff fa9b 	bl	8011b38 <_free_r>
 8012602:	2000      	movs	r0, #0
 8012604:	6360      	str	r0, [r4, #52]	; 0x34
 8012606:	e7c1      	b.n	801258c <__sflush_r+0x1c>
 8012608:	6a21      	ldr	r1, [r4, #32]
 801260a:	2301      	movs	r3, #1
 801260c:	4628      	mov	r0, r5
 801260e:	47b0      	blx	r6
 8012610:	1c41      	adds	r1, r0, #1
 8012612:	d1c7      	bne.n	80125a4 <__sflush_r+0x34>
 8012614:	682b      	ldr	r3, [r5, #0]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d0c4      	beq.n	80125a4 <__sflush_r+0x34>
 801261a:	2b1d      	cmp	r3, #29
 801261c:	d001      	beq.n	8012622 <__sflush_r+0xb2>
 801261e:	2b16      	cmp	r3, #22
 8012620:	d101      	bne.n	8012626 <__sflush_r+0xb6>
 8012622:	602f      	str	r7, [r5, #0]
 8012624:	e7b1      	b.n	801258a <__sflush_r+0x1a>
 8012626:	89a3      	ldrh	r3, [r4, #12]
 8012628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801262c:	81a3      	strh	r3, [r4, #12]
 801262e:	e7ad      	b.n	801258c <__sflush_r+0x1c>
 8012630:	690f      	ldr	r7, [r1, #16]
 8012632:	2f00      	cmp	r7, #0
 8012634:	d0a9      	beq.n	801258a <__sflush_r+0x1a>
 8012636:	0793      	lsls	r3, r2, #30
 8012638:	680e      	ldr	r6, [r1, #0]
 801263a:	bf08      	it	eq
 801263c:	694b      	ldreq	r3, [r1, #20]
 801263e:	600f      	str	r7, [r1, #0]
 8012640:	bf18      	it	ne
 8012642:	2300      	movne	r3, #0
 8012644:	eba6 0807 	sub.w	r8, r6, r7
 8012648:	608b      	str	r3, [r1, #8]
 801264a:	f1b8 0f00 	cmp.w	r8, #0
 801264e:	dd9c      	ble.n	801258a <__sflush_r+0x1a>
 8012650:	6a21      	ldr	r1, [r4, #32]
 8012652:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012654:	4643      	mov	r3, r8
 8012656:	463a      	mov	r2, r7
 8012658:	4628      	mov	r0, r5
 801265a:	47b0      	blx	r6
 801265c:	2800      	cmp	r0, #0
 801265e:	dc06      	bgt.n	801266e <__sflush_r+0xfe>
 8012660:	89a3      	ldrh	r3, [r4, #12]
 8012662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012666:	81a3      	strh	r3, [r4, #12]
 8012668:	f04f 30ff 	mov.w	r0, #4294967295
 801266c:	e78e      	b.n	801258c <__sflush_r+0x1c>
 801266e:	4407      	add	r7, r0
 8012670:	eba8 0800 	sub.w	r8, r8, r0
 8012674:	e7e9      	b.n	801264a <__sflush_r+0xda>
 8012676:	bf00      	nop
 8012678:	20400001 	.word	0x20400001

0801267c <_fflush_r>:
 801267c:	b538      	push	{r3, r4, r5, lr}
 801267e:	690b      	ldr	r3, [r1, #16]
 8012680:	4605      	mov	r5, r0
 8012682:	460c      	mov	r4, r1
 8012684:	b913      	cbnz	r3, 801268c <_fflush_r+0x10>
 8012686:	2500      	movs	r5, #0
 8012688:	4628      	mov	r0, r5
 801268a:	bd38      	pop	{r3, r4, r5, pc}
 801268c:	b118      	cbz	r0, 8012696 <_fflush_r+0x1a>
 801268e:	6983      	ldr	r3, [r0, #24]
 8012690:	b90b      	cbnz	r3, 8012696 <_fflush_r+0x1a>
 8012692:	f000 f887 	bl	80127a4 <__sinit>
 8012696:	4b14      	ldr	r3, [pc, #80]	; (80126e8 <_fflush_r+0x6c>)
 8012698:	429c      	cmp	r4, r3
 801269a:	d11b      	bne.n	80126d4 <_fflush_r+0x58>
 801269c:	686c      	ldr	r4, [r5, #4]
 801269e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d0ef      	beq.n	8012686 <_fflush_r+0xa>
 80126a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80126a8:	07d0      	lsls	r0, r2, #31
 80126aa:	d404      	bmi.n	80126b6 <_fflush_r+0x3a>
 80126ac:	0599      	lsls	r1, r3, #22
 80126ae:	d402      	bmi.n	80126b6 <_fflush_r+0x3a>
 80126b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126b2:	f000 f915 	bl	80128e0 <__retarget_lock_acquire_recursive>
 80126b6:	4628      	mov	r0, r5
 80126b8:	4621      	mov	r1, r4
 80126ba:	f7ff ff59 	bl	8012570 <__sflush_r>
 80126be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126c0:	07da      	lsls	r2, r3, #31
 80126c2:	4605      	mov	r5, r0
 80126c4:	d4e0      	bmi.n	8012688 <_fflush_r+0xc>
 80126c6:	89a3      	ldrh	r3, [r4, #12]
 80126c8:	059b      	lsls	r3, r3, #22
 80126ca:	d4dd      	bmi.n	8012688 <_fflush_r+0xc>
 80126cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126ce:	f000 f908 	bl	80128e2 <__retarget_lock_release_recursive>
 80126d2:	e7d9      	b.n	8012688 <_fflush_r+0xc>
 80126d4:	4b05      	ldr	r3, [pc, #20]	; (80126ec <_fflush_r+0x70>)
 80126d6:	429c      	cmp	r4, r3
 80126d8:	d101      	bne.n	80126de <_fflush_r+0x62>
 80126da:	68ac      	ldr	r4, [r5, #8]
 80126dc:	e7df      	b.n	801269e <_fflush_r+0x22>
 80126de:	4b04      	ldr	r3, [pc, #16]	; (80126f0 <_fflush_r+0x74>)
 80126e0:	429c      	cmp	r4, r3
 80126e2:	bf08      	it	eq
 80126e4:	68ec      	ldreq	r4, [r5, #12]
 80126e6:	e7da      	b.n	801269e <_fflush_r+0x22>
 80126e8:	080132cc 	.word	0x080132cc
 80126ec:	080132ec 	.word	0x080132ec
 80126f0:	080132ac 	.word	0x080132ac

080126f4 <std>:
 80126f4:	2300      	movs	r3, #0
 80126f6:	b510      	push	{r4, lr}
 80126f8:	4604      	mov	r4, r0
 80126fa:	e9c0 3300 	strd	r3, r3, [r0]
 80126fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012702:	6083      	str	r3, [r0, #8]
 8012704:	8181      	strh	r1, [r0, #12]
 8012706:	6643      	str	r3, [r0, #100]	; 0x64
 8012708:	81c2      	strh	r2, [r0, #14]
 801270a:	6183      	str	r3, [r0, #24]
 801270c:	4619      	mov	r1, r3
 801270e:	2208      	movs	r2, #8
 8012710:	305c      	adds	r0, #92	; 0x5c
 8012712:	f7fb fdd3 	bl	800e2bc <memset>
 8012716:	4b05      	ldr	r3, [pc, #20]	; (801272c <std+0x38>)
 8012718:	6263      	str	r3, [r4, #36]	; 0x24
 801271a:	4b05      	ldr	r3, [pc, #20]	; (8012730 <std+0x3c>)
 801271c:	62a3      	str	r3, [r4, #40]	; 0x28
 801271e:	4b05      	ldr	r3, [pc, #20]	; (8012734 <std+0x40>)
 8012720:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012722:	4b05      	ldr	r3, [pc, #20]	; (8012738 <std+0x44>)
 8012724:	6224      	str	r4, [r4, #32]
 8012726:	6323      	str	r3, [r4, #48]	; 0x30
 8012728:	bd10      	pop	{r4, pc}
 801272a:	bf00      	nop
 801272c:	08012a49 	.word	0x08012a49
 8012730:	08012a6b 	.word	0x08012a6b
 8012734:	08012aa3 	.word	0x08012aa3
 8012738:	08012ac7 	.word	0x08012ac7

0801273c <_cleanup_r>:
 801273c:	4901      	ldr	r1, [pc, #4]	; (8012744 <_cleanup_r+0x8>)
 801273e:	f000 b8af 	b.w	80128a0 <_fwalk_reent>
 8012742:	bf00      	nop
 8012744:	0801267d 	.word	0x0801267d

08012748 <__sfmoreglue>:
 8012748:	b570      	push	{r4, r5, r6, lr}
 801274a:	2268      	movs	r2, #104	; 0x68
 801274c:	1e4d      	subs	r5, r1, #1
 801274e:	4355      	muls	r5, r2
 8012750:	460e      	mov	r6, r1
 8012752:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012756:	f7ff fa5b 	bl	8011c10 <_malloc_r>
 801275a:	4604      	mov	r4, r0
 801275c:	b140      	cbz	r0, 8012770 <__sfmoreglue+0x28>
 801275e:	2100      	movs	r1, #0
 8012760:	e9c0 1600 	strd	r1, r6, [r0]
 8012764:	300c      	adds	r0, #12
 8012766:	60a0      	str	r0, [r4, #8]
 8012768:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801276c:	f7fb fda6 	bl	800e2bc <memset>
 8012770:	4620      	mov	r0, r4
 8012772:	bd70      	pop	{r4, r5, r6, pc}

08012774 <__sfp_lock_acquire>:
 8012774:	4801      	ldr	r0, [pc, #4]	; (801277c <__sfp_lock_acquire+0x8>)
 8012776:	f000 b8b3 	b.w	80128e0 <__retarget_lock_acquire_recursive>
 801277a:	bf00      	nop
 801277c:	2000074d 	.word	0x2000074d

08012780 <__sfp_lock_release>:
 8012780:	4801      	ldr	r0, [pc, #4]	; (8012788 <__sfp_lock_release+0x8>)
 8012782:	f000 b8ae 	b.w	80128e2 <__retarget_lock_release_recursive>
 8012786:	bf00      	nop
 8012788:	2000074d 	.word	0x2000074d

0801278c <__sinit_lock_acquire>:
 801278c:	4801      	ldr	r0, [pc, #4]	; (8012794 <__sinit_lock_acquire+0x8>)
 801278e:	f000 b8a7 	b.w	80128e0 <__retarget_lock_acquire_recursive>
 8012792:	bf00      	nop
 8012794:	2000074e 	.word	0x2000074e

08012798 <__sinit_lock_release>:
 8012798:	4801      	ldr	r0, [pc, #4]	; (80127a0 <__sinit_lock_release+0x8>)
 801279a:	f000 b8a2 	b.w	80128e2 <__retarget_lock_release_recursive>
 801279e:	bf00      	nop
 80127a0:	2000074e 	.word	0x2000074e

080127a4 <__sinit>:
 80127a4:	b510      	push	{r4, lr}
 80127a6:	4604      	mov	r4, r0
 80127a8:	f7ff fff0 	bl	801278c <__sinit_lock_acquire>
 80127ac:	69a3      	ldr	r3, [r4, #24]
 80127ae:	b11b      	cbz	r3, 80127b8 <__sinit+0x14>
 80127b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127b4:	f7ff bff0 	b.w	8012798 <__sinit_lock_release>
 80127b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80127bc:	6523      	str	r3, [r4, #80]	; 0x50
 80127be:	4b13      	ldr	r3, [pc, #76]	; (801280c <__sinit+0x68>)
 80127c0:	4a13      	ldr	r2, [pc, #76]	; (8012810 <__sinit+0x6c>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80127c6:	42a3      	cmp	r3, r4
 80127c8:	bf04      	itt	eq
 80127ca:	2301      	moveq	r3, #1
 80127cc:	61a3      	streq	r3, [r4, #24]
 80127ce:	4620      	mov	r0, r4
 80127d0:	f000 f820 	bl	8012814 <__sfp>
 80127d4:	6060      	str	r0, [r4, #4]
 80127d6:	4620      	mov	r0, r4
 80127d8:	f000 f81c 	bl	8012814 <__sfp>
 80127dc:	60a0      	str	r0, [r4, #8]
 80127de:	4620      	mov	r0, r4
 80127e0:	f000 f818 	bl	8012814 <__sfp>
 80127e4:	2200      	movs	r2, #0
 80127e6:	60e0      	str	r0, [r4, #12]
 80127e8:	2104      	movs	r1, #4
 80127ea:	6860      	ldr	r0, [r4, #4]
 80127ec:	f7ff ff82 	bl	80126f4 <std>
 80127f0:	68a0      	ldr	r0, [r4, #8]
 80127f2:	2201      	movs	r2, #1
 80127f4:	2109      	movs	r1, #9
 80127f6:	f7ff ff7d 	bl	80126f4 <std>
 80127fa:	68e0      	ldr	r0, [r4, #12]
 80127fc:	2202      	movs	r2, #2
 80127fe:	2112      	movs	r1, #18
 8012800:	f7ff ff78 	bl	80126f4 <std>
 8012804:	2301      	movs	r3, #1
 8012806:	61a3      	str	r3, [r4, #24]
 8012808:	e7d2      	b.n	80127b0 <__sinit+0xc>
 801280a:	bf00      	nop
 801280c:	08012e64 	.word	0x08012e64
 8012810:	0801273d 	.word	0x0801273d

08012814 <__sfp>:
 8012814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012816:	4607      	mov	r7, r0
 8012818:	f7ff ffac 	bl	8012774 <__sfp_lock_acquire>
 801281c:	4b1e      	ldr	r3, [pc, #120]	; (8012898 <__sfp+0x84>)
 801281e:	681e      	ldr	r6, [r3, #0]
 8012820:	69b3      	ldr	r3, [r6, #24]
 8012822:	b913      	cbnz	r3, 801282a <__sfp+0x16>
 8012824:	4630      	mov	r0, r6
 8012826:	f7ff ffbd 	bl	80127a4 <__sinit>
 801282a:	3648      	adds	r6, #72	; 0x48
 801282c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012830:	3b01      	subs	r3, #1
 8012832:	d503      	bpl.n	801283c <__sfp+0x28>
 8012834:	6833      	ldr	r3, [r6, #0]
 8012836:	b30b      	cbz	r3, 801287c <__sfp+0x68>
 8012838:	6836      	ldr	r6, [r6, #0]
 801283a:	e7f7      	b.n	801282c <__sfp+0x18>
 801283c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012840:	b9d5      	cbnz	r5, 8012878 <__sfp+0x64>
 8012842:	4b16      	ldr	r3, [pc, #88]	; (801289c <__sfp+0x88>)
 8012844:	60e3      	str	r3, [r4, #12]
 8012846:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801284a:	6665      	str	r5, [r4, #100]	; 0x64
 801284c:	f000 f847 	bl	80128de <__retarget_lock_init_recursive>
 8012850:	f7ff ff96 	bl	8012780 <__sfp_lock_release>
 8012854:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012858:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801285c:	6025      	str	r5, [r4, #0]
 801285e:	61a5      	str	r5, [r4, #24]
 8012860:	2208      	movs	r2, #8
 8012862:	4629      	mov	r1, r5
 8012864:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012868:	f7fb fd28 	bl	800e2bc <memset>
 801286c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012870:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012874:	4620      	mov	r0, r4
 8012876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012878:	3468      	adds	r4, #104	; 0x68
 801287a:	e7d9      	b.n	8012830 <__sfp+0x1c>
 801287c:	2104      	movs	r1, #4
 801287e:	4638      	mov	r0, r7
 8012880:	f7ff ff62 	bl	8012748 <__sfmoreglue>
 8012884:	4604      	mov	r4, r0
 8012886:	6030      	str	r0, [r6, #0]
 8012888:	2800      	cmp	r0, #0
 801288a:	d1d5      	bne.n	8012838 <__sfp+0x24>
 801288c:	f7ff ff78 	bl	8012780 <__sfp_lock_release>
 8012890:	230c      	movs	r3, #12
 8012892:	603b      	str	r3, [r7, #0]
 8012894:	e7ee      	b.n	8012874 <__sfp+0x60>
 8012896:	bf00      	nop
 8012898:	08012e64 	.word	0x08012e64
 801289c:	ffff0001 	.word	0xffff0001

080128a0 <_fwalk_reent>:
 80128a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128a4:	4606      	mov	r6, r0
 80128a6:	4688      	mov	r8, r1
 80128a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80128ac:	2700      	movs	r7, #0
 80128ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80128b2:	f1b9 0901 	subs.w	r9, r9, #1
 80128b6:	d505      	bpl.n	80128c4 <_fwalk_reent+0x24>
 80128b8:	6824      	ldr	r4, [r4, #0]
 80128ba:	2c00      	cmp	r4, #0
 80128bc:	d1f7      	bne.n	80128ae <_fwalk_reent+0xe>
 80128be:	4638      	mov	r0, r7
 80128c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128c4:	89ab      	ldrh	r3, [r5, #12]
 80128c6:	2b01      	cmp	r3, #1
 80128c8:	d907      	bls.n	80128da <_fwalk_reent+0x3a>
 80128ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80128ce:	3301      	adds	r3, #1
 80128d0:	d003      	beq.n	80128da <_fwalk_reent+0x3a>
 80128d2:	4629      	mov	r1, r5
 80128d4:	4630      	mov	r0, r6
 80128d6:	47c0      	blx	r8
 80128d8:	4307      	orrs	r7, r0
 80128da:	3568      	adds	r5, #104	; 0x68
 80128dc:	e7e9      	b.n	80128b2 <_fwalk_reent+0x12>

080128de <__retarget_lock_init_recursive>:
 80128de:	4770      	bx	lr

080128e0 <__retarget_lock_acquire_recursive>:
 80128e0:	4770      	bx	lr

080128e2 <__retarget_lock_release_recursive>:
 80128e2:	4770      	bx	lr

080128e4 <__swhatbuf_r>:
 80128e4:	b570      	push	{r4, r5, r6, lr}
 80128e6:	460e      	mov	r6, r1
 80128e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128ec:	2900      	cmp	r1, #0
 80128ee:	b096      	sub	sp, #88	; 0x58
 80128f0:	4614      	mov	r4, r2
 80128f2:	461d      	mov	r5, r3
 80128f4:	da08      	bge.n	8012908 <__swhatbuf_r+0x24>
 80128f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80128fa:	2200      	movs	r2, #0
 80128fc:	602a      	str	r2, [r5, #0]
 80128fe:	061a      	lsls	r2, r3, #24
 8012900:	d410      	bmi.n	8012924 <__swhatbuf_r+0x40>
 8012902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012906:	e00e      	b.n	8012926 <__swhatbuf_r+0x42>
 8012908:	466a      	mov	r2, sp
 801290a:	f000 f903 	bl	8012b14 <_fstat_r>
 801290e:	2800      	cmp	r0, #0
 8012910:	dbf1      	blt.n	80128f6 <__swhatbuf_r+0x12>
 8012912:	9a01      	ldr	r2, [sp, #4]
 8012914:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012918:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801291c:	425a      	negs	r2, r3
 801291e:	415a      	adcs	r2, r3
 8012920:	602a      	str	r2, [r5, #0]
 8012922:	e7ee      	b.n	8012902 <__swhatbuf_r+0x1e>
 8012924:	2340      	movs	r3, #64	; 0x40
 8012926:	2000      	movs	r0, #0
 8012928:	6023      	str	r3, [r4, #0]
 801292a:	b016      	add	sp, #88	; 0x58
 801292c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012930 <__smakebuf_r>:
 8012930:	898b      	ldrh	r3, [r1, #12]
 8012932:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012934:	079d      	lsls	r5, r3, #30
 8012936:	4606      	mov	r6, r0
 8012938:	460c      	mov	r4, r1
 801293a:	d507      	bpl.n	801294c <__smakebuf_r+0x1c>
 801293c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012940:	6023      	str	r3, [r4, #0]
 8012942:	6123      	str	r3, [r4, #16]
 8012944:	2301      	movs	r3, #1
 8012946:	6163      	str	r3, [r4, #20]
 8012948:	b002      	add	sp, #8
 801294a:	bd70      	pop	{r4, r5, r6, pc}
 801294c:	ab01      	add	r3, sp, #4
 801294e:	466a      	mov	r2, sp
 8012950:	f7ff ffc8 	bl	80128e4 <__swhatbuf_r>
 8012954:	9900      	ldr	r1, [sp, #0]
 8012956:	4605      	mov	r5, r0
 8012958:	4630      	mov	r0, r6
 801295a:	f7ff f959 	bl	8011c10 <_malloc_r>
 801295e:	b948      	cbnz	r0, 8012974 <__smakebuf_r+0x44>
 8012960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012964:	059a      	lsls	r2, r3, #22
 8012966:	d4ef      	bmi.n	8012948 <__smakebuf_r+0x18>
 8012968:	f023 0303 	bic.w	r3, r3, #3
 801296c:	f043 0302 	orr.w	r3, r3, #2
 8012970:	81a3      	strh	r3, [r4, #12]
 8012972:	e7e3      	b.n	801293c <__smakebuf_r+0xc>
 8012974:	4b0d      	ldr	r3, [pc, #52]	; (80129ac <__smakebuf_r+0x7c>)
 8012976:	62b3      	str	r3, [r6, #40]	; 0x28
 8012978:	89a3      	ldrh	r3, [r4, #12]
 801297a:	6020      	str	r0, [r4, #0]
 801297c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012980:	81a3      	strh	r3, [r4, #12]
 8012982:	9b00      	ldr	r3, [sp, #0]
 8012984:	6163      	str	r3, [r4, #20]
 8012986:	9b01      	ldr	r3, [sp, #4]
 8012988:	6120      	str	r0, [r4, #16]
 801298a:	b15b      	cbz	r3, 80129a4 <__smakebuf_r+0x74>
 801298c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012990:	4630      	mov	r0, r6
 8012992:	f000 f8d1 	bl	8012b38 <_isatty_r>
 8012996:	b128      	cbz	r0, 80129a4 <__smakebuf_r+0x74>
 8012998:	89a3      	ldrh	r3, [r4, #12]
 801299a:	f023 0303 	bic.w	r3, r3, #3
 801299e:	f043 0301 	orr.w	r3, r3, #1
 80129a2:	81a3      	strh	r3, [r4, #12]
 80129a4:	89a0      	ldrh	r0, [r4, #12]
 80129a6:	4305      	orrs	r5, r0
 80129a8:	81a5      	strh	r5, [r4, #12]
 80129aa:	e7cd      	b.n	8012948 <__smakebuf_r+0x18>
 80129ac:	0801273d 	.word	0x0801273d

080129b0 <_malloc_usable_size_r>:
 80129b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129b4:	1f18      	subs	r0, r3, #4
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	bfbc      	itt	lt
 80129ba:	580b      	ldrlt	r3, [r1, r0]
 80129bc:	18c0      	addlt	r0, r0, r3
 80129be:	4770      	bx	lr

080129c0 <_raise_r>:
 80129c0:	291f      	cmp	r1, #31
 80129c2:	b538      	push	{r3, r4, r5, lr}
 80129c4:	4604      	mov	r4, r0
 80129c6:	460d      	mov	r5, r1
 80129c8:	d904      	bls.n	80129d4 <_raise_r+0x14>
 80129ca:	2316      	movs	r3, #22
 80129cc:	6003      	str	r3, [r0, #0]
 80129ce:	f04f 30ff 	mov.w	r0, #4294967295
 80129d2:	bd38      	pop	{r3, r4, r5, pc}
 80129d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80129d6:	b112      	cbz	r2, 80129de <_raise_r+0x1e>
 80129d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80129dc:	b94b      	cbnz	r3, 80129f2 <_raise_r+0x32>
 80129de:	4620      	mov	r0, r4
 80129e0:	f000 f830 	bl	8012a44 <_getpid_r>
 80129e4:	462a      	mov	r2, r5
 80129e6:	4601      	mov	r1, r0
 80129e8:	4620      	mov	r0, r4
 80129ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129ee:	f000 b817 	b.w	8012a20 <_kill_r>
 80129f2:	2b01      	cmp	r3, #1
 80129f4:	d00a      	beq.n	8012a0c <_raise_r+0x4c>
 80129f6:	1c59      	adds	r1, r3, #1
 80129f8:	d103      	bne.n	8012a02 <_raise_r+0x42>
 80129fa:	2316      	movs	r3, #22
 80129fc:	6003      	str	r3, [r0, #0]
 80129fe:	2001      	movs	r0, #1
 8012a00:	e7e7      	b.n	80129d2 <_raise_r+0x12>
 8012a02:	2400      	movs	r4, #0
 8012a04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012a08:	4628      	mov	r0, r5
 8012a0a:	4798      	blx	r3
 8012a0c:	2000      	movs	r0, #0
 8012a0e:	e7e0      	b.n	80129d2 <_raise_r+0x12>

08012a10 <raise>:
 8012a10:	4b02      	ldr	r3, [pc, #8]	; (8012a1c <raise+0xc>)
 8012a12:	4601      	mov	r1, r0
 8012a14:	6818      	ldr	r0, [r3, #0]
 8012a16:	f7ff bfd3 	b.w	80129c0 <_raise_r>
 8012a1a:	bf00      	nop
 8012a1c:	200002c8 	.word	0x200002c8

08012a20 <_kill_r>:
 8012a20:	b538      	push	{r3, r4, r5, lr}
 8012a22:	4d07      	ldr	r5, [pc, #28]	; (8012a40 <_kill_r+0x20>)
 8012a24:	2300      	movs	r3, #0
 8012a26:	4604      	mov	r4, r0
 8012a28:	4608      	mov	r0, r1
 8012a2a:	4611      	mov	r1, r2
 8012a2c:	602b      	str	r3, [r5, #0]
 8012a2e:	f7ee ffb1 	bl	8001994 <_kill>
 8012a32:	1c43      	adds	r3, r0, #1
 8012a34:	d102      	bne.n	8012a3c <_kill_r+0x1c>
 8012a36:	682b      	ldr	r3, [r5, #0]
 8012a38:	b103      	cbz	r3, 8012a3c <_kill_r+0x1c>
 8012a3a:	6023      	str	r3, [r4, #0]
 8012a3c:	bd38      	pop	{r3, r4, r5, pc}
 8012a3e:	bf00      	nop
 8012a40:	20000748 	.word	0x20000748

08012a44 <_getpid_r>:
 8012a44:	f7ee bf9e 	b.w	8001984 <_getpid>

08012a48 <__sread>:
 8012a48:	b510      	push	{r4, lr}
 8012a4a:	460c      	mov	r4, r1
 8012a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a50:	f000 f894 	bl	8012b7c <_read_r>
 8012a54:	2800      	cmp	r0, #0
 8012a56:	bfab      	itete	ge
 8012a58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012a5a:	89a3      	ldrhlt	r3, [r4, #12]
 8012a5c:	181b      	addge	r3, r3, r0
 8012a5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012a62:	bfac      	ite	ge
 8012a64:	6563      	strge	r3, [r4, #84]	; 0x54
 8012a66:	81a3      	strhlt	r3, [r4, #12]
 8012a68:	bd10      	pop	{r4, pc}

08012a6a <__swrite>:
 8012a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a6e:	461f      	mov	r7, r3
 8012a70:	898b      	ldrh	r3, [r1, #12]
 8012a72:	05db      	lsls	r3, r3, #23
 8012a74:	4605      	mov	r5, r0
 8012a76:	460c      	mov	r4, r1
 8012a78:	4616      	mov	r6, r2
 8012a7a:	d505      	bpl.n	8012a88 <__swrite+0x1e>
 8012a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a80:	2302      	movs	r3, #2
 8012a82:	2200      	movs	r2, #0
 8012a84:	f000 f868 	bl	8012b58 <_lseek_r>
 8012a88:	89a3      	ldrh	r3, [r4, #12]
 8012a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a92:	81a3      	strh	r3, [r4, #12]
 8012a94:	4632      	mov	r2, r6
 8012a96:	463b      	mov	r3, r7
 8012a98:	4628      	mov	r0, r5
 8012a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a9e:	f000 b817 	b.w	8012ad0 <_write_r>

08012aa2 <__sseek>:
 8012aa2:	b510      	push	{r4, lr}
 8012aa4:	460c      	mov	r4, r1
 8012aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012aaa:	f000 f855 	bl	8012b58 <_lseek_r>
 8012aae:	1c43      	adds	r3, r0, #1
 8012ab0:	89a3      	ldrh	r3, [r4, #12]
 8012ab2:	bf15      	itete	ne
 8012ab4:	6560      	strne	r0, [r4, #84]	; 0x54
 8012ab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012aba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012abe:	81a3      	strheq	r3, [r4, #12]
 8012ac0:	bf18      	it	ne
 8012ac2:	81a3      	strhne	r3, [r4, #12]
 8012ac4:	bd10      	pop	{r4, pc}

08012ac6 <__sclose>:
 8012ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012aca:	f000 b813 	b.w	8012af4 <_close_r>
	...

08012ad0 <_write_r>:
 8012ad0:	b538      	push	{r3, r4, r5, lr}
 8012ad2:	4d07      	ldr	r5, [pc, #28]	; (8012af0 <_write_r+0x20>)
 8012ad4:	4604      	mov	r4, r0
 8012ad6:	4608      	mov	r0, r1
 8012ad8:	4611      	mov	r1, r2
 8012ada:	2200      	movs	r2, #0
 8012adc:	602a      	str	r2, [r5, #0]
 8012ade:	461a      	mov	r2, r3
 8012ae0:	f7ee ff8f 	bl	8001a02 <_write>
 8012ae4:	1c43      	adds	r3, r0, #1
 8012ae6:	d102      	bne.n	8012aee <_write_r+0x1e>
 8012ae8:	682b      	ldr	r3, [r5, #0]
 8012aea:	b103      	cbz	r3, 8012aee <_write_r+0x1e>
 8012aec:	6023      	str	r3, [r4, #0]
 8012aee:	bd38      	pop	{r3, r4, r5, pc}
 8012af0:	20000748 	.word	0x20000748

08012af4 <_close_r>:
 8012af4:	b538      	push	{r3, r4, r5, lr}
 8012af6:	4d06      	ldr	r5, [pc, #24]	; (8012b10 <_close_r+0x1c>)
 8012af8:	2300      	movs	r3, #0
 8012afa:	4604      	mov	r4, r0
 8012afc:	4608      	mov	r0, r1
 8012afe:	602b      	str	r3, [r5, #0]
 8012b00:	f7ee ff9b 	bl	8001a3a <_close>
 8012b04:	1c43      	adds	r3, r0, #1
 8012b06:	d102      	bne.n	8012b0e <_close_r+0x1a>
 8012b08:	682b      	ldr	r3, [r5, #0]
 8012b0a:	b103      	cbz	r3, 8012b0e <_close_r+0x1a>
 8012b0c:	6023      	str	r3, [r4, #0]
 8012b0e:	bd38      	pop	{r3, r4, r5, pc}
 8012b10:	20000748 	.word	0x20000748

08012b14 <_fstat_r>:
 8012b14:	b538      	push	{r3, r4, r5, lr}
 8012b16:	4d07      	ldr	r5, [pc, #28]	; (8012b34 <_fstat_r+0x20>)
 8012b18:	2300      	movs	r3, #0
 8012b1a:	4604      	mov	r4, r0
 8012b1c:	4608      	mov	r0, r1
 8012b1e:	4611      	mov	r1, r2
 8012b20:	602b      	str	r3, [r5, #0]
 8012b22:	f7ee ff96 	bl	8001a52 <_fstat>
 8012b26:	1c43      	adds	r3, r0, #1
 8012b28:	d102      	bne.n	8012b30 <_fstat_r+0x1c>
 8012b2a:	682b      	ldr	r3, [r5, #0]
 8012b2c:	b103      	cbz	r3, 8012b30 <_fstat_r+0x1c>
 8012b2e:	6023      	str	r3, [r4, #0]
 8012b30:	bd38      	pop	{r3, r4, r5, pc}
 8012b32:	bf00      	nop
 8012b34:	20000748 	.word	0x20000748

08012b38 <_isatty_r>:
 8012b38:	b538      	push	{r3, r4, r5, lr}
 8012b3a:	4d06      	ldr	r5, [pc, #24]	; (8012b54 <_isatty_r+0x1c>)
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	4604      	mov	r4, r0
 8012b40:	4608      	mov	r0, r1
 8012b42:	602b      	str	r3, [r5, #0]
 8012b44:	f7ee ff95 	bl	8001a72 <_isatty>
 8012b48:	1c43      	adds	r3, r0, #1
 8012b4a:	d102      	bne.n	8012b52 <_isatty_r+0x1a>
 8012b4c:	682b      	ldr	r3, [r5, #0]
 8012b4e:	b103      	cbz	r3, 8012b52 <_isatty_r+0x1a>
 8012b50:	6023      	str	r3, [r4, #0]
 8012b52:	bd38      	pop	{r3, r4, r5, pc}
 8012b54:	20000748 	.word	0x20000748

08012b58 <_lseek_r>:
 8012b58:	b538      	push	{r3, r4, r5, lr}
 8012b5a:	4d07      	ldr	r5, [pc, #28]	; (8012b78 <_lseek_r+0x20>)
 8012b5c:	4604      	mov	r4, r0
 8012b5e:	4608      	mov	r0, r1
 8012b60:	4611      	mov	r1, r2
 8012b62:	2200      	movs	r2, #0
 8012b64:	602a      	str	r2, [r5, #0]
 8012b66:	461a      	mov	r2, r3
 8012b68:	f7ee ff8e 	bl	8001a88 <_lseek>
 8012b6c:	1c43      	adds	r3, r0, #1
 8012b6e:	d102      	bne.n	8012b76 <_lseek_r+0x1e>
 8012b70:	682b      	ldr	r3, [r5, #0]
 8012b72:	b103      	cbz	r3, 8012b76 <_lseek_r+0x1e>
 8012b74:	6023      	str	r3, [r4, #0]
 8012b76:	bd38      	pop	{r3, r4, r5, pc}
 8012b78:	20000748 	.word	0x20000748

08012b7c <_read_r>:
 8012b7c:	b538      	push	{r3, r4, r5, lr}
 8012b7e:	4d07      	ldr	r5, [pc, #28]	; (8012b9c <_read_r+0x20>)
 8012b80:	4604      	mov	r4, r0
 8012b82:	4608      	mov	r0, r1
 8012b84:	4611      	mov	r1, r2
 8012b86:	2200      	movs	r2, #0
 8012b88:	602a      	str	r2, [r5, #0]
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	f7ee ff1c 	bl	80019c8 <_read>
 8012b90:	1c43      	adds	r3, r0, #1
 8012b92:	d102      	bne.n	8012b9a <_read_r+0x1e>
 8012b94:	682b      	ldr	r3, [r5, #0]
 8012b96:	b103      	cbz	r3, 8012b9a <_read_r+0x1e>
 8012b98:	6023      	str	r3, [r4, #0]
 8012b9a:	bd38      	pop	{r3, r4, r5, pc}
 8012b9c:	20000748 	.word	0x20000748

08012ba0 <_init>:
 8012ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ba2:	bf00      	nop
 8012ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ba6:	bc08      	pop	{r3}
 8012ba8:	469e      	mov	lr, r3
 8012baa:	4770      	bx	lr

08012bac <_fini>:
 8012bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bae:	bf00      	nop
 8012bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bb2:	bc08      	pop	{r3}
 8012bb4:	469e      	mov	lr, r3
 8012bb6:	4770      	bx	lr
