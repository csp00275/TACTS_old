
TACTS_testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012978  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  08012b48  08012b48  00022b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801324c  0801324c  0003049c  2**0
                  CONTENTS
  4 .ARM          00000008  0801324c  0801324c  0002324c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013254  08013254  0003049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013254  08013254  00023254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013258  08013258  00023258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000049c  20000000  0801325c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000049c  080136f8  0003049c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  080136f8  0003076c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003049c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002028d  00000000  00000000  000304cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038e7  00000000  00000000  00050759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  00054040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  00055760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029607  00000000  00000000  00056cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021665  00000000  00000000  000802ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9646  00000000  00000000  000a1964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019afaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007710  00000000  00000000  0019affc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000049c 	.word	0x2000049c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012b30 	.word	0x08012b30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004a0 	.word	0x200004a0
 800020c:	08012b30 	.word	0x08012b30

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b59      	ldr	r3, [pc, #356]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a58      	ldr	r2, [pc, #352]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b53      	ldr	r3, [pc, #332]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a52      	ldr	r2, [pc, #328]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b50      	ldr	r3, [pc, #320]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800107e:	4b4d      	ldr	r3, [pc, #308]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a4c      	ldr	r2, [pc, #304]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001096:	4b47      	ldr	r3, [pc, #284]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a46      	ldr	r2, [pc, #280]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800109c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b44      	ldr	r3, [pc, #272]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ae:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a40      	ldr	r2, [pc, #256]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2110      	movs	r1, #16
 80010ca:	483b      	ldr	r0, [pc, #236]	; (80011b8 <MX_GPIO_Init+0x180>)
 80010cc:	f001 fd62 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	210f      	movs	r1, #15
 80010d4:	4839      	ldr	r0, [pc, #228]	; (80011bc <MX_GPIO_Init+0x184>)
 80010d6:	f001 fd5d 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	21c0      	movs	r1, #192	; 0xc0
 80010de:	4838      	ldr	r0, [pc, #224]	; (80011c0 <MX_GPIO_Init+0x188>)
 80010e0:	f001 fd58 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010e4:	2310      	movs	r3, #16
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	482f      	ldr	r0, [pc, #188]	; (80011b8 <MX_GPIO_Init+0x180>)
 80010fc:	f001 f9ba 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001100:	230f      	movs	r3, #15
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4829      	ldr	r0, [pc, #164]	; (80011bc <MX_GPIO_Init+0x184>)
 8001118:	f001 f9ac 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800111c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001122:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4824      	ldr	r0, [pc, #144]	; (80011c4 <MX_GPIO_Init+0x18c>)
 8001134:	f001 f99e 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001138:	23c0      	movs	r3, #192	; 0xc0
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	481c      	ldr	r0, [pc, #112]	; (80011c0 <MX_GPIO_Init+0x188>)
 8001150:	f001 f990 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001154:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4813      	ldr	r0, [pc, #76]	; (80011b8 <MX_GPIO_Init+0x180>)
 800116a:	f001 f983 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800116e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001174:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <MX_GPIO_Init+0x180>)
 8001186:	f001 f975 	bl	8002474 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2017      	movs	r0, #23
 8001190:	f001 f88e 	bl	80022b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001194:	2017      	movs	r0, #23
 8001196:	f001 f8b7 	bl	8002308 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2028      	movs	r0, #40	; 0x28
 80011a0:	f001 f886 	bl	80022b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011a4:	2028      	movs	r0, #40	; 0x28
 80011a6:	f001 f8af 	bl	8002308 <HAL_NVIC_EnableIRQ>

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40022000 	.word	0x40022000
 80011c0:	40021800 	.word	0x40021800
 80011c4:	40020000 	.word	0x40020000

080011c8 <HX711_Init>:




void HX711_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2102      	movs	r1, #2
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <HX711_Init+0x14>)
 80011d2:	f001 fcdf 	bl	8002b94 <HAL_GPIO_WritePin>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40022000 	.word	0x40022000

080011e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_I2C1_Init+0x74>)
 80011e6:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <MX_I2C1_Init+0x78>)
 80011e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_I2C1_Init+0x74>)
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <MX_I2C1_Init+0x7c>)
 80011ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_I2C1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <MX_I2C1_Init+0x74>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_I2C1_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_I2C1_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_I2C1_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_I2C1_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_I2C1_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <MX_I2C1_Init+0x74>)
 800121c:	f001 fcfe 	bl	8002c1c <HAL_I2C_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001226:	f000 fb89 	bl	800193c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800122a:	2100      	movs	r1, #0
 800122c:	4809      	ldr	r0, [pc, #36]	; (8001254 <MX_I2C1_Init+0x74>)
 800122e:	f002 fab7 	bl	80037a0 <HAL_I2CEx_ConfigAnalogFilter>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001238:	f000 fb80 	bl	800193c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800123c:	2100      	movs	r1, #0
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_I2C1_Init+0x74>)
 8001240:	f002 fb24 	bl	800388c <HAL_I2CEx_ConfigDigitalFilter>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800124a:	f000 fb77 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200004b8 	.word	0x200004b8
 8001258:	40005400 	.word	0x40005400
 800125c:	6000030d 	.word	0x6000030d

08001260 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b0aa      	sub	sp, #168	; 0xa8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	2284      	movs	r2, #132	; 0x84
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f00c ffe5 	bl	800e250 <memset>
  if(i2cHandle->Instance==I2C1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a22      	ldr	r2, [pc, #136]	; (8001314 <HAL_I2C_MspInit+0xb4>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d13c      	bne.n	800130a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001290:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001294:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001296:	2300      	movs	r3, #0
 8001298:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	4618      	mov	r0, r3
 80012a0:	f003 f9b4 	bl	800460c <HAL_RCCEx_PeriphCLKConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012aa:	f000 fb47 	bl	800193c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_I2C_MspInit+0xb8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a19      	ldr	r2, [pc, #100]	; (8001318 <HAL_I2C_MspInit+0xb8>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_I2C_MspInit+0xb8>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ce:	2312      	movs	r3, #18
 80012d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e0:	2304      	movs	r3, #4
 80012e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012ea:	4619      	mov	r1, r3
 80012ec:	480b      	ldr	r0, [pc, #44]	; (800131c <HAL_I2C_MspInit+0xbc>)
 80012ee:	f001 f8c1 	bl	8002474 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_I2C_MspInit+0xb8>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <HAL_I2C_MspInit+0xb8>)
 80012f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_I2C_MspInit+0xb8>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800130a:	bf00      	nop
 800130c:	37a8      	adds	r7, #168	; 0xa8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40005400 	.word	0x40005400
 8001318:	40023800 	.word	0x40023800
 800131c:	40020400 	.word	0x40020400

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	f5ad 6d36 	sub.w	sp, sp, #2912	; 0xb60
 8001326:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001328:	f000 fe51 	bl	8001fce <HAL_Init>

  /* USER CODE BEGIN Init */

	// VL53L0X initialization stuff
	//
	uint32_t refSpadCount = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 3b2c 	str.w	r3, [r7, #2860]	; 0xb2c
	uint8_t isApertureSpads = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	f887 3b2b 	strb.w	r3, [r7, #2859]	; 0xb2b
	uint8_t VhvSettings = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	f887 3b2a 	strb.w	r3, [r7, #2858]	; 0xb2a
	uint8_t PhaseCal = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	f887 3b29 	strb.w	r3, [r7, #2857]	; 0xb29
	VL53L0X_Dev_t vl53l0x_s[NUM_SENSOR];
//	VL53L0X_Dev_t vl53l0x_s;

	VL53L0X_DEV Dev;
	//KalmanFilter kalman_filters[NUM_SENSOR];
	uint16_t distance[NUM_SENSOR] = {0,};
 8001344:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8001348:	f5a3 6333 	sub.w	r3, r3, #2864	; 0xb30
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	819a      	strh	r2, [r3, #12]
	float filtered_distance[NUM_SENSOR] = {0,};
 8001356:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800135a:	f6a3 334c 	subw	r3, r3, #2892	; 0xb4c
 800135e:	461a      	mov	r2, r3
 8001360:	2300      	movs	r3, #0
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	6053      	str	r3, [r2, #4]
 8001366:	6093      	str	r3, [r2, #8]
 8001368:	60d3      	str	r3, [r2, #12]
 800136a:	6113      	str	r3, [r2, #16]
 800136c:	6153      	str	r3, [r2, #20]
 800136e:	6193      	str	r3, [r2, #24]

	uint8_t tca_ch[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}; // control register of TCA9548A
 8001370:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8001374:	f6a3 3354 	subw	r3, r3, #2900	; 0xb54
 8001378:	4ac2      	ldr	r2, [pc, #776]	; (8001684 <main+0x364>)
 800137a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800137e:	e883 0003 	stmia.w	r3, {r0, r1}
	//uint8_t tca_ch[8] = {0b00000001, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000, 0b10000000};
	uint8_t tca_ch_reset = 0x00;
 8001382:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8001386:	f6a3 3355 	subw	r3, r3, #2901	; 0xb55
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
	//uint8_t tca_ch_reset = 0b00000000;
    uint8_t tca_addr[] = {0x70};
 800138e:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8001392:	f6a3 3358 	subw	r3, r3, #2904	; 0xb58
 8001396:	2270      	movs	r2, #112	; 0x70
 8001398:	701a      	strb	r2, [r3, #0]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139a:	f000 f9d1 	bl	8001740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139e:	f7ff fe4b 	bl	8001038 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013a2:	f7ff ff1d 	bl	80011e0 <MX_I2C1_Init>
  MX_TIM7_Init();
 80013a6:	f000 fc99 	bl	8001cdc <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80013aa:	f000 fd35 	bl	8001e18 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80013ae:	f000 fc1f 	bl	8001bf0 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80013b2:	f000 fa33 	bl	800181c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80013b6:	2100      	movs	r1, #0
 80013b8:	48b3      	ldr	r0, [pc, #716]	; (8001688 <main+0x368>)
 80013ba:	f004 fb55 	bl	8005a68 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80013be:	2201      	movs	r2, #1
 80013c0:	49b2      	ldr	r1, [pc, #712]	; (800168c <main+0x36c>)
 80013c2:	48b3      	ldr	r0, [pc, #716]	; (8001690 <main+0x370>)
 80013c4:	f006 fb8b 	bl	8007ade <HAL_UART_Receive_IT>

  // Initialize the HX711
  HX711_Init();
 80013c8:	f7ff fefe 	bl	80011c8 <HX711_Init>

  /* UART interrupt initialization */
  MessageLen = sprintf((char*)Message, "JH VL53L0X test\n\r");
 80013cc:	49b1      	ldr	r1, [pc, #708]	; (8001694 <main+0x374>)
 80013ce:	48b2      	ldr	r0, [pc, #712]	; (8001698 <main+0x378>)
 80013d0:	f00d fdc6 	bl	800ef60 <siprintf>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4bb0      	ldr	r3, [pc, #704]	; (800169c <main+0x37c>)
 80013da:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 80013dc:	4baf      	ldr	r3, [pc, #700]	; (800169c <main+0x37c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	2364      	movs	r3, #100	; 0x64
 80013e4:	49ac      	ldr	r1, [pc, #688]	; (8001698 <main+0x378>)
 80013e6:	48aa      	ldr	r0, [pc, #680]	; (8001690 <main+0x370>)
 80013e8:	f006 faf6 	bl	80079d8 <HAL_UART_Transmit>



		for (int i = 0; i < sizeof(tca_addr); i++) {
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 3b54 	str.w	r3, [r7, #2900]	; 0xb54
 80013f2:	e017      	b.n	8001424 <main+0x104>
		    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[i] << 1, &tca_ch_reset, 1, 1000);
 80013f4:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 80013f8:	f6a3 3258 	subw	r2, r3, #2904	; 0xb58
 80013fc:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 8001400:	4413      	add	r3, r2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	b29b      	uxth	r3, r3
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	b299      	uxth	r1, r3
 800140a:	1cfa      	adds	r2, r7, #3
 800140c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2301      	movs	r3, #1
 8001414:	48a2      	ldr	r0, [pc, #648]	; (80016a0 <main+0x380>)
 8001416:	f001 fd23 	bl	8002e60 <HAL_I2C_Master_Transmit>
		for (int i = 0; i < sizeof(tca_addr); i++) {
 800141a:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 800141e:	3301      	adds	r3, #1
 8001420:	f8c7 3b54 	str.w	r3, [r7, #2900]	; 0xb54
 8001424:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0e3      	beq.n	80013f4 <main+0xd4>
		}

		for (int i = 0; i < NUM_SENSOR; i++) {
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 3b50 	str.w	r3, [r7, #2896]	; 0xb50
 8001432:	e0bc      	b.n	80015ae <main+0x28e>

			uint8_t q = i / 8;
 8001434:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 8001438:	2b00      	cmp	r3, #0
 800143a:	da00      	bge.n	800143e <main+0x11e>
 800143c:	3307      	adds	r3, #7
 800143e:	10db      	asrs	r3, r3, #3
 8001440:	f887 3b37 	strb.w	r3, [r7, #2871]	; 0xb37
			uint8_t r = i % 8;
 8001444:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 8001448:	425a      	negs	r2, r3
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	f002 0207 	and.w	r2, r2, #7
 8001452:	bf58      	it	pl
 8001454:	4253      	negpl	r3, r2
 8001456:	f887 3b36 	strb.w	r3, [r7, #2870]	; 0xb36

		    for (int j = 0; j < sizeof(tca_addr); j++) {
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 3b4c 	str.w	r3, [r7, #2892]	; 0xb4c
 8001460:	e026      	b.n	80014b0 <main+0x190>
		        uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 8001462:	f897 3b37 	ldrb.w	r3, [r7, #2871]	; 0xb37
 8001466:	f8d7 2b4c 	ldr.w	r2, [r7, #2892]	; 0xb4c
 800146a:	429a      	cmp	r2, r3
 800146c:	d104      	bne.n	8001478 <main+0x158>
 800146e:	f897 3b36 	ldrb.w	r3, [r7, #2870]	; 0xb36
 8001472:	1d3a      	adds	r2, r7, #4
 8001474:	4413      	add	r3, r2
 8001476:	e000      	b.n	800147a <main+0x15a>
 8001478:	1cfb      	adds	r3, r7, #3
 800147a:	f8c7 3b30 	str.w	r3, [r7, #2864]	; 0xb30
		        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 800147e:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8001482:	f6a3 3258 	subw	r2, r3, #2904	; 0xb58
 8001486:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	b299      	uxth	r1, r3
 8001494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2301      	movs	r3, #1
 800149c:	f8d7 2b30 	ldr.w	r2, [r7, #2864]	; 0xb30
 80014a0:	487f      	ldr	r0, [pc, #508]	; (80016a0 <main+0x380>)
 80014a2:	f001 fcdd 	bl	8002e60 <HAL_I2C_Master_Transmit>
		    for (int j = 0; j < sizeof(tca_addr); j++) {
 80014a6:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 80014aa:	3301      	adds	r3, #1
 80014ac:	f8c7 3b4c 	str.w	r3, [r7, #2892]	; 0xb4c
 80014b0:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0d4      	beq.n	8001462 <main+0x142>
		    }

			Dev = &vl53l0x_s[i];
 80014b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80014bc:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 80014c0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80014c4:	fb01 f303 	mul.w	r3, r1, r3
 80014c8:	4413      	add	r3, r2
 80014ca:	f8c7 3b3c 	str.w	r3, [r7, #2876]	; 0xb3c
			Dev->I2cHandle = &hi2c1;
 80014ce:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 80014d2:	4a73      	ldr	r2, [pc, #460]	; (80016a0 <main+0x380>)
 80014d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
			Dev->I2cDevAddr = VL53L0X_ADDR;
 80014d8:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 80014dc:	2252      	movs	r2, #82	; 0x52
 80014de:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

			VL53L0X_WaitDeviceBooted( Dev );
 80014e2:	f8d7 0b3c 	ldr.w	r0, [r7, #2876]	; 0xb3c
 80014e6:	f008 f947 	bl	8009778 <VL53L0X_WaitDeviceBooted>
			VL53L0X_DataInit( Dev );
 80014ea:	f8d7 0b3c 	ldr.w	r0, [r7, #2876]	; 0xb3c
 80014ee:	f007 fe5d 	bl	80091ac <VL53L0X_DataInit>
			VL53L0X_StaticInit( Dev );
 80014f2:	f8d7 0b3c 	ldr.w	r0, [r7, #2876]	; 0xb3c
 80014f6:	f007 ffbd 	bl	8009474 <VL53L0X_StaticInit>
			VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80014fa:	2101      	movs	r1, #1
 80014fc:	f8d7 0b3c 	ldr.w	r0, [r7, #2876]	; 0xb3c
 8001500:	f008 f9d8 	bl	80098b4 <VL53L0X_SetDeviceMode>
			VL53L0X_PerformRefCalibration( Dev, &VhvSettings, &PhaseCal);
 8001504:	f607 3229 	addw	r2, r7, #2857	; 0xb29
 8001508:	f607 332a 	addw	r3, r7, #2858	; 0xb2a
 800150c:	4619      	mov	r1, r3
 800150e:	f8d7 0b3c 	ldr.w	r0, [r7, #2876]	; 0xb3c
 8001512:	f008 fe51 	bl	800a1b8 <VL53L0X_PerformRefCalibration>
			VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount, &isApertureSpads);
 8001516:	f607 322b 	addw	r2, r7, #2859	; 0xb2b
 800151a:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 800151e:	4619      	mov	r1, r3
 8001520:	f8d7 0b3c 	ldr.w	r0, [r7, #2876]	; 0xb3c
 8001524:	f009 fad6 	bl	800aad4 <VL53L0X_PerformRefSpadManagement>
			VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8001528:	2201      	movs	r2, #1
 800152a:	2100      	movs	r1, #0
 800152c:	f8d7 0b3c 	ldr.w	r0, [r7, #2876]	; 0xb3c
 8001530:	f008 fc3c 	bl	8009dac <VL53L0X_SetLimitCheckEnable>
			VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8001534:	2201      	movs	r2, #1
 8001536:	2101      	movs	r1, #1
 8001538:	f8d7 0b3c 	ldr.w	r0, [r7, #2876]	; 0xb3c
 800153c:	f008 fc36 	bl	8009dac <VL53L0X_SetLimitCheckEnable>
			VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8001540:	f641 1299 	movw	r2, #6553	; 0x1999
 8001544:	2101      	movs	r1, #1
 8001546:	f8d7 0b3c 	ldr.w	r0, [r7, #2876]	; 0xb3c
 800154a:	f008 fcdf 	bl	8009f0c <VL53L0X_SetLimitCheckValue>
			VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800154e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001552:	2100      	movs	r1, #0
 8001554:	f8d7 0b3c 	ldr.w	r0, [r7, #2876]	; 0xb3c
 8001558:	f008 fcd8 	bl	8009f0c <VL53L0X_SetLimitCheckValue>
			VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 800155c:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001560:	f8d7 0b3c 	ldr.w	r0, [r7, #2876]	; 0xb3c
 8001564:	f008 fa04 	bl	8009970 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
			VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001568:	2212      	movs	r2, #18
 800156a:	2100      	movs	r1, #0
 800156c:	f8d7 0b3c 	ldr.w	r0, [r7, #2876]	; 0xb3c
 8001570:	f008 fa24 	bl	80099bc <VL53L0X_SetVcselPulsePeriod>
			VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001574:	220e      	movs	r2, #14
 8001576:	2101      	movs	r1, #1
 8001578:	f8d7 0b3c 	ldr.w	r0, [r7, #2876]	; 0xb3c
 800157c:	f008 fa1e 	bl	80099bc <VL53L0X_SetVcselPulsePeriod>
			float R = 1.0f;   // Measurement noise covariance
			KalmanFilter_Init(&kalman_filters[i], Q, R);
			// KalmanFilter initializer END //			 */


			MessageLen = sprintf((char*)Message, "%d complete \n\r",i);
 8001580:	f8d7 2b50 	ldr.w	r2, [r7, #2896]	; 0xb50
 8001584:	4947      	ldr	r1, [pc, #284]	; (80016a4 <main+0x384>)
 8001586:	4844      	ldr	r0, [pc, #272]	; (8001698 <main+0x378>)
 8001588:	f00d fcea 	bl	800ef60 <siprintf>
 800158c:	4603      	mov	r3, r0
 800158e:	b2da      	uxtb	r2, r3
 8001590:	4b42      	ldr	r3, [pc, #264]	; (800169c <main+0x37c>)
 8001592:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 8001594:	4b41      	ldr	r3, [pc, #260]	; (800169c <main+0x37c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b29a      	uxth	r2, r3
 800159a:	2364      	movs	r3, #100	; 0x64
 800159c:	493e      	ldr	r1, [pc, #248]	; (8001698 <main+0x378>)
 800159e:	483c      	ldr	r0, [pc, #240]	; (8001690 <main+0x370>)
 80015a0:	f006 fa1a 	bl	80079d8 <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 80015a4:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 80015a8:	3301      	adds	r3, #1
 80015aa:	f8c7 3b50 	str.w	r3, [r7, #2896]	; 0xb50
 80015ae:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	f77f af3e 	ble.w	8001434 <main+0x114>
  {

//  	  uint32_t start = HAL_GetTick();


		   for (int i = 0; i < NUM_SENSOR; i++) {
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 3b48 	str.w	r3, [r7, #2888]	; 0xb48
 80015be:	e09e      	b.n	80016fe <main+0x3de>

				uint8_t q = i / 8;
 80015c0:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	da00      	bge.n	80015ca <main+0x2aa>
 80015c8:	3307      	adds	r3, #7
 80015ca:	10db      	asrs	r3, r3, #3
 80015cc:	f887 3b43 	strb.w	r3, [r7, #2883]	; 0xb43
				uint8_t r = i % 8;
 80015d0:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 80015d4:	425a      	negs	r2, r3
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	f002 0207 	and.w	r2, r2, #7
 80015de:	bf58      	it	pl
 80015e0:	4253      	negpl	r3, r2
 80015e2:	f887 3b42 	strb.w	r3, [r7, #2882]	; 0xb42

			    for (int j = 0; j < sizeof(tca_addr); j++) {
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 3b44 	str.w	r3, [r7, #2884]	; 0xb44
 80015ec:	e026      	b.n	800163c <main+0x31c>
			        uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 80015ee:	f897 3b43 	ldrb.w	r3, [r7, #2883]	; 0xb43
 80015f2:	f8d7 2b44 	ldr.w	r2, [r7, #2884]	; 0xb44
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d104      	bne.n	8001604 <main+0x2e4>
 80015fa:	f897 3b42 	ldrb.w	r3, [r7, #2882]	; 0xb42
 80015fe:	1d3a      	adds	r2, r7, #4
 8001600:	4413      	add	r3, r2
 8001602:	e000      	b.n	8001606 <main+0x2e6>
 8001604:	1cfb      	adds	r3, r7, #3
 8001606:	f8c7 3b38 	str.w	r3, [r7, #2872]	; 0xb38
			        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 800160a:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800160e:	f6a3 3258 	subw	r2, r3, #2904	; 0xb58
 8001612:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 8001616:	4413      	add	r3, r2
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	b299      	uxth	r1, r3
 8001620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2301      	movs	r3, #1
 8001628:	f8d7 2b38 	ldr.w	r2, [r7, #2872]	; 0xb38
 800162c:	481c      	ldr	r0, [pc, #112]	; (80016a0 <main+0x380>)
 800162e:	f001 fc17 	bl	8002e60 <HAL_I2C_Master_Transmit>
			    for (int j = 0; j < sizeof(tca_addr); j++) {
 8001632:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 8001636:	3301      	adds	r3, #1
 8001638:	f8c7 3b44 	str.w	r3, [r7, #2884]	; 0xb44
 800163c:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0d4      	beq.n	80015ee <main+0x2ce>
			    }

		       Dev = &vl53l0x_s[i];
 8001644:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001648:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800164c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	4413      	add	r3, r2
 8001656:	f8c7 3b3c 	str.w	r3, [r7, #2876]	; 0xb3c

		       VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 800165a:	4913      	ldr	r1, [pc, #76]	; (80016a8 <main+0x388>)
 800165c:	f8d7 0b3c 	ldr.w	r0, [r7, #2876]	; 0xb3c
 8001660:	f009 fa4d 	bl	800aafe <VL53L0X_PerformContinuousRangingMeasurement>
		       if (RangingData.RangeStatus == 0) {
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <main+0x388>)
 8001666:	7e1b      	ldrb	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d11f      	bne.n	80016ac <main+0x38c>
		    	   distance[i] = RangingData.RangeMilliMeter;
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <main+0x388>)
 800166e:	8919      	ldrh	r1, [r3, #8]
 8001670:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8001674:	f5a3 6333 	sub.w	r3, r3, #2864	; 0xb30
 8001678:	f8d7 2b48 	ldr.w	r2, [r7, #2888]	; 0xb48
 800167c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001680:	e01e      	b.n	80016c0 <main+0x3a0>
 8001682:	bf00      	nop
 8001684:	08012b74 	.word	0x08012b74
 8001688:	200005f8 	.word	0x200005f8
 800168c:	2000058e 	.word	0x2000058e
 8001690:	20000690 	.word	0x20000690
 8001694:	08012b48 	.word	0x08012b48
 8001698:	20000590 	.word	0x20000590
 800169c:	200005d0 	.word	0x200005d0
 80016a0:	200004b8 	.word	0x200004b8
 80016a4:	08012b5c 	.word	0x08012b5c
 80016a8:	200005d4 	.word	0x200005d4
		       }else{
		    	   distance[i] = 555;
 80016ac:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 80016b0:	f5a3 6333 	sub.w	r3, r3, #2864	; 0xb30
 80016b4:	f8d7 2b48 	ldr.w	r2, [r7, #2888]	; 0xb48
 80016b8:	f240 212b 	movw	r1, #555	; 0x22b
 80016bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		       }

	           MessageLen = sprintf((char*)Message, "%d ",distance[i]);
 80016c0:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 80016c4:	f5a3 6333 	sub.w	r3, r3, #2864	; 0xb30
 80016c8:	f8d7 2b48 	ldr.w	r2, [r7, #2888]	; 0xb48
 80016cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4916      	ldr	r1, [pc, #88]	; (800172c <main+0x40c>)
 80016d4:	4816      	ldr	r0, [pc, #88]	; (8001730 <main+0x410>)
 80016d6:	f00d fc43 	bl	800ef60 <siprintf>
 80016da:	4603      	mov	r3, r0
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <main+0x414>)
 80016e0:	701a      	strb	r2, [r3, #0]
	           HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <main+0x414>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ec:	4910      	ldr	r1, [pc, #64]	; (8001730 <main+0x410>)
 80016ee:	4812      	ldr	r0, [pc, #72]	; (8001738 <main+0x418>)
 80016f0:	f006 f972 	bl	80079d8 <HAL_UART_Transmit>
		   for (int i = 0; i < NUM_SENSOR; i++) {
 80016f4:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 80016f8:	3301      	adds	r3, #1
 80016fa:	f8c7 3b48 	str.w	r3, [r7, #2888]	; 0xb48
 80016fe:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 8001702:	2b06      	cmp	r3, #6
 8001704:	f77f af5c 	ble.w	80015c0 <main+0x2a0>
//		for(int i=0; i<3; i++){
//			MessageLen = sprintf((char*)Message, "%.8f ",r5[i][0]);
//			HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
//		}

		MessageLen = sprintf((char*)Message, "\n");
 8001708:	490c      	ldr	r1, [pc, #48]	; (800173c <main+0x41c>)
 800170a:	4809      	ldr	r0, [pc, #36]	; (8001730 <main+0x410>)
 800170c:	f00d fc28 	bl	800ef60 <siprintf>
 8001710:	4603      	mov	r3, r0
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <main+0x414>)
 8001716:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <main+0x414>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	b29a      	uxth	r2, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	4903      	ldr	r1, [pc, #12]	; (8001730 <main+0x410>)
 8001724:	4804      	ldr	r0, [pc, #16]	; (8001738 <main+0x418>)
 8001726:	f006 f957 	bl	80079d8 <HAL_UART_Transmit>
		   for (int i = 0; i < NUM_SENSOR; i++) {
 800172a:	e745      	b.n	80015b8 <main+0x298>
 800172c:	08012b6c 	.word	0x08012b6c
 8001730:	20000590 	.word	0x20000590
 8001734:	200005d0 	.word	0x200005d0
 8001738:	20000690 	.word	0x20000690
 800173c:	08012b70 	.word	0x08012b70

08001740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b094      	sub	sp, #80	; 0x50
 8001744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	2230      	movs	r2, #48	; 0x30
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f00c fd7e 	bl	800e250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <SystemClock_Config+0xd4>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	4a2a      	ldr	r2, [pc, #168]	; (8001814 <SystemClock_Config+0xd4>)
 800176a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176e:	6413      	str	r3, [r2, #64]	; 0x40
 8001770:	4b28      	ldr	r3, [pc, #160]	; (8001814 <SystemClock_Config+0xd4>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800177c:	4b26      	ldr	r3, [pc, #152]	; (8001818 <SystemClock_Config+0xd8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a25      	ldr	r2, [pc, #148]	; (8001818 <SystemClock_Config+0xd8>)
 8001782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b23      	ldr	r3, [pc, #140]	; (8001818 <SystemClock_Config+0xd8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001794:	2301      	movs	r3, #1
 8001796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800179e:	2302      	movs	r3, #2
 80017a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80017a8:	2319      	movs	r3, #25
 80017aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80017ac:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80017b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b2:	2302      	movs	r3, #2
 80017b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017b6:	2302      	movs	r3, #2
 80017b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ba:	f107 0320 	add.w	r3, r7, #32
 80017be:	4618      	mov	r0, r3
 80017c0:	f002 f928 	bl	8003a14 <HAL_RCC_OscConfig>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80017ca:	f000 f8b7 	bl	800193c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017ce:	f002 f8d1 	bl	8003974 <HAL_PWREx_EnableOverDrive>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80017d8:	f000 f8b0 	bl	800193c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017dc:	230f      	movs	r3, #15
 80017de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e0:	2302      	movs	r3, #2
 80017e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	2107      	movs	r1, #7
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 fc64 	bl	80040c8 <HAL_RCC_ClockConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001806:	f000 f899 	bl	800193c <Error_Handler>
  }
}
 800180a:	bf00      	nop
 800180c:	3750      	adds	r7, #80	; 0x50
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40007000 	.word	0x40007000

0800181c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	2025      	movs	r0, #37	; 0x25
 8001826:	f000 fd43 	bl	80022b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800182a:	2025      	movs	r0, #37	; 0x25
 800182c:	f000 fd6c 	bl	8002308 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2101      	movs	r1, #1
 8001834:	2037      	movs	r0, #55	; 0x37
 8001836:	f000 fd3b 	bl	80022b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800183a:	2037      	movs	r0, #55	; 0x37
 800183c:	f000 fd64 	bl	8002308 <HAL_NVIC_EnableIRQ>
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <HAL_UART_RxCpltCallback+0x64>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d124      	bne.n	80018a0 <HAL_UART_RxCpltCallback+0x5c>
  {
    if (rxData != '\n' && rxBufferIndex < RX_BUFFER_SIZE - 1)
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_UART_RxCpltCallback+0x68>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b0a      	cmp	r3, #10
 800185c:	d00f      	beq.n	800187e <HAL_UART_RxCpltCallback+0x3a>
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_UART_RxCpltCallback+0x6c>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	2b7e      	cmp	r3, #126	; 0x7e
 8001864:	d80b      	bhi.n	800187e <HAL_UART_RxCpltCallback+0x3a>
    {
      rxBuffer[rxBufferIndex++] = rxData;
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_UART_RxCpltCallback+0x6c>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	b291      	uxth	r1, r2
 800186e:	4a10      	ldr	r2, [pc, #64]	; (80018b0 <HAL_UART_RxCpltCallback+0x6c>)
 8001870:	8011      	strh	r1, [r2, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_UART_RxCpltCallback+0x68>)
 8001876:	7819      	ldrb	r1, [r3, #0]
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <HAL_UART_RxCpltCallback+0x70>)
 800187a:	5499      	strb	r1, [r3, r2]
 800187c:	e00b      	b.n	8001896 <HAL_UART_RxCpltCallback+0x52>
    }
    else
    {
      rxBuffer[rxBufferIndex] = '\0';
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_UART_RxCpltCallback+0x6c>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_UART_RxCpltCallback+0x70>)
 8001886:	2100      	movs	r1, #0
 8001888:	5499      	strb	r1, [r3, r2]
      rxBufferIndex = 0;
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_UART_RxCpltCallback+0x6c>)
 800188c:	2200      	movs	r2, #0
 800188e:	801a      	strh	r2, [r3, #0]
      receivedFlag = 1; // 문자?��?�� ?��?��?��?��?��?�� ?��리는 ?��?��그�?? ?��?��?��?��?��.
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_UART_RxCpltCallback+0x74>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001896:	2201      	movs	r2, #1
 8001898:	4904      	ldr	r1, [pc, #16]	; (80018ac <HAL_UART_RxCpltCallback+0x68>)
 800189a:	4808      	ldr	r0, [pc, #32]	; (80018bc <HAL_UART_RxCpltCallback+0x78>)
 800189c:	f006 f91f 	bl	8007ade <HAL_UART_Receive_IT>
  }
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40011000 	.word	0x40011000
 80018ac:	2000058e 	.word	0x2000058e
 80018b0:	2000058c 	.word	0x2000058c
 80018b4:	2000050c 	.word	0x2000050c
 80018b8:	2000058f 	.word	0x2000058f
 80018bc:	20000690 	.word	0x20000690

080018c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_8) // A?��?�� ???�� ?��?��?��?��
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018d0:	d113      	bne.n	80018fa <HAL_GPIO_EXTI_Callback+0x3a>
  {
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) // B?�� 값을 ?��?��
 80018d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018d6:	4816      	ldr	r0, [pc, #88]	; (8001930 <HAL_GPIO_EXTI_Callback+0x70>)
 80018d8:	f001 f93c 	bl	8002b54 <HAL_GPIO_ReadPin>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <HAL_GPIO_EXTI_Callback+0x2e>
    {
      encoderCount++;
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HAL_GPIO_EXTI_Callback+0x74>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	3301      	adds	r3, #1
 80018e8:	4a12      	ldr	r2, [pc, #72]	; (8001934 <HAL_GPIO_EXTI_Callback+0x74>)
 80018ea:	6013      	str	r3, [r2, #0]
    else
    {
      encoderCount++;
    }
  }
}
 80018ec:	e01c      	b.n	8001928 <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount--;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_GPIO_EXTI_Callback+0x74>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	4a0f      	ldr	r2, [pc, #60]	; (8001934 <HAL_GPIO_EXTI_Callback+0x74>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	e016      	b.n	8001928 <HAL_GPIO_EXTI_Callback+0x68>
  else if (GPIO_Pin == GPIO_PIN_15) // B?��?�� ???�� ?��?��?��?��
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001900:	d112      	bne.n	8001928 <HAL_GPIO_EXTI_Callback+0x68>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) // A?�� 값을 ?��?��
 8001902:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001906:	480c      	ldr	r0, [pc, #48]	; (8001938 <HAL_GPIO_EXTI_Callback+0x78>)
 8001908:	f001 f924 	bl	8002b54 <HAL_GPIO_ReadPin>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <HAL_GPIO_EXTI_Callback+0x5e>
      encoderCount--;
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_GPIO_EXTI_Callback+0x74>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3b01      	subs	r3, #1
 8001918:	4a06      	ldr	r2, [pc, #24]	; (8001934 <HAL_GPIO_EXTI_Callback+0x74>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	e004      	b.n	8001928 <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount++;
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_GPIO_EXTI_Callback+0x74>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	4a03      	ldr	r2, [pc, #12]	; (8001934 <HAL_GPIO_EXTI_Callback+0x74>)
 8001926:	6013      	str	r3, [r2, #0]
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40020400 	.word	0x40020400
 8001934:	200005f0 	.word	0x200005f0
 8001938:	40020000 	.word	0x40020000

0800193c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001940:	b672      	cpsid	i
}
 8001942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001944:	e7fe      	b.n	8001944 <Error_Handler+0x8>

08001946 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_MspInit+0x44>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_MspInit+0x44>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_MspInit+0x44>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_MspInit+0x44>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_MspInit+0x44>)
 8001980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_MspInit+0x44>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f0:	f000 fb2a 	bl	8002048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80019fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a00:	f001 f8f4 	bl	8002bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <USART1_IRQHandler+0x10>)
 8001a0e:	f006 f8ab 	bl	8007b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000690 	.word	0x20000690

08001a1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001a20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a24:	f001 f8e2 	bl	8002bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <TIM7_IRQHandler+0x10>)
 8001a32:	f004 f9e3 	bl	8005dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000644 	.word	0x20000644

08001a40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return 1;
 8001a44:	2301      	movs	r3, #1
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_kill>:

int _kill(int pid, int sig)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a5a:	f00c fbc1 	bl	800e1e0 <__errno>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2216      	movs	r2, #22
 8001a62:	601a      	str	r2, [r3, #0]
  return -1;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_exit>:

void _exit (int status)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ffe7 	bl	8001a50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a82:	e7fe      	b.n	8001a82 <_exit+0x12>

08001a84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e00a      	b.n	8001aac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a96:	f3af 8000 	nop.w
 8001a9a:	4601      	mov	r1, r0
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	60ba      	str	r2, [r7, #8]
 8001aa2:	b2ca      	uxtb	r2, r1
 8001aa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbf0      	blt.n	8001a96 <_read+0x12>
  }

  return len;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e009      	b.n	8001ae4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	60ba      	str	r2, [r7, #8]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dbf1      	blt.n	8001ad0 <_write+0x12>
  }
  return len;
 8001aec:	687b      	ldr	r3, [r7, #4]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_close>:

int _close(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b1e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_isatty>:

int _isatty(int file)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <_sbrk+0x5c>)
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <_sbrk+0x60>)
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <_sbrk+0x64>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <_sbrk+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d207      	bcs.n	8001ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b90:	f00c fb26 	bl	800e1e0 <__errno>
 8001b94:	4603      	mov	r3, r0
 8001b96:	220c      	movs	r2, #12
 8001b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	e009      	b.n	8001bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <_sbrk+0x64>)
 8001bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20050000 	.word	0x20050000
 8001bc0:	00000400 	.word	0x00000400
 8001bc4:	200005f4 	.word	0x200005f4
 8001bc8:	20000770 	.word	0x20000770

08001bcc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <SystemInit+0x20>)
 8001bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <SystemInit+0x20>)
 8001bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08e      	sub	sp, #56	; 0x38
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c10:	463b      	mov	r3, r7
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	611a      	str	r2, [r3, #16]
 8001c1e:	615a      	str	r2, [r3, #20]
 8001c20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8001c2a:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c2c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001c30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c32:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001c38:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c3a:	2231      	movs	r2, #49	; 0x31
 8001c3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c44:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c4a:	4823      	ldr	r0, [pc, #140]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c4c:	f003 fcc2 	bl	80055d4 <HAL_TIM_Base_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001c56:	f7ff fe71 	bl	800193c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c64:	4619      	mov	r1, r3
 8001c66:	481c      	ldr	r0, [pc, #112]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c68:	f004 fc50 	bl	800650c <HAL_TIM_ConfigClockSource>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001c72:	f7ff fe63 	bl	800193c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c76:	4818      	ldr	r0, [pc, #96]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c78:	f003 fdcc 	bl	8005814 <HAL_TIM_PWM_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001c82:	f7ff fe5b 	bl	800193c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4619      	mov	r1, r3
 8001c94:	4810      	ldr	r0, [pc, #64]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c96:	f005 fc69 	bl	800756c <HAL_TIMEx_MasterConfigSynchronization>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ca0:	f7ff fe4c 	bl	800193c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca4:	2360      	movs	r3, #96	; 0x60
 8001ca6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001cbc:	f004 f9be 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001cc6:	f7ff fe39 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cca:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001ccc:	f000 f86e 	bl	8001dac <HAL_TIM_MspPostInit>

}
 8001cd0:	bf00      	nop
 8001cd2:	3738      	adds	r7, #56	; 0x38
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200005f8 	.word	0x200005f8

08001cdc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <MX_TIM7_Init+0x64>)
 8001cee:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <MX_TIM7_Init+0x68>)
 8001cf0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 8001cf2:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <MX_TIM7_Init+0x64>)
 8001cf4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001cf8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <MX_TIM7_Init+0x64>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50-1;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <MX_TIM7_Init+0x64>)
 8001d02:	2231      	movs	r2, #49	; 0x31
 8001d04:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <MX_TIM7_Init+0x64>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001d0c:	480c      	ldr	r0, [pc, #48]	; (8001d40 <MX_TIM7_Init+0x64>)
 8001d0e:	f003 fc61 	bl	80055d4 <HAL_TIM_Base_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001d18:	f7ff fe10 	bl	800193c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	4619      	mov	r1, r3
 8001d28:	4805      	ldr	r0, [pc, #20]	; (8001d40 <MX_TIM7_Init+0x64>)
 8001d2a:	f005 fc1f 	bl	800756c <HAL_TIMEx_MasterConfigSynchronization>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001d34:	f7ff fe02 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000644 	.word	0x20000644
 8001d44:	40001400 	.word	0x40001400

08001d48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d58:	d10c      	bne.n	8001d74 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_TIM_Base_MspInit+0x5c>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a11      	ldr	r2, [pc, #68]	; (8001da4 <HAL_TIM_Base_MspInit+0x5c>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_TIM_Base_MspInit+0x5c>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001d72:	e010      	b.n	8001d96 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <HAL_TIM_Base_MspInit+0x60>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d10b      	bne.n	8001d96 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_TIM_Base_MspInit+0x5c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <HAL_TIM_Base_MspInit+0x5c>)
 8001d84:	f043 0320 	orr.w	r3, r3, #32
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_TIM_Base_MspInit+0x5c>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40001400 	.word	0x40001400

08001dac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dcc:	d11c      	bne.n	8001e08 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <HAL_TIM_MspPostInit+0x64>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <HAL_TIM_MspPostInit+0x64>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_TIM_MspPostInit+0x64>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	4619      	mov	r1, r3
 8001e02:	4804      	ldr	r0, [pc, #16]	; (8001e14 <HAL_TIM_MspPostInit+0x68>)
 8001e04:	f000 fb36 	bl	8002474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e08:	bf00      	nop
 8001e0a:	3720      	adds	r7, #32
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020000 	.word	0x40020000

08001e18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <MX_USART1_UART_Init+0x58>)
 8001e1e:	4a15      	ldr	r2, [pc, #84]	; (8001e74 <MX_USART1_UART_Init+0x5c>)
 8001e20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <MX_USART1_UART_Init+0x58>)
 8001e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <MX_USART1_UART_Init+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <MX_USART1_UART_Init+0x58>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <MX_USART1_UART_Init+0x58>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <MX_USART1_UART_Init+0x58>)
 8001e3e:	220c      	movs	r2, #12
 8001e40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <MX_USART1_UART_Init+0x58>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <MX_USART1_UART_Init+0x58>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <MX_USART1_UART_Init+0x58>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <MX_USART1_UART_Init+0x58>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e5a:	4805      	ldr	r0, [pc, #20]	; (8001e70 <MX_USART1_UART_Init+0x58>)
 8001e5c:	f005 fcfc 	bl	8007858 <HAL_UART_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e66:	f7ff fd69 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000690 	.word	0x20000690
 8001e74:	40011000 	.word	0x40011000

08001e78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0ac      	sub	sp, #176	; 0xb0
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e90:	f107 0318 	add.w	r3, r7, #24
 8001e94:	2284      	movs	r2, #132	; 0x84
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f00c f9d9 	bl	800e250 <memset>
  if(uartHandle->Instance==USART1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a32      	ldr	r2, [pc, #200]	; (8001f6c <HAL_UART_MspInit+0xf4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d15c      	bne.n	8001f62 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ea8:	2340      	movs	r3, #64	; 0x40
 8001eaa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001eac:	2300      	movs	r3, #0
 8001eae:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb0:	f107 0318 	add.w	r3, r7, #24
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 fba9 	bl	800460c <HAL_RCCEx_PeriphCLKConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ec0:	f7ff fd3c 	bl	800193c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <HAL_UART_MspInit+0xf8>)
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec8:	4a29      	ldr	r2, [pc, #164]	; (8001f70 <HAL_UART_MspInit+0xf8>)
 8001eca:	f043 0310 	orr.w	r3, r3, #16
 8001ece:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_UART_MspInit+0xf8>)
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001edc:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <HAL_UART_MspInit+0xf8>)
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	4a23      	ldr	r2, [pc, #140]	; (8001f70 <HAL_UART_MspInit+0xf8>)
 8001ee2:	f043 0302 	orr.w	r3, r3, #2
 8001ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee8:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <HAL_UART_MspInit+0xf8>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <HAL_UART_MspInit+0xf8>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <HAL_UART_MspInit+0xf8>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6313      	str	r3, [r2, #48]	; 0x30
 8001f00:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <HAL_UART_MspInit+0xf8>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f24:	2307      	movs	r3, #7
 8001f26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4810      	ldr	r0, [pc, #64]	; (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f32:	f000 fa9f 	bl	8002474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f50:	2307      	movs	r3, #7
 8001f52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4806      	ldr	r0, [pc, #24]	; (8001f78 <HAL_UART_MspInit+0x100>)
 8001f5e:	f000 fa89 	bl	8002474 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f62:	bf00      	nop
 8001f64:	37b0      	adds	r7, #176	; 0xb0
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40011000 	.word	0x40011000
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40020000 	.word	0x40020000

08001f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f80:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f82:	490e      	ldr	r1, [pc, #56]	; (8001fbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f84:	4a0e      	ldr	r2, [pc, #56]	; (8001fc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f88:	e002      	b.n	8001f90 <LoopCopyDataInit>

08001f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8e:	3304      	adds	r3, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f94:	d3f9      	bcc.n	8001f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f96:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f98:	4c0b      	ldr	r4, [pc, #44]	; (8001fc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f9c:	e001      	b.n	8001fa2 <LoopFillZerobss>

08001f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa0:	3204      	adds	r2, #4

08001fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa4:	d3fb      	bcc.n	8001f9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fa6:	f7ff fe11 	bl	8001bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001faa:	f00c f91f 	bl	800e1ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fae:	f7ff f9b7 	bl	8001320 <main>
  bx  lr    
 8001fb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fb4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fbc:	2000049c 	.word	0x2000049c
  ldr r2, =_sidata
 8001fc0:	0801325c 	.word	0x0801325c
  ldr r2, =_sbss
 8001fc4:	2000049c 	.word	0x2000049c
  ldr r4, =_ebss
 8001fc8:	2000076c 	.word	0x2000076c

08001fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fcc:	e7fe      	b.n	8001fcc <ADC_IRQHandler>

08001fce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd2:	2003      	movs	r0, #3
 8001fd4:	f000 f94c 	bl	8002270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd8:	200f      	movs	r0, #15
 8001fda:	f000 f805 	bl	8001fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fde:	f7ff fcbd 	bl	800195c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_InitTick+0x54>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_InitTick+0x58>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002002:	fbb2 f3f3 	udiv	r3, r2, r3
 8002006:	4618      	mov	r0, r3
 8002008:	f000 f996 	bl	8002338 <HAL_SYSTICK_Config>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e00e      	b.n	8002034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b0f      	cmp	r3, #15
 800201a:	d80a      	bhi.n	8002032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201c:	2200      	movs	r2, #0
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	f04f 30ff 	mov.w	r0, #4294967295
 8002024:	f000 f944 	bl	80022b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002028:	4a06      	ldr	r2, [pc, #24]	; (8002044 <HAL_InitTick+0x5c>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e000      	b.n	8002034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000000 	.word	0x20000000
 8002040:	20000008 	.word	0x20000008
 8002044:	20000004 	.word	0x20000004

08002048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_IncTick+0x20>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_IncTick+0x24>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4413      	add	r3, r2
 8002058:	4a04      	ldr	r2, [pc, #16]	; (800206c <HAL_IncTick+0x24>)
 800205a:	6013      	str	r3, [r2, #0]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20000008 	.word	0x20000008
 800206c:	20000718 	.word	0x20000718

08002070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return uwTick;
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <HAL_GetTick+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000718 	.word	0x20000718

08002088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002090:	f7ff ffee 	bl	8002070 <HAL_GetTick>
 8002094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d005      	beq.n	80020ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_Delay+0x44>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ae:	bf00      	nop
 80020b0:	f7ff ffde 	bl	8002070 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d8f7      	bhi.n	80020b0 <HAL_Delay+0x28>
  {
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000008 	.word	0x20000008

080020d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <__NVIC_SetPriorityGrouping+0x40>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ec:	4013      	ands	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fe:	4a04      	ldr	r2, [pc, #16]	; (8002110 <__NVIC_SetPriorityGrouping+0x40>)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	60d3      	str	r3, [r2, #12]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00
 8002114:	05fa0000 	.word	0x05fa0000

08002118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800211c:	4b04      	ldr	r3, [pc, #16]	; (8002130 <__NVIC_GetPriorityGrouping+0x18>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	f003 0307 	and.w	r3, r3, #7
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	2b00      	cmp	r3, #0
 8002144:	db0b      	blt.n	800215e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	f003 021f 	and.w	r2, r3, #31
 800214c:	4907      	ldr	r1, [pc, #28]	; (800216c <__NVIC_EnableIRQ+0x38>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	2001      	movs	r0, #1
 8002156:	fa00 f202 	lsl.w	r2, r0, r2
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000e100 	.word	0xe000e100

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db0a      	blt.n	800219a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	490c      	ldr	r1, [pc, #48]	; (80021bc <__NVIC_SetPriority+0x4c>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	440b      	add	r3, r1
 8002194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002198:	e00a      	b.n	80021b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4908      	ldr	r1, [pc, #32]	; (80021c0 <__NVIC_SetPriority+0x50>)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3b04      	subs	r3, #4
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	440b      	add	r3, r1
 80021ae:	761a      	strb	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	bf28      	it	cs
 80021e2:	2304      	movcs	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d902      	bls.n	80021f4 <NVIC_EncodePriority+0x30>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3b03      	subs	r3, #3
 80021f2:	e000      	b.n	80021f6 <NVIC_EncodePriority+0x32>
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43d9      	mvns	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	4313      	orrs	r3, r2
         );
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	; 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800223c:	d301      	bcc.n	8002242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223e:	2301      	movs	r3, #1
 8002240:	e00f      	b.n	8002262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <SysTick_Config+0x40>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224a:	210f      	movs	r1, #15
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f7ff ff8e 	bl	8002170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <SysTick_Config+0x40>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <SysTick_Config+0x40>)
 800225c:	2207      	movs	r2, #7
 800225e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	e000e010 	.word	0xe000e010

08002270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b07      	cmp	r3, #7
 800227c:	d00f      	beq.n	800229e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b06      	cmp	r3, #6
 8002282:	d00c      	beq.n	800229e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b05      	cmp	r3, #5
 8002288:	d009      	beq.n	800229e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b04      	cmp	r3, #4
 800228e:	d006      	beq.n	800229e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b03      	cmp	r3, #3
 8002294:	d003      	beq.n	800229e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002296:	2191      	movs	r1, #145	; 0x91
 8002298:	4804      	ldr	r0, [pc, #16]	; (80022ac <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800229a:	f7ff fb54 	bl	8001946 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ff16 	bl	80020d0 <__NVIC_SetPriorityGrouping>
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	08012b7c 	.word	0x08012b7c

080022b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b0f      	cmp	r3, #15
 80022c6:	d903      	bls.n	80022d0 <HAL_NVIC_SetPriority+0x20>
 80022c8:	21a9      	movs	r1, #169	; 0xa9
 80022ca:	480e      	ldr	r0, [pc, #56]	; (8002304 <HAL_NVIC_SetPriority+0x54>)
 80022cc:	f7ff fb3b 	bl	8001946 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	d903      	bls.n	80022de <HAL_NVIC_SetPriority+0x2e>
 80022d6:	21aa      	movs	r1, #170	; 0xaa
 80022d8:	480a      	ldr	r0, [pc, #40]	; (8002304 <HAL_NVIC_SetPriority+0x54>)
 80022da:	f7ff fb34 	bl	8001946 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022de:	f7ff ff1b 	bl	8002118 <__NVIC_GetPriorityGrouping>
 80022e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68b9      	ldr	r1, [r7, #8]
 80022e8:	6978      	ldr	r0, [r7, #20]
 80022ea:	f7ff ff6b 	bl	80021c4 <NVIC_EncodePriority>
 80022ee:	4602      	mov	r2, r0
 80022f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff ff3a 	bl	8002170 <__NVIC_SetPriority>
}
 80022fc:	bf00      	nop
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	08012b7c 	.word	0x08012b7c

08002308 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	2b00      	cmp	r3, #0
 8002318:	da03      	bge.n	8002322 <HAL_NVIC_EnableIRQ+0x1a>
 800231a:	21bd      	movs	r1, #189	; 0xbd
 800231c:	4805      	ldr	r0, [pc, #20]	; (8002334 <HAL_NVIC_EnableIRQ+0x2c>)
 800231e:	f7ff fb12 	bl	8001946 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff04 	bl	8002134 <__NVIC_EnableIRQ>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	08012b7c 	.word	0x08012b7c

08002338 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff ff73 	bl	800222c <SysTick_Config>
 8002346:	4603      	mov	r3, r0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800235e:	f7ff fe87 	bl	8002070 <HAL_GetTick>
 8002362:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d008      	beq.n	8002382 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2280      	movs	r2, #128	; 0x80
 8002374:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e052      	b.n	8002428 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0216 	bic.w	r2, r2, #22
 8002390:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d103      	bne.n	80023b2 <HAL_DMA_Abort+0x62>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0208 	bic.w	r2, r2, #8
 80023c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0201 	bic.w	r2, r2, #1
 80023d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d2:	e013      	b.n	80023fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023d4:	f7ff fe4c 	bl	8002070 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b05      	cmp	r3, #5
 80023e0:	d90c      	bls.n	80023fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2220      	movs	r2, #32
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2203      	movs	r2, #3
 80023ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e015      	b.n	8002428 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1e4      	bne.n	80023d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240e:	223f      	movs	r2, #63	; 0x3f
 8002410:	409a      	lsls	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d004      	beq.n	800244e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e00c      	b.n	8002468 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2205      	movs	r2, #5
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0201 	bic.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a3a      	ldr	r2, [pc, #232]	; (800257c <HAL_GPIO_Init+0x108>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d02b      	beq.n	80024ee <HAL_GPIO_Init+0x7a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a39      	ldr	r2, [pc, #228]	; (8002580 <HAL_GPIO_Init+0x10c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d027      	beq.n	80024ee <HAL_GPIO_Init+0x7a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a38      	ldr	r2, [pc, #224]	; (8002584 <HAL_GPIO_Init+0x110>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d023      	beq.n	80024ee <HAL_GPIO_Init+0x7a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a37      	ldr	r2, [pc, #220]	; (8002588 <HAL_GPIO_Init+0x114>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d01f      	beq.n	80024ee <HAL_GPIO_Init+0x7a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a36      	ldr	r2, [pc, #216]	; (800258c <HAL_GPIO_Init+0x118>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d01b      	beq.n	80024ee <HAL_GPIO_Init+0x7a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a35      	ldr	r2, [pc, #212]	; (8002590 <HAL_GPIO_Init+0x11c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d017      	beq.n	80024ee <HAL_GPIO_Init+0x7a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a34      	ldr	r2, [pc, #208]	; (8002594 <HAL_GPIO_Init+0x120>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d013      	beq.n	80024ee <HAL_GPIO_Init+0x7a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a33      	ldr	r2, [pc, #204]	; (8002598 <HAL_GPIO_Init+0x124>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00f      	beq.n	80024ee <HAL_GPIO_Init+0x7a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a32      	ldr	r2, [pc, #200]	; (800259c <HAL_GPIO_Init+0x128>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00b      	beq.n	80024ee <HAL_GPIO_Init+0x7a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a31      	ldr	r2, [pc, #196]	; (80025a0 <HAL_GPIO_Init+0x12c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d007      	beq.n	80024ee <HAL_GPIO_Init+0x7a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a30      	ldr	r2, [pc, #192]	; (80025a4 <HAL_GPIO_Init+0x130>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x7a>
 80024e6:	21aa      	movs	r1, #170	; 0xaa
 80024e8:	482f      	ldr	r0, [pc, #188]	; (80025a8 <HAL_GPIO_Init+0x134>)
 80024ea:	f7ff fa2c 	bl	8001946 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d103      	bne.n	8002500 <HAL_GPIO_Init+0x8c>
 80024f8:	21ab      	movs	r1, #171	; 0xab
 80024fa:	482b      	ldr	r0, [pc, #172]	; (80025a8 <HAL_GPIO_Init+0x134>)
 80024fc:	f7ff fa23 	bl	8001946 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d035      	beq.n	8002574 <HAL_GPIO_Init+0x100>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d031      	beq.n	8002574 <HAL_GPIO_Init+0x100>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b11      	cmp	r3, #17
 8002516:	d02d      	beq.n	8002574 <HAL_GPIO_Init+0x100>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d029      	beq.n	8002574 <HAL_GPIO_Init+0x100>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b12      	cmp	r3, #18
 8002526:	d025      	beq.n	8002574 <HAL_GPIO_Init+0x100>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002530:	d020      	beq.n	8002574 <HAL_GPIO_Init+0x100>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800253a:	d01b      	beq.n	8002574 <HAL_GPIO_Init+0x100>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002544:	d016      	beq.n	8002574 <HAL_GPIO_Init+0x100>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800254e:	d011      	beq.n	8002574 <HAL_GPIO_Init+0x100>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002558:	d00c      	beq.n	8002574 <HAL_GPIO_Init+0x100>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8002562:	d007      	beq.n	8002574 <HAL_GPIO_Init+0x100>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x100>
 800256c:	21ac      	movs	r1, #172	; 0xac
 800256e:	480e      	ldr	r0, [pc, #56]	; (80025a8 <HAL_GPIO_Init+0x134>)
 8002570:	f7ff f9e9 	bl	8001946 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
 8002578:	e2c7      	b.n	8002b0a <HAL_GPIO_Init+0x696>
 800257a:	bf00      	nop
 800257c:	40020000 	.word	0x40020000
 8002580:	40020400 	.word	0x40020400
 8002584:	40020800 	.word	0x40020800
 8002588:	40020c00 	.word	0x40020c00
 800258c:	40021000 	.word	0x40021000
 8002590:	40021400 	.word	0x40021400
 8002594:	40021800 	.word	0x40021800
 8002598:	40021c00 	.word	0x40021c00
 800259c:	40022000 	.word	0x40022000
 80025a0:	40022400 	.word	0x40022400
 80025a4:	40022800 	.word	0x40022800
 80025a8:	08012bb8 	.word	0x08012bb8
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025ac:	2201      	movs	r2, #1
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	f040 829d 	bne.w	8002b04 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d005      	beq.n	80025e2 <HAL_GPIO_Init+0x16e>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d144      	bne.n	800266c <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00f      	beq.n	800260a <HAL_GPIO_Init+0x196>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d00b      	beq.n	800260a <HAL_GPIO_Init+0x196>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x196>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x196>
 8002602:	21bd      	movs	r1, #189	; 0xbd
 8002604:	4831      	ldr	r0, [pc, #196]	; (80026cc <HAL_GPIO_Init+0x258>)
 8002606:	f7ff f99e 	bl	8001946 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	2203      	movs	r2, #3
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002640:	2201      	movs	r2, #1
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 0201 	and.w	r2, r3, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b03      	cmp	r3, #3
 8002676:	d02b      	beq.n	80026d0 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00b      	beq.n	8002698 <HAL_GPIO_Init+0x224>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d007      	beq.n	8002698 <HAL_GPIO_Init+0x224>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x224>
 8002690:	21ce      	movs	r1, #206	; 0xce
 8002692:	480e      	ldr	r0, [pc, #56]	; (80026cc <HAL_GPIO_Init+0x258>)
 8002694:	f7ff f957 	bl	8001946 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	60da      	str	r2, [r3, #12]
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_Init+0x25c>
 80026ca:	bf00      	nop
 80026cc:	08012bb8 	.word	0x08012bb8
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	f040 8134 	bne.w	8002946 <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 810b 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	f000 8106 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 8101 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80fc 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 80f7 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2b01      	cmp	r3, #1
 8002716:	f000 80f2 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	2b02      	cmp	r3, #2
 8002720:	f000 80ed 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	2b02      	cmp	r3, #2
 800272a:	f000 80e8 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b02      	cmp	r3, #2
 8002734:	f000 80e3 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2b03      	cmp	r3, #3
 800273e:	f000 80de 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b03      	cmp	r3, #3
 8002748:	f000 80d9 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b03      	cmp	r3, #3
 8002752:	f000 80d4 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b03      	cmp	r3, #3
 800275c:	f000 80cf 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	2b03      	cmp	r3, #3
 8002766:	f000 80ca 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b03      	cmp	r3, #3
 8002770:	f000 80c5 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b04      	cmp	r3, #4
 800277a:	f000 80c0 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b04      	cmp	r3, #4
 8002784:	f000 80bb 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	2b04      	cmp	r3, #4
 800278e:	f000 80b6 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b04      	cmp	r3, #4
 8002798:	f000 80b1 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	f000 80ac 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b05      	cmp	r3, #5
 80027ac:	f000 80a7 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	f000 80a2 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2b05      	cmp	r3, #5
 80027c0:	f000 809d 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	f000 8098 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b05      	cmp	r3, #5
 80027d4:	f000 8093 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b05      	cmp	r3, #5
 80027de:	f000 808e 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	f000 8089 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b06      	cmp	r3, #6
 80027f2:	f000 8084 	beq.w	80028fe <HAL_GPIO_Init+0x48a>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b07      	cmp	r3, #7
 80027fc:	d07f      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b07      	cmp	r3, #7
 8002804:	d07b      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b07      	cmp	r3, #7
 800280c:	d077      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b07      	cmp	r3, #7
 8002814:	d073      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b07      	cmp	r3, #7
 800281c:	d06f      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b07      	cmp	r3, #7
 8002824:	d06b      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	2b07      	cmp	r3, #7
 800282c:	d067      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b08      	cmp	r3, #8
 8002834:	d063      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b08      	cmp	r3, #8
 800283c:	d05f      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b08      	cmp	r3, #8
 8002844:	d05b      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b08      	cmp	r3, #8
 800284c:	d057      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b08      	cmp	r3, #8
 8002854:	d053      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b08      	cmp	r3, #8
 800285c:	d04f      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	2b08      	cmp	r3, #8
 8002864:	d04b      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	2b09      	cmp	r3, #9
 800286c:	d047      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b09      	cmp	r3, #9
 8002874:	d043      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	2b09      	cmp	r3, #9
 800287c:	d03f      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b09      	cmp	r3, #9
 8002884:	d03b      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b09      	cmp	r3, #9
 800288c:	d037      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b09      	cmp	r3, #9
 8002894:	d033      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b09      	cmp	r3, #9
 800289c:	d02f      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	2b0a      	cmp	r3, #10
 80028a4:	d02b      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b0a      	cmp	r3, #10
 80028ac:	d027      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b0a      	cmp	r3, #10
 80028b4:	d023      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2b0a      	cmp	r3, #10
 80028bc:	d01f      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	2b0b      	cmp	r3, #11
 80028c4:	d01b      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b0c      	cmp	r3, #12
 80028cc:	d017      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b0c      	cmp	r3, #12
 80028d4:	d013      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b0c      	cmp	r3, #12
 80028dc:	d00f      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b0f      	cmp	r3, #15
 80028e4:	d00b      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b0d      	cmp	r3, #13
 80028ec:	d007      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b0e      	cmp	r3, #14
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x48a>
 80028f6:	21db      	movs	r1, #219	; 0xdb
 80028f8:	4888      	ldr	r0, [pc, #544]	; (8002b1c <HAL_GPIO_Init+0x6a8>)
 80028fa:	f7ff f824 	bl	8001946 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3208      	adds	r2, #8
 8002906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	220f      	movs	r2, #15
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	08da      	lsrs	r2, r3, #3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3208      	adds	r2, #8
 8002940:	69b9      	ldr	r1, [r7, #24]
 8002942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	2203      	movs	r2, #3
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0203 	and.w	r2, r3, #3
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80be 	beq.w	8002b04 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002988:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <HAL_GPIO_Init+0x6ac>)
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	4a64      	ldr	r2, [pc, #400]	; (8002b20 <HAL_GPIO_Init+0x6ac>)
 800298e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002992:	6453      	str	r3, [r2, #68]	; 0x44
 8002994:	4b62      	ldr	r3, [pc, #392]	; (8002b20 <HAL_GPIO_Init+0x6ac>)
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029a0:	4a60      	ldr	r2, [pc, #384]	; (8002b24 <HAL_GPIO_Init+0x6b0>)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	3302      	adds	r3, #2
 80029a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	220f      	movs	r2, #15
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a58      	ldr	r2, [pc, #352]	; (8002b28 <HAL_GPIO_Init+0x6b4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d037      	beq.n	8002a3c <HAL_GPIO_Init+0x5c8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a57      	ldr	r2, [pc, #348]	; (8002b2c <HAL_GPIO_Init+0x6b8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d031      	beq.n	8002a38 <HAL_GPIO_Init+0x5c4>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a56      	ldr	r2, [pc, #344]	; (8002b30 <HAL_GPIO_Init+0x6bc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d02b      	beq.n	8002a34 <HAL_GPIO_Init+0x5c0>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a55      	ldr	r2, [pc, #340]	; (8002b34 <HAL_GPIO_Init+0x6c0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d025      	beq.n	8002a30 <HAL_GPIO_Init+0x5bc>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a54      	ldr	r2, [pc, #336]	; (8002b38 <HAL_GPIO_Init+0x6c4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d01f      	beq.n	8002a2c <HAL_GPIO_Init+0x5b8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a53      	ldr	r2, [pc, #332]	; (8002b3c <HAL_GPIO_Init+0x6c8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d019      	beq.n	8002a28 <HAL_GPIO_Init+0x5b4>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a52      	ldr	r2, [pc, #328]	; (8002b40 <HAL_GPIO_Init+0x6cc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d013      	beq.n	8002a24 <HAL_GPIO_Init+0x5b0>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a51      	ldr	r2, [pc, #324]	; (8002b44 <HAL_GPIO_Init+0x6d0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00d      	beq.n	8002a20 <HAL_GPIO_Init+0x5ac>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a50      	ldr	r2, [pc, #320]	; (8002b48 <HAL_GPIO_Init+0x6d4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d007      	beq.n	8002a1c <HAL_GPIO_Init+0x5a8>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a4f      	ldr	r2, [pc, #316]	; (8002b4c <HAL_GPIO_Init+0x6d8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d101      	bne.n	8002a18 <HAL_GPIO_Init+0x5a4>
 8002a14:	2309      	movs	r3, #9
 8002a16:	e012      	b.n	8002a3e <HAL_GPIO_Init+0x5ca>
 8002a18:	230a      	movs	r3, #10
 8002a1a:	e010      	b.n	8002a3e <HAL_GPIO_Init+0x5ca>
 8002a1c:	2308      	movs	r3, #8
 8002a1e:	e00e      	b.n	8002a3e <HAL_GPIO_Init+0x5ca>
 8002a20:	2307      	movs	r3, #7
 8002a22:	e00c      	b.n	8002a3e <HAL_GPIO_Init+0x5ca>
 8002a24:	2306      	movs	r3, #6
 8002a26:	e00a      	b.n	8002a3e <HAL_GPIO_Init+0x5ca>
 8002a28:	2305      	movs	r3, #5
 8002a2a:	e008      	b.n	8002a3e <HAL_GPIO_Init+0x5ca>
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	e006      	b.n	8002a3e <HAL_GPIO_Init+0x5ca>
 8002a30:	2303      	movs	r3, #3
 8002a32:	e004      	b.n	8002a3e <HAL_GPIO_Init+0x5ca>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e002      	b.n	8002a3e <HAL_GPIO_Init+0x5ca>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_GPIO_Init+0x5ca>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	f002 0203 	and.w	r2, r2, #3
 8002a44:	0092      	lsls	r2, r2, #2
 8002a46:	4093      	lsls	r3, r2
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a4e:	4935      	ldr	r1, [pc, #212]	; (8002b24 <HAL_GPIO_Init+0x6b0>)
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a5c:	4b3c      	ldr	r3, [pc, #240]	; (8002b50 <HAL_GPIO_Init+0x6dc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a80:	4a33      	ldr	r2, [pc, #204]	; (8002b50 <HAL_GPIO_Init+0x6dc>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a86:	4b32      	ldr	r3, [pc, #200]	; (8002b50 <HAL_GPIO_Init+0x6dc>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aaa:	4a29      	ldr	r2, [pc, #164]	; (8002b50 <HAL_GPIO_Init+0x6dc>)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ab0:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <HAL_GPIO_Init+0x6dc>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ad4:	4a1e      	ldr	r2, [pc, #120]	; (8002b50 <HAL_GPIO_Init+0x6dc>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ada:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_GPIO_Init+0x6dc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002afe:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <HAL_GPIO_Init+0x6dc>)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	3301      	adds	r3, #1
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	2b0f      	cmp	r3, #15
 8002b0e:	f67f ad4d 	bls.w	80025ac <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
 8002b16:	3720      	adds	r7, #32
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	08012bb8 	.word	0x08012bb8
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40013800 	.word	0x40013800
 8002b28:	40020000 	.word	0x40020000
 8002b2c:	40020400 	.word	0x40020400
 8002b30:	40020800 	.word	0x40020800
 8002b34:	40020c00 	.word	0x40020c00
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40021400 	.word	0x40021400
 8002b40:	40021800 	.word	0x40021800
 8002b44:	40021c00 	.word	0x40021c00
 8002b48:	40022000 	.word	0x40022000
 8002b4c:	40022400 	.word	0x40022400
 8002b50:	40013c00 	.word	0x40013c00

08002b54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b60:	887b      	ldrh	r3, [r7, #2]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d104      	bne.n	8002b70 <HAL_GPIO_ReadPin+0x1c>
 8002b66:	f240 1177 	movw	r1, #375	; 0x177
 8002b6a:	4809      	ldr	r0, [pc, #36]	; (8002b90 <HAL_GPIO_ReadPin+0x3c>)
 8002b6c:	f7fe feeb 	bl	8001946 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	887b      	ldrh	r3, [r7, #2]
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	e001      	b.n	8002b86 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	08012bb8 	.word	0x08012bb8

08002b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	807b      	strh	r3, [r7, #2]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002ba4:	887b      	ldrh	r3, [r7, #2]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d104      	bne.n	8002bb4 <HAL_GPIO_WritePin+0x20>
 8002baa:	f240 1197 	movw	r1, #407	; 0x197
 8002bae:	480e      	ldr	r0, [pc, #56]	; (8002be8 <HAL_GPIO_WritePin+0x54>)
 8002bb0:	f7fe fec9 	bl	8001946 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002bb4:	787b      	ldrb	r3, [r7, #1]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d007      	beq.n	8002bca <HAL_GPIO_WritePin+0x36>
 8002bba:	787b      	ldrb	r3, [r7, #1]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d004      	beq.n	8002bca <HAL_GPIO_WritePin+0x36>
 8002bc0:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8002bc4:	4808      	ldr	r0, [pc, #32]	; (8002be8 <HAL_GPIO_WritePin+0x54>)
 8002bc6:	f7fe febe 	bl	8001946 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002bca:	787b      	ldrb	r3, [r7, #1]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bd0:	887a      	ldrh	r2, [r7, #2]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002bd6:	e003      	b.n	8002be0 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002bd8:	887b      	ldrh	r3, [r7, #2]
 8002bda:	041a      	lsls	r2, r3, #16
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	619a      	str	r2, [r3, #24]
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	08012bb8 	.word	0x08012bb8

08002bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d006      	beq.n	8002c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c02:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fe58 	bl	80018c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40013c00 	.word	0x40013c00

08002c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e107      	b.n	8002e3e <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a85      	ldr	r2, [pc, #532]	; (8002e48 <HAL_I2C_Init+0x22c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d013      	beq.n	8002c60 <HAL_I2C_Init+0x44>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a83      	ldr	r2, [pc, #524]	; (8002e4c <HAL_I2C_Init+0x230>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00e      	beq.n	8002c60 <HAL_I2C_Init+0x44>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a82      	ldr	r2, [pc, #520]	; (8002e50 <HAL_I2C_Init+0x234>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d009      	beq.n	8002c60 <HAL_I2C_Init+0x44>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a80      	ldr	r2, [pc, #512]	; (8002e54 <HAL_I2C_Init+0x238>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d004      	beq.n	8002c60 <HAL_I2C_Init+0x44>
 8002c56:	f240 2119 	movw	r1, #537	; 0x219
 8002c5a:	487f      	ldr	r0, [pc, #508]	; (8002e58 <HAL_I2C_Init+0x23c>)
 8002c5c:	f7fe fe73 	bl	8001946 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c68:	d304      	bcc.n	8002c74 <HAL_I2C_Init+0x58>
 8002c6a:	f240 211a 	movw	r1, #538	; 0x21a
 8002c6e:	487a      	ldr	r0, [pc, #488]	; (8002e58 <HAL_I2C_Init+0x23c>)
 8002c70:	f7fe fe69 	bl	8001946 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d008      	beq.n	8002c8e <HAL_I2C_Init+0x72>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d004      	beq.n	8002c8e <HAL_I2C_Init+0x72>
 8002c84:	f240 211b 	movw	r1, #539	; 0x21b
 8002c88:	4873      	ldr	r0, [pc, #460]	; (8002e58 <HAL_I2C_Init+0x23c>)
 8002c8a:	f7fe fe5c 	bl	8001946 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_I2C_Init+0x8e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c9e:	d004      	beq.n	8002caa <HAL_I2C_Init+0x8e>
 8002ca0:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8002ca4:	486c      	ldr	r0, [pc, #432]	; (8002e58 <HAL_I2C_Init+0x23c>)
 8002ca6:	f7fe fe4e 	bl	8001946 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	2bff      	cmp	r3, #255	; 0xff
 8002cb0:	d904      	bls.n	8002cbc <HAL_I2C_Init+0xa0>
 8002cb2:	f240 211d 	movw	r1, #541	; 0x21d
 8002cb6:	4868      	ldr	r0, [pc, #416]	; (8002e58 <HAL_I2C_Init+0x23c>)
 8002cb8:	f7fe fe45 	bl	8001946 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d020      	beq.n	8002d06 <HAL_I2C_Init+0xea>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d01c      	beq.n	8002d06 <HAL_I2C_Init+0xea>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d018      	beq.n	8002d06 <HAL_I2C_Init+0xea>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d014      	beq.n	8002d06 <HAL_I2C_Init+0xea>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d010      	beq.n	8002d06 <HAL_I2C_Init+0xea>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b05      	cmp	r3, #5
 8002cea:	d00c      	beq.n	8002d06 <HAL_I2C_Init+0xea>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	2b06      	cmp	r3, #6
 8002cf2:	d008      	beq.n	8002d06 <HAL_I2C_Init+0xea>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b07      	cmp	r3, #7
 8002cfa:	d004      	beq.n	8002d06 <HAL_I2C_Init+0xea>
 8002cfc:	f240 211e 	movw	r1, #542	; 0x21e
 8002d00:	4855      	ldr	r0, [pc, #340]	; (8002e58 <HAL_I2C_Init+0x23c>)
 8002d02:	f7fe fe20 	bl	8001946 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <HAL_I2C_Init+0x106>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d16:	d004      	beq.n	8002d22 <HAL_I2C_Init+0x106>
 8002d18:	f240 211f 	movw	r1, #543	; 0x21f
 8002d1c:	484e      	ldr	r0, [pc, #312]	; (8002e58 <HAL_I2C_Init+0x23c>)
 8002d1e:	f7fe fe12 	bl	8001946 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <HAL_I2C_Init+0x122>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d32:	d004      	beq.n	8002d3e <HAL_I2C_Init+0x122>
 8002d34:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002d38:	4847      	ldr	r0, [pc, #284]	; (8002e58 <HAL_I2C_Init+0x23c>)
 8002d3a:	f7fe fe04 	bl	8001946 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fe fa84 	bl	8001260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2224      	movs	r2, #36	; 0x24
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d107      	bne.n	8002da6 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	e006      	b.n	8002db4 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002db2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d104      	bne.n	8002dc6 <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <HAL_I2C_Init+0x240>)
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002de4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69d9      	ldr	r1, [r3, #28]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1a      	ldr	r2, [r3, #32]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40005400 	.word	0x40005400
 8002e4c:	40005800 	.word	0x40005800
 8002e50:	40005c00 	.word	0x40005c00
 8002e54:	40006000 	.word	0x40006000
 8002e58:	08012bf4 	.word	0x08012bf4
 8002e5c:	02008000 	.word	0x02008000

08002e60 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	817b      	strh	r3, [r7, #10]
 8002e70:	4613      	mov	r3, r2
 8002e72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	f040 80da 	bne.w	8003036 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_I2C_Master_Transmit+0x30>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e0d3      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1d8>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e98:	f7ff f8ea 	bl	8002070 <HAL_GetTick>
 8002e9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	2319      	movs	r3, #25
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f9e6 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e0be      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2221      	movs	r2, #33	; 0x21
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	893a      	ldrh	r2, [r7, #8]
 8002eda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2bff      	cmp	r3, #255	; 0xff
 8002eea:	d90e      	bls.n	8002f0a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	22ff      	movs	r2, #255	; 0xff
 8002ef0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	8979      	ldrh	r1, [r7, #10]
 8002efa:	4b51      	ldr	r3, [pc, #324]	; (8003040 <HAL_I2C_Master_Transmit+0x1e0>)
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fbd0 	bl	80036a8 <I2C_TransferConfig>
 8002f08:	e06c      	b.n	8002fe4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	8979      	ldrh	r1, [r7, #10]
 8002f1c:	4b48      	ldr	r3, [pc, #288]	; (8003040 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 fbbf 	bl	80036a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f2a:	e05b      	b.n	8002fe4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	6a39      	ldr	r1, [r7, #32]
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 f9e3 	bl	80032fc <I2C_WaitOnTXISFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e07b      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	781a      	ldrb	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d034      	beq.n	8002fe4 <HAL_I2C_Master_Transmit+0x184>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d130      	bne.n	8002fe4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2180      	movs	r1, #128	; 0x80
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f975 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e04d      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2bff      	cmp	r3, #255	; 0xff
 8002fa4:	d90e      	bls.n	8002fc4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	22ff      	movs	r2, #255	; 0xff
 8002faa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	8979      	ldrh	r1, [r7, #10]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fb73 	bl	80036a8 <I2C_TransferConfig>
 8002fc2:	e00f      	b.n	8002fe4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	8979      	ldrh	r1, [r7, #10]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fb62 	bl	80036a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d19e      	bne.n	8002f2c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	6a39      	ldr	r1, [r7, #32]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f9c2 	bl	800337c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e01a      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2220      	movs	r2, #32
 8003008:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_I2C_Master_Transmit+0x1e4>)
 8003016:	400b      	ands	r3, r1
 8003018:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003036:	2302      	movs	r3, #2
  }
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	80002000 	.word	0x80002000
 8003044:	fe00e800 	.word	0xfe00e800

08003048 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af02      	add	r7, sp, #8
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	461a      	mov	r2, r3
 8003054:	460b      	mov	r3, r1
 8003056:	817b      	strh	r3, [r7, #10]
 8003058:	4613      	mov	r3, r2
 800305a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b20      	cmp	r3, #32
 8003066:	f040 80db 	bne.w	8003220 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_I2C_Master_Receive+0x30>
 8003074:	2302      	movs	r3, #2
 8003076:	e0d4      	b.n	8003222 <HAL_I2C_Master_Receive+0x1da>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003080:	f7fe fff6 	bl	8002070 <HAL_GetTick>
 8003084:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	2319      	movs	r3, #25
 800308c:	2201      	movs	r2, #1
 800308e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f8f2 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e0bf      	b.n	8003222 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2222      	movs	r2, #34	; 0x22
 80030a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2210      	movs	r2, #16
 80030ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	893a      	ldrh	r2, [r7, #8]
 80030c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2bff      	cmp	r3, #255	; 0xff
 80030d2:	d90e      	bls.n	80030f2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	22ff      	movs	r2, #255	; 0xff
 80030d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	8979      	ldrh	r1, [r7, #10]
 80030e2:	4b52      	ldr	r3, [pc, #328]	; (800322c <HAL_I2C_Master_Receive+0x1e4>)
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fadc 	bl	80036a8 <I2C_TransferConfig>
 80030f0:	e06d      	b.n	80031ce <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	b2da      	uxtb	r2, r3
 8003102:	8979      	ldrh	r1, [r7, #10]
 8003104:	4b49      	ldr	r3, [pc, #292]	; (800322c <HAL_I2C_Master_Receive+0x1e4>)
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 facb 	bl	80036a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003112:	e05c      	b.n	80031ce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	6a39      	ldr	r1, [r7, #32]
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f96b 	bl	80033f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e07c      	b.n	8003222 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d034      	beq.n	80031ce <HAL_I2C_Master_Receive+0x186>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	d130      	bne.n	80031ce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	2200      	movs	r2, #0
 8003174:	2180      	movs	r1, #128	; 0x80
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f880 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e04d      	b.n	8003222 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	2bff      	cmp	r3, #255	; 0xff
 800318e:	d90e      	bls.n	80031ae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	22ff      	movs	r2, #255	; 0xff
 8003194:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319a:	b2da      	uxtb	r2, r3
 800319c:	8979      	ldrh	r1, [r7, #10]
 800319e:	2300      	movs	r3, #0
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 fa7e 	bl	80036a8 <I2C_TransferConfig>
 80031ac:	e00f      	b.n	80031ce <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	8979      	ldrh	r1, [r7, #10]
 80031c0:	2300      	movs	r3, #0
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fa6d 	bl	80036a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d19d      	bne.n	8003114 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	6a39      	ldr	r1, [r7, #32]
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f8cd 	bl	800337c <I2C_WaitOnSTOPFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e01a      	b.n	8003222 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2220      	movs	r2, #32
 80031f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6859      	ldr	r1, [r3, #4]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <HAL_I2C_Master_Receive+0x1e8>)
 8003200:	400b      	ands	r3, r1
 8003202:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	e000      	b.n	8003222 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003220:	2302      	movs	r3, #2
  }
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	80002400 	.word	0x80002400
 8003230:	fe00e800 	.word	0xfe00e800

08003234 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b02      	cmp	r3, #2
 8003248:	d103      	bne.n	8003252 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2200      	movs	r2, #0
 8003250:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b01      	cmp	r3, #1
 800325e:	d007      	beq.n	8003270 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	619a      	str	r2, [r3, #24]
  }
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800328c:	e022      	b.n	80032d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d01e      	beq.n	80032d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003296:	f7fe feeb 	bl	8002070 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d302      	bcc.n	80032ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d113      	bne.n	80032d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e00f      	b.n	80032f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	4013      	ands	r3, r2
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d0cd      	beq.n	800328e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003308:	e02c      	b.n	8003364 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f8ea 	bl	80034e8 <I2C_IsErrorOccurred>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e02a      	b.n	8003374 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003324:	d01e      	beq.n	8003364 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003326:	f7fe fea3 	bl	8002070 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	429a      	cmp	r2, r3
 8003334:	d302      	bcc.n	800333c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d113      	bne.n	8003364 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e007      	b.n	8003374 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b02      	cmp	r3, #2
 8003370:	d1cb      	bne.n	800330a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003388:	e028      	b.n	80033dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f8aa 	bl	80034e8 <I2C_IsErrorOccurred>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e026      	b.n	80033ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339e:	f7fe fe67 	bl	8002070 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d302      	bcc.n	80033b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d113      	bne.n	80033dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b8:	f043 0220 	orr.w	r2, r3, #32
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e007      	b.n	80033ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	d1cf      	bne.n	800338a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003400:	e064      	b.n	80034cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f86e 	bl	80034e8 <I2C_IsErrorOccurred>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e062      	b.n	80034dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	2b20      	cmp	r3, #32
 8003422:	d138      	bne.n	8003496 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b04      	cmp	r3, #4
 8003430:	d105      	bne.n	800343e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	e04e      	b.n	80034dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b10      	cmp	r3, #16
 800344a:	d107      	bne.n	800345c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2210      	movs	r2, #16
 8003452:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2204      	movs	r2, #4
 8003458:	645a      	str	r2, [r3, #68]	; 0x44
 800345a:	e002      	b.n	8003462 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2220      	movs	r2, #32
 8003468:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003476:	400b      	ands	r3, r1
 8003478:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e022      	b.n	80034dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003496:	f7fe fdeb 	bl	8002070 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d302      	bcc.n	80034ac <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10f      	bne.n	80034cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e007      	b.n	80034dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d193      	bne.n	8003402 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	fe00e800 	.word	0xfe00e800

080034e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	; 0x28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	d068      	beq.n	80035e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2210      	movs	r2, #16
 800351a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800351c:	e049      	b.n	80035b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d045      	beq.n	80035b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7fe fda3 	bl	8002070 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <I2C_IsErrorOccurred+0x54>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d13a      	bne.n	80035b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003546:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800354e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800355a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800355e:	d121      	bne.n	80035a4 <I2C_IsErrorOccurred+0xbc>
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003566:	d01d      	beq.n	80035a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003568:	7cfb      	ldrb	r3, [r7, #19]
 800356a:	2b20      	cmp	r3, #32
 800356c:	d01a      	beq.n	80035a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800357c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800357e:	f7fe fd77 	bl	8002070 <HAL_GetTick>
 8003582:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003584:	e00e      	b.n	80035a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003586:	f7fe fd73 	bl	8002070 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b19      	cmp	r3, #25
 8003592:	d907      	bls.n	80035a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	f043 0320 	orr.w	r3, r3, #32
 800359a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80035a2:	e006      	b.n	80035b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b20      	cmp	r3, #32
 80035b0:	d1e9      	bne.n	8003586 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d003      	beq.n	80035c8 <I2C_IsErrorOccurred+0xe0>
 80035c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0aa      	beq.n	800351e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d103      	bne.n	80035d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2220      	movs	r2, #32
 80035d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	f043 0304 	orr.w	r3, r3, #4
 80035de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00b      	beq.n	8003610 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003608:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00b      	beq.n	8003632 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	f043 0308 	orr.w	r3, r3, #8
 8003620:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800362a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	f043 0302 	orr.w	r3, r3, #2
 8003642:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800364c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01c      	beq.n	8003696 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff fde9 	bl	8003234 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <I2C_IsErrorOccurred+0x1bc>)
 800366e:	400b      	ands	r3, r1
 8003670:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	431a      	orrs	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800369a:	4618      	mov	r0, r3
 800369c:	3728      	adds	r7, #40	; 0x28
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	fe00e800 	.word	0xfe00e800

080036a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	607b      	str	r3, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	817b      	strh	r3, [r7, #10]
 80036b6:	4613      	mov	r3, r2
 80036b8:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a2f      	ldr	r2, [pc, #188]	; (800377c <I2C_TransferConfig+0xd4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d013      	beq.n	80036ec <I2C_TransferConfig+0x44>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a2d      	ldr	r2, [pc, #180]	; (8003780 <I2C_TransferConfig+0xd8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00e      	beq.n	80036ec <I2C_TransferConfig+0x44>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a2c      	ldr	r2, [pc, #176]	; (8003784 <I2C_TransferConfig+0xdc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d009      	beq.n	80036ec <I2C_TransferConfig+0x44>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <I2C_TransferConfig+0xe0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <I2C_TransferConfig+0x44>
 80036e2:	f641 3147 	movw	r1, #6983	; 0x1b47
 80036e6:	4829      	ldr	r0, [pc, #164]	; (800378c <I2C_TransferConfig+0xe4>)
 80036e8:	f7fe f92d 	bl	8001946 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036f2:	d00b      	beq.n	800370c <I2C_TransferConfig+0x64>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036fa:	d007      	beq.n	800370c <I2C_TransferConfig+0x64>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d004      	beq.n	800370c <I2C_TransferConfig+0x64>
 8003702:	f641 3148 	movw	r1, #6984	; 0x1b48
 8003706:	4821      	ldr	r0, [pc, #132]	; (800378c <I2C_TransferConfig+0xe4>)
 8003708:	f7fe f91d 	bl	8001946 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	4a20      	ldr	r2, [pc, #128]	; (8003790 <I2C_TransferConfig+0xe8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00f      	beq.n	8003734 <I2C_TransferConfig+0x8c>
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <I2C_TransferConfig+0xec>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00b      	beq.n	8003734 <I2C_TransferConfig+0x8c>
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <I2C_TransferConfig+0xf0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d007      	beq.n	8003734 <I2C_TransferConfig+0x8c>
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d004      	beq.n	8003734 <I2C_TransferConfig+0x8c>
 800372a:	f641 3149 	movw	r1, #6985	; 0x1b49
 800372e:	4817      	ldr	r0, [pc, #92]	; (800378c <I2C_TransferConfig+0xe4>)
 8003730:	f7fe f909 	bl	8001946 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003734:	897b      	ldrh	r3, [r7, #10]
 8003736:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800373a:	7a7b      	ldrb	r3, [r7, #9]
 800373c:	041b      	lsls	r3, r3, #16
 800373e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003742:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	4313      	orrs	r3, r2
 800374c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003750:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	0d5b      	lsrs	r3, r3, #21
 800375c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003760:	4b0e      	ldr	r3, [pc, #56]	; (800379c <I2C_TransferConfig+0xf4>)
 8003762:	430b      	orrs	r3, r1
 8003764:	43db      	mvns	r3, r3
 8003766:	ea02 0103 	and.w	r1, r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	430a      	orrs	r2, r1
 8003772:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003774:	bf00      	nop
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40005400 	.word	0x40005400
 8003780:	40005800 	.word	0x40005800
 8003784:	40005c00 	.word	0x40005c00
 8003788:	40006000 	.word	0x40006000
 800378c:	08012bf4 	.word	0x08012bf4
 8003790:	80004000 	.word	0x80004000
 8003794:	80002400 	.word	0x80002400
 8003798:	80002000 	.word	0x80002000
 800379c:	03ff63ff 	.word	0x03ff63ff

080037a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a32      	ldr	r2, [pc, #200]	; (8003878 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d012      	beq.n	80037da <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a30      	ldr	r2, [pc, #192]	; (800387c <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00d      	beq.n	80037da <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2f      	ldr	r2, [pc, #188]	; (8003880 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d008      	beq.n	80037da <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a2d      	ldr	r2, [pc, #180]	; (8003884 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d003      	beq.n	80037da <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80037d2:	215e      	movs	r1, #94	; 0x5e
 80037d4:	482c      	ldr	r0, [pc, #176]	; (8003888 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80037d6:	f7fe f8b6 	bl	8001946 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e6:	d003      	beq.n	80037f0 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80037e8:	215f      	movs	r1, #95	; 0x5f
 80037ea:	4827      	ldr	r0, [pc, #156]	; (8003888 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80037ec:	f7fe f8ab 	bl	8001946 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d138      	bne.n	800386e <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8003806:	2302      	movs	r3, #2
 8003808:	e032      	b.n	8003870 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2224      	movs	r2, #36	; 0x24
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003838:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6819      	ldr	r1, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	e000      	b.n	8003870 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800386e:	2302      	movs	r3, #2
  }
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40005400 	.word	0x40005400
 800387c:	40005800 	.word	0x40005800
 8003880:	40005c00 	.word	0x40005c00
 8003884:	40006000 	.word	0x40006000
 8003888:	08012c2c 	.word	0x08012c2c

0800388c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a31      	ldr	r2, [pc, #196]	; (8003960 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d012      	beq.n	80038c6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a2f      	ldr	r2, [pc, #188]	; (8003964 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00d      	beq.n	80038c6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a2e      	ldr	r2, [pc, #184]	; (8003968 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d008      	beq.n	80038c6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a2c      	ldr	r2, [pc, #176]	; (800396c <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d003      	beq.n	80038c6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80038be:	218c      	movs	r1, #140	; 0x8c
 80038c0:	482b      	ldr	r0, [pc, #172]	; (8003970 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80038c2:	f7fe f840 	bl	8001946 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b0f      	cmp	r3, #15
 80038ca:	d903      	bls.n	80038d4 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 80038cc:	218d      	movs	r1, #141	; 0x8d
 80038ce:	4828      	ldr	r0, [pc, #160]	; (8003970 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80038d0:	f7fe f839 	bl	8001946 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d139      	bne.n	8003954 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_I2CEx_ConfigDigitalFilter+0x62>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e033      	b.n	8003956 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2224      	movs	r2, #36	; 0x24
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800391c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	021b      	lsls	r3, r3, #8
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	e000      	b.n	8003956 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003954:	2302      	movs	r3, #2
  }
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40005400 	.word	0x40005400
 8003964:	40005800 	.word	0x40005800
 8003968:	40005c00 	.word	0x40005c00
 800396c:	40006000 	.word	0x40006000
 8003970:	08012c2c 	.word	0x08012c2c

08003974 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800397e:	4b23      	ldr	r3, [pc, #140]	; (8003a0c <HAL_PWREx_EnableOverDrive+0x98>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	4a22      	ldr	r2, [pc, #136]	; (8003a0c <HAL_PWREx_EnableOverDrive+0x98>)
 8003984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003988:	6413      	str	r3, [r2, #64]	; 0x40
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <HAL_PWREx_EnableOverDrive+0x98>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003996:	4b1e      	ldr	r3, [pc, #120]	; (8003a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039a2:	f7fe fb65 	bl	8002070 <HAL_GetTick>
 80039a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039a8:	e009      	b.n	80039be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039aa:	f7fe fb61 	bl	8002070 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039b8:	d901      	bls.n	80039be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e022      	b.n	8003a04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039be:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ca:	d1ee      	bne.n	80039aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039cc:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039d8:	f7fe fb4a 	bl	8002070 <HAL_GetTick>
 80039dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039de:	e009      	b.n	80039f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039e0:	f7fe fb46 	bl	8002070 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039ee:	d901      	bls.n	80039f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e007      	b.n	8003a04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039f4:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a00:	d1ee      	bne.n	80039e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40007000 	.word	0x40007000

08003a14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e345      	b.n	80040b6 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b0f      	cmp	r3, #15
 8003a30:	d904      	bls.n	8003a3c <HAL_RCC_OscConfig+0x28>
 8003a32:	f240 1163 	movw	r1, #355	; 0x163
 8003a36:	4892      	ldr	r0, [pc, #584]	; (8003c80 <HAL_RCC_OscConfig+0x26c>)
 8003a38:	f7fd ff85 	bl	8001946 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 809a 	beq.w	8003b7e <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00e      	beq.n	8003a70 <HAL_RCC_OscConfig+0x5c>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5a:	d009      	beq.n	8003a70 <HAL_RCC_OscConfig+0x5c>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a64:	d004      	beq.n	8003a70 <HAL_RCC_OscConfig+0x5c>
 8003a66:	f240 1169 	movw	r1, #361	; 0x169
 8003a6a:	4885      	ldr	r0, [pc, #532]	; (8003c80 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	f7fd ff6b 	bl	8001946 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a70:	4b84      	ldr	r3, [pc, #528]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 030c 	and.w	r3, r3, #12
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d00c      	beq.n	8003a96 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7c:	4b81      	ldr	r3, [pc, #516]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d112      	bne.n	8003aae <HAL_RCC_OscConfig+0x9a>
 8003a88:	4b7e      	ldr	r3, [pc, #504]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a94:	d10b      	bne.n	8003aae <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a96:	4b7b      	ldr	r3, [pc, #492]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d06c      	beq.n	8003b7c <HAL_RCC_OscConfig+0x168>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d168      	bne.n	8003b7c <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e303      	b.n	80040b6 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0xb2>
 8003ab8:	4b72      	ldr	r3, [pc, #456]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a71      	ldr	r2, [pc, #452]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	e02e      	b.n	8003b24 <HAL_RCC_OscConfig+0x110>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0xd4>
 8003ace:	4b6d      	ldr	r3, [pc, #436]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a6c      	ldr	r2, [pc, #432]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	4b6a      	ldr	r3, [pc, #424]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a69      	ldr	r2, [pc, #420]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	e01d      	b.n	8003b24 <HAL_RCC_OscConfig+0x110>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCC_OscConfig+0xf8>
 8003af2:	4b64      	ldr	r3, [pc, #400]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a63      	ldr	r2, [pc, #396]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b61      	ldr	r3, [pc, #388]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a60      	ldr	r2, [pc, #384]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCC_OscConfig+0x110>
 8003b0c:	4b5d      	ldr	r3, [pc, #372]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a5c      	ldr	r2, [pc, #368]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b5a      	ldr	r3, [pc, #360]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a59      	ldr	r2, [pc, #356]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d013      	beq.n	8003b54 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fe faa0 	bl	8002070 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fe fa9c 	bl	8002070 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	; 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e2b7      	b.n	80040b6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	4b4f      	ldr	r3, [pc, #316]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0x120>
 8003b52:	e014      	b.n	8003b7e <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fe fa8c 	bl	8002070 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fe fa88 	bl	8002070 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e2a3      	b.n	80040b6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	4b45      	ldr	r3, [pc, #276]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x148>
 8003b7a:	e000      	b.n	8003b7e <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8084 	beq.w	8003c94 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x192>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d004      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x192>
 8003b9c:	f240 119b 	movw	r1, #411	; 0x19b
 8003ba0:	4837      	ldr	r0, [pc, #220]	; (8003c80 <HAL_RCC_OscConfig+0x26c>)
 8003ba2:	f7fd fed0 	bl	8001946 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	2b1f      	cmp	r3, #31
 8003bac:	d904      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x1a4>
 8003bae:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003bb2:	4833      	ldr	r0, [pc, #204]	; (8003c80 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	f7fd fec7 	bl	8001946 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bb8:	4b32      	ldr	r3, [pc, #200]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00b      	beq.n	8003bdc <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bc4:	4b2f      	ldr	r3, [pc, #188]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d11c      	bne.n	8003c0a <HAL_RCC_OscConfig+0x1f6>
 8003bd0:	4b2c      	ldr	r3, [pc, #176]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d116      	bne.n	8003c0a <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bdc:	4b29      	ldr	r3, [pc, #164]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x1e0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e260      	b.n	80040b6 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf4:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4920      	ldr	r1, [pc, #128]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c08:	e044      	b.n	8003c94 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d023      	beq.n	8003c5a <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c12:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1b      	ldr	r2, [pc, #108]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1e:	f7fe fa27 	bl	8002070 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c26:	f7fe fa23 	bl	8002070 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e23e      	b.n	80040b6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c38:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c44:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	490c      	ldr	r1, [pc, #48]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	600b      	str	r3, [r1, #0]
 8003c58:	e01c      	b.n	8003c94 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c5a:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a09      	ldr	r2, [pc, #36]	; (8003c84 <HAL_RCC_OscConfig+0x270>)
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c66:	f7fe fa03 	bl	8002070 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6c:	e00c      	b.n	8003c88 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c6e:	f7fe f9ff 	bl	8002070 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d905      	bls.n	8003c88 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e21a      	b.n	80040b6 <HAL_RCC_OscConfig+0x6a2>
 8003c80:	08012c68 	.word	0x08012c68
 8003c84:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c88:	4b7e      	ldr	r3, [pc, #504]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1ec      	bne.n	8003c6e <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d043      	beq.n	8003d28 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_RCC_OscConfig+0x2a6>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d004      	beq.n	8003cba <HAL_RCC_OscConfig+0x2a6>
 8003cb0:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8003cb4:	4874      	ldr	r0, [pc, #464]	; (8003e88 <HAL_RCC_OscConfig+0x474>)
 8003cb6:	f7fd fe46 	bl	8001946 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d019      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc2:	4b70      	ldr	r3, [pc, #448]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc6:	4a6f      	ldr	r2, [pc, #444]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cce:	f7fe f9cf 	bl	8002070 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd6:	f7fe f9cb 	bl	8002070 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e1e6      	b.n	80040b6 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce8:	4b66      	ldr	r3, [pc, #408]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0f0      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x2c2>
 8003cf4:	e018      	b.n	8003d28 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf6:	4b63      	ldr	r3, [pc, #396]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfa:	4a62      	ldr	r2, [pc, #392]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d02:	f7fe f9b5 	bl	8002070 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0a:	f7fe f9b1 	bl	8002070 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e1cc      	b.n	80040b6 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d1c:	4b59      	ldr	r3, [pc, #356]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f0      	bne.n	8003d0a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80bc 	beq.w	8003eae <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00c      	beq.n	8003d58 <HAL_RCC_OscConfig+0x344>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d008      	beq.n	8003d58 <HAL_RCC_OscConfig+0x344>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b05      	cmp	r3, #5
 8003d4c:	d004      	beq.n	8003d58 <HAL_RCC_OscConfig+0x344>
 8003d4e:	f240 2106 	movw	r1, #518	; 0x206
 8003d52:	484d      	ldr	r0, [pc, #308]	; (8003e88 <HAL_RCC_OscConfig+0x474>)
 8003d54:	f7fd fdf7 	bl	8001946 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d58:	4b4a      	ldr	r3, [pc, #296]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10d      	bne.n	8003d80 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d64:	4b47      	ldr	r3, [pc, #284]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	4a46      	ldr	r2, [pc, #280]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d70:	4b44      	ldr	r3, [pc, #272]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d80:	4b42      	ldr	r3, [pc, #264]	; (8003e8c <HAL_RCC_OscConfig+0x478>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d118      	bne.n	8003dbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d8c:	4b3f      	ldr	r3, [pc, #252]	; (8003e8c <HAL_RCC_OscConfig+0x478>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a3e      	ldr	r2, [pc, #248]	; (8003e8c <HAL_RCC_OscConfig+0x478>)
 8003d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d98:	f7fe f96a 	bl	8002070 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da0:	f7fe f966 	bl	8002070 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b64      	cmp	r3, #100	; 0x64
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e181      	b.n	80040b6 <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db2:	4b36      	ldr	r3, [pc, #216]	; (8003e8c <HAL_RCC_OscConfig+0x478>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d106      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x3c0>
 8003dc6:	4b2f      	ldr	r3, [pc, #188]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	4a2e      	ldr	r2, [pc, #184]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd2:	e02d      	b.n	8003e30 <HAL_RCC_OscConfig+0x41c>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10c      	bne.n	8003df6 <HAL_RCC_OscConfig+0x3e2>
 8003ddc:	4b29      	ldr	r3, [pc, #164]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	4a28      	ldr	r2, [pc, #160]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003de2:	f023 0301 	bic.w	r3, r3, #1
 8003de6:	6713      	str	r3, [r2, #112]	; 0x70
 8003de8:	4b26      	ldr	r3, [pc, #152]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	4a25      	ldr	r2, [pc, #148]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003dee:	f023 0304 	bic.w	r3, r3, #4
 8003df2:	6713      	str	r3, [r2, #112]	; 0x70
 8003df4:	e01c      	b.n	8003e30 <HAL_RCC_OscConfig+0x41c>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b05      	cmp	r3, #5
 8003dfc:	d10c      	bne.n	8003e18 <HAL_RCC_OscConfig+0x404>
 8003dfe:	4b21      	ldr	r3, [pc, #132]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	4a20      	ldr	r2, [pc, #128]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003e04:	f043 0304 	orr.w	r3, r3, #4
 8003e08:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0a:	4b1e      	ldr	r3, [pc, #120]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0e:	4a1d      	ldr	r2, [pc, #116]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	6713      	str	r3, [r2, #112]	; 0x70
 8003e16:	e00b      	b.n	8003e30 <HAL_RCC_OscConfig+0x41c>
 8003e18:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	4a19      	ldr	r2, [pc, #100]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003e1e:	f023 0301 	bic.w	r3, r3, #1
 8003e22:	6713      	str	r3, [r2, #112]	; 0x70
 8003e24:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	4a16      	ldr	r2, [pc, #88]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003e2a:	f023 0304 	bic.w	r3, r3, #4
 8003e2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d015      	beq.n	8003e64 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e38:	f7fe f91a 	bl	8002070 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e40:	f7fe f916 	bl	8002070 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e12f      	b.n	80040b6 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e56:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <HAL_RCC_OscConfig+0x470>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0ee      	beq.n	8003e40 <HAL_RCC_OscConfig+0x42c>
 8003e62:	e01b      	b.n	8003e9c <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e64:	f7fe f904 	bl	8002070 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e6a:	e011      	b.n	8003e90 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6c:	f7fe f900 	bl	8002070 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d908      	bls.n	8003e90 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e119      	b.n	80040b6 <HAL_RCC_OscConfig+0x6a2>
 8003e82:	bf00      	nop
 8003e84:	40023800 	.word	0x40023800
 8003e88:	08012c68 	.word	0x08012c68
 8003e8c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e90:	4b8b      	ldr	r3, [pc, #556]	; (80040c0 <HAL_RCC_OscConfig+0x6ac>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e7      	bne.n	8003e6c <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d105      	bne.n	8003eae <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea2:	4b87      	ldr	r3, [pc, #540]	; (80040c0 <HAL_RCC_OscConfig+0x6ac>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	4a86      	ldr	r2, [pc, #536]	; (80040c0 <HAL_RCC_OscConfig+0x6ac>)
 8003ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00c      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x4bc>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d008      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x4bc>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d004      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x4bc>
 8003ec6:	f240 214a 	movw	r1, #586	; 0x24a
 8003eca:	487e      	ldr	r0, [pc, #504]	; (80040c4 <HAL_RCC_OscConfig+0x6b0>)
 8003ecc:	f7fd fd3b 	bl	8001946 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80ed 	beq.w	80040b4 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eda:	4b79      	ldr	r3, [pc, #484]	; (80040c0 <HAL_RCC_OscConfig+0x6ac>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	f000 80b4 	beq.w	8004050 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	f040 8095 	bne.w	800401c <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <HAL_RCC_OscConfig+0x4fa>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f02:	d004      	beq.n	8003f0e <HAL_RCC_OscConfig+0x4fa>
 8003f04:	f240 2153 	movw	r1, #595	; 0x253
 8003f08:	486e      	ldr	r0, [pc, #440]	; (80040c4 <HAL_RCC_OscConfig+0x6b0>)
 8003f0a:	f7fd fd1c 	bl	8001946 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d903      	bls.n	8003f1e <HAL_RCC_OscConfig+0x50a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	2b3f      	cmp	r3, #63	; 0x3f
 8003f1c:	d904      	bls.n	8003f28 <HAL_RCC_OscConfig+0x514>
 8003f1e:	f44f 7115 	mov.w	r1, #596	; 0x254
 8003f22:	4868      	ldr	r0, [pc, #416]	; (80040c4 <HAL_RCC_OscConfig+0x6b0>)
 8003f24:	f7fd fd0f 	bl	8001946 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	2b31      	cmp	r3, #49	; 0x31
 8003f2e:	d904      	bls.n	8003f3a <HAL_RCC_OscConfig+0x526>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003f38:	d904      	bls.n	8003f44 <HAL_RCC_OscConfig+0x530>
 8003f3a:	f240 2155 	movw	r1, #597	; 0x255
 8003f3e:	4861      	ldr	r0, [pc, #388]	; (80040c4 <HAL_RCC_OscConfig+0x6b0>)
 8003f40:	f7fd fd01 	bl	8001946 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d010      	beq.n	8003f6e <HAL_RCC_OscConfig+0x55a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d00c      	beq.n	8003f6e <HAL_RCC_OscConfig+0x55a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	2b06      	cmp	r3, #6
 8003f5a:	d008      	beq.n	8003f6e <HAL_RCC_OscConfig+0x55a>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d004      	beq.n	8003f6e <HAL_RCC_OscConfig+0x55a>
 8003f64:	f240 2156 	movw	r1, #598	; 0x256
 8003f68:	4856      	ldr	r0, [pc, #344]	; (80040c4 <HAL_RCC_OscConfig+0x6b0>)
 8003f6a:	f7fd fcec 	bl	8001946 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d903      	bls.n	8003f7e <HAL_RCC_OscConfig+0x56a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	2b0f      	cmp	r3, #15
 8003f7c:	d904      	bls.n	8003f88 <HAL_RCC_OscConfig+0x574>
 8003f7e:	f240 2157 	movw	r1, #599	; 0x257
 8003f82:	4850      	ldr	r0, [pc, #320]	; (80040c4 <HAL_RCC_OscConfig+0x6b0>)
 8003f84:	f7fd fcdf 	bl	8001946 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f88:	4b4d      	ldr	r3, [pc, #308]	; (80040c0 <HAL_RCC_OscConfig+0x6ac>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a4c      	ldr	r2, [pc, #304]	; (80040c0 <HAL_RCC_OscConfig+0x6ac>)
 8003f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fe f86c 	bl	8002070 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fe f868 	bl	8002070 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e083      	b.n	80040b6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fae:	4b44      	ldr	r3, [pc, #272]	; (80040c0 <HAL_RCC_OscConfig+0x6ac>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	019b      	lsls	r3, r3, #6
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	085b      	lsrs	r3, r3, #1
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	041b      	lsls	r3, r3, #16
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	061b      	lsls	r3, r3, #24
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	4a37      	ldr	r2, [pc, #220]	; (80040c0 <HAL_RCC_OscConfig+0x6ac>)
 8003fe2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fe6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe8:	4b35      	ldr	r3, [pc, #212]	; (80040c0 <HAL_RCC_OscConfig+0x6ac>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a34      	ldr	r2, [pc, #208]	; (80040c0 <HAL_RCC_OscConfig+0x6ac>)
 8003fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fe f83c 	bl	8002070 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fe f838 	bl	8002070 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e053      	b.n	80040b6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400e:	4b2c      	ldr	r3, [pc, #176]	; (80040c0 <HAL_RCC_OscConfig+0x6ac>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x5e8>
 800401a:	e04b      	b.n	80040b4 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401c:	4b28      	ldr	r3, [pc, #160]	; (80040c0 <HAL_RCC_OscConfig+0x6ac>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a27      	ldr	r2, [pc, #156]	; (80040c0 <HAL_RCC_OscConfig+0x6ac>)
 8004022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe f822 	bl	8002070 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004030:	f7fe f81e 	bl	8002070 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e039      	b.n	80040b6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	4b1f      	ldr	r3, [pc, #124]	; (80040c0 <HAL_RCC_OscConfig+0x6ac>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x61c>
 800404e:	e031      	b.n	80040b4 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004050:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <HAL_RCC_OscConfig+0x6ac>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d028      	beq.n	80040b0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d121      	bne.n	80040b0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004076:	429a      	cmp	r2, r3
 8004078:	d11a      	bne.n	80040b0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004080:	4013      	ands	r3, r2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004086:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004088:	4293      	cmp	r3, r2
 800408a:	d111      	bne.n	80040b0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	085b      	lsrs	r3, r3, #1
 8004098:	3b01      	subs	r3, #1
 800409a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800409c:	429a      	cmp	r2, r3
 800409e:	d107      	bne.n	80040b0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d001      	beq.n	80040b4 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40023800 	.word	0x40023800
 80040c4:	08012c68 	.word	0x08012c68

080040c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e18c      	b.n	80043fa <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x28>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b0f      	cmp	r3, #15
 80040ee:	d904      	bls.n	80040fa <HAL_RCC_ClockConfig+0x32>
 80040f0:	f240 21dd 	movw	r1, #733	; 0x2dd
 80040f4:	4887      	ldr	r0, [pc, #540]	; (8004314 <HAL_RCC_ClockConfig+0x24c>)
 80040f6:	f7fd fc26 	bl	8001946 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d031      	beq.n	8004164 <HAL_RCC_ClockConfig+0x9c>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d02e      	beq.n	8004164 <HAL_RCC_ClockConfig+0x9c>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d02b      	beq.n	8004164 <HAL_RCC_ClockConfig+0x9c>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b03      	cmp	r3, #3
 8004110:	d028      	beq.n	8004164 <HAL_RCC_ClockConfig+0x9c>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b04      	cmp	r3, #4
 8004116:	d025      	beq.n	8004164 <HAL_RCC_ClockConfig+0x9c>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b05      	cmp	r3, #5
 800411c:	d022      	beq.n	8004164 <HAL_RCC_ClockConfig+0x9c>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b06      	cmp	r3, #6
 8004122:	d01f      	beq.n	8004164 <HAL_RCC_ClockConfig+0x9c>
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b07      	cmp	r3, #7
 8004128:	d01c      	beq.n	8004164 <HAL_RCC_ClockConfig+0x9c>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b08      	cmp	r3, #8
 800412e:	d019      	beq.n	8004164 <HAL_RCC_ClockConfig+0x9c>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b09      	cmp	r3, #9
 8004134:	d016      	beq.n	8004164 <HAL_RCC_ClockConfig+0x9c>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b0a      	cmp	r3, #10
 800413a:	d013      	beq.n	8004164 <HAL_RCC_ClockConfig+0x9c>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b0b      	cmp	r3, #11
 8004140:	d010      	beq.n	8004164 <HAL_RCC_ClockConfig+0x9c>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b0c      	cmp	r3, #12
 8004146:	d00d      	beq.n	8004164 <HAL_RCC_ClockConfig+0x9c>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b0d      	cmp	r3, #13
 800414c:	d00a      	beq.n	8004164 <HAL_RCC_ClockConfig+0x9c>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b0e      	cmp	r3, #14
 8004152:	d007      	beq.n	8004164 <HAL_RCC_ClockConfig+0x9c>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2b0f      	cmp	r3, #15
 8004158:	d004      	beq.n	8004164 <HAL_RCC_ClockConfig+0x9c>
 800415a:	f240 21de 	movw	r1, #734	; 0x2de
 800415e:	486d      	ldr	r0, [pc, #436]	; (8004314 <HAL_RCC_ClockConfig+0x24c>)
 8004160:	f7fd fbf1 	bl	8001946 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004164:	4b6c      	ldr	r3, [pc, #432]	; (8004318 <HAL_RCC_ClockConfig+0x250>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d910      	bls.n	8004194 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b69      	ldr	r3, [pc, #420]	; (8004318 <HAL_RCC_ClockConfig+0x250>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 020f 	bic.w	r2, r3, #15
 800417a:	4967      	ldr	r1, [pc, #412]	; (8004318 <HAL_RCC_ClockConfig+0x250>)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b65      	ldr	r3, [pc, #404]	; (8004318 <HAL_RCC_ClockConfig+0x250>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e132      	b.n	80043fa <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d049      	beq.n	8004234 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041ac:	4b5b      	ldr	r3, [pc, #364]	; (800431c <HAL_RCC_ClockConfig+0x254>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	4a5a      	ldr	r2, [pc, #360]	; (800431c <HAL_RCC_ClockConfig+0x254>)
 80041b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041c4:	4b55      	ldr	r3, [pc, #340]	; (800431c <HAL_RCC_ClockConfig+0x254>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	4a54      	ldr	r2, [pc, #336]	; (800431c <HAL_RCC_ClockConfig+0x254>)
 80041ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d024      	beq.n	8004222 <HAL_RCC_ClockConfig+0x15a>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b80      	cmp	r3, #128	; 0x80
 80041de:	d020      	beq.n	8004222 <HAL_RCC_ClockConfig+0x15a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b90      	cmp	r3, #144	; 0x90
 80041e6:	d01c      	beq.n	8004222 <HAL_RCC_ClockConfig+0x15a>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2ba0      	cmp	r3, #160	; 0xa0
 80041ee:	d018      	beq.n	8004222 <HAL_RCC_ClockConfig+0x15a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2bb0      	cmp	r3, #176	; 0xb0
 80041f6:	d014      	beq.n	8004222 <HAL_RCC_ClockConfig+0x15a>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2bc0      	cmp	r3, #192	; 0xc0
 80041fe:	d010      	beq.n	8004222 <HAL_RCC_ClockConfig+0x15a>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2bd0      	cmp	r3, #208	; 0xd0
 8004206:	d00c      	beq.n	8004222 <HAL_RCC_ClockConfig+0x15a>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2be0      	cmp	r3, #224	; 0xe0
 800420e:	d008      	beq.n	8004222 <HAL_RCC_ClockConfig+0x15a>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2bf0      	cmp	r3, #240	; 0xf0
 8004216:	d004      	beq.n	8004222 <HAL_RCC_ClockConfig+0x15a>
 8004218:	f240 3102 	movw	r1, #770	; 0x302
 800421c:	483d      	ldr	r0, [pc, #244]	; (8004314 <HAL_RCC_ClockConfig+0x24c>)
 800421e:	f7fd fb92 	bl	8001946 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004222:	4b3e      	ldr	r3, [pc, #248]	; (800431c <HAL_RCC_ClockConfig+0x254>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	493b      	ldr	r1, [pc, #236]	; (800431c <HAL_RCC_ClockConfig+0x254>)
 8004230:	4313      	orrs	r3, r2
 8004232:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d051      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00c      	beq.n	8004262 <HAL_RCC_ClockConfig+0x19a>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d008      	beq.n	8004262 <HAL_RCC_ClockConfig+0x19a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d004      	beq.n	8004262 <HAL_RCC_ClockConfig+0x19a>
 8004258:	f240 3109 	movw	r1, #777	; 0x309
 800425c:	482d      	ldr	r0, [pc, #180]	; (8004314 <HAL_RCC_ClockConfig+0x24c>)
 800425e:	f7fd fb72 	bl	8001946 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d107      	bne.n	800427a <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	4b2c      	ldr	r3, [pc, #176]	; (800431c <HAL_RCC_ClockConfig+0x254>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d115      	bne.n	80042a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e0bf      	b.n	80043fa <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004282:	4b26      	ldr	r3, [pc, #152]	; (800431c <HAL_RCC_ClockConfig+0x254>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e0b3      	b.n	80043fa <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004292:	4b22      	ldr	r3, [pc, #136]	; (800431c <HAL_RCC_ClockConfig+0x254>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e0ab      	b.n	80043fa <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042a2:	4b1e      	ldr	r3, [pc, #120]	; (800431c <HAL_RCC_ClockConfig+0x254>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f023 0203 	bic.w	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	491b      	ldr	r1, [pc, #108]	; (800431c <HAL_RCC_ClockConfig+0x254>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b4:	f7fd fedc 	bl	8002070 <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fd fed8 	bl	8002070 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e093      	b.n	80043fa <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <HAL_RCC_ClockConfig+0x254>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 020c 	and.w	r2, r3, #12
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d1eb      	bne.n	80042bc <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042e4:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <HAL_RCC_ClockConfig+0x250>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d216      	bcs.n	8004320 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b09      	ldr	r3, [pc, #36]	; (8004318 <HAL_RCC_ClockConfig+0x250>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 020f 	bic.w	r2, r3, #15
 80042fa:	4907      	ldr	r1, [pc, #28]	; (8004318 <HAL_RCC_ClockConfig+0x250>)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b05      	ldr	r3, [pc, #20]	; (8004318 <HAL_RCC_ClockConfig+0x250>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d007      	beq.n	8004320 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e072      	b.n	80043fa <HAL_RCC_ClockConfig+0x332>
 8004314:	08012c68 	.word	0x08012c68
 8004318:	40023c00 	.word	0x40023c00
 800431c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d025      	beq.n	8004378 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d018      	beq.n	8004366 <HAL_RCC_ClockConfig+0x29e>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433c:	d013      	beq.n	8004366 <HAL_RCC_ClockConfig+0x29e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004346:	d00e      	beq.n	8004366 <HAL_RCC_ClockConfig+0x29e>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004350:	d009      	beq.n	8004366 <HAL_RCC_ClockConfig+0x29e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800435a:	d004      	beq.n	8004366 <HAL_RCC_ClockConfig+0x29e>
 800435c:	f240 3146 	movw	r1, #838	; 0x346
 8004360:	4828      	ldr	r0, [pc, #160]	; (8004404 <HAL_RCC_ClockConfig+0x33c>)
 8004362:	f7fd faf0 	bl	8001946 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004366:	4b28      	ldr	r3, [pc, #160]	; (8004408 <HAL_RCC_ClockConfig+0x340>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	4925      	ldr	r1, [pc, #148]	; (8004408 <HAL_RCC_ClockConfig+0x340>)
 8004374:	4313      	orrs	r3, r2
 8004376:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d026      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d018      	beq.n	80043be <HAL_RCC_ClockConfig+0x2f6>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004394:	d013      	beq.n	80043be <HAL_RCC_ClockConfig+0x2f6>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800439e:	d00e      	beq.n	80043be <HAL_RCC_ClockConfig+0x2f6>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80043a8:	d009      	beq.n	80043be <HAL_RCC_ClockConfig+0x2f6>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80043b2:	d004      	beq.n	80043be <HAL_RCC_ClockConfig+0x2f6>
 80043b4:	f240 314d 	movw	r1, #845	; 0x34d
 80043b8:	4812      	ldr	r0, [pc, #72]	; (8004404 <HAL_RCC_ClockConfig+0x33c>)
 80043ba:	f7fd fac4 	bl	8001946 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <HAL_RCC_ClockConfig+0x340>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	490e      	ldr	r1, [pc, #56]	; (8004408 <HAL_RCC_ClockConfig+0x340>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043d2:	f000 f821 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 80043d6:	4602      	mov	r2, r0
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCC_ClockConfig+0x340>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	490a      	ldr	r1, [pc, #40]	; (800440c <HAL_RCC_ClockConfig+0x344>)
 80043e4:	5ccb      	ldrb	r3, [r1, r3]
 80043e6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ea:	4a09      	ldr	r2, [pc, #36]	; (8004410 <HAL_RCC_ClockConfig+0x348>)
 80043ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_ClockConfig+0x34c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fd fdf8 	bl	8001fe8 <HAL_InitTick>

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	08012c68 	.word	0x08012c68
 8004408:	40023800 	.word	0x40023800
 800440c:	08012d8c 	.word	0x08012d8c
 8004410:	20000000 	.word	0x20000000
 8004414:	20000004 	.word	0x20000004

08004418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800441c:	b090      	sub	sp, #64	; 0x40
 800441e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	637b      	str	r3, [r7, #52]	; 0x34
 8004424:	2300      	movs	r3, #0
 8004426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004428:	2300      	movs	r3, #0
 800442a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004430:	4b59      	ldr	r3, [pc, #356]	; (8004598 <HAL_RCC_GetSysClockFreq+0x180>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 030c 	and.w	r3, r3, #12
 8004438:	2b08      	cmp	r3, #8
 800443a:	d00d      	beq.n	8004458 <HAL_RCC_GetSysClockFreq+0x40>
 800443c:	2b08      	cmp	r3, #8
 800443e:	f200 80a1 	bhi.w	8004584 <HAL_RCC_GetSysClockFreq+0x16c>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0x34>
 8004446:	2b04      	cmp	r3, #4
 8004448:	d003      	beq.n	8004452 <HAL_RCC_GetSysClockFreq+0x3a>
 800444a:	e09b      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800444c:	4b53      	ldr	r3, [pc, #332]	; (800459c <HAL_RCC_GetSysClockFreq+0x184>)
 800444e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004450:	e09b      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004452:	4b53      	ldr	r3, [pc, #332]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004454:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004456:	e098      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004458:	4b4f      	ldr	r3, [pc, #316]	; (8004598 <HAL_RCC_GetSysClockFreq+0x180>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004462:	4b4d      	ldr	r3, [pc, #308]	; (8004598 <HAL_RCC_GetSysClockFreq+0x180>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d028      	beq.n	80044c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800446e:	4b4a      	ldr	r3, [pc, #296]	; (8004598 <HAL_RCC_GetSysClockFreq+0x180>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	099b      	lsrs	r3, r3, #6
 8004474:	2200      	movs	r2, #0
 8004476:	623b      	str	r3, [r7, #32]
 8004478:	627a      	str	r2, [r7, #36]	; 0x24
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004480:	2100      	movs	r1, #0
 8004482:	4b47      	ldr	r3, [pc, #284]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004484:	fb03 f201 	mul.w	r2, r3, r1
 8004488:	2300      	movs	r3, #0
 800448a:	fb00 f303 	mul.w	r3, r0, r3
 800448e:	4413      	add	r3, r2
 8004490:	4a43      	ldr	r2, [pc, #268]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004492:	fba0 1202 	umull	r1, r2, r0, r2
 8004496:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004498:	460a      	mov	r2, r1
 800449a:	62ba      	str	r2, [r7, #40]	; 0x28
 800449c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800449e:	4413      	add	r3, r2
 80044a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a4:	2200      	movs	r2, #0
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	61fa      	str	r2, [r7, #28]
 80044aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80044b2:	f7fc fc09 	bl	8000cc8 <__aeabi_uldivmod>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4613      	mov	r3, r2
 80044bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044be:	e053      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044c0:	4b35      	ldr	r3, [pc, #212]	; (8004598 <HAL_RCC_GetSysClockFreq+0x180>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	099b      	lsrs	r3, r3, #6
 80044c6:	2200      	movs	r2, #0
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	617a      	str	r2, [r7, #20]
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044d2:	f04f 0b00 	mov.w	fp, #0
 80044d6:	4652      	mov	r2, sl
 80044d8:	465b      	mov	r3, fp
 80044da:	f04f 0000 	mov.w	r0, #0
 80044de:	f04f 0100 	mov.w	r1, #0
 80044e2:	0159      	lsls	r1, r3, #5
 80044e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044e8:	0150      	lsls	r0, r2, #5
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	ebb2 080a 	subs.w	r8, r2, sl
 80044f2:	eb63 090b 	sbc.w	r9, r3, fp
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004502:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004506:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800450a:	ebb2 0408 	subs.w	r4, r2, r8
 800450e:	eb63 0509 	sbc.w	r5, r3, r9
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	00eb      	lsls	r3, r5, #3
 800451c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004520:	00e2      	lsls	r2, r4, #3
 8004522:	4614      	mov	r4, r2
 8004524:	461d      	mov	r5, r3
 8004526:	eb14 030a 	adds.w	r3, r4, sl
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	eb45 030b 	adc.w	r3, r5, fp
 8004530:	607b      	str	r3, [r7, #4]
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800453e:	4629      	mov	r1, r5
 8004540:	028b      	lsls	r3, r1, #10
 8004542:	4621      	mov	r1, r4
 8004544:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004548:	4621      	mov	r1, r4
 800454a:	028a      	lsls	r2, r1, #10
 800454c:	4610      	mov	r0, r2
 800454e:	4619      	mov	r1, r3
 8004550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004552:	2200      	movs	r2, #0
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	60fa      	str	r2, [r7, #12]
 8004558:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800455c:	f7fc fbb4 	bl	8000cc8 <__aeabi_uldivmod>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4613      	mov	r3, r2
 8004566:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_GetSysClockFreq+0x180>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	3301      	adds	r3, #1
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004578:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004580:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004582:	e002      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_RCC_GetSysClockFreq+0x184>)
 8004586:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800458c:	4618      	mov	r0, r3
 800458e:	3740      	adds	r7, #64	; 0x40
 8004590:	46bd      	mov	sp, r7
 8004592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800
 800459c:	00f42400 	.word	0x00f42400
 80045a0:	017d7840 	.word	0x017d7840

080045a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000000 	.word	0x20000000

080045bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045c0:	f7ff fff0 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045c4:	4602      	mov	r2, r0
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	0a9b      	lsrs	r3, r3, #10
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	4903      	ldr	r1, [pc, #12]	; (80045e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045d2:	5ccb      	ldrb	r3, [r1, r3]
 80045d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d8:	4618      	mov	r0, r3
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40023800 	.word	0x40023800
 80045e0:	08012d9c 	.word	0x08012d9c

080045e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045e8:	f7ff ffdc 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045ec:	4602      	mov	r2, r0
 80045ee:	4b05      	ldr	r3, [pc, #20]	; (8004604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	0b5b      	lsrs	r3, r3, #13
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	4903      	ldr	r1, [pc, #12]	; (8004608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045fa:	5ccb      	ldrb	r3, [r1, r3]
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004600:	4618      	mov	r0, r3
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40023800 	.word	0x40023800
 8004608:	08012d9c 	.word	0x08012d9c

0800460c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	f040 8089 	bne.w	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	f040 8082 	bne.w	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	d17b      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004658:	2b00      	cmp	r3, #0
 800465a:	d175      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b00      	cmp	r3, #0
 8004666:	d16f      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d169      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800467c:	2b00      	cmp	r3, #0
 800467e:	d163      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004688:	2b00      	cmp	r3, #0
 800468a:	d15d      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004694:	2b00      	cmp	r3, #0
 8004696:	d157      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d151      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d14b      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d145      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d13f      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d139      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d133      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d12d      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d127      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d121      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d11b      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d115      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10f      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d109      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0320 	and.w	r3, r3, #32
 800473c:	2b00      	cmp	r3, #0
 800473e:	d103      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004740:	2172      	movs	r1, #114	; 0x72
 8004742:	4895      	ldr	r0, [pc, #596]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004744:	f7fd f8ff 	bl	8001946 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01f      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x162>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004760:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004764:	d003      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004766:	2178      	movs	r1, #120	; 0x78
 8004768:	488b      	ldr	r0, [pc, #556]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800476a:	f7fd f8ec 	bl	8001946 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800476e:	4b8b      	ldr	r3, [pc, #556]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	4a8a      	ldr	r2, [pc, #552]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004774:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004778:	6093      	str	r3, [r2, #8]
 800477a:	4b88      	ldr	r3, [pc, #544]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004782:	4986      	ldr	r1, [pc, #536]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004784:	4313      	orrs	r3, r2
 8004786:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8004790:	2301      	movs	r3, #1
 8004792:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d029      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00d      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b0:	d008      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047ba:	d003      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80047bc:	2188      	movs	r1, #136	; 0x88
 80047be:	4876      	ldr	r0, [pc, #472]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80047c0:	f7fd f8c1 	bl	8001946 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047c4:	4b75      	ldr	r3, [pc, #468]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d2:	4972      	ldr	r1, [pc, #456]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047e2:	d101      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 80047e4:	2301      	movs	r3, #1
 80047e6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 80047f0:	2301      	movs	r3, #1
 80047f2:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d029      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00d      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004810:	d008      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800481a:	d003      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800481c:	219c      	movs	r1, #156	; 0x9c
 800481e:	485e      	ldr	r0, [pc, #376]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004820:	f7fd f891 	bl	8001946 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004824:	4b5d      	ldr	r3, [pc, #372]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800482a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	495a      	ldr	r1, [pc, #360]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004842:	d101      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8004844:	2301      	movs	r3, #1
 8004846:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8004850:	2301      	movs	r3, #1
 8004852:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8004860:	2301      	movs	r3, #1
 8004862:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8186 	beq.w	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800487a:	f000 80e4 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004886:	f000 80de 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	4a44      	ldr	r2, [pc, #272]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004890:	4293      	cmp	r3, r2
 8004892:	f000 80d8 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	4a42      	ldr	r2, [pc, #264]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800489c:	4293      	cmp	r3, r2
 800489e:	f000 80d2 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	4a40      	ldr	r2, [pc, #256]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	f000 80cc 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	4a3e      	ldr	r2, [pc, #248]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	f000 80c6 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	4a3c      	ldr	r2, [pc, #240]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	f000 80c0 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	4a3a      	ldr	r2, [pc, #232]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	f000 80ba 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	4a38      	ldr	r2, [pc, #224]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	f000 80b4 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	4a36      	ldr	r2, [pc, #216]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	f000 80ae 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	4a34      	ldr	r2, [pc, #208]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	f000 80a8 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	4a32      	ldr	r2, [pc, #200]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	f000 80a2 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	4a30      	ldr	r2, [pc, #192]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8004908:	4293      	cmp	r3, r2
 800490a:	f000 809c 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	4a2e      	ldr	r2, [pc, #184]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	f000 8096 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	4a2c      	ldr	r2, [pc, #176]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	f000 8090 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	f000 808a 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	4a28      	ldr	r2, [pc, #160]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	f000 8084 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	4a26      	ldr	r2, [pc, #152]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d07e      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	4a24      	ldr	r2, [pc, #144]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d079      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	4a23      	ldr	r2, [pc, #140]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d074      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	4a21      	ldr	r2, [pc, #132]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d06f      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	4a20      	ldr	r2, [pc, #128]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d06a      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	4a1e      	ldr	r2, [pc, #120]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d065      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	4a1d      	ldr	r2, [pc, #116]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d060      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	4a1b      	ldr	r2, [pc, #108]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d05b      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	4a1a      	ldr	r2, [pc, #104]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	e033      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004998:	08012ca0 	.word	0x08012ca0
 800499c:	40023800 	.word	0x40023800
 80049a0:	00020300 	.word	0x00020300
 80049a4:	00030300 	.word	0x00030300
 80049a8:	00040300 	.word	0x00040300
 80049ac:	00050300 	.word	0x00050300
 80049b0:	00060300 	.word	0x00060300
 80049b4:	00070300 	.word	0x00070300
 80049b8:	00080300 	.word	0x00080300
 80049bc:	00090300 	.word	0x00090300
 80049c0:	000a0300 	.word	0x000a0300
 80049c4:	000b0300 	.word	0x000b0300
 80049c8:	000c0300 	.word	0x000c0300
 80049cc:	000d0300 	.word	0x000d0300
 80049d0:	000e0300 	.word	0x000e0300
 80049d4:	000f0300 	.word	0x000f0300
 80049d8:	00100300 	.word	0x00100300
 80049dc:	00110300 	.word	0x00110300
 80049e0:	00120300 	.word	0x00120300
 80049e4:	00130300 	.word	0x00130300
 80049e8:	00140300 	.word	0x00140300
 80049ec:	00150300 	.word	0x00150300
 80049f0:	00160300 	.word	0x00160300
 80049f4:	00170300 	.word	0x00170300
 80049f8:	00180300 	.word	0x00180300
 80049fc:	00190300 	.word	0x00190300
 8004a00:	d021      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	4a4c      	ldr	r2, [pc, #304]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d01c      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	4a4a      	ldr	r2, [pc, #296]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d017      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	4a49      	ldr	r2, [pc, #292]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d012      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	4a47      	ldr	r2, [pc, #284]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00d      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	4a46      	ldr	r2, [pc, #280]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d008      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	4a44      	ldr	r2, [pc, #272]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d003      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a3e:	21b7      	movs	r1, #183	; 0xb7
 8004a40:	4843      	ldr	r0, [pc, #268]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8004a42:	f7fc ff80 	bl	8001946 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a46:	4b43      	ldr	r3, [pc, #268]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	4a42      	ldr	r2, [pc, #264]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a50:	6413      	str	r3, [r2, #64]	; 0x40
 8004a52:	4b40      	ldr	r3, [pc, #256]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5a:	60bb      	str	r3, [r7, #8]
 8004a5c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a5e:	4b3e      	ldr	r3, [pc, #248]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a3d      	ldr	r2, [pc, #244]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6a:	f7fd fb01 	bl	8002070 <HAL_GetTick>
 8004a6e:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a70:	e009      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a72:	f7fd fafd 	bl	8002070 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b64      	cmp	r3, #100	; 0x64
 8004a7e:	d902      	bls.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	f000 bd9f 	b.w	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a86:	4b34      	ldr	r3, [pc, #208]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0ef      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a92:	4b30      	ldr	r3, [pc, #192]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a9a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d036      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d02f      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ab0:	4b28      	ldr	r3, [pc, #160]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aba:	4b26      	ldr	r3, [pc, #152]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abe:	4a25      	ldr	r2, [pc, #148]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ac6:	4b23      	ldr	r3, [pc, #140]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aca:	4a22      	ldr	r2, [pc, #136]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004ad2:	4a20      	ldr	r2, [pc, #128]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ad8:	4b1e      	ldr	r3, [pc, #120]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d115      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae4:	f7fd fac4 	bl	8002070 <HAL_GetTick>
 8004ae8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aea:	e00b      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aec:	f7fd fac0 	bl	8002070 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d902      	bls.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	f000 bd60 	b.w	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b04:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0ed      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b1c:	d120      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b2a:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004b2c:	400b      	ands	r3, r1
 8004b2e:	4909      	ldr	r1, [pc, #36]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	608b      	str	r3, [r1, #8]
 8004b34:	e01a      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x560>
 8004b36:	bf00      	nop
 8004b38:	001a0300 	.word	0x001a0300
 8004b3c:	001b0300 	.word	0x001b0300
 8004b40:	001c0300 	.word	0x001c0300
 8004b44:	001d0300 	.word	0x001d0300
 8004b48:	001e0300 	.word	0x001e0300
 8004b4c:	001f0300 	.word	0x001f0300
 8004b50:	08012ca0 	.word	0x08012ca0
 8004b54:	40023800 	.word	0x40023800
 8004b58:	40007000 	.word	0x40007000
 8004b5c:	0ffffcff 	.word	0x0ffffcff
 8004b60:	4b9a      	ldr	r3, [pc, #616]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4a99      	ldr	r2, [pc, #612]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004b66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b6a:	6093      	str	r3, [r2, #8]
 8004b6c:	4b97      	ldr	r3, [pc, #604]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004b6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b78:	4994      	ldr	r1, [pc, #592]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0310 	and.w	r3, r3, #16
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d01d      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d008      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b9a:	d003      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004b9c:	21f1      	movs	r1, #241	; 0xf1
 8004b9e:	488c      	ldr	r0, [pc, #560]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004ba0:	f7fc fed1 	bl	8001946 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ba4:	4b89      	ldr	r3, [pc, #548]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004baa:	4a88      	ldr	r2, [pc, #544]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bb0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004bb4:	4b85      	ldr	r3, [pc, #532]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004bb6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	4983      	ldr	r1, [pc, #524]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d01c      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00d      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be2:	d008      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004be8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004bee:	21fb      	movs	r1, #251	; 0xfb
 8004bf0:	4877      	ldr	r0, [pc, #476]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004bf2:	f7fc fea8 	bl	8001946 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bf6:	4b75      	ldr	r3, [pc, #468]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c04:	4971      	ldr	r1, [pc, #452]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01d      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00e      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c28:	d009      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c32:	d004      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004c34:	f240 1105 	movw	r1, #261	; 0x105
 8004c38:	4865      	ldr	r0, [pc, #404]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004c3a:	f7fc fe84 	bl	8001946 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c3e:	4b63      	ldr	r3, [pc, #396]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c4c:	495f      	ldr	r1, [pc, #380]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01d      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00e      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c70:	d009      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c7a:	d004      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004c7c:	f240 110f 	movw	r1, #271	; 0x10f
 8004c80:	4853      	ldr	r0, [pc, #332]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004c82:	f7fc fe60 	bl	8001946 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c86:	4b51      	ldr	r3, [pc, #324]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c94:	494d      	ldr	r1, [pc, #308]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01d      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00e      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cb8:	d009      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cc2:	d004      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004cc4:	f240 1119 	movw	r1, #281	; 0x119
 8004cc8:	4841      	ldr	r0, [pc, #260]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004cca:	f7fc fe3c 	bl	8001946 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cce:	4b3f      	ldr	r3, [pc, #252]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cdc:	493b      	ldr	r1, [pc, #236]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01f      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d010      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d00c      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d008      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d004      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004d10:	f240 1123 	movw	r1, #291	; 0x123
 8004d14:	482e      	ldr	r0, [pc, #184]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004d16:	f7fc fe16 	bl	8001946 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d1a:	4b2c      	ldr	r3, [pc, #176]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d20:	f023 0203 	bic.w	r2, r3, #3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d28:	4928      	ldr	r1, [pc, #160]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01f      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d010      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d00c      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d50:	2b0c      	cmp	r3, #12
 8004d52:	d008      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d004      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004d5c:	f240 112d 	movw	r1, #301	; 0x12d
 8004d60:	481b      	ldr	r0, [pc, #108]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004d62:	f7fc fdf0 	bl	8001946 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d66:	4b19      	ldr	r3, [pc, #100]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6c:	f023 020c 	bic.w	r2, r3, #12
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d74:	4915      	ldr	r1, [pc, #84]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d025      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d010      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d00c      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9c:	2b30      	cmp	r3, #48	; 0x30
 8004d9e:	d008      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	d004      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004da8:	f240 1137 	movw	r1, #311	; 0x137
 8004dac:	4808      	ldr	r0, [pc, #32]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004dae:	f7fc fdca 	bl	8001946 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004db2:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc0:	4902      	ldr	r1, [pc, #8]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004dc8:	e004      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8004dca:	bf00      	nop
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	08012ca0 	.word	0x08012ca0
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01f      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d010      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d00c      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df4:	2bc0      	cmp	r3, #192	; 0xc0
 8004df6:	d008      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfc:	2b80      	cmp	r3, #128	; 0x80
 8004dfe:	d004      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004e00:	f240 1141 	movw	r1, #321	; 0x141
 8004e04:	48a0      	ldr	r0, [pc, #640]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004e06:	f7fc fd9e 	bl	8001946 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e0a:	4ba0      	ldr	r3, [pc, #640]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e18:	499c      	ldr	r1, [pc, #624]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d022      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d013      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3c:	d00e      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e46:	d009      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e50:	d004      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004e52:	f240 114b 	movw	r1, #331	; 0x14b
 8004e56:	488c      	ldr	r0, [pc, #560]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004e58:	f7fc fd75 	bl	8001946 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e5c:	4b8b      	ldr	r3, [pc, #556]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6a:	4988      	ldr	r1, [pc, #544]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d022      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d013      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8e:	d00e      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e98:	d009      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea2:	d004      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004ea4:	f240 1155 	movw	r1, #341	; 0x155
 8004ea8:	4877      	ldr	r0, [pc, #476]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004eaa:	f7fc fd4c 	bl	8001946 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004eae:	4b77      	ldr	r3, [pc, #476]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebc:	4973      	ldr	r1, [pc, #460]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d022      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d013      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee0:	d00e      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eea:	d009      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ef4:	d004      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004ef6:	f240 115f 	movw	r1, #351	; 0x15f
 8004efa:	4863      	ldr	r0, [pc, #396]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004efc:	f7fc fd23 	bl	8001946 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f00:	4b62      	ldr	r3, [pc, #392]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0e:	495f      	ldr	r1, [pc, #380]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d022      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d013      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f32:	d00e      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f38:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f3c:	d009      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f46:	d004      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004f48:	f240 1169 	movw	r1, #361	; 0x169
 8004f4c:	484e      	ldr	r0, [pc, #312]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004f4e:	f7fc fcfa 	bl	8001946 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f52:	4b4e      	ldr	r3, [pc, #312]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f60:	494a      	ldr	r1, [pc, #296]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d018      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f7c:	d008      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d004      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004f86:	f240 1173 	movw	r1, #371	; 0x173
 8004f8a:	483f      	ldr	r0, [pc, #252]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004f8c:	f7fc fcdb 	bl	8001946 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f90:	4b3e      	ldr	r3, [pc, #248]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f9e:	493b      	ldr	r1, [pc, #236]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d01f      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fba:	d008      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d004      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004fc4:	f240 117d 	movw	r1, #381	; 0x17d
 8004fc8:	482f      	ldr	r0, [pc, #188]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004fca:	f7fc fcbc 	bl	8001946 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004fce:	4b2f      	ldr	r3, [pc, #188]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fdc:	492b      	ldr	r1, [pc, #172]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 8004ffe:	2301      	movs	r3, #1
 8005000:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d022      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005012:	2b00      	cmp	r3, #0
 8005014:	d013      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800501e:	d00e      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005024:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005028:	d009      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005032:	d004      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005034:	f240 1195 	movw	r1, #405	; 0x195
 8005038:	4813      	ldr	r0, [pc, #76]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800503a:	f7fc fc84 	bl	8001946 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800503e:	4b13      	ldr	r3, [pc, #76]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005044:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800504c:	490f      	ldr	r1, [pc, #60]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d020      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800506a:	d009      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005076:	f240 119f 	movw	r1, #415	; 0x19f
 800507a:	4803      	ldr	r0, [pc, #12]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800507c:	f7fc fc63 	bl	8001946 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005080:	4b02      	ldr	r3, [pc, #8]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005086:	e003      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8005088:	08012ca0 	.word	0x08012ca0
 800508c:	40023800 	.word	0x40023800
 8005090:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800509a:	4910      	ldr	r1, [pc, #64]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d006      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 8155 	beq.w	8005360 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050b6:	4b09      	ldr	r3, [pc, #36]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a08      	ldr	r2, [pc, #32]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80050bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c2:	f7fc ffd5 	bl	8002070 <HAL_GetTick>
 80050c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050c8:	e00a      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050ca:	f7fc ffd1 	bl	8002070 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b64      	cmp	r3, #100	; 0x64
 80050d6:	d903      	bls.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e273      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80050dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050e0:	4b9a      	ldr	r3, [pc, #616]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1ee      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b31      	cmp	r3, #49	; 0x31
 80050f2:	d904      	bls.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80050fc:	d904      	bls.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 80050fe:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8005102:	4893      	ldr	r0, [pc, #588]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005104:	f7fc fc1f 	bl	8001946 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d02e      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005118:	2b00      	cmp	r3, #0
 800511a:	d12a      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d903      	bls.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b07      	cmp	r3, #7
 800512a:	d904      	bls.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800512c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005130:	4887      	ldr	r0, [pc, #540]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005132:	f7fc fc08 	bl	8001946 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005136:	4b85      	ldr	r3, [pc, #532]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800513c:	0c1b      	lsrs	r3, r3, #16
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005144:	4b81      	ldr	r3, [pc, #516]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800514a:	0e1b      	lsrs	r3, r3, #24
 800514c:	f003 030f 	and.w	r3, r3, #15
 8005150:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	019a      	lsls	r2, r3, #6
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	041b      	lsls	r3, r3, #16
 800515c:	431a      	orrs	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	061b      	lsls	r3, r3, #24
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	071b      	lsls	r3, r3, #28
 800516a:	4978      	ldr	r1, [pc, #480]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d004      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005186:	d00a      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005190:	2b00      	cmp	r3, #0
 8005192:	d048      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800519c:	d143      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d903      	bls.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xba2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	2b0f      	cmp	r3, #15
 80051ac:	d904      	bls.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80051ae:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80051b2:	4867      	ldr	r0, [pc, #412]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80051b4:	f7fc fbc7 	bl	8001946 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d904      	bls.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 80051c8:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80051cc:	4860      	ldr	r0, [pc, #384]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80051ce:	f7fc fbba 	bl	8001946 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051d2:	4b5e      	ldr	r3, [pc, #376]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80051d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051d8:	0c1b      	lsrs	r3, r3, #16
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051e0:	4b5a      	ldr	r3, [pc, #360]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80051e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e6:	0f1b      	lsrs	r3, r3, #28
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	019a      	lsls	r2, r3, #6
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	041b      	lsls	r3, r3, #16
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	061b      	lsls	r3, r3, #24
 8005200:	431a      	orrs	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	071b      	lsls	r3, r3, #28
 8005206:	4951      	ldr	r1, [pc, #324]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800520e:	4b4f      	ldr	r3, [pc, #316]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005214:	f023 021f 	bic.w	r2, r3, #31
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	3b01      	subs	r3, #1
 800521e:	494b      	ldr	r1, [pc, #300]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d032      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d010      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d00c      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d008      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	2b03      	cmp	r3, #3
 8005250:	d004      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8005252:	f240 2105 	movw	r1, #517	; 0x205
 8005256:	483e      	ldr	r0, [pc, #248]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005258:	f7fc fb75 	bl	8001946 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800525c:	4b3b      	ldr	r3, [pc, #236]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800525e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005262:	0e1b      	lsrs	r3, r3, #24
 8005264:	f003 030f 	and.w	r3, r3, #15
 8005268:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800526a:	4b38      	ldr	r3, [pc, #224]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800526c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005270:	0f1b      	lsrs	r3, r3, #28
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	019a      	lsls	r2, r3, #6
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	041b      	lsls	r3, r3, #16
 8005284:	431a      	orrs	r2, r3
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	061b      	lsls	r3, r3, #24
 800528a:	431a      	orrs	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	071b      	lsls	r3, r3, #28
 8005290:	492e      	ldr	r1, [pc, #184]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d040      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d010      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d00c      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d008      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b03      	cmp	r3, #3
 80052c2:	d004      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80052c4:	f44f 7105 	mov.w	r1, #532	; 0x214
 80052c8:	4821      	ldr	r0, [pc, #132]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80052ca:	f7fc fb3c 	bl	8001946 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d903      	bls.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b07      	cmp	r3, #7
 80052dc:	d904      	bls.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80052de:	f240 2115 	movw	r1, #533	; 0x215
 80052e2:	481b      	ldr	r0, [pc, #108]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80052e4:	f7fc fb2f 	bl	8001946 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d903      	bls.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	2b0f      	cmp	r3, #15
 80052f6:	d904      	bls.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 80052f8:	f240 2116 	movw	r1, #534	; 0x216
 80052fc:	4814      	ldr	r0, [pc, #80]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80052fe:	f7fc fb22 	bl	8001946 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	019a      	lsls	r2, r3, #6
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	041b      	lsls	r3, r3, #16
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	061b      	lsls	r3, r3, #24
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	071b      	lsls	r3, r3, #28
 800531e:	490b      	ldr	r1, [pc, #44]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005326:	4b09      	ldr	r3, [pc, #36]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a08      	ldr	r2, [pc, #32]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800532c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005332:	f7fc fe9d 	bl	8002070 <HAL_GetTick>
 8005336:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005338:	e00c      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800533a:	f7fc fe99 	bl	8002070 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b64      	cmp	r3, #100	; 0x64
 8005346:	d905      	bls.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e13b      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 800534c:	40023800 	.word	0x40023800
 8005350:	08012ca0 	.word	0x08012ca0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005354:	4b9d      	ldr	r3, [pc, #628]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0ec      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	2b01      	cmp	r3, #1
 8005364:	f040 812d 	bne.w	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005368:	4b98      	ldr	r3, [pc, #608]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a97      	ldr	r2, [pc, #604]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800536e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005374:	f7fc fe7c 	bl	8002070 <HAL_GetTick>
 8005378:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800537a:	e008      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800537c:	f7fc fe78 	bl	8002070 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b64      	cmp	r3, #100	; 0x64
 8005388:	d901      	bls.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e11a      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800538e:	4b8f      	ldr	r3, [pc, #572]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800539a:	d0ef      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	2b31      	cmp	r3, #49	; 0x31
 80053a2:	d904      	bls.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xda2>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80053ac:	d904      	bls.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80053ae:	f44f 7111 	mov.w	r1, #580	; 0x244
 80053b2:	4887      	ldr	r0, [pc, #540]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80053b4:	f7fc fac7 	bl	8001946 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d009      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d048      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d144      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d903      	bls.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2b0f      	cmp	r3, #15
 80053ee:	d904      	bls.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xdee>
 80053f0:	f240 214b 	movw	r1, #587	; 0x24b
 80053f4:	4876      	ldr	r0, [pc, #472]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80053f6:	f7fc faa6 	bl	8001946 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005406:	2b20      	cmp	r3, #32
 8005408:	d904      	bls.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 800540a:	f240 214d 	movw	r1, #589	; 0x24d
 800540e:	4870      	ldr	r0, [pc, #448]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005410:	f7fc fa99 	bl	8001946 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005414:	4b6d      	ldr	r3, [pc, #436]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541a:	0c1b      	lsrs	r3, r3, #16
 800541c:	f003 0303 	and.w	r3, r3, #3
 8005420:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005422:	4b6a      	ldr	r3, [pc, #424]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005428:	0f1b      	lsrs	r3, r3, #28
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	019a      	lsls	r2, r3, #6
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	041b      	lsls	r3, r3, #16
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	061b      	lsls	r3, r3, #24
 8005442:	431a      	orrs	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	071b      	lsls	r3, r3, #28
 8005448:	4960      	ldr	r1, [pc, #384]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005450:	4b5e      	ldr	r3, [pc, #376]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005456:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	3b01      	subs	r3, #1
 8005460:	021b      	lsls	r3, r3, #8
 8005462:	495a      	ldr	r1, [pc, #360]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d037      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xeda>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800547a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800547e:	d132      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d010      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d00c      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d008      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	2b03      	cmp	r3, #3
 800549e:	d004      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80054a0:	f44f 7118 	mov.w	r1, #608	; 0x260
 80054a4:	484a      	ldr	r0, [pc, #296]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80054a6:	f7fc fa4e 	bl	8001946 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054aa:	4b48      	ldr	r3, [pc, #288]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b0:	0e1b      	lsrs	r3, r3, #24
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054b8:	4b44      	ldr	r3, [pc, #272]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054be:	0f1b      	lsrs	r3, r3, #28
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	019a      	lsls	r2, r3, #6
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	041b      	lsls	r3, r3, #16
 80054d2:	431a      	orrs	r2, r3
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	061b      	lsls	r3, r3, #24
 80054d8:	431a      	orrs	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	071b      	lsls	r3, r3, #28
 80054de:	493b      	ldr	r1, [pc, #236]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d04d      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d903      	bls.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	2b07      	cmp	r3, #7
 8005500:	d904      	bls.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8005502:	f240 216f 	movw	r1, #623	; 0x26f
 8005506:	4832      	ldr	r0, [pc, #200]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005508:	f7fc fa1d 	bl	8001946 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d013      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551c:	d00e      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005522:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005526:	d009      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005530:	d004      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8005532:	f44f 711c 	mov.w	r1, #624	; 0x270
 8005536:	4826      	ldr	r0, [pc, #152]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005538:	f7fc fa05 	bl	8001946 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800553c:	4b23      	ldr	r3, [pc, #140]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800553e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005542:	0e1b      	lsrs	r3, r3, #24
 8005544:	f003 030f 	and.w	r3, r3, #15
 8005548:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800554a:	4b20      	ldr	r3, [pc, #128]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005550:	0c1b      	lsrs	r3, r3, #16
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	019a      	lsls	r2, r3, #6
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	041b      	lsls	r3, r3, #16
 8005562:	431a      	orrs	r2, r3
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	061b      	lsls	r3, r3, #24
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	071b      	lsls	r3, r3, #28
 8005570:	4916      	ldr	r1, [pc, #88]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005578:	4b14      	ldr	r3, [pc, #80]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800557a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800557e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	4911      	ldr	r1, [pc, #68]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800558e:	4b0f      	ldr	r3, [pc, #60]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a0e      	ldr	r2, [pc, #56]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800559a:	f7fc fd69 	bl	8002070 <HAL_GetTick>
 800559e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055a0:	e008      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055a2:	f7fc fd65 	bl	8002070 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b64      	cmp	r3, #100	; 0x64
 80055ae:	d901      	bls.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e007      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055b4:	4b05      	ldr	r3, [pc, #20]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055c0:	d1ef      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3720      	adds	r7, #32
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40023800 	.word	0x40023800
 80055d0:	08012ca0 	.word	0x08012ca0

080055d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e0f5      	b.n	80057d2 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a7c      	ldr	r2, [pc, #496]	; (80057dc <HAL_TIM_Base_Init+0x208>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d045      	beq.n	800567c <HAL_TIM_Base_Init+0xa8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f8:	d040      	beq.n	800567c <HAL_TIM_Base_Init+0xa8>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a78      	ldr	r2, [pc, #480]	; (80057e0 <HAL_TIM_Base_Init+0x20c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d03b      	beq.n	800567c <HAL_TIM_Base_Init+0xa8>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a76      	ldr	r2, [pc, #472]	; (80057e4 <HAL_TIM_Base_Init+0x210>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d036      	beq.n	800567c <HAL_TIM_Base_Init+0xa8>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a75      	ldr	r2, [pc, #468]	; (80057e8 <HAL_TIM_Base_Init+0x214>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d031      	beq.n	800567c <HAL_TIM_Base_Init+0xa8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a73      	ldr	r2, [pc, #460]	; (80057ec <HAL_TIM_Base_Init+0x218>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d02c      	beq.n	800567c <HAL_TIM_Base_Init+0xa8>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a72      	ldr	r2, [pc, #456]	; (80057f0 <HAL_TIM_Base_Init+0x21c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d027      	beq.n	800567c <HAL_TIM_Base_Init+0xa8>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a70      	ldr	r2, [pc, #448]	; (80057f4 <HAL_TIM_Base_Init+0x220>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d022      	beq.n	800567c <HAL_TIM_Base_Init+0xa8>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a6f      	ldr	r2, [pc, #444]	; (80057f8 <HAL_TIM_Base_Init+0x224>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d01d      	beq.n	800567c <HAL_TIM_Base_Init+0xa8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a6d      	ldr	r2, [pc, #436]	; (80057fc <HAL_TIM_Base_Init+0x228>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d018      	beq.n	800567c <HAL_TIM_Base_Init+0xa8>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a6c      	ldr	r2, [pc, #432]	; (8005800 <HAL_TIM_Base_Init+0x22c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d013      	beq.n	800567c <HAL_TIM_Base_Init+0xa8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a6a      	ldr	r2, [pc, #424]	; (8005804 <HAL_TIM_Base_Init+0x230>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00e      	beq.n	800567c <HAL_TIM_Base_Init+0xa8>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a69      	ldr	r2, [pc, #420]	; (8005808 <HAL_TIM_Base_Init+0x234>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d009      	beq.n	800567c <HAL_TIM_Base_Init+0xa8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a67      	ldr	r2, [pc, #412]	; (800580c <HAL_TIM_Base_Init+0x238>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d004      	beq.n	800567c <HAL_TIM_Base_Init+0xa8>
 8005672:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005676:	4866      	ldr	r0, [pc, #408]	; (8005810 <HAL_TIM_Base_Init+0x23c>)
 8005678:	f7fc f965 	bl	8001946 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d014      	beq.n	80056ae <HAL_TIM_Base_Init+0xda>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	2b10      	cmp	r3, #16
 800568a:	d010      	beq.n	80056ae <HAL_TIM_Base_Init+0xda>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	2b20      	cmp	r3, #32
 8005692:	d00c      	beq.n	80056ae <HAL_TIM_Base_Init+0xda>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	2b40      	cmp	r3, #64	; 0x40
 800569a:	d008      	beq.n	80056ae <HAL_TIM_Base_Init+0xda>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	2b60      	cmp	r3, #96	; 0x60
 80056a2:	d004      	beq.n	80056ae <HAL_TIM_Base_Init+0xda>
 80056a4:	f240 1117 	movw	r1, #279	; 0x117
 80056a8:	4859      	ldr	r0, [pc, #356]	; (8005810 <HAL_TIM_Base_Init+0x23c>)
 80056aa:	f7fc f94c 	bl	8001946 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00e      	beq.n	80056d4 <HAL_TIM_Base_Init+0x100>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056be:	d009      	beq.n	80056d4 <HAL_TIM_Base_Init+0x100>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c8:	d004      	beq.n	80056d4 <HAL_TIM_Base_Init+0x100>
 80056ca:	f44f 718c 	mov.w	r1, #280	; 0x118
 80056ce:	4850      	ldr	r0, [pc, #320]	; (8005810 <HAL_TIM_Base_Init+0x23c>)
 80056d0:	f7fc f939 	bl	8001946 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056dc:	d004      	beq.n	80056e8 <HAL_TIM_Base_Init+0x114>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a41      	ldr	r2, [pc, #260]	; (80057e8 <HAL_TIM_Base_Init+0x214>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d107      	bne.n	80056f8 <HAL_TIM_Base_Init+0x124>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bf14      	ite	ne
 80056f0:	2301      	movne	r3, #1
 80056f2:	2300      	moveq	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	e00e      	b.n	8005716 <HAL_TIM_Base_Init+0x142>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d006      	beq.n	800570e <HAL_TIM_Base_Init+0x13a>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005708:	d201      	bcs.n	800570e <HAL_TIM_Base_Init+0x13a>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <HAL_TIM_Base_Init+0x13c>
 800570e:	2300      	movs	r3, #0
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d104      	bne.n	8005724 <HAL_TIM_Base_Init+0x150>
 800571a:	f240 1119 	movw	r1, #281	; 0x119
 800571e:	483c      	ldr	r0, [pc, #240]	; (8005810 <HAL_TIM_Base_Init+0x23c>)
 8005720:	f7fc f911 	bl	8001946 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <HAL_TIM_Base_Init+0x16a>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	2b80      	cmp	r3, #128	; 0x80
 8005732:	d004      	beq.n	800573e <HAL_TIM_Base_Init+0x16a>
 8005734:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8005738:	4835      	ldr	r0, [pc, #212]	; (8005810 <HAL_TIM_Base_Init+0x23c>)
 800573a:	f7fc f904 	bl	8001946 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d106      	bne.n	8005758 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fc faf8 	bl	8001d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	4619      	mov	r1, r3
 800576a:	4610      	mov	r0, r2
 800576c:	f001 fa52 	bl	8006c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	40010000 	.word	0x40010000
 80057e0:	40000400 	.word	0x40000400
 80057e4:	40000800 	.word	0x40000800
 80057e8:	40000c00 	.word	0x40000c00
 80057ec:	40001000 	.word	0x40001000
 80057f0:	40001400 	.word	0x40001400
 80057f4:	40010400 	.word	0x40010400
 80057f8:	40014000 	.word	0x40014000
 80057fc:	40014400 	.word	0x40014400
 8005800:	40014800 	.word	0x40014800
 8005804:	40001800 	.word	0x40001800
 8005808:	40001c00 	.word	0x40001c00
 800580c:	40002000 	.word	0x40002000
 8005810:	08012cdc 	.word	0x08012cdc

08005814 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e0f5      	b.n	8005a12 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a7c      	ldr	r2, [pc, #496]	; (8005a1c <HAL_TIM_PWM_Init+0x208>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d045      	beq.n	80058bc <HAL_TIM_PWM_Init+0xa8>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005838:	d040      	beq.n	80058bc <HAL_TIM_PWM_Init+0xa8>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a78      	ldr	r2, [pc, #480]	; (8005a20 <HAL_TIM_PWM_Init+0x20c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d03b      	beq.n	80058bc <HAL_TIM_PWM_Init+0xa8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a76      	ldr	r2, [pc, #472]	; (8005a24 <HAL_TIM_PWM_Init+0x210>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d036      	beq.n	80058bc <HAL_TIM_PWM_Init+0xa8>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a75      	ldr	r2, [pc, #468]	; (8005a28 <HAL_TIM_PWM_Init+0x214>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d031      	beq.n	80058bc <HAL_TIM_PWM_Init+0xa8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a73      	ldr	r2, [pc, #460]	; (8005a2c <HAL_TIM_PWM_Init+0x218>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d02c      	beq.n	80058bc <HAL_TIM_PWM_Init+0xa8>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a72      	ldr	r2, [pc, #456]	; (8005a30 <HAL_TIM_PWM_Init+0x21c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d027      	beq.n	80058bc <HAL_TIM_PWM_Init+0xa8>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a70      	ldr	r2, [pc, #448]	; (8005a34 <HAL_TIM_PWM_Init+0x220>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d022      	beq.n	80058bc <HAL_TIM_PWM_Init+0xa8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a6f      	ldr	r2, [pc, #444]	; (8005a38 <HAL_TIM_PWM_Init+0x224>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d01d      	beq.n	80058bc <HAL_TIM_PWM_Init+0xa8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a6d      	ldr	r2, [pc, #436]	; (8005a3c <HAL_TIM_PWM_Init+0x228>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d018      	beq.n	80058bc <HAL_TIM_PWM_Init+0xa8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a6c      	ldr	r2, [pc, #432]	; (8005a40 <HAL_TIM_PWM_Init+0x22c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d013      	beq.n	80058bc <HAL_TIM_PWM_Init+0xa8>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a6a      	ldr	r2, [pc, #424]	; (8005a44 <HAL_TIM_PWM_Init+0x230>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00e      	beq.n	80058bc <HAL_TIM_PWM_Init+0xa8>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a69      	ldr	r2, [pc, #420]	; (8005a48 <HAL_TIM_PWM_Init+0x234>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d009      	beq.n	80058bc <HAL_TIM_PWM_Init+0xa8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a67      	ldr	r2, [pc, #412]	; (8005a4c <HAL_TIM_PWM_Init+0x238>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d004      	beq.n	80058bc <HAL_TIM_PWM_Init+0xa8>
 80058b2:	f240 5133 	movw	r1, #1331	; 0x533
 80058b6:	4866      	ldr	r0, [pc, #408]	; (8005a50 <HAL_TIM_PWM_Init+0x23c>)
 80058b8:	f7fc f845 	bl	8001946 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d014      	beq.n	80058ee <HAL_TIM_PWM_Init+0xda>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d010      	beq.n	80058ee <HAL_TIM_PWM_Init+0xda>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d00c      	beq.n	80058ee <HAL_TIM_PWM_Init+0xda>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b40      	cmp	r3, #64	; 0x40
 80058da:	d008      	beq.n	80058ee <HAL_TIM_PWM_Init+0xda>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b60      	cmp	r3, #96	; 0x60
 80058e2:	d004      	beq.n	80058ee <HAL_TIM_PWM_Init+0xda>
 80058e4:	f240 5134 	movw	r1, #1332	; 0x534
 80058e8:	4859      	ldr	r0, [pc, #356]	; (8005a50 <HAL_TIM_PWM_Init+0x23c>)
 80058ea:	f7fc f82c 	bl	8001946 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00e      	beq.n	8005914 <HAL_TIM_PWM_Init+0x100>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fe:	d009      	beq.n	8005914 <HAL_TIM_PWM_Init+0x100>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005908:	d004      	beq.n	8005914 <HAL_TIM_PWM_Init+0x100>
 800590a:	f240 5135 	movw	r1, #1333	; 0x535
 800590e:	4850      	ldr	r0, [pc, #320]	; (8005a50 <HAL_TIM_PWM_Init+0x23c>)
 8005910:	f7fc f819 	bl	8001946 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591c:	d004      	beq.n	8005928 <HAL_TIM_PWM_Init+0x114>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a41      	ldr	r2, [pc, #260]	; (8005a28 <HAL_TIM_PWM_Init+0x214>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d107      	bne.n	8005938 <HAL_TIM_PWM_Init+0x124>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	bf14      	ite	ne
 8005930:	2301      	movne	r3, #1
 8005932:	2300      	moveq	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	e00e      	b.n	8005956 <HAL_TIM_PWM_Init+0x142>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d006      	beq.n	800594e <HAL_TIM_PWM_Init+0x13a>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005948:	d201      	bcs.n	800594e <HAL_TIM_PWM_Init+0x13a>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <HAL_TIM_PWM_Init+0x13c>
 800594e:	2300      	movs	r3, #0
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d104      	bne.n	8005964 <HAL_TIM_PWM_Init+0x150>
 800595a:	f240 5136 	movw	r1, #1334	; 0x536
 800595e:	483c      	ldr	r0, [pc, #240]	; (8005a50 <HAL_TIM_PWM_Init+0x23c>)
 8005960:	f7fb fff1 	bl	8001946 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <HAL_TIM_PWM_Init+0x16a>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	2b80      	cmp	r3, #128	; 0x80
 8005972:	d004      	beq.n	800597e <HAL_TIM_PWM_Init+0x16a>
 8005974:	f240 5137 	movw	r1, #1335	; 0x537
 8005978:	4835      	ldr	r0, [pc, #212]	; (8005a50 <HAL_TIM_PWM_Init+0x23c>)
 800597a:	f7fb ffe4 	bl	8001946 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f85e 	bl	8005a54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f001 f932 	bl	8006c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	40010000 	.word	0x40010000
 8005a20:	40000400 	.word	0x40000400
 8005a24:	40000800 	.word	0x40000800
 8005a28:	40000c00 	.word	0x40000c00
 8005a2c:	40001000 	.word	0x40001000
 8005a30:	40001400 	.word	0x40001400
 8005a34:	40010400 	.word	0x40010400
 8005a38:	40014000 	.word	0x40014000
 8005a3c:	40014400 	.word	0x40014400
 8005a40:	40014800 	.word	0x40014800
 8005a44:	40001800 	.word	0x40001800
 8005a48:	40001c00 	.word	0x40001c00
 8005a4c:	40002000 	.word	0x40002000
 8005a50:	08012cdc 	.word	0x08012cdc

08005a54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a89      	ldr	r2, [pc, #548]	; (8005c9c <HAL_TIM_PWM_Start+0x234>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d117      	bne.n	8005aac <HAL_TIM_PWM_Start+0x44>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 80ae 	beq.w	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	f000 80aa 	beq.w	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	f000 80a6 	beq.w	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b0c      	cmp	r3, #12
 8005a98:	f000 80a2 	beq.w	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b10      	cmp	r3, #16
 8005aa0:	f000 809e 	beq.w	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b14      	cmp	r3, #20
 8005aa8:	f000 809a 	beq.w	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab4:	d10f      	bne.n	8005ad6 <HAL_TIM_PWM_Start+0x6e>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8091 	beq.w	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	f000 808d 	beq.w	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	f000 8089 	beq.w	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b0c      	cmp	r3, #12
 8005ad2:	f000 8085 	beq.w	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a71      	ldr	r2, [pc, #452]	; (8005ca0 <HAL_TIM_PWM_Start+0x238>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d10b      	bne.n	8005af8 <HAL_TIM_PWM_Start+0x90>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d07c      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d079      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2b08      	cmp	r3, #8
 8005af0:	d076      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b0c      	cmp	r3, #12
 8005af6:	d073      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a69      	ldr	r2, [pc, #420]	; (8005ca4 <HAL_TIM_PWM_Start+0x23c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d10b      	bne.n	8005b1a <HAL_TIM_PWM_Start+0xb2>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d06b      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d068      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	d065      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b0c      	cmp	r3, #12
 8005b18:	d062      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a62      	ldr	r2, [pc, #392]	; (8005ca8 <HAL_TIM_PWM_Start+0x240>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d10b      	bne.n	8005b3c <HAL_TIM_PWM_Start+0xd4>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d05a      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d057      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b08      	cmp	r3, #8
 8005b34:	d054      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b0c      	cmp	r3, #12
 8005b3a:	d051      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a5a      	ldr	r2, [pc, #360]	; (8005cac <HAL_TIM_PWM_Start+0x244>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d111      	bne.n	8005b6a <HAL_TIM_PWM_Start+0x102>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d049      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d046      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d043      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2b0c      	cmp	r3, #12
 8005b5c:	d040      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	d03d      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b14      	cmp	r3, #20
 8005b68:	d03a      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a50      	ldr	r2, [pc, #320]	; (8005cb0 <HAL_TIM_PWM_Start+0x248>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d105      	bne.n	8005b80 <HAL_TIM_PWM_Start+0x118>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d032      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d02f      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a4b      	ldr	r2, [pc, #300]	; (8005cb4 <HAL_TIM_PWM_Start+0x24c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d102      	bne.n	8005b90 <HAL_TIM_PWM_Start+0x128>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d027      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a48      	ldr	r2, [pc, #288]	; (8005cb8 <HAL_TIM_PWM_Start+0x250>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d102      	bne.n	8005ba0 <HAL_TIM_PWM_Start+0x138>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01f      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a45      	ldr	r2, [pc, #276]	; (8005cbc <HAL_TIM_PWM_Start+0x254>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d105      	bne.n	8005bb6 <HAL_TIM_PWM_Start+0x14e>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d017      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d014      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a41      	ldr	r2, [pc, #260]	; (8005cc0 <HAL_TIM_PWM_Start+0x258>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d102      	bne.n	8005bc6 <HAL_TIM_PWM_Start+0x15e>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00c      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a3e      	ldr	r2, [pc, #248]	; (8005cc4 <HAL_TIM_PWM_Start+0x25c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d102      	bne.n	8005bd6 <HAL_TIM_PWM_Start+0x16e>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d004      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x178>
 8005bd6:	f240 51bc 	movw	r1, #1468	; 0x5bc
 8005bda:	483b      	ldr	r0, [pc, #236]	; (8005cc8 <HAL_TIM_PWM_Start+0x260>)
 8005bdc:	f7fb feb3 	bl	8001946 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <HAL_TIM_PWM_Start+0x192>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	bf14      	ite	ne
 8005bf2:	2301      	movne	r3, #1
 8005bf4:	2300      	moveq	r3, #0
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	e03c      	b.n	8005c74 <HAL_TIM_PWM_Start+0x20c>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d109      	bne.n	8005c14 <HAL_TIM_PWM_Start+0x1ac>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	bf14      	ite	ne
 8005c0c:	2301      	movne	r3, #1
 8005c0e:	2300      	moveq	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	e02f      	b.n	8005c74 <HAL_TIM_PWM_Start+0x20c>
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2b08      	cmp	r3, #8
 8005c18:	d109      	bne.n	8005c2e <HAL_TIM_PWM_Start+0x1c6>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	bf14      	ite	ne
 8005c26:	2301      	movne	r3, #1
 8005c28:	2300      	moveq	r3, #0
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	e022      	b.n	8005c74 <HAL_TIM_PWM_Start+0x20c>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b0c      	cmp	r3, #12
 8005c32:	d109      	bne.n	8005c48 <HAL_TIM_PWM_Start+0x1e0>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	bf14      	ite	ne
 8005c40:	2301      	movne	r3, #1
 8005c42:	2300      	moveq	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	e015      	b.n	8005c74 <HAL_TIM_PWM_Start+0x20c>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2b10      	cmp	r3, #16
 8005c4c:	d109      	bne.n	8005c62 <HAL_TIM_PWM_Start+0x1fa>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	bf14      	ite	ne
 8005c5a:	2301      	movne	r3, #1
 8005c5c:	2300      	moveq	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	e008      	b.n	8005c74 <HAL_TIM_PWM_Start+0x20c>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	bf14      	ite	ne
 8005c6e:	2301      	movne	r3, #1
 8005c70:	2300      	moveq	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0aa      	b.n	8005dd2 <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d104      	bne.n	8005c8c <HAL_TIM_PWM_Start+0x224>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c8a:	e03b      	b.n	8005d04 <HAL_TIM_PWM_Start+0x29c>
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d11c      	bne.n	8005ccc <HAL_TIM_PWM_Start+0x264>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2202      	movs	r2, #2
 8005c96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c9a:	e033      	b.n	8005d04 <HAL_TIM_PWM_Start+0x29c>
 8005c9c:	40010000 	.word	0x40010000
 8005ca0:	40000400 	.word	0x40000400
 8005ca4:	40000800 	.word	0x40000800
 8005ca8:	40000c00 	.word	0x40000c00
 8005cac:	40010400 	.word	0x40010400
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	40014800 	.word	0x40014800
 8005cbc:	40001800 	.word	0x40001800
 8005cc0:	40001c00 	.word	0x40001c00
 8005cc4:	40002000 	.word	0x40002000
 8005cc8:	08012cdc 	.word	0x08012cdc
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d104      	bne.n	8005cdc <HAL_TIM_PWM_Start+0x274>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cda:	e013      	b.n	8005d04 <HAL_TIM_PWM_Start+0x29c>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b0c      	cmp	r3, #12
 8005ce0:	d104      	bne.n	8005cec <HAL_TIM_PWM_Start+0x284>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cea:	e00b      	b.n	8005d04 <HAL_TIM_PWM_Start+0x29c>
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2b10      	cmp	r3, #16
 8005cf0:	d104      	bne.n	8005cfc <HAL_TIM_PWM_Start+0x294>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cfa:	e003      	b.n	8005d04 <HAL_TIM_PWM_Start+0x29c>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	6839      	ldr	r1, [r7, #0]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f001 fba3 	bl	8007458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a31      	ldr	r2, [pc, #196]	; (8005ddc <HAL_TIM_PWM_Start+0x374>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d004      	beq.n	8005d26 <HAL_TIM_PWM_Start+0x2be>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a2f      	ldr	r2, [pc, #188]	; (8005de0 <HAL_TIM_PWM_Start+0x378>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d101      	bne.n	8005d2a <HAL_TIM_PWM_Start+0x2c2>
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <HAL_TIM_PWM_Start+0x2c4>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d007      	beq.n	8005d40 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d3e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a25      	ldr	r2, [pc, #148]	; (8005ddc <HAL_TIM_PWM_Start+0x374>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d022      	beq.n	8005d90 <HAL_TIM_PWM_Start+0x328>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d52:	d01d      	beq.n	8005d90 <HAL_TIM_PWM_Start+0x328>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a22      	ldr	r2, [pc, #136]	; (8005de4 <HAL_TIM_PWM_Start+0x37c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d018      	beq.n	8005d90 <HAL_TIM_PWM_Start+0x328>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a21      	ldr	r2, [pc, #132]	; (8005de8 <HAL_TIM_PWM_Start+0x380>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d013      	beq.n	8005d90 <HAL_TIM_PWM_Start+0x328>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1f      	ldr	r2, [pc, #124]	; (8005dec <HAL_TIM_PWM_Start+0x384>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d00e      	beq.n	8005d90 <HAL_TIM_PWM_Start+0x328>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1a      	ldr	r2, [pc, #104]	; (8005de0 <HAL_TIM_PWM_Start+0x378>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d009      	beq.n	8005d90 <HAL_TIM_PWM_Start+0x328>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1b      	ldr	r2, [pc, #108]	; (8005df0 <HAL_TIM_PWM_Start+0x388>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d004      	beq.n	8005d90 <HAL_TIM_PWM_Start+0x328>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1a      	ldr	r2, [pc, #104]	; (8005df4 <HAL_TIM_PWM_Start+0x38c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d115      	bne.n	8005dbc <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	4b18      	ldr	r3, [pc, #96]	; (8005df8 <HAL_TIM_PWM_Start+0x390>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b06      	cmp	r3, #6
 8005da0:	d015      	beq.n	8005dce <HAL_TIM_PWM_Start+0x366>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da8:	d011      	beq.n	8005dce <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0201 	orr.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dba:	e008      	b.n	8005dce <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	e000      	b.n	8005dd0 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40010000 	.word	0x40010000
 8005de0:	40010400 	.word	0x40010400
 8005de4:	40000400 	.word	0x40000400
 8005de8:	40000800 	.word	0x40000800
 8005dec:	40000c00 	.word	0x40000c00
 8005df0:	40014000 	.word	0x40014000
 8005df4:	40001800 	.word	0x40001800
 8005df8:	00010007 	.word	0x00010007

08005dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d122      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d11b      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0202 	mvn.w	r2, #2
 8005e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 feca 	bl	8006bd8 <HAL_TIM_IC_CaptureCallback>
 8005e44:	e005      	b.n	8005e52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 febc 	bl	8006bc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fecd 	bl	8006bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d122      	bne.n	8005eac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d11b      	bne.n	8005eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0204 	mvn.w	r2, #4
 8005e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2202      	movs	r2, #2
 8005e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fea0 	bl	8006bd8 <HAL_TIM_IC_CaptureCallback>
 8005e98:	e005      	b.n	8005ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fe92 	bl	8006bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fea3 	bl	8006bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b08      	cmp	r3, #8
 8005eb8:	d122      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d11b      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0208 	mvn.w	r2, #8
 8005ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fe76 	bl	8006bd8 <HAL_TIM_IC_CaptureCallback>
 8005eec:	e005      	b.n	8005efa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fe68 	bl	8006bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fe79 	bl	8006bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0310 	and.w	r3, r3, #16
 8005f0a:	2b10      	cmp	r3, #16
 8005f0c:	d122      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f003 0310 	and.w	r3, r3, #16
 8005f18:	2b10      	cmp	r3, #16
 8005f1a:	d11b      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0210 	mvn.w	r2, #16
 8005f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2208      	movs	r2, #8
 8005f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fe4c 	bl	8006bd8 <HAL_TIM_IC_CaptureCallback>
 8005f40:	e005      	b.n	8005f4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fe3e 	bl	8006bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fe4f 	bl	8006bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d10e      	bne.n	8005f80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d107      	bne.n	8005f80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0201 	mvn.w	r2, #1
 8005f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fe18 	bl	8006bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8a:	2b80      	cmp	r3, #128	; 0x80
 8005f8c:	d10e      	bne.n	8005fac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f98:	2b80      	cmp	r3, #128	; 0x80
 8005f9a:	d107      	bne.n	8005fac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f001 fc42 	bl	8007830 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fba:	d10e      	bne.n	8005fda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc6:	2b80      	cmp	r3, #128	; 0x80
 8005fc8:	d107      	bne.n	8005fda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f001 fc35 	bl	8007844 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe4:	2b40      	cmp	r3, #64	; 0x40
 8005fe6:	d10e      	bne.n	8006006 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff2:	2b40      	cmp	r3, #64	; 0x40
 8005ff4:	d107      	bne.n	8006006 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fdfd 	bl	8006c00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b20      	cmp	r3, #32
 8006012:	d10e      	bne.n	8006032 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b20      	cmp	r3, #32
 8006020:	d107      	bne.n	8006032 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f06f 0220 	mvn.w	r2, #32
 800602a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 fbf5 	bl	800781c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d016      	beq.n	8006080 <HAL_TIM_PWM_ConfigChannel+0x44>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b04      	cmp	r3, #4
 8006056:	d013      	beq.n	8006080 <HAL_TIM_PWM_ConfigChannel+0x44>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b08      	cmp	r3, #8
 800605c:	d010      	beq.n	8006080 <HAL_TIM_PWM_ConfigChannel+0x44>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b0c      	cmp	r3, #12
 8006062:	d00d      	beq.n	8006080 <HAL_TIM_PWM_ConfigChannel+0x44>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b10      	cmp	r3, #16
 8006068:	d00a      	beq.n	8006080 <HAL_TIM_PWM_ConfigChannel+0x44>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b14      	cmp	r3, #20
 800606e:	d007      	beq.n	8006080 <HAL_TIM_PWM_ConfigChannel+0x44>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b3c      	cmp	r3, #60	; 0x3c
 8006074:	d004      	beq.n	8006080 <HAL_TIM_PWM_ConfigChannel+0x44>
 8006076:	f241 01af 	movw	r1, #4271	; 0x10af
 800607a:	4895      	ldr	r0, [pc, #596]	; (80062d0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800607c:	f7fb fc63 	bl	8001946 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b60      	cmp	r3, #96	; 0x60
 8006086:	d01c      	beq.n	80060c2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b70      	cmp	r3, #112	; 0x70
 800608e:	d018      	beq.n	80060c2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a8f      	ldr	r2, [pc, #572]	; (80062d4 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d013      	beq.n	80060c2 <HAL_TIM_PWM_ConfigChannel+0x86>
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a8e      	ldr	r2, [pc, #568]	; (80062d8 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00e      	beq.n	80060c2 <HAL_TIM_PWM_ConfigChannel+0x86>
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a8c      	ldr	r2, [pc, #560]	; (80062dc <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d009      	beq.n	80060c2 <HAL_TIM_PWM_ConfigChannel+0x86>
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a8b      	ldr	r2, [pc, #556]	; (80062e0 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d004      	beq.n	80060c2 <HAL_TIM_PWM_ConfigChannel+0x86>
 80060b8:	f241 01b0 	movw	r1, #4272	; 0x10b0
 80060bc:	4884      	ldr	r0, [pc, #528]	; (80062d0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80060be:	f7fb fc42 	bl	8001946 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d008      	beq.n	80060dc <HAL_TIM_PWM_ConfigChannel+0xa0>
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d004      	beq.n	80060dc <HAL_TIM_PWM_ConfigChannel+0xa0>
 80060d2:	f241 01b1 	movw	r1, #4273	; 0x10b1
 80060d6:	487e      	ldr	r0, [pc, #504]	; (80062d0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80060d8:	f7fb fc35 	bl	8001946 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <HAL_TIM_PWM_ConfigChannel+0xba>
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d004      	beq.n	80060f6 <HAL_TIM_PWM_ConfigChannel+0xba>
 80060ec:	f241 01b2 	movw	r1, #4274	; 0x10b2
 80060f0:	4877      	ldr	r0, [pc, #476]	; (80062d0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80060f2:	f7fb fc28 	bl	8001946 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8006100:	2302      	movs	r3, #2
 8006102:	e1f3      	b.n	80064ec <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b14      	cmp	r3, #20
 8006110:	f200 81e4 	bhi.w	80064dc <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8006114:	a201      	add	r2, pc, #4	; (adr r2, 800611c <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8006116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611a:	bf00      	nop
 800611c:	08006171 	.word	0x08006171
 8006120:	080064dd 	.word	0x080064dd
 8006124:	080064dd 	.word	0x080064dd
 8006128:	080064dd 	.word	0x080064dd
 800612c:	08006233 	.word	0x08006233
 8006130:	080064dd 	.word	0x080064dd
 8006134:	080064dd 	.word	0x080064dd
 8006138:	080064dd 	.word	0x080064dd
 800613c:	08006311 	.word	0x08006311
 8006140:	080064dd 	.word	0x080064dd
 8006144:	080064dd 	.word	0x080064dd
 8006148:	080064dd 	.word	0x080064dd
 800614c:	08006397 	.word	0x08006397
 8006150:	080064dd 	.word	0x080064dd
 8006154:	080064dd 	.word	0x080064dd
 8006158:	080064dd 	.word	0x080064dd
 800615c:	0800641f 	.word	0x0800641f
 8006160:	080064dd 	.word	0x080064dd
 8006164:	080064dd 	.word	0x080064dd
 8006168:	080064dd 	.word	0x080064dd
 800616c:	0800647d 	.word	0x0800647d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a5b      	ldr	r2, [pc, #364]	; (80062e4 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d03b      	beq.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006182:	d036      	beq.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a57      	ldr	r2, [pc, #348]	; (80062e8 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d031      	beq.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a56      	ldr	r2, [pc, #344]	; (80062ec <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d02c      	beq.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a54      	ldr	r2, [pc, #336]	; (80062f0 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d027      	beq.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a53      	ldr	r2, [pc, #332]	; (80062f4 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d022      	beq.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a51      	ldr	r2, [pc, #324]	; (80062f8 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d01d      	beq.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a50      	ldr	r2, [pc, #320]	; (80062fc <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d018      	beq.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a4e      	ldr	r2, [pc, #312]	; (8006300 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a4d      	ldr	r2, [pc, #308]	; (8006304 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00e      	beq.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a4b      	ldr	r2, [pc, #300]	; (8006308 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d009      	beq.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a4a      	ldr	r2, [pc, #296]	; (800630c <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d004      	beq.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80061e8:	f241 01bc 	movw	r1, #4284	; 0x10bc
 80061ec:	4838      	ldr	r0, [pc, #224]	; (80062d0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80061ee:	f7fb fbaa 	bl	8001946 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 fdab 	bl	8006d54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	699a      	ldr	r2, [r3, #24]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f042 0208 	orr.w	r2, r2, #8
 800620c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	699a      	ldr	r2, [r3, #24]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0204 	bic.w	r2, r2, #4
 800621c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6999      	ldr	r1, [r3, #24]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	691a      	ldr	r2, [r3, #16]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	619a      	str	r2, [r3, #24]
      break;
 8006230:	e157      	b.n	80064e2 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a2b      	ldr	r2, [pc, #172]	; (80062e4 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d027      	beq.n	800628c <HAL_TIM_PWM_ConfigChannel+0x250>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006244:	d022      	beq.n	800628c <HAL_TIM_PWM_ConfigChannel+0x250>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a27      	ldr	r2, [pc, #156]	; (80062e8 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d01d      	beq.n	800628c <HAL_TIM_PWM_ConfigChannel+0x250>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a25      	ldr	r2, [pc, #148]	; (80062ec <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d018      	beq.n	800628c <HAL_TIM_PWM_ConfigChannel+0x250>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a24      	ldr	r2, [pc, #144]	; (80062f0 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d013      	beq.n	800628c <HAL_TIM_PWM_ConfigChannel+0x250>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a22      	ldr	r2, [pc, #136]	; (80062f4 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d00e      	beq.n	800628c <HAL_TIM_PWM_ConfigChannel+0x250>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a21      	ldr	r2, [pc, #132]	; (80062f8 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d009      	beq.n	800628c <HAL_TIM_PWM_ConfigChannel+0x250>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a21      	ldr	r2, [pc, #132]	; (8006304 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d004      	beq.n	800628c <HAL_TIM_PWM_ConfigChannel+0x250>
 8006282:	f241 01cd 	movw	r1, #4301	; 0x10cd
 8006286:	4812      	ldr	r0, [pc, #72]	; (80062d0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006288:	f7fb fb5d 	bl	8001946 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68b9      	ldr	r1, [r7, #8]
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fdfa 	bl	8006e8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699a      	ldr	r2, [r3, #24]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	699a      	ldr	r2, [r3, #24]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6999      	ldr	r1, [r3, #24]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	021a      	lsls	r2, r3, #8
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	619a      	str	r2, [r3, #24]
      break;
 80062cc:	e109      	b.n	80064e2 <HAL_TIM_PWM_ConfigChannel+0x4a6>
 80062ce:	bf00      	nop
 80062d0:	08012cdc 	.word	0x08012cdc
 80062d4:	00010040 	.word	0x00010040
 80062d8:	00010050 	.word	0x00010050
 80062dc:	00010060 	.word	0x00010060
 80062e0:	00010070 	.word	0x00010070
 80062e4:	40010000 	.word	0x40010000
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800
 80062f0:	40000c00 	.word	0x40000c00
 80062f4:	40010400 	.word	0x40010400
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40014400 	.word	0x40014400
 8006300:	40014800 	.word	0x40014800
 8006304:	40001800 	.word	0x40001800
 8006308:	40001c00 	.word	0x40001c00
 800630c:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a77      	ldr	r2, [pc, #476]	; (80064f4 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d01d      	beq.n	8006356 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006322:	d018      	beq.n	8006356 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a73      	ldr	r2, [pc, #460]	; (80064f8 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d013      	beq.n	8006356 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a72      	ldr	r2, [pc, #456]	; (80064fc <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00e      	beq.n	8006356 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a70      	ldr	r2, [pc, #448]	; (8006500 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d009      	beq.n	8006356 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a6f      	ldr	r2, [pc, #444]	; (8006504 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d004      	beq.n	8006356 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800634c:	f241 01de 	movw	r1, #4318	; 0x10de
 8006350:	486d      	ldr	r0, [pc, #436]	; (8006508 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006352:	f7fb faf8 	bl	8001946 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68b9      	ldr	r1, [r7, #8]
 800635c:	4618      	mov	r0, r3
 800635e:	f000 fe35 	bl	8006fcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69da      	ldr	r2, [r3, #28]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f042 0208 	orr.w	r2, r2, #8
 8006370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69da      	ldr	r2, [r3, #28]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0204 	bic.w	r2, r2, #4
 8006380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69d9      	ldr	r1, [r3, #28]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	61da      	str	r2, [r3, #28]
      break;
 8006394:	e0a5      	b.n	80064e2 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a56      	ldr	r2, [pc, #344]	; (80064f4 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d01d      	beq.n	80063dc <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a8:	d018      	beq.n	80063dc <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a52      	ldr	r2, [pc, #328]	; (80064f8 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d013      	beq.n	80063dc <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a50      	ldr	r2, [pc, #320]	; (80064fc <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00e      	beq.n	80063dc <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a4f      	ldr	r2, [pc, #316]	; (8006500 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d009      	beq.n	80063dc <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a4d      	ldr	r2, [pc, #308]	; (8006504 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d004      	beq.n	80063dc <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80063d2:	f241 01ef 	movw	r1, #4335	; 0x10ef
 80063d6:	484c      	ldr	r0, [pc, #304]	; (8006508 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80063d8:	f7fb fab5 	bl	8001946 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fe92 	bl	800710c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	69da      	ldr	r2, [r3, #28]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	69da      	ldr	r2, [r3, #28]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006406:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69d9      	ldr	r1, [r3, #28]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	021a      	lsls	r2, r3, #8
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	61da      	str	r2, [r3, #28]
      break;
 800641c:	e061      	b.n	80064e2 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a34      	ldr	r2, [pc, #208]	; (80064f4 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d009      	beq.n	800643c <HAL_TIM_PWM_ConfigChannel+0x400>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a35      	ldr	r2, [pc, #212]	; (8006504 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d004      	beq.n	800643c <HAL_TIM_PWM_ConfigChannel+0x400>
 8006432:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8006436:	4834      	ldr	r0, [pc, #208]	; (8006508 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006438:	f7fb fa85 	bl	8001946 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68b9      	ldr	r1, [r7, #8]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fec8 	bl	80071d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0208 	orr.w	r2, r2, #8
 8006456:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0204 	bic.w	r2, r2, #4
 8006466:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	691a      	ldr	r2, [r3, #16]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800647a:	e032      	b.n	80064e2 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a1c      	ldr	r2, [pc, #112]	; (80064f4 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d009      	beq.n	800649a <HAL_TIM_PWM_ConfigChannel+0x45e>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1e      	ldr	r2, [pc, #120]	; (8006504 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d004      	beq.n	800649a <HAL_TIM_PWM_ConfigChannel+0x45e>
 8006490:	f241 1111 	movw	r1, #4369	; 0x1111
 8006494:	481c      	ldr	r0, [pc, #112]	; (8006508 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006496:	f7fb fa56 	bl	8001946 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 feeb 	bl	800727c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c4:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	021a      	lsls	r2, r3, #8
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80064da:	e002      	b.n	80064e2 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	75fb      	strb	r3, [r7, #23]
      break;
 80064e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	40010000 	.word	0x40010000
 80064f8:	40000400 	.word	0x40000400
 80064fc:	40000800 	.word	0x40000800
 8006500:	40000c00 	.word	0x40000c00
 8006504:	40010400 	.word	0x40010400
 8006508:	08012cdc 	.word	0x08012cdc

0800650c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006520:	2b01      	cmp	r3, #1
 8006522:	d101      	bne.n	8006528 <HAL_TIM_ConfigClockSource+0x1c>
 8006524:	2302      	movs	r3, #2
 8006526:	e332      	b.n	8006b8e <HAL_TIM_ConfigClockSource+0x682>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006540:	d029      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x8a>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b70      	cmp	r3, #112	; 0x70
 8006548:	d025      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x8a>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006552:	d020      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x8a>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b40      	cmp	r3, #64	; 0x40
 800655a:	d01c      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x8a>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b50      	cmp	r3, #80	; 0x50
 8006562:	d018      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x8a>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b60      	cmp	r3, #96	; 0x60
 800656a:	d014      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x8a>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d010      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x8a>
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b10      	cmp	r3, #16
 800657a:	d00c      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x8a>
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b20      	cmp	r3, #32
 8006582:	d008      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x8a>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b30      	cmp	r3, #48	; 0x30
 800658a:	d004      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x8a>
 800658c:	f241 514c 	movw	r1, #5452	; 0x154c
 8006590:	4893      	ldr	r0, [pc, #588]	; (80067e0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006592:	f7fb f9d8 	bl	8001946 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	4b90      	ldr	r3, [pc, #576]	; (80067e4 <HAL_TIM_ConfigClockSource+0x2d8>)
 80065a2:	4013      	ands	r3, r2
 80065a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065ac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065be:	f000 812d 	beq.w	800681c <HAL_TIM_ConfigClockSource+0x310>
 80065c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c6:	f200 82d5 	bhi.w	8006b74 <HAL_TIM_ConfigClockSource+0x668>
 80065ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ce:	d02e      	beq.n	800662e <HAL_TIM_ConfigClockSource+0x122>
 80065d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d4:	f200 82ce 	bhi.w	8006b74 <HAL_TIM_ConfigClockSource+0x668>
 80065d8:	2b70      	cmp	r3, #112	; 0x70
 80065da:	f000 8082 	beq.w	80066e2 <HAL_TIM_ConfigClockSource+0x1d6>
 80065de:	2b70      	cmp	r3, #112	; 0x70
 80065e0:	f200 82c8 	bhi.w	8006b74 <HAL_TIM_ConfigClockSource+0x668>
 80065e4:	2b60      	cmp	r3, #96	; 0x60
 80065e6:	f000 81e0 	beq.w	80069aa <HAL_TIM_ConfigClockSource+0x49e>
 80065ea:	2b60      	cmp	r3, #96	; 0x60
 80065ec:	f200 82c2 	bhi.w	8006b74 <HAL_TIM_ConfigClockSource+0x668>
 80065f0:	2b50      	cmp	r3, #80	; 0x50
 80065f2:	f000 8184 	beq.w	80068fe <HAL_TIM_ConfigClockSource+0x3f2>
 80065f6:	2b50      	cmp	r3, #80	; 0x50
 80065f8:	f200 82bc 	bhi.w	8006b74 <HAL_TIM_ConfigClockSource+0x668>
 80065fc:	2b40      	cmp	r3, #64	; 0x40
 80065fe:	f000 8237 	beq.w	8006a70 <HAL_TIM_ConfigClockSource+0x564>
 8006602:	2b40      	cmp	r3, #64	; 0x40
 8006604:	f200 82b6 	bhi.w	8006b74 <HAL_TIM_ConfigClockSource+0x668>
 8006608:	2b30      	cmp	r3, #48	; 0x30
 800660a:	f000 8287 	beq.w	8006b1c <HAL_TIM_ConfigClockSource+0x610>
 800660e:	2b30      	cmp	r3, #48	; 0x30
 8006610:	f200 82b0 	bhi.w	8006b74 <HAL_TIM_ConfigClockSource+0x668>
 8006614:	2b20      	cmp	r3, #32
 8006616:	f000 8281 	beq.w	8006b1c <HAL_TIM_ConfigClockSource+0x610>
 800661a:	2b20      	cmp	r3, #32
 800661c:	f200 82aa 	bhi.w	8006b74 <HAL_TIM_ConfigClockSource+0x668>
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 827b 	beq.w	8006b1c <HAL_TIM_ConfigClockSource+0x610>
 8006626:	2b10      	cmp	r3, #16
 8006628:	f000 8278 	beq.w	8006b1c <HAL_TIM_ConfigClockSource+0x610>
 800662c:	e2a2      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a6d      	ldr	r2, [pc, #436]	; (80067e8 <HAL_TIM_ConfigClockSource+0x2dc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	f000 82a0 	beq.w	8006b7a <HAL_TIM_ConfigClockSource+0x66e>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006642:	f000 829a 	beq.w	8006b7a <HAL_TIM_ConfigClockSource+0x66e>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a68      	ldr	r2, [pc, #416]	; (80067ec <HAL_TIM_ConfigClockSource+0x2e0>)
 800664c:	4293      	cmp	r3, r2
 800664e:	f000 8294 	beq.w	8006b7a <HAL_TIM_ConfigClockSource+0x66e>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a66      	ldr	r2, [pc, #408]	; (80067f0 <HAL_TIM_ConfigClockSource+0x2e4>)
 8006658:	4293      	cmp	r3, r2
 800665a:	f000 828e 	beq.w	8006b7a <HAL_TIM_ConfigClockSource+0x66e>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a64      	ldr	r2, [pc, #400]	; (80067f4 <HAL_TIM_ConfigClockSource+0x2e8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	f000 8288 	beq.w	8006b7a <HAL_TIM_ConfigClockSource+0x66e>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a62      	ldr	r2, [pc, #392]	; (80067f8 <HAL_TIM_ConfigClockSource+0x2ec>)
 8006670:	4293      	cmp	r3, r2
 8006672:	f000 8282 	beq.w	8006b7a <HAL_TIM_ConfigClockSource+0x66e>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a60      	ldr	r2, [pc, #384]	; (80067fc <HAL_TIM_ConfigClockSource+0x2f0>)
 800667c:	4293      	cmp	r3, r2
 800667e:	f000 827c 	beq.w	8006b7a <HAL_TIM_ConfigClockSource+0x66e>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a5e      	ldr	r2, [pc, #376]	; (8006800 <HAL_TIM_ConfigClockSource+0x2f4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	f000 8276 	beq.w	8006b7a <HAL_TIM_ConfigClockSource+0x66e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a5c      	ldr	r2, [pc, #368]	; (8006804 <HAL_TIM_ConfigClockSource+0x2f8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	f000 8270 	beq.w	8006b7a <HAL_TIM_ConfigClockSource+0x66e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a5a      	ldr	r2, [pc, #360]	; (8006808 <HAL_TIM_ConfigClockSource+0x2fc>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	f000 826a 	beq.w	8006b7a <HAL_TIM_ConfigClockSource+0x66e>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a58      	ldr	r2, [pc, #352]	; (800680c <HAL_TIM_ConfigClockSource+0x300>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	f000 8264 	beq.w	8006b7a <HAL_TIM_ConfigClockSource+0x66e>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a56      	ldr	r2, [pc, #344]	; (8006810 <HAL_TIM_ConfigClockSource+0x304>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	f000 825e 	beq.w	8006b7a <HAL_TIM_ConfigClockSource+0x66e>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a54      	ldr	r2, [pc, #336]	; (8006814 <HAL_TIM_ConfigClockSource+0x308>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	f000 8258 	beq.w	8006b7a <HAL_TIM_ConfigClockSource+0x66e>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a52      	ldr	r2, [pc, #328]	; (8006818 <HAL_TIM_ConfigClockSource+0x30c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	f000 8252 	beq.w	8006b7a <HAL_TIM_ConfigClockSource+0x66e>
 80066d6:	f241 5158 	movw	r1, #5464	; 0x1558
 80066da:	4841      	ldr	r0, [pc, #260]	; (80067e0 <HAL_TIM_ConfigClockSource+0x2d4>)
 80066dc:	f7fb f933 	bl	8001946 <assert_failed>
      break;
 80066e0:	e24b      	b.n	8006b7a <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a40      	ldr	r2, [pc, #256]	; (80067e8 <HAL_TIM_ConfigClockSource+0x2dc>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d027      	beq.n	800673c <HAL_TIM_ConfigClockSource+0x230>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f4:	d022      	beq.n	800673c <HAL_TIM_ConfigClockSource+0x230>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a3c      	ldr	r2, [pc, #240]	; (80067ec <HAL_TIM_ConfigClockSource+0x2e0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d01d      	beq.n	800673c <HAL_TIM_ConfigClockSource+0x230>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a3a      	ldr	r2, [pc, #232]	; (80067f0 <HAL_TIM_ConfigClockSource+0x2e4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d018      	beq.n	800673c <HAL_TIM_ConfigClockSource+0x230>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a39      	ldr	r2, [pc, #228]	; (80067f4 <HAL_TIM_ConfigClockSource+0x2e8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d013      	beq.n	800673c <HAL_TIM_ConfigClockSource+0x230>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a39      	ldr	r2, [pc, #228]	; (8006800 <HAL_TIM_ConfigClockSource+0x2f4>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d00e      	beq.n	800673c <HAL_TIM_ConfigClockSource+0x230>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a38      	ldr	r2, [pc, #224]	; (8006804 <HAL_TIM_ConfigClockSource+0x2f8>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d009      	beq.n	800673c <HAL_TIM_ConfigClockSource+0x230>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a38      	ldr	r2, [pc, #224]	; (8006810 <HAL_TIM_ConfigClockSource+0x304>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d004      	beq.n	800673c <HAL_TIM_ConfigClockSource+0x230>
 8006732:	f241 515f 	movw	r1, #5471	; 0x155f
 8006736:	482a      	ldr	r0, [pc, #168]	; (80067e0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006738:	f7fb f905 	bl	8001946 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d013      	beq.n	800676c <HAL_TIM_ConfigClockSource+0x260>
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674c:	d00e      	beq.n	800676c <HAL_TIM_ConfigClockSource+0x260>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006756:	d009      	beq.n	800676c <HAL_TIM_ConfigClockSource+0x260>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006760:	d004      	beq.n	800676c <HAL_TIM_ConfigClockSource+0x260>
 8006762:	f241 5162 	movw	r1, #5474	; 0x1562
 8006766:	481e      	ldr	r0, [pc, #120]	; (80067e0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006768:	f7fb f8ed 	bl	8001946 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006774:	d014      	beq.n	80067a0 <HAL_TIM_ConfigClockSource+0x294>
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d010      	beq.n	80067a0 <HAL_TIM_ConfigClockSource+0x294>
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00c      	beq.n	80067a0 <HAL_TIM_ConfigClockSource+0x294>
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b02      	cmp	r3, #2
 800678c:	d008      	beq.n	80067a0 <HAL_TIM_ConfigClockSource+0x294>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b0a      	cmp	r3, #10
 8006794:	d004      	beq.n	80067a0 <HAL_TIM_ConfigClockSource+0x294>
 8006796:	f241 5163 	movw	r1, #5475	; 0x1563
 800679a:	4811      	ldr	r0, [pc, #68]	; (80067e0 <HAL_TIM_ConfigClockSource+0x2d4>)
 800679c:	f7fb f8d3 	bl	8001946 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	2b0f      	cmp	r3, #15
 80067a6:	d904      	bls.n	80067b2 <HAL_TIM_ConfigClockSource+0x2a6>
 80067a8:	f241 5164 	movw	r1, #5476	; 0x1564
 80067ac:	480c      	ldr	r0, [pc, #48]	; (80067e0 <HAL_TIM_ConfigClockSource+0x2d4>)
 80067ae:	f7fb f8ca 	bl	8001946 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	6899      	ldr	r1, [r3, #8]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	f000 fe29 	bl	8007418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	609a      	str	r2, [r3, #8]
      break;
 80067de:	e1cd      	b.n	8006b7c <HAL_TIM_ConfigClockSource+0x670>
 80067e0:	08012cdc 	.word	0x08012cdc
 80067e4:	fffeff88 	.word	0xfffeff88
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40000400 	.word	0x40000400
 80067f0:	40000800 	.word	0x40000800
 80067f4:	40000c00 	.word	0x40000c00
 80067f8:	40001000 	.word	0x40001000
 80067fc:	40001400 	.word	0x40001400
 8006800:	40010400 	.word	0x40010400
 8006804:	40014000 	.word	0x40014000
 8006808:	40014400 	.word	0x40014400
 800680c:	40014800 	.word	0x40014800
 8006810:	40001800 	.word	0x40001800
 8006814:	40001c00 	.word	0x40001c00
 8006818:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a8d      	ldr	r2, [pc, #564]	; (8006a58 <HAL_TIM_ConfigClockSource+0x54c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d01d      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x356>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682e:	d018      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x356>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a89      	ldr	r2, [pc, #548]	; (8006a5c <HAL_TIM_ConfigClockSource+0x550>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x356>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a88      	ldr	r2, [pc, #544]	; (8006a60 <HAL_TIM_ConfigClockSource+0x554>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00e      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x356>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a86      	ldr	r2, [pc, #536]	; (8006a64 <HAL_TIM_ConfigClockSource+0x558>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d009      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x356>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a85      	ldr	r2, [pc, #532]	; (8006a68 <HAL_TIM_ConfigClockSource+0x55c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d004      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x356>
 8006858:	f241 5177 	movw	r1, #5495	; 0x1577
 800685c:	4883      	ldr	r0, [pc, #524]	; (8006a6c <HAL_TIM_ConfigClockSource+0x560>)
 800685e:	f7fb f872 	bl	8001946 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d013      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x386>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006872:	d00e      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x386>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800687c:	d009      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x386>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006886:	d004      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x386>
 8006888:	f241 517a 	movw	r1, #5498	; 0x157a
 800688c:	4877      	ldr	r0, [pc, #476]	; (8006a6c <HAL_TIM_ConfigClockSource+0x560>)
 800688e:	f7fb f85a 	bl	8001946 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800689a:	d014      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x3ba>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d010      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x3ba>
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00c      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x3ba>
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d008      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x3ba>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b0a      	cmp	r3, #10
 80068ba:	d004      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x3ba>
 80068bc:	f241 517b 	movw	r1, #5499	; 0x157b
 80068c0:	486a      	ldr	r0, [pc, #424]	; (8006a6c <HAL_TIM_ConfigClockSource+0x560>)
 80068c2:	f7fb f840 	bl	8001946 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	2b0f      	cmp	r3, #15
 80068cc:	d904      	bls.n	80068d8 <HAL_TIM_ConfigClockSource+0x3cc>
 80068ce:	f241 517c 	movw	r1, #5500	; 0x157c
 80068d2:	4866      	ldr	r0, [pc, #408]	; (8006a6c <HAL_TIM_ConfigClockSource+0x560>)
 80068d4:	f7fb f837 	bl	8001946 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	6899      	ldr	r1, [r3, #8]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f000 fd96 	bl	8007418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689a      	ldr	r2, [r3, #8]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068fa:	609a      	str	r2, [r3, #8]
      break;
 80068fc:	e13e      	b.n	8006b7c <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a55      	ldr	r2, [pc, #340]	; (8006a58 <HAL_TIM_ConfigClockSource+0x54c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d01d      	beq.n	8006944 <HAL_TIM_ConfigClockSource+0x438>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006910:	d018      	beq.n	8006944 <HAL_TIM_ConfigClockSource+0x438>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a51      	ldr	r2, [pc, #324]	; (8006a5c <HAL_TIM_ConfigClockSource+0x550>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d013      	beq.n	8006944 <HAL_TIM_ConfigClockSource+0x438>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a4f      	ldr	r2, [pc, #316]	; (8006a60 <HAL_TIM_ConfigClockSource+0x554>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00e      	beq.n	8006944 <HAL_TIM_ConfigClockSource+0x438>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a4e      	ldr	r2, [pc, #312]	; (8006a64 <HAL_TIM_ConfigClockSource+0x558>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d009      	beq.n	8006944 <HAL_TIM_ConfigClockSource+0x438>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a4c      	ldr	r2, [pc, #304]	; (8006a68 <HAL_TIM_ConfigClockSource+0x55c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d004      	beq.n	8006944 <HAL_TIM_ConfigClockSource+0x438>
 800693a:	f241 518b 	movw	r1, #5515	; 0x158b
 800693e:	484b      	ldr	r0, [pc, #300]	; (8006a6c <HAL_TIM_ConfigClockSource+0x560>)
 8006940:	f7fb f801 	bl	8001946 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800694c:	d014      	beq.n	8006978 <HAL_TIM_ConfigClockSource+0x46c>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d010      	beq.n	8006978 <HAL_TIM_ConfigClockSource+0x46c>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00c      	beq.n	8006978 <HAL_TIM_ConfigClockSource+0x46c>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2b02      	cmp	r3, #2
 8006964:	d008      	beq.n	8006978 <HAL_TIM_ConfigClockSource+0x46c>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	2b0a      	cmp	r3, #10
 800696c:	d004      	beq.n	8006978 <HAL_TIM_ConfigClockSource+0x46c>
 800696e:	f241 518e 	movw	r1, #5518	; 0x158e
 8006972:	483e      	ldr	r0, [pc, #248]	; (8006a6c <HAL_TIM_ConfigClockSource+0x560>)
 8006974:	f7fa ffe7 	bl	8001946 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	2b0f      	cmp	r3, #15
 800697e:	d904      	bls.n	800698a <HAL_TIM_ConfigClockSource+0x47e>
 8006980:	f241 518f 	movw	r1, #5519	; 0x158f
 8006984:	4839      	ldr	r0, [pc, #228]	; (8006a6c <HAL_TIM_ConfigClockSource+0x560>)
 8006986:	f7fa ffde 	bl	8001946 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6818      	ldr	r0, [r3, #0]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	6859      	ldr	r1, [r3, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	461a      	mov	r2, r3
 8006998:	f000 fcc4 	bl	8007324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2150      	movs	r1, #80	; 0x50
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fd1d 	bl	80073e2 <TIM_ITRx_SetConfig>
      break;
 80069a8:	e0e8      	b.n	8006b7c <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a2a      	ldr	r2, [pc, #168]	; (8006a58 <HAL_TIM_ConfigClockSource+0x54c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d01d      	beq.n	80069f0 <HAL_TIM_ConfigClockSource+0x4e4>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069bc:	d018      	beq.n	80069f0 <HAL_TIM_ConfigClockSource+0x4e4>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a26      	ldr	r2, [pc, #152]	; (8006a5c <HAL_TIM_ConfigClockSource+0x550>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d013      	beq.n	80069f0 <HAL_TIM_ConfigClockSource+0x4e4>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a24      	ldr	r2, [pc, #144]	; (8006a60 <HAL_TIM_ConfigClockSource+0x554>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00e      	beq.n	80069f0 <HAL_TIM_ConfigClockSource+0x4e4>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a23      	ldr	r2, [pc, #140]	; (8006a64 <HAL_TIM_ConfigClockSource+0x558>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d009      	beq.n	80069f0 <HAL_TIM_ConfigClockSource+0x4e4>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a21      	ldr	r2, [pc, #132]	; (8006a68 <HAL_TIM_ConfigClockSource+0x55c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d004      	beq.n	80069f0 <HAL_TIM_ConfigClockSource+0x4e4>
 80069e6:	f241 519b 	movw	r1, #5531	; 0x159b
 80069ea:	4820      	ldr	r0, [pc, #128]	; (8006a6c <HAL_TIM_ConfigClockSource+0x560>)
 80069ec:	f7fa ffab 	bl	8001946 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069f8:	d014      	beq.n	8006a24 <HAL_TIM_ConfigClockSource+0x518>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d010      	beq.n	8006a24 <HAL_TIM_ConfigClockSource+0x518>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00c      	beq.n	8006a24 <HAL_TIM_ConfigClockSource+0x518>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d008      	beq.n	8006a24 <HAL_TIM_ConfigClockSource+0x518>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b0a      	cmp	r3, #10
 8006a18:	d004      	beq.n	8006a24 <HAL_TIM_ConfigClockSource+0x518>
 8006a1a:	f241 519e 	movw	r1, #5534	; 0x159e
 8006a1e:	4813      	ldr	r0, [pc, #76]	; (8006a6c <HAL_TIM_ConfigClockSource+0x560>)
 8006a20:	f7fa ff91 	bl	8001946 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	2b0f      	cmp	r3, #15
 8006a2a:	d904      	bls.n	8006a36 <HAL_TIM_ConfigClockSource+0x52a>
 8006a2c:	f241 519f 	movw	r1, #5535	; 0x159f
 8006a30:	480e      	ldr	r0, [pc, #56]	; (8006a6c <HAL_TIM_ConfigClockSource+0x560>)
 8006a32:	f7fa ff88 	bl	8001946 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	6859      	ldr	r1, [r3, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	461a      	mov	r2, r3
 8006a44:	f000 fc9d 	bl	8007382 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2160      	movs	r1, #96	; 0x60
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fcc7 	bl	80073e2 <TIM_ITRx_SetConfig>
      break;
 8006a54:	e092      	b.n	8006b7c <HAL_TIM_ConfigClockSource+0x670>
 8006a56:	bf00      	nop
 8006a58:	40010000 	.word	0x40010000
 8006a5c:	40000400 	.word	0x40000400
 8006a60:	40000800 	.word	0x40000800
 8006a64:	40000c00 	.word	0x40000c00
 8006a68:	40010400 	.word	0x40010400
 8006a6c:	08012cdc 	.word	0x08012cdc
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a48      	ldr	r2, [pc, #288]	; (8006b98 <HAL_TIM_ConfigClockSource+0x68c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d01d      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0x5aa>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a82:	d018      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0x5aa>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a44      	ldr	r2, [pc, #272]	; (8006b9c <HAL_TIM_ConfigClockSource+0x690>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d013      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0x5aa>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a43      	ldr	r2, [pc, #268]	; (8006ba0 <HAL_TIM_ConfigClockSource+0x694>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00e      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0x5aa>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a41      	ldr	r2, [pc, #260]	; (8006ba4 <HAL_TIM_ConfigClockSource+0x698>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d009      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0x5aa>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a40      	ldr	r2, [pc, #256]	; (8006ba8 <HAL_TIM_ConfigClockSource+0x69c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0x5aa>
 8006aac:	f241 51ab 	movw	r1, #5547	; 0x15ab
 8006ab0:	483e      	ldr	r0, [pc, #248]	; (8006bac <HAL_TIM_ConfigClockSource+0x6a0>)
 8006ab2:	f7fa ff48 	bl	8001946 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006abe:	d014      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x5de>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d010      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x5de>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00c      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x5de>
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d008      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x5de>
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	2b0a      	cmp	r3, #10
 8006ade:	d004      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x5de>
 8006ae0:	f241 51ae 	movw	r1, #5550	; 0x15ae
 8006ae4:	4831      	ldr	r0, [pc, #196]	; (8006bac <HAL_TIM_ConfigClockSource+0x6a0>)
 8006ae6:	f7fa ff2e 	bl	8001946 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	2b0f      	cmp	r3, #15
 8006af0:	d904      	bls.n	8006afc <HAL_TIM_ConfigClockSource+0x5f0>
 8006af2:	f241 51af 	movw	r1, #5551	; 0x15af
 8006af6:	482d      	ldr	r0, [pc, #180]	; (8006bac <HAL_TIM_ConfigClockSource+0x6a0>)
 8006af8:	f7fa ff25 	bl	8001946 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6818      	ldr	r0, [r3, #0]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	6859      	ldr	r1, [r3, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	f000 fc0b 	bl	8007324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2140      	movs	r1, #64	; 0x40
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 fc64 	bl	80073e2 <TIM_ITRx_SetConfig>
      break;
 8006b1a:	e02f      	b.n	8006b7c <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a1d      	ldr	r2, [pc, #116]	; (8006b98 <HAL_TIM_ConfigClockSource+0x68c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d01d      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0x656>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2e:	d018      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0x656>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a19      	ldr	r2, [pc, #100]	; (8006b9c <HAL_TIM_ConfigClockSource+0x690>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d013      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0x656>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a18      	ldr	r2, [pc, #96]	; (8006ba0 <HAL_TIM_ConfigClockSource+0x694>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00e      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0x656>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a16      	ldr	r2, [pc, #88]	; (8006ba4 <HAL_TIM_ConfigClockSource+0x698>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d009      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0x656>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a15      	ldr	r2, [pc, #84]	; (8006ba8 <HAL_TIM_ConfigClockSource+0x69c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d004      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0x656>
 8006b58:	f241 51be 	movw	r1, #5566	; 0x15be
 8006b5c:	4813      	ldr	r0, [pc, #76]	; (8006bac <HAL_TIM_ConfigClockSource+0x6a0>)
 8006b5e:	f7fa fef2 	bl	8001946 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	f000 fc38 	bl	80073e2 <TIM_ITRx_SetConfig>
      break;
 8006b72:	e003      	b.n	8006b7c <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	73fb      	strb	r3, [r7, #15]
      break;
 8006b78:	e000      	b.n	8006b7c <HAL_TIM_ConfigClockSource+0x670>
      break;
 8006b7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	40010000 	.word	0x40010000
 8006b9c:	40000400 	.word	0x40000400
 8006ba0:	40000800 	.word	0x40000800
 8006ba4:	40000c00 	.word	0x40000c00
 8006ba8:	40010400 	.word	0x40010400
 8006bac:	08012cdc 	.word	0x08012cdc

08006bb0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a40      	ldr	r2, [pc, #256]	; (8006d28 <TIM_Base_SetConfig+0x114>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d013      	beq.n	8006c54 <TIM_Base_SetConfig+0x40>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c32:	d00f      	beq.n	8006c54 <TIM_Base_SetConfig+0x40>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a3d      	ldr	r2, [pc, #244]	; (8006d2c <TIM_Base_SetConfig+0x118>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d00b      	beq.n	8006c54 <TIM_Base_SetConfig+0x40>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a3c      	ldr	r2, [pc, #240]	; (8006d30 <TIM_Base_SetConfig+0x11c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d007      	beq.n	8006c54 <TIM_Base_SetConfig+0x40>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a3b      	ldr	r2, [pc, #236]	; (8006d34 <TIM_Base_SetConfig+0x120>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d003      	beq.n	8006c54 <TIM_Base_SetConfig+0x40>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a3a      	ldr	r2, [pc, #232]	; (8006d38 <TIM_Base_SetConfig+0x124>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d108      	bne.n	8006c66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a2f      	ldr	r2, [pc, #188]	; (8006d28 <TIM_Base_SetConfig+0x114>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d02b      	beq.n	8006cc6 <TIM_Base_SetConfig+0xb2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c74:	d027      	beq.n	8006cc6 <TIM_Base_SetConfig+0xb2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a2c      	ldr	r2, [pc, #176]	; (8006d2c <TIM_Base_SetConfig+0x118>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d023      	beq.n	8006cc6 <TIM_Base_SetConfig+0xb2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a2b      	ldr	r2, [pc, #172]	; (8006d30 <TIM_Base_SetConfig+0x11c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d01f      	beq.n	8006cc6 <TIM_Base_SetConfig+0xb2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a2a      	ldr	r2, [pc, #168]	; (8006d34 <TIM_Base_SetConfig+0x120>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d01b      	beq.n	8006cc6 <TIM_Base_SetConfig+0xb2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a29      	ldr	r2, [pc, #164]	; (8006d38 <TIM_Base_SetConfig+0x124>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d017      	beq.n	8006cc6 <TIM_Base_SetConfig+0xb2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a28      	ldr	r2, [pc, #160]	; (8006d3c <TIM_Base_SetConfig+0x128>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d013      	beq.n	8006cc6 <TIM_Base_SetConfig+0xb2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a27      	ldr	r2, [pc, #156]	; (8006d40 <TIM_Base_SetConfig+0x12c>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d00f      	beq.n	8006cc6 <TIM_Base_SetConfig+0xb2>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a26      	ldr	r2, [pc, #152]	; (8006d44 <TIM_Base_SetConfig+0x130>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d00b      	beq.n	8006cc6 <TIM_Base_SetConfig+0xb2>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a25      	ldr	r2, [pc, #148]	; (8006d48 <TIM_Base_SetConfig+0x134>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d007      	beq.n	8006cc6 <TIM_Base_SetConfig+0xb2>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a24      	ldr	r2, [pc, #144]	; (8006d4c <TIM_Base_SetConfig+0x138>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d003      	beq.n	8006cc6 <TIM_Base_SetConfig+0xb2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a23      	ldr	r2, [pc, #140]	; (8006d50 <TIM_Base_SetConfig+0x13c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d108      	bne.n	8006cd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a0a      	ldr	r2, [pc, #40]	; (8006d28 <TIM_Base_SetConfig+0x114>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d003      	beq.n	8006d0c <TIM_Base_SetConfig+0xf8>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a0c      	ldr	r2, [pc, #48]	; (8006d38 <TIM_Base_SetConfig+0x124>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d103      	bne.n	8006d14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	691a      	ldr	r2, [r3, #16]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	615a      	str	r2, [r3, #20]
}
 8006d1a:	bf00      	nop
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	40010000 	.word	0x40010000
 8006d2c:	40000400 	.word	0x40000400
 8006d30:	40000800 	.word	0x40000800
 8006d34:	40000c00 	.word	0x40000c00
 8006d38:	40010400 	.word	0x40010400
 8006d3c:	40014000 	.word	0x40014000
 8006d40:	40014400 	.word	0x40014400
 8006d44:	40014800 	.word	0x40014800
 8006d48:	40001800 	.word	0x40001800
 8006d4c:	40001c00 	.word	0x40001c00
 8006d50:	40002000 	.word	0x40002000

08006d54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	f023 0201 	bic.w	r2, r3, #1
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4b3f      	ldr	r3, [pc, #252]	; (8006e7c <TIM_OC1_SetConfig+0x128>)
 8006d80:	4013      	ands	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0303 	bic.w	r3, r3, #3
 8006d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f023 0302 	bic.w	r3, r3, #2
 8006d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a35      	ldr	r2, [pc, #212]	; (8006e80 <TIM_OC1_SetConfig+0x12c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d003      	beq.n	8006db8 <TIM_OC1_SetConfig+0x64>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a34      	ldr	r2, [pc, #208]	; (8006e84 <TIM_OC1_SetConfig+0x130>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d119      	bne.n	8006dec <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d008      	beq.n	8006dd2 <TIM_OC1_SetConfig+0x7e>
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d004      	beq.n	8006dd2 <TIM_OC1_SetConfig+0x7e>
 8006dc8:	f641 3167 	movw	r1, #7015	; 0x1b67
 8006dcc:	482e      	ldr	r0, [pc, #184]	; (8006e88 <TIM_OC1_SetConfig+0x134>)
 8006dce:	f7fa fdba 	bl	8001946 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f023 0308 	bic.w	r3, r3, #8
 8006dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f023 0304 	bic.w	r3, r3, #4
 8006dea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a24      	ldr	r2, [pc, #144]	; (8006e80 <TIM_OC1_SetConfig+0x12c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d003      	beq.n	8006dfc <TIM_OC1_SetConfig+0xa8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a23      	ldr	r2, [pc, #140]	; (8006e84 <TIM_OC1_SetConfig+0x130>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d12d      	bne.n	8006e58 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e04:	d008      	beq.n	8006e18 <TIM_OC1_SetConfig+0xc4>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d004      	beq.n	8006e18 <TIM_OC1_SetConfig+0xc4>
 8006e0e:	f641 3174 	movw	r1, #7028	; 0x1b74
 8006e12:	481d      	ldr	r0, [pc, #116]	; (8006e88 <TIM_OC1_SetConfig+0x134>)
 8006e14:	f7fa fd97 	bl	8001946 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e20:	d008      	beq.n	8006e34 <TIM_OC1_SetConfig+0xe0>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d004      	beq.n	8006e34 <TIM_OC1_SetConfig+0xe0>
 8006e2a:	f641 3175 	movw	r1, #7029	; 0x1b75
 8006e2e:	4816      	ldr	r0, [pc, #88]	; (8006e88 <TIM_OC1_SetConfig+0x134>)
 8006e30:	f7fa fd89 	bl	8001946 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	621a      	str	r2, [r3, #32]
}
 8006e72:	bf00      	nop
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	fffeff8f 	.word	0xfffeff8f
 8006e80:	40010000 	.word	0x40010000
 8006e84:	40010400 	.word	0x40010400
 8006e88:	08012cdc 	.word	0x08012cdc

08006e8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f023 0210 	bic.w	r2, r3, #16
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	4b41      	ldr	r3, [pc, #260]	; (8006fbc <TIM_OC2_SetConfig+0x130>)
 8006eb8:	4013      	ands	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	021b      	lsls	r3, r3, #8
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f023 0320 	bic.w	r3, r3, #32
 8006ed6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	011b      	lsls	r3, r3, #4
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a36      	ldr	r2, [pc, #216]	; (8006fc0 <TIM_OC2_SetConfig+0x134>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d003      	beq.n	8006ef4 <TIM_OC2_SetConfig+0x68>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a35      	ldr	r2, [pc, #212]	; (8006fc4 <TIM_OC2_SetConfig+0x138>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d11a      	bne.n	8006f2a <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d008      	beq.n	8006f0e <TIM_OC2_SetConfig+0x82>
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d004      	beq.n	8006f0e <TIM_OC2_SetConfig+0x82>
 8006f04:	f641 31b2 	movw	r1, #7090	; 0x1bb2
 8006f08:	482f      	ldr	r0, [pc, #188]	; (8006fc8 <TIM_OC2_SetConfig+0x13c>)
 8006f0a:	f7fa fd1c 	bl	8001946 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f28:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a24      	ldr	r2, [pc, #144]	; (8006fc0 <TIM_OC2_SetConfig+0x134>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d003      	beq.n	8006f3a <TIM_OC2_SetConfig+0xae>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a23      	ldr	r2, [pc, #140]	; (8006fc4 <TIM_OC2_SetConfig+0x138>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d12f      	bne.n	8006f9a <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f42:	d008      	beq.n	8006f56 <TIM_OC2_SetConfig+0xca>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d004      	beq.n	8006f56 <TIM_OC2_SetConfig+0xca>
 8006f4c:	f44f 51de 	mov.w	r1, #7104	; 0x1bc0
 8006f50:	481d      	ldr	r0, [pc, #116]	; (8006fc8 <TIM_OC2_SetConfig+0x13c>)
 8006f52:	f7fa fcf8 	bl	8001946 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5e:	d008      	beq.n	8006f72 <TIM_OC2_SetConfig+0xe6>
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d004      	beq.n	8006f72 <TIM_OC2_SetConfig+0xe6>
 8006f68:	f641 31c1 	movw	r1, #7105	; 0x1bc1
 8006f6c:	4816      	ldr	r0, [pc, #88]	; (8006fc8 <TIM_OC2_SetConfig+0x13c>)
 8006f6e:	f7fa fcea 	bl	8001946 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	621a      	str	r2, [r3, #32]
}
 8006fb4:	bf00      	nop
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	feff8fff 	.word	0xfeff8fff
 8006fc0:	40010000 	.word	0x40010000
 8006fc4:	40010400 	.word	0x40010400
 8006fc8:	08012cdc 	.word	0x08012cdc

08006fcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4b41      	ldr	r3, [pc, #260]	; (80070fc <TIM_OC3_SetConfig+0x130>)
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 0303 	bic.w	r3, r3, #3
 8007002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	021b      	lsls	r3, r3, #8
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	4313      	orrs	r3, r2
 8007020:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a36      	ldr	r2, [pc, #216]	; (8007100 <TIM_OC3_SetConfig+0x134>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d003      	beq.n	8007032 <TIM_OC3_SetConfig+0x66>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a35      	ldr	r2, [pc, #212]	; (8007104 <TIM_OC3_SetConfig+0x138>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d11a      	bne.n	8007068 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d008      	beq.n	800704c <TIM_OC3_SetConfig+0x80>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	2b08      	cmp	r3, #8
 8007040:	d004      	beq.n	800704c <TIM_OC3_SetConfig+0x80>
 8007042:	f641 31fd 	movw	r1, #7165	; 0x1bfd
 8007046:	4830      	ldr	r0, [pc, #192]	; (8007108 <TIM_OC3_SetConfig+0x13c>)
 8007048:	f7fa fc7d 	bl	8001946 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	021b      	lsls	r3, r3, #8
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007066:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a25      	ldr	r2, [pc, #148]	; (8007100 <TIM_OC3_SetConfig+0x134>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d003      	beq.n	8007078 <TIM_OC3_SetConfig+0xac>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a24      	ldr	r2, [pc, #144]	; (8007104 <TIM_OC3_SetConfig+0x138>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d12f      	bne.n	80070d8 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007080:	d008      	beq.n	8007094 <TIM_OC3_SetConfig+0xc8>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d004      	beq.n	8007094 <TIM_OC3_SetConfig+0xc8>
 800708a:	f641 410a 	movw	r1, #7178	; 0x1c0a
 800708e:	481e      	ldr	r0, [pc, #120]	; (8007108 <TIM_OC3_SetConfig+0x13c>)
 8007090:	f7fa fc59 	bl	8001946 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800709c:	d008      	beq.n	80070b0 <TIM_OC3_SetConfig+0xe4>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d004      	beq.n	80070b0 <TIM_OC3_SetConfig+0xe4>
 80070a6:	f641 410b 	movw	r1, #7179	; 0x1c0b
 80070aa:	4817      	ldr	r0, [pc, #92]	; (8007108 <TIM_OC3_SetConfig+0x13c>)
 80070ac:	f7fa fc4b 	bl	8001946 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	011b      	lsls	r3, r3, #4
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	011b      	lsls	r3, r3, #4
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	621a      	str	r2, [r3, #32]
}
 80070f2:	bf00      	nop
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	fffeff8f 	.word	0xfffeff8f
 8007100:	40010000 	.word	0x40010000
 8007104:	40010400 	.word	0x40010400
 8007108:	08012cdc 	.word	0x08012cdc

0800710c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	4b24      	ldr	r3, [pc, #144]	; (80071c8 <TIM_OC4_SetConfig+0xbc>)
 8007138:	4013      	ands	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	031b      	lsls	r3, r3, #12
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4313      	orrs	r3, r2
 8007162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a19      	ldr	r2, [pc, #100]	; (80071cc <TIM_OC4_SetConfig+0xc0>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d003      	beq.n	8007174 <TIM_OC4_SetConfig+0x68>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a18      	ldr	r2, [pc, #96]	; (80071d0 <TIM_OC4_SetConfig+0xc4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d117      	bne.n	80071a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800717c:	d008      	beq.n	8007190 <TIM_OC4_SetConfig+0x84>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <TIM_OC4_SetConfig+0x84>
 8007186:	f641 4149 	movw	r1, #7241	; 0x1c49
 800718a:	4812      	ldr	r0, [pc, #72]	; (80071d4 <TIM_OC4_SetConfig+0xc8>)
 800718c:	f7fa fbdb 	bl	8001946 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007196:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	019b      	lsls	r3, r3, #6
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	621a      	str	r2, [r3, #32]
}
 80071be:	bf00      	nop
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	feff8fff 	.word	0xfeff8fff
 80071cc:	40010000 	.word	0x40010000
 80071d0:	40010400 	.word	0x40010400
 80071d4:	08012cdc 	.word	0x08012cdc

080071d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	4b1b      	ldr	r3, [pc, #108]	; (8007270 <TIM_OC5_SetConfig+0x98>)
 8007204:	4013      	ands	r3, r2
 8007206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	4313      	orrs	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007218:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	041b      	lsls	r3, r3, #16
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	4313      	orrs	r3, r2
 8007224:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a12      	ldr	r2, [pc, #72]	; (8007274 <TIM_OC5_SetConfig+0x9c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d003      	beq.n	8007236 <TIM_OC5_SetConfig+0x5e>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a11      	ldr	r2, [pc, #68]	; (8007278 <TIM_OC5_SetConfig+0xa0>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d109      	bne.n	800724a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800723c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	021b      	lsls	r3, r3, #8
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	4313      	orrs	r3, r2
 8007248:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	621a      	str	r2, [r3, #32]
}
 8007264:	bf00      	nop
 8007266:	371c      	adds	r7, #28
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	fffeff8f 	.word	0xfffeff8f
 8007274:	40010000 	.word	0x40010000
 8007278:	40010400 	.word	0x40010400

0800727c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	4b1c      	ldr	r3, [pc, #112]	; (8007318 <TIM_OC6_SetConfig+0x9c>)
 80072a8:	4013      	ands	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	021b      	lsls	r3, r3, #8
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	051b      	lsls	r3, r3, #20
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a13      	ldr	r2, [pc, #76]	; (800731c <TIM_OC6_SetConfig+0xa0>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d003      	beq.n	80072dc <TIM_OC6_SetConfig+0x60>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a12      	ldr	r2, [pc, #72]	; (8007320 <TIM_OC6_SetConfig+0xa4>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d109      	bne.n	80072f0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	029b      	lsls	r3, r3, #10
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	621a      	str	r2, [r3, #32]
}
 800730a:	bf00      	nop
 800730c:	371c      	adds	r7, #28
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	feff8fff 	.word	0xfeff8fff
 800731c:	40010000 	.word	0x40010000
 8007320:	40010400 	.word	0x40010400

08007324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	f023 0201 	bic.w	r2, r3, #1
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800734e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	011b      	lsls	r3, r3, #4
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	4313      	orrs	r3, r2
 8007358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f023 030a 	bic.w	r3, r3, #10
 8007360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	621a      	str	r2, [r3, #32]
}
 8007376:	bf00      	nop
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007382:	b480      	push	{r7}
 8007384:	b087      	sub	sp, #28
 8007386:	af00      	add	r7, sp, #0
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	f023 0210 	bic.w	r2, r3, #16
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	031b      	lsls	r3, r3, #12
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	621a      	str	r2, [r3, #32]
}
 80073d6:	bf00      	nop
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b085      	sub	sp, #20
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4313      	orrs	r3, r2
 8007400:	f043 0307 	orr.w	r3, r3, #7
 8007404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	609a      	str	r2, [r3, #8]
}
 800740c:	bf00      	nop
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	021a      	lsls	r2, r3, #8
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	431a      	orrs	r2, r3
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	4313      	orrs	r3, r2
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	4313      	orrs	r3, r2
 8007444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	609a      	str	r2, [r3, #8]
}
 800744c:	bf00      	nop
 800744e:	371c      	adds	r7, #28
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4a35      	ldr	r2, [pc, #212]	; (800753c <TIM_CCxChannelCmd+0xe4>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d030      	beq.n	80074ce <TIM_CCxChannelCmd+0x76>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007472:	d02c      	beq.n	80074ce <TIM_CCxChannelCmd+0x76>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4a32      	ldr	r2, [pc, #200]	; (8007540 <TIM_CCxChannelCmd+0xe8>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d028      	beq.n	80074ce <TIM_CCxChannelCmd+0x76>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4a31      	ldr	r2, [pc, #196]	; (8007544 <TIM_CCxChannelCmd+0xec>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d024      	beq.n	80074ce <TIM_CCxChannelCmd+0x76>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4a30      	ldr	r2, [pc, #192]	; (8007548 <TIM_CCxChannelCmd+0xf0>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d020      	beq.n	80074ce <TIM_CCxChannelCmd+0x76>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4a2f      	ldr	r2, [pc, #188]	; (800754c <TIM_CCxChannelCmd+0xf4>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d01c      	beq.n	80074ce <TIM_CCxChannelCmd+0x76>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4a2e      	ldr	r2, [pc, #184]	; (8007550 <TIM_CCxChannelCmd+0xf8>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d018      	beq.n	80074ce <TIM_CCxChannelCmd+0x76>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4a2d      	ldr	r2, [pc, #180]	; (8007554 <TIM_CCxChannelCmd+0xfc>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d014      	beq.n	80074ce <TIM_CCxChannelCmd+0x76>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4a2c      	ldr	r2, [pc, #176]	; (8007558 <TIM_CCxChannelCmd+0x100>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d010      	beq.n	80074ce <TIM_CCxChannelCmd+0x76>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4a2b      	ldr	r2, [pc, #172]	; (800755c <TIM_CCxChannelCmd+0x104>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00c      	beq.n	80074ce <TIM_CCxChannelCmd+0x76>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4a2a      	ldr	r2, [pc, #168]	; (8007560 <TIM_CCxChannelCmd+0x108>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d008      	beq.n	80074ce <TIM_CCxChannelCmd+0x76>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4a29      	ldr	r2, [pc, #164]	; (8007564 <TIM_CCxChannelCmd+0x10c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d004      	beq.n	80074ce <TIM_CCxChannelCmd+0x76>
 80074c4:	f641 61a1 	movw	r1, #7841	; 0x1ea1
 80074c8:	4827      	ldr	r0, [pc, #156]	; (8007568 <TIM_CCxChannelCmd+0x110>)
 80074ca:	f7fa fa3c 	bl	8001946 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d016      	beq.n	8007502 <TIM_CCxChannelCmd+0xaa>
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d013      	beq.n	8007502 <TIM_CCxChannelCmd+0xaa>
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d010      	beq.n	8007502 <TIM_CCxChannelCmd+0xaa>
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2b0c      	cmp	r3, #12
 80074e4:	d00d      	beq.n	8007502 <TIM_CCxChannelCmd+0xaa>
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b10      	cmp	r3, #16
 80074ea:	d00a      	beq.n	8007502 <TIM_CCxChannelCmd+0xaa>
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b14      	cmp	r3, #20
 80074f0:	d007      	beq.n	8007502 <TIM_CCxChannelCmd+0xaa>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b3c      	cmp	r3, #60	; 0x3c
 80074f6:	d004      	beq.n	8007502 <TIM_CCxChannelCmd+0xaa>
 80074f8:	f641 61a2 	movw	r1, #7842	; 0x1ea2
 80074fc:	481a      	ldr	r0, [pc, #104]	; (8007568 <TIM_CCxChannelCmd+0x110>)
 80074fe:	f7fa fa22 	bl	8001946 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f003 031f 	and.w	r3, r3, #31
 8007508:	2201      	movs	r2, #1
 800750a:	fa02 f303 	lsl.w	r3, r2, r3
 800750e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6a1a      	ldr	r2, [r3, #32]
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	43db      	mvns	r3, r3
 8007518:	401a      	ands	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6a1a      	ldr	r2, [r3, #32]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f003 031f 	and.w	r3, r3, #31
 8007528:	6879      	ldr	r1, [r7, #4]
 800752a:	fa01 f303 	lsl.w	r3, r1, r3
 800752e:	431a      	orrs	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	621a      	str	r2, [r3, #32]
}
 8007534:	bf00      	nop
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	40010000 	.word	0x40010000
 8007540:	40000400 	.word	0x40000400
 8007544:	40000800 	.word	0x40000800
 8007548:	40000c00 	.word	0x40000c00
 800754c:	40010400 	.word	0x40010400
 8007550:	40014000 	.word	0x40014000
 8007554:	40014400 	.word	0x40014400
 8007558:	40014800 	.word	0x40014800
 800755c:	40001800 	.word	0x40001800
 8007560:	40001c00 	.word	0x40001c00
 8007564:	40002000 	.word	0x40002000
 8007568:	08012cdc 	.word	0x08012cdc

0800756c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a32      	ldr	r2, [pc, #200]	; (8007644 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d027      	beq.n	80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007588:	d022      	beq.n	80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a2e      	ldr	r2, [pc, #184]	; (8007648 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d01d      	beq.n	80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a2c      	ldr	r2, [pc, #176]	; (800764c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d018      	beq.n	80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a2b      	ldr	r2, [pc, #172]	; (8007650 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d013      	beq.n	80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a29      	ldr	r2, [pc, #164]	; (8007654 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00e      	beq.n	80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a28      	ldr	r2, [pc, #160]	; (8007658 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d009      	beq.n	80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a26      	ldr	r2, [pc, #152]	; (800765c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d004      	beq.n	80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80075c6:	f240 71b6 	movw	r1, #1974	; 0x7b6
 80075ca:	4825      	ldr	r0, [pc, #148]	; (8007660 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075cc:	f7fa f9bb 	bl	8001946 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d020      	beq.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b10      	cmp	r3, #16
 80075de:	d01c      	beq.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b20      	cmp	r3, #32
 80075e6:	d018      	beq.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b30      	cmp	r3, #48	; 0x30
 80075ee:	d014      	beq.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b40      	cmp	r3, #64	; 0x40
 80075f6:	d010      	beq.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b50      	cmp	r3, #80	; 0x50
 80075fe:	d00c      	beq.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b60      	cmp	r3, #96	; 0x60
 8007606:	d008      	beq.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b70      	cmp	r3, #112	; 0x70
 800760e:	d004      	beq.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007610:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8007614:	4812      	ldr	r0, [pc, #72]	; (8007660 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007616:	f7fa f996 	bl	8001946 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	2b80      	cmp	r3, #128	; 0x80
 8007620:	d008      	beq.n	8007634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d004      	beq.n	8007634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800762a:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 800762e:	480c      	ldr	r0, [pc, #48]	; (8007660 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007630:	f7fa f989 	bl	8001946 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800763a:	2b01      	cmp	r3, #1
 800763c:	d112      	bne.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800763e:	2302      	movs	r3, #2
 8007640:	e0d7      	b.n	80077f2 <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8007642:	bf00      	nop
 8007644:	40010000 	.word	0x40010000
 8007648:	40000400 	.word	0x40000400
 800764c:	40000800 	.word	0x40000800
 8007650:	40000c00 	.word	0x40000c00
 8007654:	40001000 	.word	0x40001000
 8007658:	40001400 	.word	0x40001400
 800765c:	40010400 	.word	0x40010400
 8007660:	08012d14 	.word	0x08012d14
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a5c      	ldr	r2, [pc, #368]	; (80077fc <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d004      	beq.n	8007698 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a5b      	ldr	r2, [pc, #364]	; (8007800 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d161      	bne.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d054      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076a8:	d04f      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076b2:	d04a      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076bc:	d045      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076c6:	d040      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80076d0:	d03b      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076da:	d036      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076e4:	d031      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80076ee:	d02c      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076f8:	d027      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8007702:	d022      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800770c:	d01d      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8007716:	d018      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007720:	d013      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 800772a:	d00e      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8007734:	d009      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 800773e:	d004      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007740:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8007744:	482f      	ldr	r0, [pc, #188]	; (8007804 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8007746:	f7fa f8fe 	bl	8001946 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007750:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4313      	orrs	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007762:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a20      	ldr	r2, [pc, #128]	; (80077fc <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d022      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007788:	d01d      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a1e      	ldr	r2, [pc, #120]	; (8007808 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d018      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1c      	ldr	r2, [pc, #112]	; (800780c <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d013      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1b      	ldr	r2, [pc, #108]	; (8007810 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d00e      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a14      	ldr	r2, [pc, #80]	; (8007800 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d009      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a17      	ldr	r2, [pc, #92]	; (8007814 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d004      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a15      	ldr	r2, [pc, #84]	; (8007818 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d10c      	bne.n	80077e0 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	40010000 	.word	0x40010000
 8007800:	40010400 	.word	0x40010400
 8007804:	08012d14 	.word	0x08012d14
 8007808:	40000400 	.word	0x40000400
 800780c:	40000800 	.word	0x40000800
 8007810:	40000c00 	.word	0x40000c00
 8007814:	40014000 	.word	0x40014000
 8007818:	40001800 	.word	0x40001800

0800781c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e09f      	b.n	80079aa <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d02d      	beq.n	80078ce <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a4f      	ldr	r2, [pc, #316]	; (80079b4 <HAL_UART_Init+0x15c>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d055      	beq.n	8007928 <HAL_UART_Init+0xd0>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a4d      	ldr	r2, [pc, #308]	; (80079b8 <HAL_UART_Init+0x160>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d050      	beq.n	8007928 <HAL_UART_Init+0xd0>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a4c      	ldr	r2, [pc, #304]	; (80079bc <HAL_UART_Init+0x164>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d04b      	beq.n	8007928 <HAL_UART_Init+0xd0>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a4a      	ldr	r2, [pc, #296]	; (80079c0 <HAL_UART_Init+0x168>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d046      	beq.n	8007928 <HAL_UART_Init+0xd0>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a49      	ldr	r2, [pc, #292]	; (80079c4 <HAL_UART_Init+0x16c>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d041      	beq.n	8007928 <HAL_UART_Init+0xd0>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a47      	ldr	r2, [pc, #284]	; (80079c8 <HAL_UART_Init+0x170>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d03c      	beq.n	8007928 <HAL_UART_Init+0xd0>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a46      	ldr	r2, [pc, #280]	; (80079cc <HAL_UART_Init+0x174>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d037      	beq.n	8007928 <HAL_UART_Init+0xd0>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a44      	ldr	r2, [pc, #272]	; (80079d0 <HAL_UART_Init+0x178>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d032      	beq.n	8007928 <HAL_UART_Init+0xd0>
 80078c2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80078c6:	4843      	ldr	r0, [pc, #268]	; (80079d4 <HAL_UART_Init+0x17c>)
 80078c8:	f7fa f83d 	bl	8001946 <assert_failed>
 80078cc:	e02c      	b.n	8007928 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a38      	ldr	r2, [pc, #224]	; (80079b4 <HAL_UART_Init+0x15c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d027      	beq.n	8007928 <HAL_UART_Init+0xd0>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a36      	ldr	r2, [pc, #216]	; (80079b8 <HAL_UART_Init+0x160>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d022      	beq.n	8007928 <HAL_UART_Init+0xd0>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a35      	ldr	r2, [pc, #212]	; (80079bc <HAL_UART_Init+0x164>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d01d      	beq.n	8007928 <HAL_UART_Init+0xd0>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a33      	ldr	r2, [pc, #204]	; (80079c0 <HAL_UART_Init+0x168>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d018      	beq.n	8007928 <HAL_UART_Init+0xd0>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a32      	ldr	r2, [pc, #200]	; (80079c4 <HAL_UART_Init+0x16c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d013      	beq.n	8007928 <HAL_UART_Init+0xd0>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a30      	ldr	r2, [pc, #192]	; (80079c8 <HAL_UART_Init+0x170>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00e      	beq.n	8007928 <HAL_UART_Init+0xd0>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a2f      	ldr	r2, [pc, #188]	; (80079cc <HAL_UART_Init+0x174>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d009      	beq.n	8007928 <HAL_UART_Init+0xd0>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a2d      	ldr	r2, [pc, #180]	; (80079d0 <HAL_UART_Init+0x178>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d004      	beq.n	8007928 <HAL_UART_Init+0xd0>
 800791e:	f240 1131 	movw	r1, #305	; 0x131
 8007922:	482c      	ldr	r0, [pc, #176]	; (80079d4 <HAL_UART_Init+0x17c>)
 8007924:	f7fa f80f 	bl	8001946 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d106      	bne.n	800793e <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7fa fa9d 	bl	8001e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2224      	movs	r2, #36	; 0x24
 8007942:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f022 0201 	bic.w	r2, r2, #1
 8007952:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fbf9 	bl	800814c <UART_SetConfig>
 800795a:	4603      	mov	r3, r0
 800795c:	2b01      	cmp	r3, #1
 800795e:	d101      	bne.n	8007964 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e022      	b.n	80079aa <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fee3 	bl	8008738 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007980:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007990:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f042 0201 	orr.w	r2, r2, #1
 80079a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 f820 	bl	80089e8 <UART_CheckIdleState>
 80079a8:	4603      	mov	r3, r0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	40011000 	.word	0x40011000
 80079b8:	40004400 	.word	0x40004400
 80079bc:	40004800 	.word	0x40004800
 80079c0:	40004c00 	.word	0x40004c00
 80079c4:	40005000 	.word	0x40005000
 80079c8:	40011400 	.word	0x40011400
 80079cc:	40007800 	.word	0x40007800
 80079d0:	40007c00 	.word	0x40007c00
 80079d4:	08012d50 	.word	0x08012d50

080079d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b08a      	sub	sp, #40	; 0x28
 80079dc:	af02      	add	r7, sp, #8
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	603b      	str	r3, [r7, #0]
 80079e4:	4613      	mov	r3, r2
 80079e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	d171      	bne.n	8007ad4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <HAL_UART_Transmit+0x24>
 80079f6:	88fb      	ldrh	r3, [r7, #6]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e06a      	b.n	8007ad6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2221      	movs	r2, #33	; 0x21
 8007a0c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a0e:	f7fa fb2f 	bl	8002070 <HAL_GetTick>
 8007a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	88fa      	ldrh	r2, [r7, #6]
 8007a18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	88fa      	ldrh	r2, [r7, #6]
 8007a20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a2c:	d108      	bne.n	8007a40 <HAL_UART_Transmit+0x68>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d104      	bne.n	8007a40 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	61bb      	str	r3, [r7, #24]
 8007a3e:	e003      	b.n	8007a48 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a44:	2300      	movs	r3, #0
 8007a46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a48:	e02c      	b.n	8007aa4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2200      	movs	r2, #0
 8007a52:	2180      	movs	r1, #128	; 0x80
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 fffe 	bl	8008a56 <UART_WaitOnFlagUntilTimeout>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e038      	b.n	8007ad6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10b      	bne.n	8007a82 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	3302      	adds	r3, #2
 8007a7e:	61bb      	str	r3, [r7, #24]
 8007a80:	e007      	b.n	8007a92 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	781a      	ldrb	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1cc      	bne.n	8007a4a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2140      	movs	r1, #64	; 0x40
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 ffcb 	bl	8008a56 <UART_WaitOnFlagUntilTimeout>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e005      	b.n	8007ad6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2220      	movs	r2, #32
 8007ace:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	e000      	b.n	8007ad6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007ad4:	2302      	movs	r3, #2
  }
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3720      	adds	r7, #32
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b08a      	sub	sp, #40	; 0x28
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	60f8      	str	r0, [r7, #12]
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007af2:	2b20      	cmp	r3, #32
 8007af4:	d132      	bne.n	8007b5c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <HAL_UART_Receive_IT+0x24>
 8007afc:	88fb      	ldrh	r3, [r7, #6]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e02b      	b.n	8007b5e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d018      	beq.n	8007b4c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	e853 3f00 	ldrex	r3, [r3]
 8007b26:	613b      	str	r3, [r7, #16]
   return(result);
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	461a      	mov	r2, r3
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	623b      	str	r3, [r7, #32]
 8007b3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3c:	69f9      	ldr	r1, [r7, #28]
 8007b3e:	6a3a      	ldr	r2, [r7, #32]
 8007b40:	e841 2300 	strex	r3, r2, [r1]
 8007b44:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1e6      	bne.n	8007b1a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b4c:	88fb      	ldrh	r3, [r7, #6]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	68b9      	ldr	r1, [r7, #8]
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f001 f846 	bl	8008be4 <UART_Start_Receive_IT>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	e000      	b.n	8007b5e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007b5c:	2302      	movs	r3, #2
  }
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3728      	adds	r7, #40	; 0x28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b0ba      	sub	sp, #232	; 0xe8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007b92:	f640 030f 	movw	r3, #2063	; 0x80f
 8007b96:	4013      	ands	r3, r2
 8007b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d115      	bne.n	8007bd0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba8:	f003 0320 	and.w	r3, r3, #32
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00f      	beq.n	8007bd0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb4:	f003 0320 	and.w	r3, r3, #32
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d009      	beq.n	8007bd0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 8297 	beq.w	80080f4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	4798      	blx	r3
      }
      return;
 8007bce:	e291      	b.n	80080f4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 8117 	beq.w	8007e08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d106      	bne.n	8007bf4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007be6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007bea:	4b85      	ldr	r3, [pc, #532]	; (8007e00 <HAL_UART_IRQHandler+0x298>)
 8007bec:	4013      	ands	r3, r2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f000 810a 	beq.w	8007e08 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d011      	beq.n	8007c24 <HAL_UART_IRQHandler+0xbc>
 8007c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00b      	beq.n	8007c24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2201      	movs	r2, #1
 8007c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c1a:	f043 0201 	orr.w	r2, r3, #1
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d011      	beq.n	8007c54 <HAL_UART_IRQHandler+0xec>
 8007c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00b      	beq.n	8007c54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2202      	movs	r2, #2
 8007c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c4a:	f043 0204 	orr.w	r2, r3, #4
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c58:	f003 0304 	and.w	r3, r3, #4
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d011      	beq.n	8007c84 <HAL_UART_IRQHandler+0x11c>
 8007c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00b      	beq.n	8007c84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2204      	movs	r2, #4
 8007c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c7a:	f043 0202 	orr.w	r2, r3, #2
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c88:	f003 0308 	and.w	r3, r3, #8
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d017      	beq.n	8007cc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d105      	bne.n	8007ca8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ca0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2208      	movs	r2, #8
 8007cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cb6:	f043 0208 	orr.w	r2, r3, #8
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d012      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x18a>
 8007ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00c      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ce0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ce8:	f043 0220 	orr.w	r2, r3, #32
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 81fd 	beq.w	80080f8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d02:	f003 0320 	and.w	r3, r3, #32
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00d      	beq.n	8007d26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d0e:	f003 0320 	and.w	r3, r3, #32
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d007      	beq.n	8007d26 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3a:	2b40      	cmp	r3, #64	; 0x40
 8007d3c:	d005      	beq.n	8007d4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d04f      	beq.n	8007dea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f001 f810 	bl	8008d70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5a:	2b40      	cmp	r3, #64	; 0x40
 8007d5c:	d141      	bne.n	8007de2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3308      	adds	r3, #8
 8007d64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d6c:	e853 3f00 	ldrex	r3, [r3]
 8007d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3308      	adds	r3, #8
 8007d86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1d9      	bne.n	8007d5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d013      	beq.n	8007dda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007db6:	4a13      	ldr	r2, [pc, #76]	; (8007e04 <HAL_UART_IRQHandler+0x29c>)
 8007db8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fa fb36 	bl	8002430 <HAL_DMA_Abort_IT>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d017      	beq.n	8007dfa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd8:	e00f      	b.n	8007dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f9a0 	bl	8008120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007de0:	e00b      	b.n	8007dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f99c 	bl	8008120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007de8:	e007      	b.n	8007dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f998 	bl	8008120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007df8:	e17e      	b.n	80080f8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dfa:	bf00      	nop
    return;
 8007dfc:	e17c      	b.n	80080f8 <HAL_UART_IRQHandler+0x590>
 8007dfe:	bf00      	nop
 8007e00:	04000120 	.word	0x04000120
 8007e04:	08008e39 	.word	0x08008e39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	f040 814c 	bne.w	80080aa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e16:	f003 0310 	and.w	r3, r3, #16
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 8145 	beq.w	80080aa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e24:	f003 0310 	and.w	r3, r3, #16
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 813e 	beq.w	80080aa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2210      	movs	r2, #16
 8007e34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e40:	2b40      	cmp	r3, #64	; 0x40
 8007e42:	f040 80b6 	bne.w	8007fb2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 8150 	beq.w	80080fc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e66:	429a      	cmp	r2, r3
 8007e68:	f080 8148 	bcs.w	80080fc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e80:	f000 8086 	beq.w	8007f90 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e90:	e853 3f00 	ldrex	r3, [r3]
 8007e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007eae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007eb2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007eba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ebe:	e841 2300 	strex	r3, r2, [r1]
 8007ec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1da      	bne.n	8007e84 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ee0:	f023 0301 	bic.w	r3, r3, #1
 8007ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3308      	adds	r3, #8
 8007eee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ef2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ef6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007efa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007efe:	e841 2300 	strex	r3, r2, [r1]
 8007f02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e1      	bne.n	8007ece <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3308      	adds	r3, #8
 8007f10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3308      	adds	r3, #8
 8007f2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f36:	e841 2300 	strex	r3, r2, [r1]
 8007f3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e3      	bne.n	8007f0a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f60:	f023 0310 	bic.w	r3, r3, #16
 8007f64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f72:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e4      	bne.n	8007f50 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fa f9e0 	bl	8002350 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f8c2 	bl	8008134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007fb0:	e0a4      	b.n	80080fc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 8096 	beq.w	8008100 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 8091 	beq.w	8008100 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	e853 3f00 	ldrex	r3, [r3]
 8007fea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ff2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008000:	647b      	str	r3, [r7, #68]	; 0x44
 8008002:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008004:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008008:	e841 2300 	strex	r3, r2, [r1]
 800800c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800800e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1e4      	bne.n	8007fde <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3308      	adds	r3, #8
 800801a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	623b      	str	r3, [r7, #32]
   return(result);
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	f023 0301 	bic.w	r3, r3, #1
 800802a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3308      	adds	r3, #8
 8008034:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008038:	633a      	str	r2, [r7, #48]	; 0x30
 800803a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800803e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008040:	e841 2300 	strex	r3, r2, [r1]
 8008044:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e3      	bne.n	8008014 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2220      	movs	r2, #32
 8008050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	e853 3f00 	ldrex	r3, [r3]
 800806c:	60fb      	str	r3, [r7, #12]
   return(result);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f023 0310 	bic.w	r3, r3, #16
 8008074:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	461a      	mov	r2, r3
 800807e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008082:	61fb      	str	r3, [r7, #28]
 8008084:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008086:	69b9      	ldr	r1, [r7, #24]
 8008088:	69fa      	ldr	r2, [r7, #28]
 800808a:	e841 2300 	strex	r3, r2, [r1]
 800808e:	617b      	str	r3, [r7, #20]
   return(result);
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1e4      	bne.n	8008060 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2202      	movs	r2, #2
 800809a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800809c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f846 	bl	8008134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080a8:	e02a      	b.n	8008100 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80080aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00e      	beq.n	80080d4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80080b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d008      	beq.n	80080d4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d01c      	beq.n	8008104 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	4798      	blx	r3
    }
    return;
 80080d2:	e017      	b.n	8008104 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80080d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d012      	beq.n	8008106 <HAL_UART_IRQHandler+0x59e>
 80080e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00c      	beq.n	8008106 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 feb9 	bl	8008e64 <UART_EndTransmit_IT>
    return;
 80080f2:	e008      	b.n	8008106 <HAL_UART_IRQHandler+0x59e>
      return;
 80080f4:	bf00      	nop
 80080f6:	e006      	b.n	8008106 <HAL_UART_IRQHandler+0x59e>
    return;
 80080f8:	bf00      	nop
 80080fa:	e004      	b.n	8008106 <HAL_UART_IRQHandler+0x59e>
      return;
 80080fc:	bf00      	nop
 80080fe:	e002      	b.n	8008106 <HAL_UART_IRQHandler+0x59e>
      return;
 8008100:	bf00      	nop
 8008102:	e000      	b.n	8008106 <HAL_UART_IRQHandler+0x59e>
    return;
 8008104:	bf00      	nop
  }

}
 8008106:	37e8      	adds	r7, #232	; 0xe8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	460b      	mov	r3, r1
 800813e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	4aa0      	ldr	r2, [pc, #640]	; (80083e0 <UART_SetConfig+0x294>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d904      	bls.n	800816c <UART_SetConfig+0x20>
 8008162:	f640 315d 	movw	r1, #2909	; 0xb5d
 8008166:	489f      	ldr	r0, [pc, #636]	; (80083e4 <UART_SetConfig+0x298>)
 8008168:	f7f9 fbed 	bl	8001946 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008174:	d00d      	beq.n	8008192 <UART_SetConfig+0x46>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d009      	beq.n	8008192 <UART_SetConfig+0x46>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008186:	d004      	beq.n	8008192 <UART_SetConfig+0x46>
 8008188:	f640 315e 	movw	r1, #2910	; 0xb5e
 800818c:	4895      	ldr	r0, [pc, #596]	; (80083e4 <UART_SetConfig+0x298>)
 800818e:	f7f9 fbda 	bl	8001946 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800819a:	d012      	beq.n	80081c2 <UART_SetConfig+0x76>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00e      	beq.n	80081c2 <UART_SetConfig+0x76>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081ac:	d009      	beq.n	80081c2 <UART_SetConfig+0x76>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081b6:	d004      	beq.n	80081c2 <UART_SetConfig+0x76>
 80081b8:	f640 315f 	movw	r1, #2911	; 0xb5f
 80081bc:	4889      	ldr	r0, [pc, #548]	; (80083e4 <UART_SetConfig+0x298>)
 80081be:	f7f9 fbc2 	bl	8001946 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d009      	beq.n	80081de <UART_SetConfig+0x92>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081d2:	d004      	beq.n	80081de <UART_SetConfig+0x92>
 80081d4:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 80081d8:	4882      	ldr	r0, [pc, #520]	; (80083e4 <UART_SetConfig+0x298>)
 80081da:	f7f9 fbb4 	bl	8001946 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00e      	beq.n	8008204 <UART_SetConfig+0xb8>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ee:	d009      	beq.n	8008204 <UART_SetConfig+0xb8>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80081f8:	d004      	beq.n	8008204 <UART_SetConfig+0xb8>
 80081fa:	f640 3162 	movw	r1, #2914	; 0xb62
 80081fe:	4879      	ldr	r0, [pc, #484]	; (80083e4 <UART_SetConfig+0x298>)
 8008200:	f7f9 fba1 	bl	8001946 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	f023 030c 	bic.w	r3, r3, #12
 800820c:	2b00      	cmp	r3, #0
 800820e:	d103      	bne.n	8008218 <UART_SetConfig+0xcc>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	695b      	ldr	r3, [r3, #20]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d104      	bne.n	8008222 <UART_SetConfig+0xd6>
 8008218:	f640 3163 	movw	r1, #2915	; 0xb63
 800821c:	4871      	ldr	r0, [pc, #452]	; (80083e4 <UART_SetConfig+0x298>)
 800821e:	f7f9 fb92 	bl	8001946 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d013      	beq.n	8008252 <UART_SetConfig+0x106>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008232:	d00e      	beq.n	8008252 <UART_SetConfig+0x106>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800823c:	d009      	beq.n	8008252 <UART_SetConfig+0x106>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008246:	d004      	beq.n	8008252 <UART_SetConfig+0x106>
 8008248:	f640 3164 	movw	r1, #2916	; 0xb64
 800824c:	4865      	ldr	r0, [pc, #404]	; (80083e4 <UART_SetConfig+0x298>)
 800824e:	f7f9 fb7a 	bl	8001946 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d009      	beq.n	800826e <UART_SetConfig+0x122>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008262:	d004      	beq.n	800826e <UART_SetConfig+0x122>
 8008264:	f640 3165 	movw	r1, #2917	; 0xb65
 8008268:	485e      	ldr	r0, [pc, #376]	; (80083e4 <UART_SetConfig+0x298>)
 800826a:	f7f9 fb6c 	bl	8001946 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	431a      	orrs	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	431a      	orrs	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	4313      	orrs	r3, r2
 8008284:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	4b56      	ldr	r3, [pc, #344]	; (80083e8 <UART_SetConfig+0x29c>)
 800828e:	4013      	ands	r3, r2
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	6812      	ldr	r2, [r2, #0]
 8008294:	6979      	ldr	r1, [r7, #20]
 8008296:	430b      	orrs	r3, r1
 8008298:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68da      	ldr	r2, [r3, #12]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	430a      	orrs	r2, r1
 80082ae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	4313      	orrs	r3, r2
 80082be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	430a      	orrs	r2, r1
 80082d2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a44      	ldr	r2, [pc, #272]	; (80083ec <UART_SetConfig+0x2a0>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d121      	bne.n	8008322 <UART_SetConfig+0x1d6>
 80082de:	4b44      	ldr	r3, [pc, #272]	; (80083f0 <UART_SetConfig+0x2a4>)
 80082e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e4:	f003 0303 	and.w	r3, r3, #3
 80082e8:	2b03      	cmp	r3, #3
 80082ea:	d817      	bhi.n	800831c <UART_SetConfig+0x1d0>
 80082ec:	a201      	add	r2, pc, #4	; (adr r2, 80082f4 <UART_SetConfig+0x1a8>)
 80082ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f2:	bf00      	nop
 80082f4:	08008305 	.word	0x08008305
 80082f8:	08008311 	.word	0x08008311
 80082fc:	0800830b 	.word	0x0800830b
 8008300:	08008317 	.word	0x08008317
 8008304:	2301      	movs	r3, #1
 8008306:	77fb      	strb	r3, [r7, #31]
 8008308:	e14c      	b.n	80085a4 <UART_SetConfig+0x458>
 800830a:	2302      	movs	r3, #2
 800830c:	77fb      	strb	r3, [r7, #31]
 800830e:	e149      	b.n	80085a4 <UART_SetConfig+0x458>
 8008310:	2304      	movs	r3, #4
 8008312:	77fb      	strb	r3, [r7, #31]
 8008314:	e146      	b.n	80085a4 <UART_SetConfig+0x458>
 8008316:	2308      	movs	r3, #8
 8008318:	77fb      	strb	r3, [r7, #31]
 800831a:	e143      	b.n	80085a4 <UART_SetConfig+0x458>
 800831c:	2310      	movs	r3, #16
 800831e:	77fb      	strb	r3, [r7, #31]
 8008320:	e140      	b.n	80085a4 <UART_SetConfig+0x458>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a33      	ldr	r2, [pc, #204]	; (80083f4 <UART_SetConfig+0x2a8>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d132      	bne.n	8008392 <UART_SetConfig+0x246>
 800832c:	4b30      	ldr	r3, [pc, #192]	; (80083f0 <UART_SetConfig+0x2a4>)
 800832e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008332:	f003 030c 	and.w	r3, r3, #12
 8008336:	2b0c      	cmp	r3, #12
 8008338:	d828      	bhi.n	800838c <UART_SetConfig+0x240>
 800833a:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <UART_SetConfig+0x1f4>)
 800833c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008340:	08008375 	.word	0x08008375
 8008344:	0800838d 	.word	0x0800838d
 8008348:	0800838d 	.word	0x0800838d
 800834c:	0800838d 	.word	0x0800838d
 8008350:	08008381 	.word	0x08008381
 8008354:	0800838d 	.word	0x0800838d
 8008358:	0800838d 	.word	0x0800838d
 800835c:	0800838d 	.word	0x0800838d
 8008360:	0800837b 	.word	0x0800837b
 8008364:	0800838d 	.word	0x0800838d
 8008368:	0800838d 	.word	0x0800838d
 800836c:	0800838d 	.word	0x0800838d
 8008370:	08008387 	.word	0x08008387
 8008374:	2300      	movs	r3, #0
 8008376:	77fb      	strb	r3, [r7, #31]
 8008378:	e114      	b.n	80085a4 <UART_SetConfig+0x458>
 800837a:	2302      	movs	r3, #2
 800837c:	77fb      	strb	r3, [r7, #31]
 800837e:	e111      	b.n	80085a4 <UART_SetConfig+0x458>
 8008380:	2304      	movs	r3, #4
 8008382:	77fb      	strb	r3, [r7, #31]
 8008384:	e10e      	b.n	80085a4 <UART_SetConfig+0x458>
 8008386:	2308      	movs	r3, #8
 8008388:	77fb      	strb	r3, [r7, #31]
 800838a:	e10b      	b.n	80085a4 <UART_SetConfig+0x458>
 800838c:	2310      	movs	r3, #16
 800838e:	77fb      	strb	r3, [r7, #31]
 8008390:	e108      	b.n	80085a4 <UART_SetConfig+0x458>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a18      	ldr	r2, [pc, #96]	; (80083f8 <UART_SetConfig+0x2ac>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d12f      	bne.n	80083fc <UART_SetConfig+0x2b0>
 800839c:	4b14      	ldr	r3, [pc, #80]	; (80083f0 <UART_SetConfig+0x2a4>)
 800839e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80083a6:	2b30      	cmp	r3, #48	; 0x30
 80083a8:	d013      	beq.n	80083d2 <UART_SetConfig+0x286>
 80083aa:	2b30      	cmp	r3, #48	; 0x30
 80083ac:	d814      	bhi.n	80083d8 <UART_SetConfig+0x28c>
 80083ae:	2b20      	cmp	r3, #32
 80083b0:	d009      	beq.n	80083c6 <UART_SetConfig+0x27a>
 80083b2:	2b20      	cmp	r3, #32
 80083b4:	d810      	bhi.n	80083d8 <UART_SetConfig+0x28c>
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d002      	beq.n	80083c0 <UART_SetConfig+0x274>
 80083ba:	2b10      	cmp	r3, #16
 80083bc:	d006      	beq.n	80083cc <UART_SetConfig+0x280>
 80083be:	e00b      	b.n	80083d8 <UART_SetConfig+0x28c>
 80083c0:	2300      	movs	r3, #0
 80083c2:	77fb      	strb	r3, [r7, #31]
 80083c4:	e0ee      	b.n	80085a4 <UART_SetConfig+0x458>
 80083c6:	2302      	movs	r3, #2
 80083c8:	77fb      	strb	r3, [r7, #31]
 80083ca:	e0eb      	b.n	80085a4 <UART_SetConfig+0x458>
 80083cc:	2304      	movs	r3, #4
 80083ce:	77fb      	strb	r3, [r7, #31]
 80083d0:	e0e8      	b.n	80085a4 <UART_SetConfig+0x458>
 80083d2:	2308      	movs	r3, #8
 80083d4:	77fb      	strb	r3, [r7, #31]
 80083d6:	e0e5      	b.n	80085a4 <UART_SetConfig+0x458>
 80083d8:	2310      	movs	r3, #16
 80083da:	77fb      	strb	r3, [r7, #31]
 80083dc:	e0e2      	b.n	80085a4 <UART_SetConfig+0x458>
 80083de:	bf00      	nop
 80083e0:	019bfcc0 	.word	0x019bfcc0
 80083e4:	08012d50 	.word	0x08012d50
 80083e8:	efff69f3 	.word	0xefff69f3
 80083ec:	40011000 	.word	0x40011000
 80083f0:	40023800 	.word	0x40023800
 80083f4:	40004400 	.word	0x40004400
 80083f8:	40004800 	.word	0x40004800
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4aa5      	ldr	r2, [pc, #660]	; (8008698 <UART_SetConfig+0x54c>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d120      	bne.n	8008448 <UART_SetConfig+0x2fc>
 8008406:	4ba5      	ldr	r3, [pc, #660]	; (800869c <UART_SetConfig+0x550>)
 8008408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800840c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008410:	2bc0      	cmp	r3, #192	; 0xc0
 8008412:	d013      	beq.n	800843c <UART_SetConfig+0x2f0>
 8008414:	2bc0      	cmp	r3, #192	; 0xc0
 8008416:	d814      	bhi.n	8008442 <UART_SetConfig+0x2f6>
 8008418:	2b80      	cmp	r3, #128	; 0x80
 800841a:	d009      	beq.n	8008430 <UART_SetConfig+0x2e4>
 800841c:	2b80      	cmp	r3, #128	; 0x80
 800841e:	d810      	bhi.n	8008442 <UART_SetConfig+0x2f6>
 8008420:	2b00      	cmp	r3, #0
 8008422:	d002      	beq.n	800842a <UART_SetConfig+0x2de>
 8008424:	2b40      	cmp	r3, #64	; 0x40
 8008426:	d006      	beq.n	8008436 <UART_SetConfig+0x2ea>
 8008428:	e00b      	b.n	8008442 <UART_SetConfig+0x2f6>
 800842a:	2300      	movs	r3, #0
 800842c:	77fb      	strb	r3, [r7, #31]
 800842e:	e0b9      	b.n	80085a4 <UART_SetConfig+0x458>
 8008430:	2302      	movs	r3, #2
 8008432:	77fb      	strb	r3, [r7, #31]
 8008434:	e0b6      	b.n	80085a4 <UART_SetConfig+0x458>
 8008436:	2304      	movs	r3, #4
 8008438:	77fb      	strb	r3, [r7, #31]
 800843a:	e0b3      	b.n	80085a4 <UART_SetConfig+0x458>
 800843c:	2308      	movs	r3, #8
 800843e:	77fb      	strb	r3, [r7, #31]
 8008440:	e0b0      	b.n	80085a4 <UART_SetConfig+0x458>
 8008442:	2310      	movs	r3, #16
 8008444:	77fb      	strb	r3, [r7, #31]
 8008446:	e0ad      	b.n	80085a4 <UART_SetConfig+0x458>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a94      	ldr	r2, [pc, #592]	; (80086a0 <UART_SetConfig+0x554>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d125      	bne.n	800849e <UART_SetConfig+0x352>
 8008452:	4b92      	ldr	r3, [pc, #584]	; (800869c <UART_SetConfig+0x550>)
 8008454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800845c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008460:	d017      	beq.n	8008492 <UART_SetConfig+0x346>
 8008462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008466:	d817      	bhi.n	8008498 <UART_SetConfig+0x34c>
 8008468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800846c:	d00b      	beq.n	8008486 <UART_SetConfig+0x33a>
 800846e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008472:	d811      	bhi.n	8008498 <UART_SetConfig+0x34c>
 8008474:	2b00      	cmp	r3, #0
 8008476:	d003      	beq.n	8008480 <UART_SetConfig+0x334>
 8008478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800847c:	d006      	beq.n	800848c <UART_SetConfig+0x340>
 800847e:	e00b      	b.n	8008498 <UART_SetConfig+0x34c>
 8008480:	2300      	movs	r3, #0
 8008482:	77fb      	strb	r3, [r7, #31]
 8008484:	e08e      	b.n	80085a4 <UART_SetConfig+0x458>
 8008486:	2302      	movs	r3, #2
 8008488:	77fb      	strb	r3, [r7, #31]
 800848a:	e08b      	b.n	80085a4 <UART_SetConfig+0x458>
 800848c:	2304      	movs	r3, #4
 800848e:	77fb      	strb	r3, [r7, #31]
 8008490:	e088      	b.n	80085a4 <UART_SetConfig+0x458>
 8008492:	2308      	movs	r3, #8
 8008494:	77fb      	strb	r3, [r7, #31]
 8008496:	e085      	b.n	80085a4 <UART_SetConfig+0x458>
 8008498:	2310      	movs	r3, #16
 800849a:	77fb      	strb	r3, [r7, #31]
 800849c:	e082      	b.n	80085a4 <UART_SetConfig+0x458>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a80      	ldr	r2, [pc, #512]	; (80086a4 <UART_SetConfig+0x558>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d125      	bne.n	80084f4 <UART_SetConfig+0x3a8>
 80084a8:	4b7c      	ldr	r3, [pc, #496]	; (800869c <UART_SetConfig+0x550>)
 80084aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80084b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084b6:	d017      	beq.n	80084e8 <UART_SetConfig+0x39c>
 80084b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084bc:	d817      	bhi.n	80084ee <UART_SetConfig+0x3a2>
 80084be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084c2:	d00b      	beq.n	80084dc <UART_SetConfig+0x390>
 80084c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084c8:	d811      	bhi.n	80084ee <UART_SetConfig+0x3a2>
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d003      	beq.n	80084d6 <UART_SetConfig+0x38a>
 80084ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d2:	d006      	beq.n	80084e2 <UART_SetConfig+0x396>
 80084d4:	e00b      	b.n	80084ee <UART_SetConfig+0x3a2>
 80084d6:	2301      	movs	r3, #1
 80084d8:	77fb      	strb	r3, [r7, #31]
 80084da:	e063      	b.n	80085a4 <UART_SetConfig+0x458>
 80084dc:	2302      	movs	r3, #2
 80084de:	77fb      	strb	r3, [r7, #31]
 80084e0:	e060      	b.n	80085a4 <UART_SetConfig+0x458>
 80084e2:	2304      	movs	r3, #4
 80084e4:	77fb      	strb	r3, [r7, #31]
 80084e6:	e05d      	b.n	80085a4 <UART_SetConfig+0x458>
 80084e8:	2308      	movs	r3, #8
 80084ea:	77fb      	strb	r3, [r7, #31]
 80084ec:	e05a      	b.n	80085a4 <UART_SetConfig+0x458>
 80084ee:	2310      	movs	r3, #16
 80084f0:	77fb      	strb	r3, [r7, #31]
 80084f2:	e057      	b.n	80085a4 <UART_SetConfig+0x458>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a6b      	ldr	r2, [pc, #428]	; (80086a8 <UART_SetConfig+0x55c>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d125      	bne.n	800854a <UART_SetConfig+0x3fe>
 80084fe:	4b67      	ldr	r3, [pc, #412]	; (800869c <UART_SetConfig+0x550>)
 8008500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008504:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008508:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800850c:	d017      	beq.n	800853e <UART_SetConfig+0x3f2>
 800850e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008512:	d817      	bhi.n	8008544 <UART_SetConfig+0x3f8>
 8008514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008518:	d00b      	beq.n	8008532 <UART_SetConfig+0x3e6>
 800851a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800851e:	d811      	bhi.n	8008544 <UART_SetConfig+0x3f8>
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <UART_SetConfig+0x3e0>
 8008524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008528:	d006      	beq.n	8008538 <UART_SetConfig+0x3ec>
 800852a:	e00b      	b.n	8008544 <UART_SetConfig+0x3f8>
 800852c:	2300      	movs	r3, #0
 800852e:	77fb      	strb	r3, [r7, #31]
 8008530:	e038      	b.n	80085a4 <UART_SetConfig+0x458>
 8008532:	2302      	movs	r3, #2
 8008534:	77fb      	strb	r3, [r7, #31]
 8008536:	e035      	b.n	80085a4 <UART_SetConfig+0x458>
 8008538:	2304      	movs	r3, #4
 800853a:	77fb      	strb	r3, [r7, #31]
 800853c:	e032      	b.n	80085a4 <UART_SetConfig+0x458>
 800853e:	2308      	movs	r3, #8
 8008540:	77fb      	strb	r3, [r7, #31]
 8008542:	e02f      	b.n	80085a4 <UART_SetConfig+0x458>
 8008544:	2310      	movs	r3, #16
 8008546:	77fb      	strb	r3, [r7, #31]
 8008548:	e02c      	b.n	80085a4 <UART_SetConfig+0x458>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a57      	ldr	r2, [pc, #348]	; (80086ac <UART_SetConfig+0x560>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d125      	bne.n	80085a0 <UART_SetConfig+0x454>
 8008554:	4b51      	ldr	r3, [pc, #324]	; (800869c <UART_SetConfig+0x550>)
 8008556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800855a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800855e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008562:	d017      	beq.n	8008594 <UART_SetConfig+0x448>
 8008564:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008568:	d817      	bhi.n	800859a <UART_SetConfig+0x44e>
 800856a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800856e:	d00b      	beq.n	8008588 <UART_SetConfig+0x43c>
 8008570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008574:	d811      	bhi.n	800859a <UART_SetConfig+0x44e>
 8008576:	2b00      	cmp	r3, #0
 8008578:	d003      	beq.n	8008582 <UART_SetConfig+0x436>
 800857a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800857e:	d006      	beq.n	800858e <UART_SetConfig+0x442>
 8008580:	e00b      	b.n	800859a <UART_SetConfig+0x44e>
 8008582:	2300      	movs	r3, #0
 8008584:	77fb      	strb	r3, [r7, #31]
 8008586:	e00d      	b.n	80085a4 <UART_SetConfig+0x458>
 8008588:	2302      	movs	r3, #2
 800858a:	77fb      	strb	r3, [r7, #31]
 800858c:	e00a      	b.n	80085a4 <UART_SetConfig+0x458>
 800858e:	2304      	movs	r3, #4
 8008590:	77fb      	strb	r3, [r7, #31]
 8008592:	e007      	b.n	80085a4 <UART_SetConfig+0x458>
 8008594:	2308      	movs	r3, #8
 8008596:	77fb      	strb	r3, [r7, #31]
 8008598:	e004      	b.n	80085a4 <UART_SetConfig+0x458>
 800859a:	2310      	movs	r3, #16
 800859c:	77fb      	strb	r3, [r7, #31]
 800859e:	e001      	b.n	80085a4 <UART_SetConfig+0x458>
 80085a0:	2310      	movs	r3, #16
 80085a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	69db      	ldr	r3, [r3, #28]
 80085a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085ac:	d15c      	bne.n	8008668 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 80085ae:	7ffb      	ldrb	r3, [r7, #31]
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d828      	bhi.n	8008606 <UART_SetConfig+0x4ba>
 80085b4:	a201      	add	r2, pc, #4	; (adr r2, 80085bc <UART_SetConfig+0x470>)
 80085b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ba:	bf00      	nop
 80085bc:	080085e1 	.word	0x080085e1
 80085c0:	080085e9 	.word	0x080085e9
 80085c4:	080085f1 	.word	0x080085f1
 80085c8:	08008607 	.word	0x08008607
 80085cc:	080085f7 	.word	0x080085f7
 80085d0:	08008607 	.word	0x08008607
 80085d4:	08008607 	.word	0x08008607
 80085d8:	08008607 	.word	0x08008607
 80085dc:	080085ff 	.word	0x080085ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085e0:	f7fb ffec 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 80085e4:	61b8      	str	r0, [r7, #24]
        break;
 80085e6:	e013      	b.n	8008610 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085e8:	f7fb fffc 	bl	80045e4 <HAL_RCC_GetPCLK2Freq>
 80085ec:	61b8      	str	r0, [r7, #24]
        break;
 80085ee:	e00f      	b.n	8008610 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085f0:	4b2f      	ldr	r3, [pc, #188]	; (80086b0 <UART_SetConfig+0x564>)
 80085f2:	61bb      	str	r3, [r7, #24]
        break;
 80085f4:	e00c      	b.n	8008610 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085f6:	f7fb ff0f 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 80085fa:	61b8      	str	r0, [r7, #24]
        break;
 80085fc:	e008      	b.n	8008610 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008602:	61bb      	str	r3, [r7, #24]
        break;
 8008604:	e004      	b.n	8008610 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	77bb      	strb	r3, [r7, #30]
        break;
 800860e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	2b00      	cmp	r3, #0
 8008614:	f000 8082 	beq.w	800871c <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	005a      	lsls	r2, r3, #1
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	085b      	lsrs	r3, r3, #1
 8008622:	441a      	add	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	fbb2 f3f3 	udiv	r3, r2, r3
 800862c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	2b0f      	cmp	r3, #15
 8008632:	d916      	bls.n	8008662 <UART_SetConfig+0x516>
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800863a:	d212      	bcs.n	8008662 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	b29b      	uxth	r3, r3
 8008640:	f023 030f 	bic.w	r3, r3, #15
 8008644:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	085b      	lsrs	r3, r3, #1
 800864a:	b29b      	uxth	r3, r3
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	b29a      	uxth	r2, r3
 8008652:	89fb      	ldrh	r3, [r7, #14]
 8008654:	4313      	orrs	r3, r2
 8008656:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	89fa      	ldrh	r2, [r7, #14]
 800865e:	60da      	str	r2, [r3, #12]
 8008660:	e05c      	b.n	800871c <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	77bb      	strb	r3, [r7, #30]
 8008666:	e059      	b.n	800871c <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008668:	7ffb      	ldrb	r3, [r7, #31]
 800866a:	2b08      	cmp	r3, #8
 800866c:	d835      	bhi.n	80086da <UART_SetConfig+0x58e>
 800866e:	a201      	add	r2, pc, #4	; (adr r2, 8008674 <UART_SetConfig+0x528>)
 8008670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008674:	080086b5 	.word	0x080086b5
 8008678:	080086bd 	.word	0x080086bd
 800867c:	080086c5 	.word	0x080086c5
 8008680:	080086db 	.word	0x080086db
 8008684:	080086cb 	.word	0x080086cb
 8008688:	080086db 	.word	0x080086db
 800868c:	080086db 	.word	0x080086db
 8008690:	080086db 	.word	0x080086db
 8008694:	080086d3 	.word	0x080086d3
 8008698:	40004c00 	.word	0x40004c00
 800869c:	40023800 	.word	0x40023800
 80086a0:	40005000 	.word	0x40005000
 80086a4:	40011400 	.word	0x40011400
 80086a8:	40007800 	.word	0x40007800
 80086ac:	40007c00 	.word	0x40007c00
 80086b0:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086b4:	f7fb ff82 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 80086b8:	61b8      	str	r0, [r7, #24]
        break;
 80086ba:	e013      	b.n	80086e4 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086bc:	f7fb ff92 	bl	80045e4 <HAL_RCC_GetPCLK2Freq>
 80086c0:	61b8      	str	r0, [r7, #24]
        break;
 80086c2:	e00f      	b.n	80086e4 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086c4:	4b1b      	ldr	r3, [pc, #108]	; (8008734 <UART_SetConfig+0x5e8>)
 80086c6:	61bb      	str	r3, [r7, #24]
        break;
 80086c8:	e00c      	b.n	80086e4 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ca:	f7fb fea5 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 80086ce:	61b8      	str	r0, [r7, #24]
        break;
 80086d0:	e008      	b.n	80086e4 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086d6:	61bb      	str	r3, [r7, #24]
        break;
 80086d8:	e004      	b.n	80086e4 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 80086da:	2300      	movs	r3, #0
 80086dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	77bb      	strb	r3, [r7, #30]
        break;
 80086e2:	bf00      	nop
    }

    if (pclk != 0U)
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d018      	beq.n	800871c <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	085a      	lsrs	r2, r3, #1
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	441a      	add	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b0f      	cmp	r3, #15
 8008702:	d909      	bls.n	8008718 <UART_SetConfig+0x5cc>
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800870a:	d205      	bcs.n	8008718 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	b29a      	uxth	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	60da      	str	r2, [r3, #12]
 8008716:	e001      	b.n	800871c <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008728:	7fbb      	ldrb	r3, [r7, #30]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3720      	adds	r7, #32
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	00f42400 	.word	0x00f42400

08008738 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	2bff      	cmp	r3, #255	; 0xff
 8008746:	d904      	bls.n	8008752 <UART_AdvFeatureConfig+0x1a>
 8008748:	f640 31e6 	movw	r1, #3046	; 0xbe6
 800874c:	488e      	ldr	r0, [pc, #568]	; (8008988 <UART_AdvFeatureConfig+0x250>)
 800874e:	f7f9 f8fa 	bl	8001946 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d018      	beq.n	8008790 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008762:	2b00      	cmp	r3, #0
 8008764:	d009      	beq.n	800877a <UART_AdvFeatureConfig+0x42>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800876e:	d004      	beq.n	800877a <UART_AdvFeatureConfig+0x42>
 8008770:	f640 31eb 	movw	r1, #3051	; 0xbeb
 8008774:	4884      	ldr	r0, [pc, #528]	; (8008988 <UART_AdvFeatureConfig+0x250>)
 8008776:	f7f9 f8e6 	bl	8001946 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	430a      	orrs	r2, r1
 800878e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b00      	cmp	r3, #0
 800879a:	d018      	beq.n	80087ce <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d009      	beq.n	80087b8 <UART_AdvFeatureConfig+0x80>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ac:	d004      	beq.n	80087b8 <UART_AdvFeatureConfig+0x80>
 80087ae:	f640 31f2 	movw	r1, #3058	; 0xbf2
 80087b2:	4875      	ldr	r0, [pc, #468]	; (8008988 <UART_AdvFeatureConfig+0x250>)
 80087b4:	f7f9 f8c7 	bl	8001946 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	430a      	orrs	r2, r1
 80087cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	f003 0304 	and.w	r3, r3, #4
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d018      	beq.n	800880c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d009      	beq.n	80087f6 <UART_AdvFeatureConfig+0xbe>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087ea:	d004      	beq.n	80087f6 <UART_AdvFeatureConfig+0xbe>
 80087ec:	f640 31f9 	movw	r1, #3065	; 0xbf9
 80087f0:	4865      	ldr	r0, [pc, #404]	; (8008988 <UART_AdvFeatureConfig+0x250>)
 80087f2:	f7f9 f8a8 	bl	8001946 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008810:	f003 0308 	and.w	r3, r3, #8
 8008814:	2b00      	cmp	r3, #0
 8008816:	d018      	beq.n	800884a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881c:	2b00      	cmp	r3, #0
 800881e:	d009      	beq.n	8008834 <UART_AdvFeatureConfig+0xfc>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008828:	d004      	beq.n	8008834 <UART_AdvFeatureConfig+0xfc>
 800882a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800882e:	4856      	ldr	r0, [pc, #344]	; (8008988 <UART_AdvFeatureConfig+0x250>)
 8008830:	f7f9 f889 	bl	8001946 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884e:	f003 0310 	and.w	r3, r3, #16
 8008852:	2b00      	cmp	r3, #0
 8008854:	d018      	beq.n	8008888 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885a:	2b00      	cmp	r3, #0
 800885c:	d009      	beq.n	8008872 <UART_AdvFeatureConfig+0x13a>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008866:	d004      	beq.n	8008872 <UART_AdvFeatureConfig+0x13a>
 8008868:	f640 4107 	movw	r1, #3079	; 0xc07
 800886c:	4846      	ldr	r0, [pc, #280]	; (8008988 <UART_AdvFeatureConfig+0x250>)
 800886e:	f7f9 f86a 	bl	8001946 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	f003 0320 	and.w	r3, r3, #32
 8008890:	2b00      	cmp	r3, #0
 8008892:	d018      	beq.n	80088c6 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008898:	2b00      	cmp	r3, #0
 800889a:	d009      	beq.n	80088b0 <UART_AdvFeatureConfig+0x178>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088a4:	d004      	beq.n	80088b0 <UART_AdvFeatureConfig+0x178>
 80088a6:	f640 410e 	movw	r1, #3086	; 0xc0e
 80088aa:	4837      	ldr	r0, [pc, #220]	; (8008988 <UART_AdvFeatureConfig+0x250>)
 80088ac:	f7f9 f84b 	bl	8001946 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d064      	beq.n	800899c <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a2d      	ldr	r2, [pc, #180]	; (800898c <UART_AdvFeatureConfig+0x254>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d013      	beq.n	8008904 <UART_AdvFeatureConfig+0x1cc>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a2b      	ldr	r2, [pc, #172]	; (8008990 <UART_AdvFeatureConfig+0x258>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d00e      	beq.n	8008904 <UART_AdvFeatureConfig+0x1cc>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a2a      	ldr	r2, [pc, #168]	; (8008994 <UART_AdvFeatureConfig+0x25c>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d009      	beq.n	8008904 <UART_AdvFeatureConfig+0x1cc>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a28      	ldr	r2, [pc, #160]	; (8008998 <UART_AdvFeatureConfig+0x260>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d004      	beq.n	8008904 <UART_AdvFeatureConfig+0x1cc>
 80088fa:	f640 4115 	movw	r1, #3093	; 0xc15
 80088fe:	4822      	ldr	r0, [pc, #136]	; (8008988 <UART_AdvFeatureConfig+0x250>)
 8008900:	f7f9 f821 	bl	8001946 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008908:	2b00      	cmp	r3, #0
 800890a:	d009      	beq.n	8008920 <UART_AdvFeatureConfig+0x1e8>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008910:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008914:	d004      	beq.n	8008920 <UART_AdvFeatureConfig+0x1e8>
 8008916:	f640 4116 	movw	r1, #3094	; 0xc16
 800891a:	481b      	ldr	r0, [pc, #108]	; (8008988 <UART_AdvFeatureConfig+0x250>)
 800891c:	f7f9 f813 	bl	8001946 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	430a      	orrs	r2, r1
 8008934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800893e:	d12d      	bne.n	800899c <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008944:	2b00      	cmp	r3, #0
 8008946:	d013      	beq.n	8008970 <UART_AdvFeatureConfig+0x238>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800894c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008950:	d00e      	beq.n	8008970 <UART_AdvFeatureConfig+0x238>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800895a:	d009      	beq.n	8008970 <UART_AdvFeatureConfig+0x238>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008960:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008964:	d004      	beq.n	8008970 <UART_AdvFeatureConfig+0x238>
 8008966:	f640 411b 	movw	r1, #3099	; 0xc1b
 800896a:	4807      	ldr	r0, [pc, #28]	; (8008988 <UART_AdvFeatureConfig+0x250>)
 800896c:	f7f8 ffeb 	bl	8001946 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	430a      	orrs	r2, r1
 8008984:	605a      	str	r2, [r3, #4]
 8008986:	e009      	b.n	800899c <UART_AdvFeatureConfig+0x264>
 8008988:	08012d50 	.word	0x08012d50
 800898c:	40011000 	.word	0x40011000
 8008990:	40004400 	.word	0x40004400
 8008994:	40004800 	.word	0x40004800
 8008998:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d018      	beq.n	80089da <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d009      	beq.n	80089c4 <UART_AdvFeatureConfig+0x28c>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80089b8:	d004      	beq.n	80089c4 <UART_AdvFeatureConfig+0x28c>
 80089ba:	f640 4123 	movw	r1, #3107	; 0xc23
 80089be:	4809      	ldr	r0, [pc, #36]	; (80089e4 <UART_AdvFeatureConfig+0x2ac>)
 80089c0:	f7f8 ffc1 	bl	8001946 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	430a      	orrs	r2, r1
 80089d8:	605a      	str	r2, [r3, #4]
  }
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	08012d50 	.word	0x08012d50

080089e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af02      	add	r7, sp, #8
 80089ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089f8:	f7f9 fb3a 	bl	8002070 <HAL_GetTick>
 80089fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0308 	and.w	r3, r3, #8
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d10e      	bne.n	8008a2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f81b 	bl	8008a56 <UART_WaitOnFlagUntilTimeout>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e011      	b.n	8008a4e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2220      	movs	r2, #32
 8008a2e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b09c      	sub	sp, #112	; 0x70
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	603b      	str	r3, [r7, #0]
 8008a62:	4613      	mov	r3, r2
 8008a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a66:	e0a7      	b.n	8008bb8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6e:	f000 80a3 	beq.w	8008bb8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a72:	f7f9 fafd 	bl	8002070 <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d302      	bcc.n	8008a88 <UART_WaitOnFlagUntilTimeout+0x32>
 8008a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d13f      	bne.n	8008b08 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a9c:	667b      	str	r3, [r7, #100]	; 0x64
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008aa8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008aac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e6      	bne.n	8008a88 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3308      	adds	r3, #8
 8008ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008acc:	f023 0301 	bic.w	r3, r3, #1
 8008ad0:	663b      	str	r3, [r7, #96]	; 0x60
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3308      	adds	r3, #8
 8008ad8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ada:	64ba      	str	r2, [r7, #72]	; 0x48
 8008adc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e5      	bne.n	8008aba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2220      	movs	r2, #32
 8008af2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2220      	movs	r2, #32
 8008af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e068      	b.n	8008bda <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0304 	and.w	r3, r3, #4
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d050      	beq.n	8008bb8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b24:	d148      	bne.n	8008bb8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b2e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008b50:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1e6      	bne.n	8008b30 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3308      	adds	r3, #8
 8008b68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	e853 3f00 	ldrex	r3, [r3]
 8008b70:	613b      	str	r3, [r7, #16]
   return(result);
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	f023 0301 	bic.w	r3, r3, #1
 8008b78:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3308      	adds	r3, #8
 8008b80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b82:	623a      	str	r2, [r7, #32]
 8008b84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b86:	69f9      	ldr	r1, [r7, #28]
 8008b88:	6a3a      	ldr	r2, [r7, #32]
 8008b8a:	e841 2300 	strex	r3, r2, [r1]
 8008b8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1e5      	bne.n	8008b62 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2220      	movs	r2, #32
 8008b9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2220      	movs	r2, #32
 8008ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2220      	movs	r2, #32
 8008ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e010      	b.n	8008bda <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	69da      	ldr	r2, [r3, #28]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	bf0c      	ite	eq
 8008bc8:	2301      	moveq	r3, #1
 8008bca:	2300      	movne	r3, #0
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	461a      	mov	r2, r3
 8008bd0:	79fb      	ldrb	r3, [r7, #7]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	f43f af48 	beq.w	8008a68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3770      	adds	r7, #112	; 0x70
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b097      	sub	sp, #92	; 0x5c
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	88fa      	ldrh	r2, [r7, #6]
 8008bfc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	88fa      	ldrh	r2, [r7, #6]
 8008c04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c16:	d10e      	bne.n	8008c36 <UART_Start_Receive_IT+0x52>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d105      	bne.n	8008c2c <UART_Start_Receive_IT+0x48>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008c26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c2a:	e02d      	b.n	8008c88 <UART_Start_Receive_IT+0xa4>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	22ff      	movs	r2, #255	; 0xff
 8008c30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c34:	e028      	b.n	8008c88 <UART_Start_Receive_IT+0xa4>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10d      	bne.n	8008c5a <UART_Start_Receive_IT+0x76>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d104      	bne.n	8008c50 <UART_Start_Receive_IT+0x6c>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	22ff      	movs	r2, #255	; 0xff
 8008c4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c4e:	e01b      	b.n	8008c88 <UART_Start_Receive_IT+0xa4>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	227f      	movs	r2, #127	; 0x7f
 8008c54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c58:	e016      	b.n	8008c88 <UART_Start_Receive_IT+0xa4>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c62:	d10d      	bne.n	8008c80 <UART_Start_Receive_IT+0x9c>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d104      	bne.n	8008c76 <UART_Start_Receive_IT+0x92>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	227f      	movs	r2, #127	; 0x7f
 8008c70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c74:	e008      	b.n	8008c88 <UART_Start_Receive_IT+0xa4>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	223f      	movs	r2, #63	; 0x3f
 8008c7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c7e:	e003      	b.n	8008c88 <UART_Start_Receive_IT+0xa4>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2222      	movs	r2, #34	; 0x22
 8008c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ca2:	e853 3f00 	ldrex	r3, [r3]
 8008ca6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008caa:	f043 0301 	orr.w	r3, r3, #1
 8008cae:	657b      	str	r3, [r7, #84]	; 0x54
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3308      	adds	r3, #8
 8008cb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cb8:	64ba      	str	r2, [r7, #72]	; 0x48
 8008cba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cc0:	e841 2300 	strex	r3, r2, [r1]
 8008cc4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1e5      	bne.n	8008c98 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cd4:	d107      	bne.n	8008ce6 <UART_Start_Receive_IT+0x102>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d103      	bne.n	8008ce6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	4a21      	ldr	r2, [pc, #132]	; (8008d68 <UART_Start_Receive_IT+0x184>)
 8008ce2:	669a      	str	r2, [r3, #104]	; 0x68
 8008ce4:	e002      	b.n	8008cec <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	4a20      	ldr	r2, [pc, #128]	; (8008d6c <UART_Start_Receive_IT+0x188>)
 8008cea:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d019      	beq.n	8008d28 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfc:	e853 3f00 	ldrex	r3, [r3]
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d04:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008d08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d12:	637b      	str	r3, [r7, #52]	; 0x34
 8008d14:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d1a:	e841 2300 	strex	r3, r2, [r1]
 8008d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1e6      	bne.n	8008cf4 <UART_Start_Receive_IT+0x110>
 8008d26:	e018      	b.n	8008d5a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	e853 3f00 	ldrex	r3, [r3]
 8008d34:	613b      	str	r3, [r7, #16]
   return(result);
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f043 0320 	orr.w	r3, r3, #32
 8008d3c:	653b      	str	r3, [r7, #80]	; 0x50
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d46:	623b      	str	r3, [r7, #32]
 8008d48:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4a:	69f9      	ldr	r1, [r7, #28]
 8008d4c:	6a3a      	ldr	r2, [r7, #32]
 8008d4e:	e841 2300 	strex	r3, r2, [r1]
 8008d52:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1e6      	bne.n	8008d28 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	375c      	adds	r7, #92	; 0x5c
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	0800901f 	.word	0x0800901f
 8008d6c:	08008eb9 	.word	0x08008eb9

08008d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b095      	sub	sp, #84	; 0x54
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d80:	e853 3f00 	ldrex	r3, [r3]
 8008d84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	461a      	mov	r2, r3
 8008d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d96:	643b      	str	r3, [r7, #64]	; 0x40
 8008d98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d9e:	e841 2300 	strex	r3, r2, [r1]
 8008da2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1e6      	bne.n	8008d78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3308      	adds	r3, #8
 8008db0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	e853 3f00 	ldrex	r3, [r3]
 8008db8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	f023 0301 	bic.w	r3, r3, #1
 8008dc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3308      	adds	r3, #8
 8008dc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008dcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e5      	bne.n	8008daa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d118      	bne.n	8008e18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	f023 0310 	bic.w	r3, r3, #16
 8008dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	461a      	mov	r2, r3
 8008e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e04:	61bb      	str	r3, [r7, #24]
 8008e06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	6979      	ldr	r1, [r7, #20]
 8008e0a:	69ba      	ldr	r2, [r7, #24]
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	613b      	str	r3, [r7, #16]
   return(result);
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e6      	bne.n	8008de6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008e2c:	bf00      	nop
 8008e2e:	3754      	adds	r7, #84	; 0x54
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f7ff f962 	bl	8008120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e5c:	bf00      	nop
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e80:	61fb      	str	r3, [r7, #28]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	61bb      	str	r3, [r7, #24]
 8008e8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6979      	ldr	r1, [r7, #20]
 8008e90:	69ba      	ldr	r2, [r7, #24]
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	613b      	str	r3, [r7, #16]
   return(result);
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e6      	bne.n	8008e6c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2220      	movs	r2, #32
 8008ea2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7ff f92e 	bl	800810c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eb0:	bf00      	nop
 8008eb2:	3720      	adds	r7, #32
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b096      	sub	sp, #88	; 0x58
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ec6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ed0:	2b22      	cmp	r3, #34	; 0x22
 8008ed2:	f040 8098 	bne.w	8009006 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ee0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008ee4:	b2d9      	uxtb	r1, r3
 8008ee6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008eea:	b2da      	uxtb	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef0:	400a      	ands	r2, r1
 8008ef2:	b2d2      	uxtb	r2, r2
 8008ef4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d17b      	bne.n	8009016 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f26:	e853 3f00 	ldrex	r3, [r3]
 8008f2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f32:	653b      	str	r3, [r7, #80]	; 0x50
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8008f3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f44:	e841 2300 	strex	r3, r2, [r1]
 8008f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1e6      	bne.n	8008f1e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	3308      	adds	r3, #8
 8008f56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	e853 3f00 	ldrex	r3, [r3]
 8008f5e:	623b      	str	r3, [r7, #32]
   return(result);
 8008f60:	6a3b      	ldr	r3, [r7, #32]
 8008f62:	f023 0301 	bic.w	r3, r3, #1
 8008f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f70:	633a      	str	r2, [r7, #48]	; 0x30
 8008f72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f78:	e841 2300 	strex	r3, r2, [r1]
 8008f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e5      	bne.n	8008f50 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2220      	movs	r2, #32
 8008f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d12e      	bne.n	8008ffe <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	e853 3f00 	ldrex	r3, [r3]
 8008fb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f023 0310 	bic.w	r3, r3, #16
 8008fba:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fc4:	61fb      	str	r3, [r7, #28]
 8008fc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc8:	69b9      	ldr	r1, [r7, #24]
 8008fca:	69fa      	ldr	r2, [r7, #28]
 8008fcc:	e841 2300 	strex	r3, r2, [r1]
 8008fd0:	617b      	str	r3, [r7, #20]
   return(result);
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1e6      	bne.n	8008fa6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	f003 0310 	and.w	r3, r3, #16
 8008fe2:	2b10      	cmp	r3, #16
 8008fe4:	d103      	bne.n	8008fee <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2210      	movs	r2, #16
 8008fec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7ff f89c 	bl	8008134 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ffc:	e00b      	b.n	8009016 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7f8 fc20 	bl	8001844 <HAL_UART_RxCpltCallback>
}
 8009004:	e007      	b.n	8009016 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	699a      	ldr	r2, [r3, #24]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f042 0208 	orr.w	r2, r2, #8
 8009014:	619a      	str	r2, [r3, #24]
}
 8009016:	bf00      	nop
 8009018:	3758      	adds	r7, #88	; 0x58
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b096      	sub	sp, #88	; 0x58
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800902c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009036:	2b22      	cmp	r3, #34	; 0x22
 8009038:	f040 8098 	bne.w	800916c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800904a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800904c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009050:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009054:	4013      	ands	r3, r2
 8009056:	b29a      	uxth	r2, r3
 8009058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800905a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009060:	1c9a      	adds	r2, r3, #2
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800906c:	b29b      	uxth	r3, r3
 800906e:	3b01      	subs	r3, #1
 8009070:	b29a      	uxth	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800907e:	b29b      	uxth	r3, r3
 8009080:	2b00      	cmp	r3, #0
 8009082:	d17b      	bne.n	800917c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800908c:	e853 3f00 	ldrex	r3, [r3]
 8009090:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009098:	64fb      	str	r3, [r7, #76]	; 0x4c
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090a2:	643b      	str	r3, [r7, #64]	; 0x40
 80090a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090aa:	e841 2300 	strex	r3, r2, [r1]
 80090ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1e6      	bne.n	8009084 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3308      	adds	r3, #8
 80090bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	f023 0301 	bic.w	r3, r3, #1
 80090cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3308      	adds	r3, #8
 80090d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e5      	bne.n	80090b6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009102:	2b01      	cmp	r3, #1
 8009104:	d12e      	bne.n	8009164 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	e853 3f00 	ldrex	r3, [r3]
 8009118:	60bb      	str	r3, [r7, #8]
   return(result);
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	f023 0310 	bic.w	r3, r3, #16
 8009120:	647b      	str	r3, [r7, #68]	; 0x44
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	461a      	mov	r2, r3
 8009128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800912a:	61bb      	str	r3, [r7, #24]
 800912c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912e:	6979      	ldr	r1, [r7, #20]
 8009130:	69ba      	ldr	r2, [r7, #24]
 8009132:	e841 2300 	strex	r3, r2, [r1]
 8009136:	613b      	str	r3, [r7, #16]
   return(result);
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1e6      	bne.n	800910c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	69db      	ldr	r3, [r3, #28]
 8009144:	f003 0310 	and.w	r3, r3, #16
 8009148:	2b10      	cmp	r3, #16
 800914a:	d103      	bne.n	8009154 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2210      	movs	r2, #16
 8009152:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7fe ffe9 	bl	8008134 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009162:	e00b      	b.n	800917c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7f8 fb6d 	bl	8001844 <HAL_UART_RxCpltCallback>
}
 800916a:	e007      	b.n	800917c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	699a      	ldr	r2, [r3, #24]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f042 0208 	orr.w	r2, r2, #8
 800917a:	619a      	str	r2, [r3, #24]
}
 800917c:	bf00      	nop
 800917e:	3758      	adds	r7, #88	; 0x58
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800918e:	2300      	movs	r3, #0
 8009190:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f001 fce2 	bl	800ab5e <VL53L0X_get_offset_calibration_data_micro_meter>
 800919a:	4603      	mov	r3, r0
 800919c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800919e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
	...

080091ac <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80091ac:	b5b0      	push	{r4, r5, r7, lr}
 80091ae:	b096      	sub	sp, #88	; 0x58
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80091b4:	2300      	movs	r3, #0
 80091b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80091ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d107      	bne.n	80091d2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80091c2:	2200      	movs	r2, #0
 80091c4:	2188      	movs	r1, #136	; 0x88
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f004 feda 	bl	800df80 <VL53L0X_WrByte>
 80091cc:	4603      	mov	r3, r0
 80091ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80091e0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80091ea:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a9e      	ldr	r2, [pc, #632]	; (800946c <VL53L0X_DataInit+0x2c0>)
 80091f2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a9d      	ldr	r2, [pc, #628]	; (8009470 <VL53L0X_DataInit+0x2c4>)
 80091fa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009204:	f107 0310 	add.w	r3, r7, #16
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fac2 	bl	8009794 <VL53L0X_GetDeviceParameters>
 8009210:	4603      	mov	r3, r0
 8009212:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8009216:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800921a:	2b00      	cmp	r3, #0
 800921c:	d112      	bne.n	8009244 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800921e:	2300      	movs	r3, #0
 8009220:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8009222:	2300      	movs	r3, #0
 8009224:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f103 0410 	add.w	r4, r3, #16
 800922c:	f107 0510 	add.w	r5, r7, #16
 8009230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800923a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800923c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2264      	movs	r2, #100	; 0x64
 8009248:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009252:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800925c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8009266:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009272:	2201      	movs	r2, #1
 8009274:	2180      	movs	r1, #128	; 0x80
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f004 fe82 	bl	800df80 <VL53L0X_WrByte>
 800927c:	4603      	mov	r3, r0
 800927e:	461a      	mov	r2, r3
 8009280:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009284:	4313      	orrs	r3, r2
 8009286:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800928a:	2201      	movs	r2, #1
 800928c:	21ff      	movs	r1, #255	; 0xff
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f004 fe76 	bl	800df80 <VL53L0X_WrByte>
 8009294:	4603      	mov	r3, r0
 8009296:	461a      	mov	r2, r3
 8009298:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800929c:	4313      	orrs	r3, r2
 800929e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80092a2:	2200      	movs	r2, #0
 80092a4:	2100      	movs	r1, #0
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f004 fe6a 	bl	800df80 <VL53L0X_WrByte>
 80092ac:	4603      	mov	r3, r0
 80092ae:	461a      	mov	r2, r3
 80092b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092b4:	4313      	orrs	r3, r2
 80092b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80092ba:	f107 030f 	add.w	r3, r7, #15
 80092be:	461a      	mov	r2, r3
 80092c0:	2191      	movs	r1, #145	; 0x91
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f004 fede 	bl	800e084 <VL53L0X_RdByte>
 80092c8:	4603      	mov	r3, r0
 80092ca:	461a      	mov	r2, r3
 80092cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092d0:	4313      	orrs	r3, r2
 80092d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80092d6:	7bfa      	ldrb	r2, [r7, #15]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80092de:	2201      	movs	r2, #1
 80092e0:	2100      	movs	r1, #0
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f004 fe4c 	bl	800df80 <VL53L0X_WrByte>
 80092e8:	4603      	mov	r3, r0
 80092ea:	461a      	mov	r2, r3
 80092ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092f0:	4313      	orrs	r3, r2
 80092f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80092f6:	2200      	movs	r2, #0
 80092f8:	21ff      	movs	r1, #255	; 0xff
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f004 fe40 	bl	800df80 <VL53L0X_WrByte>
 8009300:	4603      	mov	r3, r0
 8009302:	461a      	mov	r2, r3
 8009304:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009308:	4313      	orrs	r3, r2
 800930a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800930e:	2200      	movs	r2, #0
 8009310:	2180      	movs	r1, #128	; 0x80
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f004 fe34 	bl	800df80 <VL53L0X_WrByte>
 8009318:	4603      	mov	r3, r0
 800931a:	461a      	mov	r2, r3
 800931c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009320:	4313      	orrs	r3, r2
 8009322:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009326:	2300      	movs	r3, #0
 8009328:	653b      	str	r3, [r7, #80]	; 0x50
 800932a:	e014      	b.n	8009356 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800932c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009330:	2b00      	cmp	r3, #0
 8009332:	d114      	bne.n	800935e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8009334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009336:	b29b      	uxth	r3, r3
 8009338:	2201      	movs	r2, #1
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fd35 	bl	8009dac <VL53L0X_SetLimitCheckEnable>
 8009342:	4603      	mov	r3, r0
 8009344:	461a      	mov	r2, r3
 8009346:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800934a:	4313      	orrs	r3, r2
 800934c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009352:	3301      	adds	r3, #1
 8009354:	653b      	str	r3, [r7, #80]	; 0x50
 8009356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009358:	2b05      	cmp	r3, #5
 800935a:	dde7      	ble.n	800932c <VL53L0X_DataInit+0x180>
 800935c:	e000      	b.n	8009360 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800935e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8009360:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009364:	2b00      	cmp	r3, #0
 8009366:	d107      	bne.n	8009378 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009368:	2200      	movs	r2, #0
 800936a:	2102      	movs	r1, #2
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fd1d 	bl	8009dac <VL53L0X_SetLimitCheckEnable>
 8009372:	4603      	mov	r3, r0
 8009374:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009378:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800937c:	2b00      	cmp	r3, #0
 800937e:	d107      	bne.n	8009390 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009380:	2200      	movs	r2, #0
 8009382:	2103      	movs	r1, #3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fd11 	bl	8009dac <VL53L0X_SetLimitCheckEnable>
 800938a:	4603      	mov	r3, r0
 800938c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009390:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009394:	2b00      	cmp	r3, #0
 8009396:	d107      	bne.n	80093a8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009398:	2200      	movs	r2, #0
 800939a:	2104      	movs	r1, #4
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fd05 	bl	8009dac <VL53L0X_SetLimitCheckEnable>
 80093a2:	4603      	mov	r3, r0
 80093a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80093a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d107      	bne.n	80093c0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80093b0:	2200      	movs	r2, #0
 80093b2:	2105      	movs	r1, #5
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fcf9 	bl	8009dac <VL53L0X_SetLimitCheckEnable>
 80093ba:	4603      	mov	r3, r0
 80093bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80093c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d108      	bne.n	80093da <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80093c8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80093cc:	2100      	movs	r1, #0
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fd9c 	bl	8009f0c <VL53L0X_SetLimitCheckValue>
 80093d4:	4603      	mov	r3, r0
 80093d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80093da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d108      	bne.n	80093f4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80093e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80093e6:	2101      	movs	r1, #1
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fd8f 	bl	8009f0c <VL53L0X_SetLimitCheckValue>
 80093ee:	4603      	mov	r3, r0
 80093f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80093f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d108      	bne.n	800940e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80093fc:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8009400:	2102      	movs	r1, #2
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fd82 	bl	8009f0c <VL53L0X_SetLimitCheckValue>
 8009408:	4603      	mov	r3, r0
 800940a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800940e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009412:	2b00      	cmp	r3, #0
 8009414:	d107      	bne.n	8009426 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009416:	2200      	movs	r2, #0
 8009418:	2103      	movs	r1, #3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fd76 	bl	8009f0c <VL53L0X_SetLimitCheckValue>
 8009420:	4603      	mov	r3, r0
 8009422:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009426:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10f      	bne.n	800944e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	22ff      	movs	r2, #255	; 0xff
 8009432:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009436:	22ff      	movs	r2, #255	; 0xff
 8009438:	2101      	movs	r1, #1
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f004 fda0 	bl	800df80 <VL53L0X_WrByte>
 8009440:	4603      	mov	r3, r0
 8009442:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800944e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009452:	2b00      	cmp	r3, #0
 8009454:	d103      	bne.n	800945e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800945e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8009462:	4618      	mov	r0, r3
 8009464:	3758      	adds	r7, #88	; 0x58
 8009466:	46bd      	mov	sp, r7
 8009468:	bdb0      	pop	{r4, r5, r7, pc}
 800946a:	bf00      	nop
 800946c:	00016b85 	.word	0x00016b85
 8009470:	000970a4 	.word	0x000970a4

08009474 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8009474:	b5b0      	push	{r4, r5, r7, lr}
 8009476:	b09e      	sub	sp, #120	; 0x78
 8009478:	af02      	add	r7, sp, #8
 800947a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800947c:	2300      	movs	r3, #0
 800947e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8009482:	f107 031c 	add.w	r3, r7, #28
 8009486:	2240      	movs	r2, #64	; 0x40
 8009488:	2100      	movs	r1, #0
 800948a:	4618      	mov	r0, r3
 800948c:	f004 fee0 	bl	800e250 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8009490:	2300      	movs	r3, #0
 8009492:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8009498:	2300      	movs	r3, #0
 800949a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800949e:	2300      	movs	r3, #0
 80094a0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80094a6:	2300      	movs	r3, #0
 80094a8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80094b0:	2101      	movs	r1, #1
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f002 faa9 	bl	800ba0a <VL53L0X_get_info_from_device>
 80094b8:	4603      	mov	r3, r0
 80094ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80094c4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80094cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80094d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d80d      	bhi.n	80094f4 <VL53L0X_StaticInit+0x80>
 80094d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d102      	bne.n	80094e6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80094e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094e2:	2b20      	cmp	r3, #32
 80094e4:	d806      	bhi.n	80094f4 <VL53L0X_StaticInit+0x80>
 80094e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10e      	bne.n	800950c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80094ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094f0:	2b0c      	cmp	r3, #12
 80094f2:	d90b      	bls.n	800950c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80094f4:	f107 0218 	add.w	r2, r7, #24
 80094f8:	f107 0314 	add.w	r3, r7, #20
 80094fc:	4619      	mov	r1, r3
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f001 fd28 	bl	800af54 <VL53L0X_perform_ref_spad_management>
 8009504:	4603      	mov	r3, r0
 8009506:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800950a:	e009      	b.n	8009520 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800950c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009510:	461a      	mov	r2, r3
 8009512:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f001 ff29 	bl	800b36c <VL53L0X_set_reference_spads>
 800951a:	4603      	mov	r3, r0
 800951c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8009520:	4b94      	ldr	r3, [pc, #592]	; (8009774 <VL53L0X_StaticInit+0x300>)
 8009522:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8009524:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10f      	bne.n	800954c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8009532:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8009536:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800953a:	2b00      	cmp	r3, #0
 800953c:	d104      	bne.n	8009548 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8009544:	66bb      	str	r3, [r7, #104]	; 0x68
 8009546:	e001      	b.n	800954c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8009548:	4b8a      	ldr	r3, [pc, #552]	; (8009774 <VL53L0X_StaticInit+0x300>)
 800954a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800954c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009550:	2b00      	cmp	r3, #0
 8009552:	d106      	bne.n	8009562 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8009554:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f003 fdfc 	bl	800d154 <VL53L0X_load_tuning_settings>
 800955c:	4603      	mov	r3, r0
 800955e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8009562:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10a      	bne.n	8009580 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800956a:	2300      	movs	r3, #0
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	2304      	movs	r3, #4
 8009570:	2200      	movs	r2, #0
 8009572:	2100      	movs	r1, #0
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f001 f8f1 	bl	800a75c <VL53L0X_SetGpioConfig>
 800957a:	4603      	mov	r3, r0
 800957c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009580:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009584:	2b00      	cmp	r3, #0
 8009586:	d121      	bne.n	80095cc <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009588:	2201      	movs	r2, #1
 800958a:	21ff      	movs	r1, #255	; 0xff
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f004 fcf7 	bl	800df80 <VL53L0X_WrByte>
 8009592:	4603      	mov	r3, r0
 8009594:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8009598:	f107 031a 	add.w	r3, r7, #26
 800959c:	461a      	mov	r2, r3
 800959e:	2184      	movs	r1, #132	; 0x84
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f004 fd99 	bl	800e0d8 <VL53L0X_RdWord>
 80095a6:	4603      	mov	r3, r0
 80095a8:	461a      	mov	r2, r3
 80095aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80095ae:	4313      	orrs	r3, r2
 80095b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80095b4:	2200      	movs	r2, #0
 80095b6:	21ff      	movs	r1, #255	; 0xff
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f004 fce1 	bl	800df80 <VL53L0X_WrByte>
 80095be:	4603      	mov	r3, r0
 80095c0:	461a      	mov	r2, r3
 80095c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80095c6:	4313      	orrs	r3, r2
 80095c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80095cc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d105      	bne.n	80095e0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80095d4:	8b7b      	ldrh	r3, [r7, #26]
 80095d6:	011b      	lsls	r3, r3, #4
 80095d8:	461a      	mov	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80095e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d108      	bne.n	80095fa <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80095e8:	f107 031c 	add.w	r3, r7, #28
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f8d0 	bl	8009794 <VL53L0X_GetDeviceParameters>
 80095f4:	4603      	mov	r3, r0
 80095f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80095fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d110      	bne.n	8009624 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8009602:	f107 0319 	add.w	r3, r7, #25
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f992 	bl	8009932 <VL53L0X_GetFractionEnable>
 800960e:	4603      	mov	r3, r0
 8009610:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8009614:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009618:	2b00      	cmp	r3, #0
 800961a:	d103      	bne.n	8009624 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800961c:	7e7a      	ldrb	r2, [r7, #25]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009624:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10e      	bne.n	800964a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f103 0410 	add.w	r4, r3, #16
 8009632:	f107 051c 	add.w	r5, r7, #28
 8009636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800963a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800963c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800963e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009642:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800964a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800964e:	2b00      	cmp	r3, #0
 8009650:	d111      	bne.n	8009676 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8009652:	f107 0319 	add.w	r3, r7, #25
 8009656:	461a      	mov	r2, r3
 8009658:	2101      	movs	r1, #1
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f004 fd12 	bl	800e084 <VL53L0X_RdByte>
 8009660:	4603      	mov	r3, r0
 8009662:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8009666:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800966a:	2b00      	cmp	r3, #0
 800966c:	d103      	bne.n	8009676 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800966e:	7e7a      	ldrb	r2, [r7, #25]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8009676:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800967a:	2b00      	cmp	r3, #0
 800967c:	d107      	bne.n	800968e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800967e:	2200      	movs	r2, #0
 8009680:	2100      	movs	r1, #0
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f9ca 	bl	8009a1c <VL53L0X_SetSequenceStepEnable>
 8009688:	4603      	mov	r3, r0
 800968a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800968e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009692:	2b00      	cmp	r3, #0
 8009694:	d107      	bne.n	80096a6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009696:	2200      	movs	r2, #0
 8009698:	2102      	movs	r1, #2
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f9be 	bl	8009a1c <VL53L0X_SetSequenceStepEnable>
 80096a0:	4603      	mov	r3, r0
 80096a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80096a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d103      	bne.n	80096b6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2203      	movs	r2, #3
 80096b2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80096b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d109      	bne.n	80096d2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80096be:	f107 0313 	add.w	r3, r7, #19
 80096c2:	461a      	mov	r2, r3
 80096c4:	2100      	movs	r1, #0
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f990 	bl	80099ec <VL53L0X_GetVcselPulsePeriod>
 80096cc:	4603      	mov	r3, r0
 80096ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80096d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d103      	bne.n	80096e2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80096da:	7cfa      	ldrb	r2, [r7, #19]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80096e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d109      	bne.n	80096fe <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80096ea:	f107 0313 	add.w	r3, r7, #19
 80096ee:	461a      	mov	r2, r3
 80096f0:	2101      	movs	r1, #1
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f97a 	bl	80099ec <VL53L0X_GetVcselPulsePeriod>
 80096f8:	4603      	mov	r3, r0
 80096fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80096fe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009702:	2b00      	cmp	r3, #0
 8009704:	d103      	bne.n	800970e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009706:	7cfa      	ldrb	r2, [r7, #19]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800970e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009712:	2b00      	cmp	r3, #0
 8009714:	d109      	bne.n	800972a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8009716:	f107 030c 	add.w	r3, r7, #12
 800971a:	461a      	mov	r2, r3
 800971c:	2103      	movs	r1, #3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f002 fef4 	bl	800c50c <get_sequence_step_timeout>
 8009724:	4603      	mov	r3, r0
 8009726:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800972a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800972e:	2b00      	cmp	r3, #0
 8009730:	d103      	bne.n	800973a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800973a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800973e:	2b00      	cmp	r3, #0
 8009740:	d109      	bne.n	8009756 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8009742:	f107 030c 	add.w	r3, r7, #12
 8009746:	461a      	mov	r2, r3
 8009748:	2104      	movs	r1, #4
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f002 fede 	bl	800c50c <get_sequence_step_timeout>
 8009750:	4603      	mov	r3, r0
 8009752:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009756:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800975a:	2b00      	cmp	r3, #0
 800975c:	d103      	bne.n	8009766 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009766:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800976a:	4618      	mov	r0, r3
 800976c:	3770      	adds	r7, #112	; 0x70
 800976e:	46bd      	mov	sp, r7
 8009770:	bdb0      	pop	{r4, r5, r7, pc}
 8009772:	bf00      	nop
 8009774:	2000000c 	.word	0x2000000c

08009778 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8009780:	239d      	movs	r3, #157	; 0x9d
 8009782:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8009784:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3714      	adds	r7, #20
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800979e:	2300      	movs	r3, #0
 80097a0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f8b0 	bl	800990c <VL53L0X_GetDeviceMode>
 80097ac:	4603      	mov	r3, r0
 80097ae:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80097b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d107      	bne.n	80097c8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	3308      	adds	r3, #8
 80097bc:	4619      	mov	r1, r3
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fa78 	bl	8009cb4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80097c4:	4603      	mov	r3, r0
 80097c6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80097c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d102      	bne.n	80097d6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	2200      	movs	r2, #0
 80097d4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80097d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d107      	bne.n	80097ee <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	3310      	adds	r3, #16
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 faae 	bl	8009d46 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80097ea:	4603      	mov	r3, r0
 80097ec:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80097ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d107      	bne.n	8009806 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	3314      	adds	r3, #20
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f7ff fcc1 	bl	8009184 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8009802:	4603      	mov	r3, r0
 8009804:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8009806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d134      	bne.n	8009878 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800980e:	2300      	movs	r3, #0
 8009810:	60bb      	str	r3, [r7, #8]
 8009812:	e02a      	b.n	800986a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d12a      	bne.n	8009872 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	b299      	uxth	r1, r3
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	3308      	adds	r3, #8
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	4413      	add	r3, r2
 800982a:	3304      	adds	r3, #4
 800982c:	461a      	mov	r2, r3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fbce 	bl	8009fd0 <VL53L0X_GetLimitCheckValue>
 8009834:	4603      	mov	r3, r0
 8009836:	461a      	mov	r2, r3
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	4313      	orrs	r3, r2
 800983c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800983e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d117      	bne.n	8009876 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	b299      	uxth	r1, r3
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	3318      	adds	r3, #24
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	4413      	add	r3, r2
 8009852:	461a      	mov	r2, r3
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fb35 	bl	8009ec4 <VL53L0X_GetLimitCheckEnable>
 800985a:	4603      	mov	r3, r0
 800985c:	461a      	mov	r2, r3
 800985e:	7bfb      	ldrb	r3, [r7, #15]
 8009860:	4313      	orrs	r3, r2
 8009862:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	3301      	adds	r3, #1
 8009868:	60bb      	str	r3, [r7, #8]
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	2b05      	cmp	r3, #5
 800986e:	ddd1      	ble.n	8009814 <VL53L0X_GetDeviceParameters+0x80>
 8009870:	e002      	b.n	8009878 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8009872:	bf00      	nop
 8009874:	e000      	b.n	8009878 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8009876:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d107      	bne.n	8009890 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	333c      	adds	r3, #60	; 0x3c
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fc30 	bl	800a0ec <VL53L0X_GetWrapAroundCheckEnable>
 800988c:	4603      	mov	r3, r0
 800988e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8009890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d107      	bne.n	80098a8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	3304      	adds	r3, #4
 800989c:	4619      	mov	r1, r3
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f879 	bl	8009996 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80098a4:	4603      	mov	r3, r0
 80098a6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80098a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098c0:	2300      	movs	r3, #0
 80098c2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80098c4:	78fb      	ldrb	r3, [r7, #3]
 80098c6:	2b15      	cmp	r3, #21
 80098c8:	bf8c      	ite	hi
 80098ca:	2201      	movhi	r2, #1
 80098cc:	2200      	movls	r2, #0
 80098ce:	b2d2      	uxtb	r2, r2
 80098d0:	2a00      	cmp	r2, #0
 80098d2:	d10e      	bne.n	80098f2 <VL53L0X_SetDeviceMode+0x3e>
 80098d4:	2201      	movs	r2, #1
 80098d6:	409a      	lsls	r2, r3
 80098d8:	4b0b      	ldr	r3, [pc, #44]	; (8009908 <VL53L0X_SetDeviceMode+0x54>)
 80098da:	4013      	ands	r3, r2
 80098dc:	2b00      	cmp	r3, #0
 80098de:	bf14      	ite	ne
 80098e0:	2301      	movne	r3, #1
 80098e2:	2300      	moveq	r3, #0
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d003      	beq.n	80098f2 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	78fa      	ldrb	r2, [r7, #3]
 80098ee:	741a      	strb	r2, [r3, #16]
		break;
 80098f0:	e001      	b.n	80098f6 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80098f2:	23f8      	movs	r3, #248	; 0xf8
 80098f4:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80098f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	0030000b 	.word	0x0030000b

0800990c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009916:	2300      	movs	r3, #0
 8009918:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	7c1a      	ldrb	r2, [r3, #16]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009922:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr

08009932 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b084      	sub	sp, #16
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800993c:	2300      	movs	r3, #0
 800993e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	2109      	movs	r1, #9
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f004 fb9d 	bl	800e084 <VL53L0X_RdByte>
 800994a:	4603      	mov	r3, r0
 800994c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800994e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d106      	bne.n	8009964 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	f003 0301 	and.w	r3, r3, #1
 800995e:	b2da      	uxtb	r2, r3
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009964:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800997a:	2300      	movs	r3, #0
 800997c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f003 fa56 	bl	800ce32 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8009986:	4603      	mov	r3, r0
 8009988:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800998a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b084      	sub	sp, #16
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099a0:	2300      	movs	r3, #0
 80099a2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f003 fb23 	bl	800cff2 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80099ac:	4603      	mov	r3, r0
 80099ae:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80099b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	460b      	mov	r3, r1
 80099c6:	70fb      	strb	r3, [r7, #3]
 80099c8:	4613      	mov	r3, r2
 80099ca:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099cc:	2300      	movs	r3, #0
 80099ce:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80099d0:	78ba      	ldrb	r2, [r7, #2]
 80099d2:	78fb      	ldrb	r3, [r7, #3]
 80099d4:	4619      	mov	r1, r3
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f002 ff6b 	bl	800c8b2 <VL53L0X_set_vcsel_pulse_period>
 80099dc:	4603      	mov	r3, r0
 80099de:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80099e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	460b      	mov	r3, r1
 80099f6:	607a      	str	r2, [r7, #4]
 80099f8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099fa:	2300      	movs	r3, #0
 80099fc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80099fe:	7afb      	ldrb	r3, [r7, #11]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	4619      	mov	r1, r3
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f003 f9dd 	bl	800cdc4 <VL53L0X_get_vcsel_pulse_period>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8009a0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3718      	adds	r7, #24
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
	...

08009a1c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	70fb      	strb	r3, [r7, #3]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009a30:	2300      	movs	r3, #0
 8009a32:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8009a34:	2300      	movs	r3, #0
 8009a36:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009a38:	f107 030f 	add.w	r3, r7, #15
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	2101      	movs	r1, #1
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f004 fb1f 	bl	800e084 <VL53L0X_RdByte>
 8009a46:	4603      	mov	r3, r0
 8009a48:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8009a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d15a      	bne.n	8009b0c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8009a56:	78bb      	ldrb	r3, [r7, #2]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d12b      	bne.n	8009ab4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8009a5c:	78fb      	ldrb	r3, [r7, #3]
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	d825      	bhi.n	8009aae <VL53L0X_SetSequenceStepEnable+0x92>
 8009a62:	a201      	add	r2, pc, #4	; (adr r2, 8009a68 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8009a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a68:	08009a7d 	.word	0x08009a7d
 8009a6c:	08009a87 	.word	0x08009a87
 8009a70:	08009a91 	.word	0x08009a91
 8009a74:	08009a9b 	.word	0x08009a9b
 8009a78:	08009aa5 	.word	0x08009aa5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8009a7c:	7dbb      	ldrb	r3, [r7, #22]
 8009a7e:	f043 0310 	orr.w	r3, r3, #16
 8009a82:	75bb      	strb	r3, [r7, #22]
				break;
 8009a84:	e043      	b.n	8009b0e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8009a86:	7dbb      	ldrb	r3, [r7, #22]
 8009a88:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8009a8c:	75bb      	strb	r3, [r7, #22]
				break;
 8009a8e:	e03e      	b.n	8009b0e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8009a90:	7dbb      	ldrb	r3, [r7, #22]
 8009a92:	f043 0304 	orr.w	r3, r3, #4
 8009a96:	75bb      	strb	r3, [r7, #22]
				break;
 8009a98:	e039      	b.n	8009b0e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8009a9a:	7dbb      	ldrb	r3, [r7, #22]
 8009a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aa0:	75bb      	strb	r3, [r7, #22]
				break;
 8009aa2:	e034      	b.n	8009b0e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8009aa4:	7dbb      	ldrb	r3, [r7, #22]
 8009aa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009aaa:	75bb      	strb	r3, [r7, #22]
				break;
 8009aac:	e02f      	b.n	8009b0e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009aae:	23fc      	movs	r3, #252	; 0xfc
 8009ab0:	75fb      	strb	r3, [r7, #23]
 8009ab2:	e02c      	b.n	8009b0e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8009ab4:	78fb      	ldrb	r3, [r7, #3]
 8009ab6:	2b04      	cmp	r3, #4
 8009ab8:	d825      	bhi.n	8009b06 <VL53L0X_SetSequenceStepEnable+0xea>
 8009aba:	a201      	add	r2, pc, #4	; (adr r2, 8009ac0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8009abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac0:	08009ad5 	.word	0x08009ad5
 8009ac4:	08009adf 	.word	0x08009adf
 8009ac8:	08009ae9 	.word	0x08009ae9
 8009acc:	08009af3 	.word	0x08009af3
 8009ad0:	08009afd 	.word	0x08009afd
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8009ad4:	7dbb      	ldrb	r3, [r7, #22]
 8009ad6:	f023 0310 	bic.w	r3, r3, #16
 8009ada:	75bb      	strb	r3, [r7, #22]
				break;
 8009adc:	e017      	b.n	8009b0e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8009ade:	7dbb      	ldrb	r3, [r7, #22]
 8009ae0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8009ae4:	75bb      	strb	r3, [r7, #22]
				break;
 8009ae6:	e012      	b.n	8009b0e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8009ae8:	7dbb      	ldrb	r3, [r7, #22]
 8009aea:	f023 0304 	bic.w	r3, r3, #4
 8009aee:	75bb      	strb	r3, [r7, #22]
				break;
 8009af0:	e00d      	b.n	8009b0e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8009af2:	7dbb      	ldrb	r3, [r7, #22]
 8009af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009af8:	75bb      	strb	r3, [r7, #22]
				break;
 8009afa:	e008      	b.n	8009b0e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8009afc:	7dbb      	ldrb	r3, [r7, #22]
 8009afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b02:	75bb      	strb	r3, [r7, #22]
				break;
 8009b04:	e003      	b.n	8009b0e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009b06:	23fc      	movs	r3, #252	; 0xfc
 8009b08:	75fb      	strb	r3, [r7, #23]
 8009b0a:	e000      	b.n	8009b0e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8009b0c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8009b0e:	7bfb      	ldrb	r3, [r7, #15]
 8009b10:	7dba      	ldrb	r2, [r7, #22]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d01e      	beq.n	8009b54 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8009b16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d107      	bne.n	8009b2e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8009b1e:	7dbb      	ldrb	r3, [r7, #22]
 8009b20:	461a      	mov	r2, r3
 8009b22:	2101      	movs	r1, #1
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f004 fa2b 	bl	800df80 <VL53L0X_WrByte>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8009b2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d103      	bne.n	8009b3e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	7dba      	ldrb	r2, [r7, #22]
 8009b3a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8009b3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d106      	bne.n	8009b54 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8009b4c:	6939      	ldr	r1, [r7, #16]
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7ff ff0e 	bl	8009970 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009b54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	607b      	str	r3, [r7, #4]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	72fb      	strb	r3, [r7, #11]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b72:	2300      	movs	r3, #0
 8009b74:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8009b7c:	7afb      	ldrb	r3, [r7, #11]
 8009b7e:	2b04      	cmp	r3, #4
 8009b80:	d836      	bhi.n	8009bf0 <sequence_step_enabled+0x90>
 8009b82:	a201      	add	r2, pc, #4	; (adr r2, 8009b88 <sequence_step_enabled+0x28>)
 8009b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b88:	08009b9d 	.word	0x08009b9d
 8009b8c:	08009baf 	.word	0x08009baf
 8009b90:	08009bc1 	.word	0x08009bc1
 8009b94:	08009bd3 	.word	0x08009bd3
 8009b98:	08009be5 	.word	0x08009be5
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8009b9c:	7abb      	ldrb	r3, [r7, #10]
 8009b9e:	111b      	asrs	r3, r3, #4
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	701a      	strb	r2, [r3, #0]
		break;
 8009bac:	e022      	b.n	8009bf4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8009bae:	7abb      	ldrb	r3, [r7, #10]
 8009bb0:	10db      	asrs	r3, r3, #3
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f003 0301 	and.w	r3, r3, #1
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	701a      	strb	r2, [r3, #0]
		break;
 8009bbe:	e019      	b.n	8009bf4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8009bc0:	7abb      	ldrb	r3, [r7, #10]
 8009bc2:	109b      	asrs	r3, r3, #2
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	701a      	strb	r2, [r3, #0]
		break;
 8009bd0:	e010      	b.n	8009bf4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8009bd2:	7abb      	ldrb	r3, [r7, #10]
 8009bd4:	119b      	asrs	r3, r3, #6
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	f003 0301 	and.w	r3, r3, #1
 8009bdc:	b2da      	uxtb	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	701a      	strb	r2, [r3, #0]
		break;
 8009be2:	e007      	b.n	8009bf4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8009be4:	7abb      	ldrb	r3, [r7, #10]
 8009be6:	09db      	lsrs	r3, r3, #7
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	701a      	strb	r2, [r3, #0]
		break;
 8009bee:	e001      	b.n	8009bf4 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009bf0:	23fc      	movs	r3, #252	; 0xfc
 8009bf2:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009bf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	371c      	adds	r7, #28
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009c16:	f107 030e 	add.w	r3, r7, #14
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f004 fa30 	bl	800e084 <VL53L0X_RdByte>
 8009c24:	4603      	mov	r3, r0
 8009c26:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8009c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d107      	bne.n	8009c40 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8009c30:	7bba      	ldrb	r2, [r7, #14]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	2100      	movs	r1, #0
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7ff ff92 	bl	8009b60 <sequence_step_enabled>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d108      	bne.n	8009c5a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8009c48:	7bba      	ldrb	r2, [r7, #14]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	3302      	adds	r3, #2
 8009c4e:	2101      	movs	r1, #1
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7ff ff85 	bl	8009b60 <sequence_step_enabled>
 8009c56:	4603      	mov	r3, r0
 8009c58:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d108      	bne.n	8009c74 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8009c62:	7bba      	ldrb	r2, [r7, #14]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	3301      	adds	r3, #1
 8009c68:	2102      	movs	r1, #2
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7ff ff78 	bl	8009b60 <sequence_step_enabled>
 8009c70:	4603      	mov	r3, r0
 8009c72:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d108      	bne.n	8009c8e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8009c7c:	7bba      	ldrb	r2, [r7, #14]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	3303      	adds	r3, #3
 8009c82:	2103      	movs	r1, #3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff ff6b 	bl	8009b60 <sequence_step_enabled>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d108      	bne.n	8009ca8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8009c96:	7bba      	ldrb	r2, [r7, #14]
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	3304      	adds	r3, #4
 8009c9c:	2104      	movs	r1, #4
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7ff ff5e 	bl	8009b60 <sequence_step_enabled>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8009cc2:	f107 030c 	add.w	r3, r7, #12
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	21f8      	movs	r1, #248	; 0xf8
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f004 fa04 	bl	800e0d8 <VL53L0X_RdWord>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8009cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d108      	bne.n	8009cee <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8009cdc:	f107 0308 	add.w	r3, r7, #8
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	2104      	movs	r1, #4
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f004 fa2f 	bl	800e148 <VL53L0X_RdDWord>
 8009cea:	4603      	mov	r3, r0
 8009cec:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10c      	bne.n	8009d10 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8009cf6:	89bb      	ldrh	r3, [r7, #12]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d005      	beq.n	8009d08 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	89ba      	ldrh	r2, [r7, #12]
 8009d00:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3710      	adds	r7, #16
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	7f1b      	ldrb	r3, [r3, #28]
 8009d2e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	7bba      	ldrb	r2, [r7, #14]
 8009d34:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b086      	sub	sp, #24
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
 8009d4e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d50:	2300      	movs	r3, #0
 8009d52:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8009d54:	f107 030e 	add.w	r3, r7, #14
 8009d58:	461a      	mov	r2, r3
 8009d5a:	2120      	movs	r1, #32
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f004 f9bb 	bl	800e0d8 <VL53L0X_RdWord>
 8009d62:	4603      	mov	r3, r0
 8009d64:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8009d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d118      	bne.n	8009da0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8009d6e:	89fb      	ldrh	r3, [r7, #14]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d109      	bne.n	8009d88 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a1b      	ldr	r3, [r3, #32]
 8009d78:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	693a      	ldr	r2, [r7, #16]
 8009d7e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	771a      	strb	r2, [r3, #28]
 8009d86:	e00b      	b.n	8009da0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8009d88:	89fb      	ldrh	r3, [r7, #14]
 8009d8a:	00db      	lsls	r3, r3, #3
 8009d8c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	693a      	ldr	r2, [r7, #16]
 8009d92:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009da0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3718      	adds	r7, #24
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	460b      	mov	r3, r1
 8009db6:	807b      	strh	r3, [r7, #2]
 8009db8:	4613      	mov	r3, r2
 8009dba:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009dcc:	887b      	ldrh	r3, [r7, #2]
 8009dce:	2b05      	cmp	r3, #5
 8009dd0:	d902      	bls.n	8009dd8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009dd2:	23fc      	movs	r3, #252	; 0xfc
 8009dd4:	75fb      	strb	r3, [r7, #23]
 8009dd6:	e05b      	b.n	8009e90 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8009dd8:	787b      	ldrb	r3, [r7, #1]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d106      	bne.n	8009dec <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8009dde:	2300      	movs	r3, #0
 8009de0:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8009de2:	2300      	movs	r3, #0
 8009de4:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8009de6:	2301      	movs	r3, #1
 8009de8:	73bb      	strb	r3, [r7, #14]
 8009dea:	e00a      	b.n	8009e02 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009dec:	887b      	ldrh	r3, [r7, #2]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	330c      	adds	r3, #12
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4413      	add	r3, r2
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8009e02:	887b      	ldrh	r3, [r7, #2]
 8009e04:	2b05      	cmp	r3, #5
 8009e06:	d841      	bhi.n	8009e8c <VL53L0X_SetLimitCheckEnable+0xe0>
 8009e08:	a201      	add	r2, pc, #4	; (adr r2, 8009e10 <VL53L0X_SetLimitCheckEnable+0x64>)
 8009e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0e:	bf00      	nop
 8009e10:	08009e29 	.word	0x08009e29
 8009e14:	08009e33 	.word	0x08009e33
 8009e18:	08009e49 	.word	0x08009e49
 8009e1c:	08009e53 	.word	0x08009e53
 8009e20:	08009e5d 	.word	0x08009e5d
 8009e24:	08009e75 	.word	0x08009e75

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	7bfa      	ldrb	r2, [r7, #15]
 8009e2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8009e30:	e02e      	b.n	8009e90 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	461a      	mov	r2, r3
 8009e3a:	2144      	movs	r1, #68	; 0x44
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f004 f8c3 	bl	800dfc8 <VL53L0X_WrWord>
 8009e42:	4603      	mov	r3, r0
 8009e44:	75fb      	strb	r3, [r7, #23]

			break;
 8009e46:	e023      	b.n	8009e90 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	7bfa      	ldrb	r2, [r7, #15]
 8009e4c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8009e50:	e01e      	b.n	8009e90 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	7bfa      	ldrb	r2, [r7, #15]
 8009e56:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8009e5a:	e019      	b.n	8009e90 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8009e5c:	7bbb      	ldrb	r3, [r7, #14]
 8009e5e:	005b      	lsls	r3, r3, #1
 8009e60:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009e62:	7b7b      	ldrb	r3, [r7, #13]
 8009e64:	22fe      	movs	r2, #254	; 0xfe
 8009e66:	2160      	movs	r1, #96	; 0x60
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f004 f8d7 	bl	800e01c <VL53L0X_UpdateByte>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8009e72:	e00d      	b.n	8009e90 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8009e74:	7bbb      	ldrb	r3, [r7, #14]
 8009e76:	011b      	lsls	r3, r3, #4
 8009e78:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009e7a:	7b7b      	ldrb	r3, [r7, #13]
 8009e7c:	22ef      	movs	r2, #239	; 0xef
 8009e7e:	2160      	movs	r1, #96	; 0x60
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f004 f8cb 	bl	800e01c <VL53L0X_UpdateByte>
 8009e86:	4603      	mov	r3, r0
 8009e88:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8009e8a:	e001      	b.n	8009e90 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e8c:	23fc      	movs	r3, #252	; 0xfc
 8009e8e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009e90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10f      	bne.n	8009eb8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8009e98:	787b      	ldrb	r3, [r7, #1]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d106      	bne.n	8009eac <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009e9e:	887b      	ldrh	r3, [r7, #2]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009eaa:	e005      	b.n	8009eb8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009eac:	887b      	ldrh	r3, [r7, #2]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009eb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3718      	adds	r7, #24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b087      	sub	sp, #28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009ed6:	897b      	ldrh	r3, [r7, #10]
 8009ed8:	2b05      	cmp	r3, #5
 8009eda:	d905      	bls.n	8009ee8 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009edc:	23fc      	movs	r3, #252	; 0xfc
 8009ede:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	701a      	strb	r2, [r3, #0]
 8009ee6:	e008      	b.n	8009efa <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009ee8:	897b      	ldrh	r3, [r7, #10]
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	4413      	add	r3, r2
 8009eee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ef2:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	7dba      	ldrb	r2, [r7, #22]
 8009ef8:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	371c      	adds	r7, #28
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
	...

08009f0c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	460b      	mov	r3, r1
 8009f16:	607a      	str	r2, [r7, #4]
 8009f18:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8009f1e:	897b      	ldrh	r3, [r7, #10]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	4413      	add	r3, r2
 8009f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f28:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8009f2a:	7dbb      	ldrb	r3, [r7, #22]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d107      	bne.n	8009f40 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009f30:	897b      	ldrh	r3, [r7, #10]
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	330c      	adds	r3, #12
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	605a      	str	r2, [r3, #4]
 8009f3e:	e040      	b.n	8009fc2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8009f40:	897b      	ldrh	r3, [r7, #10]
 8009f42:	2b05      	cmp	r3, #5
 8009f44:	d830      	bhi.n	8009fa8 <VL53L0X_SetLimitCheckValue+0x9c>
 8009f46:	a201      	add	r2, pc, #4	; (adr r2, 8009f4c <VL53L0X_SetLimitCheckValue+0x40>)
 8009f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4c:	08009f65 	.word	0x08009f65
 8009f50:	08009f6d 	.word	0x08009f6d
 8009f54:	08009f83 	.word	0x08009f83
 8009f58:	08009f8b 	.word	0x08009f8b
 8009f5c:	08009f93 	.word	0x08009f93
 8009f60:	08009f93 	.word	0x08009f93

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8009f6a:	e01f      	b.n	8009fac <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	461a      	mov	r2, r3
 8009f74:	2144      	movs	r1, #68	; 0x44
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f004 f826 	bl	800dfc8 <VL53L0X_WrWord>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009f80:	e014      	b.n	8009fac <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8009f88:	e010      	b.n	8009fac <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8009f90:	e00c      	b.n	8009fac <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	461a      	mov	r2, r3
 8009f9a:	2164      	movs	r1, #100	; 0x64
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f004 f813 	bl	800dfc8 <VL53L0X_WrWord>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009fa6:	e001      	b.n	8009fac <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009fa8:	23fc      	movs	r3, #252	; 0xfc
 8009faa:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009fac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d106      	bne.n	8009fc2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009fb4:	897b      	ldrh	r3, [r7, #10]
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	330c      	adds	r3, #12
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3718      	adds	r7, #24
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop

08009fd0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b088      	sub	sp, #32
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	607a      	str	r2, [r7, #4]
 8009fdc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8009fe6:	897b      	ldrh	r3, [r7, #10]
 8009fe8:	2b05      	cmp	r3, #5
 8009fea:	d847      	bhi.n	800a07c <VL53L0X_GetLimitCheckValue+0xac>
 8009fec:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <VL53L0X_GetLimitCheckValue+0x24>)
 8009fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff2:	bf00      	nop
 8009ff4:	0800a00d 	.word	0x0800a00d
 8009ff8:	0800a019 	.word	0x0800a019
 8009ffc:	0800a03f 	.word	0x0800a03f
 800a000:	0800a04b 	.word	0x0800a04b
 800a004:	0800a057 	.word	0x0800a057
 800a008:	0800a057 	.word	0x0800a057

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a010:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800a012:	2300      	movs	r3, #0
 800a014:	77bb      	strb	r3, [r7, #30]
		break;
 800a016:	e033      	b.n	800a080 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800a018:	f107 0316 	add.w	r3, r7, #22
 800a01c:	461a      	mov	r2, r3
 800a01e:	2144      	movs	r1, #68	; 0x44
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f004 f859 	bl	800e0d8 <VL53L0X_RdWord>
 800a026:	4603      	mov	r3, r0
 800a028:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800a02a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d102      	bne.n	800a038 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800a032:	8afb      	ldrh	r3, [r7, #22]
 800a034:	025b      	lsls	r3, r3, #9
 800a036:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800a038:	2301      	movs	r3, #1
 800a03a:	77bb      	strb	r3, [r7, #30]
		break;
 800a03c:	e020      	b.n	800a080 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a042:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	77bb      	strb	r3, [r7, #30]
		break;
 800a048:	e01a      	b.n	800a080 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800a050:	2300      	movs	r3, #0
 800a052:	77bb      	strb	r3, [r7, #30]
		break;
 800a054:	e014      	b.n	800a080 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800a056:	f107 0316 	add.w	r3, r7, #22
 800a05a:	461a      	mov	r2, r3
 800a05c:	2164      	movs	r1, #100	; 0x64
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f004 f83a 	bl	800e0d8 <VL53L0X_RdWord>
 800a064:	4603      	mov	r3, r0
 800a066:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800a068:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d102      	bne.n	800a076 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800a070:	8afb      	ldrh	r3, [r7, #22]
 800a072:	025b      	lsls	r3, r3, #9
 800a074:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800a076:	2300      	movs	r3, #0
 800a078:	77bb      	strb	r3, [r7, #30]
		break;
 800a07a:	e001      	b.n	800a080 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a07c:	23fc      	movs	r3, #252	; 0xfc
 800a07e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a080:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d12a      	bne.n	800a0de <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800a088:	7fbb      	ldrb	r3, [r7, #30]
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d124      	bne.n	800a0d8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d110      	bne.n	800a0b6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800a094:	897b      	ldrh	r3, [r7, #10]
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	330c      	adds	r3, #12
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	4413      	add	r3, r2
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	69ba      	ldr	r2, [r7, #24]
 800a0a6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a0a8:	897b      	ldrh	r3, [r7, #10]
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a0b4:	e013      	b.n	800a0de <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	69ba      	ldr	r2, [r7, #24]
 800a0ba:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a0bc:	897b      	ldrh	r3, [r7, #10]
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	330c      	adds	r3, #12
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4413      	add	r3, r2
 800a0c6:	69ba      	ldr	r2, [r7, #24]
 800a0c8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a0ca:	897b      	ldrh	r3, [r7, #10]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a0d6:	e002      	b.n	800a0de <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	69ba      	ldr	r2, [r7, #24]
 800a0dc:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a0de:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3720      	adds	r7, #32
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop

0800a0ec <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800a0fa:	f107 030e 	add.w	r3, r7, #14
 800a0fe:	461a      	mov	r2, r3
 800a100:	2101      	movs	r1, #1
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f003 ffbe 	bl	800e084 <VL53L0X_RdByte>
 800a108:	4603      	mov	r3, r0
 800a10a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800a10c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10e      	bne.n	800a132 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800a114:	7bba      	ldrb	r2, [r7, #14]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800a11c:	7bbb      	ldrb	r3, [r7, #14]
 800a11e:	b25b      	sxtb	r3, r3
 800a120:	2b00      	cmp	r3, #0
 800a122:	da03      	bge.n	800a12c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	2201      	movs	r2, #1
 800a128:	701a      	strb	r2, [r3, #0]
 800a12a:	e002      	b.n	800a132 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	2200      	movs	r2, #0
 800a130:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d104      	bne.n	800a144 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	781a      	ldrb	r2, [r3, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a144:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a158:	2300      	movs	r3, #0
 800a15a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800a15c:	f107 030e 	add.w	r3, r7, #14
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f7ff fbd2 	bl	800990c <VL53L0X_GetDeviceMode>
 800a168:	4603      	mov	r3, r0
 800a16a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800a16c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d107      	bne.n	800a184 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a174:	7bbb      	ldrb	r3, [r7, #14]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d104      	bne.n	800a184 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f898 	bl	800a2b0 <VL53L0X_StartMeasurement>
 800a180:	4603      	mov	r3, r0
 800a182:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d104      	bne.n	800a196 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f001 fb6f 	bl	800b870 <VL53L0X_measurement_poll_for_completion>
 800a192:	4603      	mov	r3, r0
 800a194:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800a196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d106      	bne.n	800a1ac <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a19e:	7bbb      	ldrb	r3, [r7, #14]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d103      	bne.n	800a1ac <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2203      	movs	r2, #3
 800a1a8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800a1ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b086      	sub	sp, #24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	68b9      	ldr	r1, [r7, #8]
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f001 fb11 	bl	800b7f6 <VL53L0X_perform_ref_calibration>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800a1d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3718      	adds	r7, #24
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800a1fa:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800a1fc:	7dbb      	ldrb	r3, [r7, #22]
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d005      	beq.n	800a20e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800a202:	7dbb      	ldrb	r3, [r7, #22]
 800a204:	2b02      	cmp	r3, #2
 800a206:	d002      	beq.n	800a20e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800a208:	7dbb      	ldrb	r3, [r7, #22]
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d147      	bne.n	800a29e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800a20e:	f107 030c 	add.w	r3, r7, #12
 800a212:	f107 0210 	add.w	r2, r7, #16
 800a216:	2101      	movs	r1, #1
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 fbc3 	bl	800a9a4 <VL53L0X_GetInterruptThresholds>
 800a21e:	4603      	mov	r3, r0
 800a220:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800a228:	d803      	bhi.n	800a232 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800a22a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800a22c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800a230:	d935      	bls.n	800a29e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800a232:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d131      	bne.n	800a29e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800a23a:	78fb      	ldrb	r3, [r7, #3]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d006      	beq.n	800a24e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800a240:	491a      	ldr	r1, [pc, #104]	; (800a2ac <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f002 ff86 	bl	800d154 <VL53L0X_load_tuning_settings>
 800a248:	4603      	mov	r3, r0
 800a24a:	75fb      	strb	r3, [r7, #23]
 800a24c:	e027      	b.n	800a29e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800a24e:	2204      	movs	r2, #4
 800a250:	21ff      	movs	r1, #255	; 0xff
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f003 fe94 	bl	800df80 <VL53L0X_WrByte>
 800a258:	4603      	mov	r3, r0
 800a25a:	461a      	mov	r2, r3
 800a25c:	7dfb      	ldrb	r3, [r7, #23]
 800a25e:	4313      	orrs	r3, r2
 800a260:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800a262:	2200      	movs	r2, #0
 800a264:	2170      	movs	r1, #112	; 0x70
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f003 fe8a 	bl	800df80 <VL53L0X_WrByte>
 800a26c:	4603      	mov	r3, r0
 800a26e:	461a      	mov	r2, r3
 800a270:	7dfb      	ldrb	r3, [r7, #23]
 800a272:	4313      	orrs	r3, r2
 800a274:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a276:	2200      	movs	r2, #0
 800a278:	21ff      	movs	r1, #255	; 0xff
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f003 fe80 	bl	800df80 <VL53L0X_WrByte>
 800a280:	4603      	mov	r3, r0
 800a282:	461a      	mov	r2, r3
 800a284:	7dfb      	ldrb	r3, [r7, #23]
 800a286:	4313      	orrs	r3, r2
 800a288:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a28a:	2200      	movs	r2, #0
 800a28c:	2180      	movs	r1, #128	; 0x80
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f003 fe76 	bl	800df80 <VL53L0X_WrByte>
 800a294:	4603      	mov	r3, r0
 800a296:	461a      	mov	r2, r3
 800a298:	7dfb      	ldrb	r3, [r7, #23]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800a29e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3718      	adds	r7, #24
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	20000100 	.word	0x20000100

0800a2b0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800a2c0:	f107 030e 	add.w	r3, r7, #14
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f7ff fb20 	bl	800990c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	2180      	movs	r1, #128	; 0x80
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f003 fe55 	bl	800df80 <VL53L0X_WrByte>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a2da:	2201      	movs	r2, #1
 800a2dc:	21ff      	movs	r1, #255	; 0xff
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f003 fe4e 	bl	800df80 <VL53L0X_WrByte>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f003 fe47 	bl	800df80 <VL53L0X_WrByte>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	2191      	movs	r1, #145	; 0x91
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f003 fe3d 	bl	800df80 <VL53L0X_WrByte>
 800a306:	4603      	mov	r3, r0
 800a308:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a30a:	2201      	movs	r2, #1
 800a30c:	2100      	movs	r1, #0
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f003 fe36 	bl	800df80 <VL53L0X_WrByte>
 800a314:	4603      	mov	r3, r0
 800a316:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a318:	2200      	movs	r2, #0
 800a31a:	21ff      	movs	r1, #255	; 0xff
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f003 fe2f 	bl	800df80 <VL53L0X_WrByte>
 800a322:	4603      	mov	r3, r0
 800a324:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a326:	2200      	movs	r2, #0
 800a328:	2180      	movs	r1, #128	; 0x80
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f003 fe28 	bl	800df80 <VL53L0X_WrByte>
 800a330:	4603      	mov	r3, r0
 800a332:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800a334:	7bbb      	ldrb	r3, [r7, #14]
 800a336:	2b03      	cmp	r3, #3
 800a338:	d054      	beq.n	800a3e4 <VL53L0X_StartMeasurement+0x134>
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	dc6c      	bgt.n	800a418 <VL53L0X_StartMeasurement+0x168>
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d002      	beq.n	800a348 <VL53L0X_StartMeasurement+0x98>
 800a342:	2b01      	cmp	r3, #1
 800a344:	d034      	beq.n	800a3b0 <VL53L0X_StartMeasurement+0x100>
 800a346:	e067      	b.n	800a418 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800a348:	2201      	movs	r2, #1
 800a34a:	2100      	movs	r1, #0
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f003 fe17 	bl	800df80 <VL53L0X_WrByte>
 800a352:	4603      	mov	r3, r0
 800a354:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800a356:	7bfb      	ldrb	r3, [r7, #15]
 800a358:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800a35a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d15d      	bne.n	800a41e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800a362:	2300      	movs	r3, #0
 800a364:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d008      	beq.n	800a37e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800a36c:	f107 030d 	add.w	r3, r7, #13
 800a370:	461a      	mov	r2, r3
 800a372:	2100      	movs	r1, #0
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f003 fe85 	bl	800e084 <VL53L0X_RdByte>
 800a37a:	4603      	mov	r3, r0
 800a37c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	3301      	adds	r3, #1
 800a382:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800a384:	7b7a      	ldrb	r2, [r7, #13]
 800a386:	7bfb      	ldrb	r3, [r7, #15]
 800a388:	4013      	ands	r3, r2
 800a38a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a38c:	7bfa      	ldrb	r2, [r7, #15]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d107      	bne.n	800a3a2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800a392:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d103      	bne.n	800a3a2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a3a0:	d3e1      	bcc.n	800a366 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a3a8:	d339      	bcc.n	800a41e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800a3aa:	23f9      	movs	r3, #249	; 0xf9
 800a3ac:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800a3ae:	e036      	b.n	800a41e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a3b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d105      	bne.n	800a3c4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a3b8:	2101      	movs	r1, #1
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff ff12 	bl	800a1e4 <VL53L0X_CheckAndLoadInterruptSettings>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a3c4:	2202      	movs	r2, #2
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f003 fdd9 	bl	800df80 <VL53L0X_WrByte>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800a3d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d123      	bne.n	800a422 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2204      	movs	r2, #4
 800a3de:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800a3e2:	e01e      	b.n	800a422 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a3e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d105      	bne.n	800a3f8 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7ff fef8 	bl	800a1e4 <VL53L0X_CheckAndLoadInterruptSettings>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a3f8:	2204      	movs	r2, #4
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f003 fdbf 	bl	800df80 <VL53L0X_WrByte>
 800a402:	4603      	mov	r3, r0
 800a404:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800a406:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d10b      	bne.n	800a426 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2204      	movs	r2, #4
 800a412:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800a416:	e006      	b.n	800a426 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a418:	23f8      	movs	r3, #248	; 0xf8
 800a41a:	75fb      	strb	r3, [r7, #23]
 800a41c:	e004      	b.n	800a428 <VL53L0X_StartMeasurement+0x178>
		break;
 800a41e:	bf00      	nop
 800a420:	e002      	b.n	800a428 <VL53L0X_StartMeasurement+0x178>
		break;
 800a422:	bf00      	nop
 800a424:	e000      	b.n	800a428 <VL53L0X_StartMeasurement+0x178>
		break;
 800a426:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800a428:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3718      	adds	r7, #24
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a43e:	2300      	movs	r3, #0
 800a440:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800a448:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800a44a:	7bbb      	ldrb	r3, [r7, #14]
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	d112      	bne.n	800a476 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800a450:	f107 0308 	add.w	r3, r7, #8
 800a454:	4619      	mov	r1, r3
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 fb1a 	bl	800aa90 <VL53L0X_GetInterruptMaskStatus>
 800a45c:	4603      	mov	r3, r0
 800a45e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	2b04      	cmp	r3, #4
 800a464:	d103      	bne.n	800a46e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	2201      	movs	r2, #1
 800a46a:	701a      	strb	r2, [r3, #0]
 800a46c:	e01c      	b.n	800a4a8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2200      	movs	r2, #0
 800a472:	701a      	strb	r2, [r3, #0]
 800a474:	e018      	b.n	800a4a8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800a476:	f107 030d 	add.w	r3, r7, #13
 800a47a:	461a      	mov	r2, r3
 800a47c:	2114      	movs	r1, #20
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f003 fe00 	bl	800e084 <VL53L0X_RdByte>
 800a484:	4603      	mov	r3, r0
 800a486:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800a488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10b      	bne.n	800a4a8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800a490:	7b7b      	ldrb	r3, [r7, #13]
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	2b00      	cmp	r3, #0
 800a498:	d003      	beq.n	800a4a2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	2201      	movs	r2, #1
 800a49e:	701a      	strb	r2, [r3, #0]
 800a4a0:	e002      	b.n	800a4a8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a4a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a4b4:	b5b0      	push	{r4, r5, r7, lr}
 800a4b6:	b096      	sub	sp, #88	; 0x58
 800a4b8:	af02      	add	r7, sp, #8
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800a4c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a4c8:	230c      	movs	r3, #12
 800a4ca:	2114      	movs	r1, #20
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f003 fd2b 	bl	800df28 <VL53L0X_ReadMulti>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800a4d8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f040 80d1 	bne.w	800a684 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800a4ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	021b      	lsls	r3, r3, #8
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	4413      	add	r3, r2
 800a500:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	2200      	movs	r2, #0
 800a508:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800a50a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a50e:	b29b      	uxth	r3, r3
 800a510:	021b      	lsls	r3, r3, #8
 800a512:	b29a      	uxth	r2, r3
 800a514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a518:	b29b      	uxth	r3, r3
 800a51a:	4413      	add	r3, r2
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	025b      	lsls	r3, r3, #9
 800a520:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a526:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800a528:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	021b      	lsls	r3, r3, #8
 800a530:	b29a      	uxth	r2, r3
 800a532:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a536:	b29b      	uxth	r3, r3
 800a538:	4413      	add	r3, r2
 800a53a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800a53e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a542:	025b      	lsls	r3, r3, #9
 800a544:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800a54a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a54e:	b29b      	uxth	r3, r3
 800a550:	021b      	lsls	r3, r3, #8
 800a552:	b29a      	uxth	r2, r3
 800a554:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a558:	b29b      	uxth	r3, r3
 800a55a:	4413      	add	r3, r2
 800a55c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a566:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800a568:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a56c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800a576:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800a57e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800a582:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a584:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a588:	d046      	beq.n	800a618 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800a58a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a58c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a590:	fb02 f303 	mul.w	r3, r2, r3
 800a594:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a598:	4a57      	ldr	r2, [pc, #348]	; (800a6f8 <VL53L0X_GetRangingMeasurementData+0x244>)
 800a59a:	fb82 1203 	smull	r1, r2, r2, r3
 800a59e:	1192      	asrs	r2, r2, #6
 800a5a0:	17db      	asrs	r3, r3, #31
 800a5a2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800a5a4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a1b      	ldr	r3, [r3, #32]
 800a5ac:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	7f1b      	ldrb	r3, [r3, #28]
 800a5b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800a5b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d02c      	beq.n	800a618 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800a5be:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a5c0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a5c4:	fb02 f303 	mul.w	r3, r2, r3
 800a5c8:	121a      	asrs	r2, r3, #8
					<= 0) {
 800a5ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d10d      	bne.n	800a5ec <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800a5d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d004      	beq.n	800a5e2 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800a5d8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800a5dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a5e0:	e016      	b.n	800a610 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800a5e2:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800a5e6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a5ea:	e011      	b.n	800a610 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800a5ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a5f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5f2:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800a5f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a5f8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800a5fc:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800a600:	121b      	asrs	r3, r3, #8
 800a602:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800a604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a606:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800a608:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800a60c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800a610:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a614:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800a618:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00d      	beq.n	800a63c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800a620:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a624:	089b      	lsrs	r3, r3, #2
 800a626:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800a62c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a630:	b2db      	uxtb	r3, r3
 800a632:	019b      	lsls	r3, r3, #6
 800a634:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	75da      	strb	r2, [r3, #23]
 800a63a:	e006      	b.n	800a64a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a642:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	2200      	movs	r2, #0
 800a648:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800a64a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a64e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800a652:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800a656:	9301      	str	r3, [sp, #4]
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	9300      	str	r3, [sp, #0]
 800a65c:	4613      	mov	r3, r2
 800a65e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f003 fa15 	bl	800da90 <VL53L0X_get_pal_range_status>
 800a666:	4603      	mov	r3, r0
 800a668:	461a      	mov	r2, r3
 800a66a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a66e:	4313      	orrs	r3, r2
 800a670:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800a674:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d103      	bne.n	800a684 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800a67c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a684:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d12f      	bne.n	800a6ec <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f107 040c 	add.w	r4, r7, #12
 800a692:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a69a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a69e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800a6a6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800a6ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800a6b4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800a6ba:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800a6c0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800a6c6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800a6cc:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800a6d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800a6dc:	f107 050c 	add.w	r5, r7, #12
 800a6e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a6e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a6ec:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3750      	adds	r7, #80	; 0x50
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bdb0      	pop	{r4, r5, r7, pc}
 800a6f8:	10624dd3 	.word	0x10624dd3

0800a6fc <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a706:	2300      	movs	r3, #0
 800a708:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800a70a:	2100      	movs	r1, #0
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f7ff f8d1 	bl	80098b4 <VL53L0X_SetDeviceMode>
 800a712:	4603      	mov	r3, r0
 800a714:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d104      	bne.n	800a728 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7ff fd16 	bl	800a150 <VL53L0X_PerformSingleMeasurement>
 800a724:	4603      	mov	r3, r0
 800a726:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d105      	bne.n	800a73c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800a730:	6839      	ldr	r1, [r7, #0]
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7ff febe 	bl	800a4b4 <VL53L0X_GetRangingMeasurementData>
 800a738:	4603      	mov	r3, r0
 800a73a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800a73c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d105      	bne.n	800a750 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a744:	2100      	movs	r1, #0
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f962 	bl	800aa10 <VL53L0X_ClearInterruptMask>
 800a74c:	4603      	mov	r3, r0
 800a74e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800a750:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	4608      	mov	r0, r1
 800a766:	4611      	mov	r1, r2
 800a768:	461a      	mov	r2, r3
 800a76a:	4603      	mov	r3, r0
 800a76c:	70fb      	strb	r3, [r7, #3]
 800a76e:	460b      	mov	r3, r1
 800a770:	70bb      	strb	r3, [r7, #2]
 800a772:	4613      	mov	r3, r2
 800a774:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a776:	2300      	movs	r3, #0
 800a778:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800a77a:	78fb      	ldrb	r3, [r7, #3]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d002      	beq.n	800a786 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800a780:	23f6      	movs	r3, #246	; 0xf6
 800a782:	73fb      	strb	r3, [r7, #15]
 800a784:	e107      	b.n	800a996 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800a786:	78bb      	ldrb	r3, [r7, #2]
 800a788:	2b14      	cmp	r3, #20
 800a78a:	d110      	bne.n	800a7ae <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a78c:	7e3b      	ldrb	r3, [r7, #24]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d102      	bne.n	800a798 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800a792:	2310      	movs	r3, #16
 800a794:	73bb      	strb	r3, [r7, #14]
 800a796:	e001      	b.n	800a79c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800a798:	2301      	movs	r3, #1
 800a79a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800a79c:	7bbb      	ldrb	r3, [r7, #14]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	2184      	movs	r1, #132	; 0x84
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f003 fbec 	bl	800df80 <VL53L0X_WrByte>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	73fb      	strb	r3, [r7, #15]
 800a7ac:	e0f3      	b.n	800a996 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800a7ae:	78bb      	ldrb	r3, [r7, #2]
 800a7b0:	2b15      	cmp	r3, #21
 800a7b2:	f040 8097 	bne.w	800a8e4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	21ff      	movs	r1, #255	; 0xff
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f003 fbe0 	bl	800df80 <VL53L0X_WrByte>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	7bfb      	ldrb	r3, [r7, #15]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f003 fbd6 	bl	800df80 <VL53L0X_WrByte>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	7bfb      	ldrb	r3, [r7, #15]
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a7de:	2200      	movs	r2, #0
 800a7e0:	21ff      	movs	r1, #255	; 0xff
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f003 fbcc 	bl	800df80 <VL53L0X_WrByte>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	7bfb      	ldrb	r3, [r7, #15]
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	2180      	movs	r1, #128	; 0x80
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f003 fbc2 	bl	800df80 <VL53L0X_WrByte>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	461a      	mov	r2, r3
 800a800:	7bfb      	ldrb	r3, [r7, #15]
 800a802:	4313      	orrs	r3, r2
 800a804:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800a806:	2202      	movs	r2, #2
 800a808:	2185      	movs	r1, #133	; 0x85
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f003 fbb8 	bl	800df80 <VL53L0X_WrByte>
 800a810:	4603      	mov	r3, r0
 800a812:	461a      	mov	r2, r3
 800a814:	7bfb      	ldrb	r3, [r7, #15]
 800a816:	4313      	orrs	r3, r2
 800a818:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800a81a:	2204      	movs	r2, #4
 800a81c:	21ff      	movs	r1, #255	; 0xff
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f003 fbae 	bl	800df80 <VL53L0X_WrByte>
 800a824:	4603      	mov	r3, r0
 800a826:	461a      	mov	r2, r3
 800a828:	7bfb      	ldrb	r3, [r7, #15]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800a82e:	2200      	movs	r2, #0
 800a830:	21cd      	movs	r1, #205	; 0xcd
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f003 fba4 	bl	800df80 <VL53L0X_WrByte>
 800a838:	4603      	mov	r3, r0
 800a83a:	461a      	mov	r2, r3
 800a83c:	7bfb      	ldrb	r3, [r7, #15]
 800a83e:	4313      	orrs	r3, r2
 800a840:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800a842:	2211      	movs	r2, #17
 800a844:	21cc      	movs	r1, #204	; 0xcc
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f003 fb9a 	bl	800df80 <VL53L0X_WrByte>
 800a84c:	4603      	mov	r3, r0
 800a84e:	461a      	mov	r2, r3
 800a850:	7bfb      	ldrb	r3, [r7, #15]
 800a852:	4313      	orrs	r3, r2
 800a854:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800a856:	2207      	movs	r2, #7
 800a858:	21ff      	movs	r1, #255	; 0xff
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f003 fb90 	bl	800df80 <VL53L0X_WrByte>
 800a860:	4603      	mov	r3, r0
 800a862:	461a      	mov	r2, r3
 800a864:	7bfb      	ldrb	r3, [r7, #15]
 800a866:	4313      	orrs	r3, r2
 800a868:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800a86a:	2200      	movs	r2, #0
 800a86c:	21be      	movs	r1, #190	; 0xbe
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f003 fb86 	bl	800df80 <VL53L0X_WrByte>
 800a874:	4603      	mov	r3, r0
 800a876:	461a      	mov	r2, r3
 800a878:	7bfb      	ldrb	r3, [r7, #15]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800a87e:	2206      	movs	r2, #6
 800a880:	21ff      	movs	r1, #255	; 0xff
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f003 fb7c 	bl	800df80 <VL53L0X_WrByte>
 800a888:	4603      	mov	r3, r0
 800a88a:	461a      	mov	r2, r3
 800a88c:	7bfb      	ldrb	r3, [r7, #15]
 800a88e:	4313      	orrs	r3, r2
 800a890:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800a892:	2209      	movs	r2, #9
 800a894:	21cc      	movs	r1, #204	; 0xcc
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f003 fb72 	bl	800df80 <VL53L0X_WrByte>
 800a89c:	4603      	mov	r3, r0
 800a89e:	461a      	mov	r2, r3
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	21ff      	movs	r1, #255	; 0xff
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f003 fb68 	bl	800df80 <VL53L0X_WrByte>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	21ff      	movs	r1, #255	; 0xff
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f003 fb5e 	bl	800df80 <VL53L0X_WrByte>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f003 fb54 	bl	800df80 <VL53L0X_WrByte>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	461a      	mov	r2, r3
 800a8dc:	7bfb      	ldrb	r3, [r7, #15]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	73fb      	strb	r3, [r7, #15]
 800a8e2:	e058      	b.n	800a996 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800a8e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d121      	bne.n	800a930 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800a8ec:	787b      	ldrb	r3, [r7, #1]
 800a8ee:	2b04      	cmp	r3, #4
 800a8f0:	d81b      	bhi.n	800a92a <VL53L0X_SetGpioConfig+0x1ce>
 800a8f2:	a201      	add	r2, pc, #4	; (adr r2, 800a8f8 <VL53L0X_SetGpioConfig+0x19c>)
 800a8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f8:	0800a90d 	.word	0x0800a90d
 800a8fc:	0800a913 	.word	0x0800a913
 800a900:	0800a919 	.word	0x0800a919
 800a904:	0800a91f 	.word	0x0800a91f
 800a908:	0800a925 	.word	0x0800a925
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800a90c:	2300      	movs	r3, #0
 800a90e:	73bb      	strb	r3, [r7, #14]
				break;
 800a910:	e00f      	b.n	800a932 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800a912:	2301      	movs	r3, #1
 800a914:	73bb      	strb	r3, [r7, #14]
				break;
 800a916:	e00c      	b.n	800a932 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800a918:	2302      	movs	r3, #2
 800a91a:	73bb      	strb	r3, [r7, #14]
				break;
 800a91c:	e009      	b.n	800a932 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800a91e:	2303      	movs	r3, #3
 800a920:	73bb      	strb	r3, [r7, #14]
				break;
 800a922:	e006      	b.n	800a932 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800a924:	2304      	movs	r3, #4
 800a926:	73bb      	strb	r3, [r7, #14]
				break;
 800a928:	e003      	b.n	800a932 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800a92a:	23f5      	movs	r3, #245	; 0xf5
 800a92c:	73fb      	strb	r3, [r7, #15]
 800a92e:	e000      	b.n	800a932 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800a930:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800a932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d107      	bne.n	800a94a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800a93a:	7bbb      	ldrb	r3, [r7, #14]
 800a93c:	461a      	mov	r2, r3
 800a93e:	210a      	movs	r1, #10
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f003 fb1d 	bl	800df80 <VL53L0X_WrByte>
 800a946:	4603      	mov	r3, r0
 800a948:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800a94a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10f      	bne.n	800a972 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a952:	7e3b      	ldrb	r3, [r7, #24]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d102      	bne.n	800a95e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800a958:	2300      	movs	r3, #0
 800a95a:	73bb      	strb	r3, [r7, #14]
 800a95c:	e001      	b.n	800a962 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800a95e:	2310      	movs	r3, #16
 800a960:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	22ef      	movs	r2, #239	; 0xef
 800a966:	2184      	movs	r1, #132	; 0x84
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f003 fb57 	bl	800e01c <VL53L0X_UpdateByte>
 800a96e:	4603      	mov	r3, r0
 800a970:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800a972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d103      	bne.n	800a982 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	787a      	ldrb	r2, [r7, #1]
 800a97e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800a982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d105      	bne.n	800a996 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a98a:	2100      	movs	r1, #0
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f83f 	bl	800aa10 <VL53L0X_ClearInterruptMask>
 800a992:	4603      	mov	r3, r0
 800a994:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop

0800a9a4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b086      	sub	sp, #24
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	607a      	str	r2, [r7, #4]
 800a9ae:	603b      	str	r3, [r7, #0]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800a9b8:	f107 0314 	add.w	r3, r7, #20
 800a9bc:	461a      	mov	r2, r3
 800a9be:	210e      	movs	r1, #14
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f003 fb89 	bl	800e0d8 <VL53L0X_RdWord>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a9ca:	8abb      	ldrh	r3, [r7, #20]
 800a9cc:	045b      	lsls	r3, r3, #17
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	4b0e      	ldr	r3, [pc, #56]	; (800aa0c <VL53L0X_GetInterruptThresholds+0x68>)
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800a9d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10f      	bne.n	800aa00 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800a9e0:	f107 0314 	add.w	r3, r7, #20
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	210c      	movs	r1, #12
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f003 fb75 	bl	800e0d8 <VL53L0X_RdWord>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a9f2:	8abb      	ldrh	r3, [r7, #20]
 800a9f4:	045b      	lsls	r3, r3, #17
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	4b04      	ldr	r3, [pc, #16]	; (800aa0c <VL53L0X_GetInterruptThresholds+0x68>)
 800a9fa:	4013      	ands	r3, r2
		*pThresholdHigh =
 800a9fc:	683a      	ldr	r2, [r7, #0]
 800a9fe:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3718      	adds	r7, #24
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	1ffe0000 	.word	0x1ffe0000

0800aa10 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800aa22:	2201      	movs	r2, #1
 800aa24:	210b      	movs	r1, #11
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f003 faaa 	bl	800df80 <VL53L0X_WrByte>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800aa30:	2200      	movs	r2, #0
 800aa32:	210b      	movs	r1, #11
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f003 faa3 	bl	800df80 <VL53L0X_WrByte>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	7bfb      	ldrb	r3, [r7, #15]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800aa44:	f107 030d 	add.w	r3, r7, #13
 800aa48:	461a      	mov	r2, r3
 800aa4a:	2113      	movs	r1, #19
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f003 fb19 	bl	800e084 <VL53L0X_RdByte>
 800aa52:	4603      	mov	r3, r0
 800aa54:	461a      	mov	r2, r3
 800aa56:	7bfb      	ldrb	r3, [r7, #15]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800aa5c:	7bbb      	ldrb	r3, [r7, #14]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800aa62:	7b7b      	ldrb	r3, [r7, #13]
 800aa64:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d006      	beq.n	800aa7a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800aa6c:	7bbb      	ldrb	r3, [r7, #14]
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d803      	bhi.n	800aa7a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800aa72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d0d3      	beq.n	800aa22 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800aa7a:	7bbb      	ldrb	r3, [r7, #14]
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d901      	bls.n	800aa84 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800aa80:	23f4      	movs	r3, #244	; 0xf4
 800aa82:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800aa84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800aa9e:	f107 030e 	add.w	r3, r7, #14
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	2113      	movs	r1, #19
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f003 faec 	bl	800e084 <VL53L0X_RdByte>
 800aaac:	4603      	mov	r3, r0
 800aaae:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
 800aab2:	f003 0207 	and.w	r2, r3, #7
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800aaba:	7bbb      	ldrb	r3, [r7, #14]
 800aabc:	f003 0318 	and.w	r3, r3, #24
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d001      	beq.n	800aac8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800aac4:	23fa      	movs	r3, #250	; 0xfa
 800aac6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800aac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aae0:	2300      	movs	r3, #0
 800aae2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	68b9      	ldr	r1, [r7, #8]
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f000 fa33 	bl	800af54 <VL53L0X_perform_ref_spad_management>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800aaf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3718      	adds	r7, #24
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b084      	sub	sp, #16
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800ab08:	2101      	movs	r1, #1
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f7fe fed2 	bl	80098b4 <VL53L0X_SetDeviceMode>
 800ab10:	4603      	mov	r3, r0
 800ab12:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800ab14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800ab1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab20:	e019      	b.n	800ab56 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f7ff fbc4 	bl	800a2b0 <VL53L0X_StartMeasurement>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800ab2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d002      	beq.n	800ab3a <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800ab34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab38:	e00d      	b.n	800ab56 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800ab3a:	6839      	ldr	r1, [r7, #0]
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f7ff fcb9 	bl	800a4b4 <VL53L0X_GetRangingMeasurementData>
 800ab42:	4603      	mov	r3, r0
 800ab44:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800ab46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d002      	beq.n	800ab54 <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800ab4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab52:	e000      	b.n	800ab56 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800ab6c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ab70:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800ab72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab76:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800ab78:	f107 0308 	add.w	r3, r7, #8
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	2128      	movs	r1, #40	; 0x28
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f003 faa9 	bl	800e0d8 <VL53L0X_RdWord>
 800ab86:	4603      	mov	r3, r0
 800ab88:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800ab8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d11e      	bne.n	800abd0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800ab92:	893b      	ldrh	r3, [r7, #8]
 800ab94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800ab9c:	893b      	ldrh	r3, [r7, #8]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	dd0b      	ble.n	800abc0 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800aba8:	893a      	ldrh	r2, [r7, #8]
 800abaa:	897b      	ldrh	r3, [r7, #10]
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	b29b      	uxth	r3, r3
 800abb0:	b21b      	sxth	r3, r3
 800abb2:	461a      	mov	r2, r3
					* 250;
 800abb4:	23fa      	movs	r3, #250	; 0xfa
 800abb6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	601a      	str	r2, [r3, #0]
 800abbe:	e007      	b.n	800abd0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800abc0:	893b      	ldrh	r3, [r7, #8]
 800abc2:	b21b      	sxth	r3, r3
 800abc4:	461a      	mov	r2, r3
 800abc6:	23fa      	movs	r3, #250	; 0xfa
 800abc8:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800abd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800abdc:	b480      	push	{r7}
 800abde:	b08b      	sub	sp, #44	; 0x2c
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
 800abe8:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800abea:	2308      	movs	r3, #8
 800abec:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800abee:	2300      	movs	r3, #0
 800abf0:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	f04f 32ff 	mov.w	r2, #4294967295
 800abf8:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac02:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	69ba      	ldr	r2, [r7, #24]
 800ac08:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac0c:	69b9      	ldr	r1, [r7, #24]
 800ac0e:	fb01 f202 	mul.w	r2, r1, r2
 800ac12:	1a9b      	subs	r3, r3, r2
 800ac14:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	627b      	str	r3, [r7, #36]	; 0x24
 800ac1a:	e030      	b.n	800ac7e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac24:	4413      	add	r3, r2
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800ac2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d11e      	bne.n	800ac70 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800ac32:	7ffa      	ldrb	r2, [r7, #31]
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	fa42 f303 	asr.w	r3, r2, r3
 800ac3a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800ac40:	e016      	b.n	800ac70 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800ac42:	7ffb      	ldrb	r3, [r7, #31]
 800ac44:	f003 0301 	and.w	r3, r3, #1
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d00b      	beq.n	800ac64 <get_next_good_spad+0x88>
				success = 1;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800ac50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac52:	69ba      	ldr	r2, [r7, #24]
 800ac54:	fb03 f202 	mul.w	r2, r3, r2
 800ac58:	6a3b      	ldr	r3, [r7, #32]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	601a      	str	r2, [r3, #0]
				break;
 800ac62:	e009      	b.n	800ac78 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800ac64:	7ffb      	ldrb	r3, [r7, #31]
 800ac66:	085b      	lsrs	r3, r3, #1
 800ac68:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800ac6a:	6a3b      	ldr	r3, [r7, #32]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800ac70:	6a3a      	ldr	r2, [r7, #32]
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d3e4      	bcc.n	800ac42 <get_next_good_spad+0x66>
				coarseIndex++) {
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800ac7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d202      	bcs.n	800ac8c <get_next_good_spad+0xb0>
 800ac86:	7fbb      	ldrb	r3, [r7, #30]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d0c7      	beq.n	800ac1c <get_next_good_spad+0x40>
		}
	}
}
 800ac8c:	bf00      	nop
 800ac8e:	372c      	adds	r7, #44	; 0x2c
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800aca0:	2301      	movs	r3, #1
 800aca2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	099b      	lsrs	r3, r3, #6
 800aca8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800acaa:	4a07      	ldr	r2, [pc, #28]	; (800acc8 <is_aperture+0x30>)
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d101      	bne.n	800acba <is_aperture+0x22>
		isAperture = 0;
 800acb6:	2300      	movs	r3, #0
 800acb8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800acba:	7bfb      	ldrb	r3, [r7, #15]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr
 800acc8:	200002b8 	.word	0x200002b8

0800accc <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800accc:	b480      	push	{r7}
 800acce:	b089      	sub	sp, #36	; 0x24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800acd8:	2300      	movs	r3, #0
 800acda:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800acdc:	2308      	movs	r3, #8
 800acde:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ace8:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	69ba      	ldr	r2, [r7, #24]
 800acee:	fbb3 f2f2 	udiv	r2, r3, r2
 800acf2:	69b9      	ldr	r1, [r7, #24]
 800acf4:	fb01 f202 	mul.w	r2, r1, r2
 800acf8:	1a9b      	subs	r3, r3, r2
 800acfa:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800acfc:	697a      	ldr	r2, [r7, #20]
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d302      	bcc.n	800ad0a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ad04:	23ce      	movs	r3, #206	; 0xce
 800ad06:	77fb      	strb	r3, [r7, #31]
 800ad08:	e010      	b.n	800ad2c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	4413      	add	r3, r2
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	b25a      	sxtb	r2, r3
 800ad14:	2101      	movs	r1, #1
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	fa01 f303 	lsl.w	r3, r1, r3
 800ad1c:	b25b      	sxtb	r3, r3
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	b259      	sxtb	r1, r3
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	4413      	add	r3, r2
 800ad28:	b2ca      	uxtb	r2, r1
 800ad2a:	701a      	strb	r2, [r3, #0]

	return status;
 800ad2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3724      	adds	r7, #36	; 0x24
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800ad46:	2306      	movs	r3, #6
 800ad48:	683a      	ldr	r2, [r7, #0]
 800ad4a:	21b0      	movs	r1, #176	; 0xb0
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f003 f8bb 	bl	800dec8 <VL53L0X_WriteMulti>
 800ad52:	4603      	mov	r3, r0
 800ad54:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800ad56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b084      	sub	sp, #16
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
 800ad6a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800ad6c:	2306      	movs	r3, #6
 800ad6e:	683a      	ldr	r2, [r7, #0]
 800ad70:	21b0      	movs	r1, #176	; 0xb0
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f003 f8d8 	bl	800df28 <VL53L0X_ReadMulti>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800ad7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b08c      	sub	sp, #48	; 0x30
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	607a      	str	r2, [r7, #4]
 800ad92:	603b      	str	r3, [r7, #0]
 800ad94:	460b      	mov	r3, r1
 800ad96:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800ad9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ada0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800ada2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ada4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800ada6:	2300      	movs	r3, #0
 800ada8:	62bb      	str	r3, [r7, #40]	; 0x28
 800adaa:	e02b      	b.n	800ae04 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800adac:	f107 031c 	add.w	r3, r7, #28
 800adb0:	6a3a      	ldr	r2, [r7, #32]
 800adb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7ff ff11 	bl	800abdc <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc0:	d103      	bne.n	800adca <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800adc2:	23ce      	movs	r3, #206	; 0xce
 800adc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800adc8:	e020      	b.n	800ae0c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	461a      	mov	r2, r3
 800adce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800add0:	4413      	add	r3, r2
 800add2:	4618      	mov	r0, r3
 800add4:	f7ff ff60 	bl	800ac98 <is_aperture>
 800add8:	4603      	mov	r3, r0
 800adda:	461a      	mov	r2, r3
 800addc:	7afb      	ldrb	r3, [r7, #11]
 800adde:	4293      	cmp	r3, r2
 800ade0:	d003      	beq.n	800adea <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ade2:	23ce      	movs	r3, #206	; 0xce
 800ade4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800ade8:	e010      	b.n	800ae0c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800adee:	6a3a      	ldr	r2, [r7, #32]
 800adf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800adf2:	6838      	ldr	r0, [r7, #0]
 800adf4:	f7ff ff6a 	bl	800accc <enable_spad_bit>
		currentSpad++;
 800adf8:	6a3b      	ldr	r3, [r7, #32]
 800adfa:	3301      	adds	r3, #1
 800adfc:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800adfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae00:	3301      	adds	r3, #1
 800ae02:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d3cf      	bcc.n	800adac <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800ae0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae0e:	6a3a      	ldr	r2, [r7, #32]
 800ae10:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800ae12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d106      	bne.n	800ae28 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800ae1a:	6839      	ldr	r1, [r7, #0]
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f7ff ff8d 	bl	800ad3c <set_ref_spad_map>
 800ae22:	4603      	mov	r3, r0
 800ae24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800ae28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d121      	bne.n	800ae74 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800ae30:	f107 0314 	add.w	r3, r7, #20
 800ae34:	4619      	mov	r1, r3
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f7ff ff93 	bl	800ad62 <get_ref_spad_map>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800ae46:	e011      	b.n	800ae6c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800ae48:	683a      	ldr	r2, [r7, #0]
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4c:	4413      	add	r3, r2
 800ae4e:	781a      	ldrb	r2, [r3, #0]
 800ae50:	f107 0114 	add.w	r1, r7, #20
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	440b      	add	r3, r1
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d003      	beq.n	800ae66 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ae5e:	23ce      	movs	r3, #206	; 0xce
 800ae60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800ae64:	e006      	b.n	800ae74 <enable_ref_spads+0xec>
			}
			i++;
 800ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae68:	3301      	adds	r3, #1
 800ae6a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800ae6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d3e9      	bcc.n	800ae48 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800ae74:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3730      	adds	r7, #48	; 0x30
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b08a      	sub	sp, #40	; 0x28
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800ae90:	2300      	movs	r3, #0
 800ae92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800ae9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800aea0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d107      	bne.n	800aeb8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800aea8:	22c0      	movs	r2, #192	; 0xc0
 800aeaa:	2101      	movs	r1, #1
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f003 f867 	bl	800df80 <VL53L0X_WrByte>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800aeb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d108      	bne.n	800aed2 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800aec0:	f107 0308 	add.w	r3, r7, #8
 800aec4:	4619      	mov	r1, r3
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7ff fc18 	bl	800a6fc <VL53L0X_PerformSingleRangingMeasurement>
 800aecc:	4603      	mov	r3, r0
 800aece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800aed2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d107      	bne.n	800aeea <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800aeda:	2201      	movs	r2, #1
 800aedc:	21ff      	movs	r1, #255	; 0xff
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f003 f84e 	bl	800df80 <VL53L0X_WrByte>
 800aee4:	4603      	mov	r3, r0
 800aee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800aeea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d107      	bne.n	800af02 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800aef2:	683a      	ldr	r2, [r7, #0]
 800aef4:	21b6      	movs	r1, #182	; 0xb6
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f003 f8ee 	bl	800e0d8 <VL53L0X_RdWord>
 800aefc:	4603      	mov	r3, r0
 800aefe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800af02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af06:	2b00      	cmp	r3, #0
 800af08:	d107      	bne.n	800af1a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800af0a:	2200      	movs	r2, #0
 800af0c:	21ff      	movs	r1, #255	; 0xff
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f003 f836 	bl	800df80 <VL53L0X_WrByte>
 800af14:	4603      	mov	r3, r0
 800af16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800af1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d112      	bne.n	800af48 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800af22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af26:	461a      	mov	r2, r3
 800af28:	2101      	movs	r1, #1
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f003 f828 	bl	800df80 <VL53L0X_WrByte>
 800af30:	4603      	mov	r3, r0
 800af32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800af36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d104      	bne.n	800af48 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af44:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800af48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3728      	adds	r7, #40	; 0x28
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800af54:	b590      	push	{r4, r7, lr}
 800af56:	b09d      	sub	sp, #116	; 0x74
 800af58:	af06      	add	r7, sp, #24
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af60:	2300      	movs	r3, #0
 800af62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800af66:	23b4      	movs	r3, #180	; 0xb4
 800af68:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800af6c:	2303      	movs	r3, #3
 800af6e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800af70:	232c      	movs	r3, #44	; 0x2c
 800af72:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800af78:	2300      	movs	r3, #0
 800af7a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800af7c:	2300      	movs	r3, #0
 800af7e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800af80:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800af84:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800af86:	2300      	movs	r3, #0
 800af88:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800af8e:	2306      	movs	r3, #6
 800af90:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800af92:	2300      	movs	r3, #0
 800af94:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800af96:	2300      	movs	r3, #0
 800af98:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800afa8:	2300      	movs	r3, #0
 800afaa:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800afac:	2300      	movs	r3, #0
 800afae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800afb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800afba:	2300      	movs	r3, #0
 800afbc:	64bb      	str	r3, [r7, #72]	; 0x48
 800afbe:	e009      	b.n	800afd4 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afc4:	4413      	add	r3, r2
 800afc6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800afca:	2200      	movs	r2, #0
 800afcc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800afce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afd0:	3301      	adds	r3, #1
 800afd2:	64bb      	str	r3, [r7, #72]	; 0x48
 800afd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd8:	429a      	cmp	r2, r3
 800afda:	d3f1      	bcc.n	800afc0 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800afdc:	2201      	movs	r2, #1
 800afde:	21ff      	movs	r1, #255	; 0xff
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f002 ffcd 	bl	800df80 <VL53L0X_WrByte>
 800afe6:	4603      	mov	r3, r0
 800afe8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800afec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d107      	bne.n	800b004 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800aff4:	2200      	movs	r2, #0
 800aff6:	214f      	movs	r1, #79	; 0x4f
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	f002 ffc1 	bl	800df80 <VL53L0X_WrByte>
 800affe:	4603      	mov	r3, r0
 800b000:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800b004:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d107      	bne.n	800b01c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800b00c:	222c      	movs	r2, #44	; 0x2c
 800b00e:	214e      	movs	r1, #78	; 0x4e
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f002 ffb5 	bl	800df80 <VL53L0X_WrByte>
 800b016:	4603      	mov	r3, r0
 800b018:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b01c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b020:	2b00      	cmp	r3, #0
 800b022:	d107      	bne.n	800b034 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b024:	2200      	movs	r2, #0
 800b026:	21ff      	movs	r1, #255	; 0xff
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f002 ffa9 	bl	800df80 <VL53L0X_WrByte>
 800b02e:	4603      	mov	r3, r0
 800b030:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800b034:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d109      	bne.n	800b050 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800b03c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b040:	461a      	mov	r2, r3
 800b042:	21b6      	movs	r1, #182	; 0xb6
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f002 ff9b 	bl	800df80 <VL53L0X_WrByte>
 800b04a:	4603      	mov	r3, r0
 800b04c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800b050:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b054:	2b00      	cmp	r3, #0
 800b056:	d107      	bne.n	800b068 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800b058:	2200      	movs	r2, #0
 800b05a:	2180      	movs	r1, #128	; 0x80
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	f002 ff8f 	bl	800df80 <VL53L0X_WrByte>
 800b062:	4603      	mov	r3, r0
 800b064:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800b068:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d10a      	bne.n	800b086 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800b070:	f107 0210 	add.w	r2, r7, #16
 800b074:	f107 0111 	add.w	r1, r7, #17
 800b078:	2300      	movs	r3, #0
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f000 fbbb 	bl	800b7f6 <VL53L0X_perform_ref_calibration>
 800b080:	4603      	mov	r3, r0
 800b082:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800b086:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d121      	bne.n	800b0d2 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800b08e:	2300      	movs	r3, #0
 800b090:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800b092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b094:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800b096:	2300      	movs	r3, #0
 800b098:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800b09a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b09c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800b0aa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b0ae:	f107 0218 	add.w	r2, r7, #24
 800b0b2:	9204      	str	r2, [sp, #16]
 800b0b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0b6:	9203      	str	r2, [sp, #12]
 800b0b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0ba:	9202      	str	r2, [sp, #8]
 800b0bc:	9301      	str	r3, [sp, #4]
 800b0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c0:	9300      	str	r3, [sp, #0]
 800b0c2:	4623      	mov	r3, r4
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f7ff fe5e 	bl	800ad88 <enable_ref_spads>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b0d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d174      	bne.n	800b1c4 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800b0de:	f107 0312 	add.w	r3, r7, #18
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f7ff fecb 	bl	800ae80 <perform_ref_signal_measurement>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800b0f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d161      	bne.n	800b1bc <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800b0f8:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800b0fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d25d      	bcs.n	800b1bc <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800b100:	2300      	movs	r3, #0
 800b102:	64bb      	str	r3, [r7, #72]	; 0x48
 800b104:	e009      	b.n	800b11a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b10a:	4413      	add	r3, r2
 800b10c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b110:	2200      	movs	r2, #0
 800b112:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800b114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b116:	3301      	adds	r3, #1
 800b118:	64bb      	str	r3, [r7, #72]	; 0x48
 800b11a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11e:	429a      	cmp	r2, r3
 800b120:	d3f1      	bcc.n	800b106 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800b122:	e002      	b.n	800b12a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800b124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b126:	3301      	adds	r3, #1
 800b128:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800b12a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800b12e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b130:	4413      	add	r3, r2
 800b132:	4618      	mov	r0, r3
 800b134:	f7ff fdb0 	bl	800ac98 <is_aperture>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d103      	bne.n	800b146 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800b13e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b142:	429a      	cmp	r2, r3
 800b144:	d3ee      	bcc.n	800b124 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800b146:	2301      	movs	r3, #1
 800b148:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800b14a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b14c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800b15a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b15e:	f107 0218 	add.w	r2, r7, #24
 800b162:	9204      	str	r2, [sp, #16]
 800b164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b166:	9203      	str	r2, [sp, #12]
 800b168:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b16a:	9202      	str	r2, [sp, #8]
 800b16c:	9301      	str	r3, [sp, #4]
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	9300      	str	r3, [sp, #0]
 800b172:	4623      	mov	r3, r4
 800b174:	4602      	mov	r2, r0
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f7ff fe06 	bl	800ad88 <enable_ref_spads>
 800b17c:	4603      	mov	r3, r0
 800b17e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800b182:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b186:	2b00      	cmp	r3, #0
 800b188:	d11b      	bne.n	800b1c2 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800b18e:	f107 0312 	add.w	r3, r7, #18
 800b192:	4619      	mov	r1, r3
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f7ff fe73 	bl	800ae80 <perform_ref_signal_measurement>
 800b19a:	4603      	mov	r3, r0
 800b19c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800b1a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d10c      	bne.n	800b1c2 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800b1a8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800b1aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d208      	bcs.n	800b1c2 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800b1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800b1ba:	e002      	b.n	800b1c2 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1c0:	e000      	b.n	800b1c4 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800b1c2:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800b1c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f040 80af 	bne.w	800b32c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800b1ce:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800b1d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	f240 80aa 	bls.w	800b32c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800b1d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800b1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1e0:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800b1e8:	f107 031c 	add.w	r3, r7, #28
 800b1ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f003 f820 	bl	800e234 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800b1f4:	8a7b      	ldrh	r3, [r7, #18]
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b1fa:	1ad3      	subs	r3, r2, r3
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	bfb8      	it	lt
 800b200:	425b      	neglt	r3, r3
 800b202:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800b204:	2300      	movs	r3, #0
 800b206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800b20a:	e086      	b.n	800b31a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800b212:	f107 0314 	add.w	r3, r7, #20
 800b216:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b21a:	f7ff fcdf 	bl	800abdc <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b224:	d103      	bne.n	800b22e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b226:	23ce      	movs	r3, #206	; 0xce
 800b228:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800b22c:	e07e      	b.n	800b32c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800b22e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b232:	697a      	ldr	r2, [r7, #20]
 800b234:	4413      	add	r3, r2
 800b236:	4618      	mov	r0, r3
 800b238:	f7ff fd2e 	bl	800ac98 <is_aperture>
 800b23c:	4603      	mov	r3, r0
 800b23e:	461a      	mov	r2, r3
 800b240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b242:	4293      	cmp	r3, r2
 800b244:	d003      	beq.n	800b24e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800b246:	2301      	movs	r3, #1
 800b248:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800b24c:	e06e      	b.n	800b32c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800b24e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b250:	3301      	adds	r3, #1
 800b252:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800b25e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b262:	4618      	mov	r0, r3
 800b264:	f7ff fd32 	bl	800accc <enable_spad_bit>
 800b268:	4603      	mov	r3, r0
 800b26a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800b26e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b272:	2b00      	cmp	r3, #0
 800b274:	d10c      	bne.n	800b290 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800b276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b278:	3301      	adds	r3, #1
 800b27a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800b282:	4619      	mov	r1, r3
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	f7ff fd59 	bl	800ad3c <set_ref_spad_map>
 800b28a:	4603      	mov	r3, r0
 800b28c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800b290:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b294:	2b00      	cmp	r3, #0
 800b296:	d146      	bne.n	800b326 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800b298:	f107 0312 	add.w	r3, r7, #18
 800b29c:	4619      	mov	r1, r3
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	f7ff fdee 	bl	800ae80 <perform_ref_signal_measurement>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800b2aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d13b      	bne.n	800b32a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800b2b2:	8a7b      	ldrh	r3, [r7, #18]
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b2b8:	1ad3      	subs	r3, r2, r3
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	bfb8      	it	lt
 800b2be:	425b      	neglt	r3, r3
 800b2c0:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800b2c2:	8a7b      	ldrh	r3, [r7, #18]
 800b2c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d21c      	bcs.n	800b304 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800b2ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d914      	bls.n	800b2fc <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800b2d2:	f107 031c 	add.w	r3, r7, #28
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f7ff fd2f 	bl	800ad3c <set_ref_spad_map>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800b2ea:	f107 011c 	add.w	r1, r7, #28
 800b2ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f002 ff9f 	bl	800e234 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800b2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b302:	e00a      	b.n	800b31a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800b304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b306:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800b30e:	f107 031c 	add.w	r3, r7, #28
 800b312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b314:	4618      	mov	r0, r3
 800b316:	f002 ff8d 	bl	800e234 <memcpy>
		while (!complete) {
 800b31a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f43f af74 	beq.w	800b20c <VL53L0X_perform_ref_spad_management+0x2b8>
 800b324:	e002      	b.n	800b32c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b326:	bf00      	nop
 800b328:	e000      	b.n	800b32c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b32a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b32c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b330:	2b00      	cmp	r3, #0
 800b332:	d115      	bne.n	800b360 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b338:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800b340:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2201      	movs	r2, #1
 800b346:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	b2da      	uxtb	r2, r3
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	781a      	ldrb	r2, [r3, #0]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800b360:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800b364:	4618      	mov	r0, r3
 800b366:	375c      	adds	r7, #92	; 0x5c
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd90      	pop	{r4, r7, pc}

0800b36c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800b36c:	b590      	push	{r4, r7, lr}
 800b36e:	b093      	sub	sp, #76	; 0x4c
 800b370:	af06      	add	r7, sp, #24
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	4613      	mov	r3, r2
 800b378:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b37a:	2300      	movs	r3, #0
 800b37c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800b380:	2300      	movs	r3, #0
 800b382:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800b384:	23b4      	movs	r3, #180	; 0xb4
 800b386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800b38a:	2306      	movs	r3, #6
 800b38c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800b38e:	232c      	movs	r3, #44	; 0x2c
 800b390:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b392:	2201      	movs	r2, #1
 800b394:	21ff      	movs	r1, #255	; 0xff
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f002 fdf2 	bl	800df80 <VL53L0X_WrByte>
 800b39c:	4603      	mov	r3, r0
 800b39e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b3a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d107      	bne.n	800b3ba <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	214f      	movs	r1, #79	; 0x4f
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f002 fde6 	bl	800df80 <VL53L0X_WrByte>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800b3ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d107      	bne.n	800b3d2 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800b3c2:	222c      	movs	r2, #44	; 0x2c
 800b3c4:	214e      	movs	r1, #78	; 0x4e
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f002 fdda 	bl	800df80 <VL53L0X_WrByte>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b3d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d107      	bne.n	800b3ea <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b3da:	2200      	movs	r2, #0
 800b3dc:	21ff      	movs	r1, #255	; 0xff
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f002 fdce 	bl	800df80 <VL53L0X_WrByte>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b3ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d109      	bne.n	800b406 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800b3f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	21b6      	movs	r1, #182	; 0xb6
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f002 fdc0 	bl	800df80 <VL53L0X_WrByte>
 800b400:	4603      	mov	r3, r0
 800b402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800b406:	2300      	movs	r3, #0
 800b408:	627b      	str	r3, [r7, #36]	; 0x24
 800b40a:	e009      	b.n	800b420 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b410:	4413      	add	r3, r2
 800b412:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b416:	2200      	movs	r2, #0
 800b418:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800b41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41c:	3301      	adds	r3, #1
 800b41e:	627b      	str	r3, [r7, #36]	; 0x24
 800b420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	429a      	cmp	r2, r3
 800b426:	d3f1      	bcc.n	800b40c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800b428:	79fb      	ldrb	r3, [r7, #7]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d011      	beq.n	800b452 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b42e:	e002      	b.n	800b436 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800b430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b432:	3301      	adds	r3, #1
 800b434:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b436:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43c:	4413      	add	r3, r2
 800b43e:	4618      	mov	r0, r3
 800b440:	f7ff fc2a 	bl	800ac98 <is_aperture>
 800b444:	4603      	mov	r3, r0
 800b446:	2b00      	cmp	r3, #0
 800b448:	d103      	bne.n	800b452 <VL53L0X_set_reference_spads+0xe6>
 800b44a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d3ee      	bcc.n	800b430 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800b45e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b462:	79f9      	ldrb	r1, [r7, #7]
 800b464:	f107 0214 	add.w	r2, r7, #20
 800b468:	9204      	str	r2, [sp, #16]
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	9203      	str	r2, [sp, #12]
 800b46e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b470:	9202      	str	r2, [sp, #8]
 800b472:	9301      	str	r3, [sp, #4]
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	4623      	mov	r3, r4
 800b47a:	4602      	mov	r2, r0
 800b47c:	68f8      	ldr	r0, [r7, #12]
 800b47e:	f7ff fc83 	bl	800ad88 <enable_ref_spads>
 800b482:	4603      	mov	r3, r0
 800b484:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800b488:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10c      	bne.n	800b4aa <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2201      	movs	r2, #1
 800b494:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	b2da      	uxtb	r2, r3
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	79fa      	ldrb	r2, [r7, #7]
 800b4a6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800b4aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3734      	adds	r7, #52	; 0x34
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd90      	pop	{r4, r7, pc}

0800b4b6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b084      	sub	sp, #16
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
 800b4be:	460b      	mov	r3, r1
 800b4c0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b4c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d10a      	bne.n	800b4e4 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800b4ce:	78fb      	ldrb	r3, [r7, #3]
 800b4d0:	f043 0301 	orr.w	r3, r3, #1
 800b4d4:	b2db      	uxtb	r3, r3
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	2100      	movs	r1, #0
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f002 fd50 	bl	800df80 <VL53L0X_WrByte>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800b4e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d104      	bne.n	800b4f6 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f9bf 	bl	800b870 <VL53L0X_measurement_poll_for_completion>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b4f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d105      	bne.n	800b50a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b4fe:	2100      	movs	r1, #0
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f7ff fa85 	bl	800aa10 <VL53L0X_ClearInterruptMask>
 800b506:	4603      	mov	r3, r0
 800b508:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b50a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d106      	bne.n	800b520 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800b512:	2200      	movs	r2, #0
 800b514:	2100      	movs	r1, #0
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f002 fd32 	bl	800df80 <VL53L0X_WrByte>
 800b51c:	4603      	mov	r3, r0
 800b51e:	73fb      	strb	r3, [r7, #15]

	return Status;
 800b520:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	4608      	mov	r0, r1
 800b536:	4611      	mov	r1, r2
 800b538:	461a      	mov	r2, r3
 800b53a:	4603      	mov	r3, r0
 800b53c:	70fb      	strb	r3, [r7, #3]
 800b53e:	460b      	mov	r3, r1
 800b540:	70bb      	strb	r3, [r7, #2]
 800b542:	4613      	mov	r3, r2
 800b544:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b546:	2300      	movs	r3, #0
 800b548:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800b54a:	2300      	movs	r3, #0
 800b54c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b54e:	2201      	movs	r2, #1
 800b550:	21ff      	movs	r1, #255	; 0xff
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f002 fd14 	bl	800df80 <VL53L0X_WrByte>
 800b558:	4603      	mov	r3, r0
 800b55a:	461a      	mov	r2, r3
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	4313      	orrs	r3, r2
 800b560:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b562:	2200      	movs	r2, #0
 800b564:	2100      	movs	r1, #0
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f002 fd0a 	bl	800df80 <VL53L0X_WrByte>
 800b56c:	4603      	mov	r3, r0
 800b56e:	461a      	mov	r2, r3
 800b570:	7bfb      	ldrb	r3, [r7, #15]
 800b572:	4313      	orrs	r3, r2
 800b574:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b576:	2200      	movs	r2, #0
 800b578:	21ff      	movs	r1, #255	; 0xff
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f002 fd00 	bl	800df80 <VL53L0X_WrByte>
 800b580:	4603      	mov	r3, r0
 800b582:	461a      	mov	r2, r3
 800b584:	7bfb      	ldrb	r3, [r7, #15]
 800b586:	4313      	orrs	r3, r2
 800b588:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800b58a:	78fb      	ldrb	r3, [r7, #3]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d01e      	beq.n	800b5ce <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800b590:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d009      	beq.n	800b5ac <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800b598:	69ba      	ldr	r2, [r7, #24]
 800b59a:	21cb      	movs	r1, #203	; 0xcb
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f002 fd71 	bl	800e084 <VL53L0X_RdByte>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	7bfb      	ldrb	r3, [r7, #15]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b5ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d02a      	beq.n	800b60a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800b5b4:	f107 030e 	add.w	r3, r7, #14
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	21ee      	movs	r1, #238	; 0xee
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f002 fd61 	bl	800e084 <VL53L0X_RdByte>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	7bfb      	ldrb	r3, [r7, #15]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	73fb      	strb	r3, [r7, #15]
 800b5cc:	e01d      	b.n	800b60a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800b5ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00a      	beq.n	800b5ec <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800b5d6:	78bb      	ldrb	r3, [r7, #2]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	21cb      	movs	r1, #203	; 0xcb
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f002 fccf 	bl	800df80 <VL53L0X_WrByte>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	7bfb      	ldrb	r3, [r7, #15]
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b5ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00a      	beq.n	800b60a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800b5f4:	787b      	ldrb	r3, [r7, #1]
 800b5f6:	2280      	movs	r2, #128	; 0x80
 800b5f8:	21ee      	movs	r1, #238	; 0xee
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f002 fd0e 	bl	800e01c <VL53L0X_UpdateByte>
 800b600:	4603      	mov	r3, r0
 800b602:	461a      	mov	r2, r3
 800b604:	7bfb      	ldrb	r3, [r7, #15]
 800b606:	4313      	orrs	r3, r2
 800b608:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b60a:	2201      	movs	r2, #1
 800b60c:	21ff      	movs	r1, #255	; 0xff
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f002 fcb6 	bl	800df80 <VL53L0X_WrByte>
 800b614:	4603      	mov	r3, r0
 800b616:	461a      	mov	r2, r3
 800b618:	7bfb      	ldrb	r3, [r7, #15]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b61e:	2201      	movs	r2, #1
 800b620:	2100      	movs	r1, #0
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f002 fcac 	bl	800df80 <VL53L0X_WrByte>
 800b628:	4603      	mov	r3, r0
 800b62a:	461a      	mov	r2, r3
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
 800b62e:	4313      	orrs	r3, r2
 800b630:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b632:	2200      	movs	r2, #0
 800b634:	21ff      	movs	r1, #255	; 0xff
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f002 fca2 	bl	800df80 <VL53L0X_WrByte>
 800b63c:	4603      	mov	r3, r0
 800b63e:	461a      	mov	r2, r3
 800b640:	7bfb      	ldrb	r3, [r7, #15]
 800b642:	4313      	orrs	r3, r2
 800b644:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800b646:	7bbb      	ldrb	r3, [r7, #14]
 800b648:	f023 0310 	bic.w	r3, r3, #16
 800b64c:	b2da      	uxtb	r2, r3
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	701a      	strb	r2, [r3, #0]

	return Status;
 800b652:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b08a      	sub	sp, #40	; 0x28
 800b662:	af04      	add	r7, sp, #16
 800b664:	60f8      	str	r0, [r7, #12]
 800b666:	60b9      	str	r1, [r7, #8]
 800b668:	4611      	mov	r1, r2
 800b66a:	461a      	mov	r2, r3
 800b66c:	460b      	mov	r3, r1
 800b66e:	71fb      	strb	r3, [r7, #7]
 800b670:	4613      	mov	r3, r2
 800b672:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b674:	2300      	movs	r3, #0
 800b676:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b678:	2300      	movs	r3, #0
 800b67a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b67c:	2300      	movs	r3, #0
 800b67e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b680:	2300      	movs	r3, #0
 800b682:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800b684:	2300      	movs	r3, #0
 800b686:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b688:	79bb      	ldrb	r3, [r7, #6]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d003      	beq.n	800b696 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b694:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800b696:	2201      	movs	r2, #1
 800b698:	2101      	movs	r1, #1
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f002 fc70 	bl	800df80 <VL53L0X_WrByte>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b6a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d105      	bne.n	800b6b8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800b6ac:	2140      	movs	r1, #64	; 0x40
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f7ff ff01 	bl	800b4b6 <VL53L0X_perform_single_ref_calibration>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b6b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d115      	bne.n	800b6ec <VL53L0X_perform_vhv_calibration+0x8e>
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d112      	bne.n	800b6ec <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b6c6:	7d39      	ldrb	r1, [r7, #20]
 800b6c8:	7d7a      	ldrb	r2, [r7, #21]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	9303      	str	r3, [sp, #12]
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	9302      	str	r3, [sp, #8]
 800b6d2:	f107 0313 	add.w	r3, r7, #19
 800b6d6:	9301      	str	r3, [sp, #4]
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	2101      	movs	r1, #1
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	f7ff ff23 	bl	800b52c <VL53L0X_ref_calibration_io>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	75fb      	strb	r3, [r7, #23]
 800b6ea:	e002      	b.n	800b6f2 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b6f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d112      	bne.n	800b720 <VL53L0X_perform_vhv_calibration+0xc2>
 800b6fa:	79bb      	ldrb	r3, [r7, #6]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00f      	beq.n	800b720 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b700:	7dbb      	ldrb	r3, [r7, #22]
 800b702:	461a      	mov	r2, r3
 800b704:	2101      	movs	r1, #1
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f002 fc3a 	bl	800df80 <VL53L0X_WrByte>
 800b70c:	4603      	mov	r3, r0
 800b70e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b710:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d103      	bne.n	800b720 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	7dba      	ldrb	r2, [r7, #22]
 800b71c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b720:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b724:	4618      	mov	r0, r3
 800b726:	3718      	adds	r7, #24
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b08a      	sub	sp, #40	; 0x28
 800b730:	af04      	add	r7, sp, #16
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	4611      	mov	r1, r2
 800b738:	461a      	mov	r2, r3
 800b73a:	460b      	mov	r3, r1
 800b73c:	71fb      	strb	r3, [r7, #7]
 800b73e:	4613      	mov	r3, r2
 800b740:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b742:	2300      	movs	r3, #0
 800b744:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b746:	2300      	movs	r3, #0
 800b748:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b74a:	2300      	movs	r3, #0
 800b74c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b74e:	2300      	movs	r3, #0
 800b750:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b752:	79bb      	ldrb	r3, [r7, #6]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d003      	beq.n	800b760 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b75e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800b760:	2202      	movs	r2, #2
 800b762:	2101      	movs	r1, #1
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f002 fc0b 	bl	800df80 <VL53L0X_WrByte>
 800b76a:	4603      	mov	r3, r0
 800b76c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b76e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d105      	bne.n	800b782 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800b776:	2100      	movs	r1, #0
 800b778:	68f8      	ldr	r0, [r7, #12]
 800b77a:	f7ff fe9c 	bl	800b4b6 <VL53L0X_perform_single_ref_calibration>
 800b77e:	4603      	mov	r3, r0
 800b780:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b782:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d115      	bne.n	800b7b6 <VL53L0X_perform_phase_calibration+0x8a>
 800b78a:	79fb      	ldrb	r3, [r7, #7]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d112      	bne.n	800b7b6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b790:	7d39      	ldrb	r1, [r7, #20]
 800b792:	7d7a      	ldrb	r2, [r7, #21]
 800b794:	2301      	movs	r3, #1
 800b796:	9303      	str	r3, [sp, #12]
 800b798:	2300      	movs	r3, #0
 800b79a:	9302      	str	r3, [sp, #8]
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	9301      	str	r3, [sp, #4]
 800b7a0:	f107 0313 	add.w	r3, r7, #19
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	2101      	movs	r1, #1
 800b7aa:	68f8      	ldr	r0, [r7, #12]
 800b7ac:	f7ff febe 	bl	800b52c <VL53L0X_ref_calibration_io>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	75fb      	strb	r3, [r7, #23]
 800b7b4:	e002      	b.n	800b7bc <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b7bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d112      	bne.n	800b7ea <VL53L0X_perform_phase_calibration+0xbe>
 800b7c4:	79bb      	ldrb	r3, [r7, #6]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00f      	beq.n	800b7ea <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b7ca:	7dbb      	ldrb	r3, [r7, #22]
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	2101      	movs	r1, #1
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	f002 fbd5 	bl	800df80 <VL53L0X_WrByte>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b7da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d103      	bne.n	800b7ea <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	7dba      	ldrb	r2, [r7, #22]
 800b7e6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b7ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3718      	adds	r7, #24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b086      	sub	sp, #24
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	60f8      	str	r0, [r7, #12]
 800b7fe:	60b9      	str	r1, [r7, #8]
 800b800:	607a      	str	r2, [r7, #4]
 800b802:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b804:	2300      	movs	r3, #0
 800b806:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b808:	2300      	movs	r3, #0
 800b80a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b812:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800b814:	78fa      	ldrb	r2, [r7, #3]
 800b816:	2300      	movs	r3, #0
 800b818:	68b9      	ldr	r1, [r7, #8]
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	f7ff ff1f 	bl	800b65e <VL53L0X_perform_vhv_calibration>
 800b820:	4603      	mov	r3, r0
 800b822:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b824:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d107      	bne.n	800b83c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800b82c:	78fa      	ldrb	r2, [r7, #3]
 800b82e:	2300      	movs	r3, #0
 800b830:	6879      	ldr	r1, [r7, #4]
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f7ff ff7a 	bl	800b72c <VL53L0X_perform_phase_calibration>
 800b838:	4603      	mov	r3, r0
 800b83a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800b83c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10f      	bne.n	800b864 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b844:	7dbb      	ldrb	r3, [r7, #22]
 800b846:	461a      	mov	r2, r3
 800b848:	2101      	movs	r1, #1
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f002 fb98 	bl	800df80 <VL53L0X_WrByte>
 800b850:	4603      	mov	r3, r0
 800b852:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b854:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d103      	bne.n	800b864 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	7dba      	ldrb	r2, [r7, #22]
 800b860:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b864:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3718      	adds	r7, #24
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b086      	sub	sp, #24
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b878:	2300      	movs	r3, #0
 800b87a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800b87c:	2300      	movs	r3, #0
 800b87e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800b880:	2300      	movs	r3, #0
 800b882:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b884:	f107 030f 	add.w	r3, r7, #15
 800b888:	4619      	mov	r1, r3
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7fe fdd2 	bl	800a434 <VL53L0X_GetMeasurementDataReady>
 800b890:	4603      	mov	r3, r0
 800b892:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800b894:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d110      	bne.n	800b8be <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800b89c:	7bfb      	ldrb	r3, [r7, #15]
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d00f      	beq.n	800b8c2 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b8ae:	d302      	bcc.n	800b8b6 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b8b0:	23f9      	movs	r3, #249	; 0xf9
 800b8b2:	75fb      	strb	r3, [r7, #23]
			break;
 800b8b4:	e006      	b.n	800b8c4 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f002 fc82 	bl	800e1c0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b8bc:	e7e2      	b.n	800b884 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800b8be:	bf00      	nop
 800b8c0:	e000      	b.n	800b8c4 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800b8c2:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800b8c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3718      	adds	r7, #24
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800b8de:	79fb      	ldrb	r3, [r7, #7]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800b8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3714      	adds	r7, #20
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800b8f6:	b480      	push	{r7}
 800b8f8:	b085      	sub	sp, #20
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800b900:	2300      	movs	r3, #0
 800b902:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800b904:	79fb      	ldrb	r3, [r7, #7]
 800b906:	085b      	lsrs	r3, r3, #1
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	3b01      	subs	r3, #1
 800b90c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800b90e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b910:	4618      	mov	r0, r3
 800b912:	3714      	adds	r7, #20
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800b924:	2300      	movs	r3, #0
 800b926:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b92c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800b92e:	e002      	b.n	800b936 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	089b      	lsrs	r3, r3, #2
 800b934:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b936:	68ba      	ldr	r2, [r7, #8]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d8f8      	bhi.n	800b930 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800b93e:	e017      	b.n	800b970 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	4413      	add	r3, r2
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d30b      	bcc.n	800b964 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	4413      	add	r3, r2
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	085b      	lsrs	r3, r3, #1
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	4413      	add	r3, r2
 800b960:	60fb      	str	r3, [r7, #12]
 800b962:	e002      	b.n	800b96a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	085b      	lsrs	r3, r3, #1
 800b968:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	089b      	lsrs	r3, r3, #2
 800b96e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d1e4      	bne.n	800b940 <VL53L0X_isqrt+0x24>
	}

	return res;
 800b976:	68fb      	ldr	r3, [r7, #12]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3714      	adds	r7, #20
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b98c:	2300      	movs	r3, #0
 800b98e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800b990:	2200      	movs	r2, #0
 800b992:	2183      	movs	r1, #131	; 0x83
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f002 faf3 	bl	800df80 <VL53L0X_WrByte>
 800b99a:	4603      	mov	r3, r0
 800b99c:	461a      	mov	r2, r3
 800b99e:	7dfb      	ldrb	r3, [r7, #23]
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800b9a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d11e      	bne.n	800b9ea <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800b9b0:	f107 030f 	add.w	r3, r7, #15
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	2183      	movs	r1, #131	; 0x83
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f002 fb63 	bl	800e084 <VL53L0X_RdByte>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10a      	bne.n	800b9de <VL53L0X_device_read_strobe+0x5a>
 800b9c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d106      	bne.n	800b9de <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b9dc:	d3e8      	bcc.n	800b9b0 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b9e4:	d301      	bcc.n	800b9ea <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b9e6:	23f9      	movs	r3, #249	; 0xf9
 800b9e8:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	2183      	movs	r1, #131	; 0x83
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f002 fac6 	bl	800df80 <VL53L0X_WrByte>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	7dfb      	ldrb	r3, [r7, #23]
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800b9fe:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3718      	adds	r7, #24
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b098      	sub	sp, #96	; 0x60
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
 800ba12:	460b      	mov	r3, r1
 800ba14:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba16:	2300      	movs	r3, #0
 800ba18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800ba22:	2300      	movs	r3, #0
 800ba24:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800ba30:	2300      	movs	r3, #0
 800ba32:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800ba34:	2300      	movs	r3, #0
 800ba36:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800ba3a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800ba3e:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800ba40:	2300      	movs	r3, #0
 800ba42:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800ba44:	2300      	movs	r3, #0
 800ba46:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ba52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800ba56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ba5a:	2b07      	cmp	r3, #7
 800ba5c:	f000 8408 	beq.w	800c270 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ba60:	2201      	movs	r2, #1
 800ba62:	2180      	movs	r1, #128	; 0x80
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f002 fa8b 	bl	800df80 <VL53L0X_WrByte>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba72:	4313      	orrs	r3, r2
 800ba74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ba78:	2201      	movs	r2, #1
 800ba7a:	21ff      	movs	r1, #255	; 0xff
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f002 fa7f 	bl	800df80 <VL53L0X_WrByte>
 800ba82:	4603      	mov	r3, r0
 800ba84:	461a      	mov	r2, r3
 800ba86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ba90:	2200      	movs	r2, #0
 800ba92:	2100      	movs	r1, #0
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f002 fa73 	bl	800df80 <VL53L0X_WrByte>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baa2:	4313      	orrs	r3, r2
 800baa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800baa8:	2206      	movs	r2, #6
 800baaa:	21ff      	movs	r1, #255	; 0xff
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f002 fa67 	bl	800df80 <VL53L0X_WrByte>
 800bab2:	4603      	mov	r3, r0
 800bab4:	461a      	mov	r2, r3
 800bab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baba:	4313      	orrs	r3, r2
 800babc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800bac0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800bac4:	461a      	mov	r2, r3
 800bac6:	2183      	movs	r1, #131	; 0x83
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f002 fadb 	bl	800e084 <VL53L0X_RdByte>
 800bace:	4603      	mov	r3, r0
 800bad0:	461a      	mov	r2, r3
 800bad2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bad6:	4313      	orrs	r3, r2
 800bad8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800badc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bae0:	f043 0304 	orr.w	r3, r3, #4
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	461a      	mov	r2, r3
 800bae8:	2183      	movs	r1, #131	; 0x83
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f002 fa48 	bl	800df80 <VL53L0X_WrByte>
 800baf0:	4603      	mov	r3, r0
 800baf2:	461a      	mov	r2, r3
 800baf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baf8:	4313      	orrs	r3, r2
 800bafa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800bafe:	2207      	movs	r2, #7
 800bb00:	21ff      	movs	r1, #255	; 0xff
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f002 fa3c 	bl	800df80 <VL53L0X_WrByte>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb10:	4313      	orrs	r3, r2
 800bb12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800bb16:	2201      	movs	r2, #1
 800bb18:	2181      	movs	r1, #129	; 0x81
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f002 fa30 	bl	800df80 <VL53L0X_WrByte>
 800bb20:	4603      	mov	r3, r0
 800bb22:	461a      	mov	r2, r3
 800bb24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f002 fb46 	bl	800e1c0 <VL53L0X_PollingDelay>
 800bb34:	4603      	mov	r3, r0
 800bb36:	461a      	mov	r2, r3
 800bb38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800bb42:	2201      	movs	r2, #1
 800bb44:	2180      	movs	r1, #128	; 0x80
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f002 fa1a 	bl	800df80 <VL53L0X_WrByte>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	461a      	mov	r2, r3
 800bb50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb54:	4313      	orrs	r3, r2
 800bb56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800bb5a:	78fb      	ldrb	r3, [r7, #3]
 800bb5c:	f003 0301 	and.w	r3, r3, #1
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f000 8098 	beq.w	800bc96 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800bb66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bb6a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	f040 8091 	bne.w	800bc96 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800bb74:	226b      	movs	r2, #107	; 0x6b
 800bb76:	2194      	movs	r1, #148	; 0x94
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f002 fa01 	bl	800df80 <VL53L0X_WrByte>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	461a      	mov	r2, r3
 800bb82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb86:	4313      	orrs	r3, r2
 800bb88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f7ff fef9 	bl	800b984 <VL53L0X_device_read_strobe>
 800bb92:	4603      	mov	r3, r0
 800bb94:	461a      	mov	r2, r3
 800bb96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bba0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bba4:	461a      	mov	r2, r3
 800bba6:	2190      	movs	r1, #144	; 0x90
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f002 facd 	bl	800e148 <VL53L0X_RdDWord>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800bbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbe:	0a1b      	lsrs	r3, r3, #8
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbc6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800bbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbcc:	0bdb      	lsrs	r3, r3, #15
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	f003 0301 	and.w	r3, r3, #1
 800bbd4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800bbd8:	2224      	movs	r2, #36	; 0x24
 800bbda:	2194      	movs	r1, #148	; 0x94
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f002 f9cf 	bl	800df80 <VL53L0X_WrByte>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbea:	4313      	orrs	r3, r2
 800bbec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f7ff fec7 	bl	800b984 <VL53L0X_device_read_strobe>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bc04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc08:	461a      	mov	r2, r3
 800bc0a:	2190      	movs	r1, #144	; 0x90
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f002 fa9b 	bl	800e148 <VL53L0X_RdDWord>
 800bc12:	4603      	mov	r3, r0
 800bc14:	461a      	mov	r2, r3
 800bc16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800bc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc22:	0e1b      	lsrs	r3, r3, #24
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800bc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2a:	0c1b      	lsrs	r3, r3, #16
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800bc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc32:	0a1b      	lsrs	r3, r3, #8
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800bc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800bc3e:	2225      	movs	r2, #37	; 0x25
 800bc40:	2194      	movs	r1, #148	; 0x94
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f002 f99c 	bl	800df80 <VL53L0X_WrByte>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc50:	4313      	orrs	r3, r2
 800bc52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f7ff fe94 	bl	800b984 <VL53L0X_device_read_strobe>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	461a      	mov	r2, r3
 800bc60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc64:	4313      	orrs	r3, r2
 800bc66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bc6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc6e:	461a      	mov	r2, r3
 800bc70:	2190      	movs	r1, #144	; 0x90
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f002 fa68 	bl	800e148 <VL53L0X_RdDWord>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc80:	4313      	orrs	r3, r2
 800bc82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc88:	0e1b      	lsrs	r3, r3, #24
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800bc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc90:	0c1b      	lsrs	r3, r3, #16
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800bc96:	78fb      	ldrb	r3, [r7, #3]
 800bc98:	f003 0302 	and.w	r3, r3, #2
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	f000 8189 	beq.w	800bfb4 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800bca2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bca6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	f040 8182 	bne.w	800bfb4 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800bcb0:	2202      	movs	r2, #2
 800bcb2:	2194      	movs	r1, #148	; 0x94
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f002 f963 	bl	800df80 <VL53L0X_WrByte>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f7ff fe5b 	bl	800b984 <VL53L0X_device_read_strobe>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800bcdc:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800bce0:	461a      	mov	r2, r3
 800bce2:	2190      	movs	r1, #144	; 0x90
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f002 f9cd 	bl	800e084 <VL53L0X_RdByte>
 800bcea:	4603      	mov	r3, r0
 800bcec:	461a      	mov	r2, r3
 800bcee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800bcf8:	227b      	movs	r2, #123	; 0x7b
 800bcfa:	2194      	movs	r1, #148	; 0x94
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f002 f93f 	bl	800df80 <VL53L0X_WrByte>
 800bd02:	4603      	mov	r3, r0
 800bd04:	461a      	mov	r2, r3
 800bd06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f7ff fe37 	bl	800b984 <VL53L0X_device_read_strobe>
 800bd16:	4603      	mov	r3, r0
 800bd18:	461a      	mov	r2, r3
 800bd1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800bd24:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800bd28:	461a      	mov	r2, r3
 800bd2a:	2190      	movs	r1, #144	; 0x90
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f002 f9a9 	bl	800e084 <VL53L0X_RdByte>
 800bd32:	4603      	mov	r3, r0
 800bd34:	461a      	mov	r2, r3
 800bd36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800bd40:	2277      	movs	r2, #119	; 0x77
 800bd42:	2194      	movs	r1, #148	; 0x94
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f002 f91b 	bl	800df80 <VL53L0X_WrByte>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd52:	4313      	orrs	r3, r2
 800bd54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7ff fe13 	bl	800b984 <VL53L0X_device_read_strobe>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	461a      	mov	r2, r3
 800bd62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd66:	4313      	orrs	r3, r2
 800bd68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bd6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bd70:	461a      	mov	r2, r3
 800bd72:	2190      	movs	r1, #144	; 0x90
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f002 f9e7 	bl	800e148 <VL53L0X_RdDWord>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd82:	4313      	orrs	r3, r2
 800bd84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800bd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8a:	0e5b      	lsrs	r3, r3, #25
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800bd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd98:	0c9b      	lsrs	r3, r3, #18
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800bda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda6:	0adb      	lsrs	r3, r3, #11
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	091b      	lsrs	r3, r3, #4
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800bdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	00db      	lsls	r3, r3, #3
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800bdd2:	2278      	movs	r2, #120	; 0x78
 800bdd4:	2194      	movs	r1, #148	; 0x94
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f002 f8d2 	bl	800df80 <VL53L0X_WrByte>
 800bddc:	4603      	mov	r3, r0
 800bdde:	461a      	mov	r2, r3
 800bde0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bde4:	4313      	orrs	r3, r2
 800bde6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f7ff fdca 	bl	800b984 <VL53L0X_device_read_strobe>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bdfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800be02:	461a      	mov	r2, r3
 800be04:	2190      	movs	r1, #144	; 0x90
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f002 f99e 	bl	800e148 <VL53L0X_RdDWord>
 800be0c:	4603      	mov	r3, r0
 800be0e:	461a      	mov	r2, r3
 800be10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be14:	4313      	orrs	r3, r2
 800be16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800be1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1c:	0f5b      	lsrs	r3, r3, #29
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be24:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800be26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be2a:	4413      	add	r3, r2
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800be30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be32:	0d9b      	lsrs	r3, r3, #22
 800be34:	b2db      	uxtb	r3, r3
 800be36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800be3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be40:	0bdb      	lsrs	r3, r3, #15
 800be42:	b2db      	uxtb	r3, r3
 800be44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800be4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4e:	0a1b      	lsrs	r3, r3, #8
 800be50:	b2db      	uxtb	r3, r3
 800be52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be56:	b2db      	uxtb	r3, r3
 800be58:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800be5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5c:	085b      	lsrs	r3, r3, #1
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be64:	b2db      	uxtb	r3, r3
 800be66:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800be68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	019b      	lsls	r3, r3, #6
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be74:	b2db      	uxtb	r3, r3
 800be76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800be7a:	2279      	movs	r2, #121	; 0x79
 800be7c:	2194      	movs	r1, #148	; 0x94
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f002 f87e 	bl	800df80 <VL53L0X_WrByte>
 800be84:	4603      	mov	r3, r0
 800be86:	461a      	mov	r2, r3
 800be88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be8c:	4313      	orrs	r3, r2
 800be8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f7ff fd76 	bl	800b984 <VL53L0X_device_read_strobe>
 800be98:	4603      	mov	r3, r0
 800be9a:	461a      	mov	r2, r3
 800be9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bea0:	4313      	orrs	r3, r2
 800bea2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bea6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800beaa:	461a      	mov	r2, r3
 800beac:	2190      	movs	r1, #144	; 0x90
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f002 f94a 	bl	800e148 <VL53L0X_RdDWord>
 800beb4:	4603      	mov	r3, r0
 800beb6:	461a      	mov	r2, r3
 800beb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bebc:	4313      	orrs	r3, r2
 800bebe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800bec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec4:	0e9b      	lsrs	r3, r3, #26
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800becc:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800bece:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bed2:	4413      	add	r3, r2
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800bed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beda:	0cdb      	lsrs	r3, r3, #19
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800bee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee8:	0b1b      	lsrs	r3, r3, #12
 800beea:	b2db      	uxtb	r3, r3
 800beec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800bef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef6:	095b      	lsrs	r3, r3, #5
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800bf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800bf14:	227a      	movs	r2, #122	; 0x7a
 800bf16:	2194      	movs	r1, #148	; 0x94
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f002 f831 	bl	800df80 <VL53L0X_WrByte>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	461a      	mov	r2, r3
 800bf22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf26:	4313      	orrs	r3, r2
 800bf28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f7ff fd29 	bl	800b984 <VL53L0X_device_read_strobe>
 800bf32:	4603      	mov	r3, r0
 800bf34:	461a      	mov	r2, r3
 800bf36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bf40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bf44:	461a      	mov	r2, r3
 800bf46:	2190      	movs	r1, #144	; 0x90
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f002 f8fd 	bl	800e148 <VL53L0X_RdDWord>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	461a      	mov	r2, r3
 800bf52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf56:	4313      	orrs	r3, r2
 800bf58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800bf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5e:	0f9b      	lsrs	r3, r3, #30
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf66:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800bf68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf6c:	4413      	add	r3, r2
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800bf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf74:	0ddb      	lsrs	r3, r3, #23
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800bf80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf82:	0c1b      	lsrs	r3, r3, #16
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf90:	0a5b      	lsrs	r3, r3, #9
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa0:	089b      	lsrs	r3, r3, #2
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800bfae:	2300      	movs	r3, #0
 800bfb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800bfb4:	78fb      	ldrb	r3, [r7, #3]
 800bfb6:	f003 0304 	and.w	r3, r3, #4
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f000 80f1 	beq.w	800c1a2 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800bfc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bfc4:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f040 80ea 	bne.w	800c1a2 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800bfce:	227b      	movs	r2, #123	; 0x7b
 800bfd0:	2194      	movs	r1, #148	; 0x94
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f001 ffd4 	bl	800df80 <VL53L0X_WrByte>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	461a      	mov	r2, r3
 800bfdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7ff fccc 	bl	800b984 <VL53L0X_device_read_strobe>
 800bfec:	4603      	mov	r3, r0
 800bfee:	461a      	mov	r2, r3
 800bff0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bff4:	4313      	orrs	r3, r2
 800bff6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800bffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bffe:	461a      	mov	r2, r3
 800c000:	2190      	movs	r1, #144	; 0x90
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f002 f8a0 	bl	800e148 <VL53L0X_RdDWord>
 800c008:	4603      	mov	r3, r0
 800c00a:	461a      	mov	r2, r3
 800c00c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c010:	4313      	orrs	r3, r2
 800c012:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800c016:	227c      	movs	r2, #124	; 0x7c
 800c018:	2194      	movs	r1, #148	; 0x94
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f001 ffb0 	bl	800df80 <VL53L0X_WrByte>
 800c020:	4603      	mov	r3, r0
 800c022:	461a      	mov	r2, r3
 800c024:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c028:	4313      	orrs	r3, r2
 800c02a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7ff fca8 	bl	800b984 <VL53L0X_device_read_strobe>
 800c034:	4603      	mov	r3, r0
 800c036:	461a      	mov	r2, r3
 800c038:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c03c:	4313      	orrs	r3, r2
 800c03e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800c042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c046:	461a      	mov	r2, r3
 800c048:	2190      	movs	r1, #144	; 0x90
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f002 f87c 	bl	800e148 <VL53L0X_RdDWord>
 800c050:	4603      	mov	r3, r0
 800c052:	461a      	mov	r2, r3
 800c054:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c058:	4313      	orrs	r3, r2
 800c05a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800c05e:	2273      	movs	r2, #115	; 0x73
 800c060:	2194      	movs	r1, #148	; 0x94
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f001 ff8c 	bl	800df80 <VL53L0X_WrByte>
 800c068:	4603      	mov	r3, r0
 800c06a:	461a      	mov	r2, r3
 800c06c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c070:	4313      	orrs	r3, r2
 800c072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f7ff fc84 	bl	800b984 <VL53L0X_device_read_strobe>
 800c07c:	4603      	mov	r3, r0
 800c07e:	461a      	mov	r2, r3
 800c080:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c084:	4313      	orrs	r3, r2
 800c086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c08a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c08e:	461a      	mov	r2, r3
 800c090:	2190      	movs	r1, #144	; 0x90
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f002 f858 	bl	800e148 <VL53L0X_RdDWord>
 800c098:	4603      	mov	r3, r0
 800c09a:	461a      	mov	r2, r3
 800c09c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a8:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800c0ae:	2274      	movs	r2, #116	; 0x74
 800c0b0:	2194      	movs	r1, #148	; 0x94
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f001 ff64 	bl	800df80 <VL53L0X_WrByte>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7ff fc5c 	bl	800b984 <VL53L0X_device_read_strobe>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c0da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c0de:	461a      	mov	r2, r3
 800c0e0:	2190      	movs	r1, #144	; 0x90
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f002 f830 	bl	800e148 <VL53L0X_RdDWord>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800c0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f8:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800c0fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800c100:	2275      	movs	r2, #117	; 0x75
 800c102:	2194      	movs	r1, #148	; 0x94
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f001 ff3b 	bl	800df80 <VL53L0X_WrByte>
 800c10a:	4603      	mov	r3, r0
 800c10c:	461a      	mov	r2, r3
 800c10e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c112:	4313      	orrs	r3, r2
 800c114:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f7ff fc33 	bl	800b984 <VL53L0X_device_read_strobe>
 800c11e:	4603      	mov	r3, r0
 800c120:	461a      	mov	r2, r3
 800c122:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c126:	4313      	orrs	r3, r2
 800c128:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c12c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c130:	461a      	mov	r2, r3
 800c132:	2190      	movs	r1, #144	; 0x90
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f002 f807 	bl	800e148 <VL53L0X_RdDWord>
 800c13a:	4603      	mov	r3, r0
 800c13c:	461a      	mov	r2, r3
 800c13e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c142:	4313      	orrs	r3, r2
 800c144:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800c148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14a:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800c150:	2276      	movs	r2, #118	; 0x76
 800c152:	2194      	movs	r1, #148	; 0x94
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f001 ff13 	bl	800df80 <VL53L0X_WrByte>
 800c15a:	4603      	mov	r3, r0
 800c15c:	461a      	mov	r2, r3
 800c15e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c162:	4313      	orrs	r3, r2
 800c164:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff fc0b 	bl	800b984 <VL53L0X_device_read_strobe>
 800c16e:	4603      	mov	r3, r0
 800c170:	461a      	mov	r2, r3
 800c172:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c176:	4313      	orrs	r3, r2
 800c178:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c17c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c180:	461a      	mov	r2, r3
 800c182:	2190      	movs	r1, #144	; 0x90
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f001 ffdf 	bl	800e148 <VL53L0X_RdDWord>
 800c18a:	4603      	mov	r3, r0
 800c18c:	461a      	mov	r2, r3
 800c18e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c192:	4313      	orrs	r3, r2
 800c194:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800c198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800c19c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	2181      	movs	r1, #129	; 0x81
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f001 feea 	bl	800df80 <VL53L0X_WrByte>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c1ba:	2206      	movs	r2, #6
 800c1bc:	21ff      	movs	r1, #255	; 0xff
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f001 fede 	bl	800df80 <VL53L0X_WrByte>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c1d2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	2183      	movs	r1, #131	; 0x83
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f001 ff52 	bl	800e084 <VL53L0X_RdByte>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800c1ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1f2:	f023 0304 	bic.w	r3, r3, #4
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	2183      	movs	r1, #131	; 0x83
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f001 febf 	bl	800df80 <VL53L0X_WrByte>
 800c202:	4603      	mov	r3, r0
 800c204:	461a      	mov	r2, r3
 800c206:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c20a:	4313      	orrs	r3, r2
 800c20c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c210:	2201      	movs	r2, #1
 800c212:	21ff      	movs	r1, #255	; 0xff
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f001 feb3 	bl	800df80 <VL53L0X_WrByte>
 800c21a:	4603      	mov	r3, r0
 800c21c:	461a      	mov	r2, r3
 800c21e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c222:	4313      	orrs	r3, r2
 800c224:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c228:	2201      	movs	r2, #1
 800c22a:	2100      	movs	r1, #0
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f001 fea7 	bl	800df80 <VL53L0X_WrByte>
 800c232:	4603      	mov	r3, r0
 800c234:	461a      	mov	r2, r3
 800c236:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c23a:	4313      	orrs	r3, r2
 800c23c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c240:	2200      	movs	r2, #0
 800c242:	21ff      	movs	r1, #255	; 0xff
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f001 fe9b 	bl	800df80 <VL53L0X_WrByte>
 800c24a:	4603      	mov	r3, r0
 800c24c:	461a      	mov	r2, r3
 800c24e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c252:	4313      	orrs	r3, r2
 800c254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c258:	2200      	movs	r2, #0
 800c25a:	2180      	movs	r1, #128	; 0x80
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f001 fe8f 	bl	800df80 <VL53L0X_WrByte>
 800c262:	4603      	mov	r3, r0
 800c264:	461a      	mov	r2, r3
 800c266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c26a:	4313      	orrs	r3, r2
 800c26c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800c270:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800c274:	2b00      	cmp	r3, #0
 800c276:	f040 808f 	bne.w	800c398 <VL53L0X_get_info_from_device+0x98e>
 800c27a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c27e:	2b07      	cmp	r3, #7
 800c280:	f000 808a 	beq.w	800c398 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800c284:	78fb      	ldrb	r3, [r7, #3]
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d024      	beq.n	800c2d8 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c28e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c292:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c296:	2b00      	cmp	r3, #0
 800c298:	d11e      	bne.n	800c2d8 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800c2a0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800c2aa:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2b2:	e00e      	b.n	800c2d2 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800c2b4:	f107 0208 	add.w	r2, r7, #8
 800c2b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2ba:	4413      	add	r3, r2
 800c2bc:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2c2:	4413      	add	r3, r2
 800c2c4:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800c2c8:	460a      	mov	r2, r1
 800c2ca:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c2cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2d4:	2b05      	cmp	r3, #5
 800c2d6:	dded      	ble.n	800c2b4 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800c2d8:	78fb      	ldrb	r3, [r7, #3]
 800c2da:	f003 0302 	and.w	r3, r3, #2
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d018      	beq.n	800c314 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800c2e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c2e6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d112      	bne.n	800c314 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c2ee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c2f8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	33f3      	adds	r3, #243	; 0xf3
 800c306:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800c308:	f107 0310 	add.w	r3, r7, #16
 800c30c:	4619      	mov	r1, r3
 800c30e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c310:	f002 fe46 	bl	800efa0 <strcpy>

		}

		if (((option & 4) == 4) &&
 800c314:	78fb      	ldrb	r3, [r7, #3]
 800c316:	f003 0304 	and.w	r3, r3, #4
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d030      	beq.n	800c380 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800c31e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c322:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800c326:	2b00      	cmp	r3, #0
 800c328:	d12a      	bne.n	800c380 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c32a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800c33a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c33c:	025b      	lsls	r3, r3, #9
 800c33e:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c344:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800c348:	2300      	movs	r3, #0
 800c34a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800c34e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c350:	2b00      	cmp	r3, #0
 800c352:	d011      	beq.n	800c378 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800c354:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800c35c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c35e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c362:	fb02 f303 	mul.w	r3, r2, r3
 800c366:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800c368:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800c36c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800c370:	425b      	negs	r3, r3
 800c372:	b29b      	uxth	r3, r3
 800c374:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800c378:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800c380:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c384:	78fb      	ldrb	r3, [r7, #3]
 800c386:	4313      	orrs	r3, r2
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800c38e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c398:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3760      	adds	r7, #96	; 0x60
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b087      	sub	sp, #28
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800c3b0:	f240 6277 	movw	r2, #1655	; 0x677
 800c3b4:	f04f 0300 	mov.w	r3, #0
 800c3b8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800c3bc:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800c3c0:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800c3c2:	78fb      	ldrb	r3, [r7, #3]
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800c3ca:	693a      	ldr	r2, [r7, #16]
 800c3cc:	fb02 f303 	mul.w	r3, r2, r3
 800c3d0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800c3d2:	68bb      	ldr	r3, [r7, #8]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	371c      	adds	r7, #28
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b087      	sub	sp, #28
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d017      	beq.n	800c42a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c400:	e005      	b.n	800c40e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	085b      	lsrs	r3, r3, #1
 800c406:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800c408:	89fb      	ldrh	r3, [r7, #14]
 800c40a:	3301      	adds	r3, #1
 800c40c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c414:	2b00      	cmp	r3, #0
 800c416:	d1f4      	bne.n	800c402 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800c418:	89fb      	ldrh	r3, [r7, #14]
 800c41a:	021b      	lsls	r3, r3, #8
 800c41c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	b29b      	uxth	r3, r3
 800c422:	b2db      	uxtb	r3, r3
 800c424:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800c426:	4413      	add	r3, r2
 800c428:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800c42a:	8afb      	ldrh	r3, [r7, #22]

}
 800c42c:	4618      	mov	r0, r3
 800c42e:	371c      	adds	r7, #28
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800c438:	b480      	push	{r7}
 800c43a:	b085      	sub	sp, #20
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	4603      	mov	r3, r0
 800c440:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800c442:	2300      	movs	r3, #0
 800c444:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c446:	88fb      	ldrh	r3, [r7, #6]
 800c448:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c44a:	88fa      	ldrh	r2, [r7, #6]
 800c44c:	0a12      	lsrs	r2, r2, #8
 800c44e:	b292      	uxth	r2, r2
 800c450:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c452:	3301      	adds	r3, #1
 800c454:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800c456:	68fb      	ldr	r3, [r7, #12]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3714      	adds	r7, #20
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b088      	sub	sp, #32
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	4613      	mov	r3, r2
 800c470:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800c472:	2300      	movs	r3, #0
 800c474:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c476:	79fb      	ldrb	r3, [r7, #7]
 800c478:	4619      	mov	r1, r3
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f7ff ff92 	bl	800c3a4 <VL53L0X_calc_macro_period_ps>
 800c480:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c488:	4a0a      	ldr	r2, [pc, #40]	; (800c4b4 <VL53L0X_calc_timeout_mclks+0x50>)
 800c48a:	fba2 2303 	umull	r2, r3, r2, r3
 800c48e:	099b      	lsrs	r3, r3, #6
 800c490:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c498:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	085b      	lsrs	r3, r3, #1
 800c4a0:	441a      	add	r2, r3
	timeout_period_mclks =
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4a8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800c4aa:	69fb      	ldr	r3, [r7, #28]
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3720      	adds	r7, #32
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	10624dd3 	.word	0x10624dd3

0800c4b8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b086      	sub	sp, #24
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	807b      	strh	r3, [r7, #2]
 800c4c4:	4613      	mov	r3, r2
 800c4c6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c4cc:	787b      	ldrb	r3, [r7, #1]
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f7ff ff67 	bl	800c3a4 <VL53L0X_calc_macro_period_ps>
 800c4d6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c4de:	4a0a      	ldr	r2, [pc, #40]	; (800c508 <VL53L0X_calc_timeout_us+0x50>)
 800c4e0:	fba2 2303 	umull	r2, r3, r2, r3
 800c4e4:	099b      	lsrs	r3, r3, #6
 800c4e6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800c4e8:	887b      	ldrh	r3, [r7, #2]
 800c4ea:	68fa      	ldr	r2, [r7, #12]
 800c4ec:	fb02 f303 	mul.w	r3, r2, r3
 800c4f0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800c4f4:	4a04      	ldr	r2, [pc, #16]	; (800c508 <VL53L0X_calc_timeout_us+0x50>)
 800c4f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c4fa:	099b      	lsrs	r3, r3, #6
 800c4fc:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800c4fe:	697b      	ldr	r3, [r7, #20]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3718      	adds	r7, #24
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	10624dd3 	.word	0x10624dd3

0800c50c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b08c      	sub	sp, #48	; 0x30
 800c510:	af00      	add	r7, sp, #0
 800c512:	60f8      	str	r0, [r7, #12]
 800c514:	460b      	mov	r3, r1
 800c516:	607a      	str	r2, [r7, #4]
 800c518:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c51a:	2300      	movs	r3, #0
 800c51c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800c520:	2300      	movs	r3, #0
 800c522:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800c526:	2300      	movs	r3, #0
 800c528:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800c52a:	2300      	movs	r3, #0
 800c52c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800c52e:	2300      	movs	r3, #0
 800c530:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c532:	7afb      	ldrb	r3, [r7, #11]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d005      	beq.n	800c544 <get_sequence_step_timeout+0x38>
 800c538:	7afb      	ldrb	r3, [r7, #11]
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d002      	beq.n	800c544 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c53e:	7afb      	ldrb	r3, [r7, #11]
 800c540:	2b02      	cmp	r3, #2
 800c542:	d128      	bne.n	800c596 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c544:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c548:	461a      	mov	r2, r3
 800c54a:	2100      	movs	r1, #0
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	f7fd fa4d 	bl	80099ec <VL53L0X_GetVcselPulsePeriod>
 800c552:	4603      	mov	r3, r0
 800c554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800c558:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d109      	bne.n	800c574 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800c560:	f107 0320 	add.w	r3, r7, #32
 800c564:	461a      	mov	r2, r3
 800c566:	2146      	movs	r1, #70	; 0x46
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f001 fd8b 	bl	800e084 <VL53L0X_RdByte>
 800c56e:	4603      	mov	r3, r0
 800c570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800c574:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c578:	b29b      	uxth	r3, r3
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7ff ff5c 	bl	800c438 <VL53L0X_decode_timeout>
 800c580:	4603      	mov	r3, r0
 800c582:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c584:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c588:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c58a:	4619      	mov	r1, r3
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f7ff ff93 	bl	800c4b8 <VL53L0X_calc_timeout_us>
 800c592:	62b8      	str	r0, [r7, #40]	; 0x28
 800c594:	e092      	b.n	800c6bc <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c596:	7afb      	ldrb	r3, [r7, #11]
 800c598:	2b03      	cmp	r3, #3
 800c59a:	d135      	bne.n	800c608 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c59c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f7fd fa21 	bl	80099ec <VL53L0X_GetVcselPulsePeriod>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c5b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	f040 8081 	bne.w	800c6bc <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c5ba:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c5be:	461a      	mov	r2, r3
 800c5c0:	2100      	movs	r1, #0
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	f7fd fa12 	bl	80099ec <VL53L0X_GetVcselPulsePeriod>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800c5ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d109      	bne.n	800c5ea <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800c5d6:	f107 031e 	add.w	r3, r7, #30
 800c5da:	461a      	mov	r2, r3
 800c5dc:	2151      	movs	r1, #81	; 0x51
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f001 fd7a 	bl	800e0d8 <VL53L0X_RdWord>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c5ea:	8bfb      	ldrh	r3, [r7, #30]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7ff ff23 	bl	800c438 <VL53L0X_decode_timeout>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c5f6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c5fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f7ff ff5a 	bl	800c4b8 <VL53L0X_calc_timeout_us>
 800c604:	62b8      	str	r0, [r7, #40]	; 0x28
 800c606:	e059      	b.n	800c6bc <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c608:	7afb      	ldrb	r3, [r7, #11]
 800c60a:	2b04      	cmp	r3, #4
 800c60c:	d156      	bne.n	800c6bc <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c60e:	f107 0314 	add.w	r3, r7, #20
 800c612:	4619      	mov	r1, r3
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f7fd faf5 	bl	8009c04 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800c61a:	2300      	movs	r3, #0
 800c61c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800c61e:	7dfb      	ldrb	r3, [r7, #23]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d01d      	beq.n	800c660 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c624:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c628:	461a      	mov	r2, r3
 800c62a:	2100      	movs	r1, #0
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f7fd f9dd 	bl	80099ec <VL53L0X_GetVcselPulsePeriod>
 800c632:	4603      	mov	r3, r0
 800c634:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800c638:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d10f      	bne.n	800c660 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800c640:	f107 031e 	add.w	r3, r7, #30
 800c644:	461a      	mov	r2, r3
 800c646:	2151      	movs	r1, #81	; 0x51
 800c648:	68f8      	ldr	r0, [r7, #12]
 800c64a:	f001 fd45 	bl	800e0d8 <VL53L0X_RdWord>
 800c64e:	4603      	mov	r3, r0
 800c650:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c654:	8bfb      	ldrh	r3, [r7, #30]
 800c656:	4618      	mov	r0, r3
 800c658:	f7ff feee 	bl	800c438 <VL53L0X_decode_timeout>
 800c65c:	4603      	mov	r3, r0
 800c65e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c660:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c664:	2b00      	cmp	r3, #0
 800c666:	d109      	bne.n	800c67c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c668:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c66c:	461a      	mov	r2, r3
 800c66e:	2101      	movs	r1, #1
 800c670:	68f8      	ldr	r0, [r7, #12]
 800c672:	f7fd f9bb 	bl	80099ec <VL53L0X_GetVcselPulsePeriod>
 800c676:	4603      	mov	r3, r0
 800c678:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c67c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10f      	bne.n	800c6a4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800c684:	f107 031c 	add.w	r3, r7, #28
 800c688:	461a      	mov	r2, r3
 800c68a:	2171      	movs	r1, #113	; 0x71
 800c68c:	68f8      	ldr	r0, [r7, #12]
 800c68e:	f001 fd23 	bl	800e0d8 <VL53L0X_RdWord>
 800c692:	4603      	mov	r3, r0
 800c694:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c698:	8bbb      	ldrh	r3, [r7, #28]
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7ff fecc 	bl	800c438 <VL53L0X_decode_timeout>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800c6a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c6a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c6a8:	1ad3      	subs	r3, r2, r3
 800c6aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c6ac:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c6b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f7ff feff 	bl	800c4b8 <VL53L0X_calc_timeout_us>
 800c6ba:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6c0:	601a      	str	r2, [r3, #0]

	return Status;
 800c6c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3730      	adds	r7, #48	; 0x30
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b08a      	sub	sp, #40	; 0x28
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	60f8      	str	r0, [r7, #12]
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	607a      	str	r2, [r7, #4]
 800c6da:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c6e2:	7afb      	ldrb	r3, [r7, #11]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d005      	beq.n	800c6f4 <set_sequence_step_timeout+0x26>
 800c6e8:	7afb      	ldrb	r3, [r7, #11]
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d002      	beq.n	800c6f4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c6ee:	7afb      	ldrb	r3, [r7, #11]
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	d138      	bne.n	800c766 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c6f4:	f107 031b 	add.w	r3, r7, #27
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	2100      	movs	r1, #0
 800c6fc:	68f8      	ldr	r0, [r7, #12]
 800c6fe:	f7fd f975 	bl	80099ec <VL53L0X_GetVcselPulsePeriod>
 800c702:	4603      	mov	r3, r0
 800c704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800c708:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d11a      	bne.n	800c746 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800c710:	7efb      	ldrb	r3, [r7, #27]
 800c712:	461a      	mov	r2, r3
 800c714:	6879      	ldr	r1, [r7, #4]
 800c716:	68f8      	ldr	r0, [r7, #12]
 800c718:	f7ff fea4 	bl	800c464 <VL53L0X_calc_timeout_mclks>
 800c71c:	4603      	mov	r3, r0
 800c71e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800c720:	8bbb      	ldrh	r3, [r7, #28]
 800c722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c726:	d903      	bls.n	800c730 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800c728:	23ff      	movs	r3, #255	; 0xff
 800c72a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c72e:	e004      	b.n	800c73a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800c730:	8bbb      	ldrh	r3, [r7, #28]
 800c732:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800c734:	3b01      	subs	r3, #1
 800c736:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c73a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c73e:	b29a      	uxth	r2, r3
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c746:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	f040 80ab 	bne.w	800c8a6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800c750:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c754:	461a      	mov	r2, r3
 800c756:	2146      	movs	r1, #70	; 0x46
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f001 fc11 	bl	800df80 <VL53L0X_WrByte>
 800c75e:	4603      	mov	r3, r0
 800c760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800c764:	e09f      	b.n	800c8a6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c766:	7afb      	ldrb	r3, [r7, #11]
 800c768:	2b03      	cmp	r3, #3
 800c76a:	d135      	bne.n	800c7d8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800c76c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c770:	2b00      	cmp	r3, #0
 800c772:	d11b      	bne.n	800c7ac <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c774:	f107 031b 	add.w	r3, r7, #27
 800c778:	461a      	mov	r2, r3
 800c77a:	2100      	movs	r1, #0
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f7fd f935 	bl	80099ec <VL53L0X_GetVcselPulsePeriod>
 800c782:	4603      	mov	r3, r0
 800c784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c788:	7efb      	ldrb	r3, [r7, #27]
 800c78a:	461a      	mov	r2, r3
 800c78c:	6879      	ldr	r1, [r7, #4]
 800c78e:	68f8      	ldr	r0, [r7, #12]
 800c790:	f7ff fe68 	bl	800c464 <VL53L0X_calc_timeout_mclks>
 800c794:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800c796:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800c798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7ff fe20 	bl	800c3e0 <VL53L0X_encode_timeout>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c7a4:	8b3a      	ldrh	r2, [r7, #24]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c7ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d108      	bne.n	800c7c6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800c7b4:	8b3b      	ldrh	r3, [r7, #24]
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	2151      	movs	r1, #81	; 0x51
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f001 fc04 	bl	800dfc8 <VL53L0X_WrWord>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c7c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d16b      	bne.n	800c8a6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800c7d6:	e066      	b.n	800c8a6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c7d8:	7afb      	ldrb	r3, [r7, #11]
 800c7da:	2b04      	cmp	r3, #4
 800c7dc:	d160      	bne.n	800c8a0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800c7de:	f107 0310 	add.w	r3, r7, #16
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f7fd fa0d 	bl	8009c04 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800c7ee:	7cfb      	ldrb	r3, [r7, #19]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d01d      	beq.n	800c830 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c7f4:	f107 031b 	add.w	r3, r7, #27
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f7fd f8f5 	bl	80099ec <VL53L0X_GetVcselPulsePeriod>
 800c802:	4603      	mov	r3, r0
 800c804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800c808:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d10f      	bne.n	800c830 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800c810:	f107 0318 	add.w	r3, r7, #24
 800c814:	461a      	mov	r2, r3
 800c816:	2151      	movs	r1, #81	; 0x51
 800c818:	68f8      	ldr	r0, [r7, #12]
 800c81a:	f001 fc5d 	bl	800e0d8 <VL53L0X_RdWord>
 800c81e:	4603      	mov	r3, r0
 800c820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800c824:	8b3b      	ldrh	r3, [r7, #24]
 800c826:	4618      	mov	r0, r3
 800c828:	f7ff fe06 	bl	800c438 <VL53L0X_decode_timeout>
 800c82c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800c82e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800c830:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c834:	2b00      	cmp	r3, #0
 800c836:	d109      	bne.n	800c84c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c838:	f107 031b 	add.w	r3, r7, #27
 800c83c:	461a      	mov	r2, r3
 800c83e:	2101      	movs	r1, #1
 800c840:	68f8      	ldr	r0, [r7, #12]
 800c842:	f7fd f8d3 	bl	80099ec <VL53L0X_GetVcselPulsePeriod>
 800c846:	4603      	mov	r3, r0
 800c848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800c84c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c850:	2b00      	cmp	r3, #0
 800c852:	d128      	bne.n	800c8a6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c854:	7efb      	ldrb	r3, [r7, #27]
 800c856:	461a      	mov	r2, r3
 800c858:	6879      	ldr	r1, [r7, #4]
 800c85a:	68f8      	ldr	r0, [r7, #12]
 800c85c:	f7ff fe02 	bl	800c464 <VL53L0X_calc_timeout_mclks>
 800c860:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800c862:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c864:	6a3a      	ldr	r2, [r7, #32]
 800c866:	4413      	add	r3, r2
 800c868:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800c86a:	6a38      	ldr	r0, [r7, #32]
 800c86c:	f7ff fdb8 	bl	800c3e0 <VL53L0X_encode_timeout>
 800c870:	4603      	mov	r3, r0
 800c872:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800c874:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d108      	bne.n	800c88e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800c87c:	8bfb      	ldrh	r3, [r7, #30]
 800c87e:	461a      	mov	r2, r3
 800c880:	2171      	movs	r1, #113	; 0x71
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f001 fba0 	bl	800dfc8 <VL53L0X_WrWord>
 800c888:	4603      	mov	r3, r0
 800c88a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800c88e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c892:	2b00      	cmp	r3, #0
 800c894:	d107      	bne.n	800c8a6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800c89e:	e002      	b.n	800c8a6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c8a0:	23fc      	movs	r3, #252	; 0xfc
 800c8a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800c8a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3728      	adds	r7, #40	; 0x28
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}

0800c8b2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b08a      	sub	sp, #40	; 0x28
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	70fb      	strb	r3, [r7, #3]
 800c8be:	4613      	mov	r3, r2
 800c8c0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800c8c8:	230c      	movs	r3, #12
 800c8ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800c8ce:	2312      	movs	r3, #18
 800c8d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800c8d4:	2308      	movs	r3, #8
 800c8d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800c8da:	230e      	movs	r3, #14
 800c8dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800c8e4:	78bb      	ldrb	r3, [r7, #2]
 800c8e6:	f003 0301 	and.w	r3, r3, #1
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d003      	beq.n	800c8f8 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c8f0:	23fc      	movs	r3, #252	; 0xfc
 800c8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c8f6:	e020      	b.n	800c93a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800c8f8:	78fb      	ldrb	r3, [r7, #3]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d10d      	bne.n	800c91a <VL53L0X_set_vcsel_pulse_period+0x68>
 800c8fe:	78ba      	ldrb	r2, [r7, #2]
 800c900:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c904:	429a      	cmp	r2, r3
 800c906:	d304      	bcc.n	800c912 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800c908:	78ba      	ldrb	r2, [r7, #2]
 800c90a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c90e:	429a      	cmp	r2, r3
 800c910:	d903      	bls.n	800c91a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c912:	23fc      	movs	r3, #252	; 0xfc
 800c914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c918:	e00f      	b.n	800c93a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800c91a:	78fb      	ldrb	r3, [r7, #3]
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d10c      	bne.n	800c93a <VL53L0X_set_vcsel_pulse_period+0x88>
 800c920:	78ba      	ldrb	r2, [r7, #2]
 800c922:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c926:	429a      	cmp	r2, r3
 800c928:	d304      	bcc.n	800c934 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800c92a:	78ba      	ldrb	r2, [r7, #2]
 800c92c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c930:	429a      	cmp	r2, r3
 800c932:	d902      	bls.n	800c93a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c934:	23fc      	movs	r3, #252	; 0xfc
 800c936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800c93a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d002      	beq.n	800c948 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800c942:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c946:	e239      	b.n	800cdbc <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800c948:	78fb      	ldrb	r3, [r7, #3]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d150      	bne.n	800c9f0 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800c94e:	78bb      	ldrb	r3, [r7, #2]
 800c950:	2b0c      	cmp	r3, #12
 800c952:	d110      	bne.n	800c976 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800c954:	2218      	movs	r2, #24
 800c956:	2157      	movs	r1, #87	; 0x57
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f001 fb11 	bl	800df80 <VL53L0X_WrByte>
 800c95e:	4603      	mov	r3, r0
 800c960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800c964:	2208      	movs	r2, #8
 800c966:	2156      	movs	r1, #86	; 0x56
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f001 fb09 	bl	800df80 <VL53L0X_WrByte>
 800c96e:	4603      	mov	r3, r0
 800c970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c974:	e17f      	b.n	800cc76 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800c976:	78bb      	ldrb	r3, [r7, #2]
 800c978:	2b0e      	cmp	r3, #14
 800c97a:	d110      	bne.n	800c99e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800c97c:	2230      	movs	r2, #48	; 0x30
 800c97e:	2157      	movs	r1, #87	; 0x57
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f001 fafd 	bl	800df80 <VL53L0X_WrByte>
 800c986:	4603      	mov	r3, r0
 800c988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800c98c:	2208      	movs	r2, #8
 800c98e:	2156      	movs	r1, #86	; 0x56
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f001 faf5 	bl	800df80 <VL53L0X_WrByte>
 800c996:	4603      	mov	r3, r0
 800c998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c99c:	e16b      	b.n	800cc76 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800c99e:	78bb      	ldrb	r3, [r7, #2]
 800c9a0:	2b10      	cmp	r3, #16
 800c9a2:	d110      	bne.n	800c9c6 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800c9a4:	2240      	movs	r2, #64	; 0x40
 800c9a6:	2157      	movs	r1, #87	; 0x57
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f001 fae9 	bl	800df80 <VL53L0X_WrByte>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800c9b4:	2208      	movs	r2, #8
 800c9b6:	2156      	movs	r1, #86	; 0x56
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f001 fae1 	bl	800df80 <VL53L0X_WrByte>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9c4:	e157      	b.n	800cc76 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800c9c6:	78bb      	ldrb	r3, [r7, #2]
 800c9c8:	2b12      	cmp	r3, #18
 800c9ca:	f040 8154 	bne.w	800cc76 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800c9ce:	2250      	movs	r2, #80	; 0x50
 800c9d0:	2157      	movs	r1, #87	; 0x57
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f001 fad4 	bl	800df80 <VL53L0X_WrByte>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800c9de:	2208      	movs	r2, #8
 800c9e0:	2156      	movs	r1, #86	; 0x56
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f001 facc 	bl	800df80 <VL53L0X_WrByte>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9ee:	e142      	b.n	800cc76 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800c9f0:	78fb      	ldrb	r3, [r7, #3]
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	f040 813f 	bne.w	800cc76 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800c9f8:	78bb      	ldrb	r3, [r7, #2]
 800c9fa:	2b08      	cmp	r3, #8
 800c9fc:	d14c      	bne.n	800ca98 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800c9fe:	2210      	movs	r2, #16
 800ca00:	2148      	movs	r1, #72	; 0x48
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f001 fabc 	bl	800df80 <VL53L0X_WrByte>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800ca0e:	2208      	movs	r2, #8
 800ca10:	2147      	movs	r1, #71	; 0x47
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f001 fab4 	bl	800df80 <VL53L0X_WrByte>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ca1e:	2202      	movs	r2, #2
 800ca20:	2132      	movs	r1, #50	; 0x32
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f001 faac 	bl	800df80 <VL53L0X_WrByte>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca30:	4313      	orrs	r3, r2
 800ca32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800ca36:	220c      	movs	r2, #12
 800ca38:	2130      	movs	r1, #48	; 0x30
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f001 faa0 	bl	800df80 <VL53L0X_WrByte>
 800ca40:	4603      	mov	r3, r0
 800ca42:	461a      	mov	r2, r3
 800ca44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ca4e:	2201      	movs	r2, #1
 800ca50:	21ff      	movs	r1, #255	; 0xff
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f001 fa94 	bl	800df80 <VL53L0X_WrByte>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca60:	4313      	orrs	r3, r2
 800ca62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ca66:	2230      	movs	r2, #48	; 0x30
 800ca68:	2130      	movs	r1, #48	; 0x30
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f001 fa88 	bl	800df80 <VL53L0X_WrByte>
 800ca70:	4603      	mov	r3, r0
 800ca72:	461a      	mov	r2, r3
 800ca74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ca7e:	2200      	movs	r2, #0
 800ca80:	21ff      	movs	r1, #255	; 0xff
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f001 fa7c 	bl	800df80 <VL53L0X_WrByte>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca90:	4313      	orrs	r3, r2
 800ca92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca96:	e0ee      	b.n	800cc76 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800ca98:	78bb      	ldrb	r3, [r7, #2]
 800ca9a:	2b0a      	cmp	r3, #10
 800ca9c:	d14c      	bne.n	800cb38 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800ca9e:	2228      	movs	r2, #40	; 0x28
 800caa0:	2148      	movs	r1, #72	; 0x48
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f001 fa6c 	bl	800df80 <VL53L0X_WrByte>
 800caa8:	4603      	mov	r3, r0
 800caaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800caae:	2208      	movs	r2, #8
 800cab0:	2147      	movs	r1, #71	; 0x47
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f001 fa64 	bl	800df80 <VL53L0X_WrByte>
 800cab8:	4603      	mov	r3, r0
 800caba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800cabe:	2203      	movs	r2, #3
 800cac0:	2132      	movs	r1, #50	; 0x32
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f001 fa5c 	bl	800df80 <VL53L0X_WrByte>
 800cac8:	4603      	mov	r3, r0
 800caca:	461a      	mov	r2, r3
 800cacc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cad0:	4313      	orrs	r3, r2
 800cad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800cad6:	2209      	movs	r2, #9
 800cad8:	2130      	movs	r1, #48	; 0x30
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f001 fa50 	bl	800df80 <VL53L0X_WrByte>
 800cae0:	4603      	mov	r3, r0
 800cae2:	461a      	mov	r2, r3
 800cae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cae8:	4313      	orrs	r3, r2
 800caea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800caee:	2201      	movs	r2, #1
 800caf0:	21ff      	movs	r1, #255	; 0xff
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f001 fa44 	bl	800df80 <VL53L0X_WrByte>
 800caf8:	4603      	mov	r3, r0
 800cafa:	461a      	mov	r2, r3
 800cafc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb00:	4313      	orrs	r3, r2
 800cb02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800cb06:	2220      	movs	r2, #32
 800cb08:	2130      	movs	r1, #48	; 0x30
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f001 fa38 	bl	800df80 <VL53L0X_WrByte>
 800cb10:	4603      	mov	r3, r0
 800cb12:	461a      	mov	r2, r3
 800cb14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800cb1e:	2200      	movs	r2, #0
 800cb20:	21ff      	movs	r1, #255	; 0xff
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f001 fa2c 	bl	800df80 <VL53L0X_WrByte>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb30:	4313      	orrs	r3, r2
 800cb32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb36:	e09e      	b.n	800cc76 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800cb38:	78bb      	ldrb	r3, [r7, #2]
 800cb3a:	2b0c      	cmp	r3, #12
 800cb3c:	d14c      	bne.n	800cbd8 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800cb3e:	2238      	movs	r2, #56	; 0x38
 800cb40:	2148      	movs	r1, #72	; 0x48
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f001 fa1c 	bl	800df80 <VL53L0X_WrByte>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800cb4e:	2208      	movs	r2, #8
 800cb50:	2147      	movs	r1, #71	; 0x47
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f001 fa14 	bl	800df80 <VL53L0X_WrByte>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800cb5e:	2203      	movs	r2, #3
 800cb60:	2132      	movs	r1, #50	; 0x32
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f001 fa0c 	bl	800df80 <VL53L0X_WrByte>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb70:	4313      	orrs	r3, r2
 800cb72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800cb76:	2208      	movs	r2, #8
 800cb78:	2130      	movs	r1, #48	; 0x30
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f001 fa00 	bl	800df80 <VL53L0X_WrByte>
 800cb80:	4603      	mov	r3, r0
 800cb82:	461a      	mov	r2, r3
 800cb84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800cb8e:	2201      	movs	r2, #1
 800cb90:	21ff      	movs	r1, #255	; 0xff
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f001 f9f4 	bl	800df80 <VL53L0X_WrByte>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cba0:	4313      	orrs	r3, r2
 800cba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800cba6:	2220      	movs	r2, #32
 800cba8:	2130      	movs	r1, #48	; 0x30
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f001 f9e8 	bl	800df80 <VL53L0X_WrByte>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	21ff      	movs	r1, #255	; 0xff
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f001 f9dc 	bl	800df80 <VL53L0X_WrByte>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	461a      	mov	r2, r3
 800cbcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cbd6:	e04e      	b.n	800cc76 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800cbd8:	78bb      	ldrb	r3, [r7, #2]
 800cbda:	2b0e      	cmp	r3, #14
 800cbdc:	d14b      	bne.n	800cc76 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800cbde:	2248      	movs	r2, #72	; 0x48
 800cbe0:	2148      	movs	r1, #72	; 0x48
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f001 f9cc 	bl	800df80 <VL53L0X_WrByte>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800cbee:	2208      	movs	r2, #8
 800cbf0:	2147      	movs	r1, #71	; 0x47
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f001 f9c4 	bl	800df80 <VL53L0X_WrByte>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800cbfe:	2203      	movs	r2, #3
 800cc00:	2132      	movs	r1, #50	; 0x32
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f001 f9bc 	bl	800df80 <VL53L0X_WrByte>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc10:	4313      	orrs	r3, r2
 800cc12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800cc16:	2207      	movs	r2, #7
 800cc18:	2130      	movs	r1, #48	; 0x30
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f001 f9b0 	bl	800df80 <VL53L0X_WrByte>
 800cc20:	4603      	mov	r3, r0
 800cc22:	461a      	mov	r2, r3
 800cc24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800cc2e:	2201      	movs	r2, #1
 800cc30:	21ff      	movs	r1, #255	; 0xff
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f001 f9a4 	bl	800df80 <VL53L0X_WrByte>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc40:	4313      	orrs	r3, r2
 800cc42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800cc46:	2220      	movs	r2, #32
 800cc48:	2130      	movs	r1, #48	; 0x30
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f001 f998 	bl	800df80 <VL53L0X_WrByte>
 800cc50:	4603      	mov	r3, r0
 800cc52:	461a      	mov	r2, r3
 800cc54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800cc5e:	2200      	movs	r2, #0
 800cc60:	21ff      	movs	r1, #255	; 0xff
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f001 f98c 	bl	800df80 <VL53L0X_WrByte>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc70:	4313      	orrs	r3, r2
 800cc72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800cc76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d17f      	bne.n	800cd7e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800cc7e:	78bb      	ldrb	r3, [r7, #2]
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7fe fe38 	bl	800b8f6 <VL53L0X_encode_vcsel_period>
 800cc86:	4603      	mov	r3, r0
 800cc88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800cc8c:	78fb      	ldrb	r3, [r7, #3]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d002      	beq.n	800cc98 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d045      	beq.n	800cd22 <VL53L0X_set_vcsel_pulse_period+0x470>
 800cc96:	e06e      	b.n	800cd76 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800cc98:	f107 0314 	add.w	r3, r7, #20
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	2103      	movs	r1, #3
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f7ff fc33 	bl	800c50c <get_sequence_step_timeout>
 800cca6:	4603      	mov	r3, r0
 800cca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ccac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d109      	bne.n	800ccc8 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800ccb4:	f107 0310 	add.w	r3, r7, #16
 800ccb8:	461a      	mov	r2, r3
 800ccba:	2102      	movs	r1, #2
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f7ff fc25 	bl	800c50c <get_sequence_step_timeout>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ccc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d109      	bne.n	800cce4 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800ccd0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	2150      	movs	r1, #80	; 0x50
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f001 f951 	bl	800df80 <VL53L0X_WrByte>
 800ccde:	4603      	mov	r3, r0
 800cce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800cce4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d108      	bne.n	800ccfe <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	461a      	mov	r2, r3
 800ccf0:	2103      	movs	r1, #3
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f7ff fceb 	bl	800c6ce <set_sequence_step_timeout>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800ccfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d108      	bne.n	800cd18 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	461a      	mov	r2, r3
 800cd0a:	2102      	movs	r1, #2
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f7ff fcde 	bl	800c6ce <set_sequence_step_timeout>
 800cd12:	4603      	mov	r3, r0
 800cd14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	78ba      	ldrb	r2, [r7, #2]
 800cd1c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800cd20:	e02e      	b.n	800cd80 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800cd22:	f107 0318 	add.w	r3, r7, #24
 800cd26:	461a      	mov	r2, r3
 800cd28:	2104      	movs	r1, #4
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f7ff fbee 	bl	800c50c <get_sequence_step_timeout>
 800cd30:	4603      	mov	r3, r0
 800cd32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800cd36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d109      	bne.n	800cd52 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800cd3e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cd42:	461a      	mov	r2, r3
 800cd44:	2170      	movs	r1, #112	; 0x70
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f001 f91a 	bl	800df80 <VL53L0X_WrByte>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800cd52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d108      	bne.n	800cd6c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	2104      	movs	r1, #4
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f7ff fcb4 	bl	800c6ce <set_sequence_step_timeout>
 800cd66:	4603      	mov	r3, r0
 800cd68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	78ba      	ldrb	r2, [r7, #2]
 800cd70:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800cd74:	e004      	b.n	800cd80 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cd76:	23fc      	movs	r3, #252	; 0xfc
 800cd78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd7c:	e000      	b.n	800cd80 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800cd7e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800cd80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d109      	bne.n	800cd9c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	695b      	ldr	r3, [r3, #20]
 800cd8c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800cd8e:	69f9      	ldr	r1, [r7, #28]
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f7fc fded 	bl	8009970 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800cd96:	4603      	mov	r3, r0
 800cd98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800cd9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d109      	bne.n	800cdb8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800cda4:	f107 010f 	add.w	r1, r7, #15
 800cda8:	2301      	movs	r3, #1
 800cdaa:	2200      	movs	r2, #0
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7fe fcbd 	bl	800b72c <VL53L0X_perform_phase_calibration>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800cdb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3728      	adds	r7, #40	; 0x28
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b086      	sub	sp, #24
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	60f8      	str	r0, [r7, #12]
 800cdcc:	460b      	mov	r3, r1
 800cdce:	607a      	str	r2, [r7, #4]
 800cdd0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800cdd6:	7afb      	ldrb	r3, [r7, #11]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d002      	beq.n	800cde2 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d00a      	beq.n	800cdf6 <VL53L0X_get_vcsel_pulse_period+0x32>
 800cde0:	e013      	b.n	800ce0a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800cde2:	f107 0316 	add.w	r3, r7, #22
 800cde6:	461a      	mov	r2, r3
 800cde8:	2150      	movs	r1, #80	; 0x50
 800cdea:	68f8      	ldr	r0, [r7, #12]
 800cdec:	f001 f94a 	bl	800e084 <VL53L0X_RdByte>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800cdf4:	e00b      	b.n	800ce0e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800cdf6:	f107 0316 	add.w	r3, r7, #22
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	2170      	movs	r1, #112	; 0x70
 800cdfe:	68f8      	ldr	r0, [r7, #12]
 800ce00:	f001 f940 	bl	800e084 <VL53L0X_RdByte>
 800ce04:	4603      	mov	r3, r0
 800ce06:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ce08:	e001      	b.n	800ce0e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce0a:	23fc      	movs	r3, #252	; 0xfc
 800ce0c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800ce0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d107      	bne.n	800ce26 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ce16:	7dbb      	ldrb	r3, [r7, #22]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fe fd59 	bl	800b8d0 <VL53L0X_decode_vcsel_period>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	701a      	strb	r2, [r3, #0]

	return Status;
 800ce26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3718      	adds	r7, #24
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b092      	sub	sp, #72	; 0x48
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
 800ce3a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ce42:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ce46:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ce48:	f240 7376 	movw	r3, #1910	; 0x776
 800ce4c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800ce4e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ce52:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ce54:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ce58:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800ce5a:	f240 234e 	movw	r3, #590	; 0x24e
 800ce5e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800ce60:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ce64:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ce66:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ce6a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ce6c:	f240 2326 	movw	r3, #550	; 0x226
 800ce70:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800ce76:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ce7a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800ce80:	683a      	ldr	r2, [r7, #0]
 800ce82:	6a3b      	ldr	r3, [r7, #32]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d205      	bcs.n	800ce94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce88:	23fc      	movs	r3, #252	; 0xfc
 800ce8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800ce8e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ce92:	e0aa      	b.n	800cfea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800ce94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce98:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800ce9a:	683a      	ldr	r2, [r7, #0]
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800cea0:	f107 0314 	add.w	r3, r7, #20
 800cea4:	4619      	mov	r1, r3
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f7fc feac 	bl	8009c04 <VL53L0X_GetSequenceStepEnables>
 800ceac:	4603      	mov	r3, r0
 800ceae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800ceb2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d15b      	bne.n	800cf72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800ceba:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d105      	bne.n	800cecc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800cec0:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d102      	bne.n	800cecc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800cec6:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d052      	beq.n	800cf72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800cecc:	f107 0310 	add.w	r3, r7, #16
 800ced0:	461a      	mov	r2, r3
 800ced2:	2102      	movs	r1, #2
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f7ff fb19 	bl	800c50c <get_sequence_step_timeout>
 800ceda:	4603      	mov	r3, r0
 800cedc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800cee0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d002      	beq.n	800ceee <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800cee8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ceec:	e07d      	b.n	800cfea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800ceee:	7d3b      	ldrb	r3, [r7, #20]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00f      	beq.n	800cf14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800cef4:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800cef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cef8:	4413      	add	r3, r2
 800cefa:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800cefc:	69fa      	ldr	r2, [r7, #28]
 800cefe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d204      	bcs.n	800cf0e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800cf04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf06:	69fb      	ldr	r3, [r7, #28]
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	643b      	str	r3, [r7, #64]	; 0x40
 800cf0c:	e002      	b.n	800cf14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cf0e:	23fc      	movs	r3, #252	; 0xfc
 800cf10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800cf14:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d002      	beq.n	800cf22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800cf1c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cf20:	e063      	b.n	800cfea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800cf22:	7dbb      	ldrb	r3, [r7, #22]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d011      	beq.n	800cf4c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800cf28:	693a      	ldr	r2, [r7, #16]
 800cf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2c:	4413      	add	r3, r2
 800cf2e:	005b      	lsls	r3, r3, #1
 800cf30:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cf32:	69fa      	ldr	r2, [r7, #28]
 800cf34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d204      	bcs.n	800cf44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800cf3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	1ad3      	subs	r3, r2, r3
 800cf40:	643b      	str	r3, [r7, #64]	; 0x40
 800cf42:	e016      	b.n	800cf72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cf44:	23fc      	movs	r3, #252	; 0xfc
 800cf46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cf4a:	e012      	b.n	800cf72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800cf4c:	7d7b      	ldrb	r3, [r7, #21]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d00f      	beq.n	800cf72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf56:	4413      	add	r3, r2
 800cf58:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cf5a:	69fa      	ldr	r2, [r7, #28]
 800cf5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d204      	bcs.n	800cf6c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800cf62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	1ad3      	subs	r3, r2, r3
 800cf68:	643b      	str	r3, [r7, #64]	; 0x40
 800cf6a:	e002      	b.n	800cf72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cf6c:	23fc      	movs	r3, #252	; 0xfc
 800cf6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800cf72:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d002      	beq.n	800cf80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800cf7a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cf7e:	e034      	b.n	800cfea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800cf80:	7dfb      	ldrb	r3, [r7, #23]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d019      	beq.n	800cfba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800cf86:	f107 030c 	add.w	r3, r7, #12
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	2103      	movs	r1, #3
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f7ff fabc 	bl	800c50c <get_sequence_step_timeout>
 800cf94:	4603      	mov	r3, r0
 800cf96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf9e:	4413      	add	r3, r2
 800cfa0:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cfa2:	69fa      	ldr	r2, [r7, #28]
 800cfa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d204      	bcs.n	800cfb4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800cfaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	1ad3      	subs	r3, r2, r3
 800cfb0:	643b      	str	r3, [r7, #64]	; 0x40
 800cfb2:	e002      	b.n	800cfba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cfb4:	23fc      	movs	r3, #252	; 0xfc
 800cfb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800cfba:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d111      	bne.n	800cfe6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800cfc2:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00e      	beq.n	800cfe6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800cfc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfcc:	1ad3      	subs	r3, r2, r3
 800cfce:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800cfd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfd2:	2104      	movs	r1, #4
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f7ff fb7a 	bl	800c6ce <set_sequence_step_timeout>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	683a      	ldr	r2, [r7, #0]
 800cfe4:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800cfe6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3748      	adds	r7, #72	; 0x48
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b090      	sub	sp, #64	; 0x40
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
 800cffa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cffc:	2300      	movs	r3, #0
 800cffe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800d002:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d006:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800d008:	f240 7376 	movw	r3, #1910	; 0x776
 800d00c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800d00e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800d012:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800d014:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d018:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800d01a:	f240 234e 	movw	r3, #590	; 0x24e
 800d01e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800d020:	f240 23b2 	movw	r3, #690	; 0x2b2
 800d024:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800d026:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d02a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800d02c:	f240 2326 	movw	r3, #550	; 0x226
 800d030:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800d032:	2300      	movs	r3, #0
 800d034:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800d036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d03a:	441a      	add	r2, r3
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d040:	f107 0318 	add.w	r3, r7, #24
 800d044:	4619      	mov	r1, r3
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f7fc fddc 	bl	8009c04 <VL53L0X_GetSequenceStepEnables>
 800d04c:	4603      	mov	r3, r0
 800d04e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800d052:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d056:	2b00      	cmp	r3, #0
 800d058:	d002      	beq.n	800d060 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800d05a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d05e:	e075      	b.n	800d14c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800d060:	7e3b      	ldrb	r3, [r7, #24]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d105      	bne.n	800d072 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800d066:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d102      	bne.n	800d072 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800d06c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d030      	beq.n	800d0d4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800d072:	f107 0310 	add.w	r3, r7, #16
 800d076:	461a      	mov	r2, r3
 800d078:	2102      	movs	r1, #2
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f7ff fa46 	bl	800c50c <get_sequence_step_timeout>
 800d080:	4603      	mov	r3, r0
 800d082:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800d086:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d122      	bne.n	800d0d4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800d08e:	7e3b      	ldrb	r3, [r7, #24]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d007      	beq.n	800d0a4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800d098:	6939      	ldr	r1, [r7, #16]
 800d09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d09e:	441a      	add	r2, r3
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800d0a4:	7ebb      	ldrb	r3, [r7, #26]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d009      	beq.n	800d0be <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800d0ae:	6939      	ldr	r1, [r7, #16]
 800d0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b2:	440b      	add	r3, r1
 800d0b4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d0b6:	441a      	add	r2, r3
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	601a      	str	r2, [r3, #0]
 800d0bc:	e00a      	b.n	800d0d4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800d0be:	7e7b      	ldrb	r3, [r7, #25]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d007      	beq.n	800d0d4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800d0c8:	6939      	ldr	r1, [r7, #16]
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0cc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d0ce:	441a      	add	r2, r3
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d0d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d114      	bne.n	800d106 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800d0dc:	7efb      	ldrb	r3, [r7, #27]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d011      	beq.n	800d106 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800d0e2:	f107 030c 	add.w	r3, r7, #12
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	2103      	movs	r1, #3
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f7ff fa0e 	bl	800c50c <get_sequence_step_timeout>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800d0fa:	68f9      	ldr	r1, [r7, #12]
 800d0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fe:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800d100:	441a      	add	r2, r3
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d106:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d114      	bne.n	800d138 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800d10e:	7f3b      	ldrb	r3, [r7, #28]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d011      	beq.n	800d138 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800d114:	f107 0314 	add.w	r3, r7, #20
 800d118:	461a      	mov	r2, r3
 800d11a:	2104      	movs	r1, #4
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f7ff f9f5 	bl	800c50c <get_sequence_step_timeout>
 800d122:	4603      	mov	r3, r0
 800d124:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800d12c:	6979      	ldr	r1, [r7, #20]
 800d12e:	6a3b      	ldr	r3, [r7, #32]
 800d130:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800d132:	441a      	add	r2, r3
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d138:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d103      	bne.n	800d148 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d148:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3740      	adds	r7, #64	; 0x40
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b088      	sub	sp, #32
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d15e:	2300      	movs	r3, #0
 800d160:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800d162:	2300      	movs	r3, #0
 800d164:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800d166:	e0c6      	b.n	800d2f6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	683a      	ldr	r2, [r7, #0]
 800d16c:	4413      	add	r3, r2
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	74fb      	strb	r3, [r7, #19]
		Index++;
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	3301      	adds	r3, #1
 800d176:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800d178:	7cfb      	ldrb	r3, [r7, #19]
 800d17a:	2bff      	cmp	r3, #255	; 0xff
 800d17c:	f040 808d 	bne.w	800d29a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	4413      	add	r3, r2
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	747b      	strb	r3, [r7, #17]
			Index++;
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	3301      	adds	r3, #1
 800d18e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800d190:	7c7b      	ldrb	r3, [r7, #17]
 800d192:	2b03      	cmp	r3, #3
 800d194:	d87e      	bhi.n	800d294 <VL53L0X_load_tuning_settings+0x140>
 800d196:	a201      	add	r2, pc, #4	; (adr r2, 800d19c <VL53L0X_load_tuning_settings+0x48>)
 800d198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d19c:	0800d1ad 	.word	0x0800d1ad
 800d1a0:	0800d1e7 	.word	0x0800d1e7
 800d1a4:	0800d221 	.word	0x0800d221
 800d1a8:	0800d25b 	.word	0x0800d25b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	683a      	ldr	r2, [r7, #0]
 800d1b0:	4413      	add	r3, r2
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	743b      	strb	r3, [r7, #16]
				Index++;
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	683a      	ldr	r2, [r7, #0]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d1cc:	7c3b      	ldrb	r3, [r7, #16]
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	021b      	lsls	r3, r3, #8
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	7bfb      	ldrb	r3, [r7, #15]
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	4413      	add	r3, r2
 800d1da:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	89ba      	ldrh	r2, [r7, #12]
 800d1e0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800d1e4:	e087      	b.n	800d2f6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	683a      	ldr	r2, [r7, #0]
 800d1ea:	4413      	add	r3, r2
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	743b      	strb	r3, [r7, #16]
				Index++;
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	683a      	ldr	r2, [r7, #0]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	3301      	adds	r3, #1
 800d204:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d206:	7c3b      	ldrb	r3, [r7, #16]
 800d208:	b29b      	uxth	r3, r3
 800d20a:	021b      	lsls	r3, r3, #8
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	7bfb      	ldrb	r3, [r7, #15]
 800d210:	b29b      	uxth	r3, r3
 800d212:	4413      	add	r3, r2
 800d214:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	89ba      	ldrh	r2, [r7, #12]
 800d21a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800d21e:	e06a      	b.n	800d2f6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	683a      	ldr	r2, [r7, #0]
 800d224:	4413      	add	r3, r2
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	743b      	strb	r3, [r7, #16]
				Index++;
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	3301      	adds	r3, #1
 800d22e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	683a      	ldr	r2, [r7, #0]
 800d234:	4413      	add	r3, r2
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	3301      	adds	r3, #1
 800d23e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d240:	7c3b      	ldrb	r3, [r7, #16]
 800d242:	b29b      	uxth	r3, r3
 800d244:	021b      	lsls	r3, r3, #8
 800d246:	b29a      	uxth	r2, r3
 800d248:	7bfb      	ldrb	r3, [r7, #15]
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	4413      	add	r3, r2
 800d24e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	89ba      	ldrh	r2, [r7, #12]
 800d254:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800d258:	e04d      	b.n	800d2f6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	683a      	ldr	r2, [r7, #0]
 800d25e:	4413      	add	r3, r2
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	743b      	strb	r3, [r7, #16]
				Index++;
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	3301      	adds	r3, #1
 800d268:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	683a      	ldr	r2, [r7, #0]
 800d26e:	4413      	add	r3, r2
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	3301      	adds	r3, #1
 800d278:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d27a:	7c3b      	ldrb	r3, [r7, #16]
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	021b      	lsls	r3, r3, #8
 800d280:	b29a      	uxth	r2, r3
 800d282:	7bfb      	ldrb	r3, [r7, #15]
 800d284:	b29b      	uxth	r3, r3
 800d286:	4413      	add	r3, r2
 800d288:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	89ba      	ldrh	r2, [r7, #12]
 800d28e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800d292:	e030      	b.n	800d2f6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d294:	23fc      	movs	r3, #252	; 0xfc
 800d296:	77fb      	strb	r3, [r7, #31]
 800d298:	e02d      	b.n	800d2f6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800d29a:	7cfb      	ldrb	r3, [r7, #19]
 800d29c:	2b04      	cmp	r3, #4
 800d29e:	d828      	bhi.n	800d2f2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	683a      	ldr	r2, [r7, #0]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	74bb      	strb	r3, [r7, #18]
			Index++;
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	61bb      	str	r3, [r7, #24]
 800d2b4:	e00f      	b.n	800d2d6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	683a      	ldr	r2, [r7, #0]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	7819      	ldrb	r1, [r3, #0]
 800d2be:	f107 0208 	add.w	r2, r7, #8
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	460a      	mov	r2, r1
 800d2c8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	61bb      	str	r3, [r7, #24]
 800d2d6:	7cfb      	ldrb	r3, [r7, #19]
 800d2d8:	69ba      	ldr	r2, [r7, #24]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	dbeb      	blt.n	800d2b6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800d2de:	7cfb      	ldrb	r3, [r7, #19]
 800d2e0:	f107 0208 	add.w	r2, r7, #8
 800d2e4:	7cb9      	ldrb	r1, [r7, #18]
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 fdee 	bl	800dec8 <VL53L0X_WriteMulti>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	77fb      	strb	r3, [r7, #31]
 800d2f0:	e001      	b.n	800d2f6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d2f2:	23fc      	movs	r3, #252	; 0xfc
 800d2f4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	683a      	ldr	r2, [r7, #0]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d004      	beq.n	800d30c <VL53L0X_load_tuning_settings+0x1b8>
 800d302:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d306:	2b00      	cmp	r3, #0
 800d308:	f43f af2e 	beq.w	800d168 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d30c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3720      	adds	r7, #32
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b088      	sub	sp, #32
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d324:	2300      	movs	r3, #0
 800d326:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800d32e:	f107 0313 	add.w	r3, r7, #19
 800d332:	4619      	mov	r1, r3
 800d334:	68f8      	ldr	r0, [r7, #12]
 800d336:	f7fc fcf1 	bl	8009d1c <VL53L0X_GetXTalkCompensationEnable>
 800d33a:	4603      	mov	r3, r0
 800d33c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800d33e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d111      	bne.n	800d36a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800d346:	7cfb      	ldrb	r3, [r7, #19]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d00e      	beq.n	800d36a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6a1b      	ldr	r3, [r3, #32]
 800d350:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	8a9b      	ldrh	r3, [r3, #20]
 800d356:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	fb02 f303 	mul.w	r3, r2, r3
 800d35e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	3380      	adds	r3, #128	; 0x80
 800d364:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800d36a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3720      	adds	r7, #32
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b086      	sub	sp, #24
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	60f8      	str	r0, [r7, #12]
 800d37e:	60b9      	str	r1, [r7, #8]
 800d380:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d382:	2300      	movs	r3, #0
 800d384:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800d38e:	f107 0310 	add.w	r3, r7, #16
 800d392:	461a      	mov	r2, r3
 800d394:	68b9      	ldr	r1, [r7, #8]
 800d396:	68f8      	ldr	r0, [r7, #12]
 800d398:	f7ff ffbe 	bl	800d318 <VL53L0X_get_total_xtalk_rate>
 800d39c:	4603      	mov	r3, r0
 800d39e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800d3a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d105      	bne.n	800d3b4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	441a      	add	r2, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	601a      	str	r2, [r3, #0]

	return Status;
 800d3b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3718      	adds	r7, #24
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b09a      	sub	sp, #104	; 0x68
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	607a      	str	r2, [r7, #4]
 800d3cc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800d3ce:	2312      	movs	r3, #18
 800d3d0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800d3d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d3d6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800d3d8:	2342      	movs	r3, #66	; 0x42
 800d3da:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800d3dc:	2306      	movs	r3, #6
 800d3de:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800d3e0:	2307      	movs	r3, #7
 800d3e2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800d3f0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800d3f8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800d3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3fe:	fb02 f303 	mul.w	r3, r2, r3
 800d402:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800d404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d406:	3380      	adds	r3, #128	; 0x80
 800d408:	0a1b      	lsrs	r3, r3, #8
 800d40a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800d40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d40e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d410:	fb02 f303 	mul.w	r3, r2, r3
 800d414:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800d416:	2300      	movs	r3, #0
 800d418:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d01a      	beq.n	800d456 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	029b      	lsls	r3, r3, #10
 800d424:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800d42a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d42c:	4413      	add	r3, r2
 800d42e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800d430:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	fbb2 f3f3 	udiv	r3, r2, r3
 800d438:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800d43a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d43c:	4613      	mov	r3, r2
 800d43e:	005b      	lsls	r3, r3, #1
 800d440:	4413      	add	r3, r2
 800d442:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800d444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d446:	fb03 f303 	mul.w	r3, r3, r3
 800d44a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800d44c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d44e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d452:	0c1b      	lsrs	r3, r3, #16
 800d454:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d45a:	fb02 f303 	mul.w	r3, r2, r3
 800d45e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800d460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d462:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d466:	0c1b      	lsrs	r3, r3, #16
 800d468:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800d46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46c:	fb03 f303 	mul.w	r3, r3, r3
 800d470:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800d472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d474:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d478:	0c1b      	lsrs	r3, r3, #16
 800d47a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800d47c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d47e:	085a      	lsrs	r2, r3, #1
 800d480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d482:	441a      	add	r2, r3
 800d484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d486:	fbb2 f3f3 	udiv	r3, r2, r3
 800d48a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800d48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d490:	fb02 f303 	mul.w	r3, r2, r3
 800d494:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800d496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d49c:	d302      	bcc.n	800d4a4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800d49e:	4b54      	ldr	r3, [pc, #336]	; (800d5f0 <VL53L0X_calc_dmax+0x230>)
 800d4a0:	663b      	str	r3, [r7, #96]	; 0x60
 800d4a2:	e015      	b.n	800d4d0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800d4a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4a6:	085a      	lsrs	r2, r3, #1
 800d4a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4aa:	441a      	add	r2, r3
 800d4ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4b2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800d4b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4b8:	fb02 f303 	mul.w	r3, r2, r3
 800d4bc:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800d4be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d4c4:	0c1b      	lsrs	r3, r3, #16
 800d4c6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800d4c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4ca:	fb03 f303 	mul.w	r3, r3, r3
 800d4ce:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800d4d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4d2:	039b      	lsls	r3, r3, #14
 800d4d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d4d8:	4a46      	ldr	r2, [pc, #280]	; (800d5f4 <VL53L0X_calc_dmax+0x234>)
 800d4da:	fba2 2303 	umull	r2, r3, r2, r3
 800d4de:	099b      	lsrs	r3, r3, #6
 800d4e0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800d4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e4:	fb03 f303 	mul.w	r3, r3, r3
 800d4e8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800d4ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ec:	fb03 f303 	mul.w	r3, r3, r3
 800d4f0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800d4f2:	6a3b      	ldr	r3, [r7, #32]
 800d4f4:	3308      	adds	r3, #8
 800d4f6:	091b      	lsrs	r3, r3, #4
 800d4f8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800d4fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4fc:	6a3b      	ldr	r3, [r7, #32]
 800d4fe:	1ad3      	subs	r3, r2, r3
 800d500:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800d502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d504:	4613      	mov	r3, r2
 800d506:	005b      	lsls	r3, r3, #1
 800d508:	4413      	add	r3, r2
 800d50a:	011b      	lsls	r3, r3, #4
 800d50c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d514:	0b9b      	lsrs	r3, r3, #14
 800d516:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800d518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d51a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d51c:	4413      	add	r3, r2
 800d51e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800d520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d522:	085b      	lsrs	r3, r3, #1
 800d524:	69ba      	ldr	r2, [r7, #24]
 800d526:	4413      	add	r3, r2
 800d528:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800d52a:	69ba      	ldr	r2, [r7, #24]
 800d52c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d52e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d532:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	039b      	lsls	r3, r3, #14
 800d538:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800d53a:	69fb      	ldr	r3, [r7, #28]
 800d53c:	085b      	lsrs	r3, r3, #1
 800d53e:	69ba      	ldr	r2, [r7, #24]
 800d540:	4413      	add	r3, r2
 800d542:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800d544:	69ba      	ldr	r2, [r7, #24]
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	fbb2 f3f3 	udiv	r3, r2, r3
 800d54c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800d54e:	69bb      	ldr	r3, [r7, #24]
 800d550:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d552:	fb02 f303 	mul.w	r3, r2, r3
 800d556:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d558:	69bb      	ldr	r3, [r7, #24]
 800d55a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d55e:	4a25      	ldr	r2, [pc, #148]	; (800d5f4 <VL53L0X_calc_dmax+0x234>)
 800d560:	fba2 2303 	umull	r2, r3, r2, r3
 800d564:	099b      	lsrs	r3, r3, #6
 800d566:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	011b      	lsls	r3, r3, #4
 800d56c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d574:	4a1f      	ldr	r2, [pc, #124]	; (800d5f4 <VL53L0X_calc_dmax+0x234>)
 800d576:	fba2 2303 	umull	r2, r3, r2, r3
 800d57a:	099b      	lsrs	r3, r3, #6
 800d57c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800d57e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d580:	3380      	adds	r3, #128	; 0x80
 800d582:	0a1b      	lsrs	r3, r3, #8
 800d584:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d008      	beq.n	800d59e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	085a      	lsrs	r2, r3, #1
 800d590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d592:	441a      	add	r2, r3
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	fbb2 f3f3 	udiv	r3, r2, r3
 800d59a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d59c:	e001      	b.n	800d5a2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800d5a2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d5a4:	f7fe f9ba 	bl	800b91c <VL53L0X_isqrt>
 800d5a8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d008      	beq.n	800d5c2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	085a      	lsrs	r2, r3, #1
 800d5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5b6:	441a      	add	r2, r3
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5c0:	e001      	b.n	800d5c6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800d5c6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d5c8:	f7fe f9a8 	bl	800b91c <VL53L0X_isqrt>
 800d5cc:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800d5ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5d0:	693a      	ldr	r2, [r7, #16]
 800d5d2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800d5d4:	693a      	ldr	r2, [r7, #16]
 800d5d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d902      	bls.n	800d5e2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800d5dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d5e0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800d5e2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3768      	adds	r7, #104	; 0x68
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	fff00000 	.word	0xfff00000
 800d5f4:	10624dd3 	.word	0x10624dd3

0800d5f8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b0b4      	sub	sp, #208	; 0xd0
 800d5fc:	af04      	add	r7, sp, #16
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	60b9      	str	r1, [r7, #8]
 800d602:	607a      	str	r2, [r7, #4]
 800d604:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800d606:	f44f 7348 	mov.w	r3, #800	; 0x320
 800d60a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800d60e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800d612:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800d616:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800d61a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800d61e:	f241 235c 	movw	r3, #4700	; 0x125c
 800d622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800d626:	4b9e      	ldr	r3, [pc, #632]	; (800d8a0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800d628:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800d62c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800d630:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800d632:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800d636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d63e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800d640:	4b98      	ldr	r3, [pc, #608]	; (800d8a4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800d642:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800d644:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d648:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800d64a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800d64e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800d650:	f240 6377 	movw	r3, #1655	; 0x677
 800d654:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d656:	2300      	movs	r3, #0
 800d658:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6a1b      	ldr	r3, [r3, #32]
 800d660:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	691b      	ldr	r3, [r3, #16]
 800d666:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d66a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800d66e:	0c1b      	lsrs	r3, r3, #16
 800d670:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	68db      	ldr	r3, [r3, #12]
 800d676:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800d678:	f107 0310 	add.w	r3, r7, #16
 800d67c:	461a      	mov	r2, r3
 800d67e:	68b9      	ldr	r1, [r7, #8]
 800d680:	68f8      	ldr	r0, [r7, #12]
 800d682:	f7ff fe78 	bl	800d376 <VL53L0X_get_total_signal_rate>
 800d686:	4603      	mov	r3, r0
 800d688:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800d68c:	f107 0314 	add.w	r3, r7, #20
 800d690:	461a      	mov	r2, r3
 800d692:	68b9      	ldr	r1, [r7, #8]
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	f7ff fe3f 	bl	800d318 <VL53L0X_get_total_xtalk_rate>
 800d69a:	4603      	mov	r3, r0
 800d69c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d6a6:	fb02 f303 	mul.w	r3, r2, r3
 800d6aa:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800d6ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d6b2:	0c1b      	lsrs	r3, r3, #16
 800d6b4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d6bc:	fb02 f303 	mul.w	r3, r2, r3
 800d6c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800d6c4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d6c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d902      	bls.n	800d6d4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800d6ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800d6d4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d168      	bne.n	800d7ae <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d6e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800d6ec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d6f0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800d6fa:	68f8      	ldr	r0, [r7, #12]
 800d6fc:	f7fe feb2 	bl	800c464 <VL53L0X_calc_timeout_mclks>
 800d700:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d708:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800d712:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d716:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d71a:	461a      	mov	r2, r3
 800d71c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f7fe fe9f 	bl	800c464 <VL53L0X_calc_timeout_mclks>
 800d726:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800d728:	2303      	movs	r3, #3
 800d72a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800d72e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d732:	2b08      	cmp	r3, #8
 800d734:	d102      	bne.n	800d73c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800d736:	2302      	movs	r3, #2
 800d738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800d73c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d73e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d740:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800d742:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d746:	fb02 f303 	mul.w	r3, r2, r3
 800d74a:	02db      	lsls	r3, r3, #11
 800d74c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d750:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d754:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d758:	4a53      	ldr	r2, [pc, #332]	; (800d8a8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d75a:	fba2 2303 	umull	r2, r3, r2, r3
 800d75e:	099b      	lsrs	r3, r3, #6
 800d760:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800d764:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d768:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d76a:	fb02 f303 	mul.w	r3, r2, r3
 800d76e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d772:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d776:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d77a:	4a4b      	ldr	r2, [pc, #300]	; (800d8a8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d77c:	fba2 2303 	umull	r2, r3, r2, r3
 800d780:	099b      	lsrs	r3, r3, #6
 800d782:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	3380      	adds	r3, #128	; 0x80
 800d78a:	0a1b      	lsrs	r3, r3, #8
 800d78c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800d78e:	693a      	ldr	r2, [r7, #16]
 800d790:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d794:	fb02 f303 	mul.w	r3, r2, r3
 800d798:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800d79c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d7a0:	3380      	adds	r3, #128	; 0x80
 800d7a2:	0a1b      	lsrs	r3, r3, #8
 800d7a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	021b      	lsls	r3, r3, #8
 800d7ac:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800d7ae:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d002      	beq.n	800d7bc <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800d7b6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d7ba:	e15e      	b.n	800da7a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800d7bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10c      	bne.n	800d7dc <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d7c8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d7d0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	601a      	str	r2, [r3, #0]
 800d7da:	e14c      	b.n	800da76 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800d7dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d102      	bne.n	800d7ea <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800d7ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d7ee:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800d7f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7f2:	041a      	lsls	r2, r3, #16
 800d7f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800d7fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d804:	429a      	cmp	r2, r3
 800d806:	d902      	bls.n	800d80e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800d808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d80a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800d80e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d812:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d816:	fb02 f303 	mul.w	r3, r2, r3
 800d81a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800d81e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d822:	4613      	mov	r3, r2
 800d824:	005b      	lsls	r3, r3, #1
 800d826:	4413      	add	r3, r2
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fe f876 	bl	800b91c <VL53L0X_isqrt>
 800d830:	4603      	mov	r3, r0
 800d832:	005b      	lsls	r3, r3, #1
 800d834:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	891b      	ldrh	r3, [r3, #8]
 800d83a:	461a      	mov	r2, r3
 800d83c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d83e:	fb02 f303 	mul.w	r3, r2, r3
 800d842:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d846:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d848:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d84c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d84e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d850:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d854:	4a14      	ldr	r2, [pc, #80]	; (800d8a8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d856:	fba2 2303 	umull	r2, r3, r2, r3
 800d85a:	099b      	lsrs	r3, r3, #6
 800d85c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800d85e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d860:	041b      	lsls	r3, r3, #16
 800d862:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d866:	4a10      	ldr	r2, [pc, #64]	; (800d8a8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d868:	fba2 2303 	umull	r2, r3, r2, r3
 800d86c:	099b      	lsrs	r3, r3, #6
 800d86e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800d870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d872:	021b      	lsls	r3, r3, #8
 800d874:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800d876:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d87e:	2b00      	cmp	r3, #0
 800d880:	bfb8      	it	lt
 800d882:	425b      	neglt	r3, r3
 800d884:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800d886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d888:	021b      	lsls	r3, r3, #8
 800d88a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	7e1b      	ldrb	r3, [r3, #24]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00b      	beq.n	800d8ac <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800d894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d89c:	e033      	b.n	800d906 <VL53L0X_calc_sigma_estimate+0x30e>
 800d89e:	bf00      	nop
 800d8a0:	028f87ae 	.word	0x028f87ae
 800d8a4:	0006999a 	.word	0x0006999a
 800d8a8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800d8ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d8b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800d8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8bc:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800d8c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8c4:	fb02 f303 	mul.w	r3, r2, r3
 800d8c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800d8cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d8d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8d2:	4413      	add	r3, r2
 800d8d4:	0c1b      	lsrs	r3, r3, #16
 800d8d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800d8da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d8e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800d8e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8ea:	085b      	lsrs	r3, r3, #1
 800d8ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800d8f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8f4:	fb03 f303 	mul.w	r3, r3, r3
 800d8f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800d8fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d900:	0b9b      	lsrs	r3, r3, #14
 800d902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800d906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d90a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d90c:	fb02 f303 	mul.w	r3, r2, r3
 800d910:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800d912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d914:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d918:	0c1b      	lsrs	r3, r3, #16
 800d91a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800d91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91e:	fb03 f303 	mul.w	r3, r3, r3
 800d922:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800d924:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d928:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800d92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d930:	0c1b      	lsrs	r3, r3, #16
 800d932:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800d934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d936:	fb03 f303 	mul.w	r3, r3, r3
 800d93a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800d93c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d940:	4413      	add	r3, r2
 800d942:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800d944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d946:	f7fd ffe9 	bl	800b91c <VL53L0X_isqrt>
 800d94a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800d94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94e:	041b      	lsls	r3, r3, #16
 800d950:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800d952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d954:	3332      	adds	r3, #50	; 0x32
 800d956:	4a4b      	ldr	r2, [pc, #300]	; (800da84 <VL53L0X_calc_sigma_estimate+0x48c>)
 800d958:	fba2 2303 	umull	r2, r3, r2, r3
 800d95c:	095a      	lsrs	r2, r3, #5
 800d95e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d960:	fbb2 f3f3 	udiv	r3, r2, r3
 800d964:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800d968:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d96c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800d970:	fb02 f303 	mul.w	r3, r2, r3
 800d974:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800d978:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d97c:	f241 3388 	movw	r3, #5000	; 0x1388
 800d980:	4413      	add	r3, r2
 800d982:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800d986:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d98a:	4a3f      	ldr	r2, [pc, #252]	; (800da88 <VL53L0X_calc_sigma_estimate+0x490>)
 800d98c:	fba2 2303 	umull	r2, r3, r2, r3
 800d990:	0b5b      	lsrs	r3, r3, #13
 800d992:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800d996:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d99a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d902      	bls.n	800d9a6 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800d9a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d9a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800d9a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d9aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d9ae:	4413      	add	r3, r2
 800d9b0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800d9b4:	4a35      	ldr	r2, [pc, #212]	; (800da8c <VL53L0X_calc_sigma_estimate+0x494>)
 800d9b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d9ba:	099b      	lsrs	r3, r3, #6
 800d9bc:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800d9be:	6a3b      	ldr	r3, [r7, #32]
 800d9c0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800d9c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d9c6:	441a      	add	r2, r3
 800d9c8:	6a3b      	ldr	r3, [r7, #32]
 800d9ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7fd ffa4 	bl	800b91c <VL53L0X_isqrt>
 800d9d4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	021b      	lsls	r3, r3, #8
 800d9da:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d9e2:	4a2a      	ldr	r2, [pc, #168]	; (800da8c <VL53L0X_calc_sigma_estimate+0x494>)
 800d9e4:	fba2 2303 	umull	r2, r3, r2, r3
 800d9e8:	099b      	lsrs	r3, r3, #6
 800d9ea:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800d9ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d9f0:	fb03 f303 	mul.w	r3, r3, r3
 800d9f4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800d9f6:	69fb      	ldr	r3, [r7, #28]
 800d9f8:	fb03 f303 	mul.w	r3, r3, r3
 800d9fc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800d9fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da02:	4413      	add	r3, r2
 800da04:	4618      	mov	r0, r3
 800da06:	f7fd ff89 	bl	800b91c <VL53L0X_isqrt>
 800da0a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da12:	fb02 f303 	mul.w	r3, r2, r3
 800da16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800da1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d009      	beq.n	800da34 <VL53L0X_calc_sigma_estimate+0x43c>
 800da20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800da24:	2b00      	cmp	r3, #0
 800da26:	d005      	beq.n	800da34 <VL53L0X_calc_sigma_estimate+0x43c>
 800da28:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800da2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800da30:	429a      	cmp	r2, r3
 800da32:	d903      	bls.n	800da3c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800da34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800da38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800da42:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800da4e:	6939      	ldr	r1, [r7, #16]
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	9303      	str	r3, [sp, #12]
 800da54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da58:	9302      	str	r3, [sp, #8]
 800da5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800da5e:	9301      	str	r3, [sp, #4]
 800da60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da62:	9300      	str	r3, [sp, #0]
 800da64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800da68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	f7ff fca8 	bl	800d3c0 <VL53L0X_calc_dmax>
 800da70:	4603      	mov	r3, r0
 800da72:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800da76:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	37c0      	adds	r7, #192	; 0xc0
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	51eb851f 	.word	0x51eb851f
 800da88:	d1b71759 	.word	0xd1b71759
 800da8c:	10624dd3 	.word	0x10624dd3

0800da90 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b090      	sub	sp, #64	; 0x40
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	607a      	str	r2, [r7, #4]
 800da9a:	461a      	mov	r2, r3
 800da9c:	460b      	mov	r3, r1
 800da9e:	72fb      	strb	r3, [r7, #11]
 800daa0:	4613      	mov	r3, r2
 800daa2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800daa4:	2300      	movs	r3, #0
 800daa6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800daaa:	2300      	movs	r3, #0
 800daac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800dab0:	2300      	movs	r3, #0
 800dab2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800dab6:	2300      	movs	r3, #0
 800dab8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800dabc:	2300      	movs	r3, #0
 800dabe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800dac2:	2300      	movs	r3, #0
 800dac4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800dac8:	2300      	movs	r3, #0
 800daca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800dace:	2300      	movs	r3, #0
 800dad0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800dad4:	2300      	movs	r3, #0
 800dad6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800dada:	2300      	movs	r3, #0
 800dadc:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800dade:	2300      	movs	r3, #0
 800dae0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800dae2:	7afb      	ldrb	r3, [r7, #11]
 800dae4:	10db      	asrs	r3, r3, #3
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	f003 030f 	and.w	r3, r3, #15
 800daec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800daf0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d017      	beq.n	800db28 <VL53L0X_get_pal_range_status+0x98>
 800daf8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dafc:	2b05      	cmp	r3, #5
 800dafe:	d013      	beq.n	800db28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800db00:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db04:	2b07      	cmp	r3, #7
 800db06:	d00f      	beq.n	800db28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800db08:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db0c:	2b0c      	cmp	r3, #12
 800db0e:	d00b      	beq.n	800db28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800db10:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db14:	2b0d      	cmp	r3, #13
 800db16:	d007      	beq.n	800db28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800db18:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db1c:	2b0e      	cmp	r3, #14
 800db1e:	d003      	beq.n	800db28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800db20:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db24:	2b0f      	cmp	r3, #15
 800db26:	d103      	bne.n	800db30 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800db28:	2301      	movs	r3, #1
 800db2a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800db2e:	e002      	b.n	800db36 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800db30:	2300      	movs	r3, #0
 800db32:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800db36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d109      	bne.n	800db52 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800db3e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800db42:	461a      	mov	r2, r3
 800db44:	2100      	movs	r1, #0
 800db46:	68f8      	ldr	r0, [r7, #12]
 800db48:	f7fc f9bc 	bl	8009ec4 <VL53L0X_GetLimitCheckEnable>
 800db4c:	4603      	mov	r3, r0
 800db4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800db52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db56:	2b00      	cmp	r3, #0
 800db58:	d02e      	beq.n	800dbb8 <VL53L0X_get_pal_range_status+0x128>
 800db5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d12a      	bne.n	800dbb8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800db62:	f107 0310 	add.w	r3, r7, #16
 800db66:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800db6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800db6c:	68f8      	ldr	r0, [r7, #12]
 800db6e:	f7ff fd43 	bl	800d5f8 <VL53L0X_calc_sigma_estimate>
 800db72:	4603      	mov	r3, r0
 800db74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800db78:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d103      	bne.n	800db88 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	b29a      	uxth	r2, r3
 800db84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db86:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800db88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d113      	bne.n	800dbb8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800db90:	f107 0320 	add.w	r3, r7, #32
 800db94:	461a      	mov	r2, r3
 800db96:	2100      	movs	r1, #0
 800db98:	68f8      	ldr	r0, [r7, #12]
 800db9a:	f7fc fa19 	bl	8009fd0 <VL53L0X_GetLimitCheckValue>
 800db9e:	4603      	mov	r3, r0
 800dba0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800dba4:	6a3b      	ldr	r3, [r7, #32]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d006      	beq.n	800dbb8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800dbaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbac:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d902      	bls.n	800dbb8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800dbb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d109      	bne.n	800dbd4 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800dbc0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	2102      	movs	r1, #2
 800dbc8:	68f8      	ldr	r0, [r7, #12]
 800dbca:	f7fc f97b 	bl	8009ec4 <VL53L0X_GetLimitCheckEnable>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800dbd4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d044      	beq.n	800dc66 <VL53L0X_get_pal_range_status+0x1d6>
 800dbdc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d140      	bne.n	800dc66 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800dbe4:	f107 031c 	add.w	r3, r7, #28
 800dbe8:	461a      	mov	r2, r3
 800dbea:	2102      	movs	r1, #2
 800dbec:	68f8      	ldr	r0, [r7, #12]
 800dbee:	f7fc f9ef 	bl	8009fd0 <VL53L0X_GetLimitCheckValue>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800dbf8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d107      	bne.n	800dc10 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800dc00:	2201      	movs	r2, #1
 800dc02:	21ff      	movs	r1, #255	; 0xff
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f000 f9bb 	bl	800df80 <VL53L0X_WrByte>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800dc10:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d109      	bne.n	800dc2c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800dc18:	f107 0316 	add.w	r3, r7, #22
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	21b6      	movs	r1, #182	; 0xb6
 800dc20:	68f8      	ldr	r0, [r7, #12]
 800dc22:	f000 fa59 	bl	800e0d8 <VL53L0X_RdWord>
 800dc26:	4603      	mov	r3, r0
 800dc28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800dc2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d107      	bne.n	800dc44 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800dc34:	2200      	movs	r2, #0
 800dc36:	21ff      	movs	r1, #255	; 0xff
 800dc38:	68f8      	ldr	r0, [r7, #12]
 800dc3a:	f000 f9a1 	bl	800df80 <VL53L0X_WrByte>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800dc44:	8afb      	ldrh	r3, [r7, #22]
 800dc46:	025b      	lsls	r3, r3, #9
 800dc48:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc4e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800dc52:	69fb      	ldr	r3, [r7, #28]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d006      	beq.n	800dc66 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800dc58:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800dc5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d902      	bls.n	800dc66 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800dc60:	2301      	movs	r3, #1
 800dc62:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800dc66:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d109      	bne.n	800dc82 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800dc6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc72:	461a      	mov	r2, r3
 800dc74:	2103      	movs	r1, #3
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	f7fc f924 	bl	8009ec4 <VL53L0X_GetLimitCheckEnable>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800dc82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d023      	beq.n	800dcd2 <VL53L0X_get_pal_range_status+0x242>
 800dc8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d11f      	bne.n	800dcd2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800dc92:	893b      	ldrh	r3, [r7, #8]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d102      	bne.n	800dc9e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	637b      	str	r3, [r7, #52]	; 0x34
 800dc9c:	e005      	b.n	800dcaa <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	021a      	lsls	r2, r3, #8
 800dca2:	893b      	ldrh	r3, [r7, #8]
 800dca4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dca8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800dcaa:	f107 0318 	add.w	r3, r7, #24
 800dcae:	461a      	mov	r2, r3
 800dcb0:	2103      	movs	r1, #3
 800dcb2:	68f8      	ldr	r0, [r7, #12]
 800dcb4:	f7fc f98c 	bl	8009fd0 <VL53L0X_GetLimitCheckValue>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800dcbe:	69bb      	ldr	r3, [r7, #24]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d006      	beq.n	800dcd2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800dcc4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800dcc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d202      	bcs.n	800dcd2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800dccc:	2301      	movs	r3, #1
 800dcce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800dcd2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d14a      	bne.n	800dd70 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800dcda:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d103      	bne.n	800dcea <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800dce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dce4:	22ff      	movs	r2, #255	; 0xff
 800dce6:	701a      	strb	r2, [r3, #0]
 800dce8:	e042      	b.n	800dd70 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800dcea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dcee:	2b01      	cmp	r3, #1
 800dcf0:	d007      	beq.n	800dd02 <VL53L0X_get_pal_range_status+0x272>
 800dcf2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dcf6:	2b02      	cmp	r3, #2
 800dcf8:	d003      	beq.n	800dd02 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800dcfa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dcfe:	2b03      	cmp	r3, #3
 800dd00:	d103      	bne.n	800dd0a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800dd02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd04:	2205      	movs	r2, #5
 800dd06:	701a      	strb	r2, [r3, #0]
 800dd08:	e032      	b.n	800dd70 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800dd0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dd0e:	2b06      	cmp	r3, #6
 800dd10:	d003      	beq.n	800dd1a <VL53L0X_get_pal_range_status+0x28a>
 800dd12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dd16:	2b09      	cmp	r3, #9
 800dd18:	d103      	bne.n	800dd22 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800dd1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd1c:	2204      	movs	r2, #4
 800dd1e:	701a      	strb	r2, [r3, #0]
 800dd20:	e026      	b.n	800dd70 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800dd22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dd26:	2b08      	cmp	r3, #8
 800dd28:	d007      	beq.n	800dd3a <VL53L0X_get_pal_range_status+0x2aa>
 800dd2a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dd2e:	2b0a      	cmp	r3, #10
 800dd30:	d003      	beq.n	800dd3a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800dd32:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dd36:	2b01      	cmp	r3, #1
 800dd38:	d103      	bne.n	800dd42 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800dd3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd3c:	2203      	movs	r2, #3
 800dd3e:	701a      	strb	r2, [r3, #0]
 800dd40:	e016      	b.n	800dd70 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800dd42:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dd46:	2b04      	cmp	r3, #4
 800dd48:	d003      	beq.n	800dd52 <VL53L0X_get_pal_range_status+0x2c2>
 800dd4a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d103      	bne.n	800dd5a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800dd52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd54:	2202      	movs	r2, #2
 800dd56:	701a      	strb	r2, [r3, #0]
 800dd58:	e00a      	b.n	800dd70 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800dd5a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d103      	bne.n	800dd6a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800dd62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd64:	2201      	movs	r2, #1
 800dd66:	701a      	strb	r2, [r3, #0]
 800dd68:	e002      	b.n	800dd70 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800dd6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800dd70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d102      	bne.n	800dd7e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800dd78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800dd7e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800dd82:	461a      	mov	r2, r3
 800dd84:	2101      	movs	r1, #1
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	f7fc f89c 	bl	8009ec4 <VL53L0X_GetLimitCheckEnable>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800dd92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d14f      	bne.n	800de3a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800dd9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d003      	beq.n	800ddaa <VL53L0X_get_pal_range_status+0x31a>
 800dda2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	d103      	bne.n	800ddb2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800ddaa:	2301      	movs	r3, #1
 800ddac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddb0:	e002      	b.n	800ddb8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ddbe:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800ddc2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ddc6:	2b04      	cmp	r3, #4
 800ddc8:	d003      	beq.n	800ddd2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800ddca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d103      	bne.n	800ddda <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddd8:	e002      	b.n	800dde0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800ddda:	2300      	movs	r3, #0
 800dddc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800dde6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800ddea:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d003      	beq.n	800ddfa <VL53L0X_get_pal_range_status+0x36a>
 800ddf2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ddf6:	2b01      	cmp	r3, #1
 800ddf8:	d103      	bne.n	800de02 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de00:	e002      	b.n	800de08 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800de02:	2300      	movs	r3, #0
 800de04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800de0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800de12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800de16:	2b00      	cmp	r3, #0
 800de18:	d003      	beq.n	800de22 <VL53L0X_get_pal_range_status+0x392>
 800de1a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d103      	bne.n	800de2a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800de22:	2301      	movs	r3, #1
 800de24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de28:	e002      	b.n	800de30 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800de2a:	2300      	movs	r3, #0
 800de2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800de36:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800de3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800de3e:	4618      	mov	r0, r3
 800de40:	3740      	adds	r7, #64	; 0x40
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}

0800de46 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800de46:	b580      	push	{r7, lr}
 800de48:	b088      	sub	sp, #32
 800de4a:	af02      	add	r7, sp, #8
 800de4c:	60f8      	str	r0, [r7, #12]
 800de4e:	60b9      	str	r1, [r7, #8]
 800de50:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	330a      	adds	r3, #10
 800de56:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800de64:	b299      	uxth	r1, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	b29a      	uxth	r2, r3
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	4613      	mov	r3, r2
 800de70:	68ba      	ldr	r2, [r7, #8]
 800de72:	f7f4 fff5 	bl	8002e60 <HAL_I2C_Master_Transmit>
 800de76:	4603      	mov	r3, r0
 800de78:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800de7a:	693b      	ldr	r3, [r7, #16]
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3718      	adds	r7, #24
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}

0800de84 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800de84:	b580      	push	{r7, lr}
 800de86:	b088      	sub	sp, #32
 800de88:	af02      	add	r7, sp, #8
 800de8a:	60f8      	str	r0, [r7, #12]
 800de8c:	60b9      	str	r1, [r7, #8]
 800de8e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	330a      	adds	r3, #10
 800de94:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800dea2:	f043 0301 	orr.w	r3, r3, #1
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	b299      	uxth	r1, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	b29a      	uxth	r2, r3
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	9300      	str	r3, [sp, #0]
 800deb2:	4613      	mov	r3, r2
 800deb4:	68ba      	ldr	r2, [r7, #8]
 800deb6:	f7f5 f8c7 	bl	8003048 <HAL_I2C_Master_Receive>
 800deba:	4603      	mov	r3, r0
 800debc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800debe:	693b      	ldr	r3, [r7, #16]
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3718      	adds	r7, #24
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800dec8:	b580      	push	{r7, lr}
 800deca:	b086      	sub	sp, #24
 800decc:	af00      	add	r7, sp, #0
 800dece:	60f8      	str	r0, [r7, #12]
 800ded0:	607a      	str	r2, [r7, #4]
 800ded2:	603b      	str	r3, [r7, #0]
 800ded4:	460b      	mov	r3, r1
 800ded6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ded8:	2300      	movs	r3, #0
 800deda:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	2b3f      	cmp	r3, #63	; 0x3f
 800dee0:	d902      	bls.n	800dee8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800dee2:	f06f 0303 	mvn.w	r3, #3
 800dee6:	e016      	b.n	800df16 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800dee8:	4a0d      	ldr	r2, [pc, #52]	; (800df20 <VL53L0X_WriteMulti+0x58>)
 800deea:	7afb      	ldrb	r3, [r7, #11]
 800deec:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800deee:	683a      	ldr	r2, [r7, #0]
 800def0:	6879      	ldr	r1, [r7, #4]
 800def2:	480c      	ldr	r0, [pc, #48]	; (800df24 <VL53L0X_WriteMulti+0x5c>)
 800def4:	f000 f99e 	bl	800e234 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	3301      	adds	r3, #1
 800defc:	461a      	mov	r2, r3
 800defe:	4908      	ldr	r1, [pc, #32]	; (800df20 <VL53L0X_WriteMulti+0x58>)
 800df00:	68f8      	ldr	r0, [r7, #12]
 800df02:	f7ff ffa0 	bl	800de46 <_I2CWrite>
 800df06:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d001      	beq.n	800df12 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800df0e:	23ec      	movs	r3, #236	; 0xec
 800df10:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800df12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df16:	4618      	mov	r0, r3
 800df18:	3718      	adds	r7, #24
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	2000071c 	.word	0x2000071c
 800df24:	2000071d 	.word	0x2000071d

0800df28 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800df28:	b580      	push	{r7, lr}
 800df2a:	b086      	sub	sp, #24
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	607a      	str	r2, [r7, #4]
 800df32:	603b      	str	r3, [r7, #0]
 800df34:	460b      	mov	r3, r1
 800df36:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800df38:	2300      	movs	r3, #0
 800df3a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800df3c:	f107 030b 	add.w	r3, r7, #11
 800df40:	2201      	movs	r2, #1
 800df42:	4619      	mov	r1, r3
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f7ff ff7e 	bl	800de46 <_I2CWrite>
 800df4a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d002      	beq.n	800df58 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800df52:	23ec      	movs	r3, #236	; 0xec
 800df54:	75fb      	strb	r3, [r7, #23]
        goto done;
 800df56:	e00c      	b.n	800df72 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800df58:	683a      	ldr	r2, [r7, #0]
 800df5a:	6879      	ldr	r1, [r7, #4]
 800df5c:	68f8      	ldr	r0, [r7, #12]
 800df5e:	f7ff ff91 	bl	800de84 <_I2CRead>
 800df62:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d002      	beq.n	800df70 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800df6a:	23ec      	movs	r3, #236	; 0xec
 800df6c:	75fb      	strb	r3, [r7, #23]
 800df6e:	e000      	b.n	800df72 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800df70:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800df72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df76:	4618      	mov	r0, r3
 800df78:	3718      	adds	r7, #24
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
	...

0800df80 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800df80:	b580      	push	{r7, lr}
 800df82:	b084      	sub	sp, #16
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	460b      	mov	r3, r1
 800df8a:	70fb      	strb	r3, [r7, #3]
 800df8c:	4613      	mov	r3, r2
 800df8e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800df90:	2300      	movs	r3, #0
 800df92:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800df94:	4a0b      	ldr	r2, [pc, #44]	; (800dfc4 <VL53L0X_WrByte+0x44>)
 800df96:	78fb      	ldrb	r3, [r7, #3]
 800df98:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800df9a:	4a0a      	ldr	r2, [pc, #40]	; (800dfc4 <VL53L0X_WrByte+0x44>)
 800df9c:	78bb      	ldrb	r3, [r7, #2]
 800df9e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800dfa0:	2202      	movs	r2, #2
 800dfa2:	4908      	ldr	r1, [pc, #32]	; (800dfc4 <VL53L0X_WrByte+0x44>)
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f7ff ff4e 	bl	800de46 <_I2CWrite>
 800dfaa:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d001      	beq.n	800dfb6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dfb2:	23ec      	movs	r3, #236	; 0xec
 800dfb4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800dfb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	2000071c 	.word	0x2000071c

0800dfc8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	70fb      	strb	r3, [r7, #3]
 800dfd4:	4613      	mov	r3, r2
 800dfd6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800dfdc:	4a0e      	ldr	r2, [pc, #56]	; (800e018 <VL53L0X_WrWord+0x50>)
 800dfde:	78fb      	ldrb	r3, [r7, #3]
 800dfe0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800dfe2:	883b      	ldrh	r3, [r7, #0]
 800dfe4:	0a1b      	lsrs	r3, r3, #8
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	b2da      	uxtb	r2, r3
 800dfea:	4b0b      	ldr	r3, [pc, #44]	; (800e018 <VL53L0X_WrWord+0x50>)
 800dfec:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800dfee:	883b      	ldrh	r3, [r7, #0]
 800dff0:	b2da      	uxtb	r2, r3
 800dff2:	4b09      	ldr	r3, [pc, #36]	; (800e018 <VL53L0X_WrWord+0x50>)
 800dff4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800dff6:	2203      	movs	r2, #3
 800dff8:	4907      	ldr	r1, [pc, #28]	; (800e018 <VL53L0X_WrWord+0x50>)
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f7ff ff23 	bl	800de46 <_I2CWrite>
 800e000:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d001      	beq.n	800e00c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e008:	23ec      	movs	r3, #236	; 0xec
 800e00a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800e00c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e010:	4618      	mov	r0, r3
 800e012:	3710      	adds	r7, #16
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	2000071c 	.word	0x2000071c

0800e01c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	4608      	mov	r0, r1
 800e026:	4611      	mov	r1, r2
 800e028:	461a      	mov	r2, r3
 800e02a:	4603      	mov	r3, r0
 800e02c:	70fb      	strb	r3, [r7, #3]
 800e02e:	460b      	mov	r3, r1
 800e030:	70bb      	strb	r3, [r7, #2]
 800e032:	4613      	mov	r3, r2
 800e034:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e036:	2300      	movs	r3, #0
 800e038:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800e03a:	f107 020e 	add.w	r2, r7, #14
 800e03e:	78fb      	ldrb	r3, [r7, #3]
 800e040:	4619      	mov	r1, r3
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 f81e 	bl	800e084 <VL53L0X_RdByte>
 800e048:	4603      	mov	r3, r0
 800e04a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800e04c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d110      	bne.n	800e076 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800e054:	7bba      	ldrb	r2, [r7, #14]
 800e056:	78bb      	ldrb	r3, [r7, #2]
 800e058:	4013      	ands	r3, r2
 800e05a:	b2da      	uxtb	r2, r3
 800e05c:	787b      	ldrb	r3, [r7, #1]
 800e05e:	4313      	orrs	r3, r2
 800e060:	b2db      	uxtb	r3, r3
 800e062:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800e064:	7bba      	ldrb	r2, [r7, #14]
 800e066:	78fb      	ldrb	r3, [r7, #3]
 800e068:	4619      	mov	r1, r3
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f7ff ff88 	bl	800df80 <VL53L0X_WrByte>
 800e070:	4603      	mov	r3, r0
 800e072:	73fb      	strb	r3, [r7, #15]
 800e074:	e000      	b.n	800e078 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800e076:	bf00      	nop
done:
    return Status;
 800e078:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3710      	adds	r7, #16
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800e084:	b580      	push	{r7, lr}
 800e086:	b086      	sub	sp, #24
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	460b      	mov	r3, r1
 800e08e:	607a      	str	r2, [r7, #4]
 800e090:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e092:	2300      	movs	r3, #0
 800e094:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e096:	f107 030b 	add.w	r3, r7, #11
 800e09a:	2201      	movs	r2, #1
 800e09c:	4619      	mov	r1, r3
 800e09e:	68f8      	ldr	r0, [r7, #12]
 800e0a0:	f7ff fed1 	bl	800de46 <_I2CWrite>
 800e0a4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d002      	beq.n	800e0b2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e0ac:	23ec      	movs	r3, #236	; 0xec
 800e0ae:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e0b0:	e00c      	b.n	800e0cc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	6879      	ldr	r1, [r7, #4]
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f7ff fee4 	bl	800de84 <_I2CRead>
 800e0bc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d002      	beq.n	800e0ca <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e0c4:	23ec      	movs	r3, #236	; 0xec
 800e0c6:	75fb      	strb	r3, [r7, #23]
 800e0c8:	e000      	b.n	800e0cc <VL53L0X_RdByte+0x48>
    }
done:
 800e0ca:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800e0cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3718      	adds	r7, #24
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b086      	sub	sp, #24
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	460b      	mov	r3, r1
 800e0e2:	607a      	str	r2, [r7, #4]
 800e0e4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e0ea:	f107 030b 	add.w	r3, r7, #11
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	68f8      	ldr	r0, [r7, #12]
 800e0f4:	f7ff fea7 	bl	800de46 <_I2CWrite>
 800e0f8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d002      	beq.n	800e106 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e100:	23ec      	movs	r3, #236	; 0xec
 800e102:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e104:	e017      	b.n	800e136 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800e106:	2202      	movs	r2, #2
 800e108:	490e      	ldr	r1, [pc, #56]	; (800e144 <VL53L0X_RdWord+0x6c>)
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	f7ff feba 	bl	800de84 <_I2CRead>
 800e110:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d002      	beq.n	800e11e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e118:	23ec      	movs	r3, #236	; 0xec
 800e11a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e11c:	e00b      	b.n	800e136 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800e11e:	4b09      	ldr	r3, [pc, #36]	; (800e144 <VL53L0X_RdWord+0x6c>)
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	b29b      	uxth	r3, r3
 800e124:	021b      	lsls	r3, r3, #8
 800e126:	b29a      	uxth	r2, r3
 800e128:	4b06      	ldr	r3, [pc, #24]	; (800e144 <VL53L0X_RdWord+0x6c>)
 800e12a:	785b      	ldrb	r3, [r3, #1]
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	4413      	add	r3, r2
 800e130:	b29a      	uxth	r2, r3
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800e136:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3718      	adds	r7, #24
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
 800e142:	bf00      	nop
 800e144:	2000071c 	.word	0x2000071c

0800e148 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800e148:	b580      	push	{r7, lr}
 800e14a:	b086      	sub	sp, #24
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	60f8      	str	r0, [r7, #12]
 800e150:	460b      	mov	r3, r1
 800e152:	607a      	str	r2, [r7, #4]
 800e154:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e156:	2300      	movs	r3, #0
 800e158:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e15a:	f107 030b 	add.w	r3, r7, #11
 800e15e:	2201      	movs	r2, #1
 800e160:	4619      	mov	r1, r3
 800e162:	68f8      	ldr	r0, [r7, #12]
 800e164:	f7ff fe6f 	bl	800de46 <_I2CWrite>
 800e168:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d002      	beq.n	800e176 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e170:	23ec      	movs	r3, #236	; 0xec
 800e172:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e174:	e01b      	b.n	800e1ae <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800e176:	2204      	movs	r2, #4
 800e178:	4910      	ldr	r1, [pc, #64]	; (800e1bc <VL53L0X_RdDWord+0x74>)
 800e17a:	68f8      	ldr	r0, [r7, #12]
 800e17c:	f7ff fe82 	bl	800de84 <_I2CRead>
 800e180:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d002      	beq.n	800e18e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e188:	23ec      	movs	r3, #236	; 0xec
 800e18a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e18c:	e00f      	b.n	800e1ae <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800e18e:	4b0b      	ldr	r3, [pc, #44]	; (800e1bc <VL53L0X_RdDWord+0x74>)
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	061a      	lsls	r2, r3, #24
 800e194:	4b09      	ldr	r3, [pc, #36]	; (800e1bc <VL53L0X_RdDWord+0x74>)
 800e196:	785b      	ldrb	r3, [r3, #1]
 800e198:	041b      	lsls	r3, r3, #16
 800e19a:	441a      	add	r2, r3
 800e19c:	4b07      	ldr	r3, [pc, #28]	; (800e1bc <VL53L0X_RdDWord+0x74>)
 800e19e:	789b      	ldrb	r3, [r3, #2]
 800e1a0:	021b      	lsls	r3, r3, #8
 800e1a2:	4413      	add	r3, r2
 800e1a4:	4a05      	ldr	r2, [pc, #20]	; (800e1bc <VL53L0X_RdDWord+0x74>)
 800e1a6:	78d2      	ldrb	r2, [r2, #3]
 800e1a8:	441a      	add	r2, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800e1ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3718      	adds	r7, #24
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	2000071c 	.word	0x2000071c

0800e1c0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b084      	sub	sp, #16
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800e1cc:	2002      	movs	r0, #2
 800e1ce:	f7f3 ff5b 	bl	8002088 <HAL_Delay>
    return status;
 800e1d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3710      	adds	r7, #16
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
	...

0800e1e0 <__errno>:
 800e1e0:	4b01      	ldr	r3, [pc, #4]	; (800e1e8 <__errno+0x8>)
 800e1e2:	6818      	ldr	r0, [r3, #0]
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop
 800e1e8:	200002c8 	.word	0x200002c8

0800e1ec <__libc_init_array>:
 800e1ec:	b570      	push	{r4, r5, r6, lr}
 800e1ee:	4d0d      	ldr	r5, [pc, #52]	; (800e224 <__libc_init_array+0x38>)
 800e1f0:	4c0d      	ldr	r4, [pc, #52]	; (800e228 <__libc_init_array+0x3c>)
 800e1f2:	1b64      	subs	r4, r4, r5
 800e1f4:	10a4      	asrs	r4, r4, #2
 800e1f6:	2600      	movs	r6, #0
 800e1f8:	42a6      	cmp	r6, r4
 800e1fa:	d109      	bne.n	800e210 <__libc_init_array+0x24>
 800e1fc:	4d0b      	ldr	r5, [pc, #44]	; (800e22c <__libc_init_array+0x40>)
 800e1fe:	4c0c      	ldr	r4, [pc, #48]	; (800e230 <__libc_init_array+0x44>)
 800e200:	f004 fc96 	bl	8012b30 <_init>
 800e204:	1b64      	subs	r4, r4, r5
 800e206:	10a4      	asrs	r4, r4, #2
 800e208:	2600      	movs	r6, #0
 800e20a:	42a6      	cmp	r6, r4
 800e20c:	d105      	bne.n	800e21a <__libc_init_array+0x2e>
 800e20e:	bd70      	pop	{r4, r5, r6, pc}
 800e210:	f855 3b04 	ldr.w	r3, [r5], #4
 800e214:	4798      	blx	r3
 800e216:	3601      	adds	r6, #1
 800e218:	e7ee      	b.n	800e1f8 <__libc_init_array+0xc>
 800e21a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e21e:	4798      	blx	r3
 800e220:	3601      	adds	r6, #1
 800e222:	e7f2      	b.n	800e20a <__libc_init_array+0x1e>
 800e224:	08013254 	.word	0x08013254
 800e228:	08013254 	.word	0x08013254
 800e22c:	08013254 	.word	0x08013254
 800e230:	08013258 	.word	0x08013258

0800e234 <memcpy>:
 800e234:	440a      	add	r2, r1
 800e236:	4291      	cmp	r1, r2
 800e238:	f100 33ff 	add.w	r3, r0, #4294967295
 800e23c:	d100      	bne.n	800e240 <memcpy+0xc>
 800e23e:	4770      	bx	lr
 800e240:	b510      	push	{r4, lr}
 800e242:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e24a:	4291      	cmp	r1, r2
 800e24c:	d1f9      	bne.n	800e242 <memcpy+0xe>
 800e24e:	bd10      	pop	{r4, pc}

0800e250 <memset>:
 800e250:	4402      	add	r2, r0
 800e252:	4603      	mov	r3, r0
 800e254:	4293      	cmp	r3, r2
 800e256:	d100      	bne.n	800e25a <memset+0xa>
 800e258:	4770      	bx	lr
 800e25a:	f803 1b01 	strb.w	r1, [r3], #1
 800e25e:	e7f9      	b.n	800e254 <memset+0x4>

0800e260 <__cvt>:
 800e260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e264:	ec55 4b10 	vmov	r4, r5, d0
 800e268:	2d00      	cmp	r5, #0
 800e26a:	460e      	mov	r6, r1
 800e26c:	4619      	mov	r1, r3
 800e26e:	462b      	mov	r3, r5
 800e270:	bfbb      	ittet	lt
 800e272:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e276:	461d      	movlt	r5, r3
 800e278:	2300      	movge	r3, #0
 800e27a:	232d      	movlt	r3, #45	; 0x2d
 800e27c:	700b      	strb	r3, [r1, #0]
 800e27e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e280:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e284:	4691      	mov	r9, r2
 800e286:	f023 0820 	bic.w	r8, r3, #32
 800e28a:	bfbc      	itt	lt
 800e28c:	4622      	movlt	r2, r4
 800e28e:	4614      	movlt	r4, r2
 800e290:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e294:	d005      	beq.n	800e2a2 <__cvt+0x42>
 800e296:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e29a:	d100      	bne.n	800e29e <__cvt+0x3e>
 800e29c:	3601      	adds	r6, #1
 800e29e:	2102      	movs	r1, #2
 800e2a0:	e000      	b.n	800e2a4 <__cvt+0x44>
 800e2a2:	2103      	movs	r1, #3
 800e2a4:	ab03      	add	r3, sp, #12
 800e2a6:	9301      	str	r3, [sp, #4]
 800e2a8:	ab02      	add	r3, sp, #8
 800e2aa:	9300      	str	r3, [sp, #0]
 800e2ac:	ec45 4b10 	vmov	d0, r4, r5
 800e2b0:	4653      	mov	r3, sl
 800e2b2:	4632      	mov	r2, r6
 800e2b4:	f001 fdb4 	bl	800fe20 <_dtoa_r>
 800e2b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e2bc:	4607      	mov	r7, r0
 800e2be:	d102      	bne.n	800e2c6 <__cvt+0x66>
 800e2c0:	f019 0f01 	tst.w	r9, #1
 800e2c4:	d022      	beq.n	800e30c <__cvt+0xac>
 800e2c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e2ca:	eb07 0906 	add.w	r9, r7, r6
 800e2ce:	d110      	bne.n	800e2f2 <__cvt+0x92>
 800e2d0:	783b      	ldrb	r3, [r7, #0]
 800e2d2:	2b30      	cmp	r3, #48	; 0x30
 800e2d4:	d10a      	bne.n	800e2ec <__cvt+0x8c>
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	2300      	movs	r3, #0
 800e2da:	4620      	mov	r0, r4
 800e2dc:	4629      	mov	r1, r5
 800e2de:	f7f2 fc13 	bl	8000b08 <__aeabi_dcmpeq>
 800e2e2:	b918      	cbnz	r0, 800e2ec <__cvt+0x8c>
 800e2e4:	f1c6 0601 	rsb	r6, r6, #1
 800e2e8:	f8ca 6000 	str.w	r6, [sl]
 800e2ec:	f8da 3000 	ldr.w	r3, [sl]
 800e2f0:	4499      	add	r9, r3
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	4629      	mov	r1, r5
 800e2fa:	f7f2 fc05 	bl	8000b08 <__aeabi_dcmpeq>
 800e2fe:	b108      	cbz	r0, 800e304 <__cvt+0xa4>
 800e300:	f8cd 900c 	str.w	r9, [sp, #12]
 800e304:	2230      	movs	r2, #48	; 0x30
 800e306:	9b03      	ldr	r3, [sp, #12]
 800e308:	454b      	cmp	r3, r9
 800e30a:	d307      	bcc.n	800e31c <__cvt+0xbc>
 800e30c:	9b03      	ldr	r3, [sp, #12]
 800e30e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e310:	1bdb      	subs	r3, r3, r7
 800e312:	4638      	mov	r0, r7
 800e314:	6013      	str	r3, [r2, #0]
 800e316:	b004      	add	sp, #16
 800e318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e31c:	1c59      	adds	r1, r3, #1
 800e31e:	9103      	str	r1, [sp, #12]
 800e320:	701a      	strb	r2, [r3, #0]
 800e322:	e7f0      	b.n	800e306 <__cvt+0xa6>

0800e324 <__exponent>:
 800e324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e326:	4603      	mov	r3, r0
 800e328:	2900      	cmp	r1, #0
 800e32a:	bfb8      	it	lt
 800e32c:	4249      	neglt	r1, r1
 800e32e:	f803 2b02 	strb.w	r2, [r3], #2
 800e332:	bfb4      	ite	lt
 800e334:	222d      	movlt	r2, #45	; 0x2d
 800e336:	222b      	movge	r2, #43	; 0x2b
 800e338:	2909      	cmp	r1, #9
 800e33a:	7042      	strb	r2, [r0, #1]
 800e33c:	dd2a      	ble.n	800e394 <__exponent+0x70>
 800e33e:	f10d 0407 	add.w	r4, sp, #7
 800e342:	46a4      	mov	ip, r4
 800e344:	270a      	movs	r7, #10
 800e346:	46a6      	mov	lr, r4
 800e348:	460a      	mov	r2, r1
 800e34a:	fb91 f6f7 	sdiv	r6, r1, r7
 800e34e:	fb07 1516 	mls	r5, r7, r6, r1
 800e352:	3530      	adds	r5, #48	; 0x30
 800e354:	2a63      	cmp	r2, #99	; 0x63
 800e356:	f104 34ff 	add.w	r4, r4, #4294967295
 800e35a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e35e:	4631      	mov	r1, r6
 800e360:	dcf1      	bgt.n	800e346 <__exponent+0x22>
 800e362:	3130      	adds	r1, #48	; 0x30
 800e364:	f1ae 0502 	sub.w	r5, lr, #2
 800e368:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e36c:	1c44      	adds	r4, r0, #1
 800e36e:	4629      	mov	r1, r5
 800e370:	4561      	cmp	r1, ip
 800e372:	d30a      	bcc.n	800e38a <__exponent+0x66>
 800e374:	f10d 0209 	add.w	r2, sp, #9
 800e378:	eba2 020e 	sub.w	r2, r2, lr
 800e37c:	4565      	cmp	r5, ip
 800e37e:	bf88      	it	hi
 800e380:	2200      	movhi	r2, #0
 800e382:	4413      	add	r3, r2
 800e384:	1a18      	subs	r0, r3, r0
 800e386:	b003      	add	sp, #12
 800e388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e38a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e38e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e392:	e7ed      	b.n	800e370 <__exponent+0x4c>
 800e394:	2330      	movs	r3, #48	; 0x30
 800e396:	3130      	adds	r1, #48	; 0x30
 800e398:	7083      	strb	r3, [r0, #2]
 800e39a:	70c1      	strb	r1, [r0, #3]
 800e39c:	1d03      	adds	r3, r0, #4
 800e39e:	e7f1      	b.n	800e384 <__exponent+0x60>

0800e3a0 <_printf_float>:
 800e3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a4:	ed2d 8b02 	vpush	{d8}
 800e3a8:	b08d      	sub	sp, #52	; 0x34
 800e3aa:	460c      	mov	r4, r1
 800e3ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e3b0:	4616      	mov	r6, r2
 800e3b2:	461f      	mov	r7, r3
 800e3b4:	4605      	mov	r5, r0
 800e3b6:	f002 fe91 	bl	80110dc <_localeconv_r>
 800e3ba:	f8d0 a000 	ldr.w	sl, [r0]
 800e3be:	4650      	mov	r0, sl
 800e3c0:	f7f1 ff26 	bl	8000210 <strlen>
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	930a      	str	r3, [sp, #40]	; 0x28
 800e3c8:	6823      	ldr	r3, [r4, #0]
 800e3ca:	9305      	str	r3, [sp, #20]
 800e3cc:	f8d8 3000 	ldr.w	r3, [r8]
 800e3d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e3d4:	3307      	adds	r3, #7
 800e3d6:	f023 0307 	bic.w	r3, r3, #7
 800e3da:	f103 0208 	add.w	r2, r3, #8
 800e3de:	f8c8 2000 	str.w	r2, [r8]
 800e3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e3ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e3ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e3f2:	9307      	str	r3, [sp, #28]
 800e3f4:	f8cd 8018 	str.w	r8, [sp, #24]
 800e3f8:	ee08 0a10 	vmov	s16, r0
 800e3fc:	4b9f      	ldr	r3, [pc, #636]	; (800e67c <_printf_float+0x2dc>)
 800e3fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e402:	f04f 32ff 	mov.w	r2, #4294967295
 800e406:	f7f2 fbb1 	bl	8000b6c <__aeabi_dcmpun>
 800e40a:	bb88      	cbnz	r0, 800e470 <_printf_float+0xd0>
 800e40c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e410:	4b9a      	ldr	r3, [pc, #616]	; (800e67c <_printf_float+0x2dc>)
 800e412:	f04f 32ff 	mov.w	r2, #4294967295
 800e416:	f7f2 fb8b 	bl	8000b30 <__aeabi_dcmple>
 800e41a:	bb48      	cbnz	r0, 800e470 <_printf_float+0xd0>
 800e41c:	2200      	movs	r2, #0
 800e41e:	2300      	movs	r3, #0
 800e420:	4640      	mov	r0, r8
 800e422:	4649      	mov	r1, r9
 800e424:	f7f2 fb7a 	bl	8000b1c <__aeabi_dcmplt>
 800e428:	b110      	cbz	r0, 800e430 <_printf_float+0x90>
 800e42a:	232d      	movs	r3, #45	; 0x2d
 800e42c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e430:	4b93      	ldr	r3, [pc, #588]	; (800e680 <_printf_float+0x2e0>)
 800e432:	4894      	ldr	r0, [pc, #592]	; (800e684 <_printf_float+0x2e4>)
 800e434:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e438:	bf94      	ite	ls
 800e43a:	4698      	movls	r8, r3
 800e43c:	4680      	movhi	r8, r0
 800e43e:	2303      	movs	r3, #3
 800e440:	6123      	str	r3, [r4, #16]
 800e442:	9b05      	ldr	r3, [sp, #20]
 800e444:	f023 0204 	bic.w	r2, r3, #4
 800e448:	6022      	str	r2, [r4, #0]
 800e44a:	f04f 0900 	mov.w	r9, #0
 800e44e:	9700      	str	r7, [sp, #0]
 800e450:	4633      	mov	r3, r6
 800e452:	aa0b      	add	r2, sp, #44	; 0x2c
 800e454:	4621      	mov	r1, r4
 800e456:	4628      	mov	r0, r5
 800e458:	f000 f9d8 	bl	800e80c <_printf_common>
 800e45c:	3001      	adds	r0, #1
 800e45e:	f040 8090 	bne.w	800e582 <_printf_float+0x1e2>
 800e462:	f04f 30ff 	mov.w	r0, #4294967295
 800e466:	b00d      	add	sp, #52	; 0x34
 800e468:	ecbd 8b02 	vpop	{d8}
 800e46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e470:	4642      	mov	r2, r8
 800e472:	464b      	mov	r3, r9
 800e474:	4640      	mov	r0, r8
 800e476:	4649      	mov	r1, r9
 800e478:	f7f2 fb78 	bl	8000b6c <__aeabi_dcmpun>
 800e47c:	b140      	cbz	r0, 800e490 <_printf_float+0xf0>
 800e47e:	464b      	mov	r3, r9
 800e480:	2b00      	cmp	r3, #0
 800e482:	bfbc      	itt	lt
 800e484:	232d      	movlt	r3, #45	; 0x2d
 800e486:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e48a:	487f      	ldr	r0, [pc, #508]	; (800e688 <_printf_float+0x2e8>)
 800e48c:	4b7f      	ldr	r3, [pc, #508]	; (800e68c <_printf_float+0x2ec>)
 800e48e:	e7d1      	b.n	800e434 <_printf_float+0x94>
 800e490:	6863      	ldr	r3, [r4, #4]
 800e492:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e496:	9206      	str	r2, [sp, #24]
 800e498:	1c5a      	adds	r2, r3, #1
 800e49a:	d13f      	bne.n	800e51c <_printf_float+0x17c>
 800e49c:	2306      	movs	r3, #6
 800e49e:	6063      	str	r3, [r4, #4]
 800e4a0:	9b05      	ldr	r3, [sp, #20]
 800e4a2:	6861      	ldr	r1, [r4, #4]
 800e4a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	9303      	str	r3, [sp, #12]
 800e4ac:	ab0a      	add	r3, sp, #40	; 0x28
 800e4ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e4b2:	ab09      	add	r3, sp, #36	; 0x24
 800e4b4:	ec49 8b10 	vmov	d0, r8, r9
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	6022      	str	r2, [r4, #0]
 800e4bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e4c0:	4628      	mov	r0, r5
 800e4c2:	f7ff fecd 	bl	800e260 <__cvt>
 800e4c6:	9b06      	ldr	r3, [sp, #24]
 800e4c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e4ca:	2b47      	cmp	r3, #71	; 0x47
 800e4cc:	4680      	mov	r8, r0
 800e4ce:	d108      	bne.n	800e4e2 <_printf_float+0x142>
 800e4d0:	1cc8      	adds	r0, r1, #3
 800e4d2:	db02      	blt.n	800e4da <_printf_float+0x13a>
 800e4d4:	6863      	ldr	r3, [r4, #4]
 800e4d6:	4299      	cmp	r1, r3
 800e4d8:	dd41      	ble.n	800e55e <_printf_float+0x1be>
 800e4da:	f1ab 0b02 	sub.w	fp, fp, #2
 800e4de:	fa5f fb8b 	uxtb.w	fp, fp
 800e4e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e4e6:	d820      	bhi.n	800e52a <_printf_float+0x18a>
 800e4e8:	3901      	subs	r1, #1
 800e4ea:	465a      	mov	r2, fp
 800e4ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e4f0:	9109      	str	r1, [sp, #36]	; 0x24
 800e4f2:	f7ff ff17 	bl	800e324 <__exponent>
 800e4f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4f8:	1813      	adds	r3, r2, r0
 800e4fa:	2a01      	cmp	r2, #1
 800e4fc:	4681      	mov	r9, r0
 800e4fe:	6123      	str	r3, [r4, #16]
 800e500:	dc02      	bgt.n	800e508 <_printf_float+0x168>
 800e502:	6822      	ldr	r2, [r4, #0]
 800e504:	07d2      	lsls	r2, r2, #31
 800e506:	d501      	bpl.n	800e50c <_printf_float+0x16c>
 800e508:	3301      	adds	r3, #1
 800e50a:	6123      	str	r3, [r4, #16]
 800e50c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e510:	2b00      	cmp	r3, #0
 800e512:	d09c      	beq.n	800e44e <_printf_float+0xae>
 800e514:	232d      	movs	r3, #45	; 0x2d
 800e516:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e51a:	e798      	b.n	800e44e <_printf_float+0xae>
 800e51c:	9a06      	ldr	r2, [sp, #24]
 800e51e:	2a47      	cmp	r2, #71	; 0x47
 800e520:	d1be      	bne.n	800e4a0 <_printf_float+0x100>
 800e522:	2b00      	cmp	r3, #0
 800e524:	d1bc      	bne.n	800e4a0 <_printf_float+0x100>
 800e526:	2301      	movs	r3, #1
 800e528:	e7b9      	b.n	800e49e <_printf_float+0xfe>
 800e52a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e52e:	d118      	bne.n	800e562 <_printf_float+0x1c2>
 800e530:	2900      	cmp	r1, #0
 800e532:	6863      	ldr	r3, [r4, #4]
 800e534:	dd0b      	ble.n	800e54e <_printf_float+0x1ae>
 800e536:	6121      	str	r1, [r4, #16]
 800e538:	b913      	cbnz	r3, 800e540 <_printf_float+0x1a0>
 800e53a:	6822      	ldr	r2, [r4, #0]
 800e53c:	07d0      	lsls	r0, r2, #31
 800e53e:	d502      	bpl.n	800e546 <_printf_float+0x1a6>
 800e540:	3301      	adds	r3, #1
 800e542:	440b      	add	r3, r1
 800e544:	6123      	str	r3, [r4, #16]
 800e546:	65a1      	str	r1, [r4, #88]	; 0x58
 800e548:	f04f 0900 	mov.w	r9, #0
 800e54c:	e7de      	b.n	800e50c <_printf_float+0x16c>
 800e54e:	b913      	cbnz	r3, 800e556 <_printf_float+0x1b6>
 800e550:	6822      	ldr	r2, [r4, #0]
 800e552:	07d2      	lsls	r2, r2, #31
 800e554:	d501      	bpl.n	800e55a <_printf_float+0x1ba>
 800e556:	3302      	adds	r3, #2
 800e558:	e7f4      	b.n	800e544 <_printf_float+0x1a4>
 800e55a:	2301      	movs	r3, #1
 800e55c:	e7f2      	b.n	800e544 <_printf_float+0x1a4>
 800e55e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e564:	4299      	cmp	r1, r3
 800e566:	db05      	blt.n	800e574 <_printf_float+0x1d4>
 800e568:	6823      	ldr	r3, [r4, #0]
 800e56a:	6121      	str	r1, [r4, #16]
 800e56c:	07d8      	lsls	r0, r3, #31
 800e56e:	d5ea      	bpl.n	800e546 <_printf_float+0x1a6>
 800e570:	1c4b      	adds	r3, r1, #1
 800e572:	e7e7      	b.n	800e544 <_printf_float+0x1a4>
 800e574:	2900      	cmp	r1, #0
 800e576:	bfd4      	ite	le
 800e578:	f1c1 0202 	rsble	r2, r1, #2
 800e57c:	2201      	movgt	r2, #1
 800e57e:	4413      	add	r3, r2
 800e580:	e7e0      	b.n	800e544 <_printf_float+0x1a4>
 800e582:	6823      	ldr	r3, [r4, #0]
 800e584:	055a      	lsls	r2, r3, #21
 800e586:	d407      	bmi.n	800e598 <_printf_float+0x1f8>
 800e588:	6923      	ldr	r3, [r4, #16]
 800e58a:	4642      	mov	r2, r8
 800e58c:	4631      	mov	r1, r6
 800e58e:	4628      	mov	r0, r5
 800e590:	47b8      	blx	r7
 800e592:	3001      	adds	r0, #1
 800e594:	d12c      	bne.n	800e5f0 <_printf_float+0x250>
 800e596:	e764      	b.n	800e462 <_printf_float+0xc2>
 800e598:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e59c:	f240 80e0 	bls.w	800e760 <_printf_float+0x3c0>
 800e5a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	f7f2 faae 	bl	8000b08 <__aeabi_dcmpeq>
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	d034      	beq.n	800e61a <_printf_float+0x27a>
 800e5b0:	4a37      	ldr	r2, [pc, #220]	; (800e690 <_printf_float+0x2f0>)
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	4631      	mov	r1, r6
 800e5b6:	4628      	mov	r0, r5
 800e5b8:	47b8      	blx	r7
 800e5ba:	3001      	adds	r0, #1
 800e5bc:	f43f af51 	beq.w	800e462 <_printf_float+0xc2>
 800e5c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	db02      	blt.n	800e5ce <_printf_float+0x22e>
 800e5c8:	6823      	ldr	r3, [r4, #0]
 800e5ca:	07d8      	lsls	r0, r3, #31
 800e5cc:	d510      	bpl.n	800e5f0 <_printf_float+0x250>
 800e5ce:	ee18 3a10 	vmov	r3, s16
 800e5d2:	4652      	mov	r2, sl
 800e5d4:	4631      	mov	r1, r6
 800e5d6:	4628      	mov	r0, r5
 800e5d8:	47b8      	blx	r7
 800e5da:	3001      	adds	r0, #1
 800e5dc:	f43f af41 	beq.w	800e462 <_printf_float+0xc2>
 800e5e0:	f04f 0800 	mov.w	r8, #0
 800e5e4:	f104 091a 	add.w	r9, r4, #26
 800e5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5ea:	3b01      	subs	r3, #1
 800e5ec:	4543      	cmp	r3, r8
 800e5ee:	dc09      	bgt.n	800e604 <_printf_float+0x264>
 800e5f0:	6823      	ldr	r3, [r4, #0]
 800e5f2:	079b      	lsls	r3, r3, #30
 800e5f4:	f100 8105 	bmi.w	800e802 <_printf_float+0x462>
 800e5f8:	68e0      	ldr	r0, [r4, #12]
 800e5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5fc:	4298      	cmp	r0, r3
 800e5fe:	bfb8      	it	lt
 800e600:	4618      	movlt	r0, r3
 800e602:	e730      	b.n	800e466 <_printf_float+0xc6>
 800e604:	2301      	movs	r3, #1
 800e606:	464a      	mov	r2, r9
 800e608:	4631      	mov	r1, r6
 800e60a:	4628      	mov	r0, r5
 800e60c:	47b8      	blx	r7
 800e60e:	3001      	adds	r0, #1
 800e610:	f43f af27 	beq.w	800e462 <_printf_float+0xc2>
 800e614:	f108 0801 	add.w	r8, r8, #1
 800e618:	e7e6      	b.n	800e5e8 <_printf_float+0x248>
 800e61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	dc39      	bgt.n	800e694 <_printf_float+0x2f4>
 800e620:	4a1b      	ldr	r2, [pc, #108]	; (800e690 <_printf_float+0x2f0>)
 800e622:	2301      	movs	r3, #1
 800e624:	4631      	mov	r1, r6
 800e626:	4628      	mov	r0, r5
 800e628:	47b8      	blx	r7
 800e62a:	3001      	adds	r0, #1
 800e62c:	f43f af19 	beq.w	800e462 <_printf_float+0xc2>
 800e630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e634:	4313      	orrs	r3, r2
 800e636:	d102      	bne.n	800e63e <_printf_float+0x29e>
 800e638:	6823      	ldr	r3, [r4, #0]
 800e63a:	07d9      	lsls	r1, r3, #31
 800e63c:	d5d8      	bpl.n	800e5f0 <_printf_float+0x250>
 800e63e:	ee18 3a10 	vmov	r3, s16
 800e642:	4652      	mov	r2, sl
 800e644:	4631      	mov	r1, r6
 800e646:	4628      	mov	r0, r5
 800e648:	47b8      	blx	r7
 800e64a:	3001      	adds	r0, #1
 800e64c:	f43f af09 	beq.w	800e462 <_printf_float+0xc2>
 800e650:	f04f 0900 	mov.w	r9, #0
 800e654:	f104 0a1a 	add.w	sl, r4, #26
 800e658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e65a:	425b      	negs	r3, r3
 800e65c:	454b      	cmp	r3, r9
 800e65e:	dc01      	bgt.n	800e664 <_printf_float+0x2c4>
 800e660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e662:	e792      	b.n	800e58a <_printf_float+0x1ea>
 800e664:	2301      	movs	r3, #1
 800e666:	4652      	mov	r2, sl
 800e668:	4631      	mov	r1, r6
 800e66a:	4628      	mov	r0, r5
 800e66c:	47b8      	blx	r7
 800e66e:	3001      	adds	r0, #1
 800e670:	f43f aef7 	beq.w	800e462 <_printf_float+0xc2>
 800e674:	f109 0901 	add.w	r9, r9, #1
 800e678:	e7ee      	b.n	800e658 <_printf_float+0x2b8>
 800e67a:	bf00      	nop
 800e67c:	7fefffff 	.word	0x7fefffff
 800e680:	08012da8 	.word	0x08012da8
 800e684:	08012dac 	.word	0x08012dac
 800e688:	08012db4 	.word	0x08012db4
 800e68c:	08012db0 	.word	0x08012db0
 800e690:	08012db8 	.word	0x08012db8
 800e694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e696:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e698:	429a      	cmp	r2, r3
 800e69a:	bfa8      	it	ge
 800e69c:	461a      	movge	r2, r3
 800e69e:	2a00      	cmp	r2, #0
 800e6a0:	4691      	mov	r9, r2
 800e6a2:	dc37      	bgt.n	800e714 <_printf_float+0x374>
 800e6a4:	f04f 0b00 	mov.w	fp, #0
 800e6a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e6ac:	f104 021a 	add.w	r2, r4, #26
 800e6b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e6b2:	9305      	str	r3, [sp, #20]
 800e6b4:	eba3 0309 	sub.w	r3, r3, r9
 800e6b8:	455b      	cmp	r3, fp
 800e6ba:	dc33      	bgt.n	800e724 <_printf_float+0x384>
 800e6bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	db3b      	blt.n	800e73c <_printf_float+0x39c>
 800e6c4:	6823      	ldr	r3, [r4, #0]
 800e6c6:	07da      	lsls	r2, r3, #31
 800e6c8:	d438      	bmi.n	800e73c <_printf_float+0x39c>
 800e6ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6cc:	9a05      	ldr	r2, [sp, #20]
 800e6ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6d0:	1a9a      	subs	r2, r3, r2
 800e6d2:	eba3 0901 	sub.w	r9, r3, r1
 800e6d6:	4591      	cmp	r9, r2
 800e6d8:	bfa8      	it	ge
 800e6da:	4691      	movge	r9, r2
 800e6dc:	f1b9 0f00 	cmp.w	r9, #0
 800e6e0:	dc35      	bgt.n	800e74e <_printf_float+0x3ae>
 800e6e2:	f04f 0800 	mov.w	r8, #0
 800e6e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e6ea:	f104 0a1a 	add.w	sl, r4, #26
 800e6ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e6f2:	1a9b      	subs	r3, r3, r2
 800e6f4:	eba3 0309 	sub.w	r3, r3, r9
 800e6f8:	4543      	cmp	r3, r8
 800e6fa:	f77f af79 	ble.w	800e5f0 <_printf_float+0x250>
 800e6fe:	2301      	movs	r3, #1
 800e700:	4652      	mov	r2, sl
 800e702:	4631      	mov	r1, r6
 800e704:	4628      	mov	r0, r5
 800e706:	47b8      	blx	r7
 800e708:	3001      	adds	r0, #1
 800e70a:	f43f aeaa 	beq.w	800e462 <_printf_float+0xc2>
 800e70e:	f108 0801 	add.w	r8, r8, #1
 800e712:	e7ec      	b.n	800e6ee <_printf_float+0x34e>
 800e714:	4613      	mov	r3, r2
 800e716:	4631      	mov	r1, r6
 800e718:	4642      	mov	r2, r8
 800e71a:	4628      	mov	r0, r5
 800e71c:	47b8      	blx	r7
 800e71e:	3001      	adds	r0, #1
 800e720:	d1c0      	bne.n	800e6a4 <_printf_float+0x304>
 800e722:	e69e      	b.n	800e462 <_printf_float+0xc2>
 800e724:	2301      	movs	r3, #1
 800e726:	4631      	mov	r1, r6
 800e728:	4628      	mov	r0, r5
 800e72a:	9205      	str	r2, [sp, #20]
 800e72c:	47b8      	blx	r7
 800e72e:	3001      	adds	r0, #1
 800e730:	f43f ae97 	beq.w	800e462 <_printf_float+0xc2>
 800e734:	9a05      	ldr	r2, [sp, #20]
 800e736:	f10b 0b01 	add.w	fp, fp, #1
 800e73a:	e7b9      	b.n	800e6b0 <_printf_float+0x310>
 800e73c:	ee18 3a10 	vmov	r3, s16
 800e740:	4652      	mov	r2, sl
 800e742:	4631      	mov	r1, r6
 800e744:	4628      	mov	r0, r5
 800e746:	47b8      	blx	r7
 800e748:	3001      	adds	r0, #1
 800e74a:	d1be      	bne.n	800e6ca <_printf_float+0x32a>
 800e74c:	e689      	b.n	800e462 <_printf_float+0xc2>
 800e74e:	9a05      	ldr	r2, [sp, #20]
 800e750:	464b      	mov	r3, r9
 800e752:	4442      	add	r2, r8
 800e754:	4631      	mov	r1, r6
 800e756:	4628      	mov	r0, r5
 800e758:	47b8      	blx	r7
 800e75a:	3001      	adds	r0, #1
 800e75c:	d1c1      	bne.n	800e6e2 <_printf_float+0x342>
 800e75e:	e680      	b.n	800e462 <_printf_float+0xc2>
 800e760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e762:	2a01      	cmp	r2, #1
 800e764:	dc01      	bgt.n	800e76a <_printf_float+0x3ca>
 800e766:	07db      	lsls	r3, r3, #31
 800e768:	d538      	bpl.n	800e7dc <_printf_float+0x43c>
 800e76a:	2301      	movs	r3, #1
 800e76c:	4642      	mov	r2, r8
 800e76e:	4631      	mov	r1, r6
 800e770:	4628      	mov	r0, r5
 800e772:	47b8      	blx	r7
 800e774:	3001      	adds	r0, #1
 800e776:	f43f ae74 	beq.w	800e462 <_printf_float+0xc2>
 800e77a:	ee18 3a10 	vmov	r3, s16
 800e77e:	4652      	mov	r2, sl
 800e780:	4631      	mov	r1, r6
 800e782:	4628      	mov	r0, r5
 800e784:	47b8      	blx	r7
 800e786:	3001      	adds	r0, #1
 800e788:	f43f ae6b 	beq.w	800e462 <_printf_float+0xc2>
 800e78c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e790:	2200      	movs	r2, #0
 800e792:	2300      	movs	r3, #0
 800e794:	f7f2 f9b8 	bl	8000b08 <__aeabi_dcmpeq>
 800e798:	b9d8      	cbnz	r0, 800e7d2 <_printf_float+0x432>
 800e79a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e79c:	f108 0201 	add.w	r2, r8, #1
 800e7a0:	3b01      	subs	r3, #1
 800e7a2:	4631      	mov	r1, r6
 800e7a4:	4628      	mov	r0, r5
 800e7a6:	47b8      	blx	r7
 800e7a8:	3001      	adds	r0, #1
 800e7aa:	d10e      	bne.n	800e7ca <_printf_float+0x42a>
 800e7ac:	e659      	b.n	800e462 <_printf_float+0xc2>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	4652      	mov	r2, sl
 800e7b2:	4631      	mov	r1, r6
 800e7b4:	4628      	mov	r0, r5
 800e7b6:	47b8      	blx	r7
 800e7b8:	3001      	adds	r0, #1
 800e7ba:	f43f ae52 	beq.w	800e462 <_printf_float+0xc2>
 800e7be:	f108 0801 	add.w	r8, r8, #1
 800e7c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7c4:	3b01      	subs	r3, #1
 800e7c6:	4543      	cmp	r3, r8
 800e7c8:	dcf1      	bgt.n	800e7ae <_printf_float+0x40e>
 800e7ca:	464b      	mov	r3, r9
 800e7cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e7d0:	e6dc      	b.n	800e58c <_printf_float+0x1ec>
 800e7d2:	f04f 0800 	mov.w	r8, #0
 800e7d6:	f104 0a1a 	add.w	sl, r4, #26
 800e7da:	e7f2      	b.n	800e7c2 <_printf_float+0x422>
 800e7dc:	2301      	movs	r3, #1
 800e7de:	4642      	mov	r2, r8
 800e7e0:	e7df      	b.n	800e7a2 <_printf_float+0x402>
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	464a      	mov	r2, r9
 800e7e6:	4631      	mov	r1, r6
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	47b8      	blx	r7
 800e7ec:	3001      	adds	r0, #1
 800e7ee:	f43f ae38 	beq.w	800e462 <_printf_float+0xc2>
 800e7f2:	f108 0801 	add.w	r8, r8, #1
 800e7f6:	68e3      	ldr	r3, [r4, #12]
 800e7f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7fa:	1a5b      	subs	r3, r3, r1
 800e7fc:	4543      	cmp	r3, r8
 800e7fe:	dcf0      	bgt.n	800e7e2 <_printf_float+0x442>
 800e800:	e6fa      	b.n	800e5f8 <_printf_float+0x258>
 800e802:	f04f 0800 	mov.w	r8, #0
 800e806:	f104 0919 	add.w	r9, r4, #25
 800e80a:	e7f4      	b.n	800e7f6 <_printf_float+0x456>

0800e80c <_printf_common>:
 800e80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e810:	4616      	mov	r6, r2
 800e812:	4699      	mov	r9, r3
 800e814:	688a      	ldr	r2, [r1, #8]
 800e816:	690b      	ldr	r3, [r1, #16]
 800e818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e81c:	4293      	cmp	r3, r2
 800e81e:	bfb8      	it	lt
 800e820:	4613      	movlt	r3, r2
 800e822:	6033      	str	r3, [r6, #0]
 800e824:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e828:	4607      	mov	r7, r0
 800e82a:	460c      	mov	r4, r1
 800e82c:	b10a      	cbz	r2, 800e832 <_printf_common+0x26>
 800e82e:	3301      	adds	r3, #1
 800e830:	6033      	str	r3, [r6, #0]
 800e832:	6823      	ldr	r3, [r4, #0]
 800e834:	0699      	lsls	r1, r3, #26
 800e836:	bf42      	ittt	mi
 800e838:	6833      	ldrmi	r3, [r6, #0]
 800e83a:	3302      	addmi	r3, #2
 800e83c:	6033      	strmi	r3, [r6, #0]
 800e83e:	6825      	ldr	r5, [r4, #0]
 800e840:	f015 0506 	ands.w	r5, r5, #6
 800e844:	d106      	bne.n	800e854 <_printf_common+0x48>
 800e846:	f104 0a19 	add.w	sl, r4, #25
 800e84a:	68e3      	ldr	r3, [r4, #12]
 800e84c:	6832      	ldr	r2, [r6, #0]
 800e84e:	1a9b      	subs	r3, r3, r2
 800e850:	42ab      	cmp	r3, r5
 800e852:	dc26      	bgt.n	800e8a2 <_printf_common+0x96>
 800e854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e858:	1e13      	subs	r3, r2, #0
 800e85a:	6822      	ldr	r2, [r4, #0]
 800e85c:	bf18      	it	ne
 800e85e:	2301      	movne	r3, #1
 800e860:	0692      	lsls	r2, r2, #26
 800e862:	d42b      	bmi.n	800e8bc <_printf_common+0xb0>
 800e864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e868:	4649      	mov	r1, r9
 800e86a:	4638      	mov	r0, r7
 800e86c:	47c0      	blx	r8
 800e86e:	3001      	adds	r0, #1
 800e870:	d01e      	beq.n	800e8b0 <_printf_common+0xa4>
 800e872:	6823      	ldr	r3, [r4, #0]
 800e874:	68e5      	ldr	r5, [r4, #12]
 800e876:	6832      	ldr	r2, [r6, #0]
 800e878:	f003 0306 	and.w	r3, r3, #6
 800e87c:	2b04      	cmp	r3, #4
 800e87e:	bf08      	it	eq
 800e880:	1aad      	subeq	r5, r5, r2
 800e882:	68a3      	ldr	r3, [r4, #8]
 800e884:	6922      	ldr	r2, [r4, #16]
 800e886:	bf0c      	ite	eq
 800e888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e88c:	2500      	movne	r5, #0
 800e88e:	4293      	cmp	r3, r2
 800e890:	bfc4      	itt	gt
 800e892:	1a9b      	subgt	r3, r3, r2
 800e894:	18ed      	addgt	r5, r5, r3
 800e896:	2600      	movs	r6, #0
 800e898:	341a      	adds	r4, #26
 800e89a:	42b5      	cmp	r5, r6
 800e89c:	d11a      	bne.n	800e8d4 <_printf_common+0xc8>
 800e89e:	2000      	movs	r0, #0
 800e8a0:	e008      	b.n	800e8b4 <_printf_common+0xa8>
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	4652      	mov	r2, sl
 800e8a6:	4649      	mov	r1, r9
 800e8a8:	4638      	mov	r0, r7
 800e8aa:	47c0      	blx	r8
 800e8ac:	3001      	adds	r0, #1
 800e8ae:	d103      	bne.n	800e8b8 <_printf_common+0xac>
 800e8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8b8:	3501      	adds	r5, #1
 800e8ba:	e7c6      	b.n	800e84a <_printf_common+0x3e>
 800e8bc:	18e1      	adds	r1, r4, r3
 800e8be:	1c5a      	adds	r2, r3, #1
 800e8c0:	2030      	movs	r0, #48	; 0x30
 800e8c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e8c6:	4422      	add	r2, r4
 800e8c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e8cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e8d0:	3302      	adds	r3, #2
 800e8d2:	e7c7      	b.n	800e864 <_printf_common+0x58>
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	4622      	mov	r2, r4
 800e8d8:	4649      	mov	r1, r9
 800e8da:	4638      	mov	r0, r7
 800e8dc:	47c0      	blx	r8
 800e8de:	3001      	adds	r0, #1
 800e8e0:	d0e6      	beq.n	800e8b0 <_printf_common+0xa4>
 800e8e2:	3601      	adds	r6, #1
 800e8e4:	e7d9      	b.n	800e89a <_printf_common+0x8e>
	...

0800e8e8 <_printf_i>:
 800e8e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8ec:	7e0f      	ldrb	r7, [r1, #24]
 800e8ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e8f0:	2f78      	cmp	r7, #120	; 0x78
 800e8f2:	4691      	mov	r9, r2
 800e8f4:	4680      	mov	r8, r0
 800e8f6:	460c      	mov	r4, r1
 800e8f8:	469a      	mov	sl, r3
 800e8fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e8fe:	d807      	bhi.n	800e910 <_printf_i+0x28>
 800e900:	2f62      	cmp	r7, #98	; 0x62
 800e902:	d80a      	bhi.n	800e91a <_printf_i+0x32>
 800e904:	2f00      	cmp	r7, #0
 800e906:	f000 80d8 	beq.w	800eaba <_printf_i+0x1d2>
 800e90a:	2f58      	cmp	r7, #88	; 0x58
 800e90c:	f000 80a3 	beq.w	800ea56 <_printf_i+0x16e>
 800e910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e918:	e03a      	b.n	800e990 <_printf_i+0xa8>
 800e91a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e91e:	2b15      	cmp	r3, #21
 800e920:	d8f6      	bhi.n	800e910 <_printf_i+0x28>
 800e922:	a101      	add	r1, pc, #4	; (adr r1, 800e928 <_printf_i+0x40>)
 800e924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e928:	0800e981 	.word	0x0800e981
 800e92c:	0800e995 	.word	0x0800e995
 800e930:	0800e911 	.word	0x0800e911
 800e934:	0800e911 	.word	0x0800e911
 800e938:	0800e911 	.word	0x0800e911
 800e93c:	0800e911 	.word	0x0800e911
 800e940:	0800e995 	.word	0x0800e995
 800e944:	0800e911 	.word	0x0800e911
 800e948:	0800e911 	.word	0x0800e911
 800e94c:	0800e911 	.word	0x0800e911
 800e950:	0800e911 	.word	0x0800e911
 800e954:	0800eaa1 	.word	0x0800eaa1
 800e958:	0800e9c5 	.word	0x0800e9c5
 800e95c:	0800ea83 	.word	0x0800ea83
 800e960:	0800e911 	.word	0x0800e911
 800e964:	0800e911 	.word	0x0800e911
 800e968:	0800eac3 	.word	0x0800eac3
 800e96c:	0800e911 	.word	0x0800e911
 800e970:	0800e9c5 	.word	0x0800e9c5
 800e974:	0800e911 	.word	0x0800e911
 800e978:	0800e911 	.word	0x0800e911
 800e97c:	0800ea8b 	.word	0x0800ea8b
 800e980:	682b      	ldr	r3, [r5, #0]
 800e982:	1d1a      	adds	r2, r3, #4
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	602a      	str	r2, [r5, #0]
 800e988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e98c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e990:	2301      	movs	r3, #1
 800e992:	e0a3      	b.n	800eadc <_printf_i+0x1f4>
 800e994:	6820      	ldr	r0, [r4, #0]
 800e996:	6829      	ldr	r1, [r5, #0]
 800e998:	0606      	lsls	r6, r0, #24
 800e99a:	f101 0304 	add.w	r3, r1, #4
 800e99e:	d50a      	bpl.n	800e9b6 <_printf_i+0xce>
 800e9a0:	680e      	ldr	r6, [r1, #0]
 800e9a2:	602b      	str	r3, [r5, #0]
 800e9a4:	2e00      	cmp	r6, #0
 800e9a6:	da03      	bge.n	800e9b0 <_printf_i+0xc8>
 800e9a8:	232d      	movs	r3, #45	; 0x2d
 800e9aa:	4276      	negs	r6, r6
 800e9ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9b0:	485e      	ldr	r0, [pc, #376]	; (800eb2c <_printf_i+0x244>)
 800e9b2:	230a      	movs	r3, #10
 800e9b4:	e019      	b.n	800e9ea <_printf_i+0x102>
 800e9b6:	680e      	ldr	r6, [r1, #0]
 800e9b8:	602b      	str	r3, [r5, #0]
 800e9ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e9be:	bf18      	it	ne
 800e9c0:	b236      	sxthne	r6, r6
 800e9c2:	e7ef      	b.n	800e9a4 <_printf_i+0xbc>
 800e9c4:	682b      	ldr	r3, [r5, #0]
 800e9c6:	6820      	ldr	r0, [r4, #0]
 800e9c8:	1d19      	adds	r1, r3, #4
 800e9ca:	6029      	str	r1, [r5, #0]
 800e9cc:	0601      	lsls	r1, r0, #24
 800e9ce:	d501      	bpl.n	800e9d4 <_printf_i+0xec>
 800e9d0:	681e      	ldr	r6, [r3, #0]
 800e9d2:	e002      	b.n	800e9da <_printf_i+0xf2>
 800e9d4:	0646      	lsls	r6, r0, #25
 800e9d6:	d5fb      	bpl.n	800e9d0 <_printf_i+0xe8>
 800e9d8:	881e      	ldrh	r6, [r3, #0]
 800e9da:	4854      	ldr	r0, [pc, #336]	; (800eb2c <_printf_i+0x244>)
 800e9dc:	2f6f      	cmp	r7, #111	; 0x6f
 800e9de:	bf0c      	ite	eq
 800e9e0:	2308      	moveq	r3, #8
 800e9e2:	230a      	movne	r3, #10
 800e9e4:	2100      	movs	r1, #0
 800e9e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e9ea:	6865      	ldr	r5, [r4, #4]
 800e9ec:	60a5      	str	r5, [r4, #8]
 800e9ee:	2d00      	cmp	r5, #0
 800e9f0:	bfa2      	ittt	ge
 800e9f2:	6821      	ldrge	r1, [r4, #0]
 800e9f4:	f021 0104 	bicge.w	r1, r1, #4
 800e9f8:	6021      	strge	r1, [r4, #0]
 800e9fa:	b90e      	cbnz	r6, 800ea00 <_printf_i+0x118>
 800e9fc:	2d00      	cmp	r5, #0
 800e9fe:	d04d      	beq.n	800ea9c <_printf_i+0x1b4>
 800ea00:	4615      	mov	r5, r2
 800ea02:	fbb6 f1f3 	udiv	r1, r6, r3
 800ea06:	fb03 6711 	mls	r7, r3, r1, r6
 800ea0a:	5dc7      	ldrb	r7, [r0, r7]
 800ea0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ea10:	4637      	mov	r7, r6
 800ea12:	42bb      	cmp	r3, r7
 800ea14:	460e      	mov	r6, r1
 800ea16:	d9f4      	bls.n	800ea02 <_printf_i+0x11a>
 800ea18:	2b08      	cmp	r3, #8
 800ea1a:	d10b      	bne.n	800ea34 <_printf_i+0x14c>
 800ea1c:	6823      	ldr	r3, [r4, #0]
 800ea1e:	07de      	lsls	r6, r3, #31
 800ea20:	d508      	bpl.n	800ea34 <_printf_i+0x14c>
 800ea22:	6923      	ldr	r3, [r4, #16]
 800ea24:	6861      	ldr	r1, [r4, #4]
 800ea26:	4299      	cmp	r1, r3
 800ea28:	bfde      	ittt	le
 800ea2a:	2330      	movle	r3, #48	; 0x30
 800ea2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ea30:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ea34:	1b52      	subs	r2, r2, r5
 800ea36:	6122      	str	r2, [r4, #16]
 800ea38:	f8cd a000 	str.w	sl, [sp]
 800ea3c:	464b      	mov	r3, r9
 800ea3e:	aa03      	add	r2, sp, #12
 800ea40:	4621      	mov	r1, r4
 800ea42:	4640      	mov	r0, r8
 800ea44:	f7ff fee2 	bl	800e80c <_printf_common>
 800ea48:	3001      	adds	r0, #1
 800ea4a:	d14c      	bne.n	800eae6 <_printf_i+0x1fe>
 800ea4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea50:	b004      	add	sp, #16
 800ea52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea56:	4835      	ldr	r0, [pc, #212]	; (800eb2c <_printf_i+0x244>)
 800ea58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ea5c:	6829      	ldr	r1, [r5, #0]
 800ea5e:	6823      	ldr	r3, [r4, #0]
 800ea60:	f851 6b04 	ldr.w	r6, [r1], #4
 800ea64:	6029      	str	r1, [r5, #0]
 800ea66:	061d      	lsls	r5, r3, #24
 800ea68:	d514      	bpl.n	800ea94 <_printf_i+0x1ac>
 800ea6a:	07df      	lsls	r7, r3, #31
 800ea6c:	bf44      	itt	mi
 800ea6e:	f043 0320 	orrmi.w	r3, r3, #32
 800ea72:	6023      	strmi	r3, [r4, #0]
 800ea74:	b91e      	cbnz	r6, 800ea7e <_printf_i+0x196>
 800ea76:	6823      	ldr	r3, [r4, #0]
 800ea78:	f023 0320 	bic.w	r3, r3, #32
 800ea7c:	6023      	str	r3, [r4, #0]
 800ea7e:	2310      	movs	r3, #16
 800ea80:	e7b0      	b.n	800e9e4 <_printf_i+0xfc>
 800ea82:	6823      	ldr	r3, [r4, #0]
 800ea84:	f043 0320 	orr.w	r3, r3, #32
 800ea88:	6023      	str	r3, [r4, #0]
 800ea8a:	2378      	movs	r3, #120	; 0x78
 800ea8c:	4828      	ldr	r0, [pc, #160]	; (800eb30 <_printf_i+0x248>)
 800ea8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ea92:	e7e3      	b.n	800ea5c <_printf_i+0x174>
 800ea94:	0659      	lsls	r1, r3, #25
 800ea96:	bf48      	it	mi
 800ea98:	b2b6      	uxthmi	r6, r6
 800ea9a:	e7e6      	b.n	800ea6a <_printf_i+0x182>
 800ea9c:	4615      	mov	r5, r2
 800ea9e:	e7bb      	b.n	800ea18 <_printf_i+0x130>
 800eaa0:	682b      	ldr	r3, [r5, #0]
 800eaa2:	6826      	ldr	r6, [r4, #0]
 800eaa4:	6961      	ldr	r1, [r4, #20]
 800eaa6:	1d18      	adds	r0, r3, #4
 800eaa8:	6028      	str	r0, [r5, #0]
 800eaaa:	0635      	lsls	r5, r6, #24
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	d501      	bpl.n	800eab4 <_printf_i+0x1cc>
 800eab0:	6019      	str	r1, [r3, #0]
 800eab2:	e002      	b.n	800eaba <_printf_i+0x1d2>
 800eab4:	0670      	lsls	r0, r6, #25
 800eab6:	d5fb      	bpl.n	800eab0 <_printf_i+0x1c8>
 800eab8:	8019      	strh	r1, [r3, #0]
 800eaba:	2300      	movs	r3, #0
 800eabc:	6123      	str	r3, [r4, #16]
 800eabe:	4615      	mov	r5, r2
 800eac0:	e7ba      	b.n	800ea38 <_printf_i+0x150>
 800eac2:	682b      	ldr	r3, [r5, #0]
 800eac4:	1d1a      	adds	r2, r3, #4
 800eac6:	602a      	str	r2, [r5, #0]
 800eac8:	681d      	ldr	r5, [r3, #0]
 800eaca:	6862      	ldr	r2, [r4, #4]
 800eacc:	2100      	movs	r1, #0
 800eace:	4628      	mov	r0, r5
 800ead0:	f7f1 fba6 	bl	8000220 <memchr>
 800ead4:	b108      	cbz	r0, 800eada <_printf_i+0x1f2>
 800ead6:	1b40      	subs	r0, r0, r5
 800ead8:	6060      	str	r0, [r4, #4]
 800eada:	6863      	ldr	r3, [r4, #4]
 800eadc:	6123      	str	r3, [r4, #16]
 800eade:	2300      	movs	r3, #0
 800eae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eae4:	e7a8      	b.n	800ea38 <_printf_i+0x150>
 800eae6:	6923      	ldr	r3, [r4, #16]
 800eae8:	462a      	mov	r2, r5
 800eaea:	4649      	mov	r1, r9
 800eaec:	4640      	mov	r0, r8
 800eaee:	47d0      	blx	sl
 800eaf0:	3001      	adds	r0, #1
 800eaf2:	d0ab      	beq.n	800ea4c <_printf_i+0x164>
 800eaf4:	6823      	ldr	r3, [r4, #0]
 800eaf6:	079b      	lsls	r3, r3, #30
 800eaf8:	d413      	bmi.n	800eb22 <_printf_i+0x23a>
 800eafa:	68e0      	ldr	r0, [r4, #12]
 800eafc:	9b03      	ldr	r3, [sp, #12]
 800eafe:	4298      	cmp	r0, r3
 800eb00:	bfb8      	it	lt
 800eb02:	4618      	movlt	r0, r3
 800eb04:	e7a4      	b.n	800ea50 <_printf_i+0x168>
 800eb06:	2301      	movs	r3, #1
 800eb08:	4632      	mov	r2, r6
 800eb0a:	4649      	mov	r1, r9
 800eb0c:	4640      	mov	r0, r8
 800eb0e:	47d0      	blx	sl
 800eb10:	3001      	adds	r0, #1
 800eb12:	d09b      	beq.n	800ea4c <_printf_i+0x164>
 800eb14:	3501      	adds	r5, #1
 800eb16:	68e3      	ldr	r3, [r4, #12]
 800eb18:	9903      	ldr	r1, [sp, #12]
 800eb1a:	1a5b      	subs	r3, r3, r1
 800eb1c:	42ab      	cmp	r3, r5
 800eb1e:	dcf2      	bgt.n	800eb06 <_printf_i+0x21e>
 800eb20:	e7eb      	b.n	800eafa <_printf_i+0x212>
 800eb22:	2500      	movs	r5, #0
 800eb24:	f104 0619 	add.w	r6, r4, #25
 800eb28:	e7f5      	b.n	800eb16 <_printf_i+0x22e>
 800eb2a:	bf00      	nop
 800eb2c:	08012dba 	.word	0x08012dba
 800eb30:	08012dcb 	.word	0x08012dcb

0800eb34 <_scanf_float>:
 800eb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb38:	b087      	sub	sp, #28
 800eb3a:	4617      	mov	r7, r2
 800eb3c:	9303      	str	r3, [sp, #12]
 800eb3e:	688b      	ldr	r3, [r1, #8]
 800eb40:	1e5a      	subs	r2, r3, #1
 800eb42:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800eb46:	bf83      	ittte	hi
 800eb48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800eb4c:	195b      	addhi	r3, r3, r5
 800eb4e:	9302      	strhi	r3, [sp, #8]
 800eb50:	2300      	movls	r3, #0
 800eb52:	bf86      	itte	hi
 800eb54:	f240 135d 	movwhi	r3, #349	; 0x15d
 800eb58:	608b      	strhi	r3, [r1, #8]
 800eb5a:	9302      	strls	r3, [sp, #8]
 800eb5c:	680b      	ldr	r3, [r1, #0]
 800eb5e:	468b      	mov	fp, r1
 800eb60:	2500      	movs	r5, #0
 800eb62:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800eb66:	f84b 3b1c 	str.w	r3, [fp], #28
 800eb6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800eb6e:	4680      	mov	r8, r0
 800eb70:	460c      	mov	r4, r1
 800eb72:	465e      	mov	r6, fp
 800eb74:	46aa      	mov	sl, r5
 800eb76:	46a9      	mov	r9, r5
 800eb78:	9501      	str	r5, [sp, #4]
 800eb7a:	68a2      	ldr	r2, [r4, #8]
 800eb7c:	b152      	cbz	r2, 800eb94 <_scanf_float+0x60>
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	2b4e      	cmp	r3, #78	; 0x4e
 800eb84:	d864      	bhi.n	800ec50 <_scanf_float+0x11c>
 800eb86:	2b40      	cmp	r3, #64	; 0x40
 800eb88:	d83c      	bhi.n	800ec04 <_scanf_float+0xd0>
 800eb8a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800eb8e:	b2c8      	uxtb	r0, r1
 800eb90:	280e      	cmp	r0, #14
 800eb92:	d93a      	bls.n	800ec0a <_scanf_float+0xd6>
 800eb94:	f1b9 0f00 	cmp.w	r9, #0
 800eb98:	d003      	beq.n	800eba2 <_scanf_float+0x6e>
 800eb9a:	6823      	ldr	r3, [r4, #0]
 800eb9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eba0:	6023      	str	r3, [r4, #0]
 800eba2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eba6:	f1ba 0f01 	cmp.w	sl, #1
 800ebaa:	f200 8113 	bhi.w	800edd4 <_scanf_float+0x2a0>
 800ebae:	455e      	cmp	r6, fp
 800ebb0:	f200 8105 	bhi.w	800edbe <_scanf_float+0x28a>
 800ebb4:	2501      	movs	r5, #1
 800ebb6:	4628      	mov	r0, r5
 800ebb8:	b007      	add	sp, #28
 800ebba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebbe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ebc2:	2a0d      	cmp	r2, #13
 800ebc4:	d8e6      	bhi.n	800eb94 <_scanf_float+0x60>
 800ebc6:	a101      	add	r1, pc, #4	; (adr r1, 800ebcc <_scanf_float+0x98>)
 800ebc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ebcc:	0800ed0b 	.word	0x0800ed0b
 800ebd0:	0800eb95 	.word	0x0800eb95
 800ebd4:	0800eb95 	.word	0x0800eb95
 800ebd8:	0800eb95 	.word	0x0800eb95
 800ebdc:	0800ed6b 	.word	0x0800ed6b
 800ebe0:	0800ed43 	.word	0x0800ed43
 800ebe4:	0800eb95 	.word	0x0800eb95
 800ebe8:	0800eb95 	.word	0x0800eb95
 800ebec:	0800ed19 	.word	0x0800ed19
 800ebf0:	0800eb95 	.word	0x0800eb95
 800ebf4:	0800eb95 	.word	0x0800eb95
 800ebf8:	0800eb95 	.word	0x0800eb95
 800ebfc:	0800eb95 	.word	0x0800eb95
 800ec00:	0800ecd1 	.word	0x0800ecd1
 800ec04:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ec08:	e7db      	b.n	800ebc2 <_scanf_float+0x8e>
 800ec0a:	290e      	cmp	r1, #14
 800ec0c:	d8c2      	bhi.n	800eb94 <_scanf_float+0x60>
 800ec0e:	a001      	add	r0, pc, #4	; (adr r0, 800ec14 <_scanf_float+0xe0>)
 800ec10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ec14:	0800ecc3 	.word	0x0800ecc3
 800ec18:	0800eb95 	.word	0x0800eb95
 800ec1c:	0800ecc3 	.word	0x0800ecc3
 800ec20:	0800ed57 	.word	0x0800ed57
 800ec24:	0800eb95 	.word	0x0800eb95
 800ec28:	0800ec71 	.word	0x0800ec71
 800ec2c:	0800ecad 	.word	0x0800ecad
 800ec30:	0800ecad 	.word	0x0800ecad
 800ec34:	0800ecad 	.word	0x0800ecad
 800ec38:	0800ecad 	.word	0x0800ecad
 800ec3c:	0800ecad 	.word	0x0800ecad
 800ec40:	0800ecad 	.word	0x0800ecad
 800ec44:	0800ecad 	.word	0x0800ecad
 800ec48:	0800ecad 	.word	0x0800ecad
 800ec4c:	0800ecad 	.word	0x0800ecad
 800ec50:	2b6e      	cmp	r3, #110	; 0x6e
 800ec52:	d809      	bhi.n	800ec68 <_scanf_float+0x134>
 800ec54:	2b60      	cmp	r3, #96	; 0x60
 800ec56:	d8b2      	bhi.n	800ebbe <_scanf_float+0x8a>
 800ec58:	2b54      	cmp	r3, #84	; 0x54
 800ec5a:	d077      	beq.n	800ed4c <_scanf_float+0x218>
 800ec5c:	2b59      	cmp	r3, #89	; 0x59
 800ec5e:	d199      	bne.n	800eb94 <_scanf_float+0x60>
 800ec60:	2d07      	cmp	r5, #7
 800ec62:	d197      	bne.n	800eb94 <_scanf_float+0x60>
 800ec64:	2508      	movs	r5, #8
 800ec66:	e029      	b.n	800ecbc <_scanf_float+0x188>
 800ec68:	2b74      	cmp	r3, #116	; 0x74
 800ec6a:	d06f      	beq.n	800ed4c <_scanf_float+0x218>
 800ec6c:	2b79      	cmp	r3, #121	; 0x79
 800ec6e:	e7f6      	b.n	800ec5e <_scanf_float+0x12a>
 800ec70:	6821      	ldr	r1, [r4, #0]
 800ec72:	05c8      	lsls	r0, r1, #23
 800ec74:	d51a      	bpl.n	800ecac <_scanf_float+0x178>
 800ec76:	9b02      	ldr	r3, [sp, #8]
 800ec78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ec7c:	6021      	str	r1, [r4, #0]
 800ec7e:	f109 0901 	add.w	r9, r9, #1
 800ec82:	b11b      	cbz	r3, 800ec8c <_scanf_float+0x158>
 800ec84:	3b01      	subs	r3, #1
 800ec86:	3201      	adds	r2, #1
 800ec88:	9302      	str	r3, [sp, #8]
 800ec8a:	60a2      	str	r2, [r4, #8]
 800ec8c:	68a3      	ldr	r3, [r4, #8]
 800ec8e:	3b01      	subs	r3, #1
 800ec90:	60a3      	str	r3, [r4, #8]
 800ec92:	6923      	ldr	r3, [r4, #16]
 800ec94:	3301      	adds	r3, #1
 800ec96:	6123      	str	r3, [r4, #16]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	3b01      	subs	r3, #1
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	607b      	str	r3, [r7, #4]
 800eca0:	f340 8084 	ble.w	800edac <_scanf_float+0x278>
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	3301      	adds	r3, #1
 800eca8:	603b      	str	r3, [r7, #0]
 800ecaa:	e766      	b.n	800eb7a <_scanf_float+0x46>
 800ecac:	eb1a 0f05 	cmn.w	sl, r5
 800ecb0:	f47f af70 	bne.w	800eb94 <_scanf_float+0x60>
 800ecb4:	6822      	ldr	r2, [r4, #0]
 800ecb6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ecba:	6022      	str	r2, [r4, #0]
 800ecbc:	f806 3b01 	strb.w	r3, [r6], #1
 800ecc0:	e7e4      	b.n	800ec8c <_scanf_float+0x158>
 800ecc2:	6822      	ldr	r2, [r4, #0]
 800ecc4:	0610      	lsls	r0, r2, #24
 800ecc6:	f57f af65 	bpl.w	800eb94 <_scanf_float+0x60>
 800ecca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ecce:	e7f4      	b.n	800ecba <_scanf_float+0x186>
 800ecd0:	f1ba 0f00 	cmp.w	sl, #0
 800ecd4:	d10e      	bne.n	800ecf4 <_scanf_float+0x1c0>
 800ecd6:	f1b9 0f00 	cmp.w	r9, #0
 800ecda:	d10e      	bne.n	800ecfa <_scanf_float+0x1c6>
 800ecdc:	6822      	ldr	r2, [r4, #0]
 800ecde:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ece2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ece6:	d108      	bne.n	800ecfa <_scanf_float+0x1c6>
 800ece8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ecec:	6022      	str	r2, [r4, #0]
 800ecee:	f04f 0a01 	mov.w	sl, #1
 800ecf2:	e7e3      	b.n	800ecbc <_scanf_float+0x188>
 800ecf4:	f1ba 0f02 	cmp.w	sl, #2
 800ecf8:	d055      	beq.n	800eda6 <_scanf_float+0x272>
 800ecfa:	2d01      	cmp	r5, #1
 800ecfc:	d002      	beq.n	800ed04 <_scanf_float+0x1d0>
 800ecfe:	2d04      	cmp	r5, #4
 800ed00:	f47f af48 	bne.w	800eb94 <_scanf_float+0x60>
 800ed04:	3501      	adds	r5, #1
 800ed06:	b2ed      	uxtb	r5, r5
 800ed08:	e7d8      	b.n	800ecbc <_scanf_float+0x188>
 800ed0a:	f1ba 0f01 	cmp.w	sl, #1
 800ed0e:	f47f af41 	bne.w	800eb94 <_scanf_float+0x60>
 800ed12:	f04f 0a02 	mov.w	sl, #2
 800ed16:	e7d1      	b.n	800ecbc <_scanf_float+0x188>
 800ed18:	b97d      	cbnz	r5, 800ed3a <_scanf_float+0x206>
 800ed1a:	f1b9 0f00 	cmp.w	r9, #0
 800ed1e:	f47f af3c 	bne.w	800eb9a <_scanf_float+0x66>
 800ed22:	6822      	ldr	r2, [r4, #0]
 800ed24:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ed28:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ed2c:	f47f af39 	bne.w	800eba2 <_scanf_float+0x6e>
 800ed30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ed34:	6022      	str	r2, [r4, #0]
 800ed36:	2501      	movs	r5, #1
 800ed38:	e7c0      	b.n	800ecbc <_scanf_float+0x188>
 800ed3a:	2d03      	cmp	r5, #3
 800ed3c:	d0e2      	beq.n	800ed04 <_scanf_float+0x1d0>
 800ed3e:	2d05      	cmp	r5, #5
 800ed40:	e7de      	b.n	800ed00 <_scanf_float+0x1cc>
 800ed42:	2d02      	cmp	r5, #2
 800ed44:	f47f af26 	bne.w	800eb94 <_scanf_float+0x60>
 800ed48:	2503      	movs	r5, #3
 800ed4a:	e7b7      	b.n	800ecbc <_scanf_float+0x188>
 800ed4c:	2d06      	cmp	r5, #6
 800ed4e:	f47f af21 	bne.w	800eb94 <_scanf_float+0x60>
 800ed52:	2507      	movs	r5, #7
 800ed54:	e7b2      	b.n	800ecbc <_scanf_float+0x188>
 800ed56:	6822      	ldr	r2, [r4, #0]
 800ed58:	0591      	lsls	r1, r2, #22
 800ed5a:	f57f af1b 	bpl.w	800eb94 <_scanf_float+0x60>
 800ed5e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ed62:	6022      	str	r2, [r4, #0]
 800ed64:	f8cd 9004 	str.w	r9, [sp, #4]
 800ed68:	e7a8      	b.n	800ecbc <_scanf_float+0x188>
 800ed6a:	6822      	ldr	r2, [r4, #0]
 800ed6c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ed70:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ed74:	d006      	beq.n	800ed84 <_scanf_float+0x250>
 800ed76:	0550      	lsls	r0, r2, #21
 800ed78:	f57f af0c 	bpl.w	800eb94 <_scanf_float+0x60>
 800ed7c:	f1b9 0f00 	cmp.w	r9, #0
 800ed80:	f43f af0f 	beq.w	800eba2 <_scanf_float+0x6e>
 800ed84:	0591      	lsls	r1, r2, #22
 800ed86:	bf58      	it	pl
 800ed88:	9901      	ldrpl	r1, [sp, #4]
 800ed8a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ed8e:	bf58      	it	pl
 800ed90:	eba9 0101 	subpl.w	r1, r9, r1
 800ed94:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ed98:	bf58      	it	pl
 800ed9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ed9e:	6022      	str	r2, [r4, #0]
 800eda0:	f04f 0900 	mov.w	r9, #0
 800eda4:	e78a      	b.n	800ecbc <_scanf_float+0x188>
 800eda6:	f04f 0a03 	mov.w	sl, #3
 800edaa:	e787      	b.n	800ecbc <_scanf_float+0x188>
 800edac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800edb0:	4639      	mov	r1, r7
 800edb2:	4640      	mov	r0, r8
 800edb4:	4798      	blx	r3
 800edb6:	2800      	cmp	r0, #0
 800edb8:	f43f aedf 	beq.w	800eb7a <_scanf_float+0x46>
 800edbc:	e6ea      	b.n	800eb94 <_scanf_float+0x60>
 800edbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800edc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800edc6:	463a      	mov	r2, r7
 800edc8:	4640      	mov	r0, r8
 800edca:	4798      	blx	r3
 800edcc:	6923      	ldr	r3, [r4, #16]
 800edce:	3b01      	subs	r3, #1
 800edd0:	6123      	str	r3, [r4, #16]
 800edd2:	e6ec      	b.n	800ebae <_scanf_float+0x7a>
 800edd4:	1e6b      	subs	r3, r5, #1
 800edd6:	2b06      	cmp	r3, #6
 800edd8:	d825      	bhi.n	800ee26 <_scanf_float+0x2f2>
 800edda:	2d02      	cmp	r5, #2
 800eddc:	d836      	bhi.n	800ee4c <_scanf_float+0x318>
 800edde:	455e      	cmp	r6, fp
 800ede0:	f67f aee8 	bls.w	800ebb4 <_scanf_float+0x80>
 800ede4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ede8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800edec:	463a      	mov	r2, r7
 800edee:	4640      	mov	r0, r8
 800edf0:	4798      	blx	r3
 800edf2:	6923      	ldr	r3, [r4, #16]
 800edf4:	3b01      	subs	r3, #1
 800edf6:	6123      	str	r3, [r4, #16]
 800edf8:	e7f1      	b.n	800edde <_scanf_float+0x2aa>
 800edfa:	9802      	ldr	r0, [sp, #8]
 800edfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee00:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ee04:	9002      	str	r0, [sp, #8]
 800ee06:	463a      	mov	r2, r7
 800ee08:	4640      	mov	r0, r8
 800ee0a:	4798      	blx	r3
 800ee0c:	6923      	ldr	r3, [r4, #16]
 800ee0e:	3b01      	subs	r3, #1
 800ee10:	6123      	str	r3, [r4, #16]
 800ee12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee16:	fa5f fa8a 	uxtb.w	sl, sl
 800ee1a:	f1ba 0f02 	cmp.w	sl, #2
 800ee1e:	d1ec      	bne.n	800edfa <_scanf_float+0x2c6>
 800ee20:	3d03      	subs	r5, #3
 800ee22:	b2ed      	uxtb	r5, r5
 800ee24:	1b76      	subs	r6, r6, r5
 800ee26:	6823      	ldr	r3, [r4, #0]
 800ee28:	05da      	lsls	r2, r3, #23
 800ee2a:	d52f      	bpl.n	800ee8c <_scanf_float+0x358>
 800ee2c:	055b      	lsls	r3, r3, #21
 800ee2e:	d510      	bpl.n	800ee52 <_scanf_float+0x31e>
 800ee30:	455e      	cmp	r6, fp
 800ee32:	f67f aebf 	bls.w	800ebb4 <_scanf_float+0x80>
 800ee36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ee3e:	463a      	mov	r2, r7
 800ee40:	4640      	mov	r0, r8
 800ee42:	4798      	blx	r3
 800ee44:	6923      	ldr	r3, [r4, #16]
 800ee46:	3b01      	subs	r3, #1
 800ee48:	6123      	str	r3, [r4, #16]
 800ee4a:	e7f1      	b.n	800ee30 <_scanf_float+0x2fc>
 800ee4c:	46aa      	mov	sl, r5
 800ee4e:	9602      	str	r6, [sp, #8]
 800ee50:	e7df      	b.n	800ee12 <_scanf_float+0x2de>
 800ee52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ee56:	6923      	ldr	r3, [r4, #16]
 800ee58:	2965      	cmp	r1, #101	; 0x65
 800ee5a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee5e:	f106 35ff 	add.w	r5, r6, #4294967295
 800ee62:	6123      	str	r3, [r4, #16]
 800ee64:	d00c      	beq.n	800ee80 <_scanf_float+0x34c>
 800ee66:	2945      	cmp	r1, #69	; 0x45
 800ee68:	d00a      	beq.n	800ee80 <_scanf_float+0x34c>
 800ee6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee6e:	463a      	mov	r2, r7
 800ee70:	4640      	mov	r0, r8
 800ee72:	4798      	blx	r3
 800ee74:	6923      	ldr	r3, [r4, #16]
 800ee76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	1eb5      	subs	r5, r6, #2
 800ee7e:	6123      	str	r3, [r4, #16]
 800ee80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee84:	463a      	mov	r2, r7
 800ee86:	4640      	mov	r0, r8
 800ee88:	4798      	blx	r3
 800ee8a:	462e      	mov	r6, r5
 800ee8c:	6825      	ldr	r5, [r4, #0]
 800ee8e:	f015 0510 	ands.w	r5, r5, #16
 800ee92:	d159      	bne.n	800ef48 <_scanf_float+0x414>
 800ee94:	7035      	strb	r5, [r6, #0]
 800ee96:	6823      	ldr	r3, [r4, #0]
 800ee98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ee9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eea0:	d11b      	bne.n	800eeda <_scanf_float+0x3a6>
 800eea2:	9b01      	ldr	r3, [sp, #4]
 800eea4:	454b      	cmp	r3, r9
 800eea6:	eba3 0209 	sub.w	r2, r3, r9
 800eeaa:	d123      	bne.n	800eef4 <_scanf_float+0x3c0>
 800eeac:	2200      	movs	r2, #0
 800eeae:	4659      	mov	r1, fp
 800eeb0:	4640      	mov	r0, r8
 800eeb2:	f000 fe9f 	bl	800fbf4 <_strtod_r>
 800eeb6:	6822      	ldr	r2, [r4, #0]
 800eeb8:	9b03      	ldr	r3, [sp, #12]
 800eeba:	f012 0f02 	tst.w	r2, #2
 800eebe:	ec57 6b10 	vmov	r6, r7, d0
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	d021      	beq.n	800ef0a <_scanf_float+0x3d6>
 800eec6:	9903      	ldr	r1, [sp, #12]
 800eec8:	1d1a      	adds	r2, r3, #4
 800eeca:	600a      	str	r2, [r1, #0]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	e9c3 6700 	strd	r6, r7, [r3]
 800eed2:	68e3      	ldr	r3, [r4, #12]
 800eed4:	3301      	adds	r3, #1
 800eed6:	60e3      	str	r3, [r4, #12]
 800eed8:	e66d      	b.n	800ebb6 <_scanf_float+0x82>
 800eeda:	9b04      	ldr	r3, [sp, #16]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d0e5      	beq.n	800eeac <_scanf_float+0x378>
 800eee0:	9905      	ldr	r1, [sp, #20]
 800eee2:	230a      	movs	r3, #10
 800eee4:	462a      	mov	r2, r5
 800eee6:	3101      	adds	r1, #1
 800eee8:	4640      	mov	r0, r8
 800eeea:	f000 ff0b 	bl	800fd04 <_strtol_r>
 800eeee:	9b04      	ldr	r3, [sp, #16]
 800eef0:	9e05      	ldr	r6, [sp, #20]
 800eef2:	1ac2      	subs	r2, r0, r3
 800eef4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800eef8:	429e      	cmp	r6, r3
 800eefa:	bf28      	it	cs
 800eefc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ef00:	4912      	ldr	r1, [pc, #72]	; (800ef4c <_scanf_float+0x418>)
 800ef02:	4630      	mov	r0, r6
 800ef04:	f000 f82c 	bl	800ef60 <siprintf>
 800ef08:	e7d0      	b.n	800eeac <_scanf_float+0x378>
 800ef0a:	9903      	ldr	r1, [sp, #12]
 800ef0c:	f012 0f04 	tst.w	r2, #4
 800ef10:	f103 0204 	add.w	r2, r3, #4
 800ef14:	600a      	str	r2, [r1, #0]
 800ef16:	d1d9      	bne.n	800eecc <_scanf_float+0x398>
 800ef18:	f8d3 8000 	ldr.w	r8, [r3]
 800ef1c:	ee10 2a10 	vmov	r2, s0
 800ef20:	ee10 0a10 	vmov	r0, s0
 800ef24:	463b      	mov	r3, r7
 800ef26:	4639      	mov	r1, r7
 800ef28:	f7f1 fe20 	bl	8000b6c <__aeabi_dcmpun>
 800ef2c:	b128      	cbz	r0, 800ef3a <_scanf_float+0x406>
 800ef2e:	4808      	ldr	r0, [pc, #32]	; (800ef50 <_scanf_float+0x41c>)
 800ef30:	f000 f810 	bl	800ef54 <nanf>
 800ef34:	ed88 0a00 	vstr	s0, [r8]
 800ef38:	e7cb      	b.n	800eed2 <_scanf_float+0x39e>
 800ef3a:	4630      	mov	r0, r6
 800ef3c:	4639      	mov	r1, r7
 800ef3e:	f7f1 fe73 	bl	8000c28 <__aeabi_d2f>
 800ef42:	f8c8 0000 	str.w	r0, [r8]
 800ef46:	e7c4      	b.n	800eed2 <_scanf_float+0x39e>
 800ef48:	2500      	movs	r5, #0
 800ef4a:	e634      	b.n	800ebb6 <_scanf_float+0x82>
 800ef4c:	08012ddc 	.word	0x08012ddc
 800ef50:	080131e8 	.word	0x080131e8

0800ef54 <nanf>:
 800ef54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ef5c <nanf+0x8>
 800ef58:	4770      	bx	lr
 800ef5a:	bf00      	nop
 800ef5c:	7fc00000 	.word	0x7fc00000

0800ef60 <siprintf>:
 800ef60:	b40e      	push	{r1, r2, r3}
 800ef62:	b500      	push	{lr}
 800ef64:	b09c      	sub	sp, #112	; 0x70
 800ef66:	ab1d      	add	r3, sp, #116	; 0x74
 800ef68:	9002      	str	r0, [sp, #8]
 800ef6a:	9006      	str	r0, [sp, #24]
 800ef6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ef70:	4809      	ldr	r0, [pc, #36]	; (800ef98 <siprintf+0x38>)
 800ef72:	9107      	str	r1, [sp, #28]
 800ef74:	9104      	str	r1, [sp, #16]
 800ef76:	4909      	ldr	r1, [pc, #36]	; (800ef9c <siprintf+0x3c>)
 800ef78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef7c:	9105      	str	r1, [sp, #20]
 800ef7e:	6800      	ldr	r0, [r0, #0]
 800ef80:	9301      	str	r3, [sp, #4]
 800ef82:	a902      	add	r1, sp, #8
 800ef84:	f002 fedc 	bl	8011d40 <_svfiprintf_r>
 800ef88:	9b02      	ldr	r3, [sp, #8]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	701a      	strb	r2, [r3, #0]
 800ef8e:	b01c      	add	sp, #112	; 0x70
 800ef90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef94:	b003      	add	sp, #12
 800ef96:	4770      	bx	lr
 800ef98:	200002c8 	.word	0x200002c8
 800ef9c:	ffff0208 	.word	0xffff0208

0800efa0 <strcpy>:
 800efa0:	4603      	mov	r3, r0
 800efa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efa6:	f803 2b01 	strb.w	r2, [r3], #1
 800efaa:	2a00      	cmp	r2, #0
 800efac:	d1f9      	bne.n	800efa2 <strcpy+0x2>
 800efae:	4770      	bx	lr

0800efb0 <sulp>:
 800efb0:	b570      	push	{r4, r5, r6, lr}
 800efb2:	4604      	mov	r4, r0
 800efb4:	460d      	mov	r5, r1
 800efb6:	ec45 4b10 	vmov	d0, r4, r5
 800efba:	4616      	mov	r6, r2
 800efbc:	f002 fc1e 	bl	80117fc <__ulp>
 800efc0:	ec51 0b10 	vmov	r0, r1, d0
 800efc4:	b17e      	cbz	r6, 800efe6 <sulp+0x36>
 800efc6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800efca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800efce:	2b00      	cmp	r3, #0
 800efd0:	dd09      	ble.n	800efe6 <sulp+0x36>
 800efd2:	051b      	lsls	r3, r3, #20
 800efd4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800efd8:	2400      	movs	r4, #0
 800efda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800efde:	4622      	mov	r2, r4
 800efe0:	462b      	mov	r3, r5
 800efe2:	f7f1 fb29 	bl	8000638 <__aeabi_dmul>
 800efe6:	bd70      	pop	{r4, r5, r6, pc}

0800efe8 <_strtod_l>:
 800efe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efec:	ed2d 8b02 	vpush	{d8}
 800eff0:	b09d      	sub	sp, #116	; 0x74
 800eff2:	461f      	mov	r7, r3
 800eff4:	2300      	movs	r3, #0
 800eff6:	9318      	str	r3, [sp, #96]	; 0x60
 800eff8:	4ba2      	ldr	r3, [pc, #648]	; (800f284 <_strtod_l+0x29c>)
 800effa:	9213      	str	r2, [sp, #76]	; 0x4c
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	9305      	str	r3, [sp, #20]
 800f000:	4604      	mov	r4, r0
 800f002:	4618      	mov	r0, r3
 800f004:	4688      	mov	r8, r1
 800f006:	f7f1 f903 	bl	8000210 <strlen>
 800f00a:	f04f 0a00 	mov.w	sl, #0
 800f00e:	4605      	mov	r5, r0
 800f010:	f04f 0b00 	mov.w	fp, #0
 800f014:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f018:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f01a:	781a      	ldrb	r2, [r3, #0]
 800f01c:	2a2b      	cmp	r2, #43	; 0x2b
 800f01e:	d04e      	beq.n	800f0be <_strtod_l+0xd6>
 800f020:	d83b      	bhi.n	800f09a <_strtod_l+0xb2>
 800f022:	2a0d      	cmp	r2, #13
 800f024:	d834      	bhi.n	800f090 <_strtod_l+0xa8>
 800f026:	2a08      	cmp	r2, #8
 800f028:	d834      	bhi.n	800f094 <_strtod_l+0xac>
 800f02a:	2a00      	cmp	r2, #0
 800f02c:	d03e      	beq.n	800f0ac <_strtod_l+0xc4>
 800f02e:	2300      	movs	r3, #0
 800f030:	930a      	str	r3, [sp, #40]	; 0x28
 800f032:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f034:	7833      	ldrb	r3, [r6, #0]
 800f036:	2b30      	cmp	r3, #48	; 0x30
 800f038:	f040 80b0 	bne.w	800f19c <_strtod_l+0x1b4>
 800f03c:	7873      	ldrb	r3, [r6, #1]
 800f03e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f042:	2b58      	cmp	r3, #88	; 0x58
 800f044:	d168      	bne.n	800f118 <_strtod_l+0x130>
 800f046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f048:	9301      	str	r3, [sp, #4]
 800f04a:	ab18      	add	r3, sp, #96	; 0x60
 800f04c:	9702      	str	r7, [sp, #8]
 800f04e:	9300      	str	r3, [sp, #0]
 800f050:	4a8d      	ldr	r2, [pc, #564]	; (800f288 <_strtod_l+0x2a0>)
 800f052:	ab19      	add	r3, sp, #100	; 0x64
 800f054:	a917      	add	r1, sp, #92	; 0x5c
 800f056:	4620      	mov	r0, r4
 800f058:	f001 fd38 	bl	8010acc <__gethex>
 800f05c:	f010 0707 	ands.w	r7, r0, #7
 800f060:	4605      	mov	r5, r0
 800f062:	d005      	beq.n	800f070 <_strtod_l+0x88>
 800f064:	2f06      	cmp	r7, #6
 800f066:	d12c      	bne.n	800f0c2 <_strtod_l+0xda>
 800f068:	3601      	adds	r6, #1
 800f06a:	2300      	movs	r3, #0
 800f06c:	9617      	str	r6, [sp, #92]	; 0x5c
 800f06e:	930a      	str	r3, [sp, #40]	; 0x28
 800f070:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f072:	2b00      	cmp	r3, #0
 800f074:	f040 8590 	bne.w	800fb98 <_strtod_l+0xbb0>
 800f078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f07a:	b1eb      	cbz	r3, 800f0b8 <_strtod_l+0xd0>
 800f07c:	4652      	mov	r2, sl
 800f07e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f082:	ec43 2b10 	vmov	d0, r2, r3
 800f086:	b01d      	add	sp, #116	; 0x74
 800f088:	ecbd 8b02 	vpop	{d8}
 800f08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f090:	2a20      	cmp	r2, #32
 800f092:	d1cc      	bne.n	800f02e <_strtod_l+0x46>
 800f094:	3301      	adds	r3, #1
 800f096:	9317      	str	r3, [sp, #92]	; 0x5c
 800f098:	e7be      	b.n	800f018 <_strtod_l+0x30>
 800f09a:	2a2d      	cmp	r2, #45	; 0x2d
 800f09c:	d1c7      	bne.n	800f02e <_strtod_l+0x46>
 800f09e:	2201      	movs	r2, #1
 800f0a0:	920a      	str	r2, [sp, #40]	; 0x28
 800f0a2:	1c5a      	adds	r2, r3, #1
 800f0a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f0a6:	785b      	ldrb	r3, [r3, #1]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d1c2      	bne.n	800f032 <_strtod_l+0x4a>
 800f0ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f0ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	f040 856e 	bne.w	800fb94 <_strtod_l+0xbac>
 800f0b8:	4652      	mov	r2, sl
 800f0ba:	465b      	mov	r3, fp
 800f0bc:	e7e1      	b.n	800f082 <_strtod_l+0x9a>
 800f0be:	2200      	movs	r2, #0
 800f0c0:	e7ee      	b.n	800f0a0 <_strtod_l+0xb8>
 800f0c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f0c4:	b13a      	cbz	r2, 800f0d6 <_strtod_l+0xee>
 800f0c6:	2135      	movs	r1, #53	; 0x35
 800f0c8:	a81a      	add	r0, sp, #104	; 0x68
 800f0ca:	f002 fca2 	bl	8011a12 <__copybits>
 800f0ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	f002 f861 	bl	8011198 <_Bfree>
 800f0d6:	3f01      	subs	r7, #1
 800f0d8:	2f04      	cmp	r7, #4
 800f0da:	d806      	bhi.n	800f0ea <_strtod_l+0x102>
 800f0dc:	e8df f007 	tbb	[pc, r7]
 800f0e0:	1714030a 	.word	0x1714030a
 800f0e4:	0a          	.byte	0x0a
 800f0e5:	00          	.byte	0x00
 800f0e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f0ea:	0728      	lsls	r0, r5, #28
 800f0ec:	d5c0      	bpl.n	800f070 <_strtod_l+0x88>
 800f0ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f0f2:	e7bd      	b.n	800f070 <_strtod_l+0x88>
 800f0f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f0f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f0fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f0fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f102:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f106:	e7f0      	b.n	800f0ea <_strtod_l+0x102>
 800f108:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f28c <_strtod_l+0x2a4>
 800f10c:	e7ed      	b.n	800f0ea <_strtod_l+0x102>
 800f10e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f112:	f04f 3aff 	mov.w	sl, #4294967295
 800f116:	e7e8      	b.n	800f0ea <_strtod_l+0x102>
 800f118:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f11a:	1c5a      	adds	r2, r3, #1
 800f11c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f11e:	785b      	ldrb	r3, [r3, #1]
 800f120:	2b30      	cmp	r3, #48	; 0x30
 800f122:	d0f9      	beq.n	800f118 <_strtod_l+0x130>
 800f124:	2b00      	cmp	r3, #0
 800f126:	d0a3      	beq.n	800f070 <_strtod_l+0x88>
 800f128:	2301      	movs	r3, #1
 800f12a:	f04f 0900 	mov.w	r9, #0
 800f12e:	9304      	str	r3, [sp, #16]
 800f130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f132:	9308      	str	r3, [sp, #32]
 800f134:	f8cd 901c 	str.w	r9, [sp, #28]
 800f138:	464f      	mov	r7, r9
 800f13a:	220a      	movs	r2, #10
 800f13c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f13e:	7806      	ldrb	r6, [r0, #0]
 800f140:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f144:	b2d9      	uxtb	r1, r3
 800f146:	2909      	cmp	r1, #9
 800f148:	d92a      	bls.n	800f1a0 <_strtod_l+0x1b8>
 800f14a:	9905      	ldr	r1, [sp, #20]
 800f14c:	462a      	mov	r2, r5
 800f14e:	f002 ff0f 	bl	8011f70 <strncmp>
 800f152:	b398      	cbz	r0, 800f1bc <_strtod_l+0x1d4>
 800f154:	2000      	movs	r0, #0
 800f156:	4632      	mov	r2, r6
 800f158:	463d      	mov	r5, r7
 800f15a:	9005      	str	r0, [sp, #20]
 800f15c:	4603      	mov	r3, r0
 800f15e:	2a65      	cmp	r2, #101	; 0x65
 800f160:	d001      	beq.n	800f166 <_strtod_l+0x17e>
 800f162:	2a45      	cmp	r2, #69	; 0x45
 800f164:	d118      	bne.n	800f198 <_strtod_l+0x1b0>
 800f166:	b91d      	cbnz	r5, 800f170 <_strtod_l+0x188>
 800f168:	9a04      	ldr	r2, [sp, #16]
 800f16a:	4302      	orrs	r2, r0
 800f16c:	d09e      	beq.n	800f0ac <_strtod_l+0xc4>
 800f16e:	2500      	movs	r5, #0
 800f170:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f174:	f108 0201 	add.w	r2, r8, #1
 800f178:	9217      	str	r2, [sp, #92]	; 0x5c
 800f17a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f17e:	2a2b      	cmp	r2, #43	; 0x2b
 800f180:	d075      	beq.n	800f26e <_strtod_l+0x286>
 800f182:	2a2d      	cmp	r2, #45	; 0x2d
 800f184:	d07b      	beq.n	800f27e <_strtod_l+0x296>
 800f186:	f04f 0c00 	mov.w	ip, #0
 800f18a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f18e:	2909      	cmp	r1, #9
 800f190:	f240 8082 	bls.w	800f298 <_strtod_l+0x2b0>
 800f194:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f198:	2600      	movs	r6, #0
 800f19a:	e09d      	b.n	800f2d8 <_strtod_l+0x2f0>
 800f19c:	2300      	movs	r3, #0
 800f19e:	e7c4      	b.n	800f12a <_strtod_l+0x142>
 800f1a0:	2f08      	cmp	r7, #8
 800f1a2:	bfd8      	it	le
 800f1a4:	9907      	ldrle	r1, [sp, #28]
 800f1a6:	f100 0001 	add.w	r0, r0, #1
 800f1aa:	bfda      	itte	le
 800f1ac:	fb02 3301 	mlale	r3, r2, r1, r3
 800f1b0:	9307      	strle	r3, [sp, #28]
 800f1b2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f1b6:	3701      	adds	r7, #1
 800f1b8:	9017      	str	r0, [sp, #92]	; 0x5c
 800f1ba:	e7bf      	b.n	800f13c <_strtod_l+0x154>
 800f1bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f1be:	195a      	adds	r2, r3, r5
 800f1c0:	9217      	str	r2, [sp, #92]	; 0x5c
 800f1c2:	5d5a      	ldrb	r2, [r3, r5]
 800f1c4:	2f00      	cmp	r7, #0
 800f1c6:	d037      	beq.n	800f238 <_strtod_l+0x250>
 800f1c8:	9005      	str	r0, [sp, #20]
 800f1ca:	463d      	mov	r5, r7
 800f1cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f1d0:	2b09      	cmp	r3, #9
 800f1d2:	d912      	bls.n	800f1fa <_strtod_l+0x212>
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	e7c2      	b.n	800f15e <_strtod_l+0x176>
 800f1d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f1da:	1c5a      	adds	r2, r3, #1
 800f1dc:	9217      	str	r2, [sp, #92]	; 0x5c
 800f1de:	785a      	ldrb	r2, [r3, #1]
 800f1e0:	3001      	adds	r0, #1
 800f1e2:	2a30      	cmp	r2, #48	; 0x30
 800f1e4:	d0f8      	beq.n	800f1d8 <_strtod_l+0x1f0>
 800f1e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f1ea:	2b08      	cmp	r3, #8
 800f1ec:	f200 84d9 	bhi.w	800fba2 <_strtod_l+0xbba>
 800f1f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f1f2:	9005      	str	r0, [sp, #20]
 800f1f4:	2000      	movs	r0, #0
 800f1f6:	9308      	str	r3, [sp, #32]
 800f1f8:	4605      	mov	r5, r0
 800f1fa:	3a30      	subs	r2, #48	; 0x30
 800f1fc:	f100 0301 	add.w	r3, r0, #1
 800f200:	d014      	beq.n	800f22c <_strtod_l+0x244>
 800f202:	9905      	ldr	r1, [sp, #20]
 800f204:	4419      	add	r1, r3
 800f206:	9105      	str	r1, [sp, #20]
 800f208:	462b      	mov	r3, r5
 800f20a:	eb00 0e05 	add.w	lr, r0, r5
 800f20e:	210a      	movs	r1, #10
 800f210:	4573      	cmp	r3, lr
 800f212:	d113      	bne.n	800f23c <_strtod_l+0x254>
 800f214:	182b      	adds	r3, r5, r0
 800f216:	2b08      	cmp	r3, #8
 800f218:	f105 0501 	add.w	r5, r5, #1
 800f21c:	4405      	add	r5, r0
 800f21e:	dc1c      	bgt.n	800f25a <_strtod_l+0x272>
 800f220:	9907      	ldr	r1, [sp, #28]
 800f222:	230a      	movs	r3, #10
 800f224:	fb03 2301 	mla	r3, r3, r1, r2
 800f228:	9307      	str	r3, [sp, #28]
 800f22a:	2300      	movs	r3, #0
 800f22c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f22e:	1c51      	adds	r1, r2, #1
 800f230:	9117      	str	r1, [sp, #92]	; 0x5c
 800f232:	7852      	ldrb	r2, [r2, #1]
 800f234:	4618      	mov	r0, r3
 800f236:	e7c9      	b.n	800f1cc <_strtod_l+0x1e4>
 800f238:	4638      	mov	r0, r7
 800f23a:	e7d2      	b.n	800f1e2 <_strtod_l+0x1fa>
 800f23c:	2b08      	cmp	r3, #8
 800f23e:	dc04      	bgt.n	800f24a <_strtod_l+0x262>
 800f240:	9e07      	ldr	r6, [sp, #28]
 800f242:	434e      	muls	r6, r1
 800f244:	9607      	str	r6, [sp, #28]
 800f246:	3301      	adds	r3, #1
 800f248:	e7e2      	b.n	800f210 <_strtod_l+0x228>
 800f24a:	f103 0c01 	add.w	ip, r3, #1
 800f24e:	f1bc 0f10 	cmp.w	ip, #16
 800f252:	bfd8      	it	le
 800f254:	fb01 f909 	mulle.w	r9, r1, r9
 800f258:	e7f5      	b.n	800f246 <_strtod_l+0x25e>
 800f25a:	2d10      	cmp	r5, #16
 800f25c:	bfdc      	itt	le
 800f25e:	230a      	movle	r3, #10
 800f260:	fb03 2909 	mlale	r9, r3, r9, r2
 800f264:	e7e1      	b.n	800f22a <_strtod_l+0x242>
 800f266:	2300      	movs	r3, #0
 800f268:	9305      	str	r3, [sp, #20]
 800f26a:	2301      	movs	r3, #1
 800f26c:	e77c      	b.n	800f168 <_strtod_l+0x180>
 800f26e:	f04f 0c00 	mov.w	ip, #0
 800f272:	f108 0202 	add.w	r2, r8, #2
 800f276:	9217      	str	r2, [sp, #92]	; 0x5c
 800f278:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f27c:	e785      	b.n	800f18a <_strtod_l+0x1a2>
 800f27e:	f04f 0c01 	mov.w	ip, #1
 800f282:	e7f6      	b.n	800f272 <_strtod_l+0x28a>
 800f284:	08013030 	.word	0x08013030
 800f288:	08012de4 	.word	0x08012de4
 800f28c:	7ff00000 	.word	0x7ff00000
 800f290:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f292:	1c51      	adds	r1, r2, #1
 800f294:	9117      	str	r1, [sp, #92]	; 0x5c
 800f296:	7852      	ldrb	r2, [r2, #1]
 800f298:	2a30      	cmp	r2, #48	; 0x30
 800f29a:	d0f9      	beq.n	800f290 <_strtod_l+0x2a8>
 800f29c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f2a0:	2908      	cmp	r1, #8
 800f2a2:	f63f af79 	bhi.w	800f198 <_strtod_l+0x1b0>
 800f2a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f2aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f2ac:	9206      	str	r2, [sp, #24]
 800f2ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f2b0:	1c51      	adds	r1, r2, #1
 800f2b2:	9117      	str	r1, [sp, #92]	; 0x5c
 800f2b4:	7852      	ldrb	r2, [r2, #1]
 800f2b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f2ba:	2e09      	cmp	r6, #9
 800f2bc:	d937      	bls.n	800f32e <_strtod_l+0x346>
 800f2be:	9e06      	ldr	r6, [sp, #24]
 800f2c0:	1b89      	subs	r1, r1, r6
 800f2c2:	2908      	cmp	r1, #8
 800f2c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f2c8:	dc02      	bgt.n	800f2d0 <_strtod_l+0x2e8>
 800f2ca:	4576      	cmp	r6, lr
 800f2cc:	bfa8      	it	ge
 800f2ce:	4676      	movge	r6, lr
 800f2d0:	f1bc 0f00 	cmp.w	ip, #0
 800f2d4:	d000      	beq.n	800f2d8 <_strtod_l+0x2f0>
 800f2d6:	4276      	negs	r6, r6
 800f2d8:	2d00      	cmp	r5, #0
 800f2da:	d14d      	bne.n	800f378 <_strtod_l+0x390>
 800f2dc:	9904      	ldr	r1, [sp, #16]
 800f2de:	4301      	orrs	r1, r0
 800f2e0:	f47f aec6 	bne.w	800f070 <_strtod_l+0x88>
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	f47f aee1 	bne.w	800f0ac <_strtod_l+0xc4>
 800f2ea:	2a69      	cmp	r2, #105	; 0x69
 800f2ec:	d027      	beq.n	800f33e <_strtod_l+0x356>
 800f2ee:	dc24      	bgt.n	800f33a <_strtod_l+0x352>
 800f2f0:	2a49      	cmp	r2, #73	; 0x49
 800f2f2:	d024      	beq.n	800f33e <_strtod_l+0x356>
 800f2f4:	2a4e      	cmp	r2, #78	; 0x4e
 800f2f6:	f47f aed9 	bne.w	800f0ac <_strtod_l+0xc4>
 800f2fa:	499f      	ldr	r1, [pc, #636]	; (800f578 <_strtod_l+0x590>)
 800f2fc:	a817      	add	r0, sp, #92	; 0x5c
 800f2fe:	f001 fe3d 	bl	8010f7c <__match>
 800f302:	2800      	cmp	r0, #0
 800f304:	f43f aed2 	beq.w	800f0ac <_strtod_l+0xc4>
 800f308:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	2b28      	cmp	r3, #40	; 0x28
 800f30e:	d12d      	bne.n	800f36c <_strtod_l+0x384>
 800f310:	499a      	ldr	r1, [pc, #616]	; (800f57c <_strtod_l+0x594>)
 800f312:	aa1a      	add	r2, sp, #104	; 0x68
 800f314:	a817      	add	r0, sp, #92	; 0x5c
 800f316:	f001 fe45 	bl	8010fa4 <__hexnan>
 800f31a:	2805      	cmp	r0, #5
 800f31c:	d126      	bne.n	800f36c <_strtod_l+0x384>
 800f31e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f320:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f324:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f328:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f32c:	e6a0      	b.n	800f070 <_strtod_l+0x88>
 800f32e:	210a      	movs	r1, #10
 800f330:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f334:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f338:	e7b9      	b.n	800f2ae <_strtod_l+0x2c6>
 800f33a:	2a6e      	cmp	r2, #110	; 0x6e
 800f33c:	e7db      	b.n	800f2f6 <_strtod_l+0x30e>
 800f33e:	4990      	ldr	r1, [pc, #576]	; (800f580 <_strtod_l+0x598>)
 800f340:	a817      	add	r0, sp, #92	; 0x5c
 800f342:	f001 fe1b 	bl	8010f7c <__match>
 800f346:	2800      	cmp	r0, #0
 800f348:	f43f aeb0 	beq.w	800f0ac <_strtod_l+0xc4>
 800f34c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f34e:	498d      	ldr	r1, [pc, #564]	; (800f584 <_strtod_l+0x59c>)
 800f350:	3b01      	subs	r3, #1
 800f352:	a817      	add	r0, sp, #92	; 0x5c
 800f354:	9317      	str	r3, [sp, #92]	; 0x5c
 800f356:	f001 fe11 	bl	8010f7c <__match>
 800f35a:	b910      	cbnz	r0, 800f362 <_strtod_l+0x37a>
 800f35c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f35e:	3301      	adds	r3, #1
 800f360:	9317      	str	r3, [sp, #92]	; 0x5c
 800f362:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f594 <_strtod_l+0x5ac>
 800f366:	f04f 0a00 	mov.w	sl, #0
 800f36a:	e681      	b.n	800f070 <_strtod_l+0x88>
 800f36c:	4886      	ldr	r0, [pc, #536]	; (800f588 <_strtod_l+0x5a0>)
 800f36e:	f002 fde7 	bl	8011f40 <nan>
 800f372:	ec5b ab10 	vmov	sl, fp, d0
 800f376:	e67b      	b.n	800f070 <_strtod_l+0x88>
 800f378:	9b05      	ldr	r3, [sp, #20]
 800f37a:	9807      	ldr	r0, [sp, #28]
 800f37c:	1af3      	subs	r3, r6, r3
 800f37e:	2f00      	cmp	r7, #0
 800f380:	bf08      	it	eq
 800f382:	462f      	moveq	r7, r5
 800f384:	2d10      	cmp	r5, #16
 800f386:	9306      	str	r3, [sp, #24]
 800f388:	46a8      	mov	r8, r5
 800f38a:	bfa8      	it	ge
 800f38c:	f04f 0810 	movge.w	r8, #16
 800f390:	f7f1 f8d8 	bl	8000544 <__aeabi_ui2d>
 800f394:	2d09      	cmp	r5, #9
 800f396:	4682      	mov	sl, r0
 800f398:	468b      	mov	fp, r1
 800f39a:	dd13      	ble.n	800f3c4 <_strtod_l+0x3dc>
 800f39c:	4b7b      	ldr	r3, [pc, #492]	; (800f58c <_strtod_l+0x5a4>)
 800f39e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f3a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f3a6:	f7f1 f947 	bl	8000638 <__aeabi_dmul>
 800f3aa:	4682      	mov	sl, r0
 800f3ac:	4648      	mov	r0, r9
 800f3ae:	468b      	mov	fp, r1
 800f3b0:	f7f1 f8c8 	bl	8000544 <__aeabi_ui2d>
 800f3b4:	4602      	mov	r2, r0
 800f3b6:	460b      	mov	r3, r1
 800f3b8:	4650      	mov	r0, sl
 800f3ba:	4659      	mov	r1, fp
 800f3bc:	f7f0 ff86 	bl	80002cc <__adddf3>
 800f3c0:	4682      	mov	sl, r0
 800f3c2:	468b      	mov	fp, r1
 800f3c4:	2d0f      	cmp	r5, #15
 800f3c6:	dc38      	bgt.n	800f43a <_strtod_l+0x452>
 800f3c8:	9b06      	ldr	r3, [sp, #24]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	f43f ae50 	beq.w	800f070 <_strtod_l+0x88>
 800f3d0:	dd24      	ble.n	800f41c <_strtod_l+0x434>
 800f3d2:	2b16      	cmp	r3, #22
 800f3d4:	dc0b      	bgt.n	800f3ee <_strtod_l+0x406>
 800f3d6:	496d      	ldr	r1, [pc, #436]	; (800f58c <_strtod_l+0x5a4>)
 800f3d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f3dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3e0:	4652      	mov	r2, sl
 800f3e2:	465b      	mov	r3, fp
 800f3e4:	f7f1 f928 	bl	8000638 <__aeabi_dmul>
 800f3e8:	4682      	mov	sl, r0
 800f3ea:	468b      	mov	fp, r1
 800f3ec:	e640      	b.n	800f070 <_strtod_l+0x88>
 800f3ee:	9a06      	ldr	r2, [sp, #24]
 800f3f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	db20      	blt.n	800f43a <_strtod_l+0x452>
 800f3f8:	4c64      	ldr	r4, [pc, #400]	; (800f58c <_strtod_l+0x5a4>)
 800f3fa:	f1c5 050f 	rsb	r5, r5, #15
 800f3fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f402:	4652      	mov	r2, sl
 800f404:	465b      	mov	r3, fp
 800f406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f40a:	f7f1 f915 	bl	8000638 <__aeabi_dmul>
 800f40e:	9b06      	ldr	r3, [sp, #24]
 800f410:	1b5d      	subs	r5, r3, r5
 800f412:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f416:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f41a:	e7e3      	b.n	800f3e4 <_strtod_l+0x3fc>
 800f41c:	9b06      	ldr	r3, [sp, #24]
 800f41e:	3316      	adds	r3, #22
 800f420:	db0b      	blt.n	800f43a <_strtod_l+0x452>
 800f422:	9b05      	ldr	r3, [sp, #20]
 800f424:	1b9e      	subs	r6, r3, r6
 800f426:	4b59      	ldr	r3, [pc, #356]	; (800f58c <_strtod_l+0x5a4>)
 800f428:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f42c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f430:	4650      	mov	r0, sl
 800f432:	4659      	mov	r1, fp
 800f434:	f7f1 fa2a 	bl	800088c <__aeabi_ddiv>
 800f438:	e7d6      	b.n	800f3e8 <_strtod_l+0x400>
 800f43a:	9b06      	ldr	r3, [sp, #24]
 800f43c:	eba5 0808 	sub.w	r8, r5, r8
 800f440:	4498      	add	r8, r3
 800f442:	f1b8 0f00 	cmp.w	r8, #0
 800f446:	dd74      	ble.n	800f532 <_strtod_l+0x54a>
 800f448:	f018 030f 	ands.w	r3, r8, #15
 800f44c:	d00a      	beq.n	800f464 <_strtod_l+0x47c>
 800f44e:	494f      	ldr	r1, [pc, #316]	; (800f58c <_strtod_l+0x5a4>)
 800f450:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f454:	4652      	mov	r2, sl
 800f456:	465b      	mov	r3, fp
 800f458:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f45c:	f7f1 f8ec 	bl	8000638 <__aeabi_dmul>
 800f460:	4682      	mov	sl, r0
 800f462:	468b      	mov	fp, r1
 800f464:	f038 080f 	bics.w	r8, r8, #15
 800f468:	d04f      	beq.n	800f50a <_strtod_l+0x522>
 800f46a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f46e:	dd22      	ble.n	800f4b6 <_strtod_l+0x4ce>
 800f470:	2500      	movs	r5, #0
 800f472:	462e      	mov	r6, r5
 800f474:	9507      	str	r5, [sp, #28]
 800f476:	9505      	str	r5, [sp, #20]
 800f478:	2322      	movs	r3, #34	; 0x22
 800f47a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f594 <_strtod_l+0x5ac>
 800f47e:	6023      	str	r3, [r4, #0]
 800f480:	f04f 0a00 	mov.w	sl, #0
 800f484:	9b07      	ldr	r3, [sp, #28]
 800f486:	2b00      	cmp	r3, #0
 800f488:	f43f adf2 	beq.w	800f070 <_strtod_l+0x88>
 800f48c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f48e:	4620      	mov	r0, r4
 800f490:	f001 fe82 	bl	8011198 <_Bfree>
 800f494:	9905      	ldr	r1, [sp, #20]
 800f496:	4620      	mov	r0, r4
 800f498:	f001 fe7e 	bl	8011198 <_Bfree>
 800f49c:	4631      	mov	r1, r6
 800f49e:	4620      	mov	r0, r4
 800f4a0:	f001 fe7a 	bl	8011198 <_Bfree>
 800f4a4:	9907      	ldr	r1, [sp, #28]
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	f001 fe76 	bl	8011198 <_Bfree>
 800f4ac:	4629      	mov	r1, r5
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	f001 fe72 	bl	8011198 <_Bfree>
 800f4b4:	e5dc      	b.n	800f070 <_strtod_l+0x88>
 800f4b6:	4b36      	ldr	r3, [pc, #216]	; (800f590 <_strtod_l+0x5a8>)
 800f4b8:	9304      	str	r3, [sp, #16]
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f4c0:	4650      	mov	r0, sl
 800f4c2:	4659      	mov	r1, fp
 800f4c4:	4699      	mov	r9, r3
 800f4c6:	f1b8 0f01 	cmp.w	r8, #1
 800f4ca:	dc21      	bgt.n	800f510 <_strtod_l+0x528>
 800f4cc:	b10b      	cbz	r3, 800f4d2 <_strtod_l+0x4ea>
 800f4ce:	4682      	mov	sl, r0
 800f4d0:	468b      	mov	fp, r1
 800f4d2:	4b2f      	ldr	r3, [pc, #188]	; (800f590 <_strtod_l+0x5a8>)
 800f4d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f4d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f4dc:	4652      	mov	r2, sl
 800f4de:	465b      	mov	r3, fp
 800f4e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f4e4:	f7f1 f8a8 	bl	8000638 <__aeabi_dmul>
 800f4e8:	4b2a      	ldr	r3, [pc, #168]	; (800f594 <_strtod_l+0x5ac>)
 800f4ea:	460a      	mov	r2, r1
 800f4ec:	400b      	ands	r3, r1
 800f4ee:	492a      	ldr	r1, [pc, #168]	; (800f598 <_strtod_l+0x5b0>)
 800f4f0:	428b      	cmp	r3, r1
 800f4f2:	4682      	mov	sl, r0
 800f4f4:	d8bc      	bhi.n	800f470 <_strtod_l+0x488>
 800f4f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f4fa:	428b      	cmp	r3, r1
 800f4fc:	bf86      	itte	hi
 800f4fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f59c <_strtod_l+0x5b4>
 800f502:	f04f 3aff 	movhi.w	sl, #4294967295
 800f506:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f50a:	2300      	movs	r3, #0
 800f50c:	9304      	str	r3, [sp, #16]
 800f50e:	e084      	b.n	800f61a <_strtod_l+0x632>
 800f510:	f018 0f01 	tst.w	r8, #1
 800f514:	d005      	beq.n	800f522 <_strtod_l+0x53a>
 800f516:	9b04      	ldr	r3, [sp, #16]
 800f518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51c:	f7f1 f88c 	bl	8000638 <__aeabi_dmul>
 800f520:	2301      	movs	r3, #1
 800f522:	9a04      	ldr	r2, [sp, #16]
 800f524:	3208      	adds	r2, #8
 800f526:	f109 0901 	add.w	r9, r9, #1
 800f52a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f52e:	9204      	str	r2, [sp, #16]
 800f530:	e7c9      	b.n	800f4c6 <_strtod_l+0x4de>
 800f532:	d0ea      	beq.n	800f50a <_strtod_l+0x522>
 800f534:	f1c8 0800 	rsb	r8, r8, #0
 800f538:	f018 020f 	ands.w	r2, r8, #15
 800f53c:	d00a      	beq.n	800f554 <_strtod_l+0x56c>
 800f53e:	4b13      	ldr	r3, [pc, #76]	; (800f58c <_strtod_l+0x5a4>)
 800f540:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f544:	4650      	mov	r0, sl
 800f546:	4659      	mov	r1, fp
 800f548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f54c:	f7f1 f99e 	bl	800088c <__aeabi_ddiv>
 800f550:	4682      	mov	sl, r0
 800f552:	468b      	mov	fp, r1
 800f554:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f558:	d0d7      	beq.n	800f50a <_strtod_l+0x522>
 800f55a:	f1b8 0f1f 	cmp.w	r8, #31
 800f55e:	dd1f      	ble.n	800f5a0 <_strtod_l+0x5b8>
 800f560:	2500      	movs	r5, #0
 800f562:	462e      	mov	r6, r5
 800f564:	9507      	str	r5, [sp, #28]
 800f566:	9505      	str	r5, [sp, #20]
 800f568:	2322      	movs	r3, #34	; 0x22
 800f56a:	f04f 0a00 	mov.w	sl, #0
 800f56e:	f04f 0b00 	mov.w	fp, #0
 800f572:	6023      	str	r3, [r4, #0]
 800f574:	e786      	b.n	800f484 <_strtod_l+0x49c>
 800f576:	bf00      	nop
 800f578:	08012db5 	.word	0x08012db5
 800f57c:	08012df8 	.word	0x08012df8
 800f580:	08012dad 	.word	0x08012dad
 800f584:	08012f3c 	.word	0x08012f3c
 800f588:	080131e8 	.word	0x080131e8
 800f58c:	080130c8 	.word	0x080130c8
 800f590:	080130a0 	.word	0x080130a0
 800f594:	7ff00000 	.word	0x7ff00000
 800f598:	7ca00000 	.word	0x7ca00000
 800f59c:	7fefffff 	.word	0x7fefffff
 800f5a0:	f018 0310 	ands.w	r3, r8, #16
 800f5a4:	bf18      	it	ne
 800f5a6:	236a      	movne	r3, #106	; 0x6a
 800f5a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f958 <_strtod_l+0x970>
 800f5ac:	9304      	str	r3, [sp, #16]
 800f5ae:	4650      	mov	r0, sl
 800f5b0:	4659      	mov	r1, fp
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	f018 0f01 	tst.w	r8, #1
 800f5b8:	d004      	beq.n	800f5c4 <_strtod_l+0x5dc>
 800f5ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f5be:	f7f1 f83b 	bl	8000638 <__aeabi_dmul>
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f5c8:	f109 0908 	add.w	r9, r9, #8
 800f5cc:	d1f2      	bne.n	800f5b4 <_strtod_l+0x5cc>
 800f5ce:	b10b      	cbz	r3, 800f5d4 <_strtod_l+0x5ec>
 800f5d0:	4682      	mov	sl, r0
 800f5d2:	468b      	mov	fp, r1
 800f5d4:	9b04      	ldr	r3, [sp, #16]
 800f5d6:	b1c3      	cbz	r3, 800f60a <_strtod_l+0x622>
 800f5d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f5dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	4659      	mov	r1, fp
 800f5e4:	dd11      	ble.n	800f60a <_strtod_l+0x622>
 800f5e6:	2b1f      	cmp	r3, #31
 800f5e8:	f340 8124 	ble.w	800f834 <_strtod_l+0x84c>
 800f5ec:	2b34      	cmp	r3, #52	; 0x34
 800f5ee:	bfde      	ittt	le
 800f5f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f5f4:	f04f 33ff 	movle.w	r3, #4294967295
 800f5f8:	fa03 f202 	lslle.w	r2, r3, r2
 800f5fc:	f04f 0a00 	mov.w	sl, #0
 800f600:	bfcc      	ite	gt
 800f602:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f606:	ea02 0b01 	andle.w	fp, r2, r1
 800f60a:	2200      	movs	r2, #0
 800f60c:	2300      	movs	r3, #0
 800f60e:	4650      	mov	r0, sl
 800f610:	4659      	mov	r1, fp
 800f612:	f7f1 fa79 	bl	8000b08 <__aeabi_dcmpeq>
 800f616:	2800      	cmp	r0, #0
 800f618:	d1a2      	bne.n	800f560 <_strtod_l+0x578>
 800f61a:	9b07      	ldr	r3, [sp, #28]
 800f61c:	9300      	str	r3, [sp, #0]
 800f61e:	9908      	ldr	r1, [sp, #32]
 800f620:	462b      	mov	r3, r5
 800f622:	463a      	mov	r2, r7
 800f624:	4620      	mov	r0, r4
 800f626:	f001 fe1f 	bl	8011268 <__s2b>
 800f62a:	9007      	str	r0, [sp, #28]
 800f62c:	2800      	cmp	r0, #0
 800f62e:	f43f af1f 	beq.w	800f470 <_strtod_l+0x488>
 800f632:	9b05      	ldr	r3, [sp, #20]
 800f634:	1b9e      	subs	r6, r3, r6
 800f636:	9b06      	ldr	r3, [sp, #24]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	bfb4      	ite	lt
 800f63c:	4633      	movlt	r3, r6
 800f63e:	2300      	movge	r3, #0
 800f640:	930c      	str	r3, [sp, #48]	; 0x30
 800f642:	9b06      	ldr	r3, [sp, #24]
 800f644:	2500      	movs	r5, #0
 800f646:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f64a:	9312      	str	r3, [sp, #72]	; 0x48
 800f64c:	462e      	mov	r6, r5
 800f64e:	9b07      	ldr	r3, [sp, #28]
 800f650:	4620      	mov	r0, r4
 800f652:	6859      	ldr	r1, [r3, #4]
 800f654:	f001 fd60 	bl	8011118 <_Balloc>
 800f658:	9005      	str	r0, [sp, #20]
 800f65a:	2800      	cmp	r0, #0
 800f65c:	f43f af0c 	beq.w	800f478 <_strtod_l+0x490>
 800f660:	9b07      	ldr	r3, [sp, #28]
 800f662:	691a      	ldr	r2, [r3, #16]
 800f664:	3202      	adds	r2, #2
 800f666:	f103 010c 	add.w	r1, r3, #12
 800f66a:	0092      	lsls	r2, r2, #2
 800f66c:	300c      	adds	r0, #12
 800f66e:	f7fe fde1 	bl	800e234 <memcpy>
 800f672:	ec4b ab10 	vmov	d0, sl, fp
 800f676:	aa1a      	add	r2, sp, #104	; 0x68
 800f678:	a919      	add	r1, sp, #100	; 0x64
 800f67a:	4620      	mov	r0, r4
 800f67c:	f002 f93a 	bl	80118f4 <__d2b>
 800f680:	ec4b ab18 	vmov	d8, sl, fp
 800f684:	9018      	str	r0, [sp, #96]	; 0x60
 800f686:	2800      	cmp	r0, #0
 800f688:	f43f aef6 	beq.w	800f478 <_strtod_l+0x490>
 800f68c:	2101      	movs	r1, #1
 800f68e:	4620      	mov	r0, r4
 800f690:	f001 fe84 	bl	801139c <__i2b>
 800f694:	4606      	mov	r6, r0
 800f696:	2800      	cmp	r0, #0
 800f698:	f43f aeee 	beq.w	800f478 <_strtod_l+0x490>
 800f69c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f69e:	9904      	ldr	r1, [sp, #16]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	bfab      	itete	ge
 800f6a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f6a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f6a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f6aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f6ae:	bfac      	ite	ge
 800f6b0:	eb03 0902 	addge.w	r9, r3, r2
 800f6b4:	1ad7      	sublt	r7, r2, r3
 800f6b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f6b8:	eba3 0801 	sub.w	r8, r3, r1
 800f6bc:	4490      	add	r8, r2
 800f6be:	4ba1      	ldr	r3, [pc, #644]	; (800f944 <_strtod_l+0x95c>)
 800f6c0:	f108 38ff 	add.w	r8, r8, #4294967295
 800f6c4:	4598      	cmp	r8, r3
 800f6c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f6ca:	f280 80c7 	bge.w	800f85c <_strtod_l+0x874>
 800f6ce:	eba3 0308 	sub.w	r3, r3, r8
 800f6d2:	2b1f      	cmp	r3, #31
 800f6d4:	eba2 0203 	sub.w	r2, r2, r3
 800f6d8:	f04f 0101 	mov.w	r1, #1
 800f6dc:	f300 80b1 	bgt.w	800f842 <_strtod_l+0x85a>
 800f6e0:	fa01 f303 	lsl.w	r3, r1, r3
 800f6e4:	930d      	str	r3, [sp, #52]	; 0x34
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	9308      	str	r3, [sp, #32]
 800f6ea:	eb09 0802 	add.w	r8, r9, r2
 800f6ee:	9b04      	ldr	r3, [sp, #16]
 800f6f0:	45c1      	cmp	r9, r8
 800f6f2:	4417      	add	r7, r2
 800f6f4:	441f      	add	r7, r3
 800f6f6:	464b      	mov	r3, r9
 800f6f8:	bfa8      	it	ge
 800f6fa:	4643      	movge	r3, r8
 800f6fc:	42bb      	cmp	r3, r7
 800f6fe:	bfa8      	it	ge
 800f700:	463b      	movge	r3, r7
 800f702:	2b00      	cmp	r3, #0
 800f704:	bfc2      	ittt	gt
 800f706:	eba8 0803 	subgt.w	r8, r8, r3
 800f70a:	1aff      	subgt	r7, r7, r3
 800f70c:	eba9 0903 	subgt.w	r9, r9, r3
 800f710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f712:	2b00      	cmp	r3, #0
 800f714:	dd17      	ble.n	800f746 <_strtod_l+0x75e>
 800f716:	4631      	mov	r1, r6
 800f718:	461a      	mov	r2, r3
 800f71a:	4620      	mov	r0, r4
 800f71c:	f001 fefe 	bl	801151c <__pow5mult>
 800f720:	4606      	mov	r6, r0
 800f722:	2800      	cmp	r0, #0
 800f724:	f43f aea8 	beq.w	800f478 <_strtod_l+0x490>
 800f728:	4601      	mov	r1, r0
 800f72a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f72c:	4620      	mov	r0, r4
 800f72e:	f001 fe4b 	bl	80113c8 <__multiply>
 800f732:	900b      	str	r0, [sp, #44]	; 0x2c
 800f734:	2800      	cmp	r0, #0
 800f736:	f43f ae9f 	beq.w	800f478 <_strtod_l+0x490>
 800f73a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f73c:	4620      	mov	r0, r4
 800f73e:	f001 fd2b 	bl	8011198 <_Bfree>
 800f742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f744:	9318      	str	r3, [sp, #96]	; 0x60
 800f746:	f1b8 0f00 	cmp.w	r8, #0
 800f74a:	f300 808c 	bgt.w	800f866 <_strtod_l+0x87e>
 800f74e:	9b06      	ldr	r3, [sp, #24]
 800f750:	2b00      	cmp	r3, #0
 800f752:	dd08      	ble.n	800f766 <_strtod_l+0x77e>
 800f754:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f756:	9905      	ldr	r1, [sp, #20]
 800f758:	4620      	mov	r0, r4
 800f75a:	f001 fedf 	bl	801151c <__pow5mult>
 800f75e:	9005      	str	r0, [sp, #20]
 800f760:	2800      	cmp	r0, #0
 800f762:	f43f ae89 	beq.w	800f478 <_strtod_l+0x490>
 800f766:	2f00      	cmp	r7, #0
 800f768:	dd08      	ble.n	800f77c <_strtod_l+0x794>
 800f76a:	9905      	ldr	r1, [sp, #20]
 800f76c:	463a      	mov	r2, r7
 800f76e:	4620      	mov	r0, r4
 800f770:	f001 ff2e 	bl	80115d0 <__lshift>
 800f774:	9005      	str	r0, [sp, #20]
 800f776:	2800      	cmp	r0, #0
 800f778:	f43f ae7e 	beq.w	800f478 <_strtod_l+0x490>
 800f77c:	f1b9 0f00 	cmp.w	r9, #0
 800f780:	dd08      	ble.n	800f794 <_strtod_l+0x7ac>
 800f782:	4631      	mov	r1, r6
 800f784:	464a      	mov	r2, r9
 800f786:	4620      	mov	r0, r4
 800f788:	f001 ff22 	bl	80115d0 <__lshift>
 800f78c:	4606      	mov	r6, r0
 800f78e:	2800      	cmp	r0, #0
 800f790:	f43f ae72 	beq.w	800f478 <_strtod_l+0x490>
 800f794:	9a05      	ldr	r2, [sp, #20]
 800f796:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f798:	4620      	mov	r0, r4
 800f79a:	f001 ffa5 	bl	80116e8 <__mdiff>
 800f79e:	4605      	mov	r5, r0
 800f7a0:	2800      	cmp	r0, #0
 800f7a2:	f43f ae69 	beq.w	800f478 <_strtod_l+0x490>
 800f7a6:	68c3      	ldr	r3, [r0, #12]
 800f7a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	60c3      	str	r3, [r0, #12]
 800f7ae:	4631      	mov	r1, r6
 800f7b0:	f001 ff7e 	bl	80116b0 <__mcmp>
 800f7b4:	2800      	cmp	r0, #0
 800f7b6:	da60      	bge.n	800f87a <_strtod_l+0x892>
 800f7b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7ba:	ea53 030a 	orrs.w	r3, r3, sl
 800f7be:	f040 8082 	bne.w	800f8c6 <_strtod_l+0x8de>
 800f7c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d17d      	bne.n	800f8c6 <_strtod_l+0x8de>
 800f7ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f7ce:	0d1b      	lsrs	r3, r3, #20
 800f7d0:	051b      	lsls	r3, r3, #20
 800f7d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f7d6:	d976      	bls.n	800f8c6 <_strtod_l+0x8de>
 800f7d8:	696b      	ldr	r3, [r5, #20]
 800f7da:	b913      	cbnz	r3, 800f7e2 <_strtod_l+0x7fa>
 800f7dc:	692b      	ldr	r3, [r5, #16]
 800f7de:	2b01      	cmp	r3, #1
 800f7e0:	dd71      	ble.n	800f8c6 <_strtod_l+0x8de>
 800f7e2:	4629      	mov	r1, r5
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	f001 fef2 	bl	80115d0 <__lshift>
 800f7ec:	4631      	mov	r1, r6
 800f7ee:	4605      	mov	r5, r0
 800f7f0:	f001 ff5e 	bl	80116b0 <__mcmp>
 800f7f4:	2800      	cmp	r0, #0
 800f7f6:	dd66      	ble.n	800f8c6 <_strtod_l+0x8de>
 800f7f8:	9904      	ldr	r1, [sp, #16]
 800f7fa:	4a53      	ldr	r2, [pc, #332]	; (800f948 <_strtod_l+0x960>)
 800f7fc:	465b      	mov	r3, fp
 800f7fe:	2900      	cmp	r1, #0
 800f800:	f000 8081 	beq.w	800f906 <_strtod_l+0x91e>
 800f804:	ea02 010b 	and.w	r1, r2, fp
 800f808:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f80c:	dc7b      	bgt.n	800f906 <_strtod_l+0x91e>
 800f80e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f812:	f77f aea9 	ble.w	800f568 <_strtod_l+0x580>
 800f816:	4b4d      	ldr	r3, [pc, #308]	; (800f94c <_strtod_l+0x964>)
 800f818:	4650      	mov	r0, sl
 800f81a:	4659      	mov	r1, fp
 800f81c:	2200      	movs	r2, #0
 800f81e:	f7f0 ff0b 	bl	8000638 <__aeabi_dmul>
 800f822:	460b      	mov	r3, r1
 800f824:	4303      	orrs	r3, r0
 800f826:	bf08      	it	eq
 800f828:	2322      	moveq	r3, #34	; 0x22
 800f82a:	4682      	mov	sl, r0
 800f82c:	468b      	mov	fp, r1
 800f82e:	bf08      	it	eq
 800f830:	6023      	streq	r3, [r4, #0]
 800f832:	e62b      	b.n	800f48c <_strtod_l+0x4a4>
 800f834:	f04f 32ff 	mov.w	r2, #4294967295
 800f838:	fa02 f303 	lsl.w	r3, r2, r3
 800f83c:	ea03 0a0a 	and.w	sl, r3, sl
 800f840:	e6e3      	b.n	800f60a <_strtod_l+0x622>
 800f842:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f846:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f84a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f84e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f852:	fa01 f308 	lsl.w	r3, r1, r8
 800f856:	9308      	str	r3, [sp, #32]
 800f858:	910d      	str	r1, [sp, #52]	; 0x34
 800f85a:	e746      	b.n	800f6ea <_strtod_l+0x702>
 800f85c:	2300      	movs	r3, #0
 800f85e:	9308      	str	r3, [sp, #32]
 800f860:	2301      	movs	r3, #1
 800f862:	930d      	str	r3, [sp, #52]	; 0x34
 800f864:	e741      	b.n	800f6ea <_strtod_l+0x702>
 800f866:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f868:	4642      	mov	r2, r8
 800f86a:	4620      	mov	r0, r4
 800f86c:	f001 feb0 	bl	80115d0 <__lshift>
 800f870:	9018      	str	r0, [sp, #96]	; 0x60
 800f872:	2800      	cmp	r0, #0
 800f874:	f47f af6b 	bne.w	800f74e <_strtod_l+0x766>
 800f878:	e5fe      	b.n	800f478 <_strtod_l+0x490>
 800f87a:	465f      	mov	r7, fp
 800f87c:	d16e      	bne.n	800f95c <_strtod_l+0x974>
 800f87e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f880:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f884:	b342      	cbz	r2, 800f8d8 <_strtod_l+0x8f0>
 800f886:	4a32      	ldr	r2, [pc, #200]	; (800f950 <_strtod_l+0x968>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d128      	bne.n	800f8de <_strtod_l+0x8f6>
 800f88c:	9b04      	ldr	r3, [sp, #16]
 800f88e:	4651      	mov	r1, sl
 800f890:	b1eb      	cbz	r3, 800f8ce <_strtod_l+0x8e6>
 800f892:	4b2d      	ldr	r3, [pc, #180]	; (800f948 <_strtod_l+0x960>)
 800f894:	403b      	ands	r3, r7
 800f896:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f89a:	f04f 32ff 	mov.w	r2, #4294967295
 800f89e:	d819      	bhi.n	800f8d4 <_strtod_l+0x8ec>
 800f8a0:	0d1b      	lsrs	r3, r3, #20
 800f8a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f8a6:	fa02 f303 	lsl.w	r3, r2, r3
 800f8aa:	4299      	cmp	r1, r3
 800f8ac:	d117      	bne.n	800f8de <_strtod_l+0x8f6>
 800f8ae:	4b29      	ldr	r3, [pc, #164]	; (800f954 <_strtod_l+0x96c>)
 800f8b0:	429f      	cmp	r7, r3
 800f8b2:	d102      	bne.n	800f8ba <_strtod_l+0x8d2>
 800f8b4:	3101      	adds	r1, #1
 800f8b6:	f43f addf 	beq.w	800f478 <_strtod_l+0x490>
 800f8ba:	4b23      	ldr	r3, [pc, #140]	; (800f948 <_strtod_l+0x960>)
 800f8bc:	403b      	ands	r3, r7
 800f8be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f8c2:	f04f 0a00 	mov.w	sl, #0
 800f8c6:	9b04      	ldr	r3, [sp, #16]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d1a4      	bne.n	800f816 <_strtod_l+0x82e>
 800f8cc:	e5de      	b.n	800f48c <_strtod_l+0x4a4>
 800f8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f8d2:	e7ea      	b.n	800f8aa <_strtod_l+0x8c2>
 800f8d4:	4613      	mov	r3, r2
 800f8d6:	e7e8      	b.n	800f8aa <_strtod_l+0x8c2>
 800f8d8:	ea53 030a 	orrs.w	r3, r3, sl
 800f8dc:	d08c      	beq.n	800f7f8 <_strtod_l+0x810>
 800f8de:	9b08      	ldr	r3, [sp, #32]
 800f8e0:	b1db      	cbz	r3, 800f91a <_strtod_l+0x932>
 800f8e2:	423b      	tst	r3, r7
 800f8e4:	d0ef      	beq.n	800f8c6 <_strtod_l+0x8de>
 800f8e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8e8:	9a04      	ldr	r2, [sp, #16]
 800f8ea:	4650      	mov	r0, sl
 800f8ec:	4659      	mov	r1, fp
 800f8ee:	b1c3      	cbz	r3, 800f922 <_strtod_l+0x93a>
 800f8f0:	f7ff fb5e 	bl	800efb0 <sulp>
 800f8f4:	4602      	mov	r2, r0
 800f8f6:	460b      	mov	r3, r1
 800f8f8:	ec51 0b18 	vmov	r0, r1, d8
 800f8fc:	f7f0 fce6 	bl	80002cc <__adddf3>
 800f900:	4682      	mov	sl, r0
 800f902:	468b      	mov	fp, r1
 800f904:	e7df      	b.n	800f8c6 <_strtod_l+0x8de>
 800f906:	4013      	ands	r3, r2
 800f908:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f90c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f910:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f914:	f04f 3aff 	mov.w	sl, #4294967295
 800f918:	e7d5      	b.n	800f8c6 <_strtod_l+0x8de>
 800f91a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f91c:	ea13 0f0a 	tst.w	r3, sl
 800f920:	e7e0      	b.n	800f8e4 <_strtod_l+0x8fc>
 800f922:	f7ff fb45 	bl	800efb0 <sulp>
 800f926:	4602      	mov	r2, r0
 800f928:	460b      	mov	r3, r1
 800f92a:	ec51 0b18 	vmov	r0, r1, d8
 800f92e:	f7f0 fccb 	bl	80002c8 <__aeabi_dsub>
 800f932:	2200      	movs	r2, #0
 800f934:	2300      	movs	r3, #0
 800f936:	4682      	mov	sl, r0
 800f938:	468b      	mov	fp, r1
 800f93a:	f7f1 f8e5 	bl	8000b08 <__aeabi_dcmpeq>
 800f93e:	2800      	cmp	r0, #0
 800f940:	d0c1      	beq.n	800f8c6 <_strtod_l+0x8de>
 800f942:	e611      	b.n	800f568 <_strtod_l+0x580>
 800f944:	fffffc02 	.word	0xfffffc02
 800f948:	7ff00000 	.word	0x7ff00000
 800f94c:	39500000 	.word	0x39500000
 800f950:	000fffff 	.word	0x000fffff
 800f954:	7fefffff 	.word	0x7fefffff
 800f958:	08012e10 	.word	0x08012e10
 800f95c:	4631      	mov	r1, r6
 800f95e:	4628      	mov	r0, r5
 800f960:	f002 f824 	bl	80119ac <__ratio>
 800f964:	ec59 8b10 	vmov	r8, r9, d0
 800f968:	ee10 0a10 	vmov	r0, s0
 800f96c:	2200      	movs	r2, #0
 800f96e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f972:	4649      	mov	r1, r9
 800f974:	f7f1 f8dc 	bl	8000b30 <__aeabi_dcmple>
 800f978:	2800      	cmp	r0, #0
 800f97a:	d07a      	beq.n	800fa72 <_strtod_l+0xa8a>
 800f97c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d04a      	beq.n	800fa18 <_strtod_l+0xa30>
 800f982:	4b95      	ldr	r3, [pc, #596]	; (800fbd8 <_strtod_l+0xbf0>)
 800f984:	2200      	movs	r2, #0
 800f986:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f98a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800fbd8 <_strtod_l+0xbf0>
 800f98e:	f04f 0800 	mov.w	r8, #0
 800f992:	4b92      	ldr	r3, [pc, #584]	; (800fbdc <_strtod_l+0xbf4>)
 800f994:	403b      	ands	r3, r7
 800f996:	930d      	str	r3, [sp, #52]	; 0x34
 800f998:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f99a:	4b91      	ldr	r3, [pc, #580]	; (800fbe0 <_strtod_l+0xbf8>)
 800f99c:	429a      	cmp	r2, r3
 800f99e:	f040 80b0 	bne.w	800fb02 <_strtod_l+0xb1a>
 800f9a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f9a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f9aa:	ec4b ab10 	vmov	d0, sl, fp
 800f9ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f9b2:	f001 ff23 	bl	80117fc <__ulp>
 800f9b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f9ba:	ec53 2b10 	vmov	r2, r3, d0
 800f9be:	f7f0 fe3b 	bl	8000638 <__aeabi_dmul>
 800f9c2:	4652      	mov	r2, sl
 800f9c4:	465b      	mov	r3, fp
 800f9c6:	f7f0 fc81 	bl	80002cc <__adddf3>
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	4983      	ldr	r1, [pc, #524]	; (800fbdc <_strtod_l+0xbf4>)
 800f9ce:	4a85      	ldr	r2, [pc, #532]	; (800fbe4 <_strtod_l+0xbfc>)
 800f9d0:	4019      	ands	r1, r3
 800f9d2:	4291      	cmp	r1, r2
 800f9d4:	4682      	mov	sl, r0
 800f9d6:	d960      	bls.n	800fa9a <_strtod_l+0xab2>
 800f9d8:	ee18 3a90 	vmov	r3, s17
 800f9dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d104      	bne.n	800f9ee <_strtod_l+0xa06>
 800f9e4:	ee18 3a10 	vmov	r3, s16
 800f9e8:	3301      	adds	r3, #1
 800f9ea:	f43f ad45 	beq.w	800f478 <_strtod_l+0x490>
 800f9ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 800fbf0 <_strtod_l+0xc08>
 800f9f2:	f04f 3aff 	mov.w	sl, #4294967295
 800f9f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f9f8:	4620      	mov	r0, r4
 800f9fa:	f001 fbcd 	bl	8011198 <_Bfree>
 800f9fe:	9905      	ldr	r1, [sp, #20]
 800fa00:	4620      	mov	r0, r4
 800fa02:	f001 fbc9 	bl	8011198 <_Bfree>
 800fa06:	4631      	mov	r1, r6
 800fa08:	4620      	mov	r0, r4
 800fa0a:	f001 fbc5 	bl	8011198 <_Bfree>
 800fa0e:	4629      	mov	r1, r5
 800fa10:	4620      	mov	r0, r4
 800fa12:	f001 fbc1 	bl	8011198 <_Bfree>
 800fa16:	e61a      	b.n	800f64e <_strtod_l+0x666>
 800fa18:	f1ba 0f00 	cmp.w	sl, #0
 800fa1c:	d11b      	bne.n	800fa56 <_strtod_l+0xa6e>
 800fa1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa22:	b9f3      	cbnz	r3, 800fa62 <_strtod_l+0xa7a>
 800fa24:	4b6c      	ldr	r3, [pc, #432]	; (800fbd8 <_strtod_l+0xbf0>)
 800fa26:	2200      	movs	r2, #0
 800fa28:	4640      	mov	r0, r8
 800fa2a:	4649      	mov	r1, r9
 800fa2c:	f7f1 f876 	bl	8000b1c <__aeabi_dcmplt>
 800fa30:	b9d0      	cbnz	r0, 800fa68 <_strtod_l+0xa80>
 800fa32:	4640      	mov	r0, r8
 800fa34:	4649      	mov	r1, r9
 800fa36:	4b6c      	ldr	r3, [pc, #432]	; (800fbe8 <_strtod_l+0xc00>)
 800fa38:	2200      	movs	r2, #0
 800fa3a:	f7f0 fdfd 	bl	8000638 <__aeabi_dmul>
 800fa3e:	4680      	mov	r8, r0
 800fa40:	4689      	mov	r9, r1
 800fa42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fa46:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800fa4a:	9315      	str	r3, [sp, #84]	; 0x54
 800fa4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fa50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fa54:	e79d      	b.n	800f992 <_strtod_l+0x9aa>
 800fa56:	f1ba 0f01 	cmp.w	sl, #1
 800fa5a:	d102      	bne.n	800fa62 <_strtod_l+0xa7a>
 800fa5c:	2f00      	cmp	r7, #0
 800fa5e:	f43f ad83 	beq.w	800f568 <_strtod_l+0x580>
 800fa62:	4b62      	ldr	r3, [pc, #392]	; (800fbec <_strtod_l+0xc04>)
 800fa64:	2200      	movs	r2, #0
 800fa66:	e78e      	b.n	800f986 <_strtod_l+0x99e>
 800fa68:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800fbe8 <_strtod_l+0xc00>
 800fa6c:	f04f 0800 	mov.w	r8, #0
 800fa70:	e7e7      	b.n	800fa42 <_strtod_l+0xa5a>
 800fa72:	4b5d      	ldr	r3, [pc, #372]	; (800fbe8 <_strtod_l+0xc00>)
 800fa74:	4640      	mov	r0, r8
 800fa76:	4649      	mov	r1, r9
 800fa78:	2200      	movs	r2, #0
 800fa7a:	f7f0 fddd 	bl	8000638 <__aeabi_dmul>
 800fa7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa80:	4680      	mov	r8, r0
 800fa82:	4689      	mov	r9, r1
 800fa84:	b933      	cbnz	r3, 800fa94 <_strtod_l+0xaac>
 800fa86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa8a:	900e      	str	r0, [sp, #56]	; 0x38
 800fa8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800fa92:	e7dd      	b.n	800fa50 <_strtod_l+0xa68>
 800fa94:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800fa98:	e7f9      	b.n	800fa8e <_strtod_l+0xaa6>
 800fa9a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fa9e:	9b04      	ldr	r3, [sp, #16]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d1a8      	bne.n	800f9f6 <_strtod_l+0xa0e>
 800faa4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800faa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800faaa:	0d1b      	lsrs	r3, r3, #20
 800faac:	051b      	lsls	r3, r3, #20
 800faae:	429a      	cmp	r2, r3
 800fab0:	d1a1      	bne.n	800f9f6 <_strtod_l+0xa0e>
 800fab2:	4640      	mov	r0, r8
 800fab4:	4649      	mov	r1, r9
 800fab6:	f7f1 f91f 	bl	8000cf8 <__aeabi_d2lz>
 800faba:	f7f0 fd8f 	bl	80005dc <__aeabi_l2d>
 800fabe:	4602      	mov	r2, r0
 800fac0:	460b      	mov	r3, r1
 800fac2:	4640      	mov	r0, r8
 800fac4:	4649      	mov	r1, r9
 800fac6:	f7f0 fbff 	bl	80002c8 <__aeabi_dsub>
 800faca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800facc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fad0:	ea43 030a 	orr.w	r3, r3, sl
 800fad4:	4313      	orrs	r3, r2
 800fad6:	4680      	mov	r8, r0
 800fad8:	4689      	mov	r9, r1
 800fada:	d055      	beq.n	800fb88 <_strtod_l+0xba0>
 800fadc:	a336      	add	r3, pc, #216	; (adr r3, 800fbb8 <_strtod_l+0xbd0>)
 800fade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae2:	f7f1 f81b 	bl	8000b1c <__aeabi_dcmplt>
 800fae6:	2800      	cmp	r0, #0
 800fae8:	f47f acd0 	bne.w	800f48c <_strtod_l+0x4a4>
 800faec:	a334      	add	r3, pc, #208	; (adr r3, 800fbc0 <_strtod_l+0xbd8>)
 800faee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf2:	4640      	mov	r0, r8
 800faf4:	4649      	mov	r1, r9
 800faf6:	f7f1 f82f 	bl	8000b58 <__aeabi_dcmpgt>
 800fafa:	2800      	cmp	r0, #0
 800fafc:	f43f af7b 	beq.w	800f9f6 <_strtod_l+0xa0e>
 800fb00:	e4c4      	b.n	800f48c <_strtod_l+0x4a4>
 800fb02:	9b04      	ldr	r3, [sp, #16]
 800fb04:	b333      	cbz	r3, 800fb54 <_strtod_l+0xb6c>
 800fb06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb08:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fb0c:	d822      	bhi.n	800fb54 <_strtod_l+0xb6c>
 800fb0e:	a32e      	add	r3, pc, #184	; (adr r3, 800fbc8 <_strtod_l+0xbe0>)
 800fb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb14:	4640      	mov	r0, r8
 800fb16:	4649      	mov	r1, r9
 800fb18:	f7f1 f80a 	bl	8000b30 <__aeabi_dcmple>
 800fb1c:	b1a0      	cbz	r0, 800fb48 <_strtod_l+0xb60>
 800fb1e:	4649      	mov	r1, r9
 800fb20:	4640      	mov	r0, r8
 800fb22:	f7f1 f861 	bl	8000be8 <__aeabi_d2uiz>
 800fb26:	2801      	cmp	r0, #1
 800fb28:	bf38      	it	cc
 800fb2a:	2001      	movcc	r0, #1
 800fb2c:	f7f0 fd0a 	bl	8000544 <__aeabi_ui2d>
 800fb30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb32:	4680      	mov	r8, r0
 800fb34:	4689      	mov	r9, r1
 800fb36:	bb23      	cbnz	r3, 800fb82 <_strtod_l+0xb9a>
 800fb38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb3c:	9010      	str	r0, [sp, #64]	; 0x40
 800fb3e:	9311      	str	r3, [sp, #68]	; 0x44
 800fb40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fb44:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fb48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb4c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fb50:	1a9b      	subs	r3, r3, r2
 800fb52:	9309      	str	r3, [sp, #36]	; 0x24
 800fb54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fb58:	eeb0 0a48 	vmov.f32	s0, s16
 800fb5c:	eef0 0a68 	vmov.f32	s1, s17
 800fb60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fb64:	f001 fe4a 	bl	80117fc <__ulp>
 800fb68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fb6c:	ec53 2b10 	vmov	r2, r3, d0
 800fb70:	f7f0 fd62 	bl	8000638 <__aeabi_dmul>
 800fb74:	ec53 2b18 	vmov	r2, r3, d8
 800fb78:	f7f0 fba8 	bl	80002cc <__adddf3>
 800fb7c:	4682      	mov	sl, r0
 800fb7e:	468b      	mov	fp, r1
 800fb80:	e78d      	b.n	800fa9e <_strtod_l+0xab6>
 800fb82:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800fb86:	e7db      	b.n	800fb40 <_strtod_l+0xb58>
 800fb88:	a311      	add	r3, pc, #68	; (adr r3, 800fbd0 <_strtod_l+0xbe8>)
 800fb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb8e:	f7f0 ffc5 	bl	8000b1c <__aeabi_dcmplt>
 800fb92:	e7b2      	b.n	800fafa <_strtod_l+0xb12>
 800fb94:	2300      	movs	r3, #0
 800fb96:	930a      	str	r3, [sp, #40]	; 0x28
 800fb98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fb9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb9c:	6013      	str	r3, [r2, #0]
 800fb9e:	f7ff ba6b 	b.w	800f078 <_strtod_l+0x90>
 800fba2:	2a65      	cmp	r2, #101	; 0x65
 800fba4:	f43f ab5f 	beq.w	800f266 <_strtod_l+0x27e>
 800fba8:	2a45      	cmp	r2, #69	; 0x45
 800fbaa:	f43f ab5c 	beq.w	800f266 <_strtod_l+0x27e>
 800fbae:	2301      	movs	r3, #1
 800fbb0:	f7ff bb94 	b.w	800f2dc <_strtod_l+0x2f4>
 800fbb4:	f3af 8000 	nop.w
 800fbb8:	94a03595 	.word	0x94a03595
 800fbbc:	3fdfffff 	.word	0x3fdfffff
 800fbc0:	35afe535 	.word	0x35afe535
 800fbc4:	3fe00000 	.word	0x3fe00000
 800fbc8:	ffc00000 	.word	0xffc00000
 800fbcc:	41dfffff 	.word	0x41dfffff
 800fbd0:	94a03595 	.word	0x94a03595
 800fbd4:	3fcfffff 	.word	0x3fcfffff
 800fbd8:	3ff00000 	.word	0x3ff00000
 800fbdc:	7ff00000 	.word	0x7ff00000
 800fbe0:	7fe00000 	.word	0x7fe00000
 800fbe4:	7c9fffff 	.word	0x7c9fffff
 800fbe8:	3fe00000 	.word	0x3fe00000
 800fbec:	bff00000 	.word	0xbff00000
 800fbf0:	7fefffff 	.word	0x7fefffff

0800fbf4 <_strtod_r>:
 800fbf4:	4b01      	ldr	r3, [pc, #4]	; (800fbfc <_strtod_r+0x8>)
 800fbf6:	f7ff b9f7 	b.w	800efe8 <_strtod_l>
 800fbfa:	bf00      	nop
 800fbfc:	20000330 	.word	0x20000330

0800fc00 <_strtol_l.constprop.0>:
 800fc00:	2b01      	cmp	r3, #1
 800fc02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc06:	d001      	beq.n	800fc0c <_strtol_l.constprop.0+0xc>
 800fc08:	2b24      	cmp	r3, #36	; 0x24
 800fc0a:	d906      	bls.n	800fc1a <_strtol_l.constprop.0+0x1a>
 800fc0c:	f7fe fae8 	bl	800e1e0 <__errno>
 800fc10:	2316      	movs	r3, #22
 800fc12:	6003      	str	r3, [r0, #0]
 800fc14:	2000      	movs	r0, #0
 800fc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc1a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fd00 <_strtol_l.constprop.0+0x100>
 800fc1e:	460d      	mov	r5, r1
 800fc20:	462e      	mov	r6, r5
 800fc22:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc26:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fc2a:	f017 0708 	ands.w	r7, r7, #8
 800fc2e:	d1f7      	bne.n	800fc20 <_strtol_l.constprop.0+0x20>
 800fc30:	2c2d      	cmp	r4, #45	; 0x2d
 800fc32:	d132      	bne.n	800fc9a <_strtol_l.constprop.0+0x9a>
 800fc34:	782c      	ldrb	r4, [r5, #0]
 800fc36:	2701      	movs	r7, #1
 800fc38:	1cb5      	adds	r5, r6, #2
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d05b      	beq.n	800fcf6 <_strtol_l.constprop.0+0xf6>
 800fc3e:	2b10      	cmp	r3, #16
 800fc40:	d109      	bne.n	800fc56 <_strtol_l.constprop.0+0x56>
 800fc42:	2c30      	cmp	r4, #48	; 0x30
 800fc44:	d107      	bne.n	800fc56 <_strtol_l.constprop.0+0x56>
 800fc46:	782c      	ldrb	r4, [r5, #0]
 800fc48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fc4c:	2c58      	cmp	r4, #88	; 0x58
 800fc4e:	d14d      	bne.n	800fcec <_strtol_l.constprop.0+0xec>
 800fc50:	786c      	ldrb	r4, [r5, #1]
 800fc52:	2310      	movs	r3, #16
 800fc54:	3502      	adds	r5, #2
 800fc56:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fc5a:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc5e:	f04f 0c00 	mov.w	ip, #0
 800fc62:	fbb8 f9f3 	udiv	r9, r8, r3
 800fc66:	4666      	mov	r6, ip
 800fc68:	fb03 8a19 	mls	sl, r3, r9, r8
 800fc6c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fc70:	f1be 0f09 	cmp.w	lr, #9
 800fc74:	d816      	bhi.n	800fca4 <_strtol_l.constprop.0+0xa4>
 800fc76:	4674      	mov	r4, lr
 800fc78:	42a3      	cmp	r3, r4
 800fc7a:	dd24      	ble.n	800fcc6 <_strtol_l.constprop.0+0xc6>
 800fc7c:	f1bc 0f00 	cmp.w	ip, #0
 800fc80:	db1e      	blt.n	800fcc0 <_strtol_l.constprop.0+0xc0>
 800fc82:	45b1      	cmp	r9, r6
 800fc84:	d31c      	bcc.n	800fcc0 <_strtol_l.constprop.0+0xc0>
 800fc86:	d101      	bne.n	800fc8c <_strtol_l.constprop.0+0x8c>
 800fc88:	45a2      	cmp	sl, r4
 800fc8a:	db19      	blt.n	800fcc0 <_strtol_l.constprop.0+0xc0>
 800fc8c:	fb06 4603 	mla	r6, r6, r3, r4
 800fc90:	f04f 0c01 	mov.w	ip, #1
 800fc94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc98:	e7e8      	b.n	800fc6c <_strtol_l.constprop.0+0x6c>
 800fc9a:	2c2b      	cmp	r4, #43	; 0x2b
 800fc9c:	bf04      	itt	eq
 800fc9e:	782c      	ldrbeq	r4, [r5, #0]
 800fca0:	1cb5      	addeq	r5, r6, #2
 800fca2:	e7ca      	b.n	800fc3a <_strtol_l.constprop.0+0x3a>
 800fca4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fca8:	f1be 0f19 	cmp.w	lr, #25
 800fcac:	d801      	bhi.n	800fcb2 <_strtol_l.constprop.0+0xb2>
 800fcae:	3c37      	subs	r4, #55	; 0x37
 800fcb0:	e7e2      	b.n	800fc78 <_strtol_l.constprop.0+0x78>
 800fcb2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fcb6:	f1be 0f19 	cmp.w	lr, #25
 800fcba:	d804      	bhi.n	800fcc6 <_strtol_l.constprop.0+0xc6>
 800fcbc:	3c57      	subs	r4, #87	; 0x57
 800fcbe:	e7db      	b.n	800fc78 <_strtol_l.constprop.0+0x78>
 800fcc0:	f04f 3cff 	mov.w	ip, #4294967295
 800fcc4:	e7e6      	b.n	800fc94 <_strtol_l.constprop.0+0x94>
 800fcc6:	f1bc 0f00 	cmp.w	ip, #0
 800fcca:	da05      	bge.n	800fcd8 <_strtol_l.constprop.0+0xd8>
 800fccc:	2322      	movs	r3, #34	; 0x22
 800fcce:	6003      	str	r3, [r0, #0]
 800fcd0:	4646      	mov	r6, r8
 800fcd2:	b942      	cbnz	r2, 800fce6 <_strtol_l.constprop.0+0xe6>
 800fcd4:	4630      	mov	r0, r6
 800fcd6:	e79e      	b.n	800fc16 <_strtol_l.constprop.0+0x16>
 800fcd8:	b107      	cbz	r7, 800fcdc <_strtol_l.constprop.0+0xdc>
 800fcda:	4276      	negs	r6, r6
 800fcdc:	2a00      	cmp	r2, #0
 800fcde:	d0f9      	beq.n	800fcd4 <_strtol_l.constprop.0+0xd4>
 800fce0:	f1bc 0f00 	cmp.w	ip, #0
 800fce4:	d000      	beq.n	800fce8 <_strtol_l.constprop.0+0xe8>
 800fce6:	1e69      	subs	r1, r5, #1
 800fce8:	6011      	str	r1, [r2, #0]
 800fcea:	e7f3      	b.n	800fcd4 <_strtol_l.constprop.0+0xd4>
 800fcec:	2430      	movs	r4, #48	; 0x30
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d1b1      	bne.n	800fc56 <_strtol_l.constprop.0+0x56>
 800fcf2:	2308      	movs	r3, #8
 800fcf4:	e7af      	b.n	800fc56 <_strtol_l.constprop.0+0x56>
 800fcf6:	2c30      	cmp	r4, #48	; 0x30
 800fcf8:	d0a5      	beq.n	800fc46 <_strtol_l.constprop.0+0x46>
 800fcfa:	230a      	movs	r3, #10
 800fcfc:	e7ab      	b.n	800fc56 <_strtol_l.constprop.0+0x56>
 800fcfe:	bf00      	nop
 800fd00:	08012e39 	.word	0x08012e39

0800fd04 <_strtol_r>:
 800fd04:	f7ff bf7c 	b.w	800fc00 <_strtol_l.constprop.0>

0800fd08 <quorem>:
 800fd08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd0c:	6903      	ldr	r3, [r0, #16]
 800fd0e:	690c      	ldr	r4, [r1, #16]
 800fd10:	42a3      	cmp	r3, r4
 800fd12:	4607      	mov	r7, r0
 800fd14:	f2c0 8081 	blt.w	800fe1a <quorem+0x112>
 800fd18:	3c01      	subs	r4, #1
 800fd1a:	f101 0814 	add.w	r8, r1, #20
 800fd1e:	f100 0514 	add.w	r5, r0, #20
 800fd22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd26:	9301      	str	r3, [sp, #4]
 800fd28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd30:	3301      	adds	r3, #1
 800fd32:	429a      	cmp	r2, r3
 800fd34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fd38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd3c:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd40:	d331      	bcc.n	800fda6 <quorem+0x9e>
 800fd42:	f04f 0e00 	mov.w	lr, #0
 800fd46:	4640      	mov	r0, r8
 800fd48:	46ac      	mov	ip, r5
 800fd4a:	46f2      	mov	sl, lr
 800fd4c:	f850 2b04 	ldr.w	r2, [r0], #4
 800fd50:	b293      	uxth	r3, r2
 800fd52:	fb06 e303 	mla	r3, r6, r3, lr
 800fd56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	ebaa 0303 	sub.w	r3, sl, r3
 800fd60:	f8dc a000 	ldr.w	sl, [ip]
 800fd64:	0c12      	lsrs	r2, r2, #16
 800fd66:	fa13 f38a 	uxtah	r3, r3, sl
 800fd6a:	fb06 e202 	mla	r2, r6, r2, lr
 800fd6e:	9300      	str	r3, [sp, #0]
 800fd70:	9b00      	ldr	r3, [sp, #0]
 800fd72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fd76:	b292      	uxth	r2, r2
 800fd78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fd7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fd80:	f8bd 3000 	ldrh.w	r3, [sp]
 800fd84:	4581      	cmp	r9, r0
 800fd86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd8a:	f84c 3b04 	str.w	r3, [ip], #4
 800fd8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fd92:	d2db      	bcs.n	800fd4c <quorem+0x44>
 800fd94:	f855 300b 	ldr.w	r3, [r5, fp]
 800fd98:	b92b      	cbnz	r3, 800fda6 <quorem+0x9e>
 800fd9a:	9b01      	ldr	r3, [sp, #4]
 800fd9c:	3b04      	subs	r3, #4
 800fd9e:	429d      	cmp	r5, r3
 800fda0:	461a      	mov	r2, r3
 800fda2:	d32e      	bcc.n	800fe02 <quorem+0xfa>
 800fda4:	613c      	str	r4, [r7, #16]
 800fda6:	4638      	mov	r0, r7
 800fda8:	f001 fc82 	bl	80116b0 <__mcmp>
 800fdac:	2800      	cmp	r0, #0
 800fdae:	db24      	blt.n	800fdfa <quorem+0xf2>
 800fdb0:	3601      	adds	r6, #1
 800fdb2:	4628      	mov	r0, r5
 800fdb4:	f04f 0c00 	mov.w	ip, #0
 800fdb8:	f858 2b04 	ldr.w	r2, [r8], #4
 800fdbc:	f8d0 e000 	ldr.w	lr, [r0]
 800fdc0:	b293      	uxth	r3, r2
 800fdc2:	ebac 0303 	sub.w	r3, ip, r3
 800fdc6:	0c12      	lsrs	r2, r2, #16
 800fdc8:	fa13 f38e 	uxtah	r3, r3, lr
 800fdcc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fdd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fdd4:	b29b      	uxth	r3, r3
 800fdd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fdda:	45c1      	cmp	r9, r8
 800fddc:	f840 3b04 	str.w	r3, [r0], #4
 800fde0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fde4:	d2e8      	bcs.n	800fdb8 <quorem+0xb0>
 800fde6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fdea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdee:	b922      	cbnz	r2, 800fdfa <quorem+0xf2>
 800fdf0:	3b04      	subs	r3, #4
 800fdf2:	429d      	cmp	r5, r3
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	d30a      	bcc.n	800fe0e <quorem+0x106>
 800fdf8:	613c      	str	r4, [r7, #16]
 800fdfa:	4630      	mov	r0, r6
 800fdfc:	b003      	add	sp, #12
 800fdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe02:	6812      	ldr	r2, [r2, #0]
 800fe04:	3b04      	subs	r3, #4
 800fe06:	2a00      	cmp	r2, #0
 800fe08:	d1cc      	bne.n	800fda4 <quorem+0x9c>
 800fe0a:	3c01      	subs	r4, #1
 800fe0c:	e7c7      	b.n	800fd9e <quorem+0x96>
 800fe0e:	6812      	ldr	r2, [r2, #0]
 800fe10:	3b04      	subs	r3, #4
 800fe12:	2a00      	cmp	r2, #0
 800fe14:	d1f0      	bne.n	800fdf8 <quorem+0xf0>
 800fe16:	3c01      	subs	r4, #1
 800fe18:	e7eb      	b.n	800fdf2 <quorem+0xea>
 800fe1a:	2000      	movs	r0, #0
 800fe1c:	e7ee      	b.n	800fdfc <quorem+0xf4>
	...

0800fe20 <_dtoa_r>:
 800fe20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe24:	ed2d 8b04 	vpush	{d8-d9}
 800fe28:	ec57 6b10 	vmov	r6, r7, d0
 800fe2c:	b093      	sub	sp, #76	; 0x4c
 800fe2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fe30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fe34:	9106      	str	r1, [sp, #24]
 800fe36:	ee10 aa10 	vmov	sl, s0
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	9209      	str	r2, [sp, #36]	; 0x24
 800fe3e:	930c      	str	r3, [sp, #48]	; 0x30
 800fe40:	46bb      	mov	fp, r7
 800fe42:	b975      	cbnz	r5, 800fe62 <_dtoa_r+0x42>
 800fe44:	2010      	movs	r0, #16
 800fe46:	f001 f94d 	bl	80110e4 <malloc>
 800fe4a:	4602      	mov	r2, r0
 800fe4c:	6260      	str	r0, [r4, #36]	; 0x24
 800fe4e:	b920      	cbnz	r0, 800fe5a <_dtoa_r+0x3a>
 800fe50:	4ba7      	ldr	r3, [pc, #668]	; (80100f0 <_dtoa_r+0x2d0>)
 800fe52:	21ea      	movs	r1, #234	; 0xea
 800fe54:	48a7      	ldr	r0, [pc, #668]	; (80100f4 <_dtoa_r+0x2d4>)
 800fe56:	f002 f8ad 	bl	8011fb4 <__assert_func>
 800fe5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fe5e:	6005      	str	r5, [r0, #0]
 800fe60:	60c5      	str	r5, [r0, #12]
 800fe62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe64:	6819      	ldr	r1, [r3, #0]
 800fe66:	b151      	cbz	r1, 800fe7e <_dtoa_r+0x5e>
 800fe68:	685a      	ldr	r2, [r3, #4]
 800fe6a:	604a      	str	r2, [r1, #4]
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	4093      	lsls	r3, r2
 800fe70:	608b      	str	r3, [r1, #8]
 800fe72:	4620      	mov	r0, r4
 800fe74:	f001 f990 	bl	8011198 <_Bfree>
 800fe78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	601a      	str	r2, [r3, #0]
 800fe7e:	1e3b      	subs	r3, r7, #0
 800fe80:	bfaa      	itet	ge
 800fe82:	2300      	movge	r3, #0
 800fe84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fe88:	f8c8 3000 	strge.w	r3, [r8]
 800fe8c:	4b9a      	ldr	r3, [pc, #616]	; (80100f8 <_dtoa_r+0x2d8>)
 800fe8e:	bfbc      	itt	lt
 800fe90:	2201      	movlt	r2, #1
 800fe92:	f8c8 2000 	strlt.w	r2, [r8]
 800fe96:	ea33 030b 	bics.w	r3, r3, fp
 800fe9a:	d11b      	bne.n	800fed4 <_dtoa_r+0xb4>
 800fe9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fe9e:	f242 730f 	movw	r3, #9999	; 0x270f
 800fea2:	6013      	str	r3, [r2, #0]
 800fea4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fea8:	4333      	orrs	r3, r6
 800feaa:	f000 8592 	beq.w	80109d2 <_dtoa_r+0xbb2>
 800feae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800feb0:	b963      	cbnz	r3, 800fecc <_dtoa_r+0xac>
 800feb2:	4b92      	ldr	r3, [pc, #584]	; (80100fc <_dtoa_r+0x2dc>)
 800feb4:	e022      	b.n	800fefc <_dtoa_r+0xdc>
 800feb6:	4b92      	ldr	r3, [pc, #584]	; (8010100 <_dtoa_r+0x2e0>)
 800feb8:	9301      	str	r3, [sp, #4]
 800feba:	3308      	adds	r3, #8
 800febc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800febe:	6013      	str	r3, [r2, #0]
 800fec0:	9801      	ldr	r0, [sp, #4]
 800fec2:	b013      	add	sp, #76	; 0x4c
 800fec4:	ecbd 8b04 	vpop	{d8-d9}
 800fec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fecc:	4b8b      	ldr	r3, [pc, #556]	; (80100fc <_dtoa_r+0x2dc>)
 800fece:	9301      	str	r3, [sp, #4]
 800fed0:	3303      	adds	r3, #3
 800fed2:	e7f3      	b.n	800febc <_dtoa_r+0x9c>
 800fed4:	2200      	movs	r2, #0
 800fed6:	2300      	movs	r3, #0
 800fed8:	4650      	mov	r0, sl
 800feda:	4659      	mov	r1, fp
 800fedc:	f7f0 fe14 	bl	8000b08 <__aeabi_dcmpeq>
 800fee0:	ec4b ab19 	vmov	d9, sl, fp
 800fee4:	4680      	mov	r8, r0
 800fee6:	b158      	cbz	r0, 800ff00 <_dtoa_r+0xe0>
 800fee8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800feea:	2301      	movs	r3, #1
 800feec:	6013      	str	r3, [r2, #0]
 800feee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	f000 856b 	beq.w	80109cc <_dtoa_r+0xbac>
 800fef6:	4883      	ldr	r0, [pc, #524]	; (8010104 <_dtoa_r+0x2e4>)
 800fef8:	6018      	str	r0, [r3, #0]
 800fefa:	1e43      	subs	r3, r0, #1
 800fefc:	9301      	str	r3, [sp, #4]
 800fefe:	e7df      	b.n	800fec0 <_dtoa_r+0xa0>
 800ff00:	ec4b ab10 	vmov	d0, sl, fp
 800ff04:	aa10      	add	r2, sp, #64	; 0x40
 800ff06:	a911      	add	r1, sp, #68	; 0x44
 800ff08:	4620      	mov	r0, r4
 800ff0a:	f001 fcf3 	bl	80118f4 <__d2b>
 800ff0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ff12:	ee08 0a10 	vmov	s16, r0
 800ff16:	2d00      	cmp	r5, #0
 800ff18:	f000 8084 	beq.w	8010024 <_dtoa_r+0x204>
 800ff1c:	ee19 3a90 	vmov	r3, s19
 800ff20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ff28:	4656      	mov	r6, sl
 800ff2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ff2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ff32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ff36:	4b74      	ldr	r3, [pc, #464]	; (8010108 <_dtoa_r+0x2e8>)
 800ff38:	2200      	movs	r2, #0
 800ff3a:	4630      	mov	r0, r6
 800ff3c:	4639      	mov	r1, r7
 800ff3e:	f7f0 f9c3 	bl	80002c8 <__aeabi_dsub>
 800ff42:	a365      	add	r3, pc, #404	; (adr r3, 80100d8 <_dtoa_r+0x2b8>)
 800ff44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff48:	f7f0 fb76 	bl	8000638 <__aeabi_dmul>
 800ff4c:	a364      	add	r3, pc, #400	; (adr r3, 80100e0 <_dtoa_r+0x2c0>)
 800ff4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff52:	f7f0 f9bb 	bl	80002cc <__adddf3>
 800ff56:	4606      	mov	r6, r0
 800ff58:	4628      	mov	r0, r5
 800ff5a:	460f      	mov	r7, r1
 800ff5c:	f7f0 fb02 	bl	8000564 <__aeabi_i2d>
 800ff60:	a361      	add	r3, pc, #388	; (adr r3, 80100e8 <_dtoa_r+0x2c8>)
 800ff62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff66:	f7f0 fb67 	bl	8000638 <__aeabi_dmul>
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	460b      	mov	r3, r1
 800ff6e:	4630      	mov	r0, r6
 800ff70:	4639      	mov	r1, r7
 800ff72:	f7f0 f9ab 	bl	80002cc <__adddf3>
 800ff76:	4606      	mov	r6, r0
 800ff78:	460f      	mov	r7, r1
 800ff7a:	f7f0 fe0d 	bl	8000b98 <__aeabi_d2iz>
 800ff7e:	2200      	movs	r2, #0
 800ff80:	9000      	str	r0, [sp, #0]
 800ff82:	2300      	movs	r3, #0
 800ff84:	4630      	mov	r0, r6
 800ff86:	4639      	mov	r1, r7
 800ff88:	f7f0 fdc8 	bl	8000b1c <__aeabi_dcmplt>
 800ff8c:	b150      	cbz	r0, 800ffa4 <_dtoa_r+0x184>
 800ff8e:	9800      	ldr	r0, [sp, #0]
 800ff90:	f7f0 fae8 	bl	8000564 <__aeabi_i2d>
 800ff94:	4632      	mov	r2, r6
 800ff96:	463b      	mov	r3, r7
 800ff98:	f7f0 fdb6 	bl	8000b08 <__aeabi_dcmpeq>
 800ff9c:	b910      	cbnz	r0, 800ffa4 <_dtoa_r+0x184>
 800ff9e:	9b00      	ldr	r3, [sp, #0]
 800ffa0:	3b01      	subs	r3, #1
 800ffa2:	9300      	str	r3, [sp, #0]
 800ffa4:	9b00      	ldr	r3, [sp, #0]
 800ffa6:	2b16      	cmp	r3, #22
 800ffa8:	d85a      	bhi.n	8010060 <_dtoa_r+0x240>
 800ffaa:	9a00      	ldr	r2, [sp, #0]
 800ffac:	4b57      	ldr	r3, [pc, #348]	; (801010c <_dtoa_r+0x2ec>)
 800ffae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ffb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb6:	ec51 0b19 	vmov	r0, r1, d9
 800ffba:	f7f0 fdaf 	bl	8000b1c <__aeabi_dcmplt>
 800ffbe:	2800      	cmp	r0, #0
 800ffc0:	d050      	beq.n	8010064 <_dtoa_r+0x244>
 800ffc2:	9b00      	ldr	r3, [sp, #0]
 800ffc4:	3b01      	subs	r3, #1
 800ffc6:	9300      	str	r3, [sp, #0]
 800ffc8:	2300      	movs	r3, #0
 800ffca:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ffce:	1b5d      	subs	r5, r3, r5
 800ffd0:	1e6b      	subs	r3, r5, #1
 800ffd2:	9305      	str	r3, [sp, #20]
 800ffd4:	bf45      	ittet	mi
 800ffd6:	f1c5 0301 	rsbmi	r3, r5, #1
 800ffda:	9304      	strmi	r3, [sp, #16]
 800ffdc:	2300      	movpl	r3, #0
 800ffde:	2300      	movmi	r3, #0
 800ffe0:	bf4c      	ite	mi
 800ffe2:	9305      	strmi	r3, [sp, #20]
 800ffe4:	9304      	strpl	r3, [sp, #16]
 800ffe6:	9b00      	ldr	r3, [sp, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	db3d      	blt.n	8010068 <_dtoa_r+0x248>
 800ffec:	9b05      	ldr	r3, [sp, #20]
 800ffee:	9a00      	ldr	r2, [sp, #0]
 800fff0:	920a      	str	r2, [sp, #40]	; 0x28
 800fff2:	4413      	add	r3, r2
 800fff4:	9305      	str	r3, [sp, #20]
 800fff6:	2300      	movs	r3, #0
 800fff8:	9307      	str	r3, [sp, #28]
 800fffa:	9b06      	ldr	r3, [sp, #24]
 800fffc:	2b09      	cmp	r3, #9
 800fffe:	f200 8089 	bhi.w	8010114 <_dtoa_r+0x2f4>
 8010002:	2b05      	cmp	r3, #5
 8010004:	bfc4      	itt	gt
 8010006:	3b04      	subgt	r3, #4
 8010008:	9306      	strgt	r3, [sp, #24]
 801000a:	9b06      	ldr	r3, [sp, #24]
 801000c:	f1a3 0302 	sub.w	r3, r3, #2
 8010010:	bfcc      	ite	gt
 8010012:	2500      	movgt	r5, #0
 8010014:	2501      	movle	r5, #1
 8010016:	2b03      	cmp	r3, #3
 8010018:	f200 8087 	bhi.w	801012a <_dtoa_r+0x30a>
 801001c:	e8df f003 	tbb	[pc, r3]
 8010020:	59383a2d 	.word	0x59383a2d
 8010024:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010028:	441d      	add	r5, r3
 801002a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801002e:	2b20      	cmp	r3, #32
 8010030:	bfc1      	itttt	gt
 8010032:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010036:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801003a:	fa0b f303 	lslgt.w	r3, fp, r3
 801003e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010042:	bfda      	itte	le
 8010044:	f1c3 0320 	rsble	r3, r3, #32
 8010048:	fa06 f003 	lslle.w	r0, r6, r3
 801004c:	4318      	orrgt	r0, r3
 801004e:	f7f0 fa79 	bl	8000544 <__aeabi_ui2d>
 8010052:	2301      	movs	r3, #1
 8010054:	4606      	mov	r6, r0
 8010056:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801005a:	3d01      	subs	r5, #1
 801005c:	930e      	str	r3, [sp, #56]	; 0x38
 801005e:	e76a      	b.n	800ff36 <_dtoa_r+0x116>
 8010060:	2301      	movs	r3, #1
 8010062:	e7b2      	b.n	800ffca <_dtoa_r+0x1aa>
 8010064:	900b      	str	r0, [sp, #44]	; 0x2c
 8010066:	e7b1      	b.n	800ffcc <_dtoa_r+0x1ac>
 8010068:	9b04      	ldr	r3, [sp, #16]
 801006a:	9a00      	ldr	r2, [sp, #0]
 801006c:	1a9b      	subs	r3, r3, r2
 801006e:	9304      	str	r3, [sp, #16]
 8010070:	4253      	negs	r3, r2
 8010072:	9307      	str	r3, [sp, #28]
 8010074:	2300      	movs	r3, #0
 8010076:	930a      	str	r3, [sp, #40]	; 0x28
 8010078:	e7bf      	b.n	800fffa <_dtoa_r+0x1da>
 801007a:	2300      	movs	r3, #0
 801007c:	9308      	str	r3, [sp, #32]
 801007e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010080:	2b00      	cmp	r3, #0
 8010082:	dc55      	bgt.n	8010130 <_dtoa_r+0x310>
 8010084:	2301      	movs	r3, #1
 8010086:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801008a:	461a      	mov	r2, r3
 801008c:	9209      	str	r2, [sp, #36]	; 0x24
 801008e:	e00c      	b.n	80100aa <_dtoa_r+0x28a>
 8010090:	2301      	movs	r3, #1
 8010092:	e7f3      	b.n	801007c <_dtoa_r+0x25c>
 8010094:	2300      	movs	r3, #0
 8010096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010098:	9308      	str	r3, [sp, #32]
 801009a:	9b00      	ldr	r3, [sp, #0]
 801009c:	4413      	add	r3, r2
 801009e:	9302      	str	r3, [sp, #8]
 80100a0:	3301      	adds	r3, #1
 80100a2:	2b01      	cmp	r3, #1
 80100a4:	9303      	str	r3, [sp, #12]
 80100a6:	bfb8      	it	lt
 80100a8:	2301      	movlt	r3, #1
 80100aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80100ac:	2200      	movs	r2, #0
 80100ae:	6042      	str	r2, [r0, #4]
 80100b0:	2204      	movs	r2, #4
 80100b2:	f102 0614 	add.w	r6, r2, #20
 80100b6:	429e      	cmp	r6, r3
 80100b8:	6841      	ldr	r1, [r0, #4]
 80100ba:	d93d      	bls.n	8010138 <_dtoa_r+0x318>
 80100bc:	4620      	mov	r0, r4
 80100be:	f001 f82b 	bl	8011118 <_Balloc>
 80100c2:	9001      	str	r0, [sp, #4]
 80100c4:	2800      	cmp	r0, #0
 80100c6:	d13b      	bne.n	8010140 <_dtoa_r+0x320>
 80100c8:	4b11      	ldr	r3, [pc, #68]	; (8010110 <_dtoa_r+0x2f0>)
 80100ca:	4602      	mov	r2, r0
 80100cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80100d0:	e6c0      	b.n	800fe54 <_dtoa_r+0x34>
 80100d2:	2301      	movs	r3, #1
 80100d4:	e7df      	b.n	8010096 <_dtoa_r+0x276>
 80100d6:	bf00      	nop
 80100d8:	636f4361 	.word	0x636f4361
 80100dc:	3fd287a7 	.word	0x3fd287a7
 80100e0:	8b60c8b3 	.word	0x8b60c8b3
 80100e4:	3fc68a28 	.word	0x3fc68a28
 80100e8:	509f79fb 	.word	0x509f79fb
 80100ec:	3fd34413 	.word	0x3fd34413
 80100f0:	08012f46 	.word	0x08012f46
 80100f4:	08012f5d 	.word	0x08012f5d
 80100f8:	7ff00000 	.word	0x7ff00000
 80100fc:	08012f42 	.word	0x08012f42
 8010100:	08012f39 	.word	0x08012f39
 8010104:	08012db9 	.word	0x08012db9
 8010108:	3ff80000 	.word	0x3ff80000
 801010c:	080130c8 	.word	0x080130c8
 8010110:	08012fb8 	.word	0x08012fb8
 8010114:	2501      	movs	r5, #1
 8010116:	2300      	movs	r3, #0
 8010118:	9306      	str	r3, [sp, #24]
 801011a:	9508      	str	r5, [sp, #32]
 801011c:	f04f 33ff 	mov.w	r3, #4294967295
 8010120:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010124:	2200      	movs	r2, #0
 8010126:	2312      	movs	r3, #18
 8010128:	e7b0      	b.n	801008c <_dtoa_r+0x26c>
 801012a:	2301      	movs	r3, #1
 801012c:	9308      	str	r3, [sp, #32]
 801012e:	e7f5      	b.n	801011c <_dtoa_r+0x2fc>
 8010130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010132:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010136:	e7b8      	b.n	80100aa <_dtoa_r+0x28a>
 8010138:	3101      	adds	r1, #1
 801013a:	6041      	str	r1, [r0, #4]
 801013c:	0052      	lsls	r2, r2, #1
 801013e:	e7b8      	b.n	80100b2 <_dtoa_r+0x292>
 8010140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010142:	9a01      	ldr	r2, [sp, #4]
 8010144:	601a      	str	r2, [r3, #0]
 8010146:	9b03      	ldr	r3, [sp, #12]
 8010148:	2b0e      	cmp	r3, #14
 801014a:	f200 809d 	bhi.w	8010288 <_dtoa_r+0x468>
 801014e:	2d00      	cmp	r5, #0
 8010150:	f000 809a 	beq.w	8010288 <_dtoa_r+0x468>
 8010154:	9b00      	ldr	r3, [sp, #0]
 8010156:	2b00      	cmp	r3, #0
 8010158:	dd32      	ble.n	80101c0 <_dtoa_r+0x3a0>
 801015a:	4ab7      	ldr	r2, [pc, #732]	; (8010438 <_dtoa_r+0x618>)
 801015c:	f003 030f 	and.w	r3, r3, #15
 8010160:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010164:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010168:	9b00      	ldr	r3, [sp, #0]
 801016a:	05d8      	lsls	r0, r3, #23
 801016c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010170:	d516      	bpl.n	80101a0 <_dtoa_r+0x380>
 8010172:	4bb2      	ldr	r3, [pc, #712]	; (801043c <_dtoa_r+0x61c>)
 8010174:	ec51 0b19 	vmov	r0, r1, d9
 8010178:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801017c:	f7f0 fb86 	bl	800088c <__aeabi_ddiv>
 8010180:	f007 070f 	and.w	r7, r7, #15
 8010184:	4682      	mov	sl, r0
 8010186:	468b      	mov	fp, r1
 8010188:	2503      	movs	r5, #3
 801018a:	4eac      	ldr	r6, [pc, #688]	; (801043c <_dtoa_r+0x61c>)
 801018c:	b957      	cbnz	r7, 80101a4 <_dtoa_r+0x384>
 801018e:	4642      	mov	r2, r8
 8010190:	464b      	mov	r3, r9
 8010192:	4650      	mov	r0, sl
 8010194:	4659      	mov	r1, fp
 8010196:	f7f0 fb79 	bl	800088c <__aeabi_ddiv>
 801019a:	4682      	mov	sl, r0
 801019c:	468b      	mov	fp, r1
 801019e:	e028      	b.n	80101f2 <_dtoa_r+0x3d2>
 80101a0:	2502      	movs	r5, #2
 80101a2:	e7f2      	b.n	801018a <_dtoa_r+0x36a>
 80101a4:	07f9      	lsls	r1, r7, #31
 80101a6:	d508      	bpl.n	80101ba <_dtoa_r+0x39a>
 80101a8:	4640      	mov	r0, r8
 80101aa:	4649      	mov	r1, r9
 80101ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80101b0:	f7f0 fa42 	bl	8000638 <__aeabi_dmul>
 80101b4:	3501      	adds	r5, #1
 80101b6:	4680      	mov	r8, r0
 80101b8:	4689      	mov	r9, r1
 80101ba:	107f      	asrs	r7, r7, #1
 80101bc:	3608      	adds	r6, #8
 80101be:	e7e5      	b.n	801018c <_dtoa_r+0x36c>
 80101c0:	f000 809b 	beq.w	80102fa <_dtoa_r+0x4da>
 80101c4:	9b00      	ldr	r3, [sp, #0]
 80101c6:	4f9d      	ldr	r7, [pc, #628]	; (801043c <_dtoa_r+0x61c>)
 80101c8:	425e      	negs	r6, r3
 80101ca:	4b9b      	ldr	r3, [pc, #620]	; (8010438 <_dtoa_r+0x618>)
 80101cc:	f006 020f 	and.w	r2, r6, #15
 80101d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d8:	ec51 0b19 	vmov	r0, r1, d9
 80101dc:	f7f0 fa2c 	bl	8000638 <__aeabi_dmul>
 80101e0:	1136      	asrs	r6, r6, #4
 80101e2:	4682      	mov	sl, r0
 80101e4:	468b      	mov	fp, r1
 80101e6:	2300      	movs	r3, #0
 80101e8:	2502      	movs	r5, #2
 80101ea:	2e00      	cmp	r6, #0
 80101ec:	d17a      	bne.n	80102e4 <_dtoa_r+0x4c4>
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d1d3      	bne.n	801019a <_dtoa_r+0x37a>
 80101f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	f000 8082 	beq.w	80102fe <_dtoa_r+0x4de>
 80101fa:	4b91      	ldr	r3, [pc, #580]	; (8010440 <_dtoa_r+0x620>)
 80101fc:	2200      	movs	r2, #0
 80101fe:	4650      	mov	r0, sl
 8010200:	4659      	mov	r1, fp
 8010202:	f7f0 fc8b 	bl	8000b1c <__aeabi_dcmplt>
 8010206:	2800      	cmp	r0, #0
 8010208:	d079      	beq.n	80102fe <_dtoa_r+0x4de>
 801020a:	9b03      	ldr	r3, [sp, #12]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d076      	beq.n	80102fe <_dtoa_r+0x4de>
 8010210:	9b02      	ldr	r3, [sp, #8]
 8010212:	2b00      	cmp	r3, #0
 8010214:	dd36      	ble.n	8010284 <_dtoa_r+0x464>
 8010216:	9b00      	ldr	r3, [sp, #0]
 8010218:	4650      	mov	r0, sl
 801021a:	4659      	mov	r1, fp
 801021c:	1e5f      	subs	r7, r3, #1
 801021e:	2200      	movs	r2, #0
 8010220:	4b88      	ldr	r3, [pc, #544]	; (8010444 <_dtoa_r+0x624>)
 8010222:	f7f0 fa09 	bl	8000638 <__aeabi_dmul>
 8010226:	9e02      	ldr	r6, [sp, #8]
 8010228:	4682      	mov	sl, r0
 801022a:	468b      	mov	fp, r1
 801022c:	3501      	adds	r5, #1
 801022e:	4628      	mov	r0, r5
 8010230:	f7f0 f998 	bl	8000564 <__aeabi_i2d>
 8010234:	4652      	mov	r2, sl
 8010236:	465b      	mov	r3, fp
 8010238:	f7f0 f9fe 	bl	8000638 <__aeabi_dmul>
 801023c:	4b82      	ldr	r3, [pc, #520]	; (8010448 <_dtoa_r+0x628>)
 801023e:	2200      	movs	r2, #0
 8010240:	f7f0 f844 	bl	80002cc <__adddf3>
 8010244:	46d0      	mov	r8, sl
 8010246:	46d9      	mov	r9, fp
 8010248:	4682      	mov	sl, r0
 801024a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801024e:	2e00      	cmp	r6, #0
 8010250:	d158      	bne.n	8010304 <_dtoa_r+0x4e4>
 8010252:	4b7e      	ldr	r3, [pc, #504]	; (801044c <_dtoa_r+0x62c>)
 8010254:	2200      	movs	r2, #0
 8010256:	4640      	mov	r0, r8
 8010258:	4649      	mov	r1, r9
 801025a:	f7f0 f835 	bl	80002c8 <__aeabi_dsub>
 801025e:	4652      	mov	r2, sl
 8010260:	465b      	mov	r3, fp
 8010262:	4680      	mov	r8, r0
 8010264:	4689      	mov	r9, r1
 8010266:	f7f0 fc77 	bl	8000b58 <__aeabi_dcmpgt>
 801026a:	2800      	cmp	r0, #0
 801026c:	f040 8295 	bne.w	801079a <_dtoa_r+0x97a>
 8010270:	4652      	mov	r2, sl
 8010272:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010276:	4640      	mov	r0, r8
 8010278:	4649      	mov	r1, r9
 801027a:	f7f0 fc4f 	bl	8000b1c <__aeabi_dcmplt>
 801027e:	2800      	cmp	r0, #0
 8010280:	f040 8289 	bne.w	8010796 <_dtoa_r+0x976>
 8010284:	ec5b ab19 	vmov	sl, fp, d9
 8010288:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801028a:	2b00      	cmp	r3, #0
 801028c:	f2c0 8148 	blt.w	8010520 <_dtoa_r+0x700>
 8010290:	9a00      	ldr	r2, [sp, #0]
 8010292:	2a0e      	cmp	r2, #14
 8010294:	f300 8144 	bgt.w	8010520 <_dtoa_r+0x700>
 8010298:	4b67      	ldr	r3, [pc, #412]	; (8010438 <_dtoa_r+0x618>)
 801029a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801029e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80102a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	f280 80d5 	bge.w	8010454 <_dtoa_r+0x634>
 80102aa:	9b03      	ldr	r3, [sp, #12]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	f300 80d1 	bgt.w	8010454 <_dtoa_r+0x634>
 80102b2:	f040 826f 	bne.w	8010794 <_dtoa_r+0x974>
 80102b6:	4b65      	ldr	r3, [pc, #404]	; (801044c <_dtoa_r+0x62c>)
 80102b8:	2200      	movs	r2, #0
 80102ba:	4640      	mov	r0, r8
 80102bc:	4649      	mov	r1, r9
 80102be:	f7f0 f9bb 	bl	8000638 <__aeabi_dmul>
 80102c2:	4652      	mov	r2, sl
 80102c4:	465b      	mov	r3, fp
 80102c6:	f7f0 fc3d 	bl	8000b44 <__aeabi_dcmpge>
 80102ca:	9e03      	ldr	r6, [sp, #12]
 80102cc:	4637      	mov	r7, r6
 80102ce:	2800      	cmp	r0, #0
 80102d0:	f040 8245 	bne.w	801075e <_dtoa_r+0x93e>
 80102d4:	9d01      	ldr	r5, [sp, #4]
 80102d6:	2331      	movs	r3, #49	; 0x31
 80102d8:	f805 3b01 	strb.w	r3, [r5], #1
 80102dc:	9b00      	ldr	r3, [sp, #0]
 80102de:	3301      	adds	r3, #1
 80102e0:	9300      	str	r3, [sp, #0]
 80102e2:	e240      	b.n	8010766 <_dtoa_r+0x946>
 80102e4:	07f2      	lsls	r2, r6, #31
 80102e6:	d505      	bpl.n	80102f4 <_dtoa_r+0x4d4>
 80102e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102ec:	f7f0 f9a4 	bl	8000638 <__aeabi_dmul>
 80102f0:	3501      	adds	r5, #1
 80102f2:	2301      	movs	r3, #1
 80102f4:	1076      	asrs	r6, r6, #1
 80102f6:	3708      	adds	r7, #8
 80102f8:	e777      	b.n	80101ea <_dtoa_r+0x3ca>
 80102fa:	2502      	movs	r5, #2
 80102fc:	e779      	b.n	80101f2 <_dtoa_r+0x3d2>
 80102fe:	9f00      	ldr	r7, [sp, #0]
 8010300:	9e03      	ldr	r6, [sp, #12]
 8010302:	e794      	b.n	801022e <_dtoa_r+0x40e>
 8010304:	9901      	ldr	r1, [sp, #4]
 8010306:	4b4c      	ldr	r3, [pc, #304]	; (8010438 <_dtoa_r+0x618>)
 8010308:	4431      	add	r1, r6
 801030a:	910d      	str	r1, [sp, #52]	; 0x34
 801030c:	9908      	ldr	r1, [sp, #32]
 801030e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010312:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010316:	2900      	cmp	r1, #0
 8010318:	d043      	beq.n	80103a2 <_dtoa_r+0x582>
 801031a:	494d      	ldr	r1, [pc, #308]	; (8010450 <_dtoa_r+0x630>)
 801031c:	2000      	movs	r0, #0
 801031e:	f7f0 fab5 	bl	800088c <__aeabi_ddiv>
 8010322:	4652      	mov	r2, sl
 8010324:	465b      	mov	r3, fp
 8010326:	f7ef ffcf 	bl	80002c8 <__aeabi_dsub>
 801032a:	9d01      	ldr	r5, [sp, #4]
 801032c:	4682      	mov	sl, r0
 801032e:	468b      	mov	fp, r1
 8010330:	4649      	mov	r1, r9
 8010332:	4640      	mov	r0, r8
 8010334:	f7f0 fc30 	bl	8000b98 <__aeabi_d2iz>
 8010338:	4606      	mov	r6, r0
 801033a:	f7f0 f913 	bl	8000564 <__aeabi_i2d>
 801033e:	4602      	mov	r2, r0
 8010340:	460b      	mov	r3, r1
 8010342:	4640      	mov	r0, r8
 8010344:	4649      	mov	r1, r9
 8010346:	f7ef ffbf 	bl	80002c8 <__aeabi_dsub>
 801034a:	3630      	adds	r6, #48	; 0x30
 801034c:	f805 6b01 	strb.w	r6, [r5], #1
 8010350:	4652      	mov	r2, sl
 8010352:	465b      	mov	r3, fp
 8010354:	4680      	mov	r8, r0
 8010356:	4689      	mov	r9, r1
 8010358:	f7f0 fbe0 	bl	8000b1c <__aeabi_dcmplt>
 801035c:	2800      	cmp	r0, #0
 801035e:	d163      	bne.n	8010428 <_dtoa_r+0x608>
 8010360:	4642      	mov	r2, r8
 8010362:	464b      	mov	r3, r9
 8010364:	4936      	ldr	r1, [pc, #216]	; (8010440 <_dtoa_r+0x620>)
 8010366:	2000      	movs	r0, #0
 8010368:	f7ef ffae 	bl	80002c8 <__aeabi_dsub>
 801036c:	4652      	mov	r2, sl
 801036e:	465b      	mov	r3, fp
 8010370:	f7f0 fbd4 	bl	8000b1c <__aeabi_dcmplt>
 8010374:	2800      	cmp	r0, #0
 8010376:	f040 80b5 	bne.w	80104e4 <_dtoa_r+0x6c4>
 801037a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801037c:	429d      	cmp	r5, r3
 801037e:	d081      	beq.n	8010284 <_dtoa_r+0x464>
 8010380:	4b30      	ldr	r3, [pc, #192]	; (8010444 <_dtoa_r+0x624>)
 8010382:	2200      	movs	r2, #0
 8010384:	4650      	mov	r0, sl
 8010386:	4659      	mov	r1, fp
 8010388:	f7f0 f956 	bl	8000638 <__aeabi_dmul>
 801038c:	4b2d      	ldr	r3, [pc, #180]	; (8010444 <_dtoa_r+0x624>)
 801038e:	4682      	mov	sl, r0
 8010390:	468b      	mov	fp, r1
 8010392:	4640      	mov	r0, r8
 8010394:	4649      	mov	r1, r9
 8010396:	2200      	movs	r2, #0
 8010398:	f7f0 f94e 	bl	8000638 <__aeabi_dmul>
 801039c:	4680      	mov	r8, r0
 801039e:	4689      	mov	r9, r1
 80103a0:	e7c6      	b.n	8010330 <_dtoa_r+0x510>
 80103a2:	4650      	mov	r0, sl
 80103a4:	4659      	mov	r1, fp
 80103a6:	f7f0 f947 	bl	8000638 <__aeabi_dmul>
 80103aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103ac:	9d01      	ldr	r5, [sp, #4]
 80103ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80103b0:	4682      	mov	sl, r0
 80103b2:	468b      	mov	fp, r1
 80103b4:	4649      	mov	r1, r9
 80103b6:	4640      	mov	r0, r8
 80103b8:	f7f0 fbee 	bl	8000b98 <__aeabi_d2iz>
 80103bc:	4606      	mov	r6, r0
 80103be:	f7f0 f8d1 	bl	8000564 <__aeabi_i2d>
 80103c2:	3630      	adds	r6, #48	; 0x30
 80103c4:	4602      	mov	r2, r0
 80103c6:	460b      	mov	r3, r1
 80103c8:	4640      	mov	r0, r8
 80103ca:	4649      	mov	r1, r9
 80103cc:	f7ef ff7c 	bl	80002c8 <__aeabi_dsub>
 80103d0:	f805 6b01 	strb.w	r6, [r5], #1
 80103d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103d6:	429d      	cmp	r5, r3
 80103d8:	4680      	mov	r8, r0
 80103da:	4689      	mov	r9, r1
 80103dc:	f04f 0200 	mov.w	r2, #0
 80103e0:	d124      	bne.n	801042c <_dtoa_r+0x60c>
 80103e2:	4b1b      	ldr	r3, [pc, #108]	; (8010450 <_dtoa_r+0x630>)
 80103e4:	4650      	mov	r0, sl
 80103e6:	4659      	mov	r1, fp
 80103e8:	f7ef ff70 	bl	80002cc <__adddf3>
 80103ec:	4602      	mov	r2, r0
 80103ee:	460b      	mov	r3, r1
 80103f0:	4640      	mov	r0, r8
 80103f2:	4649      	mov	r1, r9
 80103f4:	f7f0 fbb0 	bl	8000b58 <__aeabi_dcmpgt>
 80103f8:	2800      	cmp	r0, #0
 80103fa:	d173      	bne.n	80104e4 <_dtoa_r+0x6c4>
 80103fc:	4652      	mov	r2, sl
 80103fe:	465b      	mov	r3, fp
 8010400:	4913      	ldr	r1, [pc, #76]	; (8010450 <_dtoa_r+0x630>)
 8010402:	2000      	movs	r0, #0
 8010404:	f7ef ff60 	bl	80002c8 <__aeabi_dsub>
 8010408:	4602      	mov	r2, r0
 801040a:	460b      	mov	r3, r1
 801040c:	4640      	mov	r0, r8
 801040e:	4649      	mov	r1, r9
 8010410:	f7f0 fb84 	bl	8000b1c <__aeabi_dcmplt>
 8010414:	2800      	cmp	r0, #0
 8010416:	f43f af35 	beq.w	8010284 <_dtoa_r+0x464>
 801041a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801041c:	1e6b      	subs	r3, r5, #1
 801041e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010420:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010424:	2b30      	cmp	r3, #48	; 0x30
 8010426:	d0f8      	beq.n	801041a <_dtoa_r+0x5fa>
 8010428:	9700      	str	r7, [sp, #0]
 801042a:	e049      	b.n	80104c0 <_dtoa_r+0x6a0>
 801042c:	4b05      	ldr	r3, [pc, #20]	; (8010444 <_dtoa_r+0x624>)
 801042e:	f7f0 f903 	bl	8000638 <__aeabi_dmul>
 8010432:	4680      	mov	r8, r0
 8010434:	4689      	mov	r9, r1
 8010436:	e7bd      	b.n	80103b4 <_dtoa_r+0x594>
 8010438:	080130c8 	.word	0x080130c8
 801043c:	080130a0 	.word	0x080130a0
 8010440:	3ff00000 	.word	0x3ff00000
 8010444:	40240000 	.word	0x40240000
 8010448:	401c0000 	.word	0x401c0000
 801044c:	40140000 	.word	0x40140000
 8010450:	3fe00000 	.word	0x3fe00000
 8010454:	9d01      	ldr	r5, [sp, #4]
 8010456:	4656      	mov	r6, sl
 8010458:	465f      	mov	r7, fp
 801045a:	4642      	mov	r2, r8
 801045c:	464b      	mov	r3, r9
 801045e:	4630      	mov	r0, r6
 8010460:	4639      	mov	r1, r7
 8010462:	f7f0 fa13 	bl	800088c <__aeabi_ddiv>
 8010466:	f7f0 fb97 	bl	8000b98 <__aeabi_d2iz>
 801046a:	4682      	mov	sl, r0
 801046c:	f7f0 f87a 	bl	8000564 <__aeabi_i2d>
 8010470:	4642      	mov	r2, r8
 8010472:	464b      	mov	r3, r9
 8010474:	f7f0 f8e0 	bl	8000638 <__aeabi_dmul>
 8010478:	4602      	mov	r2, r0
 801047a:	460b      	mov	r3, r1
 801047c:	4630      	mov	r0, r6
 801047e:	4639      	mov	r1, r7
 8010480:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010484:	f7ef ff20 	bl	80002c8 <__aeabi_dsub>
 8010488:	f805 6b01 	strb.w	r6, [r5], #1
 801048c:	9e01      	ldr	r6, [sp, #4]
 801048e:	9f03      	ldr	r7, [sp, #12]
 8010490:	1bae      	subs	r6, r5, r6
 8010492:	42b7      	cmp	r7, r6
 8010494:	4602      	mov	r2, r0
 8010496:	460b      	mov	r3, r1
 8010498:	d135      	bne.n	8010506 <_dtoa_r+0x6e6>
 801049a:	f7ef ff17 	bl	80002cc <__adddf3>
 801049e:	4642      	mov	r2, r8
 80104a0:	464b      	mov	r3, r9
 80104a2:	4606      	mov	r6, r0
 80104a4:	460f      	mov	r7, r1
 80104a6:	f7f0 fb57 	bl	8000b58 <__aeabi_dcmpgt>
 80104aa:	b9d0      	cbnz	r0, 80104e2 <_dtoa_r+0x6c2>
 80104ac:	4642      	mov	r2, r8
 80104ae:	464b      	mov	r3, r9
 80104b0:	4630      	mov	r0, r6
 80104b2:	4639      	mov	r1, r7
 80104b4:	f7f0 fb28 	bl	8000b08 <__aeabi_dcmpeq>
 80104b8:	b110      	cbz	r0, 80104c0 <_dtoa_r+0x6a0>
 80104ba:	f01a 0f01 	tst.w	sl, #1
 80104be:	d110      	bne.n	80104e2 <_dtoa_r+0x6c2>
 80104c0:	4620      	mov	r0, r4
 80104c2:	ee18 1a10 	vmov	r1, s16
 80104c6:	f000 fe67 	bl	8011198 <_Bfree>
 80104ca:	2300      	movs	r3, #0
 80104cc:	9800      	ldr	r0, [sp, #0]
 80104ce:	702b      	strb	r3, [r5, #0]
 80104d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104d2:	3001      	adds	r0, #1
 80104d4:	6018      	str	r0, [r3, #0]
 80104d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104d8:	2b00      	cmp	r3, #0
 80104da:	f43f acf1 	beq.w	800fec0 <_dtoa_r+0xa0>
 80104de:	601d      	str	r5, [r3, #0]
 80104e0:	e4ee      	b.n	800fec0 <_dtoa_r+0xa0>
 80104e2:	9f00      	ldr	r7, [sp, #0]
 80104e4:	462b      	mov	r3, r5
 80104e6:	461d      	mov	r5, r3
 80104e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104ec:	2a39      	cmp	r2, #57	; 0x39
 80104ee:	d106      	bne.n	80104fe <_dtoa_r+0x6de>
 80104f0:	9a01      	ldr	r2, [sp, #4]
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d1f7      	bne.n	80104e6 <_dtoa_r+0x6c6>
 80104f6:	9901      	ldr	r1, [sp, #4]
 80104f8:	2230      	movs	r2, #48	; 0x30
 80104fa:	3701      	adds	r7, #1
 80104fc:	700a      	strb	r2, [r1, #0]
 80104fe:	781a      	ldrb	r2, [r3, #0]
 8010500:	3201      	adds	r2, #1
 8010502:	701a      	strb	r2, [r3, #0]
 8010504:	e790      	b.n	8010428 <_dtoa_r+0x608>
 8010506:	4ba6      	ldr	r3, [pc, #664]	; (80107a0 <_dtoa_r+0x980>)
 8010508:	2200      	movs	r2, #0
 801050a:	f7f0 f895 	bl	8000638 <__aeabi_dmul>
 801050e:	2200      	movs	r2, #0
 8010510:	2300      	movs	r3, #0
 8010512:	4606      	mov	r6, r0
 8010514:	460f      	mov	r7, r1
 8010516:	f7f0 faf7 	bl	8000b08 <__aeabi_dcmpeq>
 801051a:	2800      	cmp	r0, #0
 801051c:	d09d      	beq.n	801045a <_dtoa_r+0x63a>
 801051e:	e7cf      	b.n	80104c0 <_dtoa_r+0x6a0>
 8010520:	9a08      	ldr	r2, [sp, #32]
 8010522:	2a00      	cmp	r2, #0
 8010524:	f000 80d7 	beq.w	80106d6 <_dtoa_r+0x8b6>
 8010528:	9a06      	ldr	r2, [sp, #24]
 801052a:	2a01      	cmp	r2, #1
 801052c:	f300 80ba 	bgt.w	80106a4 <_dtoa_r+0x884>
 8010530:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010532:	2a00      	cmp	r2, #0
 8010534:	f000 80b2 	beq.w	801069c <_dtoa_r+0x87c>
 8010538:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801053c:	9e07      	ldr	r6, [sp, #28]
 801053e:	9d04      	ldr	r5, [sp, #16]
 8010540:	9a04      	ldr	r2, [sp, #16]
 8010542:	441a      	add	r2, r3
 8010544:	9204      	str	r2, [sp, #16]
 8010546:	9a05      	ldr	r2, [sp, #20]
 8010548:	2101      	movs	r1, #1
 801054a:	441a      	add	r2, r3
 801054c:	4620      	mov	r0, r4
 801054e:	9205      	str	r2, [sp, #20]
 8010550:	f000 ff24 	bl	801139c <__i2b>
 8010554:	4607      	mov	r7, r0
 8010556:	2d00      	cmp	r5, #0
 8010558:	dd0c      	ble.n	8010574 <_dtoa_r+0x754>
 801055a:	9b05      	ldr	r3, [sp, #20]
 801055c:	2b00      	cmp	r3, #0
 801055e:	dd09      	ble.n	8010574 <_dtoa_r+0x754>
 8010560:	42ab      	cmp	r3, r5
 8010562:	9a04      	ldr	r2, [sp, #16]
 8010564:	bfa8      	it	ge
 8010566:	462b      	movge	r3, r5
 8010568:	1ad2      	subs	r2, r2, r3
 801056a:	9204      	str	r2, [sp, #16]
 801056c:	9a05      	ldr	r2, [sp, #20]
 801056e:	1aed      	subs	r5, r5, r3
 8010570:	1ad3      	subs	r3, r2, r3
 8010572:	9305      	str	r3, [sp, #20]
 8010574:	9b07      	ldr	r3, [sp, #28]
 8010576:	b31b      	cbz	r3, 80105c0 <_dtoa_r+0x7a0>
 8010578:	9b08      	ldr	r3, [sp, #32]
 801057a:	2b00      	cmp	r3, #0
 801057c:	f000 80af 	beq.w	80106de <_dtoa_r+0x8be>
 8010580:	2e00      	cmp	r6, #0
 8010582:	dd13      	ble.n	80105ac <_dtoa_r+0x78c>
 8010584:	4639      	mov	r1, r7
 8010586:	4632      	mov	r2, r6
 8010588:	4620      	mov	r0, r4
 801058a:	f000 ffc7 	bl	801151c <__pow5mult>
 801058e:	ee18 2a10 	vmov	r2, s16
 8010592:	4601      	mov	r1, r0
 8010594:	4607      	mov	r7, r0
 8010596:	4620      	mov	r0, r4
 8010598:	f000 ff16 	bl	80113c8 <__multiply>
 801059c:	ee18 1a10 	vmov	r1, s16
 80105a0:	4680      	mov	r8, r0
 80105a2:	4620      	mov	r0, r4
 80105a4:	f000 fdf8 	bl	8011198 <_Bfree>
 80105a8:	ee08 8a10 	vmov	s16, r8
 80105ac:	9b07      	ldr	r3, [sp, #28]
 80105ae:	1b9a      	subs	r2, r3, r6
 80105b0:	d006      	beq.n	80105c0 <_dtoa_r+0x7a0>
 80105b2:	ee18 1a10 	vmov	r1, s16
 80105b6:	4620      	mov	r0, r4
 80105b8:	f000 ffb0 	bl	801151c <__pow5mult>
 80105bc:	ee08 0a10 	vmov	s16, r0
 80105c0:	2101      	movs	r1, #1
 80105c2:	4620      	mov	r0, r4
 80105c4:	f000 feea 	bl	801139c <__i2b>
 80105c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	4606      	mov	r6, r0
 80105ce:	f340 8088 	ble.w	80106e2 <_dtoa_r+0x8c2>
 80105d2:	461a      	mov	r2, r3
 80105d4:	4601      	mov	r1, r0
 80105d6:	4620      	mov	r0, r4
 80105d8:	f000 ffa0 	bl	801151c <__pow5mult>
 80105dc:	9b06      	ldr	r3, [sp, #24]
 80105de:	2b01      	cmp	r3, #1
 80105e0:	4606      	mov	r6, r0
 80105e2:	f340 8081 	ble.w	80106e8 <_dtoa_r+0x8c8>
 80105e6:	f04f 0800 	mov.w	r8, #0
 80105ea:	6933      	ldr	r3, [r6, #16]
 80105ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80105f0:	6918      	ldr	r0, [r3, #16]
 80105f2:	f000 fe83 	bl	80112fc <__hi0bits>
 80105f6:	f1c0 0020 	rsb	r0, r0, #32
 80105fa:	9b05      	ldr	r3, [sp, #20]
 80105fc:	4418      	add	r0, r3
 80105fe:	f010 001f 	ands.w	r0, r0, #31
 8010602:	f000 8092 	beq.w	801072a <_dtoa_r+0x90a>
 8010606:	f1c0 0320 	rsb	r3, r0, #32
 801060a:	2b04      	cmp	r3, #4
 801060c:	f340 808a 	ble.w	8010724 <_dtoa_r+0x904>
 8010610:	f1c0 001c 	rsb	r0, r0, #28
 8010614:	9b04      	ldr	r3, [sp, #16]
 8010616:	4403      	add	r3, r0
 8010618:	9304      	str	r3, [sp, #16]
 801061a:	9b05      	ldr	r3, [sp, #20]
 801061c:	4403      	add	r3, r0
 801061e:	4405      	add	r5, r0
 8010620:	9305      	str	r3, [sp, #20]
 8010622:	9b04      	ldr	r3, [sp, #16]
 8010624:	2b00      	cmp	r3, #0
 8010626:	dd07      	ble.n	8010638 <_dtoa_r+0x818>
 8010628:	ee18 1a10 	vmov	r1, s16
 801062c:	461a      	mov	r2, r3
 801062e:	4620      	mov	r0, r4
 8010630:	f000 ffce 	bl	80115d0 <__lshift>
 8010634:	ee08 0a10 	vmov	s16, r0
 8010638:	9b05      	ldr	r3, [sp, #20]
 801063a:	2b00      	cmp	r3, #0
 801063c:	dd05      	ble.n	801064a <_dtoa_r+0x82a>
 801063e:	4631      	mov	r1, r6
 8010640:	461a      	mov	r2, r3
 8010642:	4620      	mov	r0, r4
 8010644:	f000 ffc4 	bl	80115d0 <__lshift>
 8010648:	4606      	mov	r6, r0
 801064a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801064c:	2b00      	cmp	r3, #0
 801064e:	d06e      	beq.n	801072e <_dtoa_r+0x90e>
 8010650:	ee18 0a10 	vmov	r0, s16
 8010654:	4631      	mov	r1, r6
 8010656:	f001 f82b 	bl	80116b0 <__mcmp>
 801065a:	2800      	cmp	r0, #0
 801065c:	da67      	bge.n	801072e <_dtoa_r+0x90e>
 801065e:	9b00      	ldr	r3, [sp, #0]
 8010660:	3b01      	subs	r3, #1
 8010662:	ee18 1a10 	vmov	r1, s16
 8010666:	9300      	str	r3, [sp, #0]
 8010668:	220a      	movs	r2, #10
 801066a:	2300      	movs	r3, #0
 801066c:	4620      	mov	r0, r4
 801066e:	f000 fdb5 	bl	80111dc <__multadd>
 8010672:	9b08      	ldr	r3, [sp, #32]
 8010674:	ee08 0a10 	vmov	s16, r0
 8010678:	2b00      	cmp	r3, #0
 801067a:	f000 81b1 	beq.w	80109e0 <_dtoa_r+0xbc0>
 801067e:	2300      	movs	r3, #0
 8010680:	4639      	mov	r1, r7
 8010682:	220a      	movs	r2, #10
 8010684:	4620      	mov	r0, r4
 8010686:	f000 fda9 	bl	80111dc <__multadd>
 801068a:	9b02      	ldr	r3, [sp, #8]
 801068c:	2b00      	cmp	r3, #0
 801068e:	4607      	mov	r7, r0
 8010690:	f300 808e 	bgt.w	80107b0 <_dtoa_r+0x990>
 8010694:	9b06      	ldr	r3, [sp, #24]
 8010696:	2b02      	cmp	r3, #2
 8010698:	dc51      	bgt.n	801073e <_dtoa_r+0x91e>
 801069a:	e089      	b.n	80107b0 <_dtoa_r+0x990>
 801069c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801069e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80106a2:	e74b      	b.n	801053c <_dtoa_r+0x71c>
 80106a4:	9b03      	ldr	r3, [sp, #12]
 80106a6:	1e5e      	subs	r6, r3, #1
 80106a8:	9b07      	ldr	r3, [sp, #28]
 80106aa:	42b3      	cmp	r3, r6
 80106ac:	bfbf      	itttt	lt
 80106ae:	9b07      	ldrlt	r3, [sp, #28]
 80106b0:	9607      	strlt	r6, [sp, #28]
 80106b2:	1af2      	sublt	r2, r6, r3
 80106b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80106b6:	bfb6      	itet	lt
 80106b8:	189b      	addlt	r3, r3, r2
 80106ba:	1b9e      	subge	r6, r3, r6
 80106bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80106be:	9b03      	ldr	r3, [sp, #12]
 80106c0:	bfb8      	it	lt
 80106c2:	2600      	movlt	r6, #0
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	bfb7      	itett	lt
 80106c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80106cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80106d0:	1a9d      	sublt	r5, r3, r2
 80106d2:	2300      	movlt	r3, #0
 80106d4:	e734      	b.n	8010540 <_dtoa_r+0x720>
 80106d6:	9e07      	ldr	r6, [sp, #28]
 80106d8:	9d04      	ldr	r5, [sp, #16]
 80106da:	9f08      	ldr	r7, [sp, #32]
 80106dc:	e73b      	b.n	8010556 <_dtoa_r+0x736>
 80106de:	9a07      	ldr	r2, [sp, #28]
 80106e0:	e767      	b.n	80105b2 <_dtoa_r+0x792>
 80106e2:	9b06      	ldr	r3, [sp, #24]
 80106e4:	2b01      	cmp	r3, #1
 80106e6:	dc18      	bgt.n	801071a <_dtoa_r+0x8fa>
 80106e8:	f1ba 0f00 	cmp.w	sl, #0
 80106ec:	d115      	bne.n	801071a <_dtoa_r+0x8fa>
 80106ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80106f2:	b993      	cbnz	r3, 801071a <_dtoa_r+0x8fa>
 80106f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80106f8:	0d1b      	lsrs	r3, r3, #20
 80106fa:	051b      	lsls	r3, r3, #20
 80106fc:	b183      	cbz	r3, 8010720 <_dtoa_r+0x900>
 80106fe:	9b04      	ldr	r3, [sp, #16]
 8010700:	3301      	adds	r3, #1
 8010702:	9304      	str	r3, [sp, #16]
 8010704:	9b05      	ldr	r3, [sp, #20]
 8010706:	3301      	adds	r3, #1
 8010708:	9305      	str	r3, [sp, #20]
 801070a:	f04f 0801 	mov.w	r8, #1
 801070e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010710:	2b00      	cmp	r3, #0
 8010712:	f47f af6a 	bne.w	80105ea <_dtoa_r+0x7ca>
 8010716:	2001      	movs	r0, #1
 8010718:	e76f      	b.n	80105fa <_dtoa_r+0x7da>
 801071a:	f04f 0800 	mov.w	r8, #0
 801071e:	e7f6      	b.n	801070e <_dtoa_r+0x8ee>
 8010720:	4698      	mov	r8, r3
 8010722:	e7f4      	b.n	801070e <_dtoa_r+0x8ee>
 8010724:	f43f af7d 	beq.w	8010622 <_dtoa_r+0x802>
 8010728:	4618      	mov	r0, r3
 801072a:	301c      	adds	r0, #28
 801072c:	e772      	b.n	8010614 <_dtoa_r+0x7f4>
 801072e:	9b03      	ldr	r3, [sp, #12]
 8010730:	2b00      	cmp	r3, #0
 8010732:	dc37      	bgt.n	80107a4 <_dtoa_r+0x984>
 8010734:	9b06      	ldr	r3, [sp, #24]
 8010736:	2b02      	cmp	r3, #2
 8010738:	dd34      	ble.n	80107a4 <_dtoa_r+0x984>
 801073a:	9b03      	ldr	r3, [sp, #12]
 801073c:	9302      	str	r3, [sp, #8]
 801073e:	9b02      	ldr	r3, [sp, #8]
 8010740:	b96b      	cbnz	r3, 801075e <_dtoa_r+0x93e>
 8010742:	4631      	mov	r1, r6
 8010744:	2205      	movs	r2, #5
 8010746:	4620      	mov	r0, r4
 8010748:	f000 fd48 	bl	80111dc <__multadd>
 801074c:	4601      	mov	r1, r0
 801074e:	4606      	mov	r6, r0
 8010750:	ee18 0a10 	vmov	r0, s16
 8010754:	f000 ffac 	bl	80116b0 <__mcmp>
 8010758:	2800      	cmp	r0, #0
 801075a:	f73f adbb 	bgt.w	80102d4 <_dtoa_r+0x4b4>
 801075e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010760:	9d01      	ldr	r5, [sp, #4]
 8010762:	43db      	mvns	r3, r3
 8010764:	9300      	str	r3, [sp, #0]
 8010766:	f04f 0800 	mov.w	r8, #0
 801076a:	4631      	mov	r1, r6
 801076c:	4620      	mov	r0, r4
 801076e:	f000 fd13 	bl	8011198 <_Bfree>
 8010772:	2f00      	cmp	r7, #0
 8010774:	f43f aea4 	beq.w	80104c0 <_dtoa_r+0x6a0>
 8010778:	f1b8 0f00 	cmp.w	r8, #0
 801077c:	d005      	beq.n	801078a <_dtoa_r+0x96a>
 801077e:	45b8      	cmp	r8, r7
 8010780:	d003      	beq.n	801078a <_dtoa_r+0x96a>
 8010782:	4641      	mov	r1, r8
 8010784:	4620      	mov	r0, r4
 8010786:	f000 fd07 	bl	8011198 <_Bfree>
 801078a:	4639      	mov	r1, r7
 801078c:	4620      	mov	r0, r4
 801078e:	f000 fd03 	bl	8011198 <_Bfree>
 8010792:	e695      	b.n	80104c0 <_dtoa_r+0x6a0>
 8010794:	2600      	movs	r6, #0
 8010796:	4637      	mov	r7, r6
 8010798:	e7e1      	b.n	801075e <_dtoa_r+0x93e>
 801079a:	9700      	str	r7, [sp, #0]
 801079c:	4637      	mov	r7, r6
 801079e:	e599      	b.n	80102d4 <_dtoa_r+0x4b4>
 80107a0:	40240000 	.word	0x40240000
 80107a4:	9b08      	ldr	r3, [sp, #32]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	f000 80ca 	beq.w	8010940 <_dtoa_r+0xb20>
 80107ac:	9b03      	ldr	r3, [sp, #12]
 80107ae:	9302      	str	r3, [sp, #8]
 80107b0:	2d00      	cmp	r5, #0
 80107b2:	dd05      	ble.n	80107c0 <_dtoa_r+0x9a0>
 80107b4:	4639      	mov	r1, r7
 80107b6:	462a      	mov	r2, r5
 80107b8:	4620      	mov	r0, r4
 80107ba:	f000 ff09 	bl	80115d0 <__lshift>
 80107be:	4607      	mov	r7, r0
 80107c0:	f1b8 0f00 	cmp.w	r8, #0
 80107c4:	d05b      	beq.n	801087e <_dtoa_r+0xa5e>
 80107c6:	6879      	ldr	r1, [r7, #4]
 80107c8:	4620      	mov	r0, r4
 80107ca:	f000 fca5 	bl	8011118 <_Balloc>
 80107ce:	4605      	mov	r5, r0
 80107d0:	b928      	cbnz	r0, 80107de <_dtoa_r+0x9be>
 80107d2:	4b87      	ldr	r3, [pc, #540]	; (80109f0 <_dtoa_r+0xbd0>)
 80107d4:	4602      	mov	r2, r0
 80107d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80107da:	f7ff bb3b 	b.w	800fe54 <_dtoa_r+0x34>
 80107de:	693a      	ldr	r2, [r7, #16]
 80107e0:	3202      	adds	r2, #2
 80107e2:	0092      	lsls	r2, r2, #2
 80107e4:	f107 010c 	add.w	r1, r7, #12
 80107e8:	300c      	adds	r0, #12
 80107ea:	f7fd fd23 	bl	800e234 <memcpy>
 80107ee:	2201      	movs	r2, #1
 80107f0:	4629      	mov	r1, r5
 80107f2:	4620      	mov	r0, r4
 80107f4:	f000 feec 	bl	80115d0 <__lshift>
 80107f8:	9b01      	ldr	r3, [sp, #4]
 80107fa:	f103 0901 	add.w	r9, r3, #1
 80107fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010802:	4413      	add	r3, r2
 8010804:	9305      	str	r3, [sp, #20]
 8010806:	f00a 0301 	and.w	r3, sl, #1
 801080a:	46b8      	mov	r8, r7
 801080c:	9304      	str	r3, [sp, #16]
 801080e:	4607      	mov	r7, r0
 8010810:	4631      	mov	r1, r6
 8010812:	ee18 0a10 	vmov	r0, s16
 8010816:	f7ff fa77 	bl	800fd08 <quorem>
 801081a:	4641      	mov	r1, r8
 801081c:	9002      	str	r0, [sp, #8]
 801081e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010822:	ee18 0a10 	vmov	r0, s16
 8010826:	f000 ff43 	bl	80116b0 <__mcmp>
 801082a:	463a      	mov	r2, r7
 801082c:	9003      	str	r0, [sp, #12]
 801082e:	4631      	mov	r1, r6
 8010830:	4620      	mov	r0, r4
 8010832:	f000 ff59 	bl	80116e8 <__mdiff>
 8010836:	68c2      	ldr	r2, [r0, #12]
 8010838:	f109 3bff 	add.w	fp, r9, #4294967295
 801083c:	4605      	mov	r5, r0
 801083e:	bb02      	cbnz	r2, 8010882 <_dtoa_r+0xa62>
 8010840:	4601      	mov	r1, r0
 8010842:	ee18 0a10 	vmov	r0, s16
 8010846:	f000 ff33 	bl	80116b0 <__mcmp>
 801084a:	4602      	mov	r2, r0
 801084c:	4629      	mov	r1, r5
 801084e:	4620      	mov	r0, r4
 8010850:	9207      	str	r2, [sp, #28]
 8010852:	f000 fca1 	bl	8011198 <_Bfree>
 8010856:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801085a:	ea43 0102 	orr.w	r1, r3, r2
 801085e:	9b04      	ldr	r3, [sp, #16]
 8010860:	430b      	orrs	r3, r1
 8010862:	464d      	mov	r5, r9
 8010864:	d10f      	bne.n	8010886 <_dtoa_r+0xa66>
 8010866:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801086a:	d02a      	beq.n	80108c2 <_dtoa_r+0xaa2>
 801086c:	9b03      	ldr	r3, [sp, #12]
 801086e:	2b00      	cmp	r3, #0
 8010870:	dd02      	ble.n	8010878 <_dtoa_r+0xa58>
 8010872:	9b02      	ldr	r3, [sp, #8]
 8010874:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010878:	f88b a000 	strb.w	sl, [fp]
 801087c:	e775      	b.n	801076a <_dtoa_r+0x94a>
 801087e:	4638      	mov	r0, r7
 8010880:	e7ba      	b.n	80107f8 <_dtoa_r+0x9d8>
 8010882:	2201      	movs	r2, #1
 8010884:	e7e2      	b.n	801084c <_dtoa_r+0xa2c>
 8010886:	9b03      	ldr	r3, [sp, #12]
 8010888:	2b00      	cmp	r3, #0
 801088a:	db04      	blt.n	8010896 <_dtoa_r+0xa76>
 801088c:	9906      	ldr	r1, [sp, #24]
 801088e:	430b      	orrs	r3, r1
 8010890:	9904      	ldr	r1, [sp, #16]
 8010892:	430b      	orrs	r3, r1
 8010894:	d122      	bne.n	80108dc <_dtoa_r+0xabc>
 8010896:	2a00      	cmp	r2, #0
 8010898:	ddee      	ble.n	8010878 <_dtoa_r+0xa58>
 801089a:	ee18 1a10 	vmov	r1, s16
 801089e:	2201      	movs	r2, #1
 80108a0:	4620      	mov	r0, r4
 80108a2:	f000 fe95 	bl	80115d0 <__lshift>
 80108a6:	4631      	mov	r1, r6
 80108a8:	ee08 0a10 	vmov	s16, r0
 80108ac:	f000 ff00 	bl	80116b0 <__mcmp>
 80108b0:	2800      	cmp	r0, #0
 80108b2:	dc03      	bgt.n	80108bc <_dtoa_r+0xa9c>
 80108b4:	d1e0      	bne.n	8010878 <_dtoa_r+0xa58>
 80108b6:	f01a 0f01 	tst.w	sl, #1
 80108ba:	d0dd      	beq.n	8010878 <_dtoa_r+0xa58>
 80108bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80108c0:	d1d7      	bne.n	8010872 <_dtoa_r+0xa52>
 80108c2:	2339      	movs	r3, #57	; 0x39
 80108c4:	f88b 3000 	strb.w	r3, [fp]
 80108c8:	462b      	mov	r3, r5
 80108ca:	461d      	mov	r5, r3
 80108cc:	3b01      	subs	r3, #1
 80108ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80108d2:	2a39      	cmp	r2, #57	; 0x39
 80108d4:	d071      	beq.n	80109ba <_dtoa_r+0xb9a>
 80108d6:	3201      	adds	r2, #1
 80108d8:	701a      	strb	r2, [r3, #0]
 80108da:	e746      	b.n	801076a <_dtoa_r+0x94a>
 80108dc:	2a00      	cmp	r2, #0
 80108de:	dd07      	ble.n	80108f0 <_dtoa_r+0xad0>
 80108e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80108e4:	d0ed      	beq.n	80108c2 <_dtoa_r+0xaa2>
 80108e6:	f10a 0301 	add.w	r3, sl, #1
 80108ea:	f88b 3000 	strb.w	r3, [fp]
 80108ee:	e73c      	b.n	801076a <_dtoa_r+0x94a>
 80108f0:	9b05      	ldr	r3, [sp, #20]
 80108f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80108f6:	4599      	cmp	r9, r3
 80108f8:	d047      	beq.n	801098a <_dtoa_r+0xb6a>
 80108fa:	ee18 1a10 	vmov	r1, s16
 80108fe:	2300      	movs	r3, #0
 8010900:	220a      	movs	r2, #10
 8010902:	4620      	mov	r0, r4
 8010904:	f000 fc6a 	bl	80111dc <__multadd>
 8010908:	45b8      	cmp	r8, r7
 801090a:	ee08 0a10 	vmov	s16, r0
 801090e:	f04f 0300 	mov.w	r3, #0
 8010912:	f04f 020a 	mov.w	r2, #10
 8010916:	4641      	mov	r1, r8
 8010918:	4620      	mov	r0, r4
 801091a:	d106      	bne.n	801092a <_dtoa_r+0xb0a>
 801091c:	f000 fc5e 	bl	80111dc <__multadd>
 8010920:	4680      	mov	r8, r0
 8010922:	4607      	mov	r7, r0
 8010924:	f109 0901 	add.w	r9, r9, #1
 8010928:	e772      	b.n	8010810 <_dtoa_r+0x9f0>
 801092a:	f000 fc57 	bl	80111dc <__multadd>
 801092e:	4639      	mov	r1, r7
 8010930:	4680      	mov	r8, r0
 8010932:	2300      	movs	r3, #0
 8010934:	220a      	movs	r2, #10
 8010936:	4620      	mov	r0, r4
 8010938:	f000 fc50 	bl	80111dc <__multadd>
 801093c:	4607      	mov	r7, r0
 801093e:	e7f1      	b.n	8010924 <_dtoa_r+0xb04>
 8010940:	9b03      	ldr	r3, [sp, #12]
 8010942:	9302      	str	r3, [sp, #8]
 8010944:	9d01      	ldr	r5, [sp, #4]
 8010946:	ee18 0a10 	vmov	r0, s16
 801094a:	4631      	mov	r1, r6
 801094c:	f7ff f9dc 	bl	800fd08 <quorem>
 8010950:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010954:	9b01      	ldr	r3, [sp, #4]
 8010956:	f805 ab01 	strb.w	sl, [r5], #1
 801095a:	1aea      	subs	r2, r5, r3
 801095c:	9b02      	ldr	r3, [sp, #8]
 801095e:	4293      	cmp	r3, r2
 8010960:	dd09      	ble.n	8010976 <_dtoa_r+0xb56>
 8010962:	ee18 1a10 	vmov	r1, s16
 8010966:	2300      	movs	r3, #0
 8010968:	220a      	movs	r2, #10
 801096a:	4620      	mov	r0, r4
 801096c:	f000 fc36 	bl	80111dc <__multadd>
 8010970:	ee08 0a10 	vmov	s16, r0
 8010974:	e7e7      	b.n	8010946 <_dtoa_r+0xb26>
 8010976:	9b02      	ldr	r3, [sp, #8]
 8010978:	2b00      	cmp	r3, #0
 801097a:	bfc8      	it	gt
 801097c:	461d      	movgt	r5, r3
 801097e:	9b01      	ldr	r3, [sp, #4]
 8010980:	bfd8      	it	le
 8010982:	2501      	movle	r5, #1
 8010984:	441d      	add	r5, r3
 8010986:	f04f 0800 	mov.w	r8, #0
 801098a:	ee18 1a10 	vmov	r1, s16
 801098e:	2201      	movs	r2, #1
 8010990:	4620      	mov	r0, r4
 8010992:	f000 fe1d 	bl	80115d0 <__lshift>
 8010996:	4631      	mov	r1, r6
 8010998:	ee08 0a10 	vmov	s16, r0
 801099c:	f000 fe88 	bl	80116b0 <__mcmp>
 80109a0:	2800      	cmp	r0, #0
 80109a2:	dc91      	bgt.n	80108c8 <_dtoa_r+0xaa8>
 80109a4:	d102      	bne.n	80109ac <_dtoa_r+0xb8c>
 80109a6:	f01a 0f01 	tst.w	sl, #1
 80109aa:	d18d      	bne.n	80108c8 <_dtoa_r+0xaa8>
 80109ac:	462b      	mov	r3, r5
 80109ae:	461d      	mov	r5, r3
 80109b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109b4:	2a30      	cmp	r2, #48	; 0x30
 80109b6:	d0fa      	beq.n	80109ae <_dtoa_r+0xb8e>
 80109b8:	e6d7      	b.n	801076a <_dtoa_r+0x94a>
 80109ba:	9a01      	ldr	r2, [sp, #4]
 80109bc:	429a      	cmp	r2, r3
 80109be:	d184      	bne.n	80108ca <_dtoa_r+0xaaa>
 80109c0:	9b00      	ldr	r3, [sp, #0]
 80109c2:	3301      	adds	r3, #1
 80109c4:	9300      	str	r3, [sp, #0]
 80109c6:	2331      	movs	r3, #49	; 0x31
 80109c8:	7013      	strb	r3, [r2, #0]
 80109ca:	e6ce      	b.n	801076a <_dtoa_r+0x94a>
 80109cc:	4b09      	ldr	r3, [pc, #36]	; (80109f4 <_dtoa_r+0xbd4>)
 80109ce:	f7ff ba95 	b.w	800fefc <_dtoa_r+0xdc>
 80109d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	f47f aa6e 	bne.w	800feb6 <_dtoa_r+0x96>
 80109da:	4b07      	ldr	r3, [pc, #28]	; (80109f8 <_dtoa_r+0xbd8>)
 80109dc:	f7ff ba8e 	b.w	800fefc <_dtoa_r+0xdc>
 80109e0:	9b02      	ldr	r3, [sp, #8]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	dcae      	bgt.n	8010944 <_dtoa_r+0xb24>
 80109e6:	9b06      	ldr	r3, [sp, #24]
 80109e8:	2b02      	cmp	r3, #2
 80109ea:	f73f aea8 	bgt.w	801073e <_dtoa_r+0x91e>
 80109ee:	e7a9      	b.n	8010944 <_dtoa_r+0xb24>
 80109f0:	08012fb8 	.word	0x08012fb8
 80109f4:	08012db8 	.word	0x08012db8
 80109f8:	08012f39 	.word	0x08012f39

080109fc <rshift>:
 80109fc:	6903      	ldr	r3, [r0, #16]
 80109fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010a02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a06:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010a0a:	f100 0414 	add.w	r4, r0, #20
 8010a0e:	dd45      	ble.n	8010a9c <rshift+0xa0>
 8010a10:	f011 011f 	ands.w	r1, r1, #31
 8010a14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010a18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010a1c:	d10c      	bne.n	8010a38 <rshift+0x3c>
 8010a1e:	f100 0710 	add.w	r7, r0, #16
 8010a22:	4629      	mov	r1, r5
 8010a24:	42b1      	cmp	r1, r6
 8010a26:	d334      	bcc.n	8010a92 <rshift+0x96>
 8010a28:	1a9b      	subs	r3, r3, r2
 8010a2a:	009b      	lsls	r3, r3, #2
 8010a2c:	1eea      	subs	r2, r5, #3
 8010a2e:	4296      	cmp	r6, r2
 8010a30:	bf38      	it	cc
 8010a32:	2300      	movcc	r3, #0
 8010a34:	4423      	add	r3, r4
 8010a36:	e015      	b.n	8010a64 <rshift+0x68>
 8010a38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010a3c:	f1c1 0820 	rsb	r8, r1, #32
 8010a40:	40cf      	lsrs	r7, r1
 8010a42:	f105 0e04 	add.w	lr, r5, #4
 8010a46:	46a1      	mov	r9, r4
 8010a48:	4576      	cmp	r6, lr
 8010a4a:	46f4      	mov	ip, lr
 8010a4c:	d815      	bhi.n	8010a7a <rshift+0x7e>
 8010a4e:	1a9a      	subs	r2, r3, r2
 8010a50:	0092      	lsls	r2, r2, #2
 8010a52:	3a04      	subs	r2, #4
 8010a54:	3501      	adds	r5, #1
 8010a56:	42ae      	cmp	r6, r5
 8010a58:	bf38      	it	cc
 8010a5a:	2200      	movcc	r2, #0
 8010a5c:	18a3      	adds	r3, r4, r2
 8010a5e:	50a7      	str	r7, [r4, r2]
 8010a60:	b107      	cbz	r7, 8010a64 <rshift+0x68>
 8010a62:	3304      	adds	r3, #4
 8010a64:	1b1a      	subs	r2, r3, r4
 8010a66:	42a3      	cmp	r3, r4
 8010a68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010a6c:	bf08      	it	eq
 8010a6e:	2300      	moveq	r3, #0
 8010a70:	6102      	str	r2, [r0, #16]
 8010a72:	bf08      	it	eq
 8010a74:	6143      	streq	r3, [r0, #20]
 8010a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a7a:	f8dc c000 	ldr.w	ip, [ip]
 8010a7e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010a82:	ea4c 0707 	orr.w	r7, ip, r7
 8010a86:	f849 7b04 	str.w	r7, [r9], #4
 8010a8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010a8e:	40cf      	lsrs	r7, r1
 8010a90:	e7da      	b.n	8010a48 <rshift+0x4c>
 8010a92:	f851 cb04 	ldr.w	ip, [r1], #4
 8010a96:	f847 cf04 	str.w	ip, [r7, #4]!
 8010a9a:	e7c3      	b.n	8010a24 <rshift+0x28>
 8010a9c:	4623      	mov	r3, r4
 8010a9e:	e7e1      	b.n	8010a64 <rshift+0x68>

08010aa0 <__hexdig_fun>:
 8010aa0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010aa4:	2b09      	cmp	r3, #9
 8010aa6:	d802      	bhi.n	8010aae <__hexdig_fun+0xe>
 8010aa8:	3820      	subs	r0, #32
 8010aaa:	b2c0      	uxtb	r0, r0
 8010aac:	4770      	bx	lr
 8010aae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010ab2:	2b05      	cmp	r3, #5
 8010ab4:	d801      	bhi.n	8010aba <__hexdig_fun+0x1a>
 8010ab6:	3847      	subs	r0, #71	; 0x47
 8010ab8:	e7f7      	b.n	8010aaa <__hexdig_fun+0xa>
 8010aba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010abe:	2b05      	cmp	r3, #5
 8010ac0:	d801      	bhi.n	8010ac6 <__hexdig_fun+0x26>
 8010ac2:	3827      	subs	r0, #39	; 0x27
 8010ac4:	e7f1      	b.n	8010aaa <__hexdig_fun+0xa>
 8010ac6:	2000      	movs	r0, #0
 8010ac8:	4770      	bx	lr
	...

08010acc <__gethex>:
 8010acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad0:	ed2d 8b02 	vpush	{d8}
 8010ad4:	b089      	sub	sp, #36	; 0x24
 8010ad6:	ee08 0a10 	vmov	s16, r0
 8010ada:	9304      	str	r3, [sp, #16]
 8010adc:	4bb4      	ldr	r3, [pc, #720]	; (8010db0 <__gethex+0x2e4>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	9301      	str	r3, [sp, #4]
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	468b      	mov	fp, r1
 8010ae6:	4690      	mov	r8, r2
 8010ae8:	f7ef fb92 	bl	8000210 <strlen>
 8010aec:	9b01      	ldr	r3, [sp, #4]
 8010aee:	f8db 2000 	ldr.w	r2, [fp]
 8010af2:	4403      	add	r3, r0
 8010af4:	4682      	mov	sl, r0
 8010af6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010afa:	9305      	str	r3, [sp, #20]
 8010afc:	1c93      	adds	r3, r2, #2
 8010afe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010b02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010b06:	32fe      	adds	r2, #254	; 0xfe
 8010b08:	18d1      	adds	r1, r2, r3
 8010b0a:	461f      	mov	r7, r3
 8010b0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010b10:	9100      	str	r1, [sp, #0]
 8010b12:	2830      	cmp	r0, #48	; 0x30
 8010b14:	d0f8      	beq.n	8010b08 <__gethex+0x3c>
 8010b16:	f7ff ffc3 	bl	8010aa0 <__hexdig_fun>
 8010b1a:	4604      	mov	r4, r0
 8010b1c:	2800      	cmp	r0, #0
 8010b1e:	d13a      	bne.n	8010b96 <__gethex+0xca>
 8010b20:	9901      	ldr	r1, [sp, #4]
 8010b22:	4652      	mov	r2, sl
 8010b24:	4638      	mov	r0, r7
 8010b26:	f001 fa23 	bl	8011f70 <strncmp>
 8010b2a:	4605      	mov	r5, r0
 8010b2c:	2800      	cmp	r0, #0
 8010b2e:	d168      	bne.n	8010c02 <__gethex+0x136>
 8010b30:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010b34:	eb07 060a 	add.w	r6, r7, sl
 8010b38:	f7ff ffb2 	bl	8010aa0 <__hexdig_fun>
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	d062      	beq.n	8010c06 <__gethex+0x13a>
 8010b40:	4633      	mov	r3, r6
 8010b42:	7818      	ldrb	r0, [r3, #0]
 8010b44:	2830      	cmp	r0, #48	; 0x30
 8010b46:	461f      	mov	r7, r3
 8010b48:	f103 0301 	add.w	r3, r3, #1
 8010b4c:	d0f9      	beq.n	8010b42 <__gethex+0x76>
 8010b4e:	f7ff ffa7 	bl	8010aa0 <__hexdig_fun>
 8010b52:	2301      	movs	r3, #1
 8010b54:	fab0 f480 	clz	r4, r0
 8010b58:	0964      	lsrs	r4, r4, #5
 8010b5a:	4635      	mov	r5, r6
 8010b5c:	9300      	str	r3, [sp, #0]
 8010b5e:	463a      	mov	r2, r7
 8010b60:	4616      	mov	r6, r2
 8010b62:	3201      	adds	r2, #1
 8010b64:	7830      	ldrb	r0, [r6, #0]
 8010b66:	f7ff ff9b 	bl	8010aa0 <__hexdig_fun>
 8010b6a:	2800      	cmp	r0, #0
 8010b6c:	d1f8      	bne.n	8010b60 <__gethex+0x94>
 8010b6e:	9901      	ldr	r1, [sp, #4]
 8010b70:	4652      	mov	r2, sl
 8010b72:	4630      	mov	r0, r6
 8010b74:	f001 f9fc 	bl	8011f70 <strncmp>
 8010b78:	b980      	cbnz	r0, 8010b9c <__gethex+0xd0>
 8010b7a:	b94d      	cbnz	r5, 8010b90 <__gethex+0xc4>
 8010b7c:	eb06 050a 	add.w	r5, r6, sl
 8010b80:	462a      	mov	r2, r5
 8010b82:	4616      	mov	r6, r2
 8010b84:	3201      	adds	r2, #1
 8010b86:	7830      	ldrb	r0, [r6, #0]
 8010b88:	f7ff ff8a 	bl	8010aa0 <__hexdig_fun>
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	d1f8      	bne.n	8010b82 <__gethex+0xb6>
 8010b90:	1bad      	subs	r5, r5, r6
 8010b92:	00ad      	lsls	r5, r5, #2
 8010b94:	e004      	b.n	8010ba0 <__gethex+0xd4>
 8010b96:	2400      	movs	r4, #0
 8010b98:	4625      	mov	r5, r4
 8010b9a:	e7e0      	b.n	8010b5e <__gethex+0x92>
 8010b9c:	2d00      	cmp	r5, #0
 8010b9e:	d1f7      	bne.n	8010b90 <__gethex+0xc4>
 8010ba0:	7833      	ldrb	r3, [r6, #0]
 8010ba2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010ba6:	2b50      	cmp	r3, #80	; 0x50
 8010ba8:	d13b      	bne.n	8010c22 <__gethex+0x156>
 8010baa:	7873      	ldrb	r3, [r6, #1]
 8010bac:	2b2b      	cmp	r3, #43	; 0x2b
 8010bae:	d02c      	beq.n	8010c0a <__gethex+0x13e>
 8010bb0:	2b2d      	cmp	r3, #45	; 0x2d
 8010bb2:	d02e      	beq.n	8010c12 <__gethex+0x146>
 8010bb4:	1c71      	adds	r1, r6, #1
 8010bb6:	f04f 0900 	mov.w	r9, #0
 8010bba:	7808      	ldrb	r0, [r1, #0]
 8010bbc:	f7ff ff70 	bl	8010aa0 <__hexdig_fun>
 8010bc0:	1e43      	subs	r3, r0, #1
 8010bc2:	b2db      	uxtb	r3, r3
 8010bc4:	2b18      	cmp	r3, #24
 8010bc6:	d82c      	bhi.n	8010c22 <__gethex+0x156>
 8010bc8:	f1a0 0210 	sub.w	r2, r0, #16
 8010bcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010bd0:	f7ff ff66 	bl	8010aa0 <__hexdig_fun>
 8010bd4:	1e43      	subs	r3, r0, #1
 8010bd6:	b2db      	uxtb	r3, r3
 8010bd8:	2b18      	cmp	r3, #24
 8010bda:	d91d      	bls.n	8010c18 <__gethex+0x14c>
 8010bdc:	f1b9 0f00 	cmp.w	r9, #0
 8010be0:	d000      	beq.n	8010be4 <__gethex+0x118>
 8010be2:	4252      	negs	r2, r2
 8010be4:	4415      	add	r5, r2
 8010be6:	f8cb 1000 	str.w	r1, [fp]
 8010bea:	b1e4      	cbz	r4, 8010c26 <__gethex+0x15a>
 8010bec:	9b00      	ldr	r3, [sp, #0]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	bf14      	ite	ne
 8010bf2:	2700      	movne	r7, #0
 8010bf4:	2706      	moveq	r7, #6
 8010bf6:	4638      	mov	r0, r7
 8010bf8:	b009      	add	sp, #36	; 0x24
 8010bfa:	ecbd 8b02 	vpop	{d8}
 8010bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c02:	463e      	mov	r6, r7
 8010c04:	4625      	mov	r5, r4
 8010c06:	2401      	movs	r4, #1
 8010c08:	e7ca      	b.n	8010ba0 <__gethex+0xd4>
 8010c0a:	f04f 0900 	mov.w	r9, #0
 8010c0e:	1cb1      	adds	r1, r6, #2
 8010c10:	e7d3      	b.n	8010bba <__gethex+0xee>
 8010c12:	f04f 0901 	mov.w	r9, #1
 8010c16:	e7fa      	b.n	8010c0e <__gethex+0x142>
 8010c18:	230a      	movs	r3, #10
 8010c1a:	fb03 0202 	mla	r2, r3, r2, r0
 8010c1e:	3a10      	subs	r2, #16
 8010c20:	e7d4      	b.n	8010bcc <__gethex+0x100>
 8010c22:	4631      	mov	r1, r6
 8010c24:	e7df      	b.n	8010be6 <__gethex+0x11a>
 8010c26:	1bf3      	subs	r3, r6, r7
 8010c28:	3b01      	subs	r3, #1
 8010c2a:	4621      	mov	r1, r4
 8010c2c:	2b07      	cmp	r3, #7
 8010c2e:	dc0b      	bgt.n	8010c48 <__gethex+0x17c>
 8010c30:	ee18 0a10 	vmov	r0, s16
 8010c34:	f000 fa70 	bl	8011118 <_Balloc>
 8010c38:	4604      	mov	r4, r0
 8010c3a:	b940      	cbnz	r0, 8010c4e <__gethex+0x182>
 8010c3c:	4b5d      	ldr	r3, [pc, #372]	; (8010db4 <__gethex+0x2e8>)
 8010c3e:	4602      	mov	r2, r0
 8010c40:	21de      	movs	r1, #222	; 0xde
 8010c42:	485d      	ldr	r0, [pc, #372]	; (8010db8 <__gethex+0x2ec>)
 8010c44:	f001 f9b6 	bl	8011fb4 <__assert_func>
 8010c48:	3101      	adds	r1, #1
 8010c4a:	105b      	asrs	r3, r3, #1
 8010c4c:	e7ee      	b.n	8010c2c <__gethex+0x160>
 8010c4e:	f100 0914 	add.w	r9, r0, #20
 8010c52:	f04f 0b00 	mov.w	fp, #0
 8010c56:	f1ca 0301 	rsb	r3, sl, #1
 8010c5a:	f8cd 9008 	str.w	r9, [sp, #8]
 8010c5e:	f8cd b000 	str.w	fp, [sp]
 8010c62:	9306      	str	r3, [sp, #24]
 8010c64:	42b7      	cmp	r7, r6
 8010c66:	d340      	bcc.n	8010cea <__gethex+0x21e>
 8010c68:	9802      	ldr	r0, [sp, #8]
 8010c6a:	9b00      	ldr	r3, [sp, #0]
 8010c6c:	f840 3b04 	str.w	r3, [r0], #4
 8010c70:	eba0 0009 	sub.w	r0, r0, r9
 8010c74:	1080      	asrs	r0, r0, #2
 8010c76:	0146      	lsls	r6, r0, #5
 8010c78:	6120      	str	r0, [r4, #16]
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f000 fb3e 	bl	80112fc <__hi0bits>
 8010c80:	1a30      	subs	r0, r6, r0
 8010c82:	f8d8 6000 	ldr.w	r6, [r8]
 8010c86:	42b0      	cmp	r0, r6
 8010c88:	dd63      	ble.n	8010d52 <__gethex+0x286>
 8010c8a:	1b87      	subs	r7, r0, r6
 8010c8c:	4639      	mov	r1, r7
 8010c8e:	4620      	mov	r0, r4
 8010c90:	f000 fee2 	bl	8011a58 <__any_on>
 8010c94:	4682      	mov	sl, r0
 8010c96:	b1a8      	cbz	r0, 8010cc4 <__gethex+0x1f8>
 8010c98:	1e7b      	subs	r3, r7, #1
 8010c9a:	1159      	asrs	r1, r3, #5
 8010c9c:	f003 021f 	and.w	r2, r3, #31
 8010ca0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010ca4:	f04f 0a01 	mov.w	sl, #1
 8010ca8:	fa0a f202 	lsl.w	r2, sl, r2
 8010cac:	420a      	tst	r2, r1
 8010cae:	d009      	beq.n	8010cc4 <__gethex+0x1f8>
 8010cb0:	4553      	cmp	r3, sl
 8010cb2:	dd05      	ble.n	8010cc0 <__gethex+0x1f4>
 8010cb4:	1eb9      	subs	r1, r7, #2
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	f000 fece 	bl	8011a58 <__any_on>
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	d145      	bne.n	8010d4c <__gethex+0x280>
 8010cc0:	f04f 0a02 	mov.w	sl, #2
 8010cc4:	4639      	mov	r1, r7
 8010cc6:	4620      	mov	r0, r4
 8010cc8:	f7ff fe98 	bl	80109fc <rshift>
 8010ccc:	443d      	add	r5, r7
 8010cce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010cd2:	42ab      	cmp	r3, r5
 8010cd4:	da4c      	bge.n	8010d70 <__gethex+0x2a4>
 8010cd6:	ee18 0a10 	vmov	r0, s16
 8010cda:	4621      	mov	r1, r4
 8010cdc:	f000 fa5c 	bl	8011198 <_Bfree>
 8010ce0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	6013      	str	r3, [r2, #0]
 8010ce6:	27a3      	movs	r7, #163	; 0xa3
 8010ce8:	e785      	b.n	8010bf6 <__gethex+0x12a>
 8010cea:	1e73      	subs	r3, r6, #1
 8010cec:	9a05      	ldr	r2, [sp, #20]
 8010cee:	9303      	str	r3, [sp, #12]
 8010cf0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	d019      	beq.n	8010d2c <__gethex+0x260>
 8010cf8:	f1bb 0f20 	cmp.w	fp, #32
 8010cfc:	d107      	bne.n	8010d0e <__gethex+0x242>
 8010cfe:	9b02      	ldr	r3, [sp, #8]
 8010d00:	9a00      	ldr	r2, [sp, #0]
 8010d02:	f843 2b04 	str.w	r2, [r3], #4
 8010d06:	9302      	str	r3, [sp, #8]
 8010d08:	2300      	movs	r3, #0
 8010d0a:	9300      	str	r3, [sp, #0]
 8010d0c:	469b      	mov	fp, r3
 8010d0e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010d12:	f7ff fec5 	bl	8010aa0 <__hexdig_fun>
 8010d16:	9b00      	ldr	r3, [sp, #0]
 8010d18:	f000 000f 	and.w	r0, r0, #15
 8010d1c:	fa00 f00b 	lsl.w	r0, r0, fp
 8010d20:	4303      	orrs	r3, r0
 8010d22:	9300      	str	r3, [sp, #0]
 8010d24:	f10b 0b04 	add.w	fp, fp, #4
 8010d28:	9b03      	ldr	r3, [sp, #12]
 8010d2a:	e00d      	b.n	8010d48 <__gethex+0x27c>
 8010d2c:	9b03      	ldr	r3, [sp, #12]
 8010d2e:	9a06      	ldr	r2, [sp, #24]
 8010d30:	4413      	add	r3, r2
 8010d32:	42bb      	cmp	r3, r7
 8010d34:	d3e0      	bcc.n	8010cf8 <__gethex+0x22c>
 8010d36:	4618      	mov	r0, r3
 8010d38:	9901      	ldr	r1, [sp, #4]
 8010d3a:	9307      	str	r3, [sp, #28]
 8010d3c:	4652      	mov	r2, sl
 8010d3e:	f001 f917 	bl	8011f70 <strncmp>
 8010d42:	9b07      	ldr	r3, [sp, #28]
 8010d44:	2800      	cmp	r0, #0
 8010d46:	d1d7      	bne.n	8010cf8 <__gethex+0x22c>
 8010d48:	461e      	mov	r6, r3
 8010d4a:	e78b      	b.n	8010c64 <__gethex+0x198>
 8010d4c:	f04f 0a03 	mov.w	sl, #3
 8010d50:	e7b8      	b.n	8010cc4 <__gethex+0x1f8>
 8010d52:	da0a      	bge.n	8010d6a <__gethex+0x29e>
 8010d54:	1a37      	subs	r7, r6, r0
 8010d56:	4621      	mov	r1, r4
 8010d58:	ee18 0a10 	vmov	r0, s16
 8010d5c:	463a      	mov	r2, r7
 8010d5e:	f000 fc37 	bl	80115d0 <__lshift>
 8010d62:	1bed      	subs	r5, r5, r7
 8010d64:	4604      	mov	r4, r0
 8010d66:	f100 0914 	add.w	r9, r0, #20
 8010d6a:	f04f 0a00 	mov.w	sl, #0
 8010d6e:	e7ae      	b.n	8010cce <__gethex+0x202>
 8010d70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010d74:	42a8      	cmp	r0, r5
 8010d76:	dd72      	ble.n	8010e5e <__gethex+0x392>
 8010d78:	1b45      	subs	r5, r0, r5
 8010d7a:	42ae      	cmp	r6, r5
 8010d7c:	dc36      	bgt.n	8010dec <__gethex+0x320>
 8010d7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010d82:	2b02      	cmp	r3, #2
 8010d84:	d02a      	beq.n	8010ddc <__gethex+0x310>
 8010d86:	2b03      	cmp	r3, #3
 8010d88:	d02c      	beq.n	8010de4 <__gethex+0x318>
 8010d8a:	2b01      	cmp	r3, #1
 8010d8c:	d11c      	bne.n	8010dc8 <__gethex+0x2fc>
 8010d8e:	42ae      	cmp	r6, r5
 8010d90:	d11a      	bne.n	8010dc8 <__gethex+0x2fc>
 8010d92:	2e01      	cmp	r6, #1
 8010d94:	d112      	bne.n	8010dbc <__gethex+0x2f0>
 8010d96:	9a04      	ldr	r2, [sp, #16]
 8010d98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010d9c:	6013      	str	r3, [r2, #0]
 8010d9e:	2301      	movs	r3, #1
 8010da0:	6123      	str	r3, [r4, #16]
 8010da2:	f8c9 3000 	str.w	r3, [r9]
 8010da6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010da8:	2762      	movs	r7, #98	; 0x62
 8010daa:	601c      	str	r4, [r3, #0]
 8010dac:	e723      	b.n	8010bf6 <__gethex+0x12a>
 8010dae:	bf00      	nop
 8010db0:	08013030 	.word	0x08013030
 8010db4:	08012fb8 	.word	0x08012fb8
 8010db8:	08012fc9 	.word	0x08012fc9
 8010dbc:	1e71      	subs	r1, r6, #1
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	f000 fe4a 	bl	8011a58 <__any_on>
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	d1e6      	bne.n	8010d96 <__gethex+0x2ca>
 8010dc8:	ee18 0a10 	vmov	r0, s16
 8010dcc:	4621      	mov	r1, r4
 8010dce:	f000 f9e3 	bl	8011198 <_Bfree>
 8010dd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	6013      	str	r3, [r2, #0]
 8010dd8:	2750      	movs	r7, #80	; 0x50
 8010dda:	e70c      	b.n	8010bf6 <__gethex+0x12a>
 8010ddc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d1f2      	bne.n	8010dc8 <__gethex+0x2fc>
 8010de2:	e7d8      	b.n	8010d96 <__gethex+0x2ca>
 8010de4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d1d5      	bne.n	8010d96 <__gethex+0x2ca>
 8010dea:	e7ed      	b.n	8010dc8 <__gethex+0x2fc>
 8010dec:	1e6f      	subs	r7, r5, #1
 8010dee:	f1ba 0f00 	cmp.w	sl, #0
 8010df2:	d131      	bne.n	8010e58 <__gethex+0x38c>
 8010df4:	b127      	cbz	r7, 8010e00 <__gethex+0x334>
 8010df6:	4639      	mov	r1, r7
 8010df8:	4620      	mov	r0, r4
 8010dfa:	f000 fe2d 	bl	8011a58 <__any_on>
 8010dfe:	4682      	mov	sl, r0
 8010e00:	117b      	asrs	r3, r7, #5
 8010e02:	2101      	movs	r1, #1
 8010e04:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010e08:	f007 071f 	and.w	r7, r7, #31
 8010e0c:	fa01 f707 	lsl.w	r7, r1, r7
 8010e10:	421f      	tst	r7, r3
 8010e12:	4629      	mov	r1, r5
 8010e14:	4620      	mov	r0, r4
 8010e16:	bf18      	it	ne
 8010e18:	f04a 0a02 	orrne.w	sl, sl, #2
 8010e1c:	1b76      	subs	r6, r6, r5
 8010e1e:	f7ff fded 	bl	80109fc <rshift>
 8010e22:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010e26:	2702      	movs	r7, #2
 8010e28:	f1ba 0f00 	cmp.w	sl, #0
 8010e2c:	d048      	beq.n	8010ec0 <__gethex+0x3f4>
 8010e2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e32:	2b02      	cmp	r3, #2
 8010e34:	d015      	beq.n	8010e62 <__gethex+0x396>
 8010e36:	2b03      	cmp	r3, #3
 8010e38:	d017      	beq.n	8010e6a <__gethex+0x39e>
 8010e3a:	2b01      	cmp	r3, #1
 8010e3c:	d109      	bne.n	8010e52 <__gethex+0x386>
 8010e3e:	f01a 0f02 	tst.w	sl, #2
 8010e42:	d006      	beq.n	8010e52 <__gethex+0x386>
 8010e44:	f8d9 0000 	ldr.w	r0, [r9]
 8010e48:	ea4a 0a00 	orr.w	sl, sl, r0
 8010e4c:	f01a 0f01 	tst.w	sl, #1
 8010e50:	d10e      	bne.n	8010e70 <__gethex+0x3a4>
 8010e52:	f047 0710 	orr.w	r7, r7, #16
 8010e56:	e033      	b.n	8010ec0 <__gethex+0x3f4>
 8010e58:	f04f 0a01 	mov.w	sl, #1
 8010e5c:	e7d0      	b.n	8010e00 <__gethex+0x334>
 8010e5e:	2701      	movs	r7, #1
 8010e60:	e7e2      	b.n	8010e28 <__gethex+0x35c>
 8010e62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e64:	f1c3 0301 	rsb	r3, r3, #1
 8010e68:	9315      	str	r3, [sp, #84]	; 0x54
 8010e6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d0f0      	beq.n	8010e52 <__gethex+0x386>
 8010e70:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010e74:	f104 0314 	add.w	r3, r4, #20
 8010e78:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010e7c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010e80:	f04f 0c00 	mov.w	ip, #0
 8010e84:	4618      	mov	r0, r3
 8010e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e8a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010e8e:	d01c      	beq.n	8010eca <__gethex+0x3fe>
 8010e90:	3201      	adds	r2, #1
 8010e92:	6002      	str	r2, [r0, #0]
 8010e94:	2f02      	cmp	r7, #2
 8010e96:	f104 0314 	add.w	r3, r4, #20
 8010e9a:	d13f      	bne.n	8010f1c <__gethex+0x450>
 8010e9c:	f8d8 2000 	ldr.w	r2, [r8]
 8010ea0:	3a01      	subs	r2, #1
 8010ea2:	42b2      	cmp	r2, r6
 8010ea4:	d10a      	bne.n	8010ebc <__gethex+0x3f0>
 8010ea6:	1171      	asrs	r1, r6, #5
 8010ea8:	2201      	movs	r2, #1
 8010eaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010eae:	f006 061f 	and.w	r6, r6, #31
 8010eb2:	fa02 f606 	lsl.w	r6, r2, r6
 8010eb6:	421e      	tst	r6, r3
 8010eb8:	bf18      	it	ne
 8010eba:	4617      	movne	r7, r2
 8010ebc:	f047 0720 	orr.w	r7, r7, #32
 8010ec0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ec2:	601c      	str	r4, [r3, #0]
 8010ec4:	9b04      	ldr	r3, [sp, #16]
 8010ec6:	601d      	str	r5, [r3, #0]
 8010ec8:	e695      	b.n	8010bf6 <__gethex+0x12a>
 8010eca:	4299      	cmp	r1, r3
 8010ecc:	f843 cc04 	str.w	ip, [r3, #-4]
 8010ed0:	d8d8      	bhi.n	8010e84 <__gethex+0x3b8>
 8010ed2:	68a3      	ldr	r3, [r4, #8]
 8010ed4:	459b      	cmp	fp, r3
 8010ed6:	db19      	blt.n	8010f0c <__gethex+0x440>
 8010ed8:	6861      	ldr	r1, [r4, #4]
 8010eda:	ee18 0a10 	vmov	r0, s16
 8010ede:	3101      	adds	r1, #1
 8010ee0:	f000 f91a 	bl	8011118 <_Balloc>
 8010ee4:	4681      	mov	r9, r0
 8010ee6:	b918      	cbnz	r0, 8010ef0 <__gethex+0x424>
 8010ee8:	4b1a      	ldr	r3, [pc, #104]	; (8010f54 <__gethex+0x488>)
 8010eea:	4602      	mov	r2, r0
 8010eec:	2184      	movs	r1, #132	; 0x84
 8010eee:	e6a8      	b.n	8010c42 <__gethex+0x176>
 8010ef0:	6922      	ldr	r2, [r4, #16]
 8010ef2:	3202      	adds	r2, #2
 8010ef4:	f104 010c 	add.w	r1, r4, #12
 8010ef8:	0092      	lsls	r2, r2, #2
 8010efa:	300c      	adds	r0, #12
 8010efc:	f7fd f99a 	bl	800e234 <memcpy>
 8010f00:	4621      	mov	r1, r4
 8010f02:	ee18 0a10 	vmov	r0, s16
 8010f06:	f000 f947 	bl	8011198 <_Bfree>
 8010f0a:	464c      	mov	r4, r9
 8010f0c:	6923      	ldr	r3, [r4, #16]
 8010f0e:	1c5a      	adds	r2, r3, #1
 8010f10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010f14:	6122      	str	r2, [r4, #16]
 8010f16:	2201      	movs	r2, #1
 8010f18:	615a      	str	r2, [r3, #20]
 8010f1a:	e7bb      	b.n	8010e94 <__gethex+0x3c8>
 8010f1c:	6922      	ldr	r2, [r4, #16]
 8010f1e:	455a      	cmp	r2, fp
 8010f20:	dd0b      	ble.n	8010f3a <__gethex+0x46e>
 8010f22:	2101      	movs	r1, #1
 8010f24:	4620      	mov	r0, r4
 8010f26:	f7ff fd69 	bl	80109fc <rshift>
 8010f2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f2e:	3501      	adds	r5, #1
 8010f30:	42ab      	cmp	r3, r5
 8010f32:	f6ff aed0 	blt.w	8010cd6 <__gethex+0x20a>
 8010f36:	2701      	movs	r7, #1
 8010f38:	e7c0      	b.n	8010ebc <__gethex+0x3f0>
 8010f3a:	f016 061f 	ands.w	r6, r6, #31
 8010f3e:	d0fa      	beq.n	8010f36 <__gethex+0x46a>
 8010f40:	4453      	add	r3, sl
 8010f42:	f1c6 0620 	rsb	r6, r6, #32
 8010f46:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010f4a:	f000 f9d7 	bl	80112fc <__hi0bits>
 8010f4e:	42b0      	cmp	r0, r6
 8010f50:	dbe7      	blt.n	8010f22 <__gethex+0x456>
 8010f52:	e7f0      	b.n	8010f36 <__gethex+0x46a>
 8010f54:	08012fb8 	.word	0x08012fb8

08010f58 <L_shift>:
 8010f58:	f1c2 0208 	rsb	r2, r2, #8
 8010f5c:	0092      	lsls	r2, r2, #2
 8010f5e:	b570      	push	{r4, r5, r6, lr}
 8010f60:	f1c2 0620 	rsb	r6, r2, #32
 8010f64:	6843      	ldr	r3, [r0, #4]
 8010f66:	6804      	ldr	r4, [r0, #0]
 8010f68:	fa03 f506 	lsl.w	r5, r3, r6
 8010f6c:	432c      	orrs	r4, r5
 8010f6e:	40d3      	lsrs	r3, r2
 8010f70:	6004      	str	r4, [r0, #0]
 8010f72:	f840 3f04 	str.w	r3, [r0, #4]!
 8010f76:	4288      	cmp	r0, r1
 8010f78:	d3f4      	bcc.n	8010f64 <L_shift+0xc>
 8010f7a:	bd70      	pop	{r4, r5, r6, pc}

08010f7c <__match>:
 8010f7c:	b530      	push	{r4, r5, lr}
 8010f7e:	6803      	ldr	r3, [r0, #0]
 8010f80:	3301      	adds	r3, #1
 8010f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f86:	b914      	cbnz	r4, 8010f8e <__match+0x12>
 8010f88:	6003      	str	r3, [r0, #0]
 8010f8a:	2001      	movs	r0, #1
 8010f8c:	bd30      	pop	{r4, r5, pc}
 8010f8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010f96:	2d19      	cmp	r5, #25
 8010f98:	bf98      	it	ls
 8010f9a:	3220      	addls	r2, #32
 8010f9c:	42a2      	cmp	r2, r4
 8010f9e:	d0f0      	beq.n	8010f82 <__match+0x6>
 8010fa0:	2000      	movs	r0, #0
 8010fa2:	e7f3      	b.n	8010f8c <__match+0x10>

08010fa4 <__hexnan>:
 8010fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa8:	680b      	ldr	r3, [r1, #0]
 8010faa:	115e      	asrs	r6, r3, #5
 8010fac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010fb0:	f013 031f 	ands.w	r3, r3, #31
 8010fb4:	b087      	sub	sp, #28
 8010fb6:	bf18      	it	ne
 8010fb8:	3604      	addne	r6, #4
 8010fba:	2500      	movs	r5, #0
 8010fbc:	1f37      	subs	r7, r6, #4
 8010fbe:	4690      	mov	r8, r2
 8010fc0:	6802      	ldr	r2, [r0, #0]
 8010fc2:	9301      	str	r3, [sp, #4]
 8010fc4:	4682      	mov	sl, r0
 8010fc6:	f846 5c04 	str.w	r5, [r6, #-4]
 8010fca:	46b9      	mov	r9, r7
 8010fcc:	463c      	mov	r4, r7
 8010fce:	9502      	str	r5, [sp, #8]
 8010fd0:	46ab      	mov	fp, r5
 8010fd2:	7851      	ldrb	r1, [r2, #1]
 8010fd4:	1c53      	adds	r3, r2, #1
 8010fd6:	9303      	str	r3, [sp, #12]
 8010fd8:	b341      	cbz	r1, 801102c <__hexnan+0x88>
 8010fda:	4608      	mov	r0, r1
 8010fdc:	9205      	str	r2, [sp, #20]
 8010fde:	9104      	str	r1, [sp, #16]
 8010fe0:	f7ff fd5e 	bl	8010aa0 <__hexdig_fun>
 8010fe4:	2800      	cmp	r0, #0
 8010fe6:	d14f      	bne.n	8011088 <__hexnan+0xe4>
 8010fe8:	9904      	ldr	r1, [sp, #16]
 8010fea:	9a05      	ldr	r2, [sp, #20]
 8010fec:	2920      	cmp	r1, #32
 8010fee:	d818      	bhi.n	8011022 <__hexnan+0x7e>
 8010ff0:	9b02      	ldr	r3, [sp, #8]
 8010ff2:	459b      	cmp	fp, r3
 8010ff4:	dd13      	ble.n	801101e <__hexnan+0x7a>
 8010ff6:	454c      	cmp	r4, r9
 8010ff8:	d206      	bcs.n	8011008 <__hexnan+0x64>
 8010ffa:	2d07      	cmp	r5, #7
 8010ffc:	dc04      	bgt.n	8011008 <__hexnan+0x64>
 8010ffe:	462a      	mov	r2, r5
 8011000:	4649      	mov	r1, r9
 8011002:	4620      	mov	r0, r4
 8011004:	f7ff ffa8 	bl	8010f58 <L_shift>
 8011008:	4544      	cmp	r4, r8
 801100a:	d950      	bls.n	80110ae <__hexnan+0x10a>
 801100c:	2300      	movs	r3, #0
 801100e:	f1a4 0904 	sub.w	r9, r4, #4
 8011012:	f844 3c04 	str.w	r3, [r4, #-4]
 8011016:	f8cd b008 	str.w	fp, [sp, #8]
 801101a:	464c      	mov	r4, r9
 801101c:	461d      	mov	r5, r3
 801101e:	9a03      	ldr	r2, [sp, #12]
 8011020:	e7d7      	b.n	8010fd2 <__hexnan+0x2e>
 8011022:	2929      	cmp	r1, #41	; 0x29
 8011024:	d156      	bne.n	80110d4 <__hexnan+0x130>
 8011026:	3202      	adds	r2, #2
 8011028:	f8ca 2000 	str.w	r2, [sl]
 801102c:	f1bb 0f00 	cmp.w	fp, #0
 8011030:	d050      	beq.n	80110d4 <__hexnan+0x130>
 8011032:	454c      	cmp	r4, r9
 8011034:	d206      	bcs.n	8011044 <__hexnan+0xa0>
 8011036:	2d07      	cmp	r5, #7
 8011038:	dc04      	bgt.n	8011044 <__hexnan+0xa0>
 801103a:	462a      	mov	r2, r5
 801103c:	4649      	mov	r1, r9
 801103e:	4620      	mov	r0, r4
 8011040:	f7ff ff8a 	bl	8010f58 <L_shift>
 8011044:	4544      	cmp	r4, r8
 8011046:	d934      	bls.n	80110b2 <__hexnan+0x10e>
 8011048:	f1a8 0204 	sub.w	r2, r8, #4
 801104c:	4623      	mov	r3, r4
 801104e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011052:	f842 1f04 	str.w	r1, [r2, #4]!
 8011056:	429f      	cmp	r7, r3
 8011058:	d2f9      	bcs.n	801104e <__hexnan+0xaa>
 801105a:	1b3b      	subs	r3, r7, r4
 801105c:	f023 0303 	bic.w	r3, r3, #3
 8011060:	3304      	adds	r3, #4
 8011062:	3401      	adds	r4, #1
 8011064:	3e03      	subs	r6, #3
 8011066:	42b4      	cmp	r4, r6
 8011068:	bf88      	it	hi
 801106a:	2304      	movhi	r3, #4
 801106c:	4443      	add	r3, r8
 801106e:	2200      	movs	r2, #0
 8011070:	f843 2b04 	str.w	r2, [r3], #4
 8011074:	429f      	cmp	r7, r3
 8011076:	d2fb      	bcs.n	8011070 <__hexnan+0xcc>
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	b91b      	cbnz	r3, 8011084 <__hexnan+0xe0>
 801107c:	4547      	cmp	r7, r8
 801107e:	d127      	bne.n	80110d0 <__hexnan+0x12c>
 8011080:	2301      	movs	r3, #1
 8011082:	603b      	str	r3, [r7, #0]
 8011084:	2005      	movs	r0, #5
 8011086:	e026      	b.n	80110d6 <__hexnan+0x132>
 8011088:	3501      	adds	r5, #1
 801108a:	2d08      	cmp	r5, #8
 801108c:	f10b 0b01 	add.w	fp, fp, #1
 8011090:	dd06      	ble.n	80110a0 <__hexnan+0xfc>
 8011092:	4544      	cmp	r4, r8
 8011094:	d9c3      	bls.n	801101e <__hexnan+0x7a>
 8011096:	2300      	movs	r3, #0
 8011098:	f844 3c04 	str.w	r3, [r4, #-4]
 801109c:	2501      	movs	r5, #1
 801109e:	3c04      	subs	r4, #4
 80110a0:	6822      	ldr	r2, [r4, #0]
 80110a2:	f000 000f 	and.w	r0, r0, #15
 80110a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80110aa:	6022      	str	r2, [r4, #0]
 80110ac:	e7b7      	b.n	801101e <__hexnan+0x7a>
 80110ae:	2508      	movs	r5, #8
 80110b0:	e7b5      	b.n	801101e <__hexnan+0x7a>
 80110b2:	9b01      	ldr	r3, [sp, #4]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d0df      	beq.n	8011078 <__hexnan+0xd4>
 80110b8:	f04f 32ff 	mov.w	r2, #4294967295
 80110bc:	f1c3 0320 	rsb	r3, r3, #32
 80110c0:	fa22 f303 	lsr.w	r3, r2, r3
 80110c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80110c8:	401a      	ands	r2, r3
 80110ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80110ce:	e7d3      	b.n	8011078 <__hexnan+0xd4>
 80110d0:	3f04      	subs	r7, #4
 80110d2:	e7d1      	b.n	8011078 <__hexnan+0xd4>
 80110d4:	2004      	movs	r0, #4
 80110d6:	b007      	add	sp, #28
 80110d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110dc <_localeconv_r>:
 80110dc:	4800      	ldr	r0, [pc, #0]	; (80110e0 <_localeconv_r+0x4>)
 80110de:	4770      	bx	lr
 80110e0:	20000420 	.word	0x20000420

080110e4 <malloc>:
 80110e4:	4b02      	ldr	r3, [pc, #8]	; (80110f0 <malloc+0xc>)
 80110e6:	4601      	mov	r1, r0
 80110e8:	6818      	ldr	r0, [r3, #0]
 80110ea:	f000 bd59 	b.w	8011ba0 <_malloc_r>
 80110ee:	bf00      	nop
 80110f0:	200002c8 	.word	0x200002c8

080110f4 <__ascii_mbtowc>:
 80110f4:	b082      	sub	sp, #8
 80110f6:	b901      	cbnz	r1, 80110fa <__ascii_mbtowc+0x6>
 80110f8:	a901      	add	r1, sp, #4
 80110fa:	b142      	cbz	r2, 801110e <__ascii_mbtowc+0x1a>
 80110fc:	b14b      	cbz	r3, 8011112 <__ascii_mbtowc+0x1e>
 80110fe:	7813      	ldrb	r3, [r2, #0]
 8011100:	600b      	str	r3, [r1, #0]
 8011102:	7812      	ldrb	r2, [r2, #0]
 8011104:	1e10      	subs	r0, r2, #0
 8011106:	bf18      	it	ne
 8011108:	2001      	movne	r0, #1
 801110a:	b002      	add	sp, #8
 801110c:	4770      	bx	lr
 801110e:	4610      	mov	r0, r2
 8011110:	e7fb      	b.n	801110a <__ascii_mbtowc+0x16>
 8011112:	f06f 0001 	mvn.w	r0, #1
 8011116:	e7f8      	b.n	801110a <__ascii_mbtowc+0x16>

08011118 <_Balloc>:
 8011118:	b570      	push	{r4, r5, r6, lr}
 801111a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801111c:	4604      	mov	r4, r0
 801111e:	460d      	mov	r5, r1
 8011120:	b976      	cbnz	r6, 8011140 <_Balloc+0x28>
 8011122:	2010      	movs	r0, #16
 8011124:	f7ff ffde 	bl	80110e4 <malloc>
 8011128:	4602      	mov	r2, r0
 801112a:	6260      	str	r0, [r4, #36]	; 0x24
 801112c:	b920      	cbnz	r0, 8011138 <_Balloc+0x20>
 801112e:	4b18      	ldr	r3, [pc, #96]	; (8011190 <_Balloc+0x78>)
 8011130:	4818      	ldr	r0, [pc, #96]	; (8011194 <_Balloc+0x7c>)
 8011132:	2166      	movs	r1, #102	; 0x66
 8011134:	f000 ff3e 	bl	8011fb4 <__assert_func>
 8011138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801113c:	6006      	str	r6, [r0, #0]
 801113e:	60c6      	str	r6, [r0, #12]
 8011140:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011142:	68f3      	ldr	r3, [r6, #12]
 8011144:	b183      	cbz	r3, 8011168 <_Balloc+0x50>
 8011146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011148:	68db      	ldr	r3, [r3, #12]
 801114a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801114e:	b9b8      	cbnz	r0, 8011180 <_Balloc+0x68>
 8011150:	2101      	movs	r1, #1
 8011152:	fa01 f605 	lsl.w	r6, r1, r5
 8011156:	1d72      	adds	r2, r6, #5
 8011158:	0092      	lsls	r2, r2, #2
 801115a:	4620      	mov	r0, r4
 801115c:	f000 fc9d 	bl	8011a9a <_calloc_r>
 8011160:	b160      	cbz	r0, 801117c <_Balloc+0x64>
 8011162:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011166:	e00e      	b.n	8011186 <_Balloc+0x6e>
 8011168:	2221      	movs	r2, #33	; 0x21
 801116a:	2104      	movs	r1, #4
 801116c:	4620      	mov	r0, r4
 801116e:	f000 fc94 	bl	8011a9a <_calloc_r>
 8011172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011174:	60f0      	str	r0, [r6, #12]
 8011176:	68db      	ldr	r3, [r3, #12]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d1e4      	bne.n	8011146 <_Balloc+0x2e>
 801117c:	2000      	movs	r0, #0
 801117e:	bd70      	pop	{r4, r5, r6, pc}
 8011180:	6802      	ldr	r2, [r0, #0]
 8011182:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011186:	2300      	movs	r3, #0
 8011188:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801118c:	e7f7      	b.n	801117e <_Balloc+0x66>
 801118e:	bf00      	nop
 8011190:	08012f46 	.word	0x08012f46
 8011194:	08013044 	.word	0x08013044

08011198 <_Bfree>:
 8011198:	b570      	push	{r4, r5, r6, lr}
 801119a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801119c:	4605      	mov	r5, r0
 801119e:	460c      	mov	r4, r1
 80111a0:	b976      	cbnz	r6, 80111c0 <_Bfree+0x28>
 80111a2:	2010      	movs	r0, #16
 80111a4:	f7ff ff9e 	bl	80110e4 <malloc>
 80111a8:	4602      	mov	r2, r0
 80111aa:	6268      	str	r0, [r5, #36]	; 0x24
 80111ac:	b920      	cbnz	r0, 80111b8 <_Bfree+0x20>
 80111ae:	4b09      	ldr	r3, [pc, #36]	; (80111d4 <_Bfree+0x3c>)
 80111b0:	4809      	ldr	r0, [pc, #36]	; (80111d8 <_Bfree+0x40>)
 80111b2:	218a      	movs	r1, #138	; 0x8a
 80111b4:	f000 fefe 	bl	8011fb4 <__assert_func>
 80111b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111bc:	6006      	str	r6, [r0, #0]
 80111be:	60c6      	str	r6, [r0, #12]
 80111c0:	b13c      	cbz	r4, 80111d2 <_Bfree+0x3a>
 80111c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80111c4:	6862      	ldr	r2, [r4, #4]
 80111c6:	68db      	ldr	r3, [r3, #12]
 80111c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80111cc:	6021      	str	r1, [r4, #0]
 80111ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80111d2:	bd70      	pop	{r4, r5, r6, pc}
 80111d4:	08012f46 	.word	0x08012f46
 80111d8:	08013044 	.word	0x08013044

080111dc <__multadd>:
 80111dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111e0:	690d      	ldr	r5, [r1, #16]
 80111e2:	4607      	mov	r7, r0
 80111e4:	460c      	mov	r4, r1
 80111e6:	461e      	mov	r6, r3
 80111e8:	f101 0c14 	add.w	ip, r1, #20
 80111ec:	2000      	movs	r0, #0
 80111ee:	f8dc 3000 	ldr.w	r3, [ip]
 80111f2:	b299      	uxth	r1, r3
 80111f4:	fb02 6101 	mla	r1, r2, r1, r6
 80111f8:	0c1e      	lsrs	r6, r3, #16
 80111fa:	0c0b      	lsrs	r3, r1, #16
 80111fc:	fb02 3306 	mla	r3, r2, r6, r3
 8011200:	b289      	uxth	r1, r1
 8011202:	3001      	adds	r0, #1
 8011204:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011208:	4285      	cmp	r5, r0
 801120a:	f84c 1b04 	str.w	r1, [ip], #4
 801120e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011212:	dcec      	bgt.n	80111ee <__multadd+0x12>
 8011214:	b30e      	cbz	r6, 801125a <__multadd+0x7e>
 8011216:	68a3      	ldr	r3, [r4, #8]
 8011218:	42ab      	cmp	r3, r5
 801121a:	dc19      	bgt.n	8011250 <__multadd+0x74>
 801121c:	6861      	ldr	r1, [r4, #4]
 801121e:	4638      	mov	r0, r7
 8011220:	3101      	adds	r1, #1
 8011222:	f7ff ff79 	bl	8011118 <_Balloc>
 8011226:	4680      	mov	r8, r0
 8011228:	b928      	cbnz	r0, 8011236 <__multadd+0x5a>
 801122a:	4602      	mov	r2, r0
 801122c:	4b0c      	ldr	r3, [pc, #48]	; (8011260 <__multadd+0x84>)
 801122e:	480d      	ldr	r0, [pc, #52]	; (8011264 <__multadd+0x88>)
 8011230:	21b5      	movs	r1, #181	; 0xb5
 8011232:	f000 febf 	bl	8011fb4 <__assert_func>
 8011236:	6922      	ldr	r2, [r4, #16]
 8011238:	3202      	adds	r2, #2
 801123a:	f104 010c 	add.w	r1, r4, #12
 801123e:	0092      	lsls	r2, r2, #2
 8011240:	300c      	adds	r0, #12
 8011242:	f7fc fff7 	bl	800e234 <memcpy>
 8011246:	4621      	mov	r1, r4
 8011248:	4638      	mov	r0, r7
 801124a:	f7ff ffa5 	bl	8011198 <_Bfree>
 801124e:	4644      	mov	r4, r8
 8011250:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011254:	3501      	adds	r5, #1
 8011256:	615e      	str	r6, [r3, #20]
 8011258:	6125      	str	r5, [r4, #16]
 801125a:	4620      	mov	r0, r4
 801125c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011260:	08012fb8 	.word	0x08012fb8
 8011264:	08013044 	.word	0x08013044

08011268 <__s2b>:
 8011268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801126c:	460c      	mov	r4, r1
 801126e:	4615      	mov	r5, r2
 8011270:	461f      	mov	r7, r3
 8011272:	2209      	movs	r2, #9
 8011274:	3308      	adds	r3, #8
 8011276:	4606      	mov	r6, r0
 8011278:	fb93 f3f2 	sdiv	r3, r3, r2
 801127c:	2100      	movs	r1, #0
 801127e:	2201      	movs	r2, #1
 8011280:	429a      	cmp	r2, r3
 8011282:	db09      	blt.n	8011298 <__s2b+0x30>
 8011284:	4630      	mov	r0, r6
 8011286:	f7ff ff47 	bl	8011118 <_Balloc>
 801128a:	b940      	cbnz	r0, 801129e <__s2b+0x36>
 801128c:	4602      	mov	r2, r0
 801128e:	4b19      	ldr	r3, [pc, #100]	; (80112f4 <__s2b+0x8c>)
 8011290:	4819      	ldr	r0, [pc, #100]	; (80112f8 <__s2b+0x90>)
 8011292:	21ce      	movs	r1, #206	; 0xce
 8011294:	f000 fe8e 	bl	8011fb4 <__assert_func>
 8011298:	0052      	lsls	r2, r2, #1
 801129a:	3101      	adds	r1, #1
 801129c:	e7f0      	b.n	8011280 <__s2b+0x18>
 801129e:	9b08      	ldr	r3, [sp, #32]
 80112a0:	6143      	str	r3, [r0, #20]
 80112a2:	2d09      	cmp	r5, #9
 80112a4:	f04f 0301 	mov.w	r3, #1
 80112a8:	6103      	str	r3, [r0, #16]
 80112aa:	dd16      	ble.n	80112da <__s2b+0x72>
 80112ac:	f104 0909 	add.w	r9, r4, #9
 80112b0:	46c8      	mov	r8, r9
 80112b2:	442c      	add	r4, r5
 80112b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80112b8:	4601      	mov	r1, r0
 80112ba:	3b30      	subs	r3, #48	; 0x30
 80112bc:	220a      	movs	r2, #10
 80112be:	4630      	mov	r0, r6
 80112c0:	f7ff ff8c 	bl	80111dc <__multadd>
 80112c4:	45a0      	cmp	r8, r4
 80112c6:	d1f5      	bne.n	80112b4 <__s2b+0x4c>
 80112c8:	f1a5 0408 	sub.w	r4, r5, #8
 80112cc:	444c      	add	r4, r9
 80112ce:	1b2d      	subs	r5, r5, r4
 80112d0:	1963      	adds	r3, r4, r5
 80112d2:	42bb      	cmp	r3, r7
 80112d4:	db04      	blt.n	80112e0 <__s2b+0x78>
 80112d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112da:	340a      	adds	r4, #10
 80112dc:	2509      	movs	r5, #9
 80112de:	e7f6      	b.n	80112ce <__s2b+0x66>
 80112e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80112e4:	4601      	mov	r1, r0
 80112e6:	3b30      	subs	r3, #48	; 0x30
 80112e8:	220a      	movs	r2, #10
 80112ea:	4630      	mov	r0, r6
 80112ec:	f7ff ff76 	bl	80111dc <__multadd>
 80112f0:	e7ee      	b.n	80112d0 <__s2b+0x68>
 80112f2:	bf00      	nop
 80112f4:	08012fb8 	.word	0x08012fb8
 80112f8:	08013044 	.word	0x08013044

080112fc <__hi0bits>:
 80112fc:	0c03      	lsrs	r3, r0, #16
 80112fe:	041b      	lsls	r3, r3, #16
 8011300:	b9d3      	cbnz	r3, 8011338 <__hi0bits+0x3c>
 8011302:	0400      	lsls	r0, r0, #16
 8011304:	2310      	movs	r3, #16
 8011306:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801130a:	bf04      	itt	eq
 801130c:	0200      	lsleq	r0, r0, #8
 801130e:	3308      	addeq	r3, #8
 8011310:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011314:	bf04      	itt	eq
 8011316:	0100      	lsleq	r0, r0, #4
 8011318:	3304      	addeq	r3, #4
 801131a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801131e:	bf04      	itt	eq
 8011320:	0080      	lsleq	r0, r0, #2
 8011322:	3302      	addeq	r3, #2
 8011324:	2800      	cmp	r0, #0
 8011326:	db05      	blt.n	8011334 <__hi0bits+0x38>
 8011328:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801132c:	f103 0301 	add.w	r3, r3, #1
 8011330:	bf08      	it	eq
 8011332:	2320      	moveq	r3, #32
 8011334:	4618      	mov	r0, r3
 8011336:	4770      	bx	lr
 8011338:	2300      	movs	r3, #0
 801133a:	e7e4      	b.n	8011306 <__hi0bits+0xa>

0801133c <__lo0bits>:
 801133c:	6803      	ldr	r3, [r0, #0]
 801133e:	f013 0207 	ands.w	r2, r3, #7
 8011342:	4601      	mov	r1, r0
 8011344:	d00b      	beq.n	801135e <__lo0bits+0x22>
 8011346:	07da      	lsls	r2, r3, #31
 8011348:	d423      	bmi.n	8011392 <__lo0bits+0x56>
 801134a:	0798      	lsls	r0, r3, #30
 801134c:	bf49      	itett	mi
 801134e:	085b      	lsrmi	r3, r3, #1
 8011350:	089b      	lsrpl	r3, r3, #2
 8011352:	2001      	movmi	r0, #1
 8011354:	600b      	strmi	r3, [r1, #0]
 8011356:	bf5c      	itt	pl
 8011358:	600b      	strpl	r3, [r1, #0]
 801135a:	2002      	movpl	r0, #2
 801135c:	4770      	bx	lr
 801135e:	b298      	uxth	r0, r3
 8011360:	b9a8      	cbnz	r0, 801138e <__lo0bits+0x52>
 8011362:	0c1b      	lsrs	r3, r3, #16
 8011364:	2010      	movs	r0, #16
 8011366:	b2da      	uxtb	r2, r3
 8011368:	b90a      	cbnz	r2, 801136e <__lo0bits+0x32>
 801136a:	3008      	adds	r0, #8
 801136c:	0a1b      	lsrs	r3, r3, #8
 801136e:	071a      	lsls	r2, r3, #28
 8011370:	bf04      	itt	eq
 8011372:	091b      	lsreq	r3, r3, #4
 8011374:	3004      	addeq	r0, #4
 8011376:	079a      	lsls	r2, r3, #30
 8011378:	bf04      	itt	eq
 801137a:	089b      	lsreq	r3, r3, #2
 801137c:	3002      	addeq	r0, #2
 801137e:	07da      	lsls	r2, r3, #31
 8011380:	d403      	bmi.n	801138a <__lo0bits+0x4e>
 8011382:	085b      	lsrs	r3, r3, #1
 8011384:	f100 0001 	add.w	r0, r0, #1
 8011388:	d005      	beq.n	8011396 <__lo0bits+0x5a>
 801138a:	600b      	str	r3, [r1, #0]
 801138c:	4770      	bx	lr
 801138e:	4610      	mov	r0, r2
 8011390:	e7e9      	b.n	8011366 <__lo0bits+0x2a>
 8011392:	2000      	movs	r0, #0
 8011394:	4770      	bx	lr
 8011396:	2020      	movs	r0, #32
 8011398:	4770      	bx	lr
	...

0801139c <__i2b>:
 801139c:	b510      	push	{r4, lr}
 801139e:	460c      	mov	r4, r1
 80113a0:	2101      	movs	r1, #1
 80113a2:	f7ff feb9 	bl	8011118 <_Balloc>
 80113a6:	4602      	mov	r2, r0
 80113a8:	b928      	cbnz	r0, 80113b6 <__i2b+0x1a>
 80113aa:	4b05      	ldr	r3, [pc, #20]	; (80113c0 <__i2b+0x24>)
 80113ac:	4805      	ldr	r0, [pc, #20]	; (80113c4 <__i2b+0x28>)
 80113ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80113b2:	f000 fdff 	bl	8011fb4 <__assert_func>
 80113b6:	2301      	movs	r3, #1
 80113b8:	6144      	str	r4, [r0, #20]
 80113ba:	6103      	str	r3, [r0, #16]
 80113bc:	bd10      	pop	{r4, pc}
 80113be:	bf00      	nop
 80113c0:	08012fb8 	.word	0x08012fb8
 80113c4:	08013044 	.word	0x08013044

080113c8 <__multiply>:
 80113c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113cc:	4691      	mov	r9, r2
 80113ce:	690a      	ldr	r2, [r1, #16]
 80113d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80113d4:	429a      	cmp	r2, r3
 80113d6:	bfb8      	it	lt
 80113d8:	460b      	movlt	r3, r1
 80113da:	460c      	mov	r4, r1
 80113dc:	bfbc      	itt	lt
 80113de:	464c      	movlt	r4, r9
 80113e0:	4699      	movlt	r9, r3
 80113e2:	6927      	ldr	r7, [r4, #16]
 80113e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80113e8:	68a3      	ldr	r3, [r4, #8]
 80113ea:	6861      	ldr	r1, [r4, #4]
 80113ec:	eb07 060a 	add.w	r6, r7, sl
 80113f0:	42b3      	cmp	r3, r6
 80113f2:	b085      	sub	sp, #20
 80113f4:	bfb8      	it	lt
 80113f6:	3101      	addlt	r1, #1
 80113f8:	f7ff fe8e 	bl	8011118 <_Balloc>
 80113fc:	b930      	cbnz	r0, 801140c <__multiply+0x44>
 80113fe:	4602      	mov	r2, r0
 8011400:	4b44      	ldr	r3, [pc, #272]	; (8011514 <__multiply+0x14c>)
 8011402:	4845      	ldr	r0, [pc, #276]	; (8011518 <__multiply+0x150>)
 8011404:	f240 115d 	movw	r1, #349	; 0x15d
 8011408:	f000 fdd4 	bl	8011fb4 <__assert_func>
 801140c:	f100 0514 	add.w	r5, r0, #20
 8011410:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011414:	462b      	mov	r3, r5
 8011416:	2200      	movs	r2, #0
 8011418:	4543      	cmp	r3, r8
 801141a:	d321      	bcc.n	8011460 <__multiply+0x98>
 801141c:	f104 0314 	add.w	r3, r4, #20
 8011420:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011424:	f109 0314 	add.w	r3, r9, #20
 8011428:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801142c:	9202      	str	r2, [sp, #8]
 801142e:	1b3a      	subs	r2, r7, r4
 8011430:	3a15      	subs	r2, #21
 8011432:	f022 0203 	bic.w	r2, r2, #3
 8011436:	3204      	adds	r2, #4
 8011438:	f104 0115 	add.w	r1, r4, #21
 801143c:	428f      	cmp	r7, r1
 801143e:	bf38      	it	cc
 8011440:	2204      	movcc	r2, #4
 8011442:	9201      	str	r2, [sp, #4]
 8011444:	9a02      	ldr	r2, [sp, #8]
 8011446:	9303      	str	r3, [sp, #12]
 8011448:	429a      	cmp	r2, r3
 801144a:	d80c      	bhi.n	8011466 <__multiply+0x9e>
 801144c:	2e00      	cmp	r6, #0
 801144e:	dd03      	ble.n	8011458 <__multiply+0x90>
 8011450:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011454:	2b00      	cmp	r3, #0
 8011456:	d05a      	beq.n	801150e <__multiply+0x146>
 8011458:	6106      	str	r6, [r0, #16]
 801145a:	b005      	add	sp, #20
 801145c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011460:	f843 2b04 	str.w	r2, [r3], #4
 8011464:	e7d8      	b.n	8011418 <__multiply+0x50>
 8011466:	f8b3 a000 	ldrh.w	sl, [r3]
 801146a:	f1ba 0f00 	cmp.w	sl, #0
 801146e:	d024      	beq.n	80114ba <__multiply+0xf2>
 8011470:	f104 0e14 	add.w	lr, r4, #20
 8011474:	46a9      	mov	r9, r5
 8011476:	f04f 0c00 	mov.w	ip, #0
 801147a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801147e:	f8d9 1000 	ldr.w	r1, [r9]
 8011482:	fa1f fb82 	uxth.w	fp, r2
 8011486:	b289      	uxth	r1, r1
 8011488:	fb0a 110b 	mla	r1, sl, fp, r1
 801148c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011490:	f8d9 2000 	ldr.w	r2, [r9]
 8011494:	4461      	add	r1, ip
 8011496:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801149a:	fb0a c20b 	mla	r2, sl, fp, ip
 801149e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80114a2:	b289      	uxth	r1, r1
 80114a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80114a8:	4577      	cmp	r7, lr
 80114aa:	f849 1b04 	str.w	r1, [r9], #4
 80114ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80114b2:	d8e2      	bhi.n	801147a <__multiply+0xb2>
 80114b4:	9a01      	ldr	r2, [sp, #4]
 80114b6:	f845 c002 	str.w	ip, [r5, r2]
 80114ba:	9a03      	ldr	r2, [sp, #12]
 80114bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80114c0:	3304      	adds	r3, #4
 80114c2:	f1b9 0f00 	cmp.w	r9, #0
 80114c6:	d020      	beq.n	801150a <__multiply+0x142>
 80114c8:	6829      	ldr	r1, [r5, #0]
 80114ca:	f104 0c14 	add.w	ip, r4, #20
 80114ce:	46ae      	mov	lr, r5
 80114d0:	f04f 0a00 	mov.w	sl, #0
 80114d4:	f8bc b000 	ldrh.w	fp, [ip]
 80114d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80114dc:	fb09 220b 	mla	r2, r9, fp, r2
 80114e0:	4492      	add	sl, r2
 80114e2:	b289      	uxth	r1, r1
 80114e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80114e8:	f84e 1b04 	str.w	r1, [lr], #4
 80114ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80114f0:	f8be 1000 	ldrh.w	r1, [lr]
 80114f4:	0c12      	lsrs	r2, r2, #16
 80114f6:	fb09 1102 	mla	r1, r9, r2, r1
 80114fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80114fe:	4567      	cmp	r7, ip
 8011500:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011504:	d8e6      	bhi.n	80114d4 <__multiply+0x10c>
 8011506:	9a01      	ldr	r2, [sp, #4]
 8011508:	50a9      	str	r1, [r5, r2]
 801150a:	3504      	adds	r5, #4
 801150c:	e79a      	b.n	8011444 <__multiply+0x7c>
 801150e:	3e01      	subs	r6, #1
 8011510:	e79c      	b.n	801144c <__multiply+0x84>
 8011512:	bf00      	nop
 8011514:	08012fb8 	.word	0x08012fb8
 8011518:	08013044 	.word	0x08013044

0801151c <__pow5mult>:
 801151c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011520:	4615      	mov	r5, r2
 8011522:	f012 0203 	ands.w	r2, r2, #3
 8011526:	4606      	mov	r6, r0
 8011528:	460f      	mov	r7, r1
 801152a:	d007      	beq.n	801153c <__pow5mult+0x20>
 801152c:	4c25      	ldr	r4, [pc, #148]	; (80115c4 <__pow5mult+0xa8>)
 801152e:	3a01      	subs	r2, #1
 8011530:	2300      	movs	r3, #0
 8011532:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011536:	f7ff fe51 	bl	80111dc <__multadd>
 801153a:	4607      	mov	r7, r0
 801153c:	10ad      	asrs	r5, r5, #2
 801153e:	d03d      	beq.n	80115bc <__pow5mult+0xa0>
 8011540:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011542:	b97c      	cbnz	r4, 8011564 <__pow5mult+0x48>
 8011544:	2010      	movs	r0, #16
 8011546:	f7ff fdcd 	bl	80110e4 <malloc>
 801154a:	4602      	mov	r2, r0
 801154c:	6270      	str	r0, [r6, #36]	; 0x24
 801154e:	b928      	cbnz	r0, 801155c <__pow5mult+0x40>
 8011550:	4b1d      	ldr	r3, [pc, #116]	; (80115c8 <__pow5mult+0xac>)
 8011552:	481e      	ldr	r0, [pc, #120]	; (80115cc <__pow5mult+0xb0>)
 8011554:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011558:	f000 fd2c 	bl	8011fb4 <__assert_func>
 801155c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011560:	6004      	str	r4, [r0, #0]
 8011562:	60c4      	str	r4, [r0, #12]
 8011564:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011568:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801156c:	b94c      	cbnz	r4, 8011582 <__pow5mult+0x66>
 801156e:	f240 2171 	movw	r1, #625	; 0x271
 8011572:	4630      	mov	r0, r6
 8011574:	f7ff ff12 	bl	801139c <__i2b>
 8011578:	2300      	movs	r3, #0
 801157a:	f8c8 0008 	str.w	r0, [r8, #8]
 801157e:	4604      	mov	r4, r0
 8011580:	6003      	str	r3, [r0, #0]
 8011582:	f04f 0900 	mov.w	r9, #0
 8011586:	07eb      	lsls	r3, r5, #31
 8011588:	d50a      	bpl.n	80115a0 <__pow5mult+0x84>
 801158a:	4639      	mov	r1, r7
 801158c:	4622      	mov	r2, r4
 801158e:	4630      	mov	r0, r6
 8011590:	f7ff ff1a 	bl	80113c8 <__multiply>
 8011594:	4639      	mov	r1, r7
 8011596:	4680      	mov	r8, r0
 8011598:	4630      	mov	r0, r6
 801159a:	f7ff fdfd 	bl	8011198 <_Bfree>
 801159e:	4647      	mov	r7, r8
 80115a0:	106d      	asrs	r5, r5, #1
 80115a2:	d00b      	beq.n	80115bc <__pow5mult+0xa0>
 80115a4:	6820      	ldr	r0, [r4, #0]
 80115a6:	b938      	cbnz	r0, 80115b8 <__pow5mult+0x9c>
 80115a8:	4622      	mov	r2, r4
 80115aa:	4621      	mov	r1, r4
 80115ac:	4630      	mov	r0, r6
 80115ae:	f7ff ff0b 	bl	80113c8 <__multiply>
 80115b2:	6020      	str	r0, [r4, #0]
 80115b4:	f8c0 9000 	str.w	r9, [r0]
 80115b8:	4604      	mov	r4, r0
 80115ba:	e7e4      	b.n	8011586 <__pow5mult+0x6a>
 80115bc:	4638      	mov	r0, r7
 80115be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115c2:	bf00      	nop
 80115c4:	08013190 	.word	0x08013190
 80115c8:	08012f46 	.word	0x08012f46
 80115cc:	08013044 	.word	0x08013044

080115d0 <__lshift>:
 80115d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115d4:	460c      	mov	r4, r1
 80115d6:	6849      	ldr	r1, [r1, #4]
 80115d8:	6923      	ldr	r3, [r4, #16]
 80115da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80115de:	68a3      	ldr	r3, [r4, #8]
 80115e0:	4607      	mov	r7, r0
 80115e2:	4691      	mov	r9, r2
 80115e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80115e8:	f108 0601 	add.w	r6, r8, #1
 80115ec:	42b3      	cmp	r3, r6
 80115ee:	db0b      	blt.n	8011608 <__lshift+0x38>
 80115f0:	4638      	mov	r0, r7
 80115f2:	f7ff fd91 	bl	8011118 <_Balloc>
 80115f6:	4605      	mov	r5, r0
 80115f8:	b948      	cbnz	r0, 801160e <__lshift+0x3e>
 80115fa:	4602      	mov	r2, r0
 80115fc:	4b2a      	ldr	r3, [pc, #168]	; (80116a8 <__lshift+0xd8>)
 80115fe:	482b      	ldr	r0, [pc, #172]	; (80116ac <__lshift+0xdc>)
 8011600:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011604:	f000 fcd6 	bl	8011fb4 <__assert_func>
 8011608:	3101      	adds	r1, #1
 801160a:	005b      	lsls	r3, r3, #1
 801160c:	e7ee      	b.n	80115ec <__lshift+0x1c>
 801160e:	2300      	movs	r3, #0
 8011610:	f100 0114 	add.w	r1, r0, #20
 8011614:	f100 0210 	add.w	r2, r0, #16
 8011618:	4618      	mov	r0, r3
 801161a:	4553      	cmp	r3, sl
 801161c:	db37      	blt.n	801168e <__lshift+0xbe>
 801161e:	6920      	ldr	r0, [r4, #16]
 8011620:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011624:	f104 0314 	add.w	r3, r4, #20
 8011628:	f019 091f 	ands.w	r9, r9, #31
 801162c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011630:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011634:	d02f      	beq.n	8011696 <__lshift+0xc6>
 8011636:	f1c9 0e20 	rsb	lr, r9, #32
 801163a:	468a      	mov	sl, r1
 801163c:	f04f 0c00 	mov.w	ip, #0
 8011640:	681a      	ldr	r2, [r3, #0]
 8011642:	fa02 f209 	lsl.w	r2, r2, r9
 8011646:	ea42 020c 	orr.w	r2, r2, ip
 801164a:	f84a 2b04 	str.w	r2, [sl], #4
 801164e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011652:	4298      	cmp	r0, r3
 8011654:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011658:	d8f2      	bhi.n	8011640 <__lshift+0x70>
 801165a:	1b03      	subs	r3, r0, r4
 801165c:	3b15      	subs	r3, #21
 801165e:	f023 0303 	bic.w	r3, r3, #3
 8011662:	3304      	adds	r3, #4
 8011664:	f104 0215 	add.w	r2, r4, #21
 8011668:	4290      	cmp	r0, r2
 801166a:	bf38      	it	cc
 801166c:	2304      	movcc	r3, #4
 801166e:	f841 c003 	str.w	ip, [r1, r3]
 8011672:	f1bc 0f00 	cmp.w	ip, #0
 8011676:	d001      	beq.n	801167c <__lshift+0xac>
 8011678:	f108 0602 	add.w	r6, r8, #2
 801167c:	3e01      	subs	r6, #1
 801167e:	4638      	mov	r0, r7
 8011680:	612e      	str	r6, [r5, #16]
 8011682:	4621      	mov	r1, r4
 8011684:	f7ff fd88 	bl	8011198 <_Bfree>
 8011688:	4628      	mov	r0, r5
 801168a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801168e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011692:	3301      	adds	r3, #1
 8011694:	e7c1      	b.n	801161a <__lshift+0x4a>
 8011696:	3904      	subs	r1, #4
 8011698:	f853 2b04 	ldr.w	r2, [r3], #4
 801169c:	f841 2f04 	str.w	r2, [r1, #4]!
 80116a0:	4298      	cmp	r0, r3
 80116a2:	d8f9      	bhi.n	8011698 <__lshift+0xc8>
 80116a4:	e7ea      	b.n	801167c <__lshift+0xac>
 80116a6:	bf00      	nop
 80116a8:	08012fb8 	.word	0x08012fb8
 80116ac:	08013044 	.word	0x08013044

080116b0 <__mcmp>:
 80116b0:	b530      	push	{r4, r5, lr}
 80116b2:	6902      	ldr	r2, [r0, #16]
 80116b4:	690c      	ldr	r4, [r1, #16]
 80116b6:	1b12      	subs	r2, r2, r4
 80116b8:	d10e      	bne.n	80116d8 <__mcmp+0x28>
 80116ba:	f100 0314 	add.w	r3, r0, #20
 80116be:	3114      	adds	r1, #20
 80116c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80116c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80116c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80116cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80116d0:	42a5      	cmp	r5, r4
 80116d2:	d003      	beq.n	80116dc <__mcmp+0x2c>
 80116d4:	d305      	bcc.n	80116e2 <__mcmp+0x32>
 80116d6:	2201      	movs	r2, #1
 80116d8:	4610      	mov	r0, r2
 80116da:	bd30      	pop	{r4, r5, pc}
 80116dc:	4283      	cmp	r3, r0
 80116de:	d3f3      	bcc.n	80116c8 <__mcmp+0x18>
 80116e0:	e7fa      	b.n	80116d8 <__mcmp+0x28>
 80116e2:	f04f 32ff 	mov.w	r2, #4294967295
 80116e6:	e7f7      	b.n	80116d8 <__mcmp+0x28>

080116e8 <__mdiff>:
 80116e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116ec:	460c      	mov	r4, r1
 80116ee:	4606      	mov	r6, r0
 80116f0:	4611      	mov	r1, r2
 80116f2:	4620      	mov	r0, r4
 80116f4:	4690      	mov	r8, r2
 80116f6:	f7ff ffdb 	bl	80116b0 <__mcmp>
 80116fa:	1e05      	subs	r5, r0, #0
 80116fc:	d110      	bne.n	8011720 <__mdiff+0x38>
 80116fe:	4629      	mov	r1, r5
 8011700:	4630      	mov	r0, r6
 8011702:	f7ff fd09 	bl	8011118 <_Balloc>
 8011706:	b930      	cbnz	r0, 8011716 <__mdiff+0x2e>
 8011708:	4b3a      	ldr	r3, [pc, #232]	; (80117f4 <__mdiff+0x10c>)
 801170a:	4602      	mov	r2, r0
 801170c:	f240 2132 	movw	r1, #562	; 0x232
 8011710:	4839      	ldr	r0, [pc, #228]	; (80117f8 <__mdiff+0x110>)
 8011712:	f000 fc4f 	bl	8011fb4 <__assert_func>
 8011716:	2301      	movs	r3, #1
 8011718:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801171c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011720:	bfa4      	itt	ge
 8011722:	4643      	movge	r3, r8
 8011724:	46a0      	movge	r8, r4
 8011726:	4630      	mov	r0, r6
 8011728:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801172c:	bfa6      	itte	ge
 801172e:	461c      	movge	r4, r3
 8011730:	2500      	movge	r5, #0
 8011732:	2501      	movlt	r5, #1
 8011734:	f7ff fcf0 	bl	8011118 <_Balloc>
 8011738:	b920      	cbnz	r0, 8011744 <__mdiff+0x5c>
 801173a:	4b2e      	ldr	r3, [pc, #184]	; (80117f4 <__mdiff+0x10c>)
 801173c:	4602      	mov	r2, r0
 801173e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011742:	e7e5      	b.n	8011710 <__mdiff+0x28>
 8011744:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011748:	6926      	ldr	r6, [r4, #16]
 801174a:	60c5      	str	r5, [r0, #12]
 801174c:	f104 0914 	add.w	r9, r4, #20
 8011750:	f108 0514 	add.w	r5, r8, #20
 8011754:	f100 0e14 	add.w	lr, r0, #20
 8011758:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801175c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011760:	f108 0210 	add.w	r2, r8, #16
 8011764:	46f2      	mov	sl, lr
 8011766:	2100      	movs	r1, #0
 8011768:	f859 3b04 	ldr.w	r3, [r9], #4
 801176c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011770:	fa1f f883 	uxth.w	r8, r3
 8011774:	fa11 f18b 	uxtah	r1, r1, fp
 8011778:	0c1b      	lsrs	r3, r3, #16
 801177a:	eba1 0808 	sub.w	r8, r1, r8
 801177e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011782:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011786:	fa1f f888 	uxth.w	r8, r8
 801178a:	1419      	asrs	r1, r3, #16
 801178c:	454e      	cmp	r6, r9
 801178e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011792:	f84a 3b04 	str.w	r3, [sl], #4
 8011796:	d8e7      	bhi.n	8011768 <__mdiff+0x80>
 8011798:	1b33      	subs	r3, r6, r4
 801179a:	3b15      	subs	r3, #21
 801179c:	f023 0303 	bic.w	r3, r3, #3
 80117a0:	3304      	adds	r3, #4
 80117a2:	3415      	adds	r4, #21
 80117a4:	42a6      	cmp	r6, r4
 80117a6:	bf38      	it	cc
 80117a8:	2304      	movcc	r3, #4
 80117aa:	441d      	add	r5, r3
 80117ac:	4473      	add	r3, lr
 80117ae:	469e      	mov	lr, r3
 80117b0:	462e      	mov	r6, r5
 80117b2:	4566      	cmp	r6, ip
 80117b4:	d30e      	bcc.n	80117d4 <__mdiff+0xec>
 80117b6:	f10c 0203 	add.w	r2, ip, #3
 80117ba:	1b52      	subs	r2, r2, r5
 80117bc:	f022 0203 	bic.w	r2, r2, #3
 80117c0:	3d03      	subs	r5, #3
 80117c2:	45ac      	cmp	ip, r5
 80117c4:	bf38      	it	cc
 80117c6:	2200      	movcc	r2, #0
 80117c8:	441a      	add	r2, r3
 80117ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80117ce:	b17b      	cbz	r3, 80117f0 <__mdiff+0x108>
 80117d0:	6107      	str	r7, [r0, #16]
 80117d2:	e7a3      	b.n	801171c <__mdiff+0x34>
 80117d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80117d8:	fa11 f288 	uxtah	r2, r1, r8
 80117dc:	1414      	asrs	r4, r2, #16
 80117de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80117e2:	b292      	uxth	r2, r2
 80117e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80117e8:	f84e 2b04 	str.w	r2, [lr], #4
 80117ec:	1421      	asrs	r1, r4, #16
 80117ee:	e7e0      	b.n	80117b2 <__mdiff+0xca>
 80117f0:	3f01      	subs	r7, #1
 80117f2:	e7ea      	b.n	80117ca <__mdiff+0xe2>
 80117f4:	08012fb8 	.word	0x08012fb8
 80117f8:	08013044 	.word	0x08013044

080117fc <__ulp>:
 80117fc:	b082      	sub	sp, #8
 80117fe:	ed8d 0b00 	vstr	d0, [sp]
 8011802:	9b01      	ldr	r3, [sp, #4]
 8011804:	4912      	ldr	r1, [pc, #72]	; (8011850 <__ulp+0x54>)
 8011806:	4019      	ands	r1, r3
 8011808:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801180c:	2900      	cmp	r1, #0
 801180e:	dd05      	ble.n	801181c <__ulp+0x20>
 8011810:	2200      	movs	r2, #0
 8011812:	460b      	mov	r3, r1
 8011814:	ec43 2b10 	vmov	d0, r2, r3
 8011818:	b002      	add	sp, #8
 801181a:	4770      	bx	lr
 801181c:	4249      	negs	r1, r1
 801181e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011822:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011826:	f04f 0200 	mov.w	r2, #0
 801182a:	f04f 0300 	mov.w	r3, #0
 801182e:	da04      	bge.n	801183a <__ulp+0x3e>
 8011830:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011834:	fa41 f300 	asr.w	r3, r1, r0
 8011838:	e7ec      	b.n	8011814 <__ulp+0x18>
 801183a:	f1a0 0114 	sub.w	r1, r0, #20
 801183e:	291e      	cmp	r1, #30
 8011840:	bfda      	itte	le
 8011842:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011846:	fa20 f101 	lsrle.w	r1, r0, r1
 801184a:	2101      	movgt	r1, #1
 801184c:	460a      	mov	r2, r1
 801184e:	e7e1      	b.n	8011814 <__ulp+0x18>
 8011850:	7ff00000 	.word	0x7ff00000

08011854 <__b2d>:
 8011854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011856:	6905      	ldr	r5, [r0, #16]
 8011858:	f100 0714 	add.w	r7, r0, #20
 801185c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011860:	1f2e      	subs	r6, r5, #4
 8011862:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011866:	4620      	mov	r0, r4
 8011868:	f7ff fd48 	bl	80112fc <__hi0bits>
 801186c:	f1c0 0320 	rsb	r3, r0, #32
 8011870:	280a      	cmp	r0, #10
 8011872:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80118f0 <__b2d+0x9c>
 8011876:	600b      	str	r3, [r1, #0]
 8011878:	dc14      	bgt.n	80118a4 <__b2d+0x50>
 801187a:	f1c0 0e0b 	rsb	lr, r0, #11
 801187e:	fa24 f10e 	lsr.w	r1, r4, lr
 8011882:	42b7      	cmp	r7, r6
 8011884:	ea41 030c 	orr.w	r3, r1, ip
 8011888:	bf34      	ite	cc
 801188a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801188e:	2100      	movcs	r1, #0
 8011890:	3015      	adds	r0, #21
 8011892:	fa04 f000 	lsl.w	r0, r4, r0
 8011896:	fa21 f10e 	lsr.w	r1, r1, lr
 801189a:	ea40 0201 	orr.w	r2, r0, r1
 801189e:	ec43 2b10 	vmov	d0, r2, r3
 80118a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118a4:	42b7      	cmp	r7, r6
 80118a6:	bf3a      	itte	cc
 80118a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80118ac:	f1a5 0608 	subcc.w	r6, r5, #8
 80118b0:	2100      	movcs	r1, #0
 80118b2:	380b      	subs	r0, #11
 80118b4:	d017      	beq.n	80118e6 <__b2d+0x92>
 80118b6:	f1c0 0c20 	rsb	ip, r0, #32
 80118ba:	fa04 f500 	lsl.w	r5, r4, r0
 80118be:	42be      	cmp	r6, r7
 80118c0:	fa21 f40c 	lsr.w	r4, r1, ip
 80118c4:	ea45 0504 	orr.w	r5, r5, r4
 80118c8:	bf8c      	ite	hi
 80118ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80118ce:	2400      	movls	r4, #0
 80118d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80118d4:	fa01 f000 	lsl.w	r0, r1, r0
 80118d8:	fa24 f40c 	lsr.w	r4, r4, ip
 80118dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80118e0:	ea40 0204 	orr.w	r2, r0, r4
 80118e4:	e7db      	b.n	801189e <__b2d+0x4a>
 80118e6:	ea44 030c 	orr.w	r3, r4, ip
 80118ea:	460a      	mov	r2, r1
 80118ec:	e7d7      	b.n	801189e <__b2d+0x4a>
 80118ee:	bf00      	nop
 80118f0:	3ff00000 	.word	0x3ff00000

080118f4 <__d2b>:
 80118f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80118f8:	4689      	mov	r9, r1
 80118fa:	2101      	movs	r1, #1
 80118fc:	ec57 6b10 	vmov	r6, r7, d0
 8011900:	4690      	mov	r8, r2
 8011902:	f7ff fc09 	bl	8011118 <_Balloc>
 8011906:	4604      	mov	r4, r0
 8011908:	b930      	cbnz	r0, 8011918 <__d2b+0x24>
 801190a:	4602      	mov	r2, r0
 801190c:	4b25      	ldr	r3, [pc, #148]	; (80119a4 <__d2b+0xb0>)
 801190e:	4826      	ldr	r0, [pc, #152]	; (80119a8 <__d2b+0xb4>)
 8011910:	f240 310a 	movw	r1, #778	; 0x30a
 8011914:	f000 fb4e 	bl	8011fb4 <__assert_func>
 8011918:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801191c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011920:	bb35      	cbnz	r5, 8011970 <__d2b+0x7c>
 8011922:	2e00      	cmp	r6, #0
 8011924:	9301      	str	r3, [sp, #4]
 8011926:	d028      	beq.n	801197a <__d2b+0x86>
 8011928:	4668      	mov	r0, sp
 801192a:	9600      	str	r6, [sp, #0]
 801192c:	f7ff fd06 	bl	801133c <__lo0bits>
 8011930:	9900      	ldr	r1, [sp, #0]
 8011932:	b300      	cbz	r0, 8011976 <__d2b+0x82>
 8011934:	9a01      	ldr	r2, [sp, #4]
 8011936:	f1c0 0320 	rsb	r3, r0, #32
 801193a:	fa02 f303 	lsl.w	r3, r2, r3
 801193e:	430b      	orrs	r3, r1
 8011940:	40c2      	lsrs	r2, r0
 8011942:	6163      	str	r3, [r4, #20]
 8011944:	9201      	str	r2, [sp, #4]
 8011946:	9b01      	ldr	r3, [sp, #4]
 8011948:	61a3      	str	r3, [r4, #24]
 801194a:	2b00      	cmp	r3, #0
 801194c:	bf14      	ite	ne
 801194e:	2202      	movne	r2, #2
 8011950:	2201      	moveq	r2, #1
 8011952:	6122      	str	r2, [r4, #16]
 8011954:	b1d5      	cbz	r5, 801198c <__d2b+0x98>
 8011956:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801195a:	4405      	add	r5, r0
 801195c:	f8c9 5000 	str.w	r5, [r9]
 8011960:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011964:	f8c8 0000 	str.w	r0, [r8]
 8011968:	4620      	mov	r0, r4
 801196a:	b003      	add	sp, #12
 801196c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011970:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011974:	e7d5      	b.n	8011922 <__d2b+0x2e>
 8011976:	6161      	str	r1, [r4, #20]
 8011978:	e7e5      	b.n	8011946 <__d2b+0x52>
 801197a:	a801      	add	r0, sp, #4
 801197c:	f7ff fcde 	bl	801133c <__lo0bits>
 8011980:	9b01      	ldr	r3, [sp, #4]
 8011982:	6163      	str	r3, [r4, #20]
 8011984:	2201      	movs	r2, #1
 8011986:	6122      	str	r2, [r4, #16]
 8011988:	3020      	adds	r0, #32
 801198a:	e7e3      	b.n	8011954 <__d2b+0x60>
 801198c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011990:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011994:	f8c9 0000 	str.w	r0, [r9]
 8011998:	6918      	ldr	r0, [r3, #16]
 801199a:	f7ff fcaf 	bl	80112fc <__hi0bits>
 801199e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80119a2:	e7df      	b.n	8011964 <__d2b+0x70>
 80119a4:	08012fb8 	.word	0x08012fb8
 80119a8:	08013044 	.word	0x08013044

080119ac <__ratio>:
 80119ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119b0:	4688      	mov	r8, r1
 80119b2:	4669      	mov	r1, sp
 80119b4:	4681      	mov	r9, r0
 80119b6:	f7ff ff4d 	bl	8011854 <__b2d>
 80119ba:	a901      	add	r1, sp, #4
 80119bc:	4640      	mov	r0, r8
 80119be:	ec55 4b10 	vmov	r4, r5, d0
 80119c2:	f7ff ff47 	bl	8011854 <__b2d>
 80119c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80119ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80119ce:	eba3 0c02 	sub.w	ip, r3, r2
 80119d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80119d6:	1a9b      	subs	r3, r3, r2
 80119d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80119dc:	ec51 0b10 	vmov	r0, r1, d0
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	bfd6      	itet	le
 80119e4:	460a      	movle	r2, r1
 80119e6:	462a      	movgt	r2, r5
 80119e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80119ec:	468b      	mov	fp, r1
 80119ee:	462f      	mov	r7, r5
 80119f0:	bfd4      	ite	le
 80119f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80119f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80119fa:	4620      	mov	r0, r4
 80119fc:	ee10 2a10 	vmov	r2, s0
 8011a00:	465b      	mov	r3, fp
 8011a02:	4639      	mov	r1, r7
 8011a04:	f7ee ff42 	bl	800088c <__aeabi_ddiv>
 8011a08:	ec41 0b10 	vmov	d0, r0, r1
 8011a0c:	b003      	add	sp, #12
 8011a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a12 <__copybits>:
 8011a12:	3901      	subs	r1, #1
 8011a14:	b570      	push	{r4, r5, r6, lr}
 8011a16:	1149      	asrs	r1, r1, #5
 8011a18:	6914      	ldr	r4, [r2, #16]
 8011a1a:	3101      	adds	r1, #1
 8011a1c:	f102 0314 	add.w	r3, r2, #20
 8011a20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011a24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011a28:	1f05      	subs	r5, r0, #4
 8011a2a:	42a3      	cmp	r3, r4
 8011a2c:	d30c      	bcc.n	8011a48 <__copybits+0x36>
 8011a2e:	1aa3      	subs	r3, r4, r2
 8011a30:	3b11      	subs	r3, #17
 8011a32:	f023 0303 	bic.w	r3, r3, #3
 8011a36:	3211      	adds	r2, #17
 8011a38:	42a2      	cmp	r2, r4
 8011a3a:	bf88      	it	hi
 8011a3c:	2300      	movhi	r3, #0
 8011a3e:	4418      	add	r0, r3
 8011a40:	2300      	movs	r3, #0
 8011a42:	4288      	cmp	r0, r1
 8011a44:	d305      	bcc.n	8011a52 <__copybits+0x40>
 8011a46:	bd70      	pop	{r4, r5, r6, pc}
 8011a48:	f853 6b04 	ldr.w	r6, [r3], #4
 8011a4c:	f845 6f04 	str.w	r6, [r5, #4]!
 8011a50:	e7eb      	b.n	8011a2a <__copybits+0x18>
 8011a52:	f840 3b04 	str.w	r3, [r0], #4
 8011a56:	e7f4      	b.n	8011a42 <__copybits+0x30>

08011a58 <__any_on>:
 8011a58:	f100 0214 	add.w	r2, r0, #20
 8011a5c:	6900      	ldr	r0, [r0, #16]
 8011a5e:	114b      	asrs	r3, r1, #5
 8011a60:	4298      	cmp	r0, r3
 8011a62:	b510      	push	{r4, lr}
 8011a64:	db11      	blt.n	8011a8a <__any_on+0x32>
 8011a66:	dd0a      	ble.n	8011a7e <__any_on+0x26>
 8011a68:	f011 011f 	ands.w	r1, r1, #31
 8011a6c:	d007      	beq.n	8011a7e <__any_on+0x26>
 8011a6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011a72:	fa24 f001 	lsr.w	r0, r4, r1
 8011a76:	fa00 f101 	lsl.w	r1, r0, r1
 8011a7a:	428c      	cmp	r4, r1
 8011a7c:	d10b      	bne.n	8011a96 <__any_on+0x3e>
 8011a7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a82:	4293      	cmp	r3, r2
 8011a84:	d803      	bhi.n	8011a8e <__any_on+0x36>
 8011a86:	2000      	movs	r0, #0
 8011a88:	bd10      	pop	{r4, pc}
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	e7f7      	b.n	8011a7e <__any_on+0x26>
 8011a8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011a92:	2900      	cmp	r1, #0
 8011a94:	d0f5      	beq.n	8011a82 <__any_on+0x2a>
 8011a96:	2001      	movs	r0, #1
 8011a98:	e7f6      	b.n	8011a88 <__any_on+0x30>

08011a9a <_calloc_r>:
 8011a9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a9c:	fba1 2402 	umull	r2, r4, r1, r2
 8011aa0:	b94c      	cbnz	r4, 8011ab6 <_calloc_r+0x1c>
 8011aa2:	4611      	mov	r1, r2
 8011aa4:	9201      	str	r2, [sp, #4]
 8011aa6:	f000 f87b 	bl	8011ba0 <_malloc_r>
 8011aaa:	9a01      	ldr	r2, [sp, #4]
 8011aac:	4605      	mov	r5, r0
 8011aae:	b930      	cbnz	r0, 8011abe <_calloc_r+0x24>
 8011ab0:	4628      	mov	r0, r5
 8011ab2:	b003      	add	sp, #12
 8011ab4:	bd30      	pop	{r4, r5, pc}
 8011ab6:	220c      	movs	r2, #12
 8011ab8:	6002      	str	r2, [r0, #0]
 8011aba:	2500      	movs	r5, #0
 8011abc:	e7f8      	b.n	8011ab0 <_calloc_r+0x16>
 8011abe:	4621      	mov	r1, r4
 8011ac0:	f7fc fbc6 	bl	800e250 <memset>
 8011ac4:	e7f4      	b.n	8011ab0 <_calloc_r+0x16>
	...

08011ac8 <_free_r>:
 8011ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011aca:	2900      	cmp	r1, #0
 8011acc:	d044      	beq.n	8011b58 <_free_r+0x90>
 8011ace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ad2:	9001      	str	r0, [sp, #4]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	f1a1 0404 	sub.w	r4, r1, #4
 8011ada:	bfb8      	it	lt
 8011adc:	18e4      	addlt	r4, r4, r3
 8011ade:	f000 fab3 	bl	8012048 <__malloc_lock>
 8011ae2:	4a1e      	ldr	r2, [pc, #120]	; (8011b5c <_free_r+0x94>)
 8011ae4:	9801      	ldr	r0, [sp, #4]
 8011ae6:	6813      	ldr	r3, [r2, #0]
 8011ae8:	b933      	cbnz	r3, 8011af8 <_free_r+0x30>
 8011aea:	6063      	str	r3, [r4, #4]
 8011aec:	6014      	str	r4, [r2, #0]
 8011aee:	b003      	add	sp, #12
 8011af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011af4:	f000 baae 	b.w	8012054 <__malloc_unlock>
 8011af8:	42a3      	cmp	r3, r4
 8011afa:	d908      	bls.n	8011b0e <_free_r+0x46>
 8011afc:	6825      	ldr	r5, [r4, #0]
 8011afe:	1961      	adds	r1, r4, r5
 8011b00:	428b      	cmp	r3, r1
 8011b02:	bf01      	itttt	eq
 8011b04:	6819      	ldreq	r1, [r3, #0]
 8011b06:	685b      	ldreq	r3, [r3, #4]
 8011b08:	1949      	addeq	r1, r1, r5
 8011b0a:	6021      	streq	r1, [r4, #0]
 8011b0c:	e7ed      	b.n	8011aea <_free_r+0x22>
 8011b0e:	461a      	mov	r2, r3
 8011b10:	685b      	ldr	r3, [r3, #4]
 8011b12:	b10b      	cbz	r3, 8011b18 <_free_r+0x50>
 8011b14:	42a3      	cmp	r3, r4
 8011b16:	d9fa      	bls.n	8011b0e <_free_r+0x46>
 8011b18:	6811      	ldr	r1, [r2, #0]
 8011b1a:	1855      	adds	r5, r2, r1
 8011b1c:	42a5      	cmp	r5, r4
 8011b1e:	d10b      	bne.n	8011b38 <_free_r+0x70>
 8011b20:	6824      	ldr	r4, [r4, #0]
 8011b22:	4421      	add	r1, r4
 8011b24:	1854      	adds	r4, r2, r1
 8011b26:	42a3      	cmp	r3, r4
 8011b28:	6011      	str	r1, [r2, #0]
 8011b2a:	d1e0      	bne.n	8011aee <_free_r+0x26>
 8011b2c:	681c      	ldr	r4, [r3, #0]
 8011b2e:	685b      	ldr	r3, [r3, #4]
 8011b30:	6053      	str	r3, [r2, #4]
 8011b32:	4421      	add	r1, r4
 8011b34:	6011      	str	r1, [r2, #0]
 8011b36:	e7da      	b.n	8011aee <_free_r+0x26>
 8011b38:	d902      	bls.n	8011b40 <_free_r+0x78>
 8011b3a:	230c      	movs	r3, #12
 8011b3c:	6003      	str	r3, [r0, #0]
 8011b3e:	e7d6      	b.n	8011aee <_free_r+0x26>
 8011b40:	6825      	ldr	r5, [r4, #0]
 8011b42:	1961      	adds	r1, r4, r5
 8011b44:	428b      	cmp	r3, r1
 8011b46:	bf04      	itt	eq
 8011b48:	6819      	ldreq	r1, [r3, #0]
 8011b4a:	685b      	ldreq	r3, [r3, #4]
 8011b4c:	6063      	str	r3, [r4, #4]
 8011b4e:	bf04      	itt	eq
 8011b50:	1949      	addeq	r1, r1, r5
 8011b52:	6021      	streq	r1, [r4, #0]
 8011b54:	6054      	str	r4, [r2, #4]
 8011b56:	e7ca      	b.n	8011aee <_free_r+0x26>
 8011b58:	b003      	add	sp, #12
 8011b5a:	bd30      	pop	{r4, r5, pc}
 8011b5c:	2000075c 	.word	0x2000075c

08011b60 <sbrk_aligned>:
 8011b60:	b570      	push	{r4, r5, r6, lr}
 8011b62:	4e0e      	ldr	r6, [pc, #56]	; (8011b9c <sbrk_aligned+0x3c>)
 8011b64:	460c      	mov	r4, r1
 8011b66:	6831      	ldr	r1, [r6, #0]
 8011b68:	4605      	mov	r5, r0
 8011b6a:	b911      	cbnz	r1, 8011b72 <sbrk_aligned+0x12>
 8011b6c:	f000 f9f0 	bl	8011f50 <_sbrk_r>
 8011b70:	6030      	str	r0, [r6, #0]
 8011b72:	4621      	mov	r1, r4
 8011b74:	4628      	mov	r0, r5
 8011b76:	f000 f9eb 	bl	8011f50 <_sbrk_r>
 8011b7a:	1c43      	adds	r3, r0, #1
 8011b7c:	d00a      	beq.n	8011b94 <sbrk_aligned+0x34>
 8011b7e:	1cc4      	adds	r4, r0, #3
 8011b80:	f024 0403 	bic.w	r4, r4, #3
 8011b84:	42a0      	cmp	r0, r4
 8011b86:	d007      	beq.n	8011b98 <sbrk_aligned+0x38>
 8011b88:	1a21      	subs	r1, r4, r0
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	f000 f9e0 	bl	8011f50 <_sbrk_r>
 8011b90:	3001      	adds	r0, #1
 8011b92:	d101      	bne.n	8011b98 <sbrk_aligned+0x38>
 8011b94:	f04f 34ff 	mov.w	r4, #4294967295
 8011b98:	4620      	mov	r0, r4
 8011b9a:	bd70      	pop	{r4, r5, r6, pc}
 8011b9c:	20000760 	.word	0x20000760

08011ba0 <_malloc_r>:
 8011ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba4:	1ccd      	adds	r5, r1, #3
 8011ba6:	f025 0503 	bic.w	r5, r5, #3
 8011baa:	3508      	adds	r5, #8
 8011bac:	2d0c      	cmp	r5, #12
 8011bae:	bf38      	it	cc
 8011bb0:	250c      	movcc	r5, #12
 8011bb2:	2d00      	cmp	r5, #0
 8011bb4:	4607      	mov	r7, r0
 8011bb6:	db01      	blt.n	8011bbc <_malloc_r+0x1c>
 8011bb8:	42a9      	cmp	r1, r5
 8011bba:	d905      	bls.n	8011bc8 <_malloc_r+0x28>
 8011bbc:	230c      	movs	r3, #12
 8011bbe:	603b      	str	r3, [r7, #0]
 8011bc0:	2600      	movs	r6, #0
 8011bc2:	4630      	mov	r0, r6
 8011bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc8:	4e2e      	ldr	r6, [pc, #184]	; (8011c84 <_malloc_r+0xe4>)
 8011bca:	f000 fa3d 	bl	8012048 <__malloc_lock>
 8011bce:	6833      	ldr	r3, [r6, #0]
 8011bd0:	461c      	mov	r4, r3
 8011bd2:	bb34      	cbnz	r4, 8011c22 <_malloc_r+0x82>
 8011bd4:	4629      	mov	r1, r5
 8011bd6:	4638      	mov	r0, r7
 8011bd8:	f7ff ffc2 	bl	8011b60 <sbrk_aligned>
 8011bdc:	1c43      	adds	r3, r0, #1
 8011bde:	4604      	mov	r4, r0
 8011be0:	d14d      	bne.n	8011c7e <_malloc_r+0xde>
 8011be2:	6834      	ldr	r4, [r6, #0]
 8011be4:	4626      	mov	r6, r4
 8011be6:	2e00      	cmp	r6, #0
 8011be8:	d140      	bne.n	8011c6c <_malloc_r+0xcc>
 8011bea:	6823      	ldr	r3, [r4, #0]
 8011bec:	4631      	mov	r1, r6
 8011bee:	4638      	mov	r0, r7
 8011bf0:	eb04 0803 	add.w	r8, r4, r3
 8011bf4:	f000 f9ac 	bl	8011f50 <_sbrk_r>
 8011bf8:	4580      	cmp	r8, r0
 8011bfa:	d13a      	bne.n	8011c72 <_malloc_r+0xd2>
 8011bfc:	6821      	ldr	r1, [r4, #0]
 8011bfe:	3503      	adds	r5, #3
 8011c00:	1a6d      	subs	r5, r5, r1
 8011c02:	f025 0503 	bic.w	r5, r5, #3
 8011c06:	3508      	adds	r5, #8
 8011c08:	2d0c      	cmp	r5, #12
 8011c0a:	bf38      	it	cc
 8011c0c:	250c      	movcc	r5, #12
 8011c0e:	4629      	mov	r1, r5
 8011c10:	4638      	mov	r0, r7
 8011c12:	f7ff ffa5 	bl	8011b60 <sbrk_aligned>
 8011c16:	3001      	adds	r0, #1
 8011c18:	d02b      	beq.n	8011c72 <_malloc_r+0xd2>
 8011c1a:	6823      	ldr	r3, [r4, #0]
 8011c1c:	442b      	add	r3, r5
 8011c1e:	6023      	str	r3, [r4, #0]
 8011c20:	e00e      	b.n	8011c40 <_malloc_r+0xa0>
 8011c22:	6822      	ldr	r2, [r4, #0]
 8011c24:	1b52      	subs	r2, r2, r5
 8011c26:	d41e      	bmi.n	8011c66 <_malloc_r+0xc6>
 8011c28:	2a0b      	cmp	r2, #11
 8011c2a:	d916      	bls.n	8011c5a <_malloc_r+0xba>
 8011c2c:	1961      	adds	r1, r4, r5
 8011c2e:	42a3      	cmp	r3, r4
 8011c30:	6025      	str	r5, [r4, #0]
 8011c32:	bf18      	it	ne
 8011c34:	6059      	strne	r1, [r3, #4]
 8011c36:	6863      	ldr	r3, [r4, #4]
 8011c38:	bf08      	it	eq
 8011c3a:	6031      	streq	r1, [r6, #0]
 8011c3c:	5162      	str	r2, [r4, r5]
 8011c3e:	604b      	str	r3, [r1, #4]
 8011c40:	4638      	mov	r0, r7
 8011c42:	f104 060b 	add.w	r6, r4, #11
 8011c46:	f000 fa05 	bl	8012054 <__malloc_unlock>
 8011c4a:	f026 0607 	bic.w	r6, r6, #7
 8011c4e:	1d23      	adds	r3, r4, #4
 8011c50:	1af2      	subs	r2, r6, r3
 8011c52:	d0b6      	beq.n	8011bc2 <_malloc_r+0x22>
 8011c54:	1b9b      	subs	r3, r3, r6
 8011c56:	50a3      	str	r3, [r4, r2]
 8011c58:	e7b3      	b.n	8011bc2 <_malloc_r+0x22>
 8011c5a:	6862      	ldr	r2, [r4, #4]
 8011c5c:	42a3      	cmp	r3, r4
 8011c5e:	bf0c      	ite	eq
 8011c60:	6032      	streq	r2, [r6, #0]
 8011c62:	605a      	strne	r2, [r3, #4]
 8011c64:	e7ec      	b.n	8011c40 <_malloc_r+0xa0>
 8011c66:	4623      	mov	r3, r4
 8011c68:	6864      	ldr	r4, [r4, #4]
 8011c6a:	e7b2      	b.n	8011bd2 <_malloc_r+0x32>
 8011c6c:	4634      	mov	r4, r6
 8011c6e:	6876      	ldr	r6, [r6, #4]
 8011c70:	e7b9      	b.n	8011be6 <_malloc_r+0x46>
 8011c72:	230c      	movs	r3, #12
 8011c74:	603b      	str	r3, [r7, #0]
 8011c76:	4638      	mov	r0, r7
 8011c78:	f000 f9ec 	bl	8012054 <__malloc_unlock>
 8011c7c:	e7a1      	b.n	8011bc2 <_malloc_r+0x22>
 8011c7e:	6025      	str	r5, [r4, #0]
 8011c80:	e7de      	b.n	8011c40 <_malloc_r+0xa0>
 8011c82:	bf00      	nop
 8011c84:	2000075c 	.word	0x2000075c

08011c88 <__ssputs_r>:
 8011c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c8c:	688e      	ldr	r6, [r1, #8]
 8011c8e:	429e      	cmp	r6, r3
 8011c90:	4682      	mov	sl, r0
 8011c92:	460c      	mov	r4, r1
 8011c94:	4690      	mov	r8, r2
 8011c96:	461f      	mov	r7, r3
 8011c98:	d838      	bhi.n	8011d0c <__ssputs_r+0x84>
 8011c9a:	898a      	ldrh	r2, [r1, #12]
 8011c9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011ca0:	d032      	beq.n	8011d08 <__ssputs_r+0x80>
 8011ca2:	6825      	ldr	r5, [r4, #0]
 8011ca4:	6909      	ldr	r1, [r1, #16]
 8011ca6:	eba5 0901 	sub.w	r9, r5, r1
 8011caa:	6965      	ldr	r5, [r4, #20]
 8011cac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011cb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011cb4:	3301      	adds	r3, #1
 8011cb6:	444b      	add	r3, r9
 8011cb8:	106d      	asrs	r5, r5, #1
 8011cba:	429d      	cmp	r5, r3
 8011cbc:	bf38      	it	cc
 8011cbe:	461d      	movcc	r5, r3
 8011cc0:	0553      	lsls	r3, r2, #21
 8011cc2:	d531      	bpl.n	8011d28 <__ssputs_r+0xa0>
 8011cc4:	4629      	mov	r1, r5
 8011cc6:	f7ff ff6b 	bl	8011ba0 <_malloc_r>
 8011cca:	4606      	mov	r6, r0
 8011ccc:	b950      	cbnz	r0, 8011ce4 <__ssputs_r+0x5c>
 8011cce:	230c      	movs	r3, #12
 8011cd0:	f8ca 3000 	str.w	r3, [sl]
 8011cd4:	89a3      	ldrh	r3, [r4, #12]
 8011cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cda:	81a3      	strh	r3, [r4, #12]
 8011cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ce4:	6921      	ldr	r1, [r4, #16]
 8011ce6:	464a      	mov	r2, r9
 8011ce8:	f7fc faa4 	bl	800e234 <memcpy>
 8011cec:	89a3      	ldrh	r3, [r4, #12]
 8011cee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cf6:	81a3      	strh	r3, [r4, #12]
 8011cf8:	6126      	str	r6, [r4, #16]
 8011cfa:	6165      	str	r5, [r4, #20]
 8011cfc:	444e      	add	r6, r9
 8011cfe:	eba5 0509 	sub.w	r5, r5, r9
 8011d02:	6026      	str	r6, [r4, #0]
 8011d04:	60a5      	str	r5, [r4, #8]
 8011d06:	463e      	mov	r6, r7
 8011d08:	42be      	cmp	r6, r7
 8011d0a:	d900      	bls.n	8011d0e <__ssputs_r+0x86>
 8011d0c:	463e      	mov	r6, r7
 8011d0e:	6820      	ldr	r0, [r4, #0]
 8011d10:	4632      	mov	r2, r6
 8011d12:	4641      	mov	r1, r8
 8011d14:	f000 f97e 	bl	8012014 <memmove>
 8011d18:	68a3      	ldr	r3, [r4, #8]
 8011d1a:	1b9b      	subs	r3, r3, r6
 8011d1c:	60a3      	str	r3, [r4, #8]
 8011d1e:	6823      	ldr	r3, [r4, #0]
 8011d20:	4433      	add	r3, r6
 8011d22:	6023      	str	r3, [r4, #0]
 8011d24:	2000      	movs	r0, #0
 8011d26:	e7db      	b.n	8011ce0 <__ssputs_r+0x58>
 8011d28:	462a      	mov	r2, r5
 8011d2a:	f000 f999 	bl	8012060 <_realloc_r>
 8011d2e:	4606      	mov	r6, r0
 8011d30:	2800      	cmp	r0, #0
 8011d32:	d1e1      	bne.n	8011cf8 <__ssputs_r+0x70>
 8011d34:	6921      	ldr	r1, [r4, #16]
 8011d36:	4650      	mov	r0, sl
 8011d38:	f7ff fec6 	bl	8011ac8 <_free_r>
 8011d3c:	e7c7      	b.n	8011cce <__ssputs_r+0x46>
	...

08011d40 <_svfiprintf_r>:
 8011d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d44:	4698      	mov	r8, r3
 8011d46:	898b      	ldrh	r3, [r1, #12]
 8011d48:	061b      	lsls	r3, r3, #24
 8011d4a:	b09d      	sub	sp, #116	; 0x74
 8011d4c:	4607      	mov	r7, r0
 8011d4e:	460d      	mov	r5, r1
 8011d50:	4614      	mov	r4, r2
 8011d52:	d50e      	bpl.n	8011d72 <_svfiprintf_r+0x32>
 8011d54:	690b      	ldr	r3, [r1, #16]
 8011d56:	b963      	cbnz	r3, 8011d72 <_svfiprintf_r+0x32>
 8011d58:	2140      	movs	r1, #64	; 0x40
 8011d5a:	f7ff ff21 	bl	8011ba0 <_malloc_r>
 8011d5e:	6028      	str	r0, [r5, #0]
 8011d60:	6128      	str	r0, [r5, #16]
 8011d62:	b920      	cbnz	r0, 8011d6e <_svfiprintf_r+0x2e>
 8011d64:	230c      	movs	r3, #12
 8011d66:	603b      	str	r3, [r7, #0]
 8011d68:	f04f 30ff 	mov.w	r0, #4294967295
 8011d6c:	e0d1      	b.n	8011f12 <_svfiprintf_r+0x1d2>
 8011d6e:	2340      	movs	r3, #64	; 0x40
 8011d70:	616b      	str	r3, [r5, #20]
 8011d72:	2300      	movs	r3, #0
 8011d74:	9309      	str	r3, [sp, #36]	; 0x24
 8011d76:	2320      	movs	r3, #32
 8011d78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d80:	2330      	movs	r3, #48	; 0x30
 8011d82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011f2c <_svfiprintf_r+0x1ec>
 8011d86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d8a:	f04f 0901 	mov.w	r9, #1
 8011d8e:	4623      	mov	r3, r4
 8011d90:	469a      	mov	sl, r3
 8011d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d96:	b10a      	cbz	r2, 8011d9c <_svfiprintf_r+0x5c>
 8011d98:	2a25      	cmp	r2, #37	; 0x25
 8011d9a:	d1f9      	bne.n	8011d90 <_svfiprintf_r+0x50>
 8011d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8011da0:	d00b      	beq.n	8011dba <_svfiprintf_r+0x7a>
 8011da2:	465b      	mov	r3, fp
 8011da4:	4622      	mov	r2, r4
 8011da6:	4629      	mov	r1, r5
 8011da8:	4638      	mov	r0, r7
 8011daa:	f7ff ff6d 	bl	8011c88 <__ssputs_r>
 8011dae:	3001      	adds	r0, #1
 8011db0:	f000 80aa 	beq.w	8011f08 <_svfiprintf_r+0x1c8>
 8011db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011db6:	445a      	add	r2, fp
 8011db8:	9209      	str	r2, [sp, #36]	; 0x24
 8011dba:	f89a 3000 	ldrb.w	r3, [sl]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	f000 80a2 	beq.w	8011f08 <_svfiprintf_r+0x1c8>
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8011dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dce:	f10a 0a01 	add.w	sl, sl, #1
 8011dd2:	9304      	str	r3, [sp, #16]
 8011dd4:	9307      	str	r3, [sp, #28]
 8011dd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011dda:	931a      	str	r3, [sp, #104]	; 0x68
 8011ddc:	4654      	mov	r4, sl
 8011dde:	2205      	movs	r2, #5
 8011de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011de4:	4851      	ldr	r0, [pc, #324]	; (8011f2c <_svfiprintf_r+0x1ec>)
 8011de6:	f7ee fa1b 	bl	8000220 <memchr>
 8011dea:	9a04      	ldr	r2, [sp, #16]
 8011dec:	b9d8      	cbnz	r0, 8011e26 <_svfiprintf_r+0xe6>
 8011dee:	06d0      	lsls	r0, r2, #27
 8011df0:	bf44      	itt	mi
 8011df2:	2320      	movmi	r3, #32
 8011df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011df8:	0711      	lsls	r1, r2, #28
 8011dfa:	bf44      	itt	mi
 8011dfc:	232b      	movmi	r3, #43	; 0x2b
 8011dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e02:	f89a 3000 	ldrb.w	r3, [sl]
 8011e06:	2b2a      	cmp	r3, #42	; 0x2a
 8011e08:	d015      	beq.n	8011e36 <_svfiprintf_r+0xf6>
 8011e0a:	9a07      	ldr	r2, [sp, #28]
 8011e0c:	4654      	mov	r4, sl
 8011e0e:	2000      	movs	r0, #0
 8011e10:	f04f 0c0a 	mov.w	ip, #10
 8011e14:	4621      	mov	r1, r4
 8011e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e1a:	3b30      	subs	r3, #48	; 0x30
 8011e1c:	2b09      	cmp	r3, #9
 8011e1e:	d94e      	bls.n	8011ebe <_svfiprintf_r+0x17e>
 8011e20:	b1b0      	cbz	r0, 8011e50 <_svfiprintf_r+0x110>
 8011e22:	9207      	str	r2, [sp, #28]
 8011e24:	e014      	b.n	8011e50 <_svfiprintf_r+0x110>
 8011e26:	eba0 0308 	sub.w	r3, r0, r8
 8011e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8011e2e:	4313      	orrs	r3, r2
 8011e30:	9304      	str	r3, [sp, #16]
 8011e32:	46a2      	mov	sl, r4
 8011e34:	e7d2      	b.n	8011ddc <_svfiprintf_r+0x9c>
 8011e36:	9b03      	ldr	r3, [sp, #12]
 8011e38:	1d19      	adds	r1, r3, #4
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	9103      	str	r1, [sp, #12]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	bfbb      	ittet	lt
 8011e42:	425b      	neglt	r3, r3
 8011e44:	f042 0202 	orrlt.w	r2, r2, #2
 8011e48:	9307      	strge	r3, [sp, #28]
 8011e4a:	9307      	strlt	r3, [sp, #28]
 8011e4c:	bfb8      	it	lt
 8011e4e:	9204      	strlt	r2, [sp, #16]
 8011e50:	7823      	ldrb	r3, [r4, #0]
 8011e52:	2b2e      	cmp	r3, #46	; 0x2e
 8011e54:	d10c      	bne.n	8011e70 <_svfiprintf_r+0x130>
 8011e56:	7863      	ldrb	r3, [r4, #1]
 8011e58:	2b2a      	cmp	r3, #42	; 0x2a
 8011e5a:	d135      	bne.n	8011ec8 <_svfiprintf_r+0x188>
 8011e5c:	9b03      	ldr	r3, [sp, #12]
 8011e5e:	1d1a      	adds	r2, r3, #4
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	9203      	str	r2, [sp, #12]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	bfb8      	it	lt
 8011e68:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e6c:	3402      	adds	r4, #2
 8011e6e:	9305      	str	r3, [sp, #20]
 8011e70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011f3c <_svfiprintf_r+0x1fc>
 8011e74:	7821      	ldrb	r1, [r4, #0]
 8011e76:	2203      	movs	r2, #3
 8011e78:	4650      	mov	r0, sl
 8011e7a:	f7ee f9d1 	bl	8000220 <memchr>
 8011e7e:	b140      	cbz	r0, 8011e92 <_svfiprintf_r+0x152>
 8011e80:	2340      	movs	r3, #64	; 0x40
 8011e82:	eba0 000a 	sub.w	r0, r0, sl
 8011e86:	fa03 f000 	lsl.w	r0, r3, r0
 8011e8a:	9b04      	ldr	r3, [sp, #16]
 8011e8c:	4303      	orrs	r3, r0
 8011e8e:	3401      	adds	r4, #1
 8011e90:	9304      	str	r3, [sp, #16]
 8011e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e96:	4826      	ldr	r0, [pc, #152]	; (8011f30 <_svfiprintf_r+0x1f0>)
 8011e98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e9c:	2206      	movs	r2, #6
 8011e9e:	f7ee f9bf 	bl	8000220 <memchr>
 8011ea2:	2800      	cmp	r0, #0
 8011ea4:	d038      	beq.n	8011f18 <_svfiprintf_r+0x1d8>
 8011ea6:	4b23      	ldr	r3, [pc, #140]	; (8011f34 <_svfiprintf_r+0x1f4>)
 8011ea8:	bb1b      	cbnz	r3, 8011ef2 <_svfiprintf_r+0x1b2>
 8011eaa:	9b03      	ldr	r3, [sp, #12]
 8011eac:	3307      	adds	r3, #7
 8011eae:	f023 0307 	bic.w	r3, r3, #7
 8011eb2:	3308      	adds	r3, #8
 8011eb4:	9303      	str	r3, [sp, #12]
 8011eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eb8:	4433      	add	r3, r6
 8011eba:	9309      	str	r3, [sp, #36]	; 0x24
 8011ebc:	e767      	b.n	8011d8e <_svfiprintf_r+0x4e>
 8011ebe:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ec2:	460c      	mov	r4, r1
 8011ec4:	2001      	movs	r0, #1
 8011ec6:	e7a5      	b.n	8011e14 <_svfiprintf_r+0xd4>
 8011ec8:	2300      	movs	r3, #0
 8011eca:	3401      	adds	r4, #1
 8011ecc:	9305      	str	r3, [sp, #20]
 8011ece:	4619      	mov	r1, r3
 8011ed0:	f04f 0c0a 	mov.w	ip, #10
 8011ed4:	4620      	mov	r0, r4
 8011ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011eda:	3a30      	subs	r2, #48	; 0x30
 8011edc:	2a09      	cmp	r2, #9
 8011ede:	d903      	bls.n	8011ee8 <_svfiprintf_r+0x1a8>
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d0c5      	beq.n	8011e70 <_svfiprintf_r+0x130>
 8011ee4:	9105      	str	r1, [sp, #20]
 8011ee6:	e7c3      	b.n	8011e70 <_svfiprintf_r+0x130>
 8011ee8:	fb0c 2101 	mla	r1, ip, r1, r2
 8011eec:	4604      	mov	r4, r0
 8011eee:	2301      	movs	r3, #1
 8011ef0:	e7f0      	b.n	8011ed4 <_svfiprintf_r+0x194>
 8011ef2:	ab03      	add	r3, sp, #12
 8011ef4:	9300      	str	r3, [sp, #0]
 8011ef6:	462a      	mov	r2, r5
 8011ef8:	4b0f      	ldr	r3, [pc, #60]	; (8011f38 <_svfiprintf_r+0x1f8>)
 8011efa:	a904      	add	r1, sp, #16
 8011efc:	4638      	mov	r0, r7
 8011efe:	f7fc fa4f 	bl	800e3a0 <_printf_float>
 8011f02:	1c42      	adds	r2, r0, #1
 8011f04:	4606      	mov	r6, r0
 8011f06:	d1d6      	bne.n	8011eb6 <_svfiprintf_r+0x176>
 8011f08:	89ab      	ldrh	r3, [r5, #12]
 8011f0a:	065b      	lsls	r3, r3, #25
 8011f0c:	f53f af2c 	bmi.w	8011d68 <_svfiprintf_r+0x28>
 8011f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f12:	b01d      	add	sp, #116	; 0x74
 8011f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f18:	ab03      	add	r3, sp, #12
 8011f1a:	9300      	str	r3, [sp, #0]
 8011f1c:	462a      	mov	r2, r5
 8011f1e:	4b06      	ldr	r3, [pc, #24]	; (8011f38 <_svfiprintf_r+0x1f8>)
 8011f20:	a904      	add	r1, sp, #16
 8011f22:	4638      	mov	r0, r7
 8011f24:	f7fc fce0 	bl	800e8e8 <_printf_i>
 8011f28:	e7eb      	b.n	8011f02 <_svfiprintf_r+0x1c2>
 8011f2a:	bf00      	nop
 8011f2c:	0801319c 	.word	0x0801319c
 8011f30:	080131a6 	.word	0x080131a6
 8011f34:	0800e3a1 	.word	0x0800e3a1
 8011f38:	08011c89 	.word	0x08011c89
 8011f3c:	080131a2 	.word	0x080131a2

08011f40 <nan>:
 8011f40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011f48 <nan+0x8>
 8011f44:	4770      	bx	lr
 8011f46:	bf00      	nop
 8011f48:	00000000 	.word	0x00000000
 8011f4c:	7ff80000 	.word	0x7ff80000

08011f50 <_sbrk_r>:
 8011f50:	b538      	push	{r3, r4, r5, lr}
 8011f52:	4d06      	ldr	r5, [pc, #24]	; (8011f6c <_sbrk_r+0x1c>)
 8011f54:	2300      	movs	r3, #0
 8011f56:	4604      	mov	r4, r0
 8011f58:	4608      	mov	r0, r1
 8011f5a:	602b      	str	r3, [r5, #0]
 8011f5c:	f7ef fe00 	bl	8001b60 <_sbrk>
 8011f60:	1c43      	adds	r3, r0, #1
 8011f62:	d102      	bne.n	8011f6a <_sbrk_r+0x1a>
 8011f64:	682b      	ldr	r3, [r5, #0]
 8011f66:	b103      	cbz	r3, 8011f6a <_sbrk_r+0x1a>
 8011f68:	6023      	str	r3, [r4, #0]
 8011f6a:	bd38      	pop	{r3, r4, r5, pc}
 8011f6c:	20000764 	.word	0x20000764

08011f70 <strncmp>:
 8011f70:	b510      	push	{r4, lr}
 8011f72:	b17a      	cbz	r2, 8011f94 <strncmp+0x24>
 8011f74:	4603      	mov	r3, r0
 8011f76:	3901      	subs	r1, #1
 8011f78:	1884      	adds	r4, r0, r2
 8011f7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011f7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011f82:	4290      	cmp	r0, r2
 8011f84:	d101      	bne.n	8011f8a <strncmp+0x1a>
 8011f86:	42a3      	cmp	r3, r4
 8011f88:	d101      	bne.n	8011f8e <strncmp+0x1e>
 8011f8a:	1a80      	subs	r0, r0, r2
 8011f8c:	bd10      	pop	{r4, pc}
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	d1f3      	bne.n	8011f7a <strncmp+0xa>
 8011f92:	e7fa      	b.n	8011f8a <strncmp+0x1a>
 8011f94:	4610      	mov	r0, r2
 8011f96:	e7f9      	b.n	8011f8c <strncmp+0x1c>

08011f98 <__ascii_wctomb>:
 8011f98:	b149      	cbz	r1, 8011fae <__ascii_wctomb+0x16>
 8011f9a:	2aff      	cmp	r2, #255	; 0xff
 8011f9c:	bf85      	ittet	hi
 8011f9e:	238a      	movhi	r3, #138	; 0x8a
 8011fa0:	6003      	strhi	r3, [r0, #0]
 8011fa2:	700a      	strbls	r2, [r1, #0]
 8011fa4:	f04f 30ff 	movhi.w	r0, #4294967295
 8011fa8:	bf98      	it	ls
 8011faa:	2001      	movls	r0, #1
 8011fac:	4770      	bx	lr
 8011fae:	4608      	mov	r0, r1
 8011fb0:	4770      	bx	lr
	...

08011fb4 <__assert_func>:
 8011fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011fb6:	4614      	mov	r4, r2
 8011fb8:	461a      	mov	r2, r3
 8011fba:	4b09      	ldr	r3, [pc, #36]	; (8011fe0 <__assert_func+0x2c>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	4605      	mov	r5, r0
 8011fc0:	68d8      	ldr	r0, [r3, #12]
 8011fc2:	b14c      	cbz	r4, 8011fd8 <__assert_func+0x24>
 8011fc4:	4b07      	ldr	r3, [pc, #28]	; (8011fe4 <__assert_func+0x30>)
 8011fc6:	9100      	str	r1, [sp, #0]
 8011fc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011fcc:	4906      	ldr	r1, [pc, #24]	; (8011fe8 <__assert_func+0x34>)
 8011fce:	462b      	mov	r3, r5
 8011fd0:	f000 f80e 	bl	8011ff0 <fiprintf>
 8011fd4:	f000 fa8c 	bl	80124f0 <abort>
 8011fd8:	4b04      	ldr	r3, [pc, #16]	; (8011fec <__assert_func+0x38>)
 8011fda:	461c      	mov	r4, r3
 8011fdc:	e7f3      	b.n	8011fc6 <__assert_func+0x12>
 8011fde:	bf00      	nop
 8011fe0:	200002c8 	.word	0x200002c8
 8011fe4:	080131ad 	.word	0x080131ad
 8011fe8:	080131ba 	.word	0x080131ba
 8011fec:	080131e8 	.word	0x080131e8

08011ff0 <fiprintf>:
 8011ff0:	b40e      	push	{r1, r2, r3}
 8011ff2:	b503      	push	{r0, r1, lr}
 8011ff4:	4601      	mov	r1, r0
 8011ff6:	ab03      	add	r3, sp, #12
 8011ff8:	4805      	ldr	r0, [pc, #20]	; (8012010 <fiprintf+0x20>)
 8011ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ffe:	6800      	ldr	r0, [r0, #0]
 8012000:	9301      	str	r3, [sp, #4]
 8012002:	f000 f885 	bl	8012110 <_vfiprintf_r>
 8012006:	b002      	add	sp, #8
 8012008:	f85d eb04 	ldr.w	lr, [sp], #4
 801200c:	b003      	add	sp, #12
 801200e:	4770      	bx	lr
 8012010:	200002c8 	.word	0x200002c8

08012014 <memmove>:
 8012014:	4288      	cmp	r0, r1
 8012016:	b510      	push	{r4, lr}
 8012018:	eb01 0402 	add.w	r4, r1, r2
 801201c:	d902      	bls.n	8012024 <memmove+0x10>
 801201e:	4284      	cmp	r4, r0
 8012020:	4623      	mov	r3, r4
 8012022:	d807      	bhi.n	8012034 <memmove+0x20>
 8012024:	1e43      	subs	r3, r0, #1
 8012026:	42a1      	cmp	r1, r4
 8012028:	d008      	beq.n	801203c <memmove+0x28>
 801202a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801202e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012032:	e7f8      	b.n	8012026 <memmove+0x12>
 8012034:	4402      	add	r2, r0
 8012036:	4601      	mov	r1, r0
 8012038:	428a      	cmp	r2, r1
 801203a:	d100      	bne.n	801203e <memmove+0x2a>
 801203c:	bd10      	pop	{r4, pc}
 801203e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012046:	e7f7      	b.n	8012038 <memmove+0x24>

08012048 <__malloc_lock>:
 8012048:	4801      	ldr	r0, [pc, #4]	; (8012050 <__malloc_lock+0x8>)
 801204a:	f000 bc11 	b.w	8012870 <__retarget_lock_acquire_recursive>
 801204e:	bf00      	nop
 8012050:	20000768 	.word	0x20000768

08012054 <__malloc_unlock>:
 8012054:	4801      	ldr	r0, [pc, #4]	; (801205c <__malloc_unlock+0x8>)
 8012056:	f000 bc0c 	b.w	8012872 <__retarget_lock_release_recursive>
 801205a:	bf00      	nop
 801205c:	20000768 	.word	0x20000768

08012060 <_realloc_r>:
 8012060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012064:	4680      	mov	r8, r0
 8012066:	4614      	mov	r4, r2
 8012068:	460e      	mov	r6, r1
 801206a:	b921      	cbnz	r1, 8012076 <_realloc_r+0x16>
 801206c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012070:	4611      	mov	r1, r2
 8012072:	f7ff bd95 	b.w	8011ba0 <_malloc_r>
 8012076:	b92a      	cbnz	r2, 8012084 <_realloc_r+0x24>
 8012078:	f7ff fd26 	bl	8011ac8 <_free_r>
 801207c:	4625      	mov	r5, r4
 801207e:	4628      	mov	r0, r5
 8012080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012084:	f000 fc5c 	bl	8012940 <_malloc_usable_size_r>
 8012088:	4284      	cmp	r4, r0
 801208a:	4607      	mov	r7, r0
 801208c:	d802      	bhi.n	8012094 <_realloc_r+0x34>
 801208e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012092:	d812      	bhi.n	80120ba <_realloc_r+0x5a>
 8012094:	4621      	mov	r1, r4
 8012096:	4640      	mov	r0, r8
 8012098:	f7ff fd82 	bl	8011ba0 <_malloc_r>
 801209c:	4605      	mov	r5, r0
 801209e:	2800      	cmp	r0, #0
 80120a0:	d0ed      	beq.n	801207e <_realloc_r+0x1e>
 80120a2:	42bc      	cmp	r4, r7
 80120a4:	4622      	mov	r2, r4
 80120a6:	4631      	mov	r1, r6
 80120a8:	bf28      	it	cs
 80120aa:	463a      	movcs	r2, r7
 80120ac:	f7fc f8c2 	bl	800e234 <memcpy>
 80120b0:	4631      	mov	r1, r6
 80120b2:	4640      	mov	r0, r8
 80120b4:	f7ff fd08 	bl	8011ac8 <_free_r>
 80120b8:	e7e1      	b.n	801207e <_realloc_r+0x1e>
 80120ba:	4635      	mov	r5, r6
 80120bc:	e7df      	b.n	801207e <_realloc_r+0x1e>

080120be <__sfputc_r>:
 80120be:	6893      	ldr	r3, [r2, #8]
 80120c0:	3b01      	subs	r3, #1
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	b410      	push	{r4}
 80120c6:	6093      	str	r3, [r2, #8]
 80120c8:	da08      	bge.n	80120dc <__sfputc_r+0x1e>
 80120ca:	6994      	ldr	r4, [r2, #24]
 80120cc:	42a3      	cmp	r3, r4
 80120ce:	db01      	blt.n	80120d4 <__sfputc_r+0x16>
 80120d0:	290a      	cmp	r1, #10
 80120d2:	d103      	bne.n	80120dc <__sfputc_r+0x1e>
 80120d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120d8:	f000 b94a 	b.w	8012370 <__swbuf_r>
 80120dc:	6813      	ldr	r3, [r2, #0]
 80120de:	1c58      	adds	r0, r3, #1
 80120e0:	6010      	str	r0, [r2, #0]
 80120e2:	7019      	strb	r1, [r3, #0]
 80120e4:	4608      	mov	r0, r1
 80120e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120ea:	4770      	bx	lr

080120ec <__sfputs_r>:
 80120ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ee:	4606      	mov	r6, r0
 80120f0:	460f      	mov	r7, r1
 80120f2:	4614      	mov	r4, r2
 80120f4:	18d5      	adds	r5, r2, r3
 80120f6:	42ac      	cmp	r4, r5
 80120f8:	d101      	bne.n	80120fe <__sfputs_r+0x12>
 80120fa:	2000      	movs	r0, #0
 80120fc:	e007      	b.n	801210e <__sfputs_r+0x22>
 80120fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012102:	463a      	mov	r2, r7
 8012104:	4630      	mov	r0, r6
 8012106:	f7ff ffda 	bl	80120be <__sfputc_r>
 801210a:	1c43      	adds	r3, r0, #1
 801210c:	d1f3      	bne.n	80120f6 <__sfputs_r+0xa>
 801210e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012110 <_vfiprintf_r>:
 8012110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012114:	460d      	mov	r5, r1
 8012116:	b09d      	sub	sp, #116	; 0x74
 8012118:	4614      	mov	r4, r2
 801211a:	4698      	mov	r8, r3
 801211c:	4606      	mov	r6, r0
 801211e:	b118      	cbz	r0, 8012128 <_vfiprintf_r+0x18>
 8012120:	6983      	ldr	r3, [r0, #24]
 8012122:	b90b      	cbnz	r3, 8012128 <_vfiprintf_r+0x18>
 8012124:	f000 fb06 	bl	8012734 <__sinit>
 8012128:	4b89      	ldr	r3, [pc, #548]	; (8012350 <_vfiprintf_r+0x240>)
 801212a:	429d      	cmp	r5, r3
 801212c:	d11b      	bne.n	8012166 <_vfiprintf_r+0x56>
 801212e:	6875      	ldr	r5, [r6, #4]
 8012130:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012132:	07d9      	lsls	r1, r3, #31
 8012134:	d405      	bmi.n	8012142 <_vfiprintf_r+0x32>
 8012136:	89ab      	ldrh	r3, [r5, #12]
 8012138:	059a      	lsls	r2, r3, #22
 801213a:	d402      	bmi.n	8012142 <_vfiprintf_r+0x32>
 801213c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801213e:	f000 fb97 	bl	8012870 <__retarget_lock_acquire_recursive>
 8012142:	89ab      	ldrh	r3, [r5, #12]
 8012144:	071b      	lsls	r3, r3, #28
 8012146:	d501      	bpl.n	801214c <_vfiprintf_r+0x3c>
 8012148:	692b      	ldr	r3, [r5, #16]
 801214a:	b9eb      	cbnz	r3, 8012188 <_vfiprintf_r+0x78>
 801214c:	4629      	mov	r1, r5
 801214e:	4630      	mov	r0, r6
 8012150:	f000 f960 	bl	8012414 <__swsetup_r>
 8012154:	b1c0      	cbz	r0, 8012188 <_vfiprintf_r+0x78>
 8012156:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012158:	07dc      	lsls	r4, r3, #31
 801215a:	d50e      	bpl.n	801217a <_vfiprintf_r+0x6a>
 801215c:	f04f 30ff 	mov.w	r0, #4294967295
 8012160:	b01d      	add	sp, #116	; 0x74
 8012162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012166:	4b7b      	ldr	r3, [pc, #492]	; (8012354 <_vfiprintf_r+0x244>)
 8012168:	429d      	cmp	r5, r3
 801216a:	d101      	bne.n	8012170 <_vfiprintf_r+0x60>
 801216c:	68b5      	ldr	r5, [r6, #8]
 801216e:	e7df      	b.n	8012130 <_vfiprintf_r+0x20>
 8012170:	4b79      	ldr	r3, [pc, #484]	; (8012358 <_vfiprintf_r+0x248>)
 8012172:	429d      	cmp	r5, r3
 8012174:	bf08      	it	eq
 8012176:	68f5      	ldreq	r5, [r6, #12]
 8012178:	e7da      	b.n	8012130 <_vfiprintf_r+0x20>
 801217a:	89ab      	ldrh	r3, [r5, #12]
 801217c:	0598      	lsls	r0, r3, #22
 801217e:	d4ed      	bmi.n	801215c <_vfiprintf_r+0x4c>
 8012180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012182:	f000 fb76 	bl	8012872 <__retarget_lock_release_recursive>
 8012186:	e7e9      	b.n	801215c <_vfiprintf_r+0x4c>
 8012188:	2300      	movs	r3, #0
 801218a:	9309      	str	r3, [sp, #36]	; 0x24
 801218c:	2320      	movs	r3, #32
 801218e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012192:	f8cd 800c 	str.w	r8, [sp, #12]
 8012196:	2330      	movs	r3, #48	; 0x30
 8012198:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801235c <_vfiprintf_r+0x24c>
 801219c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80121a0:	f04f 0901 	mov.w	r9, #1
 80121a4:	4623      	mov	r3, r4
 80121a6:	469a      	mov	sl, r3
 80121a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121ac:	b10a      	cbz	r2, 80121b2 <_vfiprintf_r+0xa2>
 80121ae:	2a25      	cmp	r2, #37	; 0x25
 80121b0:	d1f9      	bne.n	80121a6 <_vfiprintf_r+0x96>
 80121b2:	ebba 0b04 	subs.w	fp, sl, r4
 80121b6:	d00b      	beq.n	80121d0 <_vfiprintf_r+0xc0>
 80121b8:	465b      	mov	r3, fp
 80121ba:	4622      	mov	r2, r4
 80121bc:	4629      	mov	r1, r5
 80121be:	4630      	mov	r0, r6
 80121c0:	f7ff ff94 	bl	80120ec <__sfputs_r>
 80121c4:	3001      	adds	r0, #1
 80121c6:	f000 80aa 	beq.w	801231e <_vfiprintf_r+0x20e>
 80121ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121cc:	445a      	add	r2, fp
 80121ce:	9209      	str	r2, [sp, #36]	; 0x24
 80121d0:	f89a 3000 	ldrb.w	r3, [sl]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	f000 80a2 	beq.w	801231e <_vfiprintf_r+0x20e>
 80121da:	2300      	movs	r3, #0
 80121dc:	f04f 32ff 	mov.w	r2, #4294967295
 80121e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121e4:	f10a 0a01 	add.w	sl, sl, #1
 80121e8:	9304      	str	r3, [sp, #16]
 80121ea:	9307      	str	r3, [sp, #28]
 80121ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80121f0:	931a      	str	r3, [sp, #104]	; 0x68
 80121f2:	4654      	mov	r4, sl
 80121f4:	2205      	movs	r2, #5
 80121f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121fa:	4858      	ldr	r0, [pc, #352]	; (801235c <_vfiprintf_r+0x24c>)
 80121fc:	f7ee f810 	bl	8000220 <memchr>
 8012200:	9a04      	ldr	r2, [sp, #16]
 8012202:	b9d8      	cbnz	r0, 801223c <_vfiprintf_r+0x12c>
 8012204:	06d1      	lsls	r1, r2, #27
 8012206:	bf44      	itt	mi
 8012208:	2320      	movmi	r3, #32
 801220a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801220e:	0713      	lsls	r3, r2, #28
 8012210:	bf44      	itt	mi
 8012212:	232b      	movmi	r3, #43	; 0x2b
 8012214:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012218:	f89a 3000 	ldrb.w	r3, [sl]
 801221c:	2b2a      	cmp	r3, #42	; 0x2a
 801221e:	d015      	beq.n	801224c <_vfiprintf_r+0x13c>
 8012220:	9a07      	ldr	r2, [sp, #28]
 8012222:	4654      	mov	r4, sl
 8012224:	2000      	movs	r0, #0
 8012226:	f04f 0c0a 	mov.w	ip, #10
 801222a:	4621      	mov	r1, r4
 801222c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012230:	3b30      	subs	r3, #48	; 0x30
 8012232:	2b09      	cmp	r3, #9
 8012234:	d94e      	bls.n	80122d4 <_vfiprintf_r+0x1c4>
 8012236:	b1b0      	cbz	r0, 8012266 <_vfiprintf_r+0x156>
 8012238:	9207      	str	r2, [sp, #28]
 801223a:	e014      	b.n	8012266 <_vfiprintf_r+0x156>
 801223c:	eba0 0308 	sub.w	r3, r0, r8
 8012240:	fa09 f303 	lsl.w	r3, r9, r3
 8012244:	4313      	orrs	r3, r2
 8012246:	9304      	str	r3, [sp, #16]
 8012248:	46a2      	mov	sl, r4
 801224a:	e7d2      	b.n	80121f2 <_vfiprintf_r+0xe2>
 801224c:	9b03      	ldr	r3, [sp, #12]
 801224e:	1d19      	adds	r1, r3, #4
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	9103      	str	r1, [sp, #12]
 8012254:	2b00      	cmp	r3, #0
 8012256:	bfbb      	ittet	lt
 8012258:	425b      	neglt	r3, r3
 801225a:	f042 0202 	orrlt.w	r2, r2, #2
 801225e:	9307      	strge	r3, [sp, #28]
 8012260:	9307      	strlt	r3, [sp, #28]
 8012262:	bfb8      	it	lt
 8012264:	9204      	strlt	r2, [sp, #16]
 8012266:	7823      	ldrb	r3, [r4, #0]
 8012268:	2b2e      	cmp	r3, #46	; 0x2e
 801226a:	d10c      	bne.n	8012286 <_vfiprintf_r+0x176>
 801226c:	7863      	ldrb	r3, [r4, #1]
 801226e:	2b2a      	cmp	r3, #42	; 0x2a
 8012270:	d135      	bne.n	80122de <_vfiprintf_r+0x1ce>
 8012272:	9b03      	ldr	r3, [sp, #12]
 8012274:	1d1a      	adds	r2, r3, #4
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	9203      	str	r2, [sp, #12]
 801227a:	2b00      	cmp	r3, #0
 801227c:	bfb8      	it	lt
 801227e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012282:	3402      	adds	r4, #2
 8012284:	9305      	str	r3, [sp, #20]
 8012286:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801236c <_vfiprintf_r+0x25c>
 801228a:	7821      	ldrb	r1, [r4, #0]
 801228c:	2203      	movs	r2, #3
 801228e:	4650      	mov	r0, sl
 8012290:	f7ed ffc6 	bl	8000220 <memchr>
 8012294:	b140      	cbz	r0, 80122a8 <_vfiprintf_r+0x198>
 8012296:	2340      	movs	r3, #64	; 0x40
 8012298:	eba0 000a 	sub.w	r0, r0, sl
 801229c:	fa03 f000 	lsl.w	r0, r3, r0
 80122a0:	9b04      	ldr	r3, [sp, #16]
 80122a2:	4303      	orrs	r3, r0
 80122a4:	3401      	adds	r4, #1
 80122a6:	9304      	str	r3, [sp, #16]
 80122a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122ac:	482c      	ldr	r0, [pc, #176]	; (8012360 <_vfiprintf_r+0x250>)
 80122ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80122b2:	2206      	movs	r2, #6
 80122b4:	f7ed ffb4 	bl	8000220 <memchr>
 80122b8:	2800      	cmp	r0, #0
 80122ba:	d03f      	beq.n	801233c <_vfiprintf_r+0x22c>
 80122bc:	4b29      	ldr	r3, [pc, #164]	; (8012364 <_vfiprintf_r+0x254>)
 80122be:	bb1b      	cbnz	r3, 8012308 <_vfiprintf_r+0x1f8>
 80122c0:	9b03      	ldr	r3, [sp, #12]
 80122c2:	3307      	adds	r3, #7
 80122c4:	f023 0307 	bic.w	r3, r3, #7
 80122c8:	3308      	adds	r3, #8
 80122ca:	9303      	str	r3, [sp, #12]
 80122cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122ce:	443b      	add	r3, r7
 80122d0:	9309      	str	r3, [sp, #36]	; 0x24
 80122d2:	e767      	b.n	80121a4 <_vfiprintf_r+0x94>
 80122d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80122d8:	460c      	mov	r4, r1
 80122da:	2001      	movs	r0, #1
 80122dc:	e7a5      	b.n	801222a <_vfiprintf_r+0x11a>
 80122de:	2300      	movs	r3, #0
 80122e0:	3401      	adds	r4, #1
 80122e2:	9305      	str	r3, [sp, #20]
 80122e4:	4619      	mov	r1, r3
 80122e6:	f04f 0c0a 	mov.w	ip, #10
 80122ea:	4620      	mov	r0, r4
 80122ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122f0:	3a30      	subs	r2, #48	; 0x30
 80122f2:	2a09      	cmp	r2, #9
 80122f4:	d903      	bls.n	80122fe <_vfiprintf_r+0x1ee>
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d0c5      	beq.n	8012286 <_vfiprintf_r+0x176>
 80122fa:	9105      	str	r1, [sp, #20]
 80122fc:	e7c3      	b.n	8012286 <_vfiprintf_r+0x176>
 80122fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8012302:	4604      	mov	r4, r0
 8012304:	2301      	movs	r3, #1
 8012306:	e7f0      	b.n	80122ea <_vfiprintf_r+0x1da>
 8012308:	ab03      	add	r3, sp, #12
 801230a:	9300      	str	r3, [sp, #0]
 801230c:	462a      	mov	r2, r5
 801230e:	4b16      	ldr	r3, [pc, #88]	; (8012368 <_vfiprintf_r+0x258>)
 8012310:	a904      	add	r1, sp, #16
 8012312:	4630      	mov	r0, r6
 8012314:	f7fc f844 	bl	800e3a0 <_printf_float>
 8012318:	4607      	mov	r7, r0
 801231a:	1c78      	adds	r0, r7, #1
 801231c:	d1d6      	bne.n	80122cc <_vfiprintf_r+0x1bc>
 801231e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012320:	07d9      	lsls	r1, r3, #31
 8012322:	d405      	bmi.n	8012330 <_vfiprintf_r+0x220>
 8012324:	89ab      	ldrh	r3, [r5, #12]
 8012326:	059a      	lsls	r2, r3, #22
 8012328:	d402      	bmi.n	8012330 <_vfiprintf_r+0x220>
 801232a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801232c:	f000 faa1 	bl	8012872 <__retarget_lock_release_recursive>
 8012330:	89ab      	ldrh	r3, [r5, #12]
 8012332:	065b      	lsls	r3, r3, #25
 8012334:	f53f af12 	bmi.w	801215c <_vfiprintf_r+0x4c>
 8012338:	9809      	ldr	r0, [sp, #36]	; 0x24
 801233a:	e711      	b.n	8012160 <_vfiprintf_r+0x50>
 801233c:	ab03      	add	r3, sp, #12
 801233e:	9300      	str	r3, [sp, #0]
 8012340:	462a      	mov	r2, r5
 8012342:	4b09      	ldr	r3, [pc, #36]	; (8012368 <_vfiprintf_r+0x258>)
 8012344:	a904      	add	r1, sp, #16
 8012346:	4630      	mov	r0, r6
 8012348:	f7fc face 	bl	800e8e8 <_printf_i>
 801234c:	e7e4      	b.n	8012318 <_vfiprintf_r+0x208>
 801234e:	bf00      	nop
 8012350:	0801320c 	.word	0x0801320c
 8012354:	0801322c 	.word	0x0801322c
 8012358:	080131ec 	.word	0x080131ec
 801235c:	0801319c 	.word	0x0801319c
 8012360:	080131a6 	.word	0x080131a6
 8012364:	0800e3a1 	.word	0x0800e3a1
 8012368:	080120ed 	.word	0x080120ed
 801236c:	080131a2 	.word	0x080131a2

08012370 <__swbuf_r>:
 8012370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012372:	460e      	mov	r6, r1
 8012374:	4614      	mov	r4, r2
 8012376:	4605      	mov	r5, r0
 8012378:	b118      	cbz	r0, 8012382 <__swbuf_r+0x12>
 801237a:	6983      	ldr	r3, [r0, #24]
 801237c:	b90b      	cbnz	r3, 8012382 <__swbuf_r+0x12>
 801237e:	f000 f9d9 	bl	8012734 <__sinit>
 8012382:	4b21      	ldr	r3, [pc, #132]	; (8012408 <__swbuf_r+0x98>)
 8012384:	429c      	cmp	r4, r3
 8012386:	d12b      	bne.n	80123e0 <__swbuf_r+0x70>
 8012388:	686c      	ldr	r4, [r5, #4]
 801238a:	69a3      	ldr	r3, [r4, #24]
 801238c:	60a3      	str	r3, [r4, #8]
 801238e:	89a3      	ldrh	r3, [r4, #12]
 8012390:	071a      	lsls	r2, r3, #28
 8012392:	d52f      	bpl.n	80123f4 <__swbuf_r+0x84>
 8012394:	6923      	ldr	r3, [r4, #16]
 8012396:	b36b      	cbz	r3, 80123f4 <__swbuf_r+0x84>
 8012398:	6923      	ldr	r3, [r4, #16]
 801239a:	6820      	ldr	r0, [r4, #0]
 801239c:	1ac0      	subs	r0, r0, r3
 801239e:	6963      	ldr	r3, [r4, #20]
 80123a0:	b2f6      	uxtb	r6, r6
 80123a2:	4283      	cmp	r3, r0
 80123a4:	4637      	mov	r7, r6
 80123a6:	dc04      	bgt.n	80123b2 <__swbuf_r+0x42>
 80123a8:	4621      	mov	r1, r4
 80123aa:	4628      	mov	r0, r5
 80123ac:	f000 f92e 	bl	801260c <_fflush_r>
 80123b0:	bb30      	cbnz	r0, 8012400 <__swbuf_r+0x90>
 80123b2:	68a3      	ldr	r3, [r4, #8]
 80123b4:	3b01      	subs	r3, #1
 80123b6:	60a3      	str	r3, [r4, #8]
 80123b8:	6823      	ldr	r3, [r4, #0]
 80123ba:	1c5a      	adds	r2, r3, #1
 80123bc:	6022      	str	r2, [r4, #0]
 80123be:	701e      	strb	r6, [r3, #0]
 80123c0:	6963      	ldr	r3, [r4, #20]
 80123c2:	3001      	adds	r0, #1
 80123c4:	4283      	cmp	r3, r0
 80123c6:	d004      	beq.n	80123d2 <__swbuf_r+0x62>
 80123c8:	89a3      	ldrh	r3, [r4, #12]
 80123ca:	07db      	lsls	r3, r3, #31
 80123cc:	d506      	bpl.n	80123dc <__swbuf_r+0x6c>
 80123ce:	2e0a      	cmp	r6, #10
 80123d0:	d104      	bne.n	80123dc <__swbuf_r+0x6c>
 80123d2:	4621      	mov	r1, r4
 80123d4:	4628      	mov	r0, r5
 80123d6:	f000 f919 	bl	801260c <_fflush_r>
 80123da:	b988      	cbnz	r0, 8012400 <__swbuf_r+0x90>
 80123dc:	4638      	mov	r0, r7
 80123de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123e0:	4b0a      	ldr	r3, [pc, #40]	; (801240c <__swbuf_r+0x9c>)
 80123e2:	429c      	cmp	r4, r3
 80123e4:	d101      	bne.n	80123ea <__swbuf_r+0x7a>
 80123e6:	68ac      	ldr	r4, [r5, #8]
 80123e8:	e7cf      	b.n	801238a <__swbuf_r+0x1a>
 80123ea:	4b09      	ldr	r3, [pc, #36]	; (8012410 <__swbuf_r+0xa0>)
 80123ec:	429c      	cmp	r4, r3
 80123ee:	bf08      	it	eq
 80123f0:	68ec      	ldreq	r4, [r5, #12]
 80123f2:	e7ca      	b.n	801238a <__swbuf_r+0x1a>
 80123f4:	4621      	mov	r1, r4
 80123f6:	4628      	mov	r0, r5
 80123f8:	f000 f80c 	bl	8012414 <__swsetup_r>
 80123fc:	2800      	cmp	r0, #0
 80123fe:	d0cb      	beq.n	8012398 <__swbuf_r+0x28>
 8012400:	f04f 37ff 	mov.w	r7, #4294967295
 8012404:	e7ea      	b.n	80123dc <__swbuf_r+0x6c>
 8012406:	bf00      	nop
 8012408:	0801320c 	.word	0x0801320c
 801240c:	0801322c 	.word	0x0801322c
 8012410:	080131ec 	.word	0x080131ec

08012414 <__swsetup_r>:
 8012414:	4b32      	ldr	r3, [pc, #200]	; (80124e0 <__swsetup_r+0xcc>)
 8012416:	b570      	push	{r4, r5, r6, lr}
 8012418:	681d      	ldr	r5, [r3, #0]
 801241a:	4606      	mov	r6, r0
 801241c:	460c      	mov	r4, r1
 801241e:	b125      	cbz	r5, 801242a <__swsetup_r+0x16>
 8012420:	69ab      	ldr	r3, [r5, #24]
 8012422:	b913      	cbnz	r3, 801242a <__swsetup_r+0x16>
 8012424:	4628      	mov	r0, r5
 8012426:	f000 f985 	bl	8012734 <__sinit>
 801242a:	4b2e      	ldr	r3, [pc, #184]	; (80124e4 <__swsetup_r+0xd0>)
 801242c:	429c      	cmp	r4, r3
 801242e:	d10f      	bne.n	8012450 <__swsetup_r+0x3c>
 8012430:	686c      	ldr	r4, [r5, #4]
 8012432:	89a3      	ldrh	r3, [r4, #12]
 8012434:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012438:	0719      	lsls	r1, r3, #28
 801243a:	d42c      	bmi.n	8012496 <__swsetup_r+0x82>
 801243c:	06dd      	lsls	r5, r3, #27
 801243e:	d411      	bmi.n	8012464 <__swsetup_r+0x50>
 8012440:	2309      	movs	r3, #9
 8012442:	6033      	str	r3, [r6, #0]
 8012444:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012448:	81a3      	strh	r3, [r4, #12]
 801244a:	f04f 30ff 	mov.w	r0, #4294967295
 801244e:	e03e      	b.n	80124ce <__swsetup_r+0xba>
 8012450:	4b25      	ldr	r3, [pc, #148]	; (80124e8 <__swsetup_r+0xd4>)
 8012452:	429c      	cmp	r4, r3
 8012454:	d101      	bne.n	801245a <__swsetup_r+0x46>
 8012456:	68ac      	ldr	r4, [r5, #8]
 8012458:	e7eb      	b.n	8012432 <__swsetup_r+0x1e>
 801245a:	4b24      	ldr	r3, [pc, #144]	; (80124ec <__swsetup_r+0xd8>)
 801245c:	429c      	cmp	r4, r3
 801245e:	bf08      	it	eq
 8012460:	68ec      	ldreq	r4, [r5, #12]
 8012462:	e7e6      	b.n	8012432 <__swsetup_r+0x1e>
 8012464:	0758      	lsls	r0, r3, #29
 8012466:	d512      	bpl.n	801248e <__swsetup_r+0x7a>
 8012468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801246a:	b141      	cbz	r1, 801247e <__swsetup_r+0x6a>
 801246c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012470:	4299      	cmp	r1, r3
 8012472:	d002      	beq.n	801247a <__swsetup_r+0x66>
 8012474:	4630      	mov	r0, r6
 8012476:	f7ff fb27 	bl	8011ac8 <_free_r>
 801247a:	2300      	movs	r3, #0
 801247c:	6363      	str	r3, [r4, #52]	; 0x34
 801247e:	89a3      	ldrh	r3, [r4, #12]
 8012480:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012484:	81a3      	strh	r3, [r4, #12]
 8012486:	2300      	movs	r3, #0
 8012488:	6063      	str	r3, [r4, #4]
 801248a:	6923      	ldr	r3, [r4, #16]
 801248c:	6023      	str	r3, [r4, #0]
 801248e:	89a3      	ldrh	r3, [r4, #12]
 8012490:	f043 0308 	orr.w	r3, r3, #8
 8012494:	81a3      	strh	r3, [r4, #12]
 8012496:	6923      	ldr	r3, [r4, #16]
 8012498:	b94b      	cbnz	r3, 80124ae <__swsetup_r+0x9a>
 801249a:	89a3      	ldrh	r3, [r4, #12]
 801249c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80124a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80124a4:	d003      	beq.n	80124ae <__swsetup_r+0x9a>
 80124a6:	4621      	mov	r1, r4
 80124a8:	4630      	mov	r0, r6
 80124aa:	f000 fa09 	bl	80128c0 <__smakebuf_r>
 80124ae:	89a0      	ldrh	r0, [r4, #12]
 80124b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80124b4:	f010 0301 	ands.w	r3, r0, #1
 80124b8:	d00a      	beq.n	80124d0 <__swsetup_r+0xbc>
 80124ba:	2300      	movs	r3, #0
 80124bc:	60a3      	str	r3, [r4, #8]
 80124be:	6963      	ldr	r3, [r4, #20]
 80124c0:	425b      	negs	r3, r3
 80124c2:	61a3      	str	r3, [r4, #24]
 80124c4:	6923      	ldr	r3, [r4, #16]
 80124c6:	b943      	cbnz	r3, 80124da <__swsetup_r+0xc6>
 80124c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80124cc:	d1ba      	bne.n	8012444 <__swsetup_r+0x30>
 80124ce:	bd70      	pop	{r4, r5, r6, pc}
 80124d0:	0781      	lsls	r1, r0, #30
 80124d2:	bf58      	it	pl
 80124d4:	6963      	ldrpl	r3, [r4, #20]
 80124d6:	60a3      	str	r3, [r4, #8]
 80124d8:	e7f4      	b.n	80124c4 <__swsetup_r+0xb0>
 80124da:	2000      	movs	r0, #0
 80124dc:	e7f7      	b.n	80124ce <__swsetup_r+0xba>
 80124de:	bf00      	nop
 80124e0:	200002c8 	.word	0x200002c8
 80124e4:	0801320c 	.word	0x0801320c
 80124e8:	0801322c 	.word	0x0801322c
 80124ec:	080131ec 	.word	0x080131ec

080124f0 <abort>:
 80124f0:	b508      	push	{r3, lr}
 80124f2:	2006      	movs	r0, #6
 80124f4:	f000 fa54 	bl	80129a0 <raise>
 80124f8:	2001      	movs	r0, #1
 80124fa:	f7ef fab9 	bl	8001a70 <_exit>
	...

08012500 <__sflush_r>:
 8012500:	898a      	ldrh	r2, [r1, #12]
 8012502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012506:	4605      	mov	r5, r0
 8012508:	0710      	lsls	r0, r2, #28
 801250a:	460c      	mov	r4, r1
 801250c:	d458      	bmi.n	80125c0 <__sflush_r+0xc0>
 801250e:	684b      	ldr	r3, [r1, #4]
 8012510:	2b00      	cmp	r3, #0
 8012512:	dc05      	bgt.n	8012520 <__sflush_r+0x20>
 8012514:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012516:	2b00      	cmp	r3, #0
 8012518:	dc02      	bgt.n	8012520 <__sflush_r+0x20>
 801251a:	2000      	movs	r0, #0
 801251c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012520:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012522:	2e00      	cmp	r6, #0
 8012524:	d0f9      	beq.n	801251a <__sflush_r+0x1a>
 8012526:	2300      	movs	r3, #0
 8012528:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801252c:	682f      	ldr	r7, [r5, #0]
 801252e:	602b      	str	r3, [r5, #0]
 8012530:	d032      	beq.n	8012598 <__sflush_r+0x98>
 8012532:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012534:	89a3      	ldrh	r3, [r4, #12]
 8012536:	075a      	lsls	r2, r3, #29
 8012538:	d505      	bpl.n	8012546 <__sflush_r+0x46>
 801253a:	6863      	ldr	r3, [r4, #4]
 801253c:	1ac0      	subs	r0, r0, r3
 801253e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012540:	b10b      	cbz	r3, 8012546 <__sflush_r+0x46>
 8012542:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012544:	1ac0      	subs	r0, r0, r3
 8012546:	2300      	movs	r3, #0
 8012548:	4602      	mov	r2, r0
 801254a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801254c:	6a21      	ldr	r1, [r4, #32]
 801254e:	4628      	mov	r0, r5
 8012550:	47b0      	blx	r6
 8012552:	1c43      	adds	r3, r0, #1
 8012554:	89a3      	ldrh	r3, [r4, #12]
 8012556:	d106      	bne.n	8012566 <__sflush_r+0x66>
 8012558:	6829      	ldr	r1, [r5, #0]
 801255a:	291d      	cmp	r1, #29
 801255c:	d82c      	bhi.n	80125b8 <__sflush_r+0xb8>
 801255e:	4a2a      	ldr	r2, [pc, #168]	; (8012608 <__sflush_r+0x108>)
 8012560:	40ca      	lsrs	r2, r1
 8012562:	07d6      	lsls	r6, r2, #31
 8012564:	d528      	bpl.n	80125b8 <__sflush_r+0xb8>
 8012566:	2200      	movs	r2, #0
 8012568:	6062      	str	r2, [r4, #4]
 801256a:	04d9      	lsls	r1, r3, #19
 801256c:	6922      	ldr	r2, [r4, #16]
 801256e:	6022      	str	r2, [r4, #0]
 8012570:	d504      	bpl.n	801257c <__sflush_r+0x7c>
 8012572:	1c42      	adds	r2, r0, #1
 8012574:	d101      	bne.n	801257a <__sflush_r+0x7a>
 8012576:	682b      	ldr	r3, [r5, #0]
 8012578:	b903      	cbnz	r3, 801257c <__sflush_r+0x7c>
 801257a:	6560      	str	r0, [r4, #84]	; 0x54
 801257c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801257e:	602f      	str	r7, [r5, #0]
 8012580:	2900      	cmp	r1, #0
 8012582:	d0ca      	beq.n	801251a <__sflush_r+0x1a>
 8012584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012588:	4299      	cmp	r1, r3
 801258a:	d002      	beq.n	8012592 <__sflush_r+0x92>
 801258c:	4628      	mov	r0, r5
 801258e:	f7ff fa9b 	bl	8011ac8 <_free_r>
 8012592:	2000      	movs	r0, #0
 8012594:	6360      	str	r0, [r4, #52]	; 0x34
 8012596:	e7c1      	b.n	801251c <__sflush_r+0x1c>
 8012598:	6a21      	ldr	r1, [r4, #32]
 801259a:	2301      	movs	r3, #1
 801259c:	4628      	mov	r0, r5
 801259e:	47b0      	blx	r6
 80125a0:	1c41      	adds	r1, r0, #1
 80125a2:	d1c7      	bne.n	8012534 <__sflush_r+0x34>
 80125a4:	682b      	ldr	r3, [r5, #0]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d0c4      	beq.n	8012534 <__sflush_r+0x34>
 80125aa:	2b1d      	cmp	r3, #29
 80125ac:	d001      	beq.n	80125b2 <__sflush_r+0xb2>
 80125ae:	2b16      	cmp	r3, #22
 80125b0:	d101      	bne.n	80125b6 <__sflush_r+0xb6>
 80125b2:	602f      	str	r7, [r5, #0]
 80125b4:	e7b1      	b.n	801251a <__sflush_r+0x1a>
 80125b6:	89a3      	ldrh	r3, [r4, #12]
 80125b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125bc:	81a3      	strh	r3, [r4, #12]
 80125be:	e7ad      	b.n	801251c <__sflush_r+0x1c>
 80125c0:	690f      	ldr	r7, [r1, #16]
 80125c2:	2f00      	cmp	r7, #0
 80125c4:	d0a9      	beq.n	801251a <__sflush_r+0x1a>
 80125c6:	0793      	lsls	r3, r2, #30
 80125c8:	680e      	ldr	r6, [r1, #0]
 80125ca:	bf08      	it	eq
 80125cc:	694b      	ldreq	r3, [r1, #20]
 80125ce:	600f      	str	r7, [r1, #0]
 80125d0:	bf18      	it	ne
 80125d2:	2300      	movne	r3, #0
 80125d4:	eba6 0807 	sub.w	r8, r6, r7
 80125d8:	608b      	str	r3, [r1, #8]
 80125da:	f1b8 0f00 	cmp.w	r8, #0
 80125de:	dd9c      	ble.n	801251a <__sflush_r+0x1a>
 80125e0:	6a21      	ldr	r1, [r4, #32]
 80125e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80125e4:	4643      	mov	r3, r8
 80125e6:	463a      	mov	r2, r7
 80125e8:	4628      	mov	r0, r5
 80125ea:	47b0      	blx	r6
 80125ec:	2800      	cmp	r0, #0
 80125ee:	dc06      	bgt.n	80125fe <__sflush_r+0xfe>
 80125f0:	89a3      	ldrh	r3, [r4, #12]
 80125f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125f6:	81a3      	strh	r3, [r4, #12]
 80125f8:	f04f 30ff 	mov.w	r0, #4294967295
 80125fc:	e78e      	b.n	801251c <__sflush_r+0x1c>
 80125fe:	4407      	add	r7, r0
 8012600:	eba8 0800 	sub.w	r8, r8, r0
 8012604:	e7e9      	b.n	80125da <__sflush_r+0xda>
 8012606:	bf00      	nop
 8012608:	20400001 	.word	0x20400001

0801260c <_fflush_r>:
 801260c:	b538      	push	{r3, r4, r5, lr}
 801260e:	690b      	ldr	r3, [r1, #16]
 8012610:	4605      	mov	r5, r0
 8012612:	460c      	mov	r4, r1
 8012614:	b913      	cbnz	r3, 801261c <_fflush_r+0x10>
 8012616:	2500      	movs	r5, #0
 8012618:	4628      	mov	r0, r5
 801261a:	bd38      	pop	{r3, r4, r5, pc}
 801261c:	b118      	cbz	r0, 8012626 <_fflush_r+0x1a>
 801261e:	6983      	ldr	r3, [r0, #24]
 8012620:	b90b      	cbnz	r3, 8012626 <_fflush_r+0x1a>
 8012622:	f000 f887 	bl	8012734 <__sinit>
 8012626:	4b14      	ldr	r3, [pc, #80]	; (8012678 <_fflush_r+0x6c>)
 8012628:	429c      	cmp	r4, r3
 801262a:	d11b      	bne.n	8012664 <_fflush_r+0x58>
 801262c:	686c      	ldr	r4, [r5, #4]
 801262e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d0ef      	beq.n	8012616 <_fflush_r+0xa>
 8012636:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012638:	07d0      	lsls	r0, r2, #31
 801263a:	d404      	bmi.n	8012646 <_fflush_r+0x3a>
 801263c:	0599      	lsls	r1, r3, #22
 801263e:	d402      	bmi.n	8012646 <_fflush_r+0x3a>
 8012640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012642:	f000 f915 	bl	8012870 <__retarget_lock_acquire_recursive>
 8012646:	4628      	mov	r0, r5
 8012648:	4621      	mov	r1, r4
 801264a:	f7ff ff59 	bl	8012500 <__sflush_r>
 801264e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012650:	07da      	lsls	r2, r3, #31
 8012652:	4605      	mov	r5, r0
 8012654:	d4e0      	bmi.n	8012618 <_fflush_r+0xc>
 8012656:	89a3      	ldrh	r3, [r4, #12]
 8012658:	059b      	lsls	r3, r3, #22
 801265a:	d4dd      	bmi.n	8012618 <_fflush_r+0xc>
 801265c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801265e:	f000 f908 	bl	8012872 <__retarget_lock_release_recursive>
 8012662:	e7d9      	b.n	8012618 <_fflush_r+0xc>
 8012664:	4b05      	ldr	r3, [pc, #20]	; (801267c <_fflush_r+0x70>)
 8012666:	429c      	cmp	r4, r3
 8012668:	d101      	bne.n	801266e <_fflush_r+0x62>
 801266a:	68ac      	ldr	r4, [r5, #8]
 801266c:	e7df      	b.n	801262e <_fflush_r+0x22>
 801266e:	4b04      	ldr	r3, [pc, #16]	; (8012680 <_fflush_r+0x74>)
 8012670:	429c      	cmp	r4, r3
 8012672:	bf08      	it	eq
 8012674:	68ec      	ldreq	r4, [r5, #12]
 8012676:	e7da      	b.n	801262e <_fflush_r+0x22>
 8012678:	0801320c 	.word	0x0801320c
 801267c:	0801322c 	.word	0x0801322c
 8012680:	080131ec 	.word	0x080131ec

08012684 <std>:
 8012684:	2300      	movs	r3, #0
 8012686:	b510      	push	{r4, lr}
 8012688:	4604      	mov	r4, r0
 801268a:	e9c0 3300 	strd	r3, r3, [r0]
 801268e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012692:	6083      	str	r3, [r0, #8]
 8012694:	8181      	strh	r1, [r0, #12]
 8012696:	6643      	str	r3, [r0, #100]	; 0x64
 8012698:	81c2      	strh	r2, [r0, #14]
 801269a:	6183      	str	r3, [r0, #24]
 801269c:	4619      	mov	r1, r3
 801269e:	2208      	movs	r2, #8
 80126a0:	305c      	adds	r0, #92	; 0x5c
 80126a2:	f7fb fdd5 	bl	800e250 <memset>
 80126a6:	4b05      	ldr	r3, [pc, #20]	; (80126bc <std+0x38>)
 80126a8:	6263      	str	r3, [r4, #36]	; 0x24
 80126aa:	4b05      	ldr	r3, [pc, #20]	; (80126c0 <std+0x3c>)
 80126ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80126ae:	4b05      	ldr	r3, [pc, #20]	; (80126c4 <std+0x40>)
 80126b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80126b2:	4b05      	ldr	r3, [pc, #20]	; (80126c8 <std+0x44>)
 80126b4:	6224      	str	r4, [r4, #32]
 80126b6:	6323      	str	r3, [r4, #48]	; 0x30
 80126b8:	bd10      	pop	{r4, pc}
 80126ba:	bf00      	nop
 80126bc:	080129d9 	.word	0x080129d9
 80126c0:	080129fb 	.word	0x080129fb
 80126c4:	08012a33 	.word	0x08012a33
 80126c8:	08012a57 	.word	0x08012a57

080126cc <_cleanup_r>:
 80126cc:	4901      	ldr	r1, [pc, #4]	; (80126d4 <_cleanup_r+0x8>)
 80126ce:	f000 b8af 	b.w	8012830 <_fwalk_reent>
 80126d2:	bf00      	nop
 80126d4:	0801260d 	.word	0x0801260d

080126d8 <__sfmoreglue>:
 80126d8:	b570      	push	{r4, r5, r6, lr}
 80126da:	2268      	movs	r2, #104	; 0x68
 80126dc:	1e4d      	subs	r5, r1, #1
 80126de:	4355      	muls	r5, r2
 80126e0:	460e      	mov	r6, r1
 80126e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80126e6:	f7ff fa5b 	bl	8011ba0 <_malloc_r>
 80126ea:	4604      	mov	r4, r0
 80126ec:	b140      	cbz	r0, 8012700 <__sfmoreglue+0x28>
 80126ee:	2100      	movs	r1, #0
 80126f0:	e9c0 1600 	strd	r1, r6, [r0]
 80126f4:	300c      	adds	r0, #12
 80126f6:	60a0      	str	r0, [r4, #8]
 80126f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80126fc:	f7fb fda8 	bl	800e250 <memset>
 8012700:	4620      	mov	r0, r4
 8012702:	bd70      	pop	{r4, r5, r6, pc}

08012704 <__sfp_lock_acquire>:
 8012704:	4801      	ldr	r0, [pc, #4]	; (801270c <__sfp_lock_acquire+0x8>)
 8012706:	f000 b8b3 	b.w	8012870 <__retarget_lock_acquire_recursive>
 801270a:	bf00      	nop
 801270c:	20000769 	.word	0x20000769

08012710 <__sfp_lock_release>:
 8012710:	4801      	ldr	r0, [pc, #4]	; (8012718 <__sfp_lock_release+0x8>)
 8012712:	f000 b8ae 	b.w	8012872 <__retarget_lock_release_recursive>
 8012716:	bf00      	nop
 8012718:	20000769 	.word	0x20000769

0801271c <__sinit_lock_acquire>:
 801271c:	4801      	ldr	r0, [pc, #4]	; (8012724 <__sinit_lock_acquire+0x8>)
 801271e:	f000 b8a7 	b.w	8012870 <__retarget_lock_acquire_recursive>
 8012722:	bf00      	nop
 8012724:	2000076a 	.word	0x2000076a

08012728 <__sinit_lock_release>:
 8012728:	4801      	ldr	r0, [pc, #4]	; (8012730 <__sinit_lock_release+0x8>)
 801272a:	f000 b8a2 	b.w	8012872 <__retarget_lock_release_recursive>
 801272e:	bf00      	nop
 8012730:	2000076a 	.word	0x2000076a

08012734 <__sinit>:
 8012734:	b510      	push	{r4, lr}
 8012736:	4604      	mov	r4, r0
 8012738:	f7ff fff0 	bl	801271c <__sinit_lock_acquire>
 801273c:	69a3      	ldr	r3, [r4, #24]
 801273e:	b11b      	cbz	r3, 8012748 <__sinit+0x14>
 8012740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012744:	f7ff bff0 	b.w	8012728 <__sinit_lock_release>
 8012748:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801274c:	6523      	str	r3, [r4, #80]	; 0x50
 801274e:	4b13      	ldr	r3, [pc, #76]	; (801279c <__sinit+0x68>)
 8012750:	4a13      	ldr	r2, [pc, #76]	; (80127a0 <__sinit+0x6c>)
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	62a2      	str	r2, [r4, #40]	; 0x28
 8012756:	42a3      	cmp	r3, r4
 8012758:	bf04      	itt	eq
 801275a:	2301      	moveq	r3, #1
 801275c:	61a3      	streq	r3, [r4, #24]
 801275e:	4620      	mov	r0, r4
 8012760:	f000 f820 	bl	80127a4 <__sfp>
 8012764:	6060      	str	r0, [r4, #4]
 8012766:	4620      	mov	r0, r4
 8012768:	f000 f81c 	bl	80127a4 <__sfp>
 801276c:	60a0      	str	r0, [r4, #8]
 801276e:	4620      	mov	r0, r4
 8012770:	f000 f818 	bl	80127a4 <__sfp>
 8012774:	2200      	movs	r2, #0
 8012776:	60e0      	str	r0, [r4, #12]
 8012778:	2104      	movs	r1, #4
 801277a:	6860      	ldr	r0, [r4, #4]
 801277c:	f7ff ff82 	bl	8012684 <std>
 8012780:	68a0      	ldr	r0, [r4, #8]
 8012782:	2201      	movs	r2, #1
 8012784:	2109      	movs	r1, #9
 8012786:	f7ff ff7d 	bl	8012684 <std>
 801278a:	68e0      	ldr	r0, [r4, #12]
 801278c:	2202      	movs	r2, #2
 801278e:	2112      	movs	r1, #18
 8012790:	f7ff ff78 	bl	8012684 <std>
 8012794:	2301      	movs	r3, #1
 8012796:	61a3      	str	r3, [r4, #24]
 8012798:	e7d2      	b.n	8012740 <__sinit+0xc>
 801279a:	bf00      	nop
 801279c:	08012da4 	.word	0x08012da4
 80127a0:	080126cd 	.word	0x080126cd

080127a4 <__sfp>:
 80127a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127a6:	4607      	mov	r7, r0
 80127a8:	f7ff ffac 	bl	8012704 <__sfp_lock_acquire>
 80127ac:	4b1e      	ldr	r3, [pc, #120]	; (8012828 <__sfp+0x84>)
 80127ae:	681e      	ldr	r6, [r3, #0]
 80127b0:	69b3      	ldr	r3, [r6, #24]
 80127b2:	b913      	cbnz	r3, 80127ba <__sfp+0x16>
 80127b4:	4630      	mov	r0, r6
 80127b6:	f7ff ffbd 	bl	8012734 <__sinit>
 80127ba:	3648      	adds	r6, #72	; 0x48
 80127bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80127c0:	3b01      	subs	r3, #1
 80127c2:	d503      	bpl.n	80127cc <__sfp+0x28>
 80127c4:	6833      	ldr	r3, [r6, #0]
 80127c6:	b30b      	cbz	r3, 801280c <__sfp+0x68>
 80127c8:	6836      	ldr	r6, [r6, #0]
 80127ca:	e7f7      	b.n	80127bc <__sfp+0x18>
 80127cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80127d0:	b9d5      	cbnz	r5, 8012808 <__sfp+0x64>
 80127d2:	4b16      	ldr	r3, [pc, #88]	; (801282c <__sfp+0x88>)
 80127d4:	60e3      	str	r3, [r4, #12]
 80127d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80127da:	6665      	str	r5, [r4, #100]	; 0x64
 80127dc:	f000 f847 	bl	801286e <__retarget_lock_init_recursive>
 80127e0:	f7ff ff96 	bl	8012710 <__sfp_lock_release>
 80127e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80127e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80127ec:	6025      	str	r5, [r4, #0]
 80127ee:	61a5      	str	r5, [r4, #24]
 80127f0:	2208      	movs	r2, #8
 80127f2:	4629      	mov	r1, r5
 80127f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80127f8:	f7fb fd2a 	bl	800e250 <memset>
 80127fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012800:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012804:	4620      	mov	r0, r4
 8012806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012808:	3468      	adds	r4, #104	; 0x68
 801280a:	e7d9      	b.n	80127c0 <__sfp+0x1c>
 801280c:	2104      	movs	r1, #4
 801280e:	4638      	mov	r0, r7
 8012810:	f7ff ff62 	bl	80126d8 <__sfmoreglue>
 8012814:	4604      	mov	r4, r0
 8012816:	6030      	str	r0, [r6, #0]
 8012818:	2800      	cmp	r0, #0
 801281a:	d1d5      	bne.n	80127c8 <__sfp+0x24>
 801281c:	f7ff ff78 	bl	8012710 <__sfp_lock_release>
 8012820:	230c      	movs	r3, #12
 8012822:	603b      	str	r3, [r7, #0]
 8012824:	e7ee      	b.n	8012804 <__sfp+0x60>
 8012826:	bf00      	nop
 8012828:	08012da4 	.word	0x08012da4
 801282c:	ffff0001 	.word	0xffff0001

08012830 <_fwalk_reent>:
 8012830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012834:	4606      	mov	r6, r0
 8012836:	4688      	mov	r8, r1
 8012838:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801283c:	2700      	movs	r7, #0
 801283e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012842:	f1b9 0901 	subs.w	r9, r9, #1
 8012846:	d505      	bpl.n	8012854 <_fwalk_reent+0x24>
 8012848:	6824      	ldr	r4, [r4, #0]
 801284a:	2c00      	cmp	r4, #0
 801284c:	d1f7      	bne.n	801283e <_fwalk_reent+0xe>
 801284e:	4638      	mov	r0, r7
 8012850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012854:	89ab      	ldrh	r3, [r5, #12]
 8012856:	2b01      	cmp	r3, #1
 8012858:	d907      	bls.n	801286a <_fwalk_reent+0x3a>
 801285a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801285e:	3301      	adds	r3, #1
 8012860:	d003      	beq.n	801286a <_fwalk_reent+0x3a>
 8012862:	4629      	mov	r1, r5
 8012864:	4630      	mov	r0, r6
 8012866:	47c0      	blx	r8
 8012868:	4307      	orrs	r7, r0
 801286a:	3568      	adds	r5, #104	; 0x68
 801286c:	e7e9      	b.n	8012842 <_fwalk_reent+0x12>

0801286e <__retarget_lock_init_recursive>:
 801286e:	4770      	bx	lr

08012870 <__retarget_lock_acquire_recursive>:
 8012870:	4770      	bx	lr

08012872 <__retarget_lock_release_recursive>:
 8012872:	4770      	bx	lr

08012874 <__swhatbuf_r>:
 8012874:	b570      	push	{r4, r5, r6, lr}
 8012876:	460e      	mov	r6, r1
 8012878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801287c:	2900      	cmp	r1, #0
 801287e:	b096      	sub	sp, #88	; 0x58
 8012880:	4614      	mov	r4, r2
 8012882:	461d      	mov	r5, r3
 8012884:	da08      	bge.n	8012898 <__swhatbuf_r+0x24>
 8012886:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801288a:	2200      	movs	r2, #0
 801288c:	602a      	str	r2, [r5, #0]
 801288e:	061a      	lsls	r2, r3, #24
 8012890:	d410      	bmi.n	80128b4 <__swhatbuf_r+0x40>
 8012892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012896:	e00e      	b.n	80128b6 <__swhatbuf_r+0x42>
 8012898:	466a      	mov	r2, sp
 801289a:	f000 f903 	bl	8012aa4 <_fstat_r>
 801289e:	2800      	cmp	r0, #0
 80128a0:	dbf1      	blt.n	8012886 <__swhatbuf_r+0x12>
 80128a2:	9a01      	ldr	r2, [sp, #4]
 80128a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80128a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80128ac:	425a      	negs	r2, r3
 80128ae:	415a      	adcs	r2, r3
 80128b0:	602a      	str	r2, [r5, #0]
 80128b2:	e7ee      	b.n	8012892 <__swhatbuf_r+0x1e>
 80128b4:	2340      	movs	r3, #64	; 0x40
 80128b6:	2000      	movs	r0, #0
 80128b8:	6023      	str	r3, [r4, #0]
 80128ba:	b016      	add	sp, #88	; 0x58
 80128bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080128c0 <__smakebuf_r>:
 80128c0:	898b      	ldrh	r3, [r1, #12]
 80128c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80128c4:	079d      	lsls	r5, r3, #30
 80128c6:	4606      	mov	r6, r0
 80128c8:	460c      	mov	r4, r1
 80128ca:	d507      	bpl.n	80128dc <__smakebuf_r+0x1c>
 80128cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80128d0:	6023      	str	r3, [r4, #0]
 80128d2:	6123      	str	r3, [r4, #16]
 80128d4:	2301      	movs	r3, #1
 80128d6:	6163      	str	r3, [r4, #20]
 80128d8:	b002      	add	sp, #8
 80128da:	bd70      	pop	{r4, r5, r6, pc}
 80128dc:	ab01      	add	r3, sp, #4
 80128de:	466a      	mov	r2, sp
 80128e0:	f7ff ffc8 	bl	8012874 <__swhatbuf_r>
 80128e4:	9900      	ldr	r1, [sp, #0]
 80128e6:	4605      	mov	r5, r0
 80128e8:	4630      	mov	r0, r6
 80128ea:	f7ff f959 	bl	8011ba0 <_malloc_r>
 80128ee:	b948      	cbnz	r0, 8012904 <__smakebuf_r+0x44>
 80128f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128f4:	059a      	lsls	r2, r3, #22
 80128f6:	d4ef      	bmi.n	80128d8 <__smakebuf_r+0x18>
 80128f8:	f023 0303 	bic.w	r3, r3, #3
 80128fc:	f043 0302 	orr.w	r3, r3, #2
 8012900:	81a3      	strh	r3, [r4, #12]
 8012902:	e7e3      	b.n	80128cc <__smakebuf_r+0xc>
 8012904:	4b0d      	ldr	r3, [pc, #52]	; (801293c <__smakebuf_r+0x7c>)
 8012906:	62b3      	str	r3, [r6, #40]	; 0x28
 8012908:	89a3      	ldrh	r3, [r4, #12]
 801290a:	6020      	str	r0, [r4, #0]
 801290c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012910:	81a3      	strh	r3, [r4, #12]
 8012912:	9b00      	ldr	r3, [sp, #0]
 8012914:	6163      	str	r3, [r4, #20]
 8012916:	9b01      	ldr	r3, [sp, #4]
 8012918:	6120      	str	r0, [r4, #16]
 801291a:	b15b      	cbz	r3, 8012934 <__smakebuf_r+0x74>
 801291c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012920:	4630      	mov	r0, r6
 8012922:	f000 f8d1 	bl	8012ac8 <_isatty_r>
 8012926:	b128      	cbz	r0, 8012934 <__smakebuf_r+0x74>
 8012928:	89a3      	ldrh	r3, [r4, #12]
 801292a:	f023 0303 	bic.w	r3, r3, #3
 801292e:	f043 0301 	orr.w	r3, r3, #1
 8012932:	81a3      	strh	r3, [r4, #12]
 8012934:	89a0      	ldrh	r0, [r4, #12]
 8012936:	4305      	orrs	r5, r0
 8012938:	81a5      	strh	r5, [r4, #12]
 801293a:	e7cd      	b.n	80128d8 <__smakebuf_r+0x18>
 801293c:	080126cd 	.word	0x080126cd

08012940 <_malloc_usable_size_r>:
 8012940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012944:	1f18      	subs	r0, r3, #4
 8012946:	2b00      	cmp	r3, #0
 8012948:	bfbc      	itt	lt
 801294a:	580b      	ldrlt	r3, [r1, r0]
 801294c:	18c0      	addlt	r0, r0, r3
 801294e:	4770      	bx	lr

08012950 <_raise_r>:
 8012950:	291f      	cmp	r1, #31
 8012952:	b538      	push	{r3, r4, r5, lr}
 8012954:	4604      	mov	r4, r0
 8012956:	460d      	mov	r5, r1
 8012958:	d904      	bls.n	8012964 <_raise_r+0x14>
 801295a:	2316      	movs	r3, #22
 801295c:	6003      	str	r3, [r0, #0]
 801295e:	f04f 30ff 	mov.w	r0, #4294967295
 8012962:	bd38      	pop	{r3, r4, r5, pc}
 8012964:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012966:	b112      	cbz	r2, 801296e <_raise_r+0x1e>
 8012968:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801296c:	b94b      	cbnz	r3, 8012982 <_raise_r+0x32>
 801296e:	4620      	mov	r0, r4
 8012970:	f000 f830 	bl	80129d4 <_getpid_r>
 8012974:	462a      	mov	r2, r5
 8012976:	4601      	mov	r1, r0
 8012978:	4620      	mov	r0, r4
 801297a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801297e:	f000 b817 	b.w	80129b0 <_kill_r>
 8012982:	2b01      	cmp	r3, #1
 8012984:	d00a      	beq.n	801299c <_raise_r+0x4c>
 8012986:	1c59      	adds	r1, r3, #1
 8012988:	d103      	bne.n	8012992 <_raise_r+0x42>
 801298a:	2316      	movs	r3, #22
 801298c:	6003      	str	r3, [r0, #0]
 801298e:	2001      	movs	r0, #1
 8012990:	e7e7      	b.n	8012962 <_raise_r+0x12>
 8012992:	2400      	movs	r4, #0
 8012994:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012998:	4628      	mov	r0, r5
 801299a:	4798      	blx	r3
 801299c:	2000      	movs	r0, #0
 801299e:	e7e0      	b.n	8012962 <_raise_r+0x12>

080129a0 <raise>:
 80129a0:	4b02      	ldr	r3, [pc, #8]	; (80129ac <raise+0xc>)
 80129a2:	4601      	mov	r1, r0
 80129a4:	6818      	ldr	r0, [r3, #0]
 80129a6:	f7ff bfd3 	b.w	8012950 <_raise_r>
 80129aa:	bf00      	nop
 80129ac:	200002c8 	.word	0x200002c8

080129b0 <_kill_r>:
 80129b0:	b538      	push	{r3, r4, r5, lr}
 80129b2:	4d07      	ldr	r5, [pc, #28]	; (80129d0 <_kill_r+0x20>)
 80129b4:	2300      	movs	r3, #0
 80129b6:	4604      	mov	r4, r0
 80129b8:	4608      	mov	r0, r1
 80129ba:	4611      	mov	r1, r2
 80129bc:	602b      	str	r3, [r5, #0]
 80129be:	f7ef f847 	bl	8001a50 <_kill>
 80129c2:	1c43      	adds	r3, r0, #1
 80129c4:	d102      	bne.n	80129cc <_kill_r+0x1c>
 80129c6:	682b      	ldr	r3, [r5, #0]
 80129c8:	b103      	cbz	r3, 80129cc <_kill_r+0x1c>
 80129ca:	6023      	str	r3, [r4, #0]
 80129cc:	bd38      	pop	{r3, r4, r5, pc}
 80129ce:	bf00      	nop
 80129d0:	20000764 	.word	0x20000764

080129d4 <_getpid_r>:
 80129d4:	f7ef b834 	b.w	8001a40 <_getpid>

080129d8 <__sread>:
 80129d8:	b510      	push	{r4, lr}
 80129da:	460c      	mov	r4, r1
 80129dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129e0:	f000 f894 	bl	8012b0c <_read_r>
 80129e4:	2800      	cmp	r0, #0
 80129e6:	bfab      	itete	ge
 80129e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80129ea:	89a3      	ldrhlt	r3, [r4, #12]
 80129ec:	181b      	addge	r3, r3, r0
 80129ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80129f2:	bfac      	ite	ge
 80129f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80129f6:	81a3      	strhlt	r3, [r4, #12]
 80129f8:	bd10      	pop	{r4, pc}

080129fa <__swrite>:
 80129fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129fe:	461f      	mov	r7, r3
 8012a00:	898b      	ldrh	r3, [r1, #12]
 8012a02:	05db      	lsls	r3, r3, #23
 8012a04:	4605      	mov	r5, r0
 8012a06:	460c      	mov	r4, r1
 8012a08:	4616      	mov	r6, r2
 8012a0a:	d505      	bpl.n	8012a18 <__swrite+0x1e>
 8012a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a10:	2302      	movs	r3, #2
 8012a12:	2200      	movs	r2, #0
 8012a14:	f000 f868 	bl	8012ae8 <_lseek_r>
 8012a18:	89a3      	ldrh	r3, [r4, #12]
 8012a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a22:	81a3      	strh	r3, [r4, #12]
 8012a24:	4632      	mov	r2, r6
 8012a26:	463b      	mov	r3, r7
 8012a28:	4628      	mov	r0, r5
 8012a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a2e:	f000 b817 	b.w	8012a60 <_write_r>

08012a32 <__sseek>:
 8012a32:	b510      	push	{r4, lr}
 8012a34:	460c      	mov	r4, r1
 8012a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a3a:	f000 f855 	bl	8012ae8 <_lseek_r>
 8012a3e:	1c43      	adds	r3, r0, #1
 8012a40:	89a3      	ldrh	r3, [r4, #12]
 8012a42:	bf15      	itete	ne
 8012a44:	6560      	strne	r0, [r4, #84]	; 0x54
 8012a46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012a4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012a4e:	81a3      	strheq	r3, [r4, #12]
 8012a50:	bf18      	it	ne
 8012a52:	81a3      	strhne	r3, [r4, #12]
 8012a54:	bd10      	pop	{r4, pc}

08012a56 <__sclose>:
 8012a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a5a:	f000 b813 	b.w	8012a84 <_close_r>
	...

08012a60 <_write_r>:
 8012a60:	b538      	push	{r3, r4, r5, lr}
 8012a62:	4d07      	ldr	r5, [pc, #28]	; (8012a80 <_write_r+0x20>)
 8012a64:	4604      	mov	r4, r0
 8012a66:	4608      	mov	r0, r1
 8012a68:	4611      	mov	r1, r2
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	602a      	str	r2, [r5, #0]
 8012a6e:	461a      	mov	r2, r3
 8012a70:	f7ef f825 	bl	8001abe <_write>
 8012a74:	1c43      	adds	r3, r0, #1
 8012a76:	d102      	bne.n	8012a7e <_write_r+0x1e>
 8012a78:	682b      	ldr	r3, [r5, #0]
 8012a7a:	b103      	cbz	r3, 8012a7e <_write_r+0x1e>
 8012a7c:	6023      	str	r3, [r4, #0]
 8012a7e:	bd38      	pop	{r3, r4, r5, pc}
 8012a80:	20000764 	.word	0x20000764

08012a84 <_close_r>:
 8012a84:	b538      	push	{r3, r4, r5, lr}
 8012a86:	4d06      	ldr	r5, [pc, #24]	; (8012aa0 <_close_r+0x1c>)
 8012a88:	2300      	movs	r3, #0
 8012a8a:	4604      	mov	r4, r0
 8012a8c:	4608      	mov	r0, r1
 8012a8e:	602b      	str	r3, [r5, #0]
 8012a90:	f7ef f831 	bl	8001af6 <_close>
 8012a94:	1c43      	adds	r3, r0, #1
 8012a96:	d102      	bne.n	8012a9e <_close_r+0x1a>
 8012a98:	682b      	ldr	r3, [r5, #0]
 8012a9a:	b103      	cbz	r3, 8012a9e <_close_r+0x1a>
 8012a9c:	6023      	str	r3, [r4, #0]
 8012a9e:	bd38      	pop	{r3, r4, r5, pc}
 8012aa0:	20000764 	.word	0x20000764

08012aa4 <_fstat_r>:
 8012aa4:	b538      	push	{r3, r4, r5, lr}
 8012aa6:	4d07      	ldr	r5, [pc, #28]	; (8012ac4 <_fstat_r+0x20>)
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	4604      	mov	r4, r0
 8012aac:	4608      	mov	r0, r1
 8012aae:	4611      	mov	r1, r2
 8012ab0:	602b      	str	r3, [r5, #0]
 8012ab2:	f7ef f82c 	bl	8001b0e <_fstat>
 8012ab6:	1c43      	adds	r3, r0, #1
 8012ab8:	d102      	bne.n	8012ac0 <_fstat_r+0x1c>
 8012aba:	682b      	ldr	r3, [r5, #0]
 8012abc:	b103      	cbz	r3, 8012ac0 <_fstat_r+0x1c>
 8012abe:	6023      	str	r3, [r4, #0]
 8012ac0:	bd38      	pop	{r3, r4, r5, pc}
 8012ac2:	bf00      	nop
 8012ac4:	20000764 	.word	0x20000764

08012ac8 <_isatty_r>:
 8012ac8:	b538      	push	{r3, r4, r5, lr}
 8012aca:	4d06      	ldr	r5, [pc, #24]	; (8012ae4 <_isatty_r+0x1c>)
 8012acc:	2300      	movs	r3, #0
 8012ace:	4604      	mov	r4, r0
 8012ad0:	4608      	mov	r0, r1
 8012ad2:	602b      	str	r3, [r5, #0]
 8012ad4:	f7ef f82b 	bl	8001b2e <_isatty>
 8012ad8:	1c43      	adds	r3, r0, #1
 8012ada:	d102      	bne.n	8012ae2 <_isatty_r+0x1a>
 8012adc:	682b      	ldr	r3, [r5, #0]
 8012ade:	b103      	cbz	r3, 8012ae2 <_isatty_r+0x1a>
 8012ae0:	6023      	str	r3, [r4, #0]
 8012ae2:	bd38      	pop	{r3, r4, r5, pc}
 8012ae4:	20000764 	.word	0x20000764

08012ae8 <_lseek_r>:
 8012ae8:	b538      	push	{r3, r4, r5, lr}
 8012aea:	4d07      	ldr	r5, [pc, #28]	; (8012b08 <_lseek_r+0x20>)
 8012aec:	4604      	mov	r4, r0
 8012aee:	4608      	mov	r0, r1
 8012af0:	4611      	mov	r1, r2
 8012af2:	2200      	movs	r2, #0
 8012af4:	602a      	str	r2, [r5, #0]
 8012af6:	461a      	mov	r2, r3
 8012af8:	f7ef f824 	bl	8001b44 <_lseek>
 8012afc:	1c43      	adds	r3, r0, #1
 8012afe:	d102      	bne.n	8012b06 <_lseek_r+0x1e>
 8012b00:	682b      	ldr	r3, [r5, #0]
 8012b02:	b103      	cbz	r3, 8012b06 <_lseek_r+0x1e>
 8012b04:	6023      	str	r3, [r4, #0]
 8012b06:	bd38      	pop	{r3, r4, r5, pc}
 8012b08:	20000764 	.word	0x20000764

08012b0c <_read_r>:
 8012b0c:	b538      	push	{r3, r4, r5, lr}
 8012b0e:	4d07      	ldr	r5, [pc, #28]	; (8012b2c <_read_r+0x20>)
 8012b10:	4604      	mov	r4, r0
 8012b12:	4608      	mov	r0, r1
 8012b14:	4611      	mov	r1, r2
 8012b16:	2200      	movs	r2, #0
 8012b18:	602a      	str	r2, [r5, #0]
 8012b1a:	461a      	mov	r2, r3
 8012b1c:	f7ee ffb2 	bl	8001a84 <_read>
 8012b20:	1c43      	adds	r3, r0, #1
 8012b22:	d102      	bne.n	8012b2a <_read_r+0x1e>
 8012b24:	682b      	ldr	r3, [r5, #0]
 8012b26:	b103      	cbz	r3, 8012b2a <_read_r+0x1e>
 8012b28:	6023      	str	r3, [r4, #0]
 8012b2a:	bd38      	pop	{r3, r4, r5, pc}
 8012b2c:	20000764 	.word	0x20000764

08012b30 <_init>:
 8012b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b32:	bf00      	nop
 8012b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b36:	bc08      	pop	{r3}
 8012b38:	469e      	mov	lr, r3
 8012b3a:	4770      	bx	lr

08012b3c <_fini>:
 8012b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b3e:	bf00      	nop
 8012b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b42:	bc08      	pop	{r3}
 8012b44:	469e      	mov	lr, r3
 8012b46:	4770      	bx	lr
