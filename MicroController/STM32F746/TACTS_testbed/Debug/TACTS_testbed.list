
TACTS_testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014b3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ec  08014d10  08014d10  00024d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080156fc  080156fc  0003049c  2**0
                  CONTENTS
  4 .ARM          00000008  080156fc  080156fc  000256fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015704  08015704  0003049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015704  08015704  00025704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015708  08015708  00025708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000049c  20000000  0801570c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000049c  08015ba8  0003049c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  08015ba8  00030778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003049c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021577  00000000  00000000  000304cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b08  00000000  00000000  00051a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  00055550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d0  00000000  00000000  00056cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029826  00000000  00000000  00058288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022067  00000000  00000000  00081aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f972c  00000000  00000000  000a3b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019d241  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a20  00000000  00000000  0019d294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000049c 	.word	0x2000049c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014cf4 	.word	0x08014cf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004a0 	.word	0x200004a0
 800020c:	08014cf4 	.word	0x08014cf4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b59      	ldr	r3, [pc, #356]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a58      	ldr	r2, [pc, #352]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b53      	ldr	r3, [pc, #332]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a52      	ldr	r2, [pc, #328]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b50      	ldr	r3, [pc, #320]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800107e:	4b4d      	ldr	r3, [pc, #308]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a4c      	ldr	r2, [pc, #304]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001096:	4b47      	ldr	r3, [pc, #284]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a46      	ldr	r2, [pc, #280]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800109c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b44      	ldr	r3, [pc, #272]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ae:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a40      	ldr	r2, [pc, #256]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2110      	movs	r1, #16
 80010ca:	483b      	ldr	r0, [pc, #236]	; (80011b8 <MX_GPIO_Init+0x180>)
 80010cc:	f002 fc98 	bl	8003a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	210f      	movs	r1, #15
 80010d4:	4839      	ldr	r0, [pc, #228]	; (80011bc <MX_GPIO_Init+0x184>)
 80010d6:	f002 fc93 	bl	8003a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	21c0      	movs	r1, #192	; 0xc0
 80010de:	4838      	ldr	r0, [pc, #224]	; (80011c0 <MX_GPIO_Init+0x188>)
 80010e0:	f002 fc8e 	bl	8003a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010e4:	2310      	movs	r3, #16
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	482f      	ldr	r0, [pc, #188]	; (80011b8 <MX_GPIO_Init+0x180>)
 80010fc:	f002 f8f0 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001100:	230f      	movs	r3, #15
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4829      	ldr	r0, [pc, #164]	; (80011bc <MX_GPIO_Init+0x184>)
 8001118:	f002 f8e2 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800111c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001122:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4824      	ldr	r0, [pc, #144]	; (80011c4 <MX_GPIO_Init+0x18c>)
 8001134:	f002 f8d4 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001138:	23c0      	movs	r3, #192	; 0xc0
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	481c      	ldr	r0, [pc, #112]	; (80011c0 <MX_GPIO_Init+0x188>)
 8001150:	f002 f8c6 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001154:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4813      	ldr	r0, [pc, #76]	; (80011b8 <MX_GPIO_Init+0x180>)
 800116a:	f002 f8b9 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800116e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001174:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <MX_GPIO_Init+0x180>)
 8001186:	f002 f8ab 	bl	80032e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2017      	movs	r0, #23
 8001190:	f001 ffb6 	bl	8003100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001194:	2017      	movs	r0, #23
 8001196:	f001 ffdf 	bl	8003158 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2028      	movs	r0, #40	; 0x28
 80011a0:	f001 ffae 	bl	8003100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011a4:	2028      	movs	r0, #40	; 0x28
 80011a6:	f001 ffd7 	bl	8003158 <HAL_NVIC_EnableIRQ>

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40022000 	.word	0x40022000
 80011c0:	40021800 	.word	0x40021800
 80011c4:	40020000 	.word	0x40020000

080011c8 <HX711_Init>:




void HX711_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2102      	movs	r1, #2
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <HX711_Init+0x14>)
 80011d2:	f002 fc15 	bl	8003a00 <HAL_GPIO_WritePin>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40022000 	.word	0x40022000

080011e0 <Read_HX711>:

int32_t Read_HX711(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  int32_t data = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]

  // Wait until the DT pin goes low
  while (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET);
 80011ea:	bf00      	nop
 80011ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f0:	4820      	ldr	r0, [pc, #128]	; (8001274 <Read_HX711+0x94>)
 80011f2:	f002 fbe5 	bl	80039c0 <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d0f7      	beq.n	80011ec <Read_HX711+0xc>

  // Read the 24-bit data
  for (int i = 0; i < 24; i++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	e020      	b.n	8001244 <Read_HX711+0x64>
  {
    // Generate a clock pulse on SCK pin
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2102      	movs	r1, #2
 8001206:	481c      	ldr	r0, [pc, #112]	; (8001278 <Read_HX711+0x98>)
 8001208:	f002 fbfa 	bl	8003a00 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f000 f86f 	bl	80012f0 <DelayMicroseconds>
    data = (data << 1);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET)
 8001218:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121c:	4815      	ldr	r0, [pc, #84]	; (8001274 <Read_HX711+0x94>)
 800121e:	f002 fbcf 	bl	80039c0 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b01      	cmp	r3, #1
 8001226:	d102      	bne.n	800122e <Read_HX711+0x4e>
    {
      data++;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3301      	adds	r3, #1
 800122c:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	2102      	movs	r1, #2
 8001232:	4811      	ldr	r0, [pc, #68]	; (8001278 <Read_HX711+0x98>)
 8001234:	f002 fbe4 	bl	8003a00 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 8001238:	2001      	movs	r0, #1
 800123a:	f000 f859 	bl	80012f0 <DelayMicroseconds>
  for (int i = 0; i < 24; i++)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2b17      	cmp	r3, #23
 8001248:	dddb      	ble.n	8001202 <Read_HX711+0x22>
  }

  // Generate an additional 25th pulse to set the HX711 back to idle mode
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	2102      	movs	r1, #2
 800124e:	480a      	ldr	r0, [pc, #40]	; (8001278 <Read_HX711+0x98>)
 8001250:	f002 fbd6 	bl	8003a00 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f000 f84b 	bl	80012f0 <DelayMicroseconds>
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2102      	movs	r1, #2
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <Read_HX711+0x98>)
 8001260:	f002 fbce 	bl	8003a00 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 8001264:	2001      	movs	r0, #1
 8001266:	f000 f843 	bl	80012f0 <DelayMicroseconds>


  // Return the 24-bit data
  return data;
 800126a:	687b      	ldr	r3, [r7, #4]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40020400 	.word	0x40020400
 8001278:	40022000 	.word	0x40022000

0800127c <UART_SendWeight_g>:

void UART_SendWeight_g(float rawData,float loadcell_slope,float loadcell_bias)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b090      	sub	sp, #64	; 0x40
 8001280:	af00      	add	r7, sp, #0
 8001282:	ed87 0a03 	vstr	s0, [r7, #12]
 8001286:	edc7 0a02 	vstr	s1, [r7, #8]
 800128a:	ed87 1a01 	vstr	s2, [r7, #4]
  float weight = loadcell_slope * rawData  + loadcell_bias;
 800128e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001292:	edd7 7a03 	vldr	s15, [r7, #12]
 8001296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129a:	ed97 7a01 	vldr	s14, [r7, #4]
 800129e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  char buffer[32];
  int len = sprintf(buffer, "Weight(g):");
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	490e      	ldr	r1, [pc, #56]	; (80012e4 <UART_SendWeight_g+0x68>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00f fb01 	bl	80108b4 <siprintf>
 80012b2:	63b8      	str	r0, [r7, #56]	; 0x38
  int data = sprintf(buffer, "%.2f", weight);
 80012b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012b6:	f7ff f967 	bl	8000588 <__aeabi_f2d>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	f107 0014 	add.w	r0, r7, #20
 80012c2:	4909      	ldr	r1, [pc, #36]	; (80012e8 <UART_SendWeight_g+0x6c>)
 80012c4:	f00f faf6 	bl	80108b4 <siprintf>
 80012c8:	6378      	str	r0, [r7, #52]	; 0x34

  // Send the buffer content via UART
#if 0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
#endif
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, data, 1000);
 80012ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	f107 0114 	add.w	r1, r7, #20
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <UART_SendWeight_g+0x70>)
 80012d8:	f008 f828 	bl	800932c <HAL_UART_Transmit>
}
 80012dc:	bf00      	nop
 80012de:	3740      	adds	r7, #64	; 0x40
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	08014d10 	.word	0x08014d10
 80012e8:	08014d1c 	.word	0x08014d1c
 80012ec:	2000069c 	.word	0x2000069c

080012f0 <DelayMicroseconds>:

  // Send the buffer content via UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
}
void DelayMicroseconds(uint32_t microseconds)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t ticks = microseconds;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	60fb      	str	r3, [r7, #12]
  while (ticks--)
 80012fc:	e000      	b.n	8001300 <DelayMicroseconds+0x10>
  {
    __NOP();
 80012fe:	bf00      	nop
  while (ticks--)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	1e5a      	subs	r2, r3, #1
 8001304:	60fa      	str	r2, [r7, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f9      	bne.n	80012fe <DelayMicroseconds+0xe>
  }
}
 800130a:	bf00      	nop
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <MX_I2C1_Init+0x74>)
 800131e:	4a1c      	ldr	r2, [pc, #112]	; (8001390 <MX_I2C1_Init+0x78>)
 8001320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_I2C1_Init+0x74>)
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <MX_I2C1_Init+0x7c>)
 8001326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <MX_I2C1_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_I2C1_Init+0x74>)
 8001330:	2201      	movs	r2, #1
 8001332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_I2C1_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_I2C1_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <MX_I2C1_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_I2C1_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_I2C1_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001352:	480e      	ldr	r0, [pc, #56]	; (800138c <MX_I2C1_Init+0x74>)
 8001354:	f002 fb98 	bl	8003a88 <HAL_I2C_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800135e:	f001 f8b1 	bl	80024c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001362:	2100      	movs	r1, #0
 8001364:	4809      	ldr	r0, [pc, #36]	; (800138c <MX_I2C1_Init+0x74>)
 8001366:	f003 fec5 	bl	80050f4 <HAL_I2CEx_ConfigAnalogFilter>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001370:	f001 f8a8 	bl	80024c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001374:	2100      	movs	r1, #0
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_I2C1_Init+0x74>)
 8001378:	f003 ff32 	bl	80051e0 <HAL_I2CEx_ConfigDigitalFilter>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001382:	f001 f89f 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200004b8 	.word	0x200004b8
 8001390:	40005400 	.word	0x40005400
 8001394:	6000030d 	.word	0x6000030d

08001398 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0aa      	sub	sp, #168	; 0xa8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	2284      	movs	r2, #132	; 0x84
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00e fbf3 	bl	800fba4 <memset>
  if(i2cHandle->Instance==I2C1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a22      	ldr	r2, [pc, #136]	; (800144c <HAL_I2C_MspInit+0xb4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d13c      	bne.n	8001442 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 fdc2 	bl	8005f60 <HAL_RCCEx_PeriphCLKConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013e2:	f001 f86f 	bl	80024c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_I2C_MspInit+0xb8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a19      	ldr	r2, [pc, #100]	; (8001450 <HAL_I2C_MspInit+0xb8>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_I2C_MspInit+0xb8>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001402:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001406:	2312      	movs	r3, #18
 8001408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001418:	2304      	movs	r3, #4
 800141a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001422:	4619      	mov	r1, r3
 8001424:	480b      	ldr	r0, [pc, #44]	; (8001454 <HAL_I2C_MspInit+0xbc>)
 8001426:	f001 ff5b 	bl	80032e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_I2C_MspInit+0xb8>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a08      	ldr	r2, [pc, #32]	; (8001450 <HAL_I2C_MspInit+0xb8>)
 8001430:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_I2C_MspInit+0xb8>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001442:	bf00      	nop
 8001444:	37a8      	adds	r7, #168	; 0xa8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40005400 	.word	0x40005400
 8001450:	40023800 	.word	0x40023800
 8001454:	40020400 	.word	0x40020400

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	f5ad 6d40 	sub.w	sp, sp, #3072	; 0xc00
 800145e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001460:	f001 fcdd 	bl	8002e1e <HAL_Init>

  /* USER CODE BEGIN Init */

  uint8_t buffer[100]; // ?��?��?���? ???��?�� 버퍼 m
  uint8_t received_data;
  uint32_t string_index = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 3bcc 	str.w	r3, [r7, #3020]	; 0xbcc
  HAL_StatusTypeDef status;

	// VL53L0X initialization stuff
	//
	uint32_t refSpadCount = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 3b28 	str.w	r3, [r7, #2856]	; 0xb28
	uint8_t isApertureSpads = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	f887 3b27 	strb.w	r3, [r7, #2855]	; 0xb27
	uint8_t VhvSettings = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	f887 3b26 	strb.w	r3, [r7, #2854]	; 0xb26
	uint8_t PhaseCal = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	f887 3b25 	strb.w	r3, [r7, #2853]	; 0xb25
	VL53L0X_Dev_t vl53l0x_s[NUM_SENSOR];
//	VL53L0X_Dev_t vl53l0x_s;

	VL53L0X_DEV Dev;
	//KalmanFilter kalman_filters[NUM_SENSOR];
	uint16_t distance[NUM_SENSOR] = {0,};
 8001482:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001486:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	819a      	strh	r2, [r3, #12]
//	float filtered_distance[NUM_SENSOR] = {0,};

	uint8_t tca_ch[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}; // control register of TCA9548A
 8001494:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001498:	f6a3 33dc 	subw	r3, r3, #3036	; 0xbdc
 800149c:	4a40      	ldr	r2, [pc, #256]	; (80015a0 <main+0x148>)
 800149e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014a2:	e883 0003 	stmia.w	r3, {r0, r1}
	//uint8_t tca_ch[8] = {0b00000001, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000, 0b10000000};
	uint8_t tca_ch_reset = 0x00;
 80014a6:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80014aa:	f6a3 33dd 	subw	r3, r3, #3037	; 0xbdd
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
	//uint8_t tca_ch_reset = 0b00000000;
    uint8_t tca_addr[] = {0x70};
 80014b2:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80014b6:	f5a3 633e 	sub.w	r3, r3, #3040	; 0xbe0
 80014ba:	2270      	movs	r2, #112	; 0x70
 80014bc:	701a      	strb	r2, [r3, #0]

//    uint8_t tca_addr[] = {0x70,0x71,0x72};


    HAL_UART_Receive_IT(&huart1,&rxData,1);
 80014be:	2201      	movs	r2, #1
 80014c0:	4938      	ldr	r1, [pc, #224]	; (80015a4 <main+0x14c>)
 80014c2:	4839      	ldr	r0, [pc, #228]	; (80015a8 <main+0x150>)
 80014c4:	f007 ffb5 	bl	8009432 <HAL_UART_Receive_IT>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c8:	f000 fee6 	bl	8002298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014cc:	f7ff fdb4 	bl	8001038 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014d0:	f7ff ff22 	bl	8001318 <MX_I2C1_Init>
  MX_TIM7_Init();
 80014d4:	f001 fb2a 	bl	8002b2c <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80014d8:	f001 fbc6 	bl	8002c68 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80014dc:	f001 fab0 	bl	8002a40 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80014e0:	f000 ff48 	bl	8002374 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80014e4:	2100      	movs	r1, #0
 80014e6:	4831      	ldr	r0, [pc, #196]	; (80015ac <main+0x154>)
 80014e8:	f005 ff68 	bl	80073bc <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80014ec:	2201      	movs	r2, #1
 80014ee:	492d      	ldr	r1, [pc, #180]	; (80015a4 <main+0x14c>)
 80014f0:	482d      	ldr	r0, [pc, #180]	; (80015a8 <main+0x150>)
 80014f2:	f007 ff9e 	bl	8009432 <HAL_UART_Receive_IT>

  // Initialize the HX711
  HX711_Init();
 80014f6:	f7ff fe67 	bl	80011c8 <HX711_Init>

  /* UART interrupt initialization */
  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "JH TACTS test\n\r"), 100);
 80014fa:	492d      	ldr	r1, [pc, #180]	; (80015b0 <main+0x158>)
 80014fc:	482d      	ldr	r0, [pc, #180]	; (80015b4 <main+0x15c>)
 80014fe:	f00f f9d9 	bl	80108b4 <siprintf>
 8001502:	4603      	mov	r3, r0
 8001504:	b29a      	uxth	r2, r3
 8001506:	2364      	movs	r3, #100	; 0x64
 8001508:	492a      	ldr	r1, [pc, #168]	; (80015b4 <main+0x15c>)
 800150a:	4827      	ldr	r0, [pc, #156]	; (80015a8 <main+0x150>)
 800150c:	f007 ff0e 	bl	800932c <HAL_UART_Transmit>

		for (int i = 0; i < sizeof(tca_addr); i++) {
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 8001516:	e018      	b.n	800154a <main+0xf2>
		    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[i] << 1, &tca_ch_reset, 1, 1000);
 8001518:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 800151c:	f5a3 623e 	sub.w	r2, r3, #3040	; 0xbe0
 8001520:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 8001524:	4413      	add	r3, r2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b29b      	uxth	r3, r3
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	b299      	uxth	r1, r3
 800152e:	f107 021b 	add.w	r2, r7, #27
 8001532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2301      	movs	r3, #1
 800153a:	481f      	ldr	r0, [pc, #124]	; (80015b8 <main+0x160>)
 800153c:	f002 fbc6 	bl	8003ccc <HAL_I2C_Master_Transmit>
		for (int i = 0; i < sizeof(tca_addr); i++) {
 8001540:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 8001544:	3301      	adds	r3, #1
 8001546:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 800154a:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0e2      	beq.n	8001518 <main+0xc0>
		}

		for (int i = 0; i < NUM_SENSOR; i++) {
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 3bf0 	str.w	r3, [r7, #3056]	; 0xbf0
 8001558:	e0c7      	b.n	80016ea <main+0x292>

			uint8_t q = i / 8;
 800155a:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 800155e:	2b00      	cmp	r3, #0
 8001560:	da00      	bge.n	8001564 <main+0x10c>
 8001562:	3307      	adds	r3, #7
 8001564:	10db      	asrs	r3, r3, #3
 8001566:	f887 3b97 	strb.w	r3, [r7, #2967]	; 0xb97
			uint8_t r = i % 8;
 800156a:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 800156e:	425a      	negs	r2, r3
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	f002 0207 	and.w	r2, r2, #7
 8001578:	bf58      	it	pl
 800157a:	4253      	negpl	r3, r2
 800157c:	f887 3b96 	strb.w	r3, [r7, #2966]	; 0xb96

		    for (int j = 0; j < sizeof(tca_addr); j++) {
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 3bec 	str.w	r3, [r7, #3052]	; 0xbec
 8001586:	e036      	b.n	80015f6 <main+0x19e>
		        uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 8001588:	f897 3b97 	ldrb.w	r3, [r7, #2967]	; 0xb97
 800158c:	f8d7 2bec 	ldr.w	r2, [r7, #3052]	; 0xbec
 8001590:	429a      	cmp	r2, r3
 8001592:	d113      	bne.n	80015bc <main+0x164>
 8001594:	f897 3b96 	ldrb.w	r3, [r7, #2966]	; 0xb96
 8001598:	f107 021c 	add.w	r2, r7, #28
 800159c:	4413      	add	r3, r2
 800159e:	e00f      	b.n	80015c0 <main+0x168>
 80015a0:	08015008 	.word	0x08015008
 80015a4:	2000058e 	.word	0x2000058e
 80015a8:	2000069c 	.word	0x2000069c
 80015ac:	20000604 	.word	0x20000604
 80015b0:	08014d38 	.word	0x08014d38
 80015b4:	200005a0 	.word	0x200005a0
 80015b8:	200004b8 	.word	0x200004b8
 80015bc:	f107 031b 	add.w	r3, r7, #27
 80015c0:	f8c7 3b90 	str.w	r3, [r7, #2960]	; 0xb90
		        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 80015c4:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80015c8:	f5a3 623e 	sub.w	r2, r3, #3040	; 0xbe0
 80015cc:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	; 0xbec
 80015d0:	4413      	add	r3, r2
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	b299      	uxth	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f8d7 2b90 	ldr.w	r2, [r7, #2960]	; 0xb90
 80015e6:	48cc      	ldr	r0, [pc, #816]	; (8001918 <main+0x4c0>)
 80015e8:	f002 fb70 	bl	8003ccc <HAL_I2C_Master_Transmit>
		    for (int j = 0; j < sizeof(tca_addr); j++) {
 80015ec:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	; 0xbec
 80015f0:	3301      	adds	r3, #1
 80015f2:	f8c7 3bec 	str.w	r3, [r7, #3052]	; 0xbec
 80015f6:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	; 0xbec
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0c4      	beq.n	8001588 <main+0x130>
		    }

			Dev = &vl53l0x_s[i];
 80015fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001602:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 8001606:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800160a:	fb01 f303 	mul.w	r3, r1, r3
 800160e:	4413      	add	r3, r2
 8001610:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
			Dev->I2cHandle = &hi2c1;
 8001614:	f8d7 3bb0 	ldr.w	r3, [r7, #2992]	; 0xbb0
 8001618:	4abf      	ldr	r2, [pc, #764]	; (8001918 <main+0x4c0>)
 800161a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
			Dev->I2cDevAddr = VL53L0X_ADDR;
 800161e:	f8d7 3bb0 	ldr.w	r3, [r7, #2992]	; 0xbb0
 8001622:	2252      	movs	r2, #82	; 0x52
 8001624:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

			VL53L0X_WaitDeviceBooted( Dev );
 8001628:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 800162c:	f009 fd4e 	bl	800b0cc <VL53L0X_WaitDeviceBooted>
			VL53L0X_DataInit( Dev );
 8001630:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 8001634:	f009 fa64 	bl	800ab00 <VL53L0X_DataInit>
			VL53L0X_StaticInit( Dev );
 8001638:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 800163c:	f009 fbc4 	bl	800adc8 <VL53L0X_StaticInit>
			VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8001640:	2101      	movs	r1, #1
 8001642:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 8001646:	f009 fddf 	bl	800b208 <VL53L0X_SetDeviceMode>
			VL53L0X_PerformRefCalibration( Dev, &VhvSettings, &PhaseCal);
 800164a:	f607 3225 	addw	r2, r7, #2853	; 0xb25
 800164e:	f607 3326 	addw	r3, r7, #2854	; 0xb26
 8001652:	4619      	mov	r1, r3
 8001654:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 8001658:	f00a fa58 	bl	800bb0c <VL53L0X_PerformRefCalibration>
			VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount, &isApertureSpads);
 800165c:	f607 3227 	addw	r2, r7, #2855	; 0xb27
 8001660:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8001664:	4619      	mov	r1, r3
 8001666:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 800166a:	f00a fedd 	bl	800c428 <VL53L0X_PerformRefSpadManagement>
			VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 800166e:	2201      	movs	r2, #1
 8001670:	2100      	movs	r1, #0
 8001672:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 8001676:	f00a f843 	bl	800b700 <VL53L0X_SetLimitCheckEnable>
			VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 800167a:	2201      	movs	r2, #1
 800167c:	2101      	movs	r1, #1
 800167e:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 8001682:	f00a f83d 	bl	800b700 <VL53L0X_SetLimitCheckEnable>
			VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8001686:	f641 1299 	movw	r2, #6553	; 0x1999
 800168a:	2101      	movs	r1, #1
 800168c:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 8001690:	f00a f8e6 	bl	800b860 <VL53L0X_SetLimitCheckValue>
			VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8001694:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001698:	2100      	movs	r1, #0
 800169a:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 800169e:	f00a f8df 	bl	800b860 <VL53L0X_SetLimitCheckValue>
			VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 80016a2:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80016a6:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 80016aa:	f009 fe0b 	bl	800b2c4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
			VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80016ae:	2212      	movs	r2, #18
 80016b0:	2100      	movs	r1, #0
 80016b2:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 80016b6:	f009 fe2b 	bl	800b310 <VL53L0X_SetVcselPulsePeriod>
			VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80016ba:	220e      	movs	r2, #14
 80016bc:	2101      	movs	r1, #1
 80016be:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 80016c2:	f009 fe25 	bl	800b310 <VL53L0X_SetVcselPulsePeriod>
			// KalmanFilter initializer BEGIN //
			float Q = 0.1f; // Process noise covariance
			float R = 1.0f;   // Measurement noise covariance
			KalmanFilter_Init(&kalman_filters[i], Q, R);
			// KalmanFilter initializer END //			 */
			HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d complete \n\r",i), 100);
 80016c6:	f8d7 2bf0 	ldr.w	r2, [r7, #3056]	; 0xbf0
 80016ca:	4994      	ldr	r1, [pc, #592]	; (800191c <main+0x4c4>)
 80016cc:	4894      	ldr	r0, [pc, #592]	; (8001920 <main+0x4c8>)
 80016ce:	f00f f8f1 	bl	80108b4 <siprintf>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	2364      	movs	r3, #100	; 0x64
 80016d8:	4991      	ldr	r1, [pc, #580]	; (8001920 <main+0x4c8>)
 80016da:	4892      	ldr	r0, [pc, #584]	; (8001924 <main+0x4cc>)
 80016dc:	f007 fe26 	bl	800932c <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 80016e0:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 80016e4:	3301      	adds	r3, #1
 80016e6:	f8c7 3bf0 	str.w	r3, [r7, #3056]	; 0xbf0
 80016ea:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	f77f af33 	ble.w	800155a <main+0x102>



  while (1)
  {
	  if(startMessage==0){
 80016f4:	4b8c      	ldr	r3, [pc, #560]	; (8001928 <main+0x4d0>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d15a      	bne.n	80017b2 <main+0x35a>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "--------------------------------------------------------------\n"), 100);
 80016fc:	498b      	ldr	r1, [pc, #556]	; (800192c <main+0x4d4>)
 80016fe:	4888      	ldr	r0, [pc, #544]	; (8001920 <main+0x4c8>)
 8001700:	f00f f8d8 	bl	80108b4 <siprintf>
 8001704:	4603      	mov	r3, r0
 8001706:	b29a      	uxth	r2, r3
 8001708:	2364      	movs	r3, #100	; 0x64
 800170a:	4985      	ldr	r1, [pc, #532]	; (8001920 <main+0x4c8>)
 800170c:	4885      	ldr	r0, [pc, #532]	; (8001924 <main+0x4cc>)
 800170e:	f007 fe0d 	bl	800932c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "----- Auto Data Logging Device for TACTS made by JaeHyeong----\n"), 100);
 8001712:	4987      	ldr	r1, [pc, #540]	; (8001930 <main+0x4d8>)
 8001714:	4882      	ldr	r0, [pc, #520]	; (8001920 <main+0x4c8>)
 8001716:	f00f f8cd 	bl	80108b4 <siprintf>
 800171a:	4603      	mov	r3, r0
 800171c:	b29a      	uxth	r2, r3
 800171e:	2364      	movs	r3, #100	; 0x64
 8001720:	497f      	ldr	r1, [pc, #508]	; (8001920 <main+0x4c8>)
 8001722:	4880      	ldr	r0, [pc, #512]	; (8001924 <main+0x4cc>)
 8001724:	f007 fe02 	bl	800932c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-----------rev XX : Rotaing Revolution Motor (Deg)------------\n"), 100);
 8001728:	4982      	ldr	r1, [pc, #520]	; (8001934 <main+0x4dc>)
 800172a:	487d      	ldr	r0, [pc, #500]	; (8001920 <main+0x4c8>)
 800172c:	f00f f8c2 	bl	80108b4 <siprintf>
 8001730:	4603      	mov	r3, r0
 8001732:	b29a      	uxth	r2, r3
 8001734:	2364      	movs	r3, #100	; 0x64
 8001736:	497a      	ldr	r1, [pc, #488]	; (8001920 <main+0x4c8>)
 8001738:	487a      	ldr	r0, [pc, #488]	; (8001924 <main+0x4cc>)
 800173a:	f007 fdf7 	bl	800932c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-----------lin XX : Moving Linear Motor (mm)------------------\n"), 100);
 800173e:	497e      	ldr	r1, [pc, #504]	; (8001938 <main+0x4e0>)
 8001740:	4877      	ldr	r0, [pc, #476]	; (8001920 <main+0x4c8>)
 8001742:	f00f f8b7 	bl	80108b4 <siprintf>
 8001746:	4603      	mov	r3, r0
 8001748:	b29a      	uxth	r2, r3
 800174a:	2364      	movs	r3, #100	; 0x64
 800174c:	4974      	ldr	r1, [pc, #464]	; (8001920 <main+0x4c8>)
 800174e:	4875      	ldr	r0, [pc, #468]	; (8001924 <main+0x4cc>)
 8001750:	f007 fdec 	bl	800932c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-----------servo XX : Poking XX * 0.8 (mm)--------------------\n"), 100);
 8001754:	4979      	ldr	r1, [pc, #484]	; (800193c <main+0x4e4>)
 8001756:	4872      	ldr	r0, [pc, #456]	; (8001920 <main+0x4c8>)
 8001758:	f00f f8ac 	bl	80108b4 <siprintf>
 800175c:	4603      	mov	r3, r0
 800175e:	b29a      	uxth	r2, r3
 8001760:	2364      	movs	r3, #100	; 0x64
 8001762:	496f      	ldr	r1, [pc, #444]	; (8001920 <main+0x4c8>)
 8001764:	486f      	ldr	r0, [pc, #444]	; (8001924 <main+0x4cc>)
 8001766:	f007 fde1 	bl	800932c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-----------auto : Poking the designed point and data logging--\n"), 100);
 800176a:	4975      	ldr	r1, [pc, #468]	; (8001940 <main+0x4e8>)
 800176c:	486c      	ldr	r0, [pc, #432]	; (8001920 <main+0x4c8>)
 800176e:	f00f f8a1 	bl	80108b4 <siprintf>
 8001772:	4603      	mov	r3, r0
 8001774:	b29a      	uxth	r2, r3
 8001776:	2364      	movs	r3, #100	; 0x64
 8001778:	4969      	ldr	r1, [pc, #420]	; (8001920 <main+0x4c8>)
 800177a:	486a      	ldr	r0, [pc, #424]	; (8001924 <main+0x4cc>)
 800177c:	f007 fdd6 	bl	800932c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-------------------------testbed_axial------------------------\n"), 100);
 8001780:	4970      	ldr	r1, [pc, #448]	; (8001944 <main+0x4ec>)
 8001782:	4867      	ldr	r0, [pc, #412]	; (8001920 <main+0x4c8>)
 8001784:	f00f f896 	bl	80108b4 <siprintf>
 8001788:	4603      	mov	r3, r0
 800178a:	b29a      	uxth	r2, r3
 800178c:	2364      	movs	r3, #100	; 0x64
 800178e:	4964      	ldr	r1, [pc, #400]	; (8001920 <main+0x4c8>)
 8001790:	4864      	ldr	r0, [pc, #400]	; (8001924 <main+0x4cc>)
 8001792:	f007 fdcb 	bl	800932c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "--------------------------------------------------------------\n"), 100);
 8001796:	4965      	ldr	r1, [pc, #404]	; (800192c <main+0x4d4>)
 8001798:	4861      	ldr	r0, [pc, #388]	; (8001920 <main+0x4c8>)
 800179a:	f00f f88b 	bl	80108b4 <siprintf>
 800179e:	4603      	mov	r3, r0
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	2364      	movs	r3, #100	; 0x64
 80017a4:	495e      	ldr	r1, [pc, #376]	; (8001920 <main+0x4c8>)
 80017a6:	485f      	ldr	r0, [pc, #380]	; (8001924 <main+0x4cc>)
 80017a8:	f007 fdc0 	bl	800932c <HAL_UART_Transmit>
		  startMessage =1;
 80017ac:	4b5e      	ldr	r3, [pc, #376]	; (8001928 <main+0x4d0>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
	  }

	  if(receivedFlag)
 80017b2:	4b65      	ldr	r3, [pc, #404]	; (8001948 <main+0x4f0>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d09c      	beq.n	80016f4 <main+0x29c>
	  {
		  ///////////////////// Step rev /////////////////////

		  char* command = "all";
 80017ba:	4b64      	ldr	r3, [pc, #400]	; (800194c <main+0x4f4>)
 80017bc:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 80017c0:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 80017c4:	f7fe fd24 	bl	8000210 <strlen>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	f8d7 1bc8 	ldr.w	r1, [r7, #3016]	; 0xbc8
 80017d0:	485f      	ldr	r0, [pc, #380]	; (8001950 <main+0x4f8>)
 80017d2:	f00f f908 	bl	80109e6 <strncmp>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f040 80e3 	bne.w	80019a4 <main+0x54c>
		     {
		         float servo_dist=0;
 80017de:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80017e2:	f6a3 33e4 	subw	r3, r3, #3044	; 0xbe4
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
		         int step_rev_angle=0;
 80017ec:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80017f0:	f6a3 33e8 	subw	r3, r3, #3048	; 0xbe8
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
		         int step_lin_dist=0;
 80017f8:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80017fc:	f6a3 33ec 	subw	r3, r3, #3052	; 0xbec
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

		         // Check if three integers are successfully parsed
		         if(sscanf((char*)rxBuffer + strlen(command)+1, "%f,%d,%d",&servo_dist, &step_rev_angle, &step_lin_dist) == 3)
 8001804:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 8001808:	f7fe fd02 	bl	8000210 <strlen>
 800180c:	4603      	mov	r3, r0
 800180e:	3301      	adds	r3, #1
 8001810:	4a4f      	ldr	r2, [pc, #316]	; (8001950 <main+0x4f8>)
 8001812:	1898      	adds	r0, r3, r2
 8001814:	f107 0110 	add.w	r1, r7, #16
 8001818:	f107 0214 	add.w	r2, r7, #20
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	460b      	mov	r3, r1
 8001824:	494b      	ldr	r1, [pc, #300]	; (8001954 <main+0x4fc>)
 8001826:	f00f f865 	bl	80108f4 <siscanf>
 800182a:	4603      	mov	r3, r0
 800182c:	2b03      	cmp	r3, #3
 800182e:	f040 80a7 	bne.w	8001980 <main+0x528>
		         {
		             stepRev(step_rev_angle);
 8001832:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001836:	f6a3 33e8 	subw	r3, r3, #3048	; 0xbe8
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fe51 	bl	80024e4 <stepRev>
		             stepLin(step_lin_dist);
 8001842:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001846:	f6a3 33ec 	subw	r3, r3, #3052	; 0xbec
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 feb3 	bl	80025b8 <stepLin>
		             servo_angle(&htim2, TIM_CHANNEL_1, servo_dist);
 8001852:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001856:	f6a3 33e4 	subw	r3, r3, #3044	; 0xbe4
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001862:	ee17 2a90 	vmov	r2, s15
 8001866:	2100      	movs	r1, #0
 8001868:	483b      	ldr	r0, [pc, #236]	; (8001958 <main+0x500>)
 800186a:	f000 ff3f 	bl	80026ec <servo_angle>
		             servo_dist *=0.8;
 800186e:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001872:	f6a3 33e4 	subw	r3, r3, #3044	; 0xbe4
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe85 	bl	8000588 <__aeabi_f2d>
 800187e:	a324      	add	r3, pc, #144	; (adr r3, 8001910 <main+0x4b8>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fed8 	bl	8000638 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f7ff f9ca 	bl	8000c28 <__aeabi_d2f>
 8001894:	4602      	mov	r2, r0
 8001896:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 800189a:	f6a3 33e4 	subw	r3, r3, #3044	; 0xbe4
 800189e:	601a      	str	r2, [r3, #0]

		 			HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d deg rev \n\r",step_rev_angle), 100);
 80018a0:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80018a4:	f6a3 33e8 	subw	r3, r3, #3048	; 0xbe8
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	492b      	ldr	r1, [pc, #172]	; (800195c <main+0x504>)
 80018ae:	481c      	ldr	r0, [pc, #112]	; (8001920 <main+0x4c8>)
 80018b0:	f00f f800 	bl	80108b4 <siprintf>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	2364      	movs	r3, #100	; 0x64
 80018ba:	4919      	ldr	r1, [pc, #100]	; (8001920 <main+0x4c8>)
 80018bc:	4819      	ldr	r0, [pc, #100]	; (8001924 <main+0x4cc>)
 80018be:	f007 fd35 	bl	800932c <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d mm lin \n\r",step_lin_dist), 100);
 80018c2:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80018c6:	f6a3 33ec 	subw	r3, r3, #3052	; 0xbec
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4924      	ldr	r1, [pc, #144]	; (8001960 <main+0x508>)
 80018d0:	4813      	ldr	r0, [pc, #76]	; (8001920 <main+0x4c8>)
 80018d2:	f00e ffef 	bl	80108b4 <siprintf>
 80018d6:	4603      	mov	r3, r0
 80018d8:	b29a      	uxth	r2, r3
 80018da:	2364      	movs	r3, #100	; 0x64
 80018dc:	4910      	ldr	r1, [pc, #64]	; (8001920 <main+0x4c8>)
 80018de:	4811      	ldr	r0, [pc, #68]	; (8001924 <main+0x4cc>)
 80018e0:	f007 fd24 	bl	800932c <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%.2f servo \n\r",servo_dist), 100);
 80018e4:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80018e8:	f6a3 33e4 	subw	r3, r3, #3044	; 0xbe4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fe4a 	bl	8000588 <__aeabi_f2d>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	491a      	ldr	r1, [pc, #104]	; (8001964 <main+0x50c>)
 80018fa:	4809      	ldr	r0, [pc, #36]	; (8001920 <main+0x4c8>)
 80018fc:	f00e ffda 	bl	80108b4 <siprintf>
 8001900:	4603      	mov	r3, r0
 8001902:	b29a      	uxth	r2, r3
 8001904:	2364      	movs	r3, #100	; 0x64
 8001906:	4906      	ldr	r1, [pc, #24]	; (8001920 <main+0x4c8>)
 8001908:	4806      	ldr	r0, [pc, #24]	; (8001924 <main+0x4cc>)
 800190a:	f007 fd0f 	bl	800932c <HAL_UART_Transmit>
 800190e:	e02b      	b.n	8001968 <main+0x510>
 8001910:	9999999a 	.word	0x9999999a
 8001914:	3fe99999 	.word	0x3fe99999
 8001918:	200004b8 	.word	0x200004b8
 800191c:	08014d48 	.word	0x08014d48
 8001920:	200005a0 	.word	0x200005a0
 8001924:	2000069c 	.word	0x2000069c
 8001928:	2000059c 	.word	0x2000059c
 800192c:	08014d58 	.word	0x08014d58
 8001930:	08014d98 	.word	0x08014d98
 8001934:	08014dd8 	.word	0x08014dd8
 8001938:	08014e18 	.word	0x08014e18
 800193c:	08014e58 	.word	0x08014e58
 8001940:	08014e98 	.word	0x08014e98
 8001944:	08014ed8 	.word	0x08014ed8
 8001948:	2000058f 	.word	0x2000058f
 800194c:	08014f18 	.word	0x08014f18
 8001950:	2000050c 	.word	0x2000050c
 8001954:	08014f1c 	.word	0x08014f1c
 8001958:	20000604 	.word	0x20000604
 800195c:	08014f28 	.word	0x08014f28
 8001960:	08014f38 	.word	0x08014f38
 8001964:	08014f48 	.word	0x08014f48
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "vaild data\r\n"), 100);
 8001968:	49c1      	ldr	r1, [pc, #772]	; (8001c70 <main+0x818>)
 800196a:	48c2      	ldr	r0, [pc, #776]	; (8001c74 <main+0x81c>)
 800196c:	f00e ffa2 	bl	80108b4 <siprintf>
 8001970:	4603      	mov	r3, r0
 8001972:	b29a      	uxth	r2, r3
 8001974:	2364      	movs	r3, #100	; 0x64
 8001976:	49bf      	ldr	r1, [pc, #764]	; (8001c74 <main+0x81c>)
 8001978:	48bf      	ldr	r0, [pc, #764]	; (8001c78 <main+0x820>)
 800197a:	f007 fcd7 	bl	800932c <HAL_UART_Transmit>
 800197e:	e00a      	b.n	8001996 <main+0x53e>

		         }
		         else
		         {
		        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "invalid data\r\n"), 100);
 8001980:	49be      	ldr	r1, [pc, #760]	; (8001c7c <main+0x824>)
 8001982:	48bc      	ldr	r0, [pc, #752]	; (8001c74 <main+0x81c>)
 8001984:	f00e ff96 	bl	80108b4 <siprintf>
 8001988:	4603      	mov	r3, r0
 800198a:	b29a      	uxth	r2, r3
 800198c:	2364      	movs	r3, #100	; 0x64
 800198e:	49b9      	ldr	r1, [pc, #740]	; (8001c74 <main+0x81c>)
 8001990:	48b9      	ldr	r0, [pc, #740]	; (8001c78 <main+0x820>)
 8001992:	f007 fccb 	bl	800932c <HAL_UART_Transmit>
		         }
		         HAL_Delay(1000); // Delay for 1 second
 8001996:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800199a:	f001 fa9d 	bl	8002ed8 <HAL_Delay>
		         receivedFlag = 0;
 800199e:	4bb8      	ldr	r3, [pc, #736]	; (8001c80 <main+0x828>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
		     }

		  command = "rev";
 80019a4:	4bb7      	ldr	r3, [pc, #732]	; (8001c84 <main+0x82c>)
 80019a6:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 80019aa:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 80019ae:	f7fe fc2f 	bl	8000210 <strlen>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	f8d7 1bc8 	ldr.w	r1, [r7, #3016]	; 0xbc8
 80019ba:	48b3      	ldr	r0, [pc, #716]	; (8001c88 <main+0x830>)
 80019bc:	f00f f813 	bl	80109e6 <strncmp>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d142      	bne.n	8001a4c <main+0x5f4>
		     {
		         int step_rev_angle=0;
 80019c6:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80019ca:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
		         if(sscanf((char*)rxBuffer + strlen(command) + 1, "%d",&step_rev_angle) == 1)
 80019d2:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 80019d6:	f7fe fc1b 	bl	8000210 <strlen>
 80019da:	4603      	mov	r3, r0
 80019dc:	3301      	adds	r3, #1
 80019de:	4aaa      	ldr	r2, [pc, #680]	; (8001c88 <main+0x830>)
 80019e0:	4413      	add	r3, r2
 80019e2:	f107 0208 	add.w	r2, r7, #8
 80019e6:	49a9      	ldr	r1, [pc, #676]	; (8001c8c <main+0x834>)
 80019e8:	4618      	mov	r0, r3
 80019ea:	f00e ff83 	bl	80108f4 <siscanf>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d119      	bne.n	8001a28 <main+0x5d0>
		         {
					 stepRev(step_rev_angle);
 80019f4:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80019f8:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fd70 	bl	80024e4 <stepRev>
		 			HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d deg rev \n\r",step_rev_angle), 100);
 8001a04:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001a08:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	499f      	ldr	r1, [pc, #636]	; (8001c90 <main+0x838>)
 8001a12:	4898      	ldr	r0, [pc, #608]	; (8001c74 <main+0x81c>)
 8001a14:	f00e ff4e 	bl	80108b4 <siprintf>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	2364      	movs	r3, #100	; 0x64
 8001a1e:	4995      	ldr	r1, [pc, #596]	; (8001c74 <main+0x81c>)
 8001a20:	4895      	ldr	r0, [pc, #596]	; (8001c78 <main+0x820>)
 8001a22:	f007 fc83 	bl	800932c <HAL_UART_Transmit>
 8001a26:	e00a      	b.n	8001a3e <main+0x5e6>
		         }
		         else
		         {
		        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "invalid data\r\n"), 100);
 8001a28:	4994      	ldr	r1, [pc, #592]	; (8001c7c <main+0x824>)
 8001a2a:	4892      	ldr	r0, [pc, #584]	; (8001c74 <main+0x81c>)
 8001a2c:	f00e ff42 	bl	80108b4 <siprintf>
 8001a30:	4603      	mov	r3, r0
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	2364      	movs	r3, #100	; 0x64
 8001a36:	498f      	ldr	r1, [pc, #572]	; (8001c74 <main+0x81c>)
 8001a38:	488f      	ldr	r0, [pc, #572]	; (8001c78 <main+0x820>)
 8001a3a:	f007 fc77 	bl	800932c <HAL_UART_Transmit>
		         }
		         HAL_Delay(1000); // Delay for 1 second
 8001a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a42:	f001 fa49 	bl	8002ed8 <HAL_Delay>
		         receivedFlag = 0;
 8001a46:	4b8e      	ldr	r3, [pc, #568]	; (8001c80 <main+0x828>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
		     }

		  command = "lin";
 8001a4c:	4b91      	ldr	r3, [pc, #580]	; (8001c94 <main+0x83c>)
 8001a4e:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
		  if (strncmp((char*)rxBuffer, command, strlen(command)) == 0) {
 8001a52:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 8001a56:	f7fe fbdb 	bl	8000210 <strlen>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	f8d7 1bc8 	ldr.w	r1, [r7, #3016]	; 0xbc8
 8001a62:	4889      	ldr	r0, [pc, #548]	; (8001c88 <main+0x830>)
 8001a64:	f00e ffbf 	bl	80109e6 <strncmp>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d14d      	bne.n	8001b0a <main+0x6b2>
		      int step_lin_dist = 0;
 8001a6e:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001a72:	f6a3 33f4 	subw	r3, r3, #3060	; 0xbf4
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
		      if (sscanf((char*)rxBuffer + strlen(command) + 1, "%d", &step_lin_dist) == 1) {
 8001a7a:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 8001a7e:	f7fe fbc7 	bl	8000210 <strlen>
 8001a82:	4603      	mov	r3, r0
 8001a84:	3301      	adds	r3, #1
 8001a86:	4a80      	ldr	r2, [pc, #512]	; (8001c88 <main+0x830>)
 8001a88:	4413      	add	r3, r2
 8001a8a:	1d3a      	adds	r2, r7, #4
 8001a8c:	497f      	ldr	r1, [pc, #508]	; (8001c8c <main+0x834>)
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f00e ff30 	bl	80108f4 <siscanf>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d125      	bne.n	8001ae6 <main+0x68e>
		          stepLin(step_lin_dist);
 8001a9a:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001a9e:	f6a3 33f4 	subw	r3, r3, #3060	; 0xbf4
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 fd87 	bl	80025b8 <stepLin>
		          HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d mm %s \n\r", step_lin_dist, command), 100);
 8001aaa:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001aae:	f6a3 33f4 	subw	r3, r3, #3060	; 0xbf4
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	f8d7 3bc8 	ldr.w	r3, [r7, #3016]	; 0xbc8
 8001ab8:	4977      	ldr	r1, [pc, #476]	; (8001c98 <main+0x840>)
 8001aba:	486e      	ldr	r0, [pc, #440]	; (8001c74 <main+0x81c>)
 8001abc:	f00e fefa 	bl	80108b4 <siprintf>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	2364      	movs	r3, #100	; 0x64
 8001ac6:	496b      	ldr	r1, [pc, #428]	; (8001c74 <main+0x81c>)
 8001ac8:	486b      	ldr	r0, [pc, #428]	; (8001c78 <main+0x820>)
 8001aca:	f007 fc2f 	bl	800932c <HAL_UART_Transmit>
		          HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "valid data\r\n"), 100);
 8001ace:	4973      	ldr	r1, [pc, #460]	; (8001c9c <main+0x844>)
 8001ad0:	4868      	ldr	r0, [pc, #416]	; (8001c74 <main+0x81c>)
 8001ad2:	f00e feef 	bl	80108b4 <siprintf>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	2364      	movs	r3, #100	; 0x64
 8001adc:	4965      	ldr	r1, [pc, #404]	; (8001c74 <main+0x81c>)
 8001ade:	4866      	ldr	r0, [pc, #408]	; (8001c78 <main+0x820>)
 8001ae0:	f007 fc24 	bl	800932c <HAL_UART_Transmit>
 8001ae4:	e00a      	b.n	8001afc <main+0x6a4>
		      } else {
		          HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "invalid data\r\n"), 100);
 8001ae6:	4965      	ldr	r1, [pc, #404]	; (8001c7c <main+0x824>)
 8001ae8:	4862      	ldr	r0, [pc, #392]	; (8001c74 <main+0x81c>)
 8001aea:	f00e fee3 	bl	80108b4 <siprintf>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	2364      	movs	r3, #100	; 0x64
 8001af4:	495f      	ldr	r1, [pc, #380]	; (8001c74 <main+0x81c>)
 8001af6:	4860      	ldr	r0, [pc, #384]	; (8001c78 <main+0x820>)
 8001af8:	f007 fc18 	bl	800932c <HAL_UART_Transmit>
		      }
		      HAL_Delay(1000);
 8001afc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b00:	f001 f9ea 	bl	8002ed8 <HAL_Delay>
		      receivedFlag = 0;
 8001b04:	4b5e      	ldr	r3, [pc, #376]	; (8001c80 <main+0x828>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
		  }

		  command = "servo";
 8001b0a:	4b65      	ldr	r3, [pc, #404]	; (8001ca0 <main+0x848>)
 8001b0c:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 8001b10:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 8001b14:	f7fe fb7c 	bl	8000210 <strlen>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f8d7 1bc8 	ldr.w	r1, [r7, #3016]	; 0xbc8
 8001b20:	4859      	ldr	r0, [pc, #356]	; (8001c88 <main+0x830>)
 8001b22:	f00e ff60 	bl	80109e6 <strncmp>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d175      	bne.n	8001c18 <main+0x7c0>
		     {
		         float servo_dist=0;
 8001b2c:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001b30:	f6a3 33f8 	subw	r3, r3, #3064	; 0xbf8
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
		         if(sscanf((char*)rxBuffer + strlen(command)+1, "%f",&servo_dist) == 1)
 8001b3a:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 8001b3e:	f7fe fb67 	bl	8000210 <strlen>
 8001b42:	4603      	mov	r3, r0
 8001b44:	3301      	adds	r3, #1
 8001b46:	4a50      	ldr	r2, [pc, #320]	; (8001c88 <main+0x830>)
 8001b48:	4413      	add	r3, r2
 8001b4a:	463a      	mov	r2, r7
 8001b4c:	4955      	ldr	r1, [pc, #340]	; (8001ca4 <main+0x84c>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00e fed0 	bl	80108f4 <siscanf>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d147      	bne.n	8001bea <main+0x792>
		         {
		            servo_angle(&htim2, TIM_CHANNEL_1, servo_dist);
 8001b5a:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001b5e:	f6a3 33f8 	subw	r3, r3, #3064	; 0xbf8
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b6a:	ee17 2a90 	vmov	r2, s15
 8001b6e:	2100      	movs	r1, #0
 8001b70:	484d      	ldr	r0, [pc, #308]	; (8001ca8 <main+0x850>)
 8001b72:	f000 fdbb 	bl	80026ec <servo_angle>
		            servo_dist *=0.8;
 8001b76:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001b7a:	f6a3 33f8 	subw	r3, r3, #3064	; 0xbf8
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fd01 	bl	8000588 <__aeabi_f2d>
 8001b86:	a338      	add	r3, pc, #224	; (adr r3, 8001c68 <main+0x810>)
 8001b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8c:	f7fe fd54 	bl	8000638 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f846 	bl	8000c28 <__aeabi_d2f>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001ba2:	f6a3 33f8 	subw	r3, r3, #3064	; 0xbf8
 8001ba6:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%.2f servo \n\r",servo_dist), 100);
 8001ba8:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001bac:	f6a3 33f8 	subw	r3, r3, #3064	; 0xbf8
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fce8 	bl	8000588 <__aeabi_f2d>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	493b      	ldr	r1, [pc, #236]	; (8001cac <main+0x854>)
 8001bbe:	482d      	ldr	r0, [pc, #180]	; (8001c74 <main+0x81c>)
 8001bc0:	f00e fe78 	bl	80108b4 <siprintf>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	2364      	movs	r3, #100	; 0x64
 8001bca:	492a      	ldr	r1, [pc, #168]	; (8001c74 <main+0x81c>)
 8001bcc:	482a      	ldr	r0, [pc, #168]	; (8001c78 <main+0x820>)
 8001bce:	f007 fbad 	bl	800932c <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "vaild data\r\n"), 100);
 8001bd2:	4927      	ldr	r1, [pc, #156]	; (8001c70 <main+0x818>)
 8001bd4:	4827      	ldr	r0, [pc, #156]	; (8001c74 <main+0x81c>)
 8001bd6:	f00e fe6d 	bl	80108b4 <siprintf>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	2364      	movs	r3, #100	; 0x64
 8001be0:	4924      	ldr	r1, [pc, #144]	; (8001c74 <main+0x81c>)
 8001be2:	4825      	ldr	r0, [pc, #148]	; (8001c78 <main+0x820>)
 8001be4:	f007 fba2 	bl	800932c <HAL_UART_Transmit>
 8001be8:	e00a      	b.n	8001c00 <main+0x7a8>
		         }
		         else
		         {
		        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "invalid data\r\n"), 100);
 8001bea:	4924      	ldr	r1, [pc, #144]	; (8001c7c <main+0x824>)
 8001bec:	4821      	ldr	r0, [pc, #132]	; (8001c74 <main+0x81c>)
 8001bee:	f00e fe61 	bl	80108b4 <siprintf>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	2364      	movs	r3, #100	; 0x64
 8001bf8:	491e      	ldr	r1, [pc, #120]	; (8001c74 <main+0x81c>)
 8001bfa:	481f      	ldr	r0, [pc, #124]	; (8001c78 <main+0x820>)
 8001bfc:	f007 fb96 	bl	800932c <HAL_UART_Transmit>
		         }
		         HAL_Delay(2000); // Delay for 1 second
 8001c00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c04:	f001 f968 	bl	8002ed8 <HAL_Delay>

		         servo_angle(&htim2, TIM_CHANNEL_1, 0); // return to servo origin
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4826      	ldr	r0, [pc, #152]	; (8001ca8 <main+0x850>)
 8001c0e:	f000 fd6d 	bl	80026ec <servo_angle>

		         receivedFlag = 0;
 8001c12:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <main+0x828>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
		     }

		  command = "sensor";
 8001c18:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <main+0x858>)
 8001c1a:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 8001c1e:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 8001c22:	f7fe faf5 	bl	8000210 <strlen>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f8d7 1bc8 	ldr.w	r1, [r7, #3016]	; 0xbc8
 8001c2e:	4816      	ldr	r0, [pc, #88]	; (8001c88 <main+0x830>)
 8001c30:	f00e fed9 	bl	80109e6 <strncmp>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 813a 	bne.w	8001eb0 <main+0xa58>
		     {
	        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "sensor test\r\n"), 100);
 8001c3c:	491d      	ldr	r1, [pc, #116]	; (8001cb4 <main+0x85c>)
 8001c3e:	480d      	ldr	r0, [pc, #52]	; (8001c74 <main+0x81c>)
 8001c40:	f00e fe38 	bl	80108b4 <siprintf>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	2364      	movs	r3, #100	; 0x64
 8001c4a:	490a      	ldr	r1, [pc, #40]	; (8001c74 <main+0x81c>)
 8001c4c:	480a      	ldr	r0, [pc, #40]	; (8001c78 <main+0x820>)
 8001c4e:	f007 fb6d 	bl	800932c <HAL_UART_Transmit>

							 ///////////////////////////////////////////////////////
							 ////////////////////Logging Start//////////////////////
							 ///////////////////////////////////////////////////////
							 start_time = HAL_GetTick(); // ?��?�� ?���? 측정
 8001c52:	f001 f935 	bl	8002ec0 <HAL_GetTick>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4a17      	ldr	r2, [pc, #92]	; (8001cb8 <main+0x860>)
 8001c5a:	6013      	str	r3, [r2, #0]
							 do{
							  /// Read the VL53l0x data ///
							   for (int i = 0; i < NUM_SENSOR; i++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f8c7 3be8 	str.w	r3, [r7, #3048]	; 0xbe8
 8001c62:	e0b2      	b.n	8001dca <main+0x972>
 8001c64:	f3af 8000 	nop.w
 8001c68:	9999999a 	.word	0x9999999a
 8001c6c:	3fe99999 	.word	0x3fe99999
 8001c70:	08014f58 	.word	0x08014f58
 8001c74:	200005a0 	.word	0x200005a0
 8001c78:	2000069c 	.word	0x2000069c
 8001c7c:	08014f68 	.word	0x08014f68
 8001c80:	2000058f 	.word	0x2000058f
 8001c84:	08014f78 	.word	0x08014f78
 8001c88:	2000050c 	.word	0x2000050c
 8001c8c:	08014f7c 	.word	0x08014f7c
 8001c90:	08014f28 	.word	0x08014f28
 8001c94:	08014f80 	.word	0x08014f80
 8001c98:	08014f84 	.word	0x08014f84
 8001c9c:	08014f90 	.word	0x08014f90
 8001ca0:	08014fa0 	.word	0x08014fa0
 8001ca4:	08014fa8 	.word	0x08014fa8
 8001ca8:	20000604 	.word	0x20000604
 8001cac:	08014f48 	.word	0x08014f48
 8001cb0:	08014fac 	.word	0x08014fac
 8001cb4:	08014fb4 	.word	0x08014fb4
 8001cb8:	20000594 	.word	0x20000594
									uint8_t q = i / 8;
 8001cbc:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	da00      	bge.n	8001cc6 <main+0x86e>
 8001cc4:	3307      	adds	r3, #7
 8001cc6:	10db      	asrs	r3, r3, #3
 8001cc8:	f887 3bb7 	strb.w	r3, [r7, #2999]	; 0xbb7
									uint8_t r = i % 8;
 8001ccc:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 8001cd0:	425a      	negs	r2, r3
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	f002 0207 	and.w	r2, r2, #7
 8001cda:	bf58      	it	pl
 8001cdc:	4253      	negpl	r3, r2
 8001cde:	f887 3bb6 	strb.w	r3, [r7, #2998]	; 0xbb6
									for (int j = 0; j < sizeof(tca_addr); j++) {
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 3be4 	str.w	r3, [r7, #3044]	; 0xbe4
 8001ce8:	e028      	b.n	8001d3c <main+0x8e4>
										uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 8001cea:	f897 3bb7 	ldrb.w	r3, [r7, #2999]	; 0xbb7
 8001cee:	f8d7 2be4 	ldr.w	r2, [r7, #3044]	; 0xbe4
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d105      	bne.n	8001d02 <main+0x8aa>
 8001cf6:	f897 3bb6 	ldrb.w	r3, [r7, #2998]	; 0xbb6
 8001cfa:	f107 021c 	add.w	r2, r7, #28
 8001cfe:	4413      	add	r3, r2
 8001d00:	e001      	b.n	8001d06 <main+0x8ae>
 8001d02:	f107 031b 	add.w	r3, r7, #27
 8001d06:	f8c7 3bac 	str.w	r3, [r7, #2988]	; 0xbac
										HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 8001d0a:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001d0e:	f5a3 623e 	sub.w	r2, r3, #3040	; 0xbe0
 8001d12:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 8001d16:	4413      	add	r3, r2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	b299      	uxth	r1, r3
 8001d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2301      	movs	r3, #1
 8001d28:	f8d7 2bac 	ldr.w	r2, [r7, #2988]	; 0xbac
 8001d2c:	48bb      	ldr	r0, [pc, #748]	; (800201c <main+0xbc4>)
 8001d2e:	f001 ffcd 	bl	8003ccc <HAL_I2C_Master_Transmit>
									for (int j = 0; j < sizeof(tca_addr); j++) {
 8001d32:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 8001d36:	3301      	adds	r3, #1
 8001d38:	f8c7 3be4 	str.w	r3, [r7, #3044]	; 0xbe4
 8001d3c:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0d2      	beq.n	8001cea <main+0x892>
									}
								   Dev = &vl53l0x_s[i];
 8001d44:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d48:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 8001d4c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
								   VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001d5a:	49b1      	ldr	r1, [pc, #708]	; (8002020 <main+0xbc8>)
 8001d5c:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 8001d60:	f00a fb77 	bl	800c452 <VL53L0X_PerformContinuousRangingMeasurement>
								   if (RangingData.RangeStatus == 0) {
 8001d64:	4bae      	ldr	r3, [pc, #696]	; (8002020 <main+0xbc8>)
 8001d66:	7e1b      	ldrb	r3, [r3, #24]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d11e      	bne.n	8001daa <main+0x952>
									   distance[i] = RangingData.RangeMilliMeter;
 8001d6c:	4bac      	ldr	r3, [pc, #688]	; (8002020 <main+0xbc8>)
 8001d6e:	8919      	ldrh	r1, [r3, #8]
 8001d70:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001d74:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 8001d78:	f8d7 2be8 	ldr.w	r2, [r7, #3048]	; 0xbe8
 8001d7c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
									   HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d ",distance[i]), 100);
 8001d80:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001d84:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 8001d88:	f8d7 2be8 	ldr.w	r2, [r7, #3048]	; 0xbe8
 8001d8c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001d90:	461a      	mov	r2, r3
 8001d92:	49a4      	ldr	r1, [pc, #656]	; (8002024 <main+0xbcc>)
 8001d94:	48a4      	ldr	r0, [pc, #656]	; (8002028 <main+0xbd0>)
 8001d96:	f00e fd8d 	bl	80108b4 <siprintf>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	2364      	movs	r3, #100	; 0x64
 8001da0:	49a1      	ldr	r1, [pc, #644]	; (8002028 <main+0xbd0>)
 8001da2:	48a2      	ldr	r0, [pc, #648]	; (800202c <main+0xbd4>)
 8001da4:	f007 fac2 	bl	800932c <HAL_UART_Transmit>
 8001da8:	e00a      	b.n	8001dc0 <main+0x968>
								   }else{
									   HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "NaN "), 100);
 8001daa:	49a1      	ldr	r1, [pc, #644]	; (8002030 <main+0xbd8>)
 8001dac:	489e      	ldr	r0, [pc, #632]	; (8002028 <main+0xbd0>)
 8001dae:	f00e fd81 	bl	80108b4 <siprintf>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	2364      	movs	r3, #100	; 0x64
 8001db8:	499b      	ldr	r1, [pc, #620]	; (8002028 <main+0xbd0>)
 8001dba:	489c      	ldr	r0, [pc, #624]	; (800202c <main+0xbd4>)
 8001dbc:	f007 fab6 	bl	800932c <HAL_UART_Transmit>
							   for (int i = 0; i < NUM_SENSOR; i++) {
 8001dc0:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f8c7 3be8 	str.w	r3, [r7, #3048]	; 0xbe8
 8001dca:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	f77f af74 	ble.w	8001cbc <main+0x864>
							   }
							   /// End of Reading Vl53l0x data ///


						  /// Read the raw data from HX711 ///
						  rawData = Read_HX711();
 8001dd4:	f7ff fa04 	bl	80011e0 <Read_HX711>
 8001dd8:	f8c7 0bc4 	str.w	r0, [r7, #3012]	; 0xbc4
						  float loadcell_slope = -1/1600.00f; // Convert the raw data to weight (replace the calibration factor with your own)
 8001ddc:	4b95      	ldr	r3, [pc, #596]	; (8002034 <main+0xbdc>)
 8001dde:	f507 623c 	add.w	r2, r7, #3008	; 0xbc0
 8001de2:	6013      	str	r3, [r2, #0]
						  float loadcell_bias = 10002;
 8001de4:	4b94      	ldr	r3, [pc, #592]	; (8002038 <main+0xbe0>)
 8001de6:	f607 32bc 	addw	r2, r7, #3004	; 0xbbc
 8001dea:	6013      	str	r3, [r2, #0]
						  UART_SendWeight_g(rawData,loadcell_slope,loadcell_bias); // Send the weight data over UART
 8001dec:	f8d7 3bc4 	ldr.w	r3, [r7, #3012]	; 0xbc4
 8001df0:	ee07 3a90 	vmov	s15, r3
 8001df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df8:	f607 33bc 	addw	r3, r7, #3004	; 0xbbc
 8001dfc:	ed93 1a00 	vldr	s2, [r3]
 8001e00:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8001e04:	edd3 0a00 	vldr	s1, [r3]
 8001e08:	eeb0 0a67 	vmov.f32	s0, s15
 8001e0c:	f7ff fa36 	bl	800127c <UART_SendWeight_g>
						  /// End of Reading HX711 data ///

						  /// Read the raw data from AMT103 ///
						  float encoderAngle = encoderCount*360.0/4096.0;
 8001e10:	4b8a      	ldr	r3, [pc, #552]	; (800203c <main+0xbe4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fba5 	bl	8000564 <__aeabi_i2d>
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	4b88      	ldr	r3, [pc, #544]	; (8002040 <main+0xbe8>)
 8001e20:	f7fe fc0a 	bl	8000638 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	4b84      	ldr	r3, [pc, #528]	; (8002044 <main+0xbec>)
 8001e32:	f7fe fd2b 	bl	800088c <__aeabi_ddiv>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe fef3 	bl	8000c28 <__aeabi_d2f>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f607 32b8 	addw	r2, r7, #3000	; 0xbb8
 8001e48:	6013      	str	r3, [r2, #0]
						  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, " %.2f ",encoderAngle), 100);
 8001e4a:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	f7fe fb9a 	bl	8000588 <__aeabi_f2d>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	497b      	ldr	r1, [pc, #492]	; (8002048 <main+0xbf0>)
 8001e5a:	4873      	ldr	r0, [pc, #460]	; (8002028 <main+0xbd0>)
 8001e5c:	f00e fd2a 	bl	80108b4 <siprintf>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	2364      	movs	r3, #100	; 0x64
 8001e66:	4970      	ldr	r1, [pc, #448]	; (8002028 <main+0xbd0>)
 8001e68:	4870      	ldr	r0, [pc, #448]	; (800202c <main+0xbd4>)
 8001e6a:	f007 fa5f 	bl	800932c <HAL_UART_Transmit>
						  /// End of Reading AMT103 data ///

						 end_time = HAL_GetTick(); // ?�� ?���? 측정
 8001e6e:	f001 f827 	bl	8002ec0 <HAL_GetTick>
 8001e72:	4603      	mov	r3, r0
 8001e74:	4a75      	ldr	r2, [pc, #468]	; (800204c <main+0xbf4>)
 8001e76:	6013      	str	r3, [r2, #0]
						 time_diff = end_time - start_time; // ?���? 차이 계산
 8001e78:	4b74      	ldr	r3, [pc, #464]	; (800204c <main+0xbf4>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b74      	ldr	r3, [pc, #464]	; (8002050 <main+0xbf8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	4a74      	ldr	r2, [pc, #464]	; (8002054 <main+0xbfc>)
 8001e84:	6013      	str	r3, [r2, #0]

						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "\n"), 100);
 8001e86:	4974      	ldr	r1, [pc, #464]	; (8002058 <main+0xc00>)
 8001e88:	4867      	ldr	r0, [pc, #412]	; (8002028 <main+0xbd0>)
 8001e8a:	f00e fd13 	bl	80108b4 <siprintf>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	2364      	movs	r3, #100	; 0x64
 8001e94:	4964      	ldr	r1, [pc, #400]	; (8002028 <main+0xbd0>)
 8001e96:	4865      	ldr	r0, [pc, #404]	; (800202c <main+0xbd4>)
 8001e98:	f007 fa48 	bl	800932c <HAL_UART_Transmit>

						 }while(time_diff<5000);
 8001e9c:	4b6d      	ldr	r3, [pc, #436]	; (8002054 <main+0xbfc>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f241 3287 	movw	r2, #4999	; 0x1387
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	f67f aed9 	bls.w	8001c5c <main+0x804>


		         receivedFlag = 0;
 8001eaa:	4b6c      	ldr	r3, [pc, #432]	; (800205c <main+0xc04>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]

		     }

		  command = "auto";
 8001eb0:	4b6b      	ldr	r3, [pc, #428]	; (8002060 <main+0xc08>)
 8001eb2:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 8001eb6:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 8001eba:	f7fe f9a9 	bl	8000210 <strlen>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f8d7 1bc8 	ldr.w	r1, [r7, #3016]	; 0xbc8
 8001ec6:	4867      	ldr	r0, [pc, #412]	; (8002064 <main+0xc0c>)
 8001ec8:	f00e fd8d 	bl	80109e6 <strncmp>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f040 81ad 	bne.w	800222e <main+0xdd6>
		     {
	        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "autoMode\r\n"), 100);
 8001ed4:	4964      	ldr	r1, [pc, #400]	; (8002068 <main+0xc10>)
 8001ed6:	4854      	ldr	r0, [pc, #336]	; (8002028 <main+0xbd0>)
 8001ed8:	f00e fcec 	bl	80108b4 <siprintf>
 8001edc:	4603      	mov	r3, r0
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	2364      	movs	r3, #100	; 0x64
 8001ee2:	4951      	ldr	r1, [pc, #324]	; (8002028 <main+0xbd0>)
 8001ee4:	4851      	ldr	r0, [pc, #324]	; (800202c <main+0xbd4>)
 8001ee6:	f007 fa21 	bl	800932c <HAL_UART_Transmit>
//		             stepRev(0); // fix the position
//
//		             stepLin(10); // moving horizontal
//		             stepLin(-10); //

	        	 for( int lin = 0; lin < 80;lin ++){
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 3be0 	str.w	r3, [r7, #3040]	; 0xbe0
 8001ef0:	e195      	b.n	800221e <main+0xdc6>
	        		 stepLin(2); // moving horizontal
 8001ef2:	2002      	movs	r0, #2
 8001ef4:	f000 fb60 	bl	80025b8 <stepLin>
					 for(int rev = 0; rev<1; rev++){
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 8001efe:	e184      	b.n	800220a <main+0xdb2>
						 //stepRev(10); // revolution
						 for(int r = 2;r<11;r++){
 8001f00:	2302      	movs	r3, #2
 8001f02:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
 8001f06:	e176      	b.n	80021f6 <main+0xd9e>

							 servo_angle(&htim2, TIM_CHANNEL_1, r); // poking
 8001f08:	f8d7 2bd8 	ldr.w	r2, [r7, #3032]	; 0xbd8
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4857      	ldr	r0, [pc, #348]	; (800206c <main+0xc14>)
 8001f10:	f000 fbec 	bl	80026ec <servo_angle>
							 HAL_Delay(500);
 8001f14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f18:	f000 ffde 	bl	8002ed8 <HAL_Delay>

							 ///////////////////////////////////////////////////////
							 ////////////////////Logging Start//////////////////////
							 ///////////////////////////////////////////////////////
							 start_time = HAL_GetTick(); // ?��?�� ?���? 측정
 8001f1c:	f000 ffd0 	bl	8002ec0 <HAL_GetTick>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4a4b      	ldr	r2, [pc, #300]	; (8002050 <main+0xbf8>)
 8001f24:	6013      	str	r3, [r2, #0]
							 do{
							  /// Read the VL53l0x data ///
							   for (int i = 0; i < NUM_SENSOR; i++) {
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 3bd4 	str.w	r3, [r7, #3028]	; 0xbd4
 8001f2c:	e0b0      	b.n	8002090 <main+0xc38>
									uint8_t q = i / 8;
 8001f2e:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	; 0xbd4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	da00      	bge.n	8001f38 <main+0xae0>
 8001f36:	3307      	adds	r3, #7
 8001f38:	10db      	asrs	r3, r3, #3
 8001f3a:	f887 3b9f 	strb.w	r3, [r7, #2975]	; 0xb9f
									uint8_t r = i % 8;
 8001f3e:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	; 0xbd4
 8001f42:	425a      	negs	r2, r3
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	f002 0207 	and.w	r2, r2, #7
 8001f4c:	bf58      	it	pl
 8001f4e:	4253      	negpl	r3, r2
 8001f50:	f887 3b9e 	strb.w	r3, [r7, #2974]	; 0xb9e
									for (int j = 0; j < sizeof(tca_addr); j++) {
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 3bd0 	str.w	r3, [r7, #3024]	; 0xbd0
 8001f5a:	e028      	b.n	8001fae <main+0xb56>
										uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 8001f5c:	f897 3b9f 	ldrb.w	r3, [r7, #2975]	; 0xb9f
 8001f60:	f8d7 2bd0 	ldr.w	r2, [r7, #3024]	; 0xbd0
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d105      	bne.n	8001f74 <main+0xb1c>
 8001f68:	f897 3b9e 	ldrb.w	r3, [r7, #2974]	; 0xb9e
 8001f6c:	f107 021c 	add.w	r2, r7, #28
 8001f70:	4413      	add	r3, r2
 8001f72:	e001      	b.n	8001f78 <main+0xb20>
 8001f74:	f107 031b 	add.w	r3, r7, #27
 8001f78:	f8c7 3b98 	str.w	r3, [r7, #2968]	; 0xb98
										HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 8001f7c:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001f80:	f5a3 623e 	sub.w	r2, r3, #3040	; 0xbe0
 8001f84:	f8d7 3bd0 	ldr.w	r3, [r7, #3024]	; 0xbd0
 8001f88:	4413      	add	r3, r2
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	b299      	uxth	r1, r3
 8001f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2301      	movs	r3, #1
 8001f9a:	f8d7 2b98 	ldr.w	r2, [r7, #2968]	; 0xb98
 8001f9e:	481f      	ldr	r0, [pc, #124]	; (800201c <main+0xbc4>)
 8001fa0:	f001 fe94 	bl	8003ccc <HAL_I2C_Master_Transmit>
									for (int j = 0; j < sizeof(tca_addr); j++) {
 8001fa4:	f8d7 3bd0 	ldr.w	r3, [r7, #3024]	; 0xbd0
 8001fa8:	3301      	adds	r3, #1
 8001faa:	f8c7 3bd0 	str.w	r3, [r7, #3024]	; 0xbd0
 8001fae:	f8d7 3bd0 	ldr.w	r3, [r7, #3024]	; 0xbd0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0d2      	beq.n	8001f5c <main+0xb04>
									}
								   Dev = &vl53l0x_s[i];
 8001fb6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fba:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	; 0xbd4
 8001fbe:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
								   VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001fcc:	4914      	ldr	r1, [pc, #80]	; (8002020 <main+0xbc8>)
 8001fce:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 8001fd2:	f00a fa3e 	bl	800c452 <VL53L0X_PerformContinuousRangingMeasurement>
								   if (RangingData.RangeStatus == 0) {
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <main+0xbc8>)
 8001fd8:	7e1b      	ldrb	r3, [r3, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d148      	bne.n	8002070 <main+0xc18>
									   distance[i] = RangingData.RangeMilliMeter;
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <main+0xbc8>)
 8001fe0:	8919      	ldrh	r1, [r3, #8]
 8001fe2:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001fe6:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 8001fea:	f8d7 2bd4 	ldr.w	r2, [r7, #3028]	; 0xbd4
 8001fee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
									   HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d ",distance[i]), 100);
 8001ff2:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001ff6:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 8001ffa:	f8d7 2bd4 	ldr.w	r2, [r7, #3028]	; 0xbd4
 8001ffe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002002:	461a      	mov	r2, r3
 8002004:	4907      	ldr	r1, [pc, #28]	; (8002024 <main+0xbcc>)
 8002006:	4808      	ldr	r0, [pc, #32]	; (8002028 <main+0xbd0>)
 8002008:	f00e fc54 	bl	80108b4 <siprintf>
 800200c:	4603      	mov	r3, r0
 800200e:	b29a      	uxth	r2, r3
 8002010:	2364      	movs	r3, #100	; 0x64
 8002012:	4905      	ldr	r1, [pc, #20]	; (8002028 <main+0xbd0>)
 8002014:	4805      	ldr	r0, [pc, #20]	; (800202c <main+0xbd4>)
 8002016:	f007 f989 	bl	800932c <HAL_UART_Transmit>
 800201a:	e034      	b.n	8002086 <main+0xc2e>
 800201c:	200004b8 	.word	0x200004b8
 8002020:	200005e0 	.word	0x200005e0
 8002024:	08014fc4 	.word	0x08014fc4
 8002028:	200005a0 	.word	0x200005a0
 800202c:	2000069c 	.word	0x2000069c
 8002030:	08014fc8 	.word	0x08014fc8
 8002034:	ba23d70a 	.word	0xba23d70a
 8002038:	461c4800 	.word	0x461c4800
 800203c:	200005fc 	.word	0x200005fc
 8002040:	40768000 	.word	0x40768000
 8002044:	40b00000 	.word	0x40b00000
 8002048:	08014fd0 	.word	0x08014fd0
 800204c:	20000598 	.word	0x20000598
 8002050:	20000594 	.word	0x20000594
 8002054:	20000590 	.word	0x20000590
 8002058:	08014fd8 	.word	0x08014fd8
 800205c:	2000058f 	.word	0x2000058f
 8002060:	08014fdc 	.word	0x08014fdc
 8002064:	2000050c 	.word	0x2000050c
 8002068:	08014fe4 	.word	0x08014fe4
 800206c:	20000604 	.word	0x20000604
								   }else{
									   HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "NaN "), 100);
 8002070:	4977      	ldr	r1, [pc, #476]	; (8002250 <main+0xdf8>)
 8002072:	4878      	ldr	r0, [pc, #480]	; (8002254 <main+0xdfc>)
 8002074:	f00e fc1e 	bl	80108b4 <siprintf>
 8002078:	4603      	mov	r3, r0
 800207a:	b29a      	uxth	r2, r3
 800207c:	2364      	movs	r3, #100	; 0x64
 800207e:	4975      	ldr	r1, [pc, #468]	; (8002254 <main+0xdfc>)
 8002080:	4875      	ldr	r0, [pc, #468]	; (8002258 <main+0xe00>)
 8002082:	f007 f953 	bl	800932c <HAL_UART_Transmit>
							   for (int i = 0; i < NUM_SENSOR; i++) {
 8002086:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	; 0xbd4
 800208a:	3301      	adds	r3, #1
 800208c:	f8c7 3bd4 	str.w	r3, [r7, #3028]	; 0xbd4
 8002090:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	; 0xbd4
 8002094:	2b06      	cmp	r3, #6
 8002096:	f77f af4a 	ble.w	8001f2e <main+0xad6>
							   }
							   /// End of Reading Vl53l0x data ///


						  /// Read the raw data from HX711 ///
						  rawData = Read_HX711();
 800209a:	f7ff f8a1 	bl	80011e0 <Read_HX711>
 800209e:	f8c7 0bc4 	str.w	r0, [r7, #3012]	; 0xbc4
						  float loadcell_slope = -1/1600.00f; // Convert the raw data to weight (replace the calibration factor with your own)
 80020a2:	4b6e      	ldr	r3, [pc, #440]	; (800225c <main+0xe04>)
 80020a4:	f607 32a8 	addw	r2, r7, #2984	; 0xba8
 80020a8:	6013      	str	r3, [r2, #0]
						  float loadcell_bias = 10002;
 80020aa:	4b6d      	ldr	r3, [pc, #436]	; (8002260 <main+0xe08>)
 80020ac:	f607 32a4 	addw	r2, r7, #2980	; 0xba4
 80020b0:	6013      	str	r3, [r2, #0]
						  UART_SendWeight_g(rawData,loadcell_slope,loadcell_bias); // Send the weight data over UART
 80020b2:	f8d7 3bc4 	ldr.w	r3, [r7, #3012]	; 0xbc4
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020be:	f607 33a4 	addw	r3, r7, #2980	; 0xba4
 80020c2:	ed93 1a00 	vldr	s2, [r3]
 80020c6:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 80020ca:	edd3 0a00 	vldr	s1, [r3]
 80020ce:	eeb0 0a67 	vmov.f32	s0, s15
 80020d2:	f7ff f8d3 	bl	800127c <UART_SendWeight_g>
						  /// End of Reading HX711 data ///

						  /// Read the raw data from AMT103 ///
						  float encoderAngle = encoderCount*360.0/4096.0;
 80020d6:	4b63      	ldr	r3, [pc, #396]	; (8002264 <main+0xe0c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fa42 	bl	8000564 <__aeabi_i2d>
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	4b60      	ldr	r3, [pc, #384]	; (8002268 <main+0xe10>)
 80020e6:	f7fe faa7 	bl	8000638 <__aeabi_dmul>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	4b5d      	ldr	r3, [pc, #372]	; (800226c <main+0xe14>)
 80020f8:	f7fe fbc8 	bl	800088c <__aeabi_ddiv>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4610      	mov	r0, r2
 8002102:	4619      	mov	r1, r3
 8002104:	f7fe fd90 	bl	8000c28 <__aeabi_d2f>
 8002108:	4603      	mov	r3, r0
 800210a:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800210e:	6013      	str	r3, [r2, #0]
						  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, " %.2f ",encoderAngle), 100);
 8002110:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	f7fe fa37 	bl	8000588 <__aeabi_f2d>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4954      	ldr	r1, [pc, #336]	; (8002270 <main+0xe18>)
 8002120:	484c      	ldr	r0, [pc, #304]	; (8002254 <main+0xdfc>)
 8002122:	f00e fbc7 	bl	80108b4 <siprintf>
 8002126:	4603      	mov	r3, r0
 8002128:	b29a      	uxth	r2, r3
 800212a:	2364      	movs	r3, #100	; 0x64
 800212c:	4949      	ldr	r1, [pc, #292]	; (8002254 <main+0xdfc>)
 800212e:	484a      	ldr	r0, [pc, #296]	; (8002258 <main+0xe00>)
 8002130:	f007 f8fc 	bl	800932c <HAL_UART_Transmit>
						  /// End of Reading AMT103 data ///

						 end_time = HAL_GetTick(); // ?�� ?���? 측정
 8002134:	f000 fec4 	bl	8002ec0 <HAL_GetTick>
 8002138:	4603      	mov	r3, r0
 800213a:	4a4e      	ldr	r2, [pc, #312]	; (8002274 <main+0xe1c>)
 800213c:	6013      	str	r3, [r2, #0]
						 time_diff = end_time - start_time; // ?���? 차이 계산
 800213e:	4b4d      	ldr	r3, [pc, #308]	; (8002274 <main+0xe1c>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	4b4d      	ldr	r3, [pc, #308]	; (8002278 <main+0xe20>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	4a4c      	ldr	r2, [pc, #304]	; (800227c <main+0xe24>)
 800214a:	6013      	str	r3, [r2, #0]


						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d ",2*lin), 100);
 800214c:	f8d7 3be0 	ldr.w	r3, [r7, #3040]	; 0xbe0
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	461a      	mov	r2, r3
 8002154:	494a      	ldr	r1, [pc, #296]	; (8002280 <main+0xe28>)
 8002156:	483f      	ldr	r0, [pc, #252]	; (8002254 <main+0xdfc>)
 8002158:	f00e fbac 	bl	80108b4 <siprintf>
 800215c:	4603      	mov	r3, r0
 800215e:	b29a      	uxth	r2, r3
 8002160:	2364      	movs	r3, #100	; 0x64
 8002162:	493c      	ldr	r1, [pc, #240]	; (8002254 <main+0xdfc>)
 8002164:	483c      	ldr	r0, [pc, #240]	; (8002258 <main+0xe00>)
 8002166:	f007 f8e1 	bl	800932c <HAL_UART_Transmit>
						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d ",rev), 100);
 800216a:	f8d7 2bdc 	ldr.w	r2, [r7, #3036]	; 0xbdc
 800216e:	4944      	ldr	r1, [pc, #272]	; (8002280 <main+0xe28>)
 8002170:	4838      	ldr	r0, [pc, #224]	; (8002254 <main+0xdfc>)
 8002172:	f00e fb9f 	bl	80108b4 <siprintf>
 8002176:	4603      	mov	r3, r0
 8002178:	b29a      	uxth	r2, r3
 800217a:	2364      	movs	r3, #100	; 0x64
 800217c:	4935      	ldr	r1, [pc, #212]	; (8002254 <main+0xdfc>)
 800217e:	4836      	ldr	r0, [pc, #216]	; (8002258 <main+0xe00>)
 8002180:	f007 f8d4 	bl	800932c <HAL_UART_Transmit>
						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%.2f",r*0.8), 100);
 8002184:	f8d7 0bd8 	ldr.w	r0, [r7, #3032]	; 0xbd8
 8002188:	f7fe f9ec 	bl	8000564 <__aeabi_i2d>
 800218c:	a32e      	add	r3, pc, #184	; (adr r3, 8002248 <main+0xdf0>)
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	f7fe fa51 	bl	8000638 <__aeabi_dmul>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	493a      	ldr	r1, [pc, #232]	; (8002284 <main+0xe2c>)
 800219c:	482d      	ldr	r0, [pc, #180]	; (8002254 <main+0xdfc>)
 800219e:	f00e fb89 	bl	80108b4 <siprintf>
 80021a2:	4603      	mov	r3, r0
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	2364      	movs	r3, #100	; 0x64
 80021a8:	492a      	ldr	r1, [pc, #168]	; (8002254 <main+0xdfc>)
 80021aa:	482b      	ldr	r0, [pc, #172]	; (8002258 <main+0xe00>)
 80021ac:	f007 f8be 	bl	800932c <HAL_UART_Transmit>
						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "\n"), 100);
 80021b0:	4935      	ldr	r1, [pc, #212]	; (8002288 <main+0xe30>)
 80021b2:	4828      	ldr	r0, [pc, #160]	; (8002254 <main+0xdfc>)
 80021b4:	f00e fb7e 	bl	80108b4 <siprintf>
 80021b8:	4603      	mov	r3, r0
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	2364      	movs	r3, #100	; 0x64
 80021be:	4925      	ldr	r1, [pc, #148]	; (8002254 <main+0xdfc>)
 80021c0:	4825      	ldr	r0, [pc, #148]	; (8002258 <main+0xe00>)
 80021c2:	f007 f8b3 	bl	800932c <HAL_UART_Transmit>

						 }while(time_diff<4000);
 80021c6:	4b2d      	ldr	r3, [pc, #180]	; (800227c <main+0xe24>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80021ce:	f4ff aeaa 	bcc.w	8001f26 <main+0xace>
						 ///////////////////////////////////////////////////////
						 ////////////////////Logging End////////////////////////
						 ///////////////////////////////////////////////////////
							 HAL_Delay(500);
 80021d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021d6:	f000 fe7f 	bl	8002ed8 <HAL_Delay>

						 servo_angle(&htim2, TIM_CHANNEL_1, 0); // turn to origin
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	482b      	ldr	r0, [pc, #172]	; (800228c <main+0xe34>)
 80021e0:	f000 fa84 	bl	80026ec <servo_angle>
						 HAL_Delay(500);
 80021e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021e8:	f000 fe76 	bl	8002ed8 <HAL_Delay>
						 for(int r = 2;r<11;r++){
 80021ec:	f8d7 3bd8 	ldr.w	r3, [r7, #3032]	; 0xbd8
 80021f0:	3301      	adds	r3, #1
 80021f2:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
 80021f6:	f8d7 3bd8 	ldr.w	r3, [r7, #3032]	; 0xbd8
 80021fa:	2b0a      	cmp	r3, #10
 80021fc:	f77f ae84 	ble.w	8001f08 <main+0xab0>
					 for(int rev = 0; rev<1; rev++){
 8002200:	f8d7 3bdc 	ldr.w	r3, [r7, #3036]	; 0xbdc
 8002204:	3301      	adds	r3, #1
 8002206:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 800220a:	f8d7 3bdc 	ldr.w	r3, [r7, #3036]	; 0xbdc
 800220e:	2b00      	cmp	r3, #0
 8002210:	f77f ae76 	ble.w	8001f00 <main+0xaa8>
	        	 for( int lin = 0; lin < 80;lin ++){
 8002214:	f8d7 3be0 	ldr.w	r3, [r7, #3040]	; 0xbe0
 8002218:	3301      	adds	r3, #1
 800221a:	f8c7 3be0 	str.w	r3, [r7, #3040]	; 0xbe0
 800221e:	f8d7 3be0 	ldr.w	r3, [r7, #3040]	; 0xbe0
 8002222:	2b4f      	cmp	r3, #79	; 0x4f
 8002224:	f77f ae65 	ble.w	8001ef2 <main+0xa9a>
						 }
					 }
	        	 }


		         receivedFlag = 0;
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <main+0xe38>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
		     }

     	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "Message end\r\n"), 100);
 800222e:	4919      	ldr	r1, [pc, #100]	; (8002294 <main+0xe3c>)
 8002230:	4808      	ldr	r0, [pc, #32]	; (8002254 <main+0xdfc>)
 8002232:	f00e fb3f 	bl	80108b4 <siprintf>
 8002236:	4603      	mov	r3, r0
 8002238:	b29a      	uxth	r2, r3
 800223a:	2364      	movs	r3, #100	; 0x64
 800223c:	4905      	ldr	r1, [pc, #20]	; (8002254 <main+0xdfc>)
 800223e:	4806      	ldr	r0, [pc, #24]	; (8002258 <main+0xe00>)
 8002240:	f007 f874 	bl	800932c <HAL_UART_Transmit>
	  if(startMessage==0){
 8002244:	f7ff ba56 	b.w	80016f4 <main+0x29c>
 8002248:	9999999a 	.word	0x9999999a
 800224c:	3fe99999 	.word	0x3fe99999
 8002250:	08014fc8 	.word	0x08014fc8
 8002254:	200005a0 	.word	0x200005a0
 8002258:	2000069c 	.word	0x2000069c
 800225c:	ba23d70a 	.word	0xba23d70a
 8002260:	461c4800 	.word	0x461c4800
 8002264:	200005fc 	.word	0x200005fc
 8002268:	40768000 	.word	0x40768000
 800226c:	40b00000 	.word	0x40b00000
 8002270:	08014fd0 	.word	0x08014fd0
 8002274:	20000598 	.word	0x20000598
 8002278:	20000594 	.word	0x20000594
 800227c:	20000590 	.word	0x20000590
 8002280:	08014fc4 	.word	0x08014fc4
 8002284:	08014ff0 	.word	0x08014ff0
 8002288:	08014fd8 	.word	0x08014fd8
 800228c:	20000604 	.word	0x20000604
 8002290:	2000058f 	.word	0x2000058f
 8002294:	08014ff8 	.word	0x08014ff8

08002298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b094      	sub	sp, #80	; 0x50
 800229c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800229e:	f107 0320 	add.w	r3, r7, #32
 80022a2:	2230      	movs	r2, #48	; 0x30
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f00d fc7c 	bl	800fba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <SystemClock_Config+0xd4>)
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	4a2a      	ldr	r2, [pc, #168]	; (800236c <SystemClock_Config+0xd4>)
 80022c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c6:	6413      	str	r3, [r2, #64]	; 0x40
 80022c8:	4b28      	ldr	r3, [pc, #160]	; (800236c <SystemClock_Config+0xd4>)
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022d4:	4b26      	ldr	r3, [pc, #152]	; (8002370 <SystemClock_Config+0xd8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a25      	ldr	r2, [pc, #148]	; (8002370 <SystemClock_Config+0xd8>)
 80022da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b23      	ldr	r3, [pc, #140]	; (8002370 <SystemClock_Config+0xd8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022e8:	607b      	str	r3, [r7, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022ec:	2301      	movs	r3, #1
 80022ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022f6:	2302      	movs	r3, #2
 80022f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002300:	2319      	movs	r3, #25
 8002302:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002304:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800230a:	2302      	movs	r3, #2
 800230c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800230e:	2302      	movs	r3, #2
 8002310:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002312:	f107 0320 	add.w	r3, r7, #32
 8002316:	4618      	mov	r0, r3
 8002318:	f003 f826 	bl	8005368 <HAL_RCC_OscConfig>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002322:	f000 f8cf 	bl	80024c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002326:	f002 ffcf 	bl	80052c8 <HAL_PWREx_EnableOverDrive>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002330:	f000 f8c8 	bl	80024c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002334:	230f      	movs	r3, #15
 8002336:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002338:	2302      	movs	r3, #2
 800233a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002340:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002344:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800234a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	2107      	movs	r1, #7
 8002352:	4618      	mov	r0, r3
 8002354:	f003 fb62 	bl	8005a1c <HAL_RCC_ClockConfig>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800235e:	f000 f8b1 	bl	80024c4 <Error_Handler>
  }
}
 8002362:	bf00      	nop
 8002364:	3750      	adds	r7, #80	; 0x50
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	40007000 	.word	0x40007000

08002374 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002378:	2200      	movs	r2, #0
 800237a:	2100      	movs	r1, #0
 800237c:	2025      	movs	r0, #37	; 0x25
 800237e:	f000 febf 	bl	8003100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002382:	2025      	movs	r0, #37	; 0x25
 8002384:	f000 fee8 	bl	8003158 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002388:	2200      	movs	r2, #0
 800238a:	2100      	movs	r1, #0
 800238c:	2020      	movs	r0, #32
 800238e:	f000 feb7 	bl	8003100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002392:	2020      	movs	r0, #32
 8002394:	f000 fee0 	bl	8003158 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2100      	movs	r1, #0
 800239c:	201f      	movs	r0, #31
 800239e:	f000 feaf 	bl	8003100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80023a2:	201f      	movs	r0, #31
 80023a4:	f000 fed8 	bl	8003158 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2100      	movs	r1, #0
 80023ac:	2037      	movs	r0, #55	; 0x37
 80023ae:	f000 fea7 	bl	8003100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80023b2:	2037      	movs	r0, #55	; 0x37
 80023b4:	f000 fed0 	bl	8003158 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2100      	movs	r1, #0
 80023bc:	201c      	movs	r0, #28
 80023be:	f000 fe9f 	bl	8003100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023c2:	201c      	movs	r0, #28
 80023c4:	f000 fec8 	bl	8003158 <HAL_NVIC_EnableIRQ>
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a15      	ldr	r2, [pc, #84]	; (8002430 <HAL_UART_RxCpltCallback+0x64>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d124      	bne.n	8002428 <HAL_UART_RxCpltCallback+0x5c>
  {
    if (rxData != '\n' && rxBufferIndex < RX_BUFFER_SIZE - 1)
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_UART_RxCpltCallback+0x68>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b0a      	cmp	r3, #10
 80023e4:	d00f      	beq.n	8002406 <HAL_UART_RxCpltCallback+0x3a>
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_UART_RxCpltCallback+0x6c>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	2b7e      	cmp	r3, #126	; 0x7e
 80023ec:	d80b      	bhi.n	8002406 <HAL_UART_RxCpltCallback+0x3a>
    {
      rxBuffer[rxBufferIndex++] = rxData;
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_UART_RxCpltCallback+0x6c>)
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	b291      	uxth	r1, r2
 80023f6:	4a10      	ldr	r2, [pc, #64]	; (8002438 <HAL_UART_RxCpltCallback+0x6c>)
 80023f8:	8011      	strh	r1, [r2, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_UART_RxCpltCallback+0x68>)
 80023fe:	7819      	ldrb	r1, [r3, #0]
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <HAL_UART_RxCpltCallback+0x70>)
 8002402:	5499      	strb	r1, [r3, r2]
 8002404:	e00b      	b.n	800241e <HAL_UART_RxCpltCallback+0x52>
    }
    else
    {
      rxBuffer[rxBufferIndex] = '\0';
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <HAL_UART_RxCpltCallback+0x6c>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_UART_RxCpltCallback+0x70>)
 800240e:	2100      	movs	r1, #0
 8002410:	5499      	strb	r1, [r3, r2]
      rxBufferIndex = 0;
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_UART_RxCpltCallback+0x6c>)
 8002414:	2200      	movs	r2, #0
 8002416:	801a      	strh	r2, [r3, #0]
      receivedFlag = 1; // 문자?��?�� ?��?��?��?��?��?�� ?��리는 ?��?��그�?? ?��?��?��?��?��.
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_UART_RxCpltCallback+0x74>)
 800241a:	2201      	movs	r2, #1
 800241c:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800241e:	2201      	movs	r2, #1
 8002420:	4904      	ldr	r1, [pc, #16]	; (8002434 <HAL_UART_RxCpltCallback+0x68>)
 8002422:	4808      	ldr	r0, [pc, #32]	; (8002444 <HAL_UART_RxCpltCallback+0x78>)
 8002424:	f007 f805 	bl	8009432 <HAL_UART_Receive_IT>
  }
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40011000 	.word	0x40011000
 8002434:	2000058e 	.word	0x2000058e
 8002438:	2000058c 	.word	0x2000058c
 800243c:	2000050c 	.word	0x2000050c
 8002440:	2000058f 	.word	0x2000058f
 8002444:	2000069c 	.word	0x2000069c

08002448 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_8) // A?��?�� ???�� ?��?��?��?��
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002458:	d113      	bne.n	8002482 <HAL_GPIO_EXTI_Callback+0x3a>
  {
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) // B?�� 값을 ?��?��
 800245a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800245e:	4816      	ldr	r0, [pc, #88]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x70>)
 8002460:	f001 faae 	bl	80039c0 <HAL_GPIO_ReadPin>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <HAL_GPIO_EXTI_Callback+0x2e>
    {
      encoderCount++;
 800246a:	4b14      	ldr	r3, [pc, #80]	; (80024bc <HAL_GPIO_EXTI_Callback+0x74>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	4a12      	ldr	r2, [pc, #72]	; (80024bc <HAL_GPIO_EXTI_Callback+0x74>)
 8002472:	6013      	str	r3, [r2, #0]
    else
    {
      encoderCount++;
    }
  }
}
 8002474:	e01c      	b.n	80024b0 <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount--;
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_GPIO_EXTI_Callback+0x74>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3b01      	subs	r3, #1
 800247c:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <HAL_GPIO_EXTI_Callback+0x74>)
 800247e:	6013      	str	r3, [r2, #0]
}
 8002480:	e016      	b.n	80024b0 <HAL_GPIO_EXTI_Callback+0x68>
  else if (GPIO_Pin == GPIO_PIN_15) // B?��?�� ???�� ?��?��?��?��
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002488:	d112      	bne.n	80024b0 <HAL_GPIO_EXTI_Callback+0x68>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) // A?�� 값을 ?��?��
 800248a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800248e:	480c      	ldr	r0, [pc, #48]	; (80024c0 <HAL_GPIO_EXTI_Callback+0x78>)
 8002490:	f001 fa96 	bl	80039c0 <HAL_GPIO_ReadPin>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_GPIO_EXTI_Callback+0x5e>
      encoderCount--;
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <HAL_GPIO_EXTI_Callback+0x74>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	3b01      	subs	r3, #1
 80024a0:	4a06      	ldr	r2, [pc, #24]	; (80024bc <HAL_GPIO_EXTI_Callback+0x74>)
 80024a2:	6013      	str	r3, [r2, #0]
}
 80024a4:	e004      	b.n	80024b0 <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount++;
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_GPIO_EXTI_Callback+0x74>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3301      	adds	r3, #1
 80024ac:	4a03      	ldr	r2, [pc, #12]	; (80024bc <HAL_GPIO_EXTI_Callback+0x74>)
 80024ae:	6013      	str	r3, [r2, #0]
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40020400 	.word	0x40020400
 80024bc:	200005fc 	.word	0x200005fc
 80024c0:	40020000 	.word	0x40020000

080024c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c8:	b672      	cpsid	i
}
 80024ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024cc:	e7fe      	b.n	80024cc <Error_Handler+0x8>

080024ce <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <stepRev>:
#include "gpio.h"
#include "tim.h"

#define PULSE 200

void stepRev(int ANG) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 80024ec:	2200      	movs	r2, #0
 80024ee:	2140      	movs	r1, #64	; 0x40
 80024f0:	482e      	ldr	r0, [pc, #184]	; (80025ac <stepRev+0xc8>)
 80024f2:	f001 fa85 	bl	8003a00 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d04d      	beq.n	8002598 <stepRev+0xb4>
    int direction = (ANG > 0) ? 1 : -1;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	dd01      	ble.n	8002506 <stepRev+0x22>
 8002502:	2301      	movs	r3, #1
 8002504:	e001      	b.n	800250a <stepRev+0x26>
 8002506:	f04f 33ff 	mov.w	r3, #4294967295
 800250a:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	fb02 f303 	mul.w	r3, r2, r3
 8002514:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b01      	cmp	r3, #1
 800251a:	bf0c      	ite	eq
 800251c:	2301      	moveq	r3, #1
 800251e:	2300      	movne	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	2180      	movs	r1, #128	; 0x80
 8002526:	4821      	ldr	r0, [pc, #132]	; (80025ac <stepRev+0xc8>)
 8002528:	f001 fa6a 	bl	8003a00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 800252c:	2200      	movs	r2, #0
 800252e:	2140      	movs	r1, #64	; 0x40
 8002530:	481e      	ldr	r0, [pc, #120]	; (80025ac <stepRev+0xc8>)
 8002532:	f001 fa65 	bl	8003a00 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	22c8      	movs	r2, #200	; 0xc8
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe f810 	bl	8000564 <__aeabi_i2d>
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <stepRev+0xcc>)
 800254a:	f7fe f99f 	bl	800088c <__aeabi_ddiv>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4610      	mov	r0, r2
 8002554:	4619      	mov	r1, r3
 8002556:	f7fe fb47 	bl	8000be8 <__aeabi_d2uiz>
 800255a:	4603      	mov	r3, r0
 800255c:	60fb      	str	r3, [r7, #12]
    uint32_t pulse_delay_ms_ = 5; // 6rpm
 800255e:	2305      	movs	r3, #5
 8002560:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < steps; i++) {
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e012      	b.n	800258e <stepRev+0xaa>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 8002568:	2201      	movs	r2, #1
 800256a:	2110      	movs	r1, #16
 800256c:	4811      	ldr	r0, [pc, #68]	; (80025b4 <stepRev+0xd0>)
 800256e:	f001 fa47 	bl	8003a00 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002572:	68b8      	ldr	r0, [r7, #8]
 8002574:	f000 fcb0 	bl	8002ed8 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 8002578:	2200      	movs	r2, #0
 800257a:	2110      	movs	r1, #16
 800257c:	480d      	ldr	r0, [pc, #52]	; (80025b4 <stepRev+0xd0>)
 800257e:	f001 fa3f 	bl	8003a00 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002582:	68b8      	ldr	r0, [r7, #8]
 8002584:	f000 fca8 	bl	8002ed8 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3301      	adds	r3, #1
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	429a      	cmp	r2, r3
 8002594:	d8e8      	bhi.n	8002568 <stepRev+0x84>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 8002596:	e004      	b.n	80025a2 <stepRev+0xbe>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8002598:	2200      	movs	r2, #0
 800259a:	2140      	movs	r1, #64	; 0x40
 800259c:	4803      	ldr	r0, [pc, #12]	; (80025ac <stepRev+0xc8>)
 800259e:	f001 fa2f 	bl	8003a00 <HAL_GPIO_WritePin>
}
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40021800 	.word	0x40021800
 80025b0:	40768000 	.word	0x40768000
 80025b4:	40020400 	.word	0x40020400

080025b8 <stepLin>:

void stepLin(int DIST) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D8 PI2 GPIOI GPIO_PIN_2
	// DIR D7 PI3 GPIOI GPIO_PIN_3

	float ANG = DIST * 360.0 / 8; // 1 rev -> 8 mm
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7fd ffcf 	bl	8000564 <__aeabi_i2d>
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	4b44      	ldr	r3, [pc, #272]	; (80026dc <stepLin+0x124>)
 80025cc:	f7fe f834 	bl	8000638 <__aeabi_dmul>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	4b40      	ldr	r3, [pc, #256]	; (80026e0 <stepLin+0x128>)
 80025de:	f7fe f955 	bl	800088c <__aeabi_ddiv>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	f7fe fb1d 	bl	8000c28 <__aeabi_d2f>
 80025ee:	4603      	mov	r3, r0
 80025f0:	61bb      	str	r3, [r7, #24]


  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 80025f2:	2201      	movs	r2, #1
 80025f4:	2101      	movs	r1, #1
 80025f6:	483b      	ldr	r0, [pc, #236]	; (80026e4 <stepLin+0x12c>)
 80025f8:	f001 fa02 	bl	8003a00 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 80025fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002600:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002608:	d05a      	beq.n	80026c0 <stepLin+0x108>
    int direction = (ANG > 0) ? 1 : -1;
 800260a:	edd7 7a06 	vldr	s15, [r7, #24]
 800260e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002616:	dd01      	ble.n	800261c <stepLin+0x64>
 8002618:	2301      	movs	r3, #1
 800261a:	e001      	b.n	8002620 <stepLin+0x68>
 800261c:	f04f 33ff 	mov.w	r3, #4294967295
 8002620:	617b      	str	r3, [r7, #20]
    ANG *= direction;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	ee07 3a90 	vmov	s15, r3
 8002628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800262c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002634:	edc7 7a06 	vstr	s15, [r7, #24]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2b01      	cmp	r3, #1
 800263c:	bf0c      	ite	eq
 800263e:	2301      	moveq	r3, #1
 8002640:	2300      	movne	r3, #0
 8002642:	b2db      	uxtb	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	2108      	movs	r1, #8
 8002648:	4826      	ldr	r0, [pc, #152]	; (80026e4 <stepLin+0x12c>)
 800264a:	f001 f9d9 	bl	8003a00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 800264e:	2200      	movs	r2, #0
 8002650:	2101      	movs	r1, #1
 8002652:	4824      	ldr	r0, [pc, #144]	; (80026e4 <stepLin+0x12c>)
 8002654:	f001 f9d4 	bl	8003a00 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 8002658:	edd7 7a06 	vldr	s15, [r7, #24]
 800265c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80026e8 <stepLin+0x130>
 8002660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002664:	ee17 0a90 	vmov	r0, s15
 8002668:	f7fd ff8e 	bl	8000588 <__aeabi_f2d>
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <stepLin+0x124>)
 8002672:	f7fe f90b 	bl	800088c <__aeabi_ddiv>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f7fe fab3 	bl	8000be8 <__aeabi_d2uiz>
 8002682:	4603      	mov	r3, r0
 8002684:	613b      	str	r3, [r7, #16]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 8002686:	2301      	movs	r3, #1
 8002688:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	e012      	b.n	80026b6 <stepLin+0xfe>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET); // CLK
 8002690:	2201      	movs	r2, #1
 8002692:	2104      	movs	r1, #4
 8002694:	4813      	ldr	r0, [pc, #76]	; (80026e4 <stepLin+0x12c>)
 8002696:	f001 f9b3 	bl	8003a00 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fc1c 	bl	8002ed8 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET); // CLK
 80026a0:	2200      	movs	r2, #0
 80026a2:	2104      	movs	r1, #4
 80026a4:	480f      	ldr	r0, [pc, #60]	; (80026e4 <stepLin+0x12c>)
 80026a6:	f001 f9ab 	bl	8003a00 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fc14 	bl	8002ed8 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	3301      	adds	r3, #1
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d8e8      	bhi.n	8002690 <stepLin+0xd8>
 80026be:	e004      	b.n	80026ca <stepLin+0x112>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 80026c0:	2200      	movs	r2, #0
 80026c2:	2101      	movs	r1, #1
 80026c4:	4807      	ldr	r0, [pc, #28]	; (80026e4 <stepLin+0x12c>)
 80026c6:	f001 f99b 	bl	8003a00 <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 80026ca:	2201      	movs	r2, #1
 80026cc:	2101      	movs	r1, #1
 80026ce:	4805      	ldr	r0, [pc, #20]	; (80026e4 <stepLin+0x12c>)
 80026d0:	f001 f996 	bl	8003a00 <HAL_GPIO_WritePin>

}
 80026d4:	bf00      	nop
 80026d6:	3720      	adds	r7, #32
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40768000 	.word	0x40768000
 80026e0:	40200000 	.word	0x40200000
 80026e4:	40022000 	.word	0x40022000
 80026e8:	43480000 	.word	0x43480000

080026ec <servo_angle>:

void servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, int step) {
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]

	// 1 step is 0.8 mm
    if (step > 17)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b11      	cmp	r3, #17
 80026fc:	dd01      	ble.n	8002702 <servo_angle+0x16>
    	step = 17; // 최대 각도 제한
 80026fe:	2311      	movs	r3, #17
 8002700:	607b      	str	r3, [r7, #4]

    int pulse_width = 21-step; // 듀티 사이클 계산 (0도에서 180도까지)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f1c3 0315 	rsb	r3, r3, #21
 8002708:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d104      	bne.n	800271a <servo_angle+0x2e>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002718:	e023      	b.n	8002762 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2b04      	cmp	r3, #4
 800271e:	d104      	bne.n	800272a <servo_angle+0x3e>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002728:	e01b      	b.n	8002762 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b08      	cmp	r3, #8
 800272e:	d104      	bne.n	800273a <servo_angle+0x4e>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002738:	e013      	b.n	8002762 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b0c      	cmp	r3, #12
 800273e:	d104      	bne.n	800274a <servo_angle+0x5e>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002748:	e00b      	b.n	8002762 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b10      	cmp	r3, #16
 800274e:	d104      	bne.n	800275a <servo_angle+0x6e>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002758:	e003      	b.n	8002762 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002762:	bf00      	nop
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <HAL_MspInit+0x44>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <HAL_MspInit+0x44>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002780:	6413      	str	r3, [r2, #64]	; 0x40
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <HAL_MspInit+0x44>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_MspInit+0x44>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	4a08      	ldr	r2, [pc, #32]	; (80027b4 <HAL_MspInit+0x44>)
 8002794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002798:	6453      	str	r3, [r2, #68]	; 0x44
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_MspInit+0x44>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800

080027b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <NMI_Handler+0x4>

080027be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c2:	e7fe      	b.n	80027c2 <HardFault_Handler+0x4>

080027c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c8:	e7fe      	b.n	80027c8 <MemManage_Handler+0x4>

080027ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ce:	e7fe      	b.n	80027ce <BusFault_Handler+0x4>

080027d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d4:	e7fe      	b.n	80027d4 <UsageFault_Handler+0x4>

080027d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002804:	f000 fb48 	bl	8002e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002808:	bf00      	nop
 800280a:	bd80      	pop	{r7, pc}

0800280c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002810:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002814:	f001 f920 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}

0800281c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002820:	4802      	ldr	r0, [pc, #8]	; (800282c <TIM2_IRQHandler+0x10>)
 8002822:	f004 ff95 	bl	8007750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000604 	.word	0x20000604

08002830 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002834:	4802      	ldr	r0, [pc, #8]	; (8002840 <I2C1_EV_IRQHandler+0x10>)
 8002836:	f001 fc33 	bl	80040a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200004b8 	.word	0x200004b8

08002844 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <I2C1_ER_IRQHandler+0x10>)
 800284a:	f001 fc43 	bl	80040d4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200004b8 	.word	0x200004b8

08002858 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800285c:	4802      	ldr	r0, [pc, #8]	; (8002868 <USART1_IRQHandler+0x10>)
 800285e:	f006 fe2d 	bl	80094bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	2000069c 	.word	0x2000069c

0800286c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002870:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002874:	f001 f8f0 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}

0800287c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002880:	4802      	ldr	r0, [pc, #8]	; (800288c <TIM7_IRQHandler+0x10>)
 8002882:	f004 ff65 	bl	8007750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000650 	.word	0x20000650

08002890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return 1;
 8002894:	2301      	movs	r3, #1
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <_kill>:

int _kill(int pid, int sig)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028aa:	f00d f943 	bl	800fb34 <__errno>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2216      	movs	r2, #22
 80028b2:	601a      	str	r2, [r3, #0]
  return -1;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <_exit>:

void _exit (int status)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ffe7 	bl	80028a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028d2:	e7fe      	b.n	80028d2 <_exit+0x12>

080028d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	e00a      	b.n	80028fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028e6:	f3af 8000 	nop.w
 80028ea:	4601      	mov	r1, r0
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	60ba      	str	r2, [r7, #8]
 80028f2:	b2ca      	uxtb	r2, r1
 80028f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3301      	adds	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	dbf0      	blt.n	80028e6 <_read+0x12>
  }

  return len;
 8002904:	687b      	ldr	r3, [r7, #4]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e009      	b.n	8002934 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	60ba      	str	r2, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3301      	adds	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	dbf1      	blt.n	8002920 <_write+0x12>
  }
  return len;
 800293c:	687b      	ldr	r3, [r7, #4]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <_close>:

int _close(int file)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800296e:	605a      	str	r2, [r3, #4]
  return 0;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <_isatty>:

int _isatty(int file)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002986:	2301      	movs	r3, #1
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029b8:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <_sbrk+0x5c>)
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <_sbrk+0x60>)
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <_sbrk+0x64>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <_sbrk+0x64>)
 80029ce:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <_sbrk+0x68>)
 80029d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <_sbrk+0x64>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d207      	bcs.n	80029f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029e0:	f00d f8a8 	bl	800fb34 <__errno>
 80029e4:	4603      	mov	r3, r0
 80029e6:	220c      	movs	r2, #12
 80029e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295
 80029ee:	e009      	b.n	8002a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <_sbrk+0x64>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <_sbrk+0x64>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	4a05      	ldr	r2, [pc, #20]	; (8002a14 <_sbrk+0x64>)
 8002a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a02:	68fb      	ldr	r3, [r7, #12]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20050000 	.word	0x20050000
 8002a10:	00000400 	.word	0x00000400
 8002a14:	20000600 	.word	0x20000600
 8002a18:	20000778 	.word	0x20000778

08002a1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <SystemInit+0x20>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a26:	4a05      	ldr	r2, [pc, #20]	; (8002a3c <SystemInit+0x20>)
 8002a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08e      	sub	sp, #56	; 0x38
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a54:	f107 031c 	add.w	r3, r7, #28
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a60:	463b      	mov	r3, r7
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	609a      	str	r2, [r3, #8]
 8002a6a:	60da      	str	r2, [r3, #12]
 8002a6c:	611a      	str	r2, [r3, #16]
 8002a6e:	615a      	str	r2, [r3, #20]
 8002a70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a72:	4b2d      	ldr	r3, [pc, #180]	; (8002b28 <MX_TIM2_Init+0xe8>)
 8002a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <MX_TIM2_Init+0xe8>)
 8002a7c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002a80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a82:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <MX_TIM2_Init+0xe8>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8002a88:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <MX_TIM2_Init+0xe8>)
 8002a8a:	2231      	movs	r2, #49	; 0x31
 8002a8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a8e:	4b26      	ldr	r3, [pc, #152]	; (8002b28 <MX_TIM2_Init+0xe8>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a94:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <MX_TIM2_Init+0xe8>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a9a:	4823      	ldr	r0, [pc, #140]	; (8002b28 <MX_TIM2_Init+0xe8>)
 8002a9c:	f004 fa44 	bl	8006f28 <HAL_TIM_Base_Init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002aa6:	f7ff fd0d 	bl	80024c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	481c      	ldr	r0, [pc, #112]	; (8002b28 <MX_TIM2_Init+0xe8>)
 8002ab8:	f005 f9d2 	bl	8007e60 <HAL_TIM_ConfigClockSource>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002ac2:	f7ff fcff 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ac6:	4818      	ldr	r0, [pc, #96]	; (8002b28 <MX_TIM2_Init+0xe8>)
 8002ac8:	f004 fb4e 	bl	8007168 <HAL_TIM_PWM_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002ad2:	f7ff fcf7 	bl	80024c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ade:	f107 031c 	add.w	r3, r7, #28
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4810      	ldr	r0, [pc, #64]	; (8002b28 <MX_TIM2_Init+0xe8>)
 8002ae6:	f006 f9eb 	bl	8008ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002af0:	f7ff fce8 	bl	80024c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002af4:	2360      	movs	r3, #96	; 0x60
 8002af6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b04:	463b      	mov	r3, r7
 8002b06:	2200      	movs	r2, #0
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4807      	ldr	r0, [pc, #28]	; (8002b28 <MX_TIM2_Init+0xe8>)
 8002b0c:	f004 ff40 	bl	8007990 <HAL_TIM_PWM_ConfigChannel>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002b16:	f7ff fcd5 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b1a:	4803      	ldr	r0, [pc, #12]	; (8002b28 <MX_TIM2_Init+0xe8>)
 8002b1c:	f000 f86e 	bl	8002bfc <HAL_TIM_MspPostInit>

}
 8002b20:	bf00      	nop
 8002b22:	3738      	adds	r7, #56	; 0x38
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000604 	.word	0x20000604

08002b2c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002b3c:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <MX_TIM7_Init+0x64>)
 8002b3e:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <MX_TIM7_Init+0x68>)
 8002b40:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 8002b42:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <MX_TIM7_Init+0x64>)
 8002b44:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002b48:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4a:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <MX_TIM7_Init+0x64>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50-1;
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <MX_TIM7_Init+0x64>)
 8002b52:	2231      	movs	r2, #49	; 0x31
 8002b54:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <MX_TIM7_Init+0x64>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002b5c:	480c      	ldr	r0, [pc, #48]	; (8002b90 <MX_TIM7_Init+0x64>)
 8002b5e:	f004 f9e3 	bl	8006f28 <HAL_TIM_Base_Init>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002b68:	f7ff fcac 	bl	80024c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	4619      	mov	r1, r3
 8002b78:	4805      	ldr	r0, [pc, #20]	; (8002b90 <MX_TIM7_Init+0x64>)
 8002b7a:	f006 f9a1 	bl	8008ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002b84:	f7ff fc9e 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20000650 	.word	0x20000650
 8002b94:	40001400 	.word	0x40001400

08002b98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002baa:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <HAL_TIM_Base_MspInit+0x5c>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a11      	ldr	r2, [pc, #68]	; (8002bf4 <HAL_TIM_Base_MspInit+0x5c>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <HAL_TIM_Base_MspInit+0x5c>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002bc2:	e010      	b.n	8002be6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a0b      	ldr	r2, [pc, #44]	; (8002bf8 <HAL_TIM_Base_MspInit+0x60>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d10b      	bne.n	8002be6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002bce:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <HAL_TIM_Base_MspInit+0x5c>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	4a08      	ldr	r2, [pc, #32]	; (8002bf4 <HAL_TIM_Base_MspInit+0x5c>)
 8002bd4:	f043 0320 	orr.w	r3, r3, #32
 8002bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_TIM_Base_MspInit+0x5c>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40001400 	.word	0x40001400

08002bfc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 030c 	add.w	r3, r7, #12
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1c:	d11c      	bne.n	8002c58 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_TIM_MspPostInit+0x64>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a0f      	ldr	r2, [pc, #60]	; (8002c60 <HAL_TIM_MspPostInit+0x64>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <HAL_TIM_MspPostInit+0x64>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4c:	f107 030c 	add.w	r3, r7, #12
 8002c50:	4619      	mov	r1, r3
 8002c52:	4804      	ldr	r0, [pc, #16]	; (8002c64 <HAL_TIM_MspPostInit+0x68>)
 8002c54:	f000 fb44 	bl	80032e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c58:	bf00      	nop
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40020000 	.word	0x40020000

08002c68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c6c:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <MX_USART1_UART_Init+0x58>)
 8002c6e:	4a15      	ldr	r2, [pc, #84]	; (8002cc4 <MX_USART1_UART_Init+0x5c>)
 8002c70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <MX_USART1_UART_Init+0x58>)
 8002c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c7a:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <MX_USART1_UART_Init+0x58>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <MX_USART1_UART_Init+0x58>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <MX_USART1_UART_Init+0x58>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <MX_USART1_UART_Init+0x58>)
 8002c8e:	220c      	movs	r2, #12
 8002c90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <MX_USART1_UART_Init+0x58>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <MX_USART1_UART_Init+0x58>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c9e:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <MX_USART1_UART_Init+0x58>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ca4:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <MX_USART1_UART_Init+0x58>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002caa:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <MX_USART1_UART_Init+0x58>)
 8002cac:	f006 fa7e 	bl	80091ac <HAL_UART_Init>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002cb6:	f7ff fc05 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2000069c 	.word	0x2000069c
 8002cc4:	40011000 	.word	0x40011000

08002cc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b0ac      	sub	sp, #176	; 0xb0
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ce0:	f107 0318 	add.w	r3, r7, #24
 8002ce4:	2284      	movs	r2, #132	; 0x84
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f00c ff5b 	bl	800fba4 <memset>
  if(uartHandle->Instance==USART1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a32      	ldr	r2, [pc, #200]	; (8002dbc <HAL_UART_MspInit+0xf4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d15c      	bne.n	8002db2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002cf8:	2340      	movs	r3, #64	; 0x40
 8002cfa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d00:	f107 0318 	add.w	r3, r7, #24
 8002d04:	4618      	mov	r0, r3
 8002d06:	f003 f92b 	bl	8005f60 <HAL_RCCEx_PeriphCLKConfig>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d10:	f7ff fbd8 	bl	80024c4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d14:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d18:	4a29      	ldr	r2, [pc, #164]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d1a:	f043 0310 	orr.w	r3, r3, #16
 8002d1e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d20:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2c:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	4a23      	ldr	r2, [pc, #140]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d32:	f043 0302 	orr.w	r3, r3, #2
 8002d36:	6313      	str	r3, [r2, #48]	; 0x30
 8002d38:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d44:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d50:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <HAL_UART_MspInit+0xf8>)
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	2302      	movs	r3, #2
 8002d64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d74:	2307      	movs	r3, #7
 8002d76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4810      	ldr	r0, [pc, #64]	; (8002dc4 <HAL_UART_MspInit+0xfc>)
 8002d82:	f000 faad 	bl	80032e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002da0:	2307      	movs	r3, #7
 8002da2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002daa:	4619      	mov	r1, r3
 8002dac:	4806      	ldr	r0, [pc, #24]	; (8002dc8 <HAL_UART_MspInit+0x100>)
 8002dae:	f000 fa97 	bl	80032e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002db2:	bf00      	nop
 8002db4:	37b0      	adds	r7, #176	; 0xb0
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40011000 	.word	0x40011000
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40020400 	.word	0x40020400
 8002dc8:	40020000 	.word	0x40020000

08002dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dd0:	480d      	ldr	r0, [pc, #52]	; (8002e08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dd2:	490e      	ldr	r1, [pc, #56]	; (8002e0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002dd4:	4a0e      	ldr	r2, [pc, #56]	; (8002e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dd8:	e002      	b.n	8002de0 <LoopCopyDataInit>

08002dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dde:	3304      	adds	r3, #4

08002de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002de4:	d3f9      	bcc.n	8002dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002de6:	4a0b      	ldr	r2, [pc, #44]	; (8002e14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002de8:	4c0b      	ldr	r4, [pc, #44]	; (8002e18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dec:	e001      	b.n	8002df2 <LoopFillZerobss>

08002dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002df0:	3204      	adds	r2, #4

08002df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002df4:	d3fb      	bcc.n	8002dee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002df6:	f7ff fe11 	bl	8002a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dfa:	f00c fea1 	bl	800fb40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dfe:	f7fe fb2b 	bl	8001458 <main>
  bx  lr    
 8002e02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e04:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e0c:	2000049c 	.word	0x2000049c
  ldr r2, =_sidata
 8002e10:	0801570c 	.word	0x0801570c
  ldr r2, =_sbss
 8002e14:	2000049c 	.word	0x2000049c
  ldr r4, =_ebss
 8002e18:	20000778 	.word	0x20000778

08002e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e1c:	e7fe      	b.n	8002e1c <ADC_IRQHandler>

08002e1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e22:	2003      	movs	r0, #3
 8002e24:	f000 f94c 	bl	80030c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e28:	200f      	movs	r0, #15
 8002e2a:	f000 f805 	bl	8002e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e2e:	f7ff fc9f 	bl	8002770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e40:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <HAL_InitTick+0x54>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_InitTick+0x58>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 f996 	bl	8003188 <HAL_SYSTICK_Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e00e      	b.n	8002e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b0f      	cmp	r3, #15
 8002e6a:	d80a      	bhi.n	8002e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	f04f 30ff 	mov.w	r0, #4294967295
 8002e74:	f000 f944 	bl	8003100 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e78:	4a06      	ldr	r2, [pc, #24]	; (8002e94 <HAL_InitTick+0x5c>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e000      	b.n	8002e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	20000008 	.word	0x20000008
 8002e94:	20000004 	.word	0x20000004

08002e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_IncTick+0x20>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_IncTick+0x24>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	4a04      	ldr	r2, [pc, #16]	; (8002ebc <HAL_IncTick+0x24>)
 8002eaa:	6013      	str	r3, [r2, #0]
}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	20000008 	.word	0x20000008
 8002ebc:	20000724 	.word	0x20000724

08002ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <HAL_GetTick+0x14>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000724 	.word	0x20000724

08002ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ee0:	f7ff ffee 	bl	8002ec0 <HAL_GetTick>
 8002ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d005      	beq.n	8002efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <HAL_Delay+0x44>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4413      	add	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002efe:	bf00      	nop
 8002f00:	f7ff ffde 	bl	8002ec0 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d8f7      	bhi.n	8002f00 <HAL_Delay+0x28>
  {
  }
}
 8002f10:	bf00      	nop
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000008 	.word	0x20000008

08002f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <__NVIC_SetPriorityGrouping+0x40>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4e:	4a04      	ldr	r2, [pc, #16]	; (8002f60 <__NVIC_SetPriorityGrouping+0x40>)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	60d3      	str	r3, [r2, #12]
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	e000ed00 	.word	0xe000ed00
 8002f64:	05fa0000 	.word	0x05fa0000

08002f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <__NVIC_GetPriorityGrouping+0x18>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	f003 0307 	and.w	r3, r3, #7
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	db0b      	blt.n	8002fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	4907      	ldr	r1, [pc, #28]	; (8002fbc <__NVIC_EnableIRQ+0x38>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8002faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	e000e100 	.word	0xe000e100

08002fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	6039      	str	r1, [r7, #0]
 8002fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	db0a      	blt.n	8002fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	490c      	ldr	r1, [pc, #48]	; (800300c <__NVIC_SetPriority+0x4c>)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	0112      	lsls	r2, r2, #4
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe8:	e00a      	b.n	8003000 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4908      	ldr	r1, [pc, #32]	; (8003010 <__NVIC_SetPriority+0x50>)
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	3b04      	subs	r3, #4
 8002ff8:	0112      	lsls	r2, r2, #4
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	761a      	strb	r2, [r3, #24]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000e100 	.word	0xe000e100
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	; 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f1c3 0307 	rsb	r3, r3, #7
 800302e:	2b04      	cmp	r3, #4
 8003030:	bf28      	it	cs
 8003032:	2304      	movcs	r3, #4
 8003034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3304      	adds	r3, #4
 800303a:	2b06      	cmp	r3, #6
 800303c:	d902      	bls.n	8003044 <NVIC_EncodePriority+0x30>
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3b03      	subs	r3, #3
 8003042:	e000      	b.n	8003046 <NVIC_EncodePriority+0x32>
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003048:	f04f 32ff 	mov.w	r2, #4294967295
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	401a      	ands	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800305c:	f04f 31ff 	mov.w	r1, #4294967295
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	43d9      	mvns	r1, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800306c:	4313      	orrs	r3, r2
         );
}
 800306e:	4618      	mov	r0, r3
 8003070:	3724      	adds	r7, #36	; 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3b01      	subs	r3, #1
 8003088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800308c:	d301      	bcc.n	8003092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800308e:	2301      	movs	r3, #1
 8003090:	e00f      	b.n	80030b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003092:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <SysTick_Config+0x40>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3b01      	subs	r3, #1
 8003098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800309a:	210f      	movs	r1, #15
 800309c:	f04f 30ff 	mov.w	r0, #4294967295
 80030a0:	f7ff ff8e 	bl	8002fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <SysTick_Config+0x40>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030aa:	4b04      	ldr	r3, [pc, #16]	; (80030bc <SysTick_Config+0x40>)
 80030ac:	2207      	movs	r2, #7
 80030ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	e000e010 	.word	0xe000e010

080030c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b07      	cmp	r3, #7
 80030cc:	d00f      	beq.n	80030ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b06      	cmp	r3, #6
 80030d2:	d00c      	beq.n	80030ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b05      	cmp	r3, #5
 80030d8:	d009      	beq.n	80030ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d006      	beq.n	80030ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d003      	beq.n	80030ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80030e6:	2191      	movs	r1, #145	; 0x91
 80030e8:	4804      	ldr	r0, [pc, #16]	; (80030fc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80030ea:	f7ff f9f0 	bl	80024ce <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff ff16 	bl	8002f20 <__NVIC_SetPriorityGrouping>
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	08015010 	.word	0x08015010

08003100 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b0f      	cmp	r3, #15
 8003116:	d903      	bls.n	8003120 <HAL_NVIC_SetPriority+0x20>
 8003118:	21a9      	movs	r1, #169	; 0xa9
 800311a:	480e      	ldr	r0, [pc, #56]	; (8003154 <HAL_NVIC_SetPriority+0x54>)
 800311c:	f7ff f9d7 	bl	80024ce <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	d903      	bls.n	800312e <HAL_NVIC_SetPriority+0x2e>
 8003126:	21aa      	movs	r1, #170	; 0xaa
 8003128:	480a      	ldr	r0, [pc, #40]	; (8003154 <HAL_NVIC_SetPriority+0x54>)
 800312a:	f7ff f9d0 	bl	80024ce <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800312e:	f7ff ff1b 	bl	8002f68 <__NVIC_GetPriorityGrouping>
 8003132:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	6978      	ldr	r0, [r7, #20]
 800313a:	f7ff ff6b 	bl	8003014 <NVIC_EncodePriority>
 800313e:	4602      	mov	r2, r0
 8003140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003144:	4611      	mov	r1, r2
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff ff3a 	bl	8002fc0 <__NVIC_SetPriority>
}
 800314c:	bf00      	nop
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	08015010 	.word	0x08015010

08003158 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	2b00      	cmp	r3, #0
 8003168:	da03      	bge.n	8003172 <HAL_NVIC_EnableIRQ+0x1a>
 800316a:	21bd      	movs	r1, #189	; 0xbd
 800316c:	4805      	ldr	r0, [pc, #20]	; (8003184 <HAL_NVIC_EnableIRQ+0x2c>)
 800316e:	f7ff f9ae 	bl	80024ce <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff ff04 	bl	8002f84 <__NVIC_EnableIRQ>
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	08015010 	.word	0x08015010

08003188 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff73 	bl	800307c <SysTick_Config>
 8003196:	4603      	mov	r3, r0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031ae:	f7ff fe87 	bl	8002ec0 <HAL_GetTick>
 80031b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d008      	beq.n	80031d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2280      	movs	r2, #128	; 0x80
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e052      	b.n	8003278 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0216 	bic.w	r2, r2, #22
 80031e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695a      	ldr	r2, [r3, #20]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d103      	bne.n	8003202 <HAL_DMA_Abort+0x62>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0208 	bic.w	r2, r2, #8
 8003210:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003222:	e013      	b.n	800324c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003224:	f7ff fe4c 	bl	8002ec0 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b05      	cmp	r3, #5
 8003230:	d90c      	bls.n	800324c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2203      	movs	r2, #3
 800323c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e015      	b.n	8003278 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1e4      	bne.n	8003224 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325e:	223f      	movs	r2, #63	; 0x3f
 8003260:	409a      	lsls	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d004      	beq.n	800329e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2280      	movs	r2, #128	; 0x80
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e00c      	b.n	80032b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2205      	movs	r2, #5
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032d2:	b2db      	uxtb	r3, r3
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a3a      	ldr	r2, [pc, #232]	; (80033e8 <HAL_GPIO_Init+0x108>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d02b      	beq.n	800335a <HAL_GPIO_Init+0x7a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a39      	ldr	r2, [pc, #228]	; (80033ec <HAL_GPIO_Init+0x10c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d027      	beq.n	800335a <HAL_GPIO_Init+0x7a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a38      	ldr	r2, [pc, #224]	; (80033f0 <HAL_GPIO_Init+0x110>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d023      	beq.n	800335a <HAL_GPIO_Init+0x7a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a37      	ldr	r2, [pc, #220]	; (80033f4 <HAL_GPIO_Init+0x114>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01f      	beq.n	800335a <HAL_GPIO_Init+0x7a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a36      	ldr	r2, [pc, #216]	; (80033f8 <HAL_GPIO_Init+0x118>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01b      	beq.n	800335a <HAL_GPIO_Init+0x7a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a35      	ldr	r2, [pc, #212]	; (80033fc <HAL_GPIO_Init+0x11c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d017      	beq.n	800335a <HAL_GPIO_Init+0x7a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a34      	ldr	r2, [pc, #208]	; (8003400 <HAL_GPIO_Init+0x120>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_GPIO_Init+0x7a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a33      	ldr	r2, [pc, #204]	; (8003404 <HAL_GPIO_Init+0x124>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00f      	beq.n	800335a <HAL_GPIO_Init+0x7a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a32      	ldr	r2, [pc, #200]	; (8003408 <HAL_GPIO_Init+0x128>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00b      	beq.n	800335a <HAL_GPIO_Init+0x7a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a31      	ldr	r2, [pc, #196]	; (800340c <HAL_GPIO_Init+0x12c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d007      	beq.n	800335a <HAL_GPIO_Init+0x7a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a30      	ldr	r2, [pc, #192]	; (8003410 <HAL_GPIO_Init+0x130>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d003      	beq.n	800335a <HAL_GPIO_Init+0x7a>
 8003352:	21aa      	movs	r1, #170	; 0xaa
 8003354:	482f      	ldr	r0, [pc, #188]	; (8003414 <HAL_GPIO_Init+0x134>)
 8003356:	f7ff f8ba 	bl	80024ce <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d103      	bne.n	800336c <HAL_GPIO_Init+0x8c>
 8003364:	21ab      	movs	r1, #171	; 0xab
 8003366:	482b      	ldr	r0, [pc, #172]	; (8003414 <HAL_GPIO_Init+0x134>)
 8003368:	f7ff f8b1 	bl	80024ce <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d035      	beq.n	80033e0 <HAL_GPIO_Init+0x100>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d031      	beq.n	80033e0 <HAL_GPIO_Init+0x100>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b11      	cmp	r3, #17
 8003382:	d02d      	beq.n	80033e0 <HAL_GPIO_Init+0x100>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d029      	beq.n	80033e0 <HAL_GPIO_Init+0x100>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b12      	cmp	r3, #18
 8003392:	d025      	beq.n	80033e0 <HAL_GPIO_Init+0x100>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800339c:	d020      	beq.n	80033e0 <HAL_GPIO_Init+0x100>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80033a6:	d01b      	beq.n	80033e0 <HAL_GPIO_Init+0x100>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80033b0:	d016      	beq.n	80033e0 <HAL_GPIO_Init+0x100>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80033ba:	d011      	beq.n	80033e0 <HAL_GPIO_Init+0x100>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80033c4:	d00c      	beq.n	80033e0 <HAL_GPIO_Init+0x100>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80033ce:	d007      	beq.n	80033e0 <HAL_GPIO_Init+0x100>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x100>
 80033d8:	21ac      	movs	r1, #172	; 0xac
 80033da:	480e      	ldr	r0, [pc, #56]	; (8003414 <HAL_GPIO_Init+0x134>)
 80033dc:	f7ff f877 	bl	80024ce <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80033e0:	2300      	movs	r3, #0
 80033e2:	61fb      	str	r3, [r7, #28]
 80033e4:	e2c7      	b.n	8003976 <HAL_GPIO_Init+0x696>
 80033e6:	bf00      	nop
 80033e8:	40020000 	.word	0x40020000
 80033ec:	40020400 	.word	0x40020400
 80033f0:	40020800 	.word	0x40020800
 80033f4:	40020c00 	.word	0x40020c00
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40021400 	.word	0x40021400
 8003400:	40021800 	.word	0x40021800
 8003404:	40021c00 	.word	0x40021c00
 8003408:	40022000 	.word	0x40022000
 800340c:	40022400 	.word	0x40022400
 8003410:	40022800 	.word	0x40022800
 8003414:	0801504c 	.word	0x0801504c
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003418:	2201      	movs	r2, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4013      	ands	r3, r2
 800342a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	429a      	cmp	r2, r3
 8003432:	f040 829d 	bne.w	8003970 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b01      	cmp	r3, #1
 8003440:	d005      	beq.n	800344e <HAL_GPIO_Init+0x16e>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d144      	bne.n	80034d8 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00f      	beq.n	8003476 <HAL_GPIO_Init+0x196>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d00b      	beq.n	8003476 <HAL_GPIO_Init+0x196>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d007      	beq.n	8003476 <HAL_GPIO_Init+0x196>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	2b03      	cmp	r3, #3
 800346c:	d003      	beq.n	8003476 <HAL_GPIO_Init+0x196>
 800346e:	21bd      	movs	r1, #189	; 0xbd
 8003470:	4831      	ldr	r0, [pc, #196]	; (8003538 <HAL_GPIO_Init+0x258>)
 8003472:	f7ff f82c 	bl	80024ce <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	2203      	movs	r2, #3
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034ac:	2201      	movs	r2, #1
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 0201 	and.w	r2, r3, #1
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d02b      	beq.n	800353c <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00b      	beq.n	8003504 <HAL_GPIO_Init+0x224>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d007      	beq.n	8003504 <HAL_GPIO_Init+0x224>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d003      	beq.n	8003504 <HAL_GPIO_Init+0x224>
 80034fc:	21ce      	movs	r1, #206	; 0xce
 80034fe:	480e      	ldr	r0, [pc, #56]	; (8003538 <HAL_GPIO_Init+0x258>)
 8003500:	f7fe ffe5 	bl	80024ce <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	2203      	movs	r2, #3
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	60da      	str	r2, [r3, #12]
 8003534:	e002      	b.n	800353c <HAL_GPIO_Init+0x25c>
 8003536:	bf00      	nop
 8003538:	0801504c 	.word	0x0801504c
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	2b02      	cmp	r3, #2
 8003546:	f040 8134 	bne.w	80037b2 <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 810b 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	2b01      	cmp	r3, #1
 800355a:	f000 8106 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 8101 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80fc 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 80f7 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	2b01      	cmp	r3, #1
 8003582:	f000 80f2 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b02      	cmp	r3, #2
 800358c:	f000 80ed 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2b02      	cmp	r3, #2
 8003596:	f000 80e8 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	f000 80e3 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	f000 80de 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	f000 80d9 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	2b03      	cmp	r3, #3
 80035be:	f000 80d4 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	f000 80cf 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	f000 80ca 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	2b03      	cmp	r3, #3
 80035dc:	f000 80c5 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	f000 80c0 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	f000 80bb 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	f000 80b6 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b04      	cmp	r3, #4
 8003604:	f000 80b1 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	2b04      	cmp	r3, #4
 800360e:	f000 80ac 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b05      	cmp	r3, #5
 8003618:	f000 80a7 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b05      	cmp	r3, #5
 8003622:	f000 80a2 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b05      	cmp	r3, #5
 800362c:	f000 809d 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	2b05      	cmp	r3, #5
 8003636:	f000 8098 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b05      	cmp	r3, #5
 8003640:	f000 8093 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b05      	cmp	r3, #5
 800364a:	f000 808e 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b06      	cmp	r3, #6
 8003654:	f000 8089 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2b06      	cmp	r3, #6
 800365e:	f000 8084 	beq.w	800376a <HAL_GPIO_Init+0x48a>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b07      	cmp	r3, #7
 8003668:	d07f      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	2b07      	cmp	r3, #7
 8003670:	d07b      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b07      	cmp	r3, #7
 8003678:	d077      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b07      	cmp	r3, #7
 8003680:	d073      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	2b07      	cmp	r3, #7
 8003688:	d06f      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b07      	cmp	r3, #7
 8003690:	d06b      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b07      	cmp	r3, #7
 8003698:	d067      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d063      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d05f      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d05b      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d057      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d053      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d04f      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d04b      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b09      	cmp	r3, #9
 80036d8:	d047      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b09      	cmp	r3, #9
 80036e0:	d043      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b09      	cmp	r3, #9
 80036e8:	d03f      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b09      	cmp	r3, #9
 80036f0:	d03b      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b09      	cmp	r3, #9
 80036f8:	d037      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b09      	cmp	r3, #9
 8003700:	d033      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b09      	cmp	r3, #9
 8003708:	d02f      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b0a      	cmp	r3, #10
 8003710:	d02b      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b0a      	cmp	r3, #10
 8003718:	d027      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b0a      	cmp	r3, #10
 8003720:	d023      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b0a      	cmp	r3, #10
 8003728:	d01f      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	2b0b      	cmp	r3, #11
 8003730:	d01b      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b0c      	cmp	r3, #12
 8003738:	d017      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b0c      	cmp	r3, #12
 8003740:	d013      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b0c      	cmp	r3, #12
 8003748:	d00f      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b0f      	cmp	r3, #15
 8003750:	d00b      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b0d      	cmp	r3, #13
 8003758:	d007      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b0e      	cmp	r3, #14
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x48a>
 8003762:	21db      	movs	r1, #219	; 0xdb
 8003764:	4888      	ldr	r0, [pc, #544]	; (8003988 <HAL_GPIO_Init+0x6a8>)
 8003766:	f7fe feb2 	bl	80024ce <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	08da      	lsrs	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3208      	adds	r2, #8
 8003772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	220f      	movs	r2, #15
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43db      	mvns	r3, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4013      	ands	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	08da      	lsrs	r2, r3, #3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3208      	adds	r2, #8
 80037ac:	69b9      	ldr	r1, [r7, #24]
 80037ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	2203      	movs	r2, #3
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4013      	ands	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 0203 	and.w	r2, r3, #3
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 80be 	beq.w	8003970 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f4:	4b65      	ldr	r3, [pc, #404]	; (800398c <HAL_GPIO_Init+0x6ac>)
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	4a64      	ldr	r2, [pc, #400]	; (800398c <HAL_GPIO_Init+0x6ac>)
 80037fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003800:	4b62      	ldr	r3, [pc, #392]	; (800398c <HAL_GPIO_Init+0x6ac>)
 8003802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800380c:	4a60      	ldr	r2, [pc, #384]	; (8003990 <HAL_GPIO_Init+0x6b0>)
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	089b      	lsrs	r3, r3, #2
 8003812:	3302      	adds	r3, #2
 8003814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003818:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	220f      	movs	r2, #15
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a58      	ldr	r2, [pc, #352]	; (8003994 <HAL_GPIO_Init+0x6b4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d037      	beq.n	80038a8 <HAL_GPIO_Init+0x5c8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a57      	ldr	r2, [pc, #348]	; (8003998 <HAL_GPIO_Init+0x6b8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d031      	beq.n	80038a4 <HAL_GPIO_Init+0x5c4>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a56      	ldr	r2, [pc, #344]	; (800399c <HAL_GPIO_Init+0x6bc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d02b      	beq.n	80038a0 <HAL_GPIO_Init+0x5c0>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a55      	ldr	r2, [pc, #340]	; (80039a0 <HAL_GPIO_Init+0x6c0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d025      	beq.n	800389c <HAL_GPIO_Init+0x5bc>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a54      	ldr	r2, [pc, #336]	; (80039a4 <HAL_GPIO_Init+0x6c4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d01f      	beq.n	8003898 <HAL_GPIO_Init+0x5b8>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a53      	ldr	r2, [pc, #332]	; (80039a8 <HAL_GPIO_Init+0x6c8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d019      	beq.n	8003894 <HAL_GPIO_Init+0x5b4>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a52      	ldr	r2, [pc, #328]	; (80039ac <HAL_GPIO_Init+0x6cc>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d013      	beq.n	8003890 <HAL_GPIO_Init+0x5b0>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a51      	ldr	r2, [pc, #324]	; (80039b0 <HAL_GPIO_Init+0x6d0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00d      	beq.n	800388c <HAL_GPIO_Init+0x5ac>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a50      	ldr	r2, [pc, #320]	; (80039b4 <HAL_GPIO_Init+0x6d4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d007      	beq.n	8003888 <HAL_GPIO_Init+0x5a8>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a4f      	ldr	r2, [pc, #316]	; (80039b8 <HAL_GPIO_Init+0x6d8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d101      	bne.n	8003884 <HAL_GPIO_Init+0x5a4>
 8003880:	2309      	movs	r3, #9
 8003882:	e012      	b.n	80038aa <HAL_GPIO_Init+0x5ca>
 8003884:	230a      	movs	r3, #10
 8003886:	e010      	b.n	80038aa <HAL_GPIO_Init+0x5ca>
 8003888:	2308      	movs	r3, #8
 800388a:	e00e      	b.n	80038aa <HAL_GPIO_Init+0x5ca>
 800388c:	2307      	movs	r3, #7
 800388e:	e00c      	b.n	80038aa <HAL_GPIO_Init+0x5ca>
 8003890:	2306      	movs	r3, #6
 8003892:	e00a      	b.n	80038aa <HAL_GPIO_Init+0x5ca>
 8003894:	2305      	movs	r3, #5
 8003896:	e008      	b.n	80038aa <HAL_GPIO_Init+0x5ca>
 8003898:	2304      	movs	r3, #4
 800389a:	e006      	b.n	80038aa <HAL_GPIO_Init+0x5ca>
 800389c:	2303      	movs	r3, #3
 800389e:	e004      	b.n	80038aa <HAL_GPIO_Init+0x5ca>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e002      	b.n	80038aa <HAL_GPIO_Init+0x5ca>
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <HAL_GPIO_Init+0x5ca>
 80038a8:	2300      	movs	r3, #0
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	f002 0203 	and.w	r2, r2, #3
 80038b0:	0092      	lsls	r2, r2, #2
 80038b2:	4093      	lsls	r3, r2
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80038ba:	4935      	ldr	r1, [pc, #212]	; (8003990 <HAL_GPIO_Init+0x6b0>)
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	089b      	lsrs	r3, r3, #2
 80038c0:	3302      	adds	r3, #2
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038c8:	4b3c      	ldr	r3, [pc, #240]	; (80039bc <HAL_GPIO_Init+0x6dc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ec:	4a33      	ldr	r2, [pc, #204]	; (80039bc <HAL_GPIO_Init+0x6dc>)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038f2:	4b32      	ldr	r3, [pc, #200]	; (80039bc <HAL_GPIO_Init+0x6dc>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003916:	4a29      	ldr	r2, [pc, #164]	; (80039bc <HAL_GPIO_Init+0x6dc>)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800391c:	4b27      	ldr	r3, [pc, #156]	; (80039bc <HAL_GPIO_Init+0x6dc>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003940:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <HAL_GPIO_Init+0x6dc>)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003946:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <HAL_GPIO_Init+0x6dc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	43db      	mvns	r3, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4013      	ands	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800396a:	4a14      	ldr	r2, [pc, #80]	; (80039bc <HAL_GPIO_Init+0x6dc>)
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	3301      	adds	r3, #1
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	2b0f      	cmp	r3, #15
 800397a:	f67f ad4d 	bls.w	8003418 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	0801504c 	.word	0x0801504c
 800398c:	40023800 	.word	0x40023800
 8003990:	40013800 	.word	0x40013800
 8003994:	40020000 	.word	0x40020000
 8003998:	40020400 	.word	0x40020400
 800399c:	40020800 	.word	0x40020800
 80039a0:	40020c00 	.word	0x40020c00
 80039a4:	40021000 	.word	0x40021000
 80039a8:	40021400 	.word	0x40021400
 80039ac:	40021800 	.word	0x40021800
 80039b0:	40021c00 	.word	0x40021c00
 80039b4:	40022000 	.word	0x40022000
 80039b8:	40022400 	.word	0x40022400
 80039bc:	40013c00 	.word	0x40013c00

080039c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80039cc:	887b      	ldrh	r3, [r7, #2]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d104      	bne.n	80039dc <HAL_GPIO_ReadPin+0x1c>
 80039d2:	f240 1177 	movw	r1, #375	; 0x177
 80039d6:	4809      	ldr	r0, [pc, #36]	; (80039fc <HAL_GPIO_ReadPin+0x3c>)
 80039d8:	f7fe fd79 	bl	80024ce <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	887b      	ldrh	r3, [r7, #2]
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
 80039ec:	e001      	b.n	80039f2 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039ee:	2300      	movs	r3, #0
 80039f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	0801504c 	.word	0x0801504c

08003a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003a10:	887b      	ldrh	r3, [r7, #2]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d104      	bne.n	8003a20 <HAL_GPIO_WritePin+0x20>
 8003a16:	f240 1197 	movw	r1, #407	; 0x197
 8003a1a:	480e      	ldr	r0, [pc, #56]	; (8003a54 <HAL_GPIO_WritePin+0x54>)
 8003a1c:	f7fe fd57 	bl	80024ce <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003a20:	787b      	ldrb	r3, [r7, #1]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <HAL_GPIO_WritePin+0x36>
 8003a26:	787b      	ldrb	r3, [r7, #1]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d004      	beq.n	8003a36 <HAL_GPIO_WritePin+0x36>
 8003a2c:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8003a30:	4808      	ldr	r0, [pc, #32]	; (8003a54 <HAL_GPIO_WritePin+0x54>)
 8003a32:	f7fe fd4c 	bl	80024ce <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003a36:	787b      	ldrb	r3, [r7, #1]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a3c:	887a      	ldrh	r2, [r7, #2]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a42:	e003      	b.n	8003a4c <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a44:	887b      	ldrh	r3, [r7, #2]
 8003a46:	041a      	lsls	r2, r3, #16
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]
}
 8003a4c:	bf00      	nop
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	0801504c 	.word	0x0801504c

08003a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a62:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d006      	beq.n	8003a7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a6e:	4a05      	ldr	r2, [pc, #20]	; (8003a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe fce6 	bl	8002448 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40013c00 	.word	0x40013c00

08003a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e107      	b.n	8003caa <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a85      	ldr	r2, [pc, #532]	; (8003cb4 <HAL_I2C_Init+0x22c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d013      	beq.n	8003acc <HAL_I2C_Init+0x44>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a83      	ldr	r2, [pc, #524]	; (8003cb8 <HAL_I2C_Init+0x230>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00e      	beq.n	8003acc <HAL_I2C_Init+0x44>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a82      	ldr	r2, [pc, #520]	; (8003cbc <HAL_I2C_Init+0x234>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d009      	beq.n	8003acc <HAL_I2C_Init+0x44>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a80      	ldr	r2, [pc, #512]	; (8003cc0 <HAL_I2C_Init+0x238>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d004      	beq.n	8003acc <HAL_I2C_Init+0x44>
 8003ac2:	f240 2119 	movw	r1, #537	; 0x219
 8003ac6:	487f      	ldr	r0, [pc, #508]	; (8003cc4 <HAL_I2C_Init+0x23c>)
 8003ac8:	f7fe fd01 	bl	80024ce <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad4:	d304      	bcc.n	8003ae0 <HAL_I2C_Init+0x58>
 8003ad6:	f240 211a 	movw	r1, #538	; 0x21a
 8003ada:	487a      	ldr	r0, [pc, #488]	; (8003cc4 <HAL_I2C_Init+0x23c>)
 8003adc:	f7fe fcf7 	bl	80024ce <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d008      	beq.n	8003afa <HAL_I2C_Init+0x72>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d004      	beq.n	8003afa <HAL_I2C_Init+0x72>
 8003af0:	f240 211b 	movw	r1, #539	; 0x21b
 8003af4:	4873      	ldr	r0, [pc, #460]	; (8003cc4 <HAL_I2C_Init+0x23c>)
 8003af6:	f7fe fcea 	bl	80024ce <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d009      	beq.n	8003b16 <HAL_I2C_Init+0x8e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0a:	d004      	beq.n	8003b16 <HAL_I2C_Init+0x8e>
 8003b0c:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8003b10:	486c      	ldr	r0, [pc, #432]	; (8003cc4 <HAL_I2C_Init+0x23c>)
 8003b12:	f7fe fcdc 	bl	80024ce <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	2bff      	cmp	r3, #255	; 0xff
 8003b1c:	d904      	bls.n	8003b28 <HAL_I2C_Init+0xa0>
 8003b1e:	f240 211d 	movw	r1, #541	; 0x21d
 8003b22:	4868      	ldr	r0, [pc, #416]	; (8003cc4 <HAL_I2C_Init+0x23c>)
 8003b24:	f7fe fcd3 	bl	80024ce <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d020      	beq.n	8003b72 <HAL_I2C_Init+0xea>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d01c      	beq.n	8003b72 <HAL_I2C_Init+0xea>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d018      	beq.n	8003b72 <HAL_I2C_Init+0xea>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d014      	beq.n	8003b72 <HAL_I2C_Init+0xea>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d010      	beq.n	8003b72 <HAL_I2C_Init+0xea>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	2b05      	cmp	r3, #5
 8003b56:	d00c      	beq.n	8003b72 <HAL_I2C_Init+0xea>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b06      	cmp	r3, #6
 8003b5e:	d008      	beq.n	8003b72 <HAL_I2C_Init+0xea>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	2b07      	cmp	r3, #7
 8003b66:	d004      	beq.n	8003b72 <HAL_I2C_Init+0xea>
 8003b68:	f240 211e 	movw	r1, #542	; 0x21e
 8003b6c:	4855      	ldr	r0, [pc, #340]	; (8003cc4 <HAL_I2C_Init+0x23c>)
 8003b6e:	f7fe fcae 	bl	80024ce <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <HAL_I2C_Init+0x106>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b82:	d004      	beq.n	8003b8e <HAL_I2C_Init+0x106>
 8003b84:	f240 211f 	movw	r1, #543	; 0x21f
 8003b88:	484e      	ldr	r0, [pc, #312]	; (8003cc4 <HAL_I2C_Init+0x23c>)
 8003b8a:	f7fe fca0 	bl	80024ce <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <HAL_I2C_Init+0x122>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b9e:	d004      	beq.n	8003baa <HAL_I2C_Init+0x122>
 8003ba0:	f44f 7108 	mov.w	r1, #544	; 0x220
 8003ba4:	4847      	ldr	r0, [pc, #284]	; (8003cc4 <HAL_I2C_Init+0x23c>)
 8003ba6:	f7fe fc92 	bl	80024ce <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd fbea 	bl	8001398 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2224      	movs	r2, #36	; 0x24
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0201 	bic.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003be8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bf8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d107      	bne.n	8003c12 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c0e:	609a      	str	r2, [r3, #8]
 8003c10:	e006      	b.n	8003c20 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d104      	bne.n	8003c32 <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6859      	ldr	r1, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b22      	ldr	r3, [pc, #136]	; (8003cc8 <HAL_I2C_Init+0x240>)
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69d9      	ldr	r1, [r3, #28]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1a      	ldr	r2, [r3, #32]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40005400 	.word	0x40005400
 8003cb8:	40005800 	.word	0x40005800
 8003cbc:	40005c00 	.word	0x40005c00
 8003cc0:	40006000 	.word	0x40006000
 8003cc4:	08015088 	.word	0x08015088
 8003cc8:	02008000 	.word	0x02008000

08003ccc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	607a      	str	r2, [r7, #4]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	460b      	mov	r3, r1
 8003cda:	817b      	strh	r3, [r7, #10]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	f040 80da 	bne.w	8003ea2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_I2C_Master_Transmit+0x30>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e0d3      	b.n	8003ea4 <HAL_I2C_Master_Transmit+0x1d8>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d04:	f7ff f8dc 	bl	8002ec0 <HAL_GetTick>
 8003d08:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	2319      	movs	r3, #25
 8003d10:	2201      	movs	r2, #1
 8003d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 fefb 	bl	8004b12 <I2C_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e0be      	b.n	8003ea4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2221      	movs	r2, #33	; 0x21
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2210      	movs	r2, #16
 8003d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	893a      	ldrh	r2, [r7, #8]
 8003d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2bff      	cmp	r3, #255	; 0xff
 8003d56:	d90e      	bls.n	8003d76 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	22ff      	movs	r2, #255	; 0xff
 8003d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	8979      	ldrh	r1, [r7, #10]
 8003d66:	4b51      	ldr	r3, [pc, #324]	; (8003eac <HAL_I2C_Master_Transmit+0x1e0>)
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f001 f8e6 	bl	8004f40 <I2C_TransferConfig>
 8003d74:	e06c      	b.n	8003e50 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	8979      	ldrh	r1, [r7, #10]
 8003d88:	4b48      	ldr	r3, [pc, #288]	; (8003eac <HAL_I2C_Master_Transmit+0x1e0>)
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f001 f8d5 	bl	8004f40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003d96:	e05b      	b.n	8003e50 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	6a39      	ldr	r1, [r7, #32]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 fef8 	bl	8004b92 <I2C_WaitOnTXISFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e07b      	b.n	8003ea4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	781a      	ldrb	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d034      	beq.n	8003e50 <HAL_I2C_Master_Transmit+0x184>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d130      	bne.n	8003e50 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	2200      	movs	r2, #0
 8003df6:	2180      	movs	r1, #128	; 0x80
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 fe8a 	bl	8004b12 <I2C_WaitOnFlagUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e04d      	b.n	8003ea4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2bff      	cmp	r3, #255	; 0xff
 8003e10:	d90e      	bls.n	8003e30 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	22ff      	movs	r2, #255	; 0xff
 8003e16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	8979      	ldrh	r1, [r7, #10]
 8003e20:	2300      	movs	r3, #0
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f001 f889 	bl	8004f40 <I2C_TransferConfig>
 8003e2e:	e00f      	b.n	8003e50 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	8979      	ldrh	r1, [r7, #10]
 8003e42:	2300      	movs	r3, #0
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f001 f878 	bl	8004f40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d19e      	bne.n	8003d98 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	6a39      	ldr	r1, [r7, #32]
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fed7 	bl	8004c12 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e01a      	b.n	8003ea4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2220      	movs	r2, #32
 8003e74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6859      	ldr	r1, [r3, #4]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <HAL_I2C_Master_Transmit+0x1e4>)
 8003e82:	400b      	ands	r3, r1
 8003e84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e000      	b.n	8003ea4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003ea2:	2302      	movs	r3, #2
  }
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	80002000 	.word	0x80002000
 8003eb0:	fe00e800 	.word	0xfe00e800

08003eb4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	607a      	str	r2, [r7, #4]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	817b      	strh	r3, [r7, #10]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	f040 80db 	bne.w	800408c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_I2C_Master_Receive+0x30>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e0d4      	b.n	800408e <HAL_I2C_Master_Receive+0x1da>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003eec:	f7fe ffe8 	bl	8002ec0 <HAL_GetTick>
 8003ef0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	2319      	movs	r3, #25
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 fe07 	bl	8004b12 <I2C_WaitOnFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e0bf      	b.n	800408e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2222      	movs	r2, #34	; 0x22
 8003f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2210      	movs	r2, #16
 8003f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	893a      	ldrh	r2, [r7, #8]
 8003f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2bff      	cmp	r3, #255	; 0xff
 8003f3e:	d90e      	bls.n	8003f5e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	22ff      	movs	r2, #255	; 0xff
 8003f44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	8979      	ldrh	r1, [r7, #10]
 8003f4e:	4b52      	ldr	r3, [pc, #328]	; (8004098 <HAL_I2C_Master_Receive+0x1e4>)
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fff2 	bl	8004f40 <I2C_TransferConfig>
 8003f5c:	e06d      	b.n	800403a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	8979      	ldrh	r1, [r7, #10]
 8003f70:	4b49      	ldr	r3, [pc, #292]	; (8004098 <HAL_I2C_Master_Receive+0x1e4>)
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 ffe1 	bl	8004f40 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003f7e:	e05c      	b.n	800403a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	6a39      	ldr	r1, [r7, #32]
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 fe81 	bl	8004c8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e07c      	b.n	800408e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d034      	beq.n	800403a <HAL_I2C_Master_Receive+0x186>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d130      	bne.n	800403a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	2180      	movs	r1, #128	; 0x80
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fd95 	bl	8004b12 <I2C_WaitOnFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e04d      	b.n	800408e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2bff      	cmp	r3, #255	; 0xff
 8003ffa:	d90e      	bls.n	800401a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	22ff      	movs	r2, #255	; 0xff
 8004000:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004006:	b2da      	uxtb	r2, r3
 8004008:	8979      	ldrh	r1, [r7, #10]
 800400a:	2300      	movs	r3, #0
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 ff94 	bl	8004f40 <I2C_TransferConfig>
 8004018:	e00f      	b.n	800403a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004028:	b2da      	uxtb	r2, r3
 800402a:	8979      	ldrh	r1, [r7, #10]
 800402c:	2300      	movs	r3, #0
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 ff83 	bl	8004f40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d19d      	bne.n	8003f80 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	6a39      	ldr	r1, [r7, #32]
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fde2 	bl	8004c12 <I2C_WaitOnSTOPFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e01a      	b.n	800408e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2220      	movs	r2, #32
 800405e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6859      	ldr	r1, [r3, #4]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <HAL_I2C_Master_Receive+0x1e8>)
 800406c:	400b      	ands	r3, r1
 800406e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	80002400 	.word	0x80002400
 800409c:	fe00e800 	.word	0xfe00e800

080040a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	68f9      	ldr	r1, [r7, #12]
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	4798      	blx	r3
  }
}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d010      	beq.n	800411a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	09db      	lsrs	r3, r3, #7
 80040fc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004108:	f043 0201 	orr.w	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004118:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	0a9b      	lsrs	r3, r3, #10
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d010      	beq.n	8004148 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	09db      	lsrs	r3, r3, #7
 800412a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	f043 0208 	orr.w	r2, r3, #8
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004146:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	0a5b      	lsrs	r3, r3, #9
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d010      	beq.n	8004176 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	09db      	lsrs	r3, r3, #7
 8004158:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004164:	f043 0202 	orr.w	r2, r3, #2
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004174:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 030b 	and.w	r3, r3, #11
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004186:	68f9      	ldr	r1, [r7, #12]
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fb89 	bl	80048a0 <I2C_ITError>
  }
}
 800418e:	bf00      	nop
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	460b      	mov	r3, r1
 80041c8:	70fb      	strb	r3, [r7, #3]
 80041ca:	4613      	mov	r3, r2
 80041cc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b086      	sub	sp, #24
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <I2C_Slave_ISR_IT+0x24>
 8004236:	2302      	movs	r3, #2
 8004238:	e0ec      	b.n	8004414 <I2C_Slave_ISR_IT+0x1fe>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d009      	beq.n	8004262 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800425a:	6939      	ldr	r1, [r7, #16]
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f9bf 	bl	80045e0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	091b      	lsrs	r3, r3, #4
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d04d      	beq.n	800430a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004276:	2b00      	cmp	r3, #0
 8004278:	d047      	beq.n	800430a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d128      	bne.n	80042d6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b28      	cmp	r3, #40	; 0x28
 800428e:	d108      	bne.n	80042a2 <I2C_Slave_ISR_IT+0x8c>
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004296:	d104      	bne.n	80042a2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004298:	6939      	ldr	r1, [r7, #16]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 faaa 	bl	80047f4 <I2C_ITListenCplt>
 80042a0:	e032      	b.n	8004308 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b29      	cmp	r3, #41	; 0x29
 80042ac:	d10e      	bne.n	80042cc <I2C_Slave_ISR_IT+0xb6>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042b4:	d00a      	beq.n	80042cc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2210      	movs	r2, #16
 80042bc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 fbe5 	bl	8004a8e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f92d 	bl	8004524 <I2C_ITSlaveSeqCplt>
 80042ca:	e01d      	b.n	8004308 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2210      	movs	r2, #16
 80042d2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80042d4:	e096      	b.n	8004404 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2210      	movs	r2, #16
 80042dc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	f043 0204 	orr.w	r2, r3, #4
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d004      	beq.n	80042fa <I2C_Slave_ISR_IT+0xe4>
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042f6:	f040 8085 	bne.w	8004404 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fe:	4619      	mov	r1, r3
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 facd 	bl	80048a0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004306:	e07d      	b.n	8004404 <I2C_Slave_ISR_IT+0x1ee>
 8004308:	e07c      	b.n	8004404 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	089b      	lsrs	r3, r3, #2
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d030      	beq.n	8004378 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	089b      	lsrs	r3, r3, #2
 800431a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800431e:	2b00      	cmp	r3, #0
 8004320:	d02a      	beq.n	8004378 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d018      	beq.n	800435e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004348:	3b01      	subs	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004354:	b29b      	uxth	r3, r3
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d14f      	bne.n	8004408 <I2C_Slave_ISR_IT+0x1f2>
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800436e:	d04b      	beq.n	8004408 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f8d7 	bl	8004524 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004376:	e047      	b.n	8004408 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	08db      	lsrs	r3, r3, #3
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	08db      	lsrs	r3, r3, #3
 8004388:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004390:	6939      	ldr	r1, [r7, #16]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f842 	bl	800441c <I2C_ITAddrCplt>
 8004398:	e037      	b.n	800440a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	085b      	lsrs	r3, r3, #1
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d031      	beq.n	800440a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d02b      	beq.n	800440a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d018      	beq.n	80043ee <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	781a      	ldrb	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	851a      	strh	r2, [r3, #40]	; 0x28
 80043ec:	e00d      	b.n	800440a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043f4:	d002      	beq.n	80043fc <I2C_Slave_ISR_IT+0x1e6>
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d106      	bne.n	800440a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 f891 	bl	8004524 <I2C_ITSlaveSeqCplt>
 8004402:	e002      	b.n	800440a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004404:	bf00      	nop
 8004406:	e000      	b.n	800440a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004408:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004432:	2b28      	cmp	r3, #40	; 0x28
 8004434:	d16a      	bne.n	800450c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	0c1b      	lsrs	r3, r3, #16
 800443e:	b2db      	uxtb	r3, r3
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	b29b      	uxth	r3, r3
 8004450:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004454:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	b29b      	uxth	r3, r3
 800445e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004462:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	b29b      	uxth	r3, r3
 800446c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004470:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d138      	bne.n	80044ec <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800447a:	897b      	ldrh	r3, [r7, #10]
 800447c:	09db      	lsrs	r3, r3, #7
 800447e:	b29a      	uxth	r2, r3
 8004480:	89bb      	ldrh	r3, [r7, #12]
 8004482:	4053      	eors	r3, r2
 8004484:	b29b      	uxth	r3, r3
 8004486:	f003 0306 	and.w	r3, r3, #6
 800448a:	2b00      	cmp	r3, #0
 800448c:	d11c      	bne.n	80044c8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800448e:	897b      	ldrh	r3, [r7, #10]
 8004490:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d13b      	bne.n	800451c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2208      	movs	r2, #8
 80044b0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80044ba:	89ba      	ldrh	r2, [r7, #12]
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	4619      	mov	r1, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff fe7c 	bl	80041be <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80044c6:	e029      	b.n	800451c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80044c8:	893b      	ldrh	r3, [r7, #8]
 80044ca:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80044cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fdb1 	bl	8005038 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80044de:	89ba      	ldrh	r2, [r7, #12]
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	4619      	mov	r1, r3
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff fe6a 	bl	80041be <HAL_I2C_AddrCallback>
}
 80044ea:	e017      	b.n	800451c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80044ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fda1 	bl	8005038 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80044fe:	89ba      	ldrh	r2, [r7, #12]
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	4619      	mov	r1, r3
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff fe5a 	bl	80041be <HAL_I2C_AddrCallback>
}
 800450a:	e007      	b.n	800451c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2208      	movs	r2, #8
 8004512:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800451c:	bf00      	nop
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	0b9b      	lsrs	r3, r3, #14
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	e00d      	b.n	8004576 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	0bdb      	lsrs	r3, r3, #15
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004574:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b29      	cmp	r3, #41	; 0x29
 8004580:	d112      	bne.n	80045a8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2228      	movs	r2, #40	; 0x28
 8004586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2221      	movs	r2, #33	; 0x21
 800458e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004590:	2101      	movs	r1, #1
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fd50 	bl	8005038 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff fdf8 	bl	8004196 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80045a6:	e017      	b.n	80045d8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b2a      	cmp	r3, #42	; 0x2a
 80045b2:	d111      	bne.n	80045d8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2228      	movs	r2, #40	; 0x28
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2222      	movs	r2, #34	; 0x22
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80045c2:	2102      	movs	r1, #2
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fd37 	bl	8005038 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff fde9 	bl	80041aa <HAL_I2C_SlaveRxCpltCallback>
}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045fc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2220      	movs	r2, #32
 8004604:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	2b21      	cmp	r3, #33	; 0x21
 800460a:	d002      	beq.n	8004612 <I2C_ITSlaveCplt+0x32>
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	2b29      	cmp	r3, #41	; 0x29
 8004610:	d108      	bne.n	8004624 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004612:	f248 0101 	movw	r1, #32769	; 0x8001
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fd0e 	bl	8005038 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2221      	movs	r2, #33	; 0x21
 8004620:	631a      	str	r2, [r3, #48]	; 0x30
 8004622:	e00d      	b.n	8004640 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b22      	cmp	r3, #34	; 0x22
 8004628:	d002      	beq.n	8004630 <I2C_ITSlaveCplt+0x50>
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	2b2a      	cmp	r3, #42	; 0x2a
 800462e:	d107      	bne.n	8004640 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004630:	f248 0102 	movw	r1, #32770	; 0x8002
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fcff 	bl	8005038 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2222      	movs	r2, #34	; 0x22
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800464e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6859      	ldr	r1, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4b64      	ldr	r3, [pc, #400]	; (80047ec <I2C_ITSlaveCplt+0x20c>)
 800465c:	400b      	ands	r3, r1
 800465e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fa14 	bl	8004a8e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	0b9b      	lsrs	r3, r3, #14
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d013      	beq.n	800469a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004680:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	2b00      	cmp	r3, #0
 8004688:	d020      	beq.n	80046cc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	b29a      	uxth	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004698:	e018      	b.n	80046cc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	0bdb      	lsrs	r3, r3, #15
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d012      	beq.n	80046cc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046b4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d006      	beq.n	80046cc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	089b      	lsrs	r3, r3, #2
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d020      	beq.n	800471a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f023 0304 	bic.w	r3, r3, #4
 80046de:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00c      	beq.n	800471a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004728:	f043 0204 	orr.w	r2, r3, #4
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004742:	2b00      	cmp	r3, #0
 8004744:	d010      	beq.n	8004768 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f8a7 	bl	80048a0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b28      	cmp	r3, #40	; 0x28
 800475c:	d141      	bne.n	80047e2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800475e:	6979      	ldr	r1, [r7, #20]
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f847 	bl	80047f4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004766:	e03c      	b.n	80047e2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004770:	d014      	beq.n	800479c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff fed6 	bl	8004524 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a1d      	ldr	r2, [pc, #116]	; (80047f0 <I2C_ITSlaveCplt+0x210>)
 800477c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff fd20 	bl	80041da <HAL_I2C_ListenCpltCallback>
}
 800479a:	e022      	b.n	80047e2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b22      	cmp	r3, #34	; 0x22
 80047a6:	d10e      	bne.n	80047c6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff fcf3 	bl	80041aa <HAL_I2C_SlaveRxCpltCallback>
}
 80047c4:	e00d      	b.n	80047e2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff fcda 	bl	8004196 <HAL_I2C_SlaveTxCpltCallback>
}
 80047e2:	bf00      	nop
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	fe00e800 	.word	0xfe00e800
 80047f0:	ffff0000 	.word	0xffff0000

080047f4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a26      	ldr	r2, [pc, #152]	; (800489c <I2C_ITListenCplt+0xa8>)
 8004802:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	089b      	lsrs	r3, r3, #2
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d022      	beq.n	8004872 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004848:	2b00      	cmp	r3, #0
 800484a:	d012      	beq.n	8004872 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	f043 0204 	orr.w	r2, r3, #4
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004872:	f248 0103 	movw	r1, #32771	; 0x8003
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fbde 	bl	8005038 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2210      	movs	r2, #16
 8004882:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7ff fca4 	bl	80041da <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	ffff0000 	.word	0xffff0000

080048a0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a5d      	ldr	r2, [pc, #372]	; (8004a34 <I2C_ITError+0x194>)
 80048be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	2b28      	cmp	r3, #40	; 0x28
 80048d6:	d005      	beq.n	80048e4 <I2C_ITError+0x44>
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	2b29      	cmp	r3, #41	; 0x29
 80048dc:	d002      	beq.n	80048e4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80048de:	7bfb      	ldrb	r3, [r7, #15]
 80048e0:	2b2a      	cmp	r3, #42	; 0x2a
 80048e2:	d10b      	bne.n	80048fc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048e4:	2103      	movs	r1, #3
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fba6 	bl	8005038 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2228      	movs	r2, #40	; 0x28
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a50      	ldr	r2, [pc, #320]	; (8004a38 <I2C_ITError+0x198>)
 80048f8:	635a      	str	r2, [r3, #52]	; 0x34
 80048fa:	e011      	b.n	8004920 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048fc:	f248 0103 	movw	r1, #32771	; 0x8003
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 fb99 	bl	8005038 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b60      	cmp	r3, #96	; 0x60
 8004910:	d003      	beq.n	800491a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	2b00      	cmp	r3, #0
 800492c:	d039      	beq.n	80049a2 <I2C_ITError+0x102>
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b11      	cmp	r3, #17
 8004932:	d002      	beq.n	800493a <I2C_ITError+0x9a>
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b21      	cmp	r3, #33	; 0x21
 8004938:	d133      	bne.n	80049a2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004948:	d107      	bne.n	800495a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004958:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	4618      	mov	r0, r3
 8004960:	f7fe fcb0 	bl	80032c4 <HAL_DMA_GetState>
 8004964:	4603      	mov	r3, r0
 8004966:	2b01      	cmp	r3, #1
 8004968:	d017      	beq.n	800499a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	4a33      	ldr	r2, [pc, #204]	; (8004a3c <I2C_ITError+0x19c>)
 8004970:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe fc7e 	bl	8003280 <HAL_DMA_Abort_IT>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d04d      	beq.n	8004a26 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004994:	4610      	mov	r0, r2
 8004996:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004998:	e045      	b.n	8004a26 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f850 	bl	8004a40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049a0:	e041      	b.n	8004a26 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d039      	beq.n	8004a1e <I2C_ITError+0x17e>
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b12      	cmp	r3, #18
 80049ae:	d002      	beq.n	80049b6 <I2C_ITError+0x116>
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b22      	cmp	r3, #34	; 0x22
 80049b4:	d133      	bne.n	8004a1e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c4:	d107      	bne.n	80049d6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049d4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe fc72 	bl	80032c4 <HAL_DMA_GetState>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d017      	beq.n	8004a16 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ea:	4a14      	ldr	r2, [pc, #80]	; (8004a3c <I2C_ITError+0x19c>)
 80049ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe fc40 	bl	8003280 <HAL_DMA_Abort_IT>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d011      	beq.n	8004a2a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a10:	4610      	mov	r0, r2
 8004a12:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a14:	e009      	b.n	8004a2a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f812 	bl	8004a40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a1c:	e005      	b.n	8004a2a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f80e 	bl	8004a40 <I2C_TreatErrorCallback>
  }
}
 8004a24:	e002      	b.n	8004a2c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a26:	bf00      	nop
 8004a28:	e000      	b.n	8004a2c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a2a:	bf00      	nop
}
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	ffff0000 	.word	0xffff0000
 8004a38:	08004217 	.word	0x08004217
 8004a3c:	08004ad7 	.word	0x08004ad7

08004a40 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b60      	cmp	r3, #96	; 0x60
 8004a52:	d10e      	bne.n	8004a72 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7ff fbc9 	bl	8004202 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a70:	e009      	b.n	8004a86 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff fbb4 	bl	80041ee <HAL_I2C_ErrorCallback>
}
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d103      	bne.n	8004aac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d007      	beq.n	8004aca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699a      	ldr	r2, [r3, #24]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0201 	orr.w	r2, r2, #1
 8004ac8:	619a      	str	r2, [r3, #24]
  }
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	2200      	movs	r2, #0
 8004af2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b00:	2200      	movs	r2, #0
 8004b02:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f7ff ff9b 	bl	8004a40 <I2C_TreatErrorCallback>
}
 8004b0a:	bf00      	nop
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b084      	sub	sp, #16
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	603b      	str	r3, [r7, #0]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b22:	e022      	b.n	8004b6a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2a:	d01e      	beq.n	8004b6a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2c:	f7fe f9c8 	bl	8002ec0 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d302      	bcc.n	8004b42 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d113      	bne.n	8004b6a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b46:	f043 0220 	orr.w	r2, r3, #32
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e00f      	b.n	8004b8a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699a      	ldr	r2, [r3, #24]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4013      	ands	r3, r2
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	bf0c      	ite	eq
 8004b7a:	2301      	moveq	r3, #1
 8004b7c:	2300      	movne	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d0cd      	beq.n	8004b24 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b9e:	e02c      	b.n	8004bfa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f8eb 	bl	8004d80 <I2C_IsErrorOccurred>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e02a      	b.n	8004c0a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bba:	d01e      	beq.n	8004bfa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbc:	f7fe f980 	bl	8002ec0 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d302      	bcc.n	8004bd2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d113      	bne.n	8004bfa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd6:	f043 0220 	orr.w	r2, r3, #32
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e007      	b.n	8004c0a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d1cb      	bne.n	8004ba0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c1e:	e028      	b.n	8004c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f8ab 	bl	8004d80 <I2C_IsErrorOccurred>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e026      	b.n	8004c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c34:	f7fe f944 	bl	8002ec0 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d302      	bcc.n	8004c4a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d113      	bne.n	8004c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4e:	f043 0220 	orr.w	r2, r3, #32
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e007      	b.n	8004c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	f003 0320 	and.w	r3, r3, #32
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d1cf      	bne.n	8004c20 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c98:	e064      	b.n	8004d64 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f86e 	bl	8004d80 <I2C_IsErrorOccurred>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e062      	b.n	8004d74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d138      	bne.n	8004d2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d105      	bne.n	8004cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	e04e      	b.n	8004d74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	f003 0310 	and.w	r3, r3, #16
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d107      	bne.n	8004cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2210      	movs	r2, #16
 8004cea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2204      	movs	r2, #4
 8004cf0:	645a      	str	r2, [r3, #68]	; 0x44
 8004cf2:	e002      	b.n	8004cfa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6859      	ldr	r1, [r3, #4]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004d0e:	400b      	ands	r3, r1
 8004d10:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e022      	b.n	8004d74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2e:	f7fe f8c7 	bl	8002ec0 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d302      	bcc.n	8004d44 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10f      	bne.n	8004d64 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d48:	f043 0220 	orr.w	r2, r3, #32
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e007      	b.n	8004d74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d193      	bne.n	8004c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	fe00e800 	.word	0xfe00e800

08004d80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08a      	sub	sp, #40	; 0x28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d068      	beq.n	8004e7e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2210      	movs	r2, #16
 8004db2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004db4:	e049      	b.n	8004e4a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d045      	beq.n	8004e4a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004dbe:	f7fe f87f 	bl	8002ec0 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d302      	bcc.n	8004dd4 <I2C_IsErrorOccurred+0x54>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d13a      	bne.n	8004e4a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dde:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004de6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df6:	d121      	bne.n	8004e3c <I2C_IsErrorOccurred+0xbc>
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dfe:	d01d      	beq.n	8004e3c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004e00:	7cfb      	ldrb	r3, [r7, #19]
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d01a      	beq.n	8004e3c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e16:	f7fe f853 	bl	8002ec0 <HAL_GetTick>
 8004e1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e1c:	e00e      	b.n	8004e3c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e1e:	f7fe f84f 	bl	8002ec0 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b19      	cmp	r3, #25
 8004e2a:	d907      	bls.n	8004e3c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	f043 0320 	orr.w	r3, r3, #32
 8004e32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004e3a:	e006      	b.n	8004e4a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d1e9      	bne.n	8004e1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b20      	cmp	r3, #32
 8004e56:	d003      	beq.n	8004e60 <I2C_IsErrorOccurred+0xe0>
 8004e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0aa      	beq.n	8004db6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d103      	bne.n	8004e70 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	f043 0304 	orr.w	r3, r3, #4
 8004e76:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00b      	beq.n	8004ea8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ea0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	f043 0308 	orr.w	r3, r3, #8
 8004eb8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ec2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00b      	beq.n	8004eec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	f043 0302 	orr.w	r3, r3, #2
 8004eda:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ee4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01c      	beq.n	8004f2e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f7ff fdca 	bl	8004a8e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6859      	ldr	r1, [r3, #4]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	4b0d      	ldr	r3, [pc, #52]	; (8004f3c <I2C_IsErrorOccurred+0x1bc>)
 8004f06:	400b      	ands	r3, r1
 8004f08:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3728      	adds	r7, #40	; 0x28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	fe00e800 	.word	0xfe00e800

08004f40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	607b      	str	r3, [r7, #4]
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	817b      	strh	r3, [r7, #10]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a2f      	ldr	r2, [pc, #188]	; (8005014 <I2C_TransferConfig+0xd4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <I2C_TransferConfig+0x44>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a2d      	ldr	r2, [pc, #180]	; (8005018 <I2C_TransferConfig+0xd8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00e      	beq.n	8004f84 <I2C_TransferConfig+0x44>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a2c      	ldr	r2, [pc, #176]	; (800501c <I2C_TransferConfig+0xdc>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d009      	beq.n	8004f84 <I2C_TransferConfig+0x44>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a2a      	ldr	r2, [pc, #168]	; (8005020 <I2C_TransferConfig+0xe0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d004      	beq.n	8004f84 <I2C_TransferConfig+0x44>
 8004f7a:	f641 3147 	movw	r1, #6983	; 0x1b47
 8004f7e:	4829      	ldr	r0, [pc, #164]	; (8005024 <I2C_TransferConfig+0xe4>)
 8004f80:	f7fd faa5 	bl	80024ce <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f8a:	d00b      	beq.n	8004fa4 <I2C_TransferConfig+0x64>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f92:	d007      	beq.n	8004fa4 <I2C_TransferConfig+0x64>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d004      	beq.n	8004fa4 <I2C_TransferConfig+0x64>
 8004f9a:	f641 3148 	movw	r1, #6984	; 0x1b48
 8004f9e:	4821      	ldr	r0, [pc, #132]	; (8005024 <I2C_TransferConfig+0xe4>)
 8004fa0:	f7fd fa95 	bl	80024ce <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	4a20      	ldr	r2, [pc, #128]	; (8005028 <I2C_TransferConfig+0xe8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00f      	beq.n	8004fcc <I2C_TransferConfig+0x8c>
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	4a1f      	ldr	r2, [pc, #124]	; (800502c <I2C_TransferConfig+0xec>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00b      	beq.n	8004fcc <I2C_TransferConfig+0x8c>
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	4a1e      	ldr	r2, [pc, #120]	; (8005030 <I2C_TransferConfig+0xf0>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d007      	beq.n	8004fcc <I2C_TransferConfig+0x8c>
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d004      	beq.n	8004fcc <I2C_TransferConfig+0x8c>
 8004fc2:	f641 3149 	movw	r1, #6985	; 0x1b49
 8004fc6:	4817      	ldr	r0, [pc, #92]	; (8005024 <I2C_TransferConfig+0xe4>)
 8004fc8:	f7fd fa81 	bl	80024ce <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fcc:	897b      	ldrh	r3, [r7, #10]
 8004fce:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fd2:	7a7b      	ldrb	r3, [r7, #9]
 8004fd4:	041b      	lsls	r3, r3, #16
 8004fd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fda:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fe8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	0d5b      	lsrs	r3, r3, #21
 8004ff4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004ff8:	4b0e      	ldr	r3, [pc, #56]	; (8005034 <I2C_TransferConfig+0xf4>)
 8004ffa:	430b      	orrs	r3, r1
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	ea02 0103 	and.w	r1, r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	430a      	orrs	r2, r1
 800500a:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800500c:	bf00      	nop
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40005400 	.word	0x40005400
 8005018:	40005800 	.word	0x40005800
 800501c:	40005c00 	.word	0x40005c00
 8005020:	40006000 	.word	0x40006000
 8005024:	08015088 	.word	0x08015088
 8005028:	80004000 	.word	0x80004000
 800502c:	80002400 	.word	0x80002400
 8005030:	80002000 	.word	0x80002000
 8005034:	03ff63ff 	.word	0x03ff63ff

08005038 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005048:	887b      	ldrh	r3, [r7, #2]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00f      	beq.n	8005072 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005058:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005060:	b2db      	uxtb	r3, r3
 8005062:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005066:	2b28      	cmp	r3, #40	; 0x28
 8005068:	d003      	beq.n	8005072 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005070:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005072:	887b      	ldrh	r3, [r7, #2]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00f      	beq.n	800509c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005082:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800508a:	b2db      	uxtb	r3, r3
 800508c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005090:	2b28      	cmp	r3, #40	; 0x28
 8005092:	d003      	beq.n	800509c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800509a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800509c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	da03      	bge.n	80050ac <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80050aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80050ac:	887b      	ldrh	r3, [r7, #2]
 80050ae:	2b10      	cmp	r3, #16
 80050b0:	d103      	bne.n	80050ba <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80050b8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80050ba:	887b      	ldrh	r3, [r7, #2]
 80050bc:	2b20      	cmp	r3, #32
 80050be:	d103      	bne.n	80050c8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f043 0320 	orr.w	r3, r3, #32
 80050c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80050c8:	887b      	ldrh	r3, [r7, #2]
 80050ca:	2b40      	cmp	r3, #64	; 0x40
 80050cc:	d103      	bne.n	80050d6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050d4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6819      	ldr	r1, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	43da      	mvns	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	400a      	ands	r2, r1
 80050e6:	601a      	str	r2, [r3, #0]
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a32      	ldr	r2, [pc, #200]	; (80051cc <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d012      	beq.n	800512e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a30      	ldr	r2, [pc, #192]	; (80051d0 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00d      	beq.n	800512e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a2f      	ldr	r2, [pc, #188]	; (80051d4 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d008      	beq.n	800512e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a2d      	ldr	r2, [pc, #180]	; (80051d8 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005126:	215e      	movs	r1, #94	; 0x5e
 8005128:	482c      	ldr	r0, [pc, #176]	; (80051dc <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800512a:	f7fd f9d0 	bl	80024ce <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d007      	beq.n	8005144 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513a:	d003      	beq.n	8005144 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800513c:	215f      	movs	r1, #95	; 0x5f
 800513e:	4827      	ldr	r0, [pc, #156]	; (80051dc <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8005140:	f7fd f9c5 	bl	80024ce <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b20      	cmp	r3, #32
 800514e:	d138      	bne.n	80051c2 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005156:	2b01      	cmp	r3, #1
 8005158:	d101      	bne.n	800515e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 800515a:	2302      	movs	r3, #2
 800515c:	e032      	b.n	80051c4 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2224      	movs	r2, #36	; 0x24
 800516a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0201 	bic.w	r2, r2, #1
 800517c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800518c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6819      	ldr	r1, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0201 	orr.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	e000      	b.n	80051c4 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80051c2:	2302      	movs	r3, #2
  }
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40005400 	.word	0x40005400
 80051d0:	40005800 	.word	0x40005800
 80051d4:	40005c00 	.word	0x40005c00
 80051d8:	40006000 	.word	0x40006000
 80051dc:	080150c0 	.word	0x080150c0

080051e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a31      	ldr	r2, [pc, #196]	; (80052b4 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d012      	beq.n	800521a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a2f      	ldr	r2, [pc, #188]	; (80052b8 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00d      	beq.n	800521a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a2e      	ldr	r2, [pc, #184]	; (80052bc <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d008      	beq.n	800521a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a2c      	ldr	r2, [pc, #176]	; (80052c0 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d003      	beq.n	800521a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005212:	218c      	movs	r1, #140	; 0x8c
 8005214:	482b      	ldr	r0, [pc, #172]	; (80052c4 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8005216:	f7fd f95a 	bl	80024ce <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b0f      	cmp	r3, #15
 800521e:	d903      	bls.n	8005228 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8005220:	218d      	movs	r1, #141	; 0x8d
 8005222:	4828      	ldr	r0, [pc, #160]	; (80052c4 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8005224:	f7fd f953 	bl	80024ce <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b20      	cmp	r3, #32
 8005232:	d139      	bne.n	80052a8 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800523a:	2b01      	cmp	r3, #1
 800523c:	d101      	bne.n	8005242 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 800523e:	2302      	movs	r3, #2
 8005240:	e033      	b.n	80052aa <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2224      	movs	r2, #36	; 0x24
 800524e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0201 	bic.w	r2, r2, #1
 8005260:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005270:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	021b      	lsls	r3, r3, #8
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	e000      	b.n	80052aa <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 80052a8:	2302      	movs	r3, #2
  }
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40005400 	.word	0x40005400
 80052b8:	40005800 	.word	0x40005800
 80052bc:	40005c00 	.word	0x40005c00
 80052c0:	40006000 	.word	0x40006000
 80052c4:	080150c0 	.word	0x080150c0

080052c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80052d2:	4b23      	ldr	r3, [pc, #140]	; (8005360 <HAL_PWREx_EnableOverDrive+0x98>)
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	4a22      	ldr	r2, [pc, #136]	; (8005360 <HAL_PWREx_EnableOverDrive+0x98>)
 80052d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052dc:	6413      	str	r3, [r2, #64]	; 0x40
 80052de:	4b20      	ldr	r3, [pc, #128]	; (8005360 <HAL_PWREx_EnableOverDrive+0x98>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80052ea:	4b1e      	ldr	r3, [pc, #120]	; (8005364 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1d      	ldr	r2, [pc, #116]	; (8005364 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052f6:	f7fd fde3 	bl	8002ec0 <HAL_GetTick>
 80052fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052fc:	e009      	b.n	8005312 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052fe:	f7fd fddf 	bl	8002ec0 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800530c:	d901      	bls.n	8005312 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e022      	b.n	8005358 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005312:	4b14      	ldr	r3, [pc, #80]	; (8005364 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800531a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800531e:	d1ee      	bne.n	80052fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005320:	4b10      	ldr	r3, [pc, #64]	; (8005364 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a0f      	ldr	r2, [pc, #60]	; (8005364 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800532a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800532c:	f7fd fdc8 	bl	8002ec0 <HAL_GetTick>
 8005330:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005332:	e009      	b.n	8005348 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005334:	f7fd fdc4 	bl	8002ec0 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005342:	d901      	bls.n	8005348 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e007      	b.n	8005358 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005348:	4b06      	ldr	r3, [pc, #24]	; (8005364 <HAL_PWREx_EnableOverDrive+0x9c>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005350:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005354:	d1ee      	bne.n	8005334 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40023800 	.word	0x40023800
 8005364:	40007000 	.word	0x40007000

08005368 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005370:	2300      	movs	r3, #0
 8005372:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e345      	b.n	8005a0a <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b0f      	cmp	r3, #15
 8005384:	d904      	bls.n	8005390 <HAL_RCC_OscConfig+0x28>
 8005386:	f240 1163 	movw	r1, #355	; 0x163
 800538a:	4892      	ldr	r0, [pc, #584]	; (80055d4 <HAL_RCC_OscConfig+0x26c>)
 800538c:	f7fd f89f 	bl	80024ce <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 809a 	beq.w	80054d2 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00e      	beq.n	80053c4 <HAL_RCC_OscConfig+0x5c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ae:	d009      	beq.n	80053c4 <HAL_RCC_OscConfig+0x5c>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053b8:	d004      	beq.n	80053c4 <HAL_RCC_OscConfig+0x5c>
 80053ba:	f240 1169 	movw	r1, #361	; 0x169
 80053be:	4885      	ldr	r0, [pc, #532]	; (80055d4 <HAL_RCC_OscConfig+0x26c>)
 80053c0:	f7fd f885 	bl	80024ce <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053c4:	4b84      	ldr	r3, [pc, #528]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 030c 	and.w	r3, r3, #12
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d00c      	beq.n	80053ea <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053d0:	4b81      	ldr	r3, [pc, #516]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 030c 	and.w	r3, r3, #12
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d112      	bne.n	8005402 <HAL_RCC_OscConfig+0x9a>
 80053dc:	4b7e      	ldr	r3, [pc, #504]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053e8:	d10b      	bne.n	8005402 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ea:	4b7b      	ldr	r3, [pc, #492]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d06c      	beq.n	80054d0 <HAL_RCC_OscConfig+0x168>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d168      	bne.n	80054d0 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e303      	b.n	8005a0a <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800540a:	d106      	bne.n	800541a <HAL_RCC_OscConfig+0xb2>
 800540c:	4b72      	ldr	r3, [pc, #456]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a71      	ldr	r2, [pc, #452]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 8005412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	e02e      	b.n	8005478 <HAL_RCC_OscConfig+0x110>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10c      	bne.n	800543c <HAL_RCC_OscConfig+0xd4>
 8005422:	4b6d      	ldr	r3, [pc, #436]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a6c      	ldr	r2, [pc, #432]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 8005428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	4b6a      	ldr	r3, [pc, #424]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a69      	ldr	r2, [pc, #420]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 8005434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e01d      	b.n	8005478 <HAL_RCC_OscConfig+0x110>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005444:	d10c      	bne.n	8005460 <HAL_RCC_OscConfig+0xf8>
 8005446:	4b64      	ldr	r3, [pc, #400]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a63      	ldr	r2, [pc, #396]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 800544c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	4b61      	ldr	r3, [pc, #388]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a60      	ldr	r2, [pc, #384]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 8005458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e00b      	b.n	8005478 <HAL_RCC_OscConfig+0x110>
 8005460:	4b5d      	ldr	r3, [pc, #372]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a5c      	ldr	r2, [pc, #368]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 8005466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	4b5a      	ldr	r3, [pc, #360]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a59      	ldr	r2, [pc, #356]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 8005472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d013      	beq.n	80054a8 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fd fd1e 	bl	8002ec0 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005488:	f7fd fd1a 	bl	8002ec0 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b64      	cmp	r3, #100	; 0x64
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e2b7      	b.n	8005a0a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549a:	4b4f      	ldr	r3, [pc, #316]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0x120>
 80054a6:	e014      	b.n	80054d2 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fd fd0a 	bl	8002ec0 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b0:	f7fd fd06 	bl	8002ec0 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	; 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e2a3      	b.n	8005a0a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c2:	4b45      	ldr	r3, [pc, #276]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0x148>
 80054ce:	e000      	b.n	80054d2 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 8084 	beq.w	80055e8 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d008      	beq.n	80054fa <HAL_RCC_OscConfig+0x192>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d004      	beq.n	80054fa <HAL_RCC_OscConfig+0x192>
 80054f0:	f240 119b 	movw	r1, #411	; 0x19b
 80054f4:	4837      	ldr	r0, [pc, #220]	; (80055d4 <HAL_RCC_OscConfig+0x26c>)
 80054f6:	f7fc ffea 	bl	80024ce <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b1f      	cmp	r3, #31
 8005500:	d904      	bls.n	800550c <HAL_RCC_OscConfig+0x1a4>
 8005502:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8005506:	4833      	ldr	r0, [pc, #204]	; (80055d4 <HAL_RCC_OscConfig+0x26c>)
 8005508:	f7fc ffe1 	bl	80024ce <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800550c:	4b32      	ldr	r3, [pc, #200]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 030c 	and.w	r3, r3, #12
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00b      	beq.n	8005530 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005518:	4b2f      	ldr	r3, [pc, #188]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 030c 	and.w	r3, r3, #12
 8005520:	2b08      	cmp	r3, #8
 8005522:	d11c      	bne.n	800555e <HAL_RCC_OscConfig+0x1f6>
 8005524:	4b2c      	ldr	r3, [pc, #176]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d116      	bne.n	800555e <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005530:	4b29      	ldr	r3, [pc, #164]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <HAL_RCC_OscConfig+0x1e0>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d001      	beq.n	8005548 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e260      	b.n	8005a0a <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005548:	4b23      	ldr	r3, [pc, #140]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	4920      	ldr	r1, [pc, #128]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 8005558:	4313      	orrs	r3, r2
 800555a:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800555c:	e044      	b.n	80055e8 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d023      	beq.n	80055ae <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005566:	4b1c      	ldr	r3, [pc, #112]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1b      	ldr	r2, [pc, #108]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 800556c:	f043 0301 	orr.w	r3, r3, #1
 8005570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005572:	f7fd fca5 	bl	8002ec0 <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005578:	e008      	b.n	800558c <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800557a:	f7fd fca1 	bl	8002ec0 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e23e      	b.n	8005a0a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800558c:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0f0      	beq.n	800557a <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005598:	4b0f      	ldr	r3, [pc, #60]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	490c      	ldr	r1, [pc, #48]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	600b      	str	r3, [r1, #0]
 80055ac:	e01c      	b.n	80055e8 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ae:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a09      	ldr	r2, [pc, #36]	; (80055d8 <HAL_RCC_OscConfig+0x270>)
 80055b4:	f023 0301 	bic.w	r3, r3, #1
 80055b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ba:	f7fd fc81 	bl	8002ec0 <HAL_GetTick>
 80055be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055c0:	e00c      	b.n	80055dc <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055c2:	f7fd fc7d 	bl	8002ec0 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d905      	bls.n	80055dc <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e21a      	b.n	8005a0a <HAL_RCC_OscConfig+0x6a2>
 80055d4:	080150fc 	.word	0x080150fc
 80055d8:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055dc:	4b7e      	ldr	r3, [pc, #504]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1ec      	bne.n	80055c2 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d043      	beq.n	800567c <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d008      	beq.n	800560e <HAL_RCC_OscConfig+0x2a6>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d004      	beq.n	800560e <HAL_RCC_OscConfig+0x2a6>
 8005604:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8005608:	4874      	ldr	r0, [pc, #464]	; (80057dc <HAL_RCC_OscConfig+0x474>)
 800560a:	f7fc ff60 	bl	80024ce <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d019      	beq.n	800564a <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005616:	4b70      	ldr	r3, [pc, #448]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561a:	4a6f      	ldr	r2, [pc, #444]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 800561c:	f043 0301 	orr.w	r3, r3, #1
 8005620:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005622:	f7fd fc4d 	bl	8002ec0 <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005628:	e008      	b.n	800563c <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800562a:	f7fd fc49 	bl	8002ec0 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e1e6      	b.n	8005a0a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800563c:	4b66      	ldr	r3, [pc, #408]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 800563e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0f0      	beq.n	800562a <HAL_RCC_OscConfig+0x2c2>
 8005648:	e018      	b.n	800567c <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800564a:	4b63      	ldr	r3, [pc, #396]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 800564c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800564e:	4a62      	ldr	r2, [pc, #392]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005650:	f023 0301 	bic.w	r3, r3, #1
 8005654:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005656:	f7fd fc33 	bl	8002ec0 <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800565c:	e008      	b.n	8005670 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800565e:	f7fd fc2f 	bl	8002ec0 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d901      	bls.n	8005670 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e1cc      	b.n	8005a0a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005670:	4b59      	ldr	r3, [pc, #356]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1f0      	bne.n	800565e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80bc 	beq.w	8005802 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00c      	beq.n	80056ac <HAL_RCC_OscConfig+0x344>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d008      	beq.n	80056ac <HAL_RCC_OscConfig+0x344>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2b05      	cmp	r3, #5
 80056a0:	d004      	beq.n	80056ac <HAL_RCC_OscConfig+0x344>
 80056a2:	f240 2106 	movw	r1, #518	; 0x206
 80056a6:	484d      	ldr	r0, [pc, #308]	; (80057dc <HAL_RCC_OscConfig+0x474>)
 80056a8:	f7fc ff11 	bl	80024ce <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ac:	4b4a      	ldr	r3, [pc, #296]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10d      	bne.n	80056d4 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b8:	4b47      	ldr	r3, [pc, #284]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 80056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056bc:	4a46      	ldr	r2, [pc, #280]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 80056be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c2:	6413      	str	r3, [r2, #64]	; 0x40
 80056c4:	4b44      	ldr	r3, [pc, #272]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056d0:	2301      	movs	r3, #1
 80056d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056d4:	4b42      	ldr	r3, [pc, #264]	; (80057e0 <HAL_RCC_OscConfig+0x478>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d118      	bne.n	8005712 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80056e0:	4b3f      	ldr	r3, [pc, #252]	; (80057e0 <HAL_RCC_OscConfig+0x478>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a3e      	ldr	r2, [pc, #248]	; (80057e0 <HAL_RCC_OscConfig+0x478>)
 80056e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ec:	f7fd fbe8 	bl	8002ec0 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056f4:	f7fd fbe4 	bl	8002ec0 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b64      	cmp	r3, #100	; 0x64
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e181      	b.n	8005a0a <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005706:	4b36      	ldr	r3, [pc, #216]	; (80057e0 <HAL_RCC_OscConfig+0x478>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0f0      	beq.n	80056f4 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d106      	bne.n	8005728 <HAL_RCC_OscConfig+0x3c0>
 800571a:	4b2f      	ldr	r3, [pc, #188]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 800571c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571e:	4a2e      	ldr	r2, [pc, #184]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005720:	f043 0301 	orr.w	r3, r3, #1
 8005724:	6713      	str	r3, [r2, #112]	; 0x70
 8005726:	e02d      	b.n	8005784 <HAL_RCC_OscConfig+0x41c>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10c      	bne.n	800574a <HAL_RCC_OscConfig+0x3e2>
 8005730:	4b29      	ldr	r3, [pc, #164]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005734:	4a28      	ldr	r2, [pc, #160]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005736:	f023 0301 	bic.w	r3, r3, #1
 800573a:	6713      	str	r3, [r2, #112]	; 0x70
 800573c:	4b26      	ldr	r3, [pc, #152]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 800573e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005740:	4a25      	ldr	r2, [pc, #148]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005742:	f023 0304 	bic.w	r3, r3, #4
 8005746:	6713      	str	r3, [r2, #112]	; 0x70
 8005748:	e01c      	b.n	8005784 <HAL_RCC_OscConfig+0x41c>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b05      	cmp	r3, #5
 8005750:	d10c      	bne.n	800576c <HAL_RCC_OscConfig+0x404>
 8005752:	4b21      	ldr	r3, [pc, #132]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	4a20      	ldr	r2, [pc, #128]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005758:	f043 0304 	orr.w	r3, r3, #4
 800575c:	6713      	str	r3, [r2, #112]	; 0x70
 800575e:	4b1e      	ldr	r3, [pc, #120]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005762:	4a1d      	ldr	r2, [pc, #116]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005764:	f043 0301 	orr.w	r3, r3, #1
 8005768:	6713      	str	r3, [r2, #112]	; 0x70
 800576a:	e00b      	b.n	8005784 <HAL_RCC_OscConfig+0x41c>
 800576c:	4b1a      	ldr	r3, [pc, #104]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 800576e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005770:	4a19      	ldr	r2, [pc, #100]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005772:	f023 0301 	bic.w	r3, r3, #1
 8005776:	6713      	str	r3, [r2, #112]	; 0x70
 8005778:	4b17      	ldr	r3, [pc, #92]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 800577a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577c:	4a16      	ldr	r2, [pc, #88]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 800577e:	f023 0304 	bic.w	r3, r3, #4
 8005782:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d015      	beq.n	80057b8 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800578c:	f7fd fb98 	bl	8002ec0 <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005792:	e00a      	b.n	80057aa <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005794:	f7fd fb94 	bl	8002ec0 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e12f      	b.n	8005a0a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057aa:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 80057ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0ee      	beq.n	8005794 <HAL_RCC_OscConfig+0x42c>
 80057b6:	e01b      	b.n	80057f0 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b8:	f7fd fb82 	bl	8002ec0 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057be:	e011      	b.n	80057e4 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c0:	f7fd fb7e 	bl	8002ec0 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d908      	bls.n	80057e4 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e119      	b.n	8005a0a <HAL_RCC_OscConfig+0x6a2>
 80057d6:	bf00      	nop
 80057d8:	40023800 	.word	0x40023800
 80057dc:	080150fc 	.word	0x080150fc
 80057e0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057e4:	4b8b      	ldr	r3, [pc, #556]	; (8005a14 <HAL_RCC_OscConfig+0x6ac>)
 80057e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e7      	bne.n	80057c0 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d105      	bne.n	8005802 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057f6:	4b87      	ldr	r3, [pc, #540]	; (8005a14 <HAL_RCC_OscConfig+0x6ac>)
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	4a86      	ldr	r2, [pc, #536]	; (8005a14 <HAL_RCC_OscConfig+0x6ac>)
 80057fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005800:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00c      	beq.n	8005824 <HAL_RCC_OscConfig+0x4bc>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d008      	beq.n	8005824 <HAL_RCC_OscConfig+0x4bc>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	2b02      	cmp	r3, #2
 8005818:	d004      	beq.n	8005824 <HAL_RCC_OscConfig+0x4bc>
 800581a:	f240 214a 	movw	r1, #586	; 0x24a
 800581e:	487e      	ldr	r0, [pc, #504]	; (8005a18 <HAL_RCC_OscConfig+0x6b0>)
 8005820:	f7fc fe55 	bl	80024ce <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 80ed 	beq.w	8005a08 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800582e:	4b79      	ldr	r3, [pc, #484]	; (8005a14 <HAL_RCC_OscConfig+0x6ac>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 030c 	and.w	r3, r3, #12
 8005836:	2b08      	cmp	r3, #8
 8005838:	f000 80b4 	beq.w	80059a4 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	2b02      	cmp	r3, #2
 8005842:	f040 8095 	bne.w	8005970 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <HAL_RCC_OscConfig+0x4fa>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005856:	d004      	beq.n	8005862 <HAL_RCC_OscConfig+0x4fa>
 8005858:	f240 2153 	movw	r1, #595	; 0x253
 800585c:	486e      	ldr	r0, [pc, #440]	; (8005a18 <HAL_RCC_OscConfig+0x6b0>)
 800585e:	f7fc fe36 	bl	80024ce <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d903      	bls.n	8005872 <HAL_RCC_OscConfig+0x50a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	2b3f      	cmp	r3, #63	; 0x3f
 8005870:	d904      	bls.n	800587c <HAL_RCC_OscConfig+0x514>
 8005872:	f44f 7115 	mov.w	r1, #596	; 0x254
 8005876:	4868      	ldr	r0, [pc, #416]	; (8005a18 <HAL_RCC_OscConfig+0x6b0>)
 8005878:	f7fc fe29 	bl	80024ce <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	2b31      	cmp	r3, #49	; 0x31
 8005882:	d904      	bls.n	800588e <HAL_RCC_OscConfig+0x526>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800588c:	d904      	bls.n	8005898 <HAL_RCC_OscConfig+0x530>
 800588e:	f240 2155 	movw	r1, #597	; 0x255
 8005892:	4861      	ldr	r0, [pc, #388]	; (8005a18 <HAL_RCC_OscConfig+0x6b0>)
 8005894:	f7fc fe1b 	bl	80024ce <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589c:	2b02      	cmp	r3, #2
 800589e:	d010      	beq.n	80058c2 <HAL_RCC_OscConfig+0x55a>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d00c      	beq.n	80058c2 <HAL_RCC_OscConfig+0x55a>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	2b06      	cmp	r3, #6
 80058ae:	d008      	beq.n	80058c2 <HAL_RCC_OscConfig+0x55a>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d004      	beq.n	80058c2 <HAL_RCC_OscConfig+0x55a>
 80058b8:	f240 2156 	movw	r1, #598	; 0x256
 80058bc:	4856      	ldr	r0, [pc, #344]	; (8005a18 <HAL_RCC_OscConfig+0x6b0>)
 80058be:	f7fc fe06 	bl	80024ce <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d903      	bls.n	80058d2 <HAL_RCC_OscConfig+0x56a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ce:	2b0f      	cmp	r3, #15
 80058d0:	d904      	bls.n	80058dc <HAL_RCC_OscConfig+0x574>
 80058d2:	f240 2157 	movw	r1, #599	; 0x257
 80058d6:	4850      	ldr	r0, [pc, #320]	; (8005a18 <HAL_RCC_OscConfig+0x6b0>)
 80058d8:	f7fc fdf9 	bl	80024ce <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058dc:	4b4d      	ldr	r3, [pc, #308]	; (8005a14 <HAL_RCC_OscConfig+0x6ac>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a4c      	ldr	r2, [pc, #304]	; (8005a14 <HAL_RCC_OscConfig+0x6ac>)
 80058e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e8:	f7fd faea 	bl	8002ec0 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f0:	f7fd fae6 	bl	8002ec0 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e083      	b.n	8005a0a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005902:	4b44      	ldr	r3, [pc, #272]	; (8005a14 <HAL_RCC_OscConfig+0x6ac>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f0      	bne.n	80058f0 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69da      	ldr	r2, [r3, #28]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	019b      	lsls	r3, r3, #6
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005924:	085b      	lsrs	r3, r3, #1
 8005926:	3b01      	subs	r3, #1
 8005928:	041b      	lsls	r3, r3, #16
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	061b      	lsls	r3, r3, #24
 8005932:	4313      	orrs	r3, r2
 8005934:	4a37      	ldr	r2, [pc, #220]	; (8005a14 <HAL_RCC_OscConfig+0x6ac>)
 8005936:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800593a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800593c:	4b35      	ldr	r3, [pc, #212]	; (8005a14 <HAL_RCC_OscConfig+0x6ac>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a34      	ldr	r2, [pc, #208]	; (8005a14 <HAL_RCC_OscConfig+0x6ac>)
 8005942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005948:	f7fd faba 	bl	8002ec0 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005950:	f7fd fab6 	bl	8002ec0 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e053      	b.n	8005a0a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005962:	4b2c      	ldr	r3, [pc, #176]	; (8005a14 <HAL_RCC_OscConfig+0x6ac>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0f0      	beq.n	8005950 <HAL_RCC_OscConfig+0x5e8>
 800596e:	e04b      	b.n	8005a08 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005970:	4b28      	ldr	r3, [pc, #160]	; (8005a14 <HAL_RCC_OscConfig+0x6ac>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a27      	ldr	r2, [pc, #156]	; (8005a14 <HAL_RCC_OscConfig+0x6ac>)
 8005976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800597a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fd faa0 	bl	8002ec0 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005984:	f7fd fa9c 	bl	8002ec0 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e039      	b.n	8005a0a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005996:	4b1f      	ldr	r3, [pc, #124]	; (8005a14 <HAL_RCC_OscConfig+0x6ac>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <HAL_RCC_OscConfig+0x61c>
 80059a2:	e031      	b.n	8005a08 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80059a4:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <HAL_RCC_OscConfig+0x6ac>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d028      	beq.n	8005a04 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d121      	bne.n	8005a04 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d11a      	bne.n	8005a04 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059d4:	4013      	ands	r3, r2
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059dc:	4293      	cmp	r3, r2
 80059de:	d111      	bne.n	8005a04 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ea:	085b      	lsrs	r3, r3, #1
 80059ec:	3b01      	subs	r3, #1
 80059ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d107      	bne.n	8005a04 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d001      	beq.n	8005a08 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	40023800 	.word	0x40023800
 8005a18:	080150fc 	.word	0x080150fc

08005a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e18c      	b.n	8005d4e <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <HAL_RCC_ClockConfig+0x28>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b0f      	cmp	r3, #15
 8005a42:	d904      	bls.n	8005a4e <HAL_RCC_ClockConfig+0x32>
 8005a44:	f240 21dd 	movw	r1, #733	; 0x2dd
 8005a48:	4887      	ldr	r0, [pc, #540]	; (8005c68 <HAL_RCC_ClockConfig+0x24c>)
 8005a4a:	f7fc fd40 	bl	80024ce <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d031      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x9c>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d02e      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x9c>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d02b      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x9c>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d028      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x9c>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d025      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x9c>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b05      	cmp	r3, #5
 8005a70:	d022      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x9c>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b06      	cmp	r3, #6
 8005a76:	d01f      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x9c>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b07      	cmp	r3, #7
 8005a7c:	d01c      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x9c>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d019      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x9c>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b09      	cmp	r3, #9
 8005a88:	d016      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x9c>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b0a      	cmp	r3, #10
 8005a8e:	d013      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x9c>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b0b      	cmp	r3, #11
 8005a94:	d010      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x9c>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b0c      	cmp	r3, #12
 8005a9a:	d00d      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x9c>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b0d      	cmp	r3, #13
 8005aa0:	d00a      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x9c>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b0e      	cmp	r3, #14
 8005aa6:	d007      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x9c>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b0f      	cmp	r3, #15
 8005aac:	d004      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x9c>
 8005aae:	f240 21de 	movw	r1, #734	; 0x2de
 8005ab2:	486d      	ldr	r0, [pc, #436]	; (8005c68 <HAL_RCC_ClockConfig+0x24c>)
 8005ab4:	f7fc fd0b 	bl	80024ce <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ab8:	4b6c      	ldr	r3, [pc, #432]	; (8005c6c <HAL_RCC_ClockConfig+0x250>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d910      	bls.n	8005ae8 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac6:	4b69      	ldr	r3, [pc, #420]	; (8005c6c <HAL_RCC_ClockConfig+0x250>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f023 020f 	bic.w	r2, r3, #15
 8005ace:	4967      	ldr	r1, [pc, #412]	; (8005c6c <HAL_RCC_ClockConfig+0x250>)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad6:	4b65      	ldr	r3, [pc, #404]	; (8005c6c <HAL_RCC_ClockConfig+0x250>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d001      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e132      	b.n	8005d4e <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d049      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d005      	beq.n	8005b0c <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b00:	4b5b      	ldr	r3, [pc, #364]	; (8005c70 <HAL_RCC_ClockConfig+0x254>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	4a5a      	ldr	r2, [pc, #360]	; (8005c70 <HAL_RCC_ClockConfig+0x254>)
 8005b06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0308 	and.w	r3, r3, #8
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b18:	4b55      	ldr	r3, [pc, #340]	; (8005c70 <HAL_RCC_ClockConfig+0x254>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	4a54      	ldr	r2, [pc, #336]	; (8005c70 <HAL_RCC_ClockConfig+0x254>)
 8005b1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d024      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x15a>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b80      	cmp	r3, #128	; 0x80
 8005b32:	d020      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x15a>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	2b90      	cmp	r3, #144	; 0x90
 8005b3a:	d01c      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x15a>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	2ba0      	cmp	r3, #160	; 0xa0
 8005b42:	d018      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x15a>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	2bb0      	cmp	r3, #176	; 0xb0
 8005b4a:	d014      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x15a>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	2bc0      	cmp	r3, #192	; 0xc0
 8005b52:	d010      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x15a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	2bd0      	cmp	r3, #208	; 0xd0
 8005b5a:	d00c      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x15a>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	2be0      	cmp	r3, #224	; 0xe0
 8005b62:	d008      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x15a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	2bf0      	cmp	r3, #240	; 0xf0
 8005b6a:	d004      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x15a>
 8005b6c:	f240 3102 	movw	r1, #770	; 0x302
 8005b70:	483d      	ldr	r0, [pc, #244]	; (8005c68 <HAL_RCC_ClockConfig+0x24c>)
 8005b72:	f7fc fcac 	bl	80024ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b76:	4b3e      	ldr	r3, [pc, #248]	; (8005c70 <HAL_RCC_ClockConfig+0x254>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	493b      	ldr	r1, [pc, #236]	; (8005c70 <HAL_RCC_ClockConfig+0x254>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d051      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00c      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x19a>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d008      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x19a>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d004      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x19a>
 8005bac:	f240 3109 	movw	r1, #777	; 0x309
 8005bb0:	482d      	ldr	r0, [pc, #180]	; (8005c68 <HAL_RCC_ClockConfig+0x24c>)
 8005bb2:	f7fc fc8c 	bl	80024ce <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d107      	bne.n	8005bce <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bbe:	4b2c      	ldr	r3, [pc, #176]	; (8005c70 <HAL_RCC_ClockConfig+0x254>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d115      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e0bf      	b.n	8005d4e <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d107      	bne.n	8005be6 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bd6:	4b26      	ldr	r3, [pc, #152]	; (8005c70 <HAL_RCC_ClockConfig+0x254>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d109      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e0b3      	b.n	8005d4e <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005be6:	4b22      	ldr	r3, [pc, #136]	; (8005c70 <HAL_RCC_ClockConfig+0x254>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e0ab      	b.n	8005d4e <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bf6:	4b1e      	ldr	r3, [pc, #120]	; (8005c70 <HAL_RCC_ClockConfig+0x254>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f023 0203 	bic.w	r2, r3, #3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	491b      	ldr	r1, [pc, #108]	; (8005c70 <HAL_RCC_ClockConfig+0x254>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c08:	f7fd f95a 	bl	8002ec0 <HAL_GetTick>
 8005c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c0e:	e00a      	b.n	8005c26 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c10:	f7fd f956 	bl	8002ec0 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e093      	b.n	8005d4e <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c26:	4b12      	ldr	r3, [pc, #72]	; (8005c70 <HAL_RCC_ClockConfig+0x254>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 020c 	and.w	r2, r3, #12
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d1eb      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c38:	4b0c      	ldr	r3, [pc, #48]	; (8005c6c <HAL_RCC_ClockConfig+0x250>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d216      	bcs.n	8005c74 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c46:	4b09      	ldr	r3, [pc, #36]	; (8005c6c <HAL_RCC_ClockConfig+0x250>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f023 020f 	bic.w	r2, r3, #15
 8005c4e:	4907      	ldr	r1, [pc, #28]	; (8005c6c <HAL_RCC_ClockConfig+0x250>)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c56:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <HAL_RCC_ClockConfig+0x250>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d007      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e072      	b.n	8005d4e <HAL_RCC_ClockConfig+0x332>
 8005c68:	080150fc 	.word	0x080150fc
 8005c6c:	40023c00 	.word	0x40023c00
 8005c70:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d025      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d018      	beq.n	8005cba <HAL_RCC_ClockConfig+0x29e>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c90:	d013      	beq.n	8005cba <HAL_RCC_ClockConfig+0x29e>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c9a:	d00e      	beq.n	8005cba <HAL_RCC_ClockConfig+0x29e>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005ca4:	d009      	beq.n	8005cba <HAL_RCC_ClockConfig+0x29e>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005cae:	d004      	beq.n	8005cba <HAL_RCC_ClockConfig+0x29e>
 8005cb0:	f240 3146 	movw	r1, #838	; 0x346
 8005cb4:	4828      	ldr	r0, [pc, #160]	; (8005d58 <HAL_RCC_ClockConfig+0x33c>)
 8005cb6:	f7fc fc0a 	bl	80024ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cba:	4b28      	ldr	r3, [pc, #160]	; (8005d5c <HAL_RCC_ClockConfig+0x340>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	4925      	ldr	r1, [pc, #148]	; (8005d5c <HAL_RCC_ClockConfig+0x340>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0308 	and.w	r3, r3, #8
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d026      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d018      	beq.n	8005d12 <HAL_RCC_ClockConfig+0x2f6>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce8:	d013      	beq.n	8005d12 <HAL_RCC_ClockConfig+0x2f6>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005cf2:	d00e      	beq.n	8005d12 <HAL_RCC_ClockConfig+0x2f6>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005cfc:	d009      	beq.n	8005d12 <HAL_RCC_ClockConfig+0x2f6>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005d06:	d004      	beq.n	8005d12 <HAL_RCC_ClockConfig+0x2f6>
 8005d08:	f240 314d 	movw	r1, #845	; 0x34d
 8005d0c:	4812      	ldr	r0, [pc, #72]	; (8005d58 <HAL_RCC_ClockConfig+0x33c>)
 8005d0e:	f7fc fbde 	bl	80024ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d12:	4b12      	ldr	r3, [pc, #72]	; (8005d5c <HAL_RCC_ClockConfig+0x340>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	490e      	ldr	r1, [pc, #56]	; (8005d5c <HAL_RCC_ClockConfig+0x340>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d26:	f000 f821 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	4b0b      	ldr	r3, [pc, #44]	; (8005d5c <HAL_RCC_ClockConfig+0x340>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	091b      	lsrs	r3, r3, #4
 8005d32:	f003 030f 	and.w	r3, r3, #15
 8005d36:	490a      	ldr	r1, [pc, #40]	; (8005d60 <HAL_RCC_ClockConfig+0x344>)
 8005d38:	5ccb      	ldrb	r3, [r1, r3]
 8005d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3e:	4a09      	ldr	r2, [pc, #36]	; (8005d64 <HAL_RCC_ClockConfig+0x348>)
 8005d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d42:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <HAL_RCC_ClockConfig+0x34c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fd f876 	bl	8002e38 <HAL_InitTick>

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	080150fc 	.word	0x080150fc
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	0801522c 	.word	0x0801522c
 8005d64:	20000000 	.word	0x20000000
 8005d68:	20000004 	.word	0x20000004

08005d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d70:	b090      	sub	sp, #64	; 0x40
 8005d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	637b      	str	r3, [r7, #52]	; 0x34
 8005d78:	2300      	movs	r3, #0
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d84:	4b59      	ldr	r3, [pc, #356]	; (8005eec <HAL_RCC_GetSysClockFreq+0x180>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f003 030c 	and.w	r3, r3, #12
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d00d      	beq.n	8005dac <HAL_RCC_GetSysClockFreq+0x40>
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	f200 80a1 	bhi.w	8005ed8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <HAL_RCC_GetSysClockFreq+0x34>
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d003      	beq.n	8005da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d9e:	e09b      	b.n	8005ed8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005da0:	4b53      	ldr	r3, [pc, #332]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005da2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005da4:	e09b      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005da6:	4b53      	ldr	r3, [pc, #332]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005da8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005daa:	e098      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dac:	4b4f      	ldr	r3, [pc, #316]	; (8005eec <HAL_RCC_GetSysClockFreq+0x180>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005db6:	4b4d      	ldr	r3, [pc, #308]	; (8005eec <HAL_RCC_GetSysClockFreq+0x180>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d028      	beq.n	8005e14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dc2:	4b4a      	ldr	r3, [pc, #296]	; (8005eec <HAL_RCC_GetSysClockFreq+0x180>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	099b      	lsrs	r3, r3, #6
 8005dc8:	2200      	movs	r2, #0
 8005dca:	623b      	str	r3, [r7, #32]
 8005dcc:	627a      	str	r2, [r7, #36]	; 0x24
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	4b47      	ldr	r3, [pc, #284]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005dd8:	fb03 f201 	mul.w	r2, r3, r1
 8005ddc:	2300      	movs	r3, #0
 8005dde:	fb00 f303 	mul.w	r3, r0, r3
 8005de2:	4413      	add	r3, r2
 8005de4:	4a43      	ldr	r2, [pc, #268]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005de6:	fba0 1202 	umull	r1, r2, r0, r2
 8005dea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dec:	460a      	mov	r2, r1
 8005dee:	62ba      	str	r2, [r7, #40]	; 0x28
 8005df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005df2:	4413      	add	r3, r2
 8005df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df8:	2200      	movs	r2, #0
 8005dfa:	61bb      	str	r3, [r7, #24]
 8005dfc:	61fa      	str	r2, [r7, #28]
 8005dfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005e06:	f7fa ff5f 	bl	8000cc8 <__aeabi_uldivmod>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4613      	mov	r3, r2
 8005e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e12:	e053      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e14:	4b35      	ldr	r3, [pc, #212]	; (8005eec <HAL_RCC_GetSysClockFreq+0x180>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	099b      	lsrs	r3, r3, #6
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	617a      	str	r2, [r7, #20]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005e26:	f04f 0b00 	mov.w	fp, #0
 8005e2a:	4652      	mov	r2, sl
 8005e2c:	465b      	mov	r3, fp
 8005e2e:	f04f 0000 	mov.w	r0, #0
 8005e32:	f04f 0100 	mov.w	r1, #0
 8005e36:	0159      	lsls	r1, r3, #5
 8005e38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e3c:	0150      	lsls	r0, r2, #5
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	ebb2 080a 	subs.w	r8, r2, sl
 8005e46:	eb63 090b 	sbc.w	r9, r3, fp
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005e56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005e5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005e5e:	ebb2 0408 	subs.w	r4, r2, r8
 8005e62:	eb63 0509 	sbc.w	r5, r3, r9
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	f04f 0300 	mov.w	r3, #0
 8005e6e:	00eb      	lsls	r3, r5, #3
 8005e70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e74:	00e2      	lsls	r2, r4, #3
 8005e76:	4614      	mov	r4, r2
 8005e78:	461d      	mov	r5, r3
 8005e7a:	eb14 030a 	adds.w	r3, r4, sl
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	eb45 030b 	adc.w	r3, r5, fp
 8005e84:	607b      	str	r3, [r7, #4]
 8005e86:	f04f 0200 	mov.w	r2, #0
 8005e8a:	f04f 0300 	mov.w	r3, #0
 8005e8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e92:	4629      	mov	r1, r5
 8005e94:	028b      	lsls	r3, r1, #10
 8005e96:	4621      	mov	r1, r4
 8005e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	028a      	lsls	r2, r1, #10
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	60fa      	str	r2, [r7, #12]
 8005eac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005eb0:	f7fa ff0a 	bl	8000cc8 <__aeabi_uldivmod>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4613      	mov	r3, r2
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005ebc:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <HAL_RCC_GetSysClockFreq+0x180>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	0c1b      	lsrs	r3, r3, #16
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005ecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ed6:	e002      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ed8:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005eda:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3740      	adds	r7, #64	; 0x40
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eea:	bf00      	nop
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	00f42400 	.word	0x00f42400
 8005ef4:	017d7840 	.word	0x017d7840

08005ef8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005efc:	4b03      	ldr	r3, [pc, #12]	; (8005f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005efe:	681b      	ldr	r3, [r3, #0]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20000000 	.word	0x20000000

08005f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f14:	f7ff fff0 	bl	8005ef8 <HAL_RCC_GetHCLKFreq>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	0a9b      	lsrs	r3, r3, #10
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	4903      	ldr	r1, [pc, #12]	; (8005f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f26:	5ccb      	ldrb	r3, [r1, r3]
 8005f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40023800 	.word	0x40023800
 8005f34:	0801523c 	.word	0x0801523c

08005f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f3c:	f7ff ffdc 	bl	8005ef8 <HAL_RCC_GetHCLKFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	0b5b      	lsrs	r3, r3, #13
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	4903      	ldr	r1, [pc, #12]	; (8005f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f4e:	5ccb      	ldrb	r3, [r1, r3]
 8005f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	0801523c 	.word	0x0801523c

08005f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005f70:	2300      	movs	r3, #0
 8005f72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f040 8089 	bne.w	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0308 	and.w	r3, r3, #8
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f040 8082 	bne.w	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0310 	and.w	r3, r3, #16
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d17b      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d175      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d16f      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d169      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d163      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d15d      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d157      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d151      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d14b      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d145      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d13f      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d139      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d133      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d12d      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d127      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d121      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d11b      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d115      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10f      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d109      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0320 	and.w	r3, r3, #32
 8006090:	2b00      	cmp	r3, #0
 8006092:	d103      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006094:	2172      	movs	r1, #114	; 0x72
 8006096:	4895      	ldr	r0, [pc, #596]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006098:	f7fc fa19 	bl	80024ce <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01f      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060b8:	d003      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80060ba:	2178      	movs	r1, #120	; 0x78
 80060bc:	488b      	ldr	r0, [pc, #556]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80060be:	f7fc fa06 	bl	80024ce <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060c2:	4b8b      	ldr	r3, [pc, #556]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	4a8a      	ldr	r2, [pc, #552]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80060c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060cc:	6093      	str	r3, [r2, #8]
 80060ce:	4b88      	ldr	r3, [pc, #544]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d6:	4986      	ldr	r1, [pc, #536]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 80060e4:	2301      	movs	r3, #1
 80060e6:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d029      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00d      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006104:	d008      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800610e:	d003      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006110:	2188      	movs	r1, #136	; 0x88
 8006112:	4876      	ldr	r0, [pc, #472]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006114:	f7fc f9db 	bl	80024ce <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006118:	4b75      	ldr	r3, [pc, #468]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800611a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800611e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006126:	4972      	ldr	r1, [pc, #456]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006128:	4313      	orrs	r3, r2
 800612a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006136:	d101      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8006138:	2301      	movs	r3, #1
 800613a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8006144:	2301      	movs	r3, #1
 8006146:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d029      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00d      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006164:	d008      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800616e:	d003      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006170:	219c      	movs	r1, #156	; 0x9c
 8006172:	485e      	ldr	r0, [pc, #376]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006174:	f7fc f9ab 	bl	80024ce <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006178:	4b5d      	ldr	r3, [pc, #372]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800617a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800617e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	495a      	ldr	r1, [pc, #360]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006188:	4313      	orrs	r3, r2
 800618a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006196:	d101      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8006198:	2301      	movs	r3, #1
 800619a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 80061a4:	2301      	movs	r3, #1
 80061a6:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 80061b4:	2301      	movs	r3, #1
 80061b6:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0320 	and.w	r3, r3, #32
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 8186 	beq.w	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ce:	f000 80e4 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061da:	f000 80de 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	4a44      	ldr	r2, [pc, #272]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	f000 80d8 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	4a42      	ldr	r2, [pc, #264]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	f000 80d2 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fa:	4a40      	ldr	r2, [pc, #256]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	f000 80cc 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006206:	4a3e      	ldr	r2, [pc, #248]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8006208:	4293      	cmp	r3, r2
 800620a:	f000 80c6 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	4a3c      	ldr	r2, [pc, #240]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	f000 80c0 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621e:	4a3a      	ldr	r2, [pc, #232]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	f000 80ba 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622a:	4a38      	ldr	r2, [pc, #224]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800622c:	4293      	cmp	r3, r2
 800622e:	f000 80b4 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006236:	4a36      	ldr	r2, [pc, #216]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	f000 80ae 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006242:	4a34      	ldr	r2, [pc, #208]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	f000 80a8 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	4a32      	ldr	r2, [pc, #200]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8006250:	4293      	cmp	r3, r2
 8006252:	f000 80a2 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625a:	4a30      	ldr	r2, [pc, #192]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	f000 809c 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006266:	4a2e      	ldr	r2, [pc, #184]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	f000 8096 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006272:	4a2c      	ldr	r2, [pc, #176]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	f000 8090 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627e:	4a2a      	ldr	r2, [pc, #168]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	f000 808a 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	4a28      	ldr	r2, [pc, #160]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800628c:	4293      	cmp	r3, r2
 800628e:	f000 8084 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	4a26      	ldr	r2, [pc, #152]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d07e      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	4a24      	ldr	r2, [pc, #144]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d079      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062aa:	4a23      	ldr	r2, [pc, #140]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d074      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	4a21      	ldr	r2, [pc, #132]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d06f      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	4a20      	ldr	r2, [pc, #128]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d06a      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c8:	4a1e      	ldr	r2, [pc, #120]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d065      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d2:	4a1d      	ldr	r2, [pc, #116]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d060      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062dc:	4a1b      	ldr	r2, [pc, #108]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d05b      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e6:	4a1a      	ldr	r2, [pc, #104]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	e033      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80062ec:	08015134 	.word	0x08015134
 80062f0:	40023800 	.word	0x40023800
 80062f4:	00020300 	.word	0x00020300
 80062f8:	00030300 	.word	0x00030300
 80062fc:	00040300 	.word	0x00040300
 8006300:	00050300 	.word	0x00050300
 8006304:	00060300 	.word	0x00060300
 8006308:	00070300 	.word	0x00070300
 800630c:	00080300 	.word	0x00080300
 8006310:	00090300 	.word	0x00090300
 8006314:	000a0300 	.word	0x000a0300
 8006318:	000b0300 	.word	0x000b0300
 800631c:	000c0300 	.word	0x000c0300
 8006320:	000d0300 	.word	0x000d0300
 8006324:	000e0300 	.word	0x000e0300
 8006328:	000f0300 	.word	0x000f0300
 800632c:	00100300 	.word	0x00100300
 8006330:	00110300 	.word	0x00110300
 8006334:	00120300 	.word	0x00120300
 8006338:	00130300 	.word	0x00130300
 800633c:	00140300 	.word	0x00140300
 8006340:	00150300 	.word	0x00150300
 8006344:	00160300 	.word	0x00160300
 8006348:	00170300 	.word	0x00170300
 800634c:	00180300 	.word	0x00180300
 8006350:	00190300 	.word	0x00190300
 8006354:	d021      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	4a4c      	ldr	r2, [pc, #304]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d01c      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006364:	4a4a      	ldr	r2, [pc, #296]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d017      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636e:	4a49      	ldr	r2, [pc, #292]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d012      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006378:	4a47      	ldr	r2, [pc, #284]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00d      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006382:	4a46      	ldr	r2, [pc, #280]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d008      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638c:	4a44      	ldr	r2, [pc, #272]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d003      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006392:	21b7      	movs	r1, #183	; 0xb7
 8006394:	4843      	ldr	r0, [pc, #268]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8006396:	f7fc f89a 	bl	80024ce <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800639a:	4b43      	ldr	r3, [pc, #268]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	4a42      	ldr	r2, [pc, #264]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a4:	6413      	str	r3, [r2, #64]	; 0x40
 80063a6:	4b40      	ldr	r3, [pc, #256]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ae:	60bb      	str	r3, [r7, #8]
 80063b0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80063b2:	4b3e      	ldr	r3, [pc, #248]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a3d      	ldr	r2, [pc, #244]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80063b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063be:	f7fc fd7f 	bl	8002ec0 <HAL_GetTick>
 80063c2:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80063c4:	e009      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063c6:	f7fc fd7b 	bl	8002ec0 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b64      	cmp	r3, #100	; 0x64
 80063d2:	d902      	bls.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	f000 bd9f 	b.w	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80063da:	4b34      	ldr	r3, [pc, #208]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0ef      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063e6:	4b30      	ldr	r3, [pc, #192]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d036      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	429a      	cmp	r2, r3
 8006402:	d02f      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006404:	4b28      	ldr	r3, [pc, #160]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800640c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800640e:	4b26      	ldr	r3, [pc, #152]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006412:	4a25      	ldr	r2, [pc, #148]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006418:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800641a:	4b23      	ldr	r3, [pc, #140]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800641c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641e:	4a22      	ldr	r2, [pc, #136]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006424:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006426:	4a20      	ldr	r2, [pc, #128]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800642c:	4b1e      	ldr	r3, [pc, #120]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800642e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b01      	cmp	r3, #1
 8006436:	d115      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006438:	f7fc fd42 	bl	8002ec0 <HAL_GetTick>
 800643c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800643e:	e00b      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006440:	f7fc fd3e 	bl	8002ec0 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	f241 3288 	movw	r2, #5000	; 0x1388
 800644e:	4293      	cmp	r3, r2
 8006450:	d902      	bls.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	f000 bd60 	b.w	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006458:	4b13      	ldr	r3, [pc, #76]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800645a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0ed      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006470:	d120      	bne.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8006472:	4b0d      	ldr	r3, [pc, #52]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800647e:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006480:	400b      	ands	r3, r1
 8006482:	4909      	ldr	r1, [pc, #36]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006484:	4313      	orrs	r3, r2
 8006486:	608b      	str	r3, [r1, #8]
 8006488:	e01a      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x560>
 800648a:	bf00      	nop
 800648c:	001a0300 	.word	0x001a0300
 8006490:	001b0300 	.word	0x001b0300
 8006494:	001c0300 	.word	0x001c0300
 8006498:	001d0300 	.word	0x001d0300
 800649c:	001e0300 	.word	0x001e0300
 80064a0:	001f0300 	.word	0x001f0300
 80064a4:	08015134 	.word	0x08015134
 80064a8:	40023800 	.word	0x40023800
 80064ac:	40007000 	.word	0x40007000
 80064b0:	0ffffcff 	.word	0x0ffffcff
 80064b4:	4b9a      	ldr	r3, [pc, #616]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	4a99      	ldr	r2, [pc, #612]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80064ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80064be:	6093      	str	r3, [r2, #8]
 80064c0:	4b97      	ldr	r3, [pc, #604]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80064c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064cc:	4994      	ldr	r1, [pc, #592]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0310 	and.w	r3, r3, #16
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d01d      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d008      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064ee:	d003      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80064f0:	21f1      	movs	r1, #241	; 0xf1
 80064f2:	488c      	ldr	r0, [pc, #560]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80064f4:	f7fb ffeb 	bl	80024ce <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064f8:	4b89      	ldr	r3, [pc, #548]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80064fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064fe:	4a88      	ldr	r2, [pc, #544]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006504:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006508:	4b85      	ldr	r3, [pc, #532]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800650a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	4983      	ldr	r1, [pc, #524]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006514:	4313      	orrs	r3, r2
 8006516:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d01c      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00d      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006536:	d008      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800653c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006540:	d003      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006542:	21fb      	movs	r1, #251	; 0xfb
 8006544:	4877      	ldr	r0, [pc, #476]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006546:	f7fb ffc2 	bl	80024ce <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800654a:	4b75      	ldr	r3, [pc, #468]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800654c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006550:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006558:	4971      	ldr	r1, [pc, #452]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800655a:	4313      	orrs	r3, r2
 800655c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d01d      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00e      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006578:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800657c:	d009      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x632>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006582:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006586:	d004      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006588:	f240 1105 	movw	r1, #261	; 0x105
 800658c:	4865      	ldr	r0, [pc, #404]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800658e:	f7fb ff9e 	bl	80024ce <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006592:	4b63      	ldr	r3, [pc, #396]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006598:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065a0:	495f      	ldr	r1, [pc, #380]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01d      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00e      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065c4:	d009      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065ce:	d004      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80065d0:	f240 110f 	movw	r1, #271	; 0x10f
 80065d4:	4853      	ldr	r0, [pc, #332]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80065d6:	f7fb ff7a 	bl	80024ce <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065da:	4b51      	ldr	r3, [pc, #324]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80065dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065e8:	494d      	ldr	r1, [pc, #308]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01d      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00e      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800660c:	d009      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006612:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006616:	d004      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006618:	f240 1119 	movw	r1, #281	; 0x119
 800661c:	4841      	ldr	r0, [pc, #260]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800661e:	f7fb ff56 	bl	80024ce <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006622:	4b3f      	ldr	r3, [pc, #252]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006628:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006630:	493b      	ldr	r1, [pc, #236]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006632:	4313      	orrs	r3, r2
 8006634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006640:	2b00      	cmp	r3, #0
 8006642:	d01f      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006648:	2b00      	cmp	r3, #0
 800664a:	d010      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006650:	2b01      	cmp	r3, #1
 8006652:	d00c      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006658:	2b03      	cmp	r3, #3
 800665a:	d008      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006660:	2b02      	cmp	r3, #2
 8006662:	d004      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006664:	f240 1123 	movw	r1, #291	; 0x123
 8006668:	482e      	ldr	r0, [pc, #184]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800666a:	f7fb ff30 	bl	80024ce <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800666e:	4b2c      	ldr	r3, [pc, #176]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006674:	f023 0203 	bic.w	r2, r3, #3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667c:	4928      	ldr	r1, [pc, #160]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800667e:	4313      	orrs	r3, r2
 8006680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01f      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006694:	2b00      	cmp	r3, #0
 8006696:	d010      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669c:	2b04      	cmp	r3, #4
 800669e:	d00c      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a4:	2b0c      	cmp	r3, #12
 80066a6:	d008      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d004      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80066b0:	f240 112d 	movw	r1, #301	; 0x12d
 80066b4:	481b      	ldr	r0, [pc, #108]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80066b6:	f7fb ff0a 	bl	80024ce <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066ba:	4b19      	ldr	r3, [pc, #100]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80066bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c0:	f023 020c 	bic.w	r2, r3, #12
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c8:	4915      	ldr	r1, [pc, #84]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d025      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d010      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e8:	2b10      	cmp	r3, #16
 80066ea:	d00c      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f0:	2b30      	cmp	r3, #48	; 0x30
 80066f2:	d008      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d004      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80066fc:	f240 1137 	movw	r1, #311	; 0x137
 8006700:	4808      	ldr	r0, [pc, #32]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006702:	f7fb fee4 	bl	80024ce <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006706:	4b06      	ldr	r3, [pc, #24]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006714:	4902      	ldr	r1, [pc, #8]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006716:	4313      	orrs	r3, r2
 8006718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800671c:	e004      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 800671e:	bf00      	nop
 8006720:	40023800 	.word	0x40023800
 8006724:	08015134 	.word	0x08015134
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01f      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006738:	2b00      	cmp	r3, #0
 800673a:	d010      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	d00c      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006748:	2bc0      	cmp	r3, #192	; 0xc0
 800674a:	d008      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006750:	2b80      	cmp	r3, #128	; 0x80
 8006752:	d004      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006754:	f240 1141 	movw	r1, #321	; 0x141
 8006758:	48a0      	ldr	r0, [pc, #640]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800675a:	f7fb feb8 	bl	80024ce <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800675e:	4ba0      	ldr	r3, [pc, #640]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006764:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800676c:	499c      	ldr	r1, [pc, #624]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800677c:	2b00      	cmp	r3, #0
 800677e:	d022      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006784:	2b00      	cmp	r3, #0
 8006786:	d013      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006790:	d00e      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800679a:	d009      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a4:	d004      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x850>
 80067a6:	f240 114b 	movw	r1, #331	; 0x14b
 80067aa:	488c      	ldr	r0, [pc, #560]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80067ac:	f7fb fe8f 	bl	80024ce <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80067b0:	4b8b      	ldr	r3, [pc, #556]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80067b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067be:	4988      	ldr	r1, [pc, #544]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d022      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d013      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e2:	d00e      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067ec:	d009      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067f6:	d004      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80067f8:	f240 1155 	movw	r1, #341	; 0x155
 80067fc:	4877      	ldr	r0, [pc, #476]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80067fe:	f7fb fe66 	bl	80024ce <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006802:	4b77      	ldr	r3, [pc, #476]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006808:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006810:	4973      	ldr	r1, [pc, #460]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006812:	4313      	orrs	r3, r2
 8006814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d022      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006828:	2b00      	cmp	r3, #0
 800682a:	d013      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006834:	d00e      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800683e:	d009      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006848:	d004      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800684a:	f240 115f 	movw	r1, #351	; 0x15f
 800684e:	4863      	ldr	r0, [pc, #396]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006850:	f7fb fe3d 	bl	80024ce <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006854:	4b62      	ldr	r3, [pc, #392]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006862:	495f      	ldr	r1, [pc, #380]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006864:	4313      	orrs	r3, r2
 8006866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d022      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800687a:	2b00      	cmp	r3, #0
 800687c:	d013      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006886:	d00e      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800688c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006890:	d009      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800689a:	d004      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800689c:	f240 1169 	movw	r1, #361	; 0x169
 80068a0:	484e      	ldr	r0, [pc, #312]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80068a2:	f7fb fe14 	bl	80024ce <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80068a6:	4b4e      	ldr	r3, [pc, #312]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80068a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068b4:	494a      	ldr	r1, [pc, #296]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d018      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068d0:	d008      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d004      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80068da:	f240 1173 	movw	r1, #371	; 0x173
 80068de:	483f      	ldr	r0, [pc, #252]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80068e0:	f7fb fdf5 	bl	80024ce <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068e4:	4b3e      	ldr	r3, [pc, #248]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80068e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068f2:	493b      	ldr	r1, [pc, #236]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d01f      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800690a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800690e:	d008      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006914:	2b00      	cmp	r3, #0
 8006916:	d004      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8006918:	f240 117d 	movw	r1, #381	; 0x17d
 800691c:	482f      	ldr	r0, [pc, #188]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800691e:	f7fb fdd6 	bl	80024ce <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006922:	4b2f      	ldr	r3, [pc, #188]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006928:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006930:	492b      	ldr	r1, [pc, #172]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006932:	4313      	orrs	r3, r2
 8006934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800693c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006940:	d101      	bne.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 8006942:	2301      	movs	r3, #1
 8006944:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0308 	and.w	r3, r3, #8
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 8006952:	2301      	movs	r3, #1
 8006954:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d022      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006966:	2b00      	cmp	r3, #0
 8006968:	d013      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800696e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006972:	d00e      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800697c:	d009      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006982:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006986:	d004      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006988:	f240 1195 	movw	r1, #405	; 0x195
 800698c:	4813      	ldr	r0, [pc, #76]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800698e:	f7fb fd9e 	bl	80024ce <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006992:	4b13      	ldr	r3, [pc, #76]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006998:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a0:	490f      	ldr	r1, [pc, #60]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d020      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069be:	d009      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d004      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80069ca:	f240 119f 	movw	r1, #415	; 0x19f
 80069ce:	4803      	ldr	r0, [pc, #12]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80069d0:	f7fb fd7d 	bl	80024ce <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80069d4:	4b02      	ldr	r3, [pc, #8]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80069d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069da:	e003      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 80069dc:	08015134 	.word	0x08015134
 80069e0:	40023800 	.word	0x40023800
 80069e4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ee:	4910      	ldr	r1, [pc, #64]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d006      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 8155 	beq.w	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a0a:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a08      	ldr	r2, [pc, #32]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8006a10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a16:	f7fc fa53 	bl	8002ec0 <HAL_GetTick>
 8006a1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a1c:	e00a      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a1e:	f7fc fa4f 	bl	8002ec0 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	2b64      	cmp	r3, #100	; 0x64
 8006a2a:	d903      	bls.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e273      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8006a30:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a34:	4b9a      	ldr	r3, [pc, #616]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1ee      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	2b31      	cmp	r3, #49	; 0x31
 8006a46:	d904      	bls.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006a50:	d904      	bls.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8006a52:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8006a56:	4893      	ldr	r0, [pc, #588]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006a58:	f7fb fd39 	bl	80024ce <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d02e      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d12a      	bne.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d903      	bls.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	2b07      	cmp	r3, #7
 8006a7e:	d904      	bls.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006a80:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8006a84:	4887      	ldr	r0, [pc, #540]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006a86:	f7fb fd22 	bl	80024ce <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a8a:	4b85      	ldr	r3, [pc, #532]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a90:	0c1b      	lsrs	r3, r3, #16
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a98:	4b81      	ldr	r3, [pc, #516]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a9e:	0e1b      	lsrs	r3, r3, #24
 8006aa0:	f003 030f 	and.w	r3, r3, #15
 8006aa4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	019a      	lsls	r2, r3, #6
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	041b      	lsls	r3, r3, #16
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	061b      	lsls	r3, r3, #24
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	071b      	lsls	r3, r3, #28
 8006abe:	4978      	ldr	r1, [pc, #480]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d004      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ada:	d00a      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d048      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006af0:	d143      	bne.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d903      	bls.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	2b0f      	cmp	r3, #15
 8006b00:	d904      	bls.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006b02:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8006b06:	4867      	ldr	r0, [pc, #412]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006b08:	f7fb fce1 	bl	80024ce <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d904      	bls.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8006b1c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8006b20:	4860      	ldr	r0, [pc, #384]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006b22:	f7fb fcd4 	bl	80024ce <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b26:	4b5e      	ldr	r3, [pc, #376]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b2c:	0c1b      	lsrs	r3, r3, #16
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b34:	4b5a      	ldr	r3, [pc, #360]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b3a:	0f1b      	lsrs	r3, r3, #28
 8006b3c:	f003 0307 	and.w	r3, r3, #7
 8006b40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	019a      	lsls	r2, r3, #6
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	061b      	lsls	r3, r3, #24
 8006b54:	431a      	orrs	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	071b      	lsls	r3, r3, #28
 8006b5a:	4951      	ldr	r1, [pc, #324]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b62:	4b4f      	ldr	r3, [pc, #316]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b68:	f023 021f 	bic.w	r2, r3, #31
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	3b01      	subs	r3, #1
 8006b72:	494b      	ldr	r1, [pc, #300]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d032      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d010      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d00c      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d008      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d004      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006ba6:	f240 2105 	movw	r1, #517	; 0x205
 8006baa:	483e      	ldr	r0, [pc, #248]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006bac:	f7fb fc8f 	bl	80024ce <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006bb0:	4b3b      	ldr	r3, [pc, #236]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bb6:	0e1b      	lsrs	r3, r3, #24
 8006bb8:	f003 030f 	and.w	r3, r3, #15
 8006bbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006bbe:	4b38      	ldr	r3, [pc, #224]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bc4:	0f1b      	lsrs	r3, r3, #28
 8006bc6:	f003 0307 	and.w	r3, r3, #7
 8006bca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	019a      	lsls	r2, r3, #6
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	041b      	lsls	r3, r3, #16
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	061b      	lsls	r3, r3, #24
 8006bde:	431a      	orrs	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	071b      	lsls	r3, r3, #28
 8006be4:	492e      	ldr	r1, [pc, #184]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d040      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d010      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d00c      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d008      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d004      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006c18:	f44f 7105 	mov.w	r1, #532	; 0x214
 8006c1c:	4821      	ldr	r0, [pc, #132]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006c1e:	f7fb fc56 	bl	80024ce <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d903      	bls.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	2b07      	cmp	r3, #7
 8006c30:	d904      	bls.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006c32:	f240 2115 	movw	r1, #533	; 0x215
 8006c36:	481b      	ldr	r0, [pc, #108]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006c38:	f7fb fc49 	bl	80024ce <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d903      	bls.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	2b0f      	cmp	r3, #15
 8006c4a:	d904      	bls.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8006c4c:	f240 2116 	movw	r1, #534	; 0x216
 8006c50:	4814      	ldr	r0, [pc, #80]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006c52:	f7fb fc3c 	bl	80024ce <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	019a      	lsls	r2, r3, #6
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	041b      	lsls	r3, r3, #16
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	061b      	lsls	r3, r3, #24
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	071b      	lsls	r3, r3, #28
 8006c72:	490b      	ldr	r1, [pc, #44]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c7a:	4b09      	ldr	r3, [pc, #36]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a08      	ldr	r2, [pc, #32]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006c80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c86:	f7fc f91b 	bl	8002ec0 <HAL_GetTick>
 8006c8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c8c:	e00c      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c8e:	f7fc f917 	bl	8002ec0 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	2b64      	cmp	r3, #100	; 0x64
 8006c9a:	d905      	bls.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e13b      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8006ca0:	40023800 	.word	0x40023800
 8006ca4:	08015134 	.word	0x08015134
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ca8:	4b9d      	ldr	r3, [pc, #628]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0ec      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	f040 812d 	bne.w	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006cbc:	4b98      	ldr	r3, [pc, #608]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a97      	ldr	r2, [pc, #604]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cc8:	f7fc f8fa 	bl	8002ec0 <HAL_GetTick>
 8006ccc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cce:	e008      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006cd0:	f7fc f8f6 	bl	8002ec0 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b64      	cmp	r3, #100	; 0x64
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e11a      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ce2:	4b8f      	ldr	r3, [pc, #572]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cee:	d0ef      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	2b31      	cmp	r3, #49	; 0x31
 8006cf6:	d904      	bls.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006d00:	d904      	bls.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8006d02:	f44f 7111 	mov.w	r1, #580	; 0x244
 8006d06:	4887      	ldr	r0, [pc, #540]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006d08:	f7fb fbe1 	bl	80024ce <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d009      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d048      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d144      	bne.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d903      	bls.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	2b0f      	cmp	r3, #15
 8006d42:	d904      	bls.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8006d44:	f240 214b 	movw	r1, #587	; 0x24b
 8006d48:	4876      	ldr	r0, [pc, #472]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006d4a:	f7fb fbc0 	bl	80024ce <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5a:	2b20      	cmp	r3, #32
 8006d5c:	d904      	bls.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8006d5e:	f240 214d 	movw	r1, #589	; 0x24d
 8006d62:	4870      	ldr	r0, [pc, #448]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006d64:	f7fb fbb3 	bl	80024ce <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d68:	4b6d      	ldr	r3, [pc, #436]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6e:	0c1b      	lsrs	r3, r3, #16
 8006d70:	f003 0303 	and.w	r3, r3, #3
 8006d74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d76:	4b6a      	ldr	r3, [pc, #424]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7c:	0f1b      	lsrs	r3, r3, #28
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	019a      	lsls	r2, r3, #6
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	041b      	lsls	r3, r3, #16
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	061b      	lsls	r3, r3, #24
 8006d96:	431a      	orrs	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	071b      	lsls	r3, r3, #28
 8006d9c:	4960      	ldr	r1, [pc, #384]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006da4:	4b5e      	ldr	r3, [pc, #376]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006daa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db2:	3b01      	subs	r3, #1
 8006db4:	021b      	lsls	r3, r3, #8
 8006db6:	495a      	ldr	r1, [pc, #360]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d037      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xeda>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dd2:	d132      	bne.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d010      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d00c      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d008      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d004      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8006df4:	f44f 7118 	mov.w	r1, #608	; 0x260
 8006df8:	484a      	ldr	r0, [pc, #296]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006dfa:	f7fb fb68 	bl	80024ce <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006dfe:	4b48      	ldr	r3, [pc, #288]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e04:	0e1b      	lsrs	r3, r3, #24
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006e0c:	4b44      	ldr	r3, [pc, #272]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e12:	0f1b      	lsrs	r3, r3, #28
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	019a      	lsls	r2, r3, #6
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	041b      	lsls	r3, r3, #16
 8006e26:	431a      	orrs	r2, r3
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	061b      	lsls	r3, r3, #24
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	071b      	lsls	r3, r3, #28
 8006e32:	493b      	ldr	r1, [pc, #236]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0308 	and.w	r3, r3, #8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d04d      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d903      	bls.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	2b07      	cmp	r3, #7
 8006e54:	d904      	bls.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8006e56:	f240 216f 	movw	r1, #623	; 0x26f
 8006e5a:	4832      	ldr	r0, [pc, #200]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006e5c:	f7fb fb37 	bl	80024ce <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d013      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e70:	d00e      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e7a:	d009      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e84:	d004      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8006e86:	f44f 711c 	mov.w	r1, #624	; 0x270
 8006e8a:	4826      	ldr	r0, [pc, #152]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006e8c:	f7fb fb1f 	bl	80024ce <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006e90:	4b23      	ldr	r3, [pc, #140]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e96:	0e1b      	lsrs	r3, r3, #24
 8006e98:	f003 030f 	and.w	r3, r3, #15
 8006e9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006e9e:	4b20      	ldr	r3, [pc, #128]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea4:	0c1b      	lsrs	r3, r3, #16
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	019a      	lsls	r2, r3, #6
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	041b      	lsls	r3, r3, #16
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	061b      	lsls	r3, r3, #24
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	071b      	lsls	r3, r3, #28
 8006ec4:	4916      	ldr	r1, [pc, #88]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006ecc:	4b14      	ldr	r3, [pc, #80]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ed2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eda:	4911      	ldr	r1, [pc, #68]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006ee2:	4b0f      	ldr	r3, [pc, #60]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a0e      	ldr	r2, [pc, #56]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eee:	f7fb ffe7 	bl	8002ec0 <HAL_GetTick>
 8006ef2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ef4:	e008      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ef6:	f7fb ffe3 	bl	8002ec0 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b64      	cmp	r3, #100	; 0x64
 8006f02:	d901      	bls.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e007      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f08:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f14:	d1ef      	bne.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3720      	adds	r7, #32
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	40023800 	.word	0x40023800
 8006f24:	08015134 	.word	0x08015134

08006f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e0f5      	b.n	8007126 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a7c      	ldr	r2, [pc, #496]	; (8007130 <HAL_TIM_Base_Init+0x208>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d045      	beq.n	8006fd0 <HAL_TIM_Base_Init+0xa8>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4c:	d040      	beq.n	8006fd0 <HAL_TIM_Base_Init+0xa8>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a78      	ldr	r2, [pc, #480]	; (8007134 <HAL_TIM_Base_Init+0x20c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d03b      	beq.n	8006fd0 <HAL_TIM_Base_Init+0xa8>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a76      	ldr	r2, [pc, #472]	; (8007138 <HAL_TIM_Base_Init+0x210>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d036      	beq.n	8006fd0 <HAL_TIM_Base_Init+0xa8>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a75      	ldr	r2, [pc, #468]	; (800713c <HAL_TIM_Base_Init+0x214>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d031      	beq.n	8006fd0 <HAL_TIM_Base_Init+0xa8>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a73      	ldr	r2, [pc, #460]	; (8007140 <HAL_TIM_Base_Init+0x218>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d02c      	beq.n	8006fd0 <HAL_TIM_Base_Init+0xa8>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a72      	ldr	r2, [pc, #456]	; (8007144 <HAL_TIM_Base_Init+0x21c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d027      	beq.n	8006fd0 <HAL_TIM_Base_Init+0xa8>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a70      	ldr	r2, [pc, #448]	; (8007148 <HAL_TIM_Base_Init+0x220>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d022      	beq.n	8006fd0 <HAL_TIM_Base_Init+0xa8>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a6f      	ldr	r2, [pc, #444]	; (800714c <HAL_TIM_Base_Init+0x224>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d01d      	beq.n	8006fd0 <HAL_TIM_Base_Init+0xa8>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a6d      	ldr	r2, [pc, #436]	; (8007150 <HAL_TIM_Base_Init+0x228>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d018      	beq.n	8006fd0 <HAL_TIM_Base_Init+0xa8>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a6c      	ldr	r2, [pc, #432]	; (8007154 <HAL_TIM_Base_Init+0x22c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d013      	beq.n	8006fd0 <HAL_TIM_Base_Init+0xa8>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a6a      	ldr	r2, [pc, #424]	; (8007158 <HAL_TIM_Base_Init+0x230>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00e      	beq.n	8006fd0 <HAL_TIM_Base_Init+0xa8>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a69      	ldr	r2, [pc, #420]	; (800715c <HAL_TIM_Base_Init+0x234>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d009      	beq.n	8006fd0 <HAL_TIM_Base_Init+0xa8>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a67      	ldr	r2, [pc, #412]	; (8007160 <HAL_TIM_Base_Init+0x238>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d004      	beq.n	8006fd0 <HAL_TIM_Base_Init+0xa8>
 8006fc6:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006fca:	4866      	ldr	r0, [pc, #408]	; (8007164 <HAL_TIM_Base_Init+0x23c>)
 8006fcc:	f7fb fa7f 	bl	80024ce <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d014      	beq.n	8007002 <HAL_TIM_Base_Init+0xda>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	2b10      	cmp	r3, #16
 8006fde:	d010      	beq.n	8007002 <HAL_TIM_Base_Init+0xda>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	2b20      	cmp	r3, #32
 8006fe6:	d00c      	beq.n	8007002 <HAL_TIM_Base_Init+0xda>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	2b40      	cmp	r3, #64	; 0x40
 8006fee:	d008      	beq.n	8007002 <HAL_TIM_Base_Init+0xda>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	2b60      	cmp	r3, #96	; 0x60
 8006ff6:	d004      	beq.n	8007002 <HAL_TIM_Base_Init+0xda>
 8006ff8:	f240 1117 	movw	r1, #279	; 0x117
 8006ffc:	4859      	ldr	r0, [pc, #356]	; (8007164 <HAL_TIM_Base_Init+0x23c>)
 8006ffe:	f7fb fa66 	bl	80024ce <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00e      	beq.n	8007028 <HAL_TIM_Base_Init+0x100>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007012:	d009      	beq.n	8007028 <HAL_TIM_Base_Init+0x100>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800701c:	d004      	beq.n	8007028 <HAL_TIM_Base_Init+0x100>
 800701e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8007022:	4850      	ldr	r0, [pc, #320]	; (8007164 <HAL_TIM_Base_Init+0x23c>)
 8007024:	f7fb fa53 	bl	80024ce <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007030:	d004      	beq.n	800703c <HAL_TIM_Base_Init+0x114>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a41      	ldr	r2, [pc, #260]	; (800713c <HAL_TIM_Base_Init+0x214>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d107      	bne.n	800704c <HAL_TIM_Base_Init+0x124>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	2b00      	cmp	r3, #0
 8007042:	bf14      	ite	ne
 8007044:	2301      	movne	r3, #1
 8007046:	2300      	moveq	r3, #0
 8007048:	b2db      	uxtb	r3, r3
 800704a:	e00e      	b.n	800706a <HAL_TIM_Base_Init+0x142>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d006      	beq.n	8007062 <HAL_TIM_Base_Init+0x13a>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800705c:	d201      	bcs.n	8007062 <HAL_TIM_Base_Init+0x13a>
 800705e:	2301      	movs	r3, #1
 8007060:	e000      	b.n	8007064 <HAL_TIM_Base_Init+0x13c>
 8007062:	2300      	movs	r3, #0
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d104      	bne.n	8007078 <HAL_TIM_Base_Init+0x150>
 800706e:	f240 1119 	movw	r1, #281	; 0x119
 8007072:	483c      	ldr	r0, [pc, #240]	; (8007164 <HAL_TIM_Base_Init+0x23c>)
 8007074:	f7fb fa2b 	bl	80024ce <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d008      	beq.n	8007092 <HAL_TIM_Base_Init+0x16a>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	2b80      	cmp	r3, #128	; 0x80
 8007086:	d004      	beq.n	8007092 <HAL_TIM_Base_Init+0x16a>
 8007088:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800708c:	4835      	ldr	r0, [pc, #212]	; (8007164 <HAL_TIM_Base_Init+0x23c>)
 800708e:	f7fb fa1e 	bl	80024ce <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d106      	bne.n	80070ac <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7fb fd76 	bl	8002b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2202      	movs	r2, #2
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3304      	adds	r3, #4
 80070bc:	4619      	mov	r1, r3
 80070be:	4610      	mov	r0, r2
 80070c0:	f001 fa52 	bl	8008568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	40010000 	.word	0x40010000
 8007134:	40000400 	.word	0x40000400
 8007138:	40000800 	.word	0x40000800
 800713c:	40000c00 	.word	0x40000c00
 8007140:	40001000 	.word	0x40001000
 8007144:	40001400 	.word	0x40001400
 8007148:	40010400 	.word	0x40010400
 800714c:	40014000 	.word	0x40014000
 8007150:	40014400 	.word	0x40014400
 8007154:	40014800 	.word	0x40014800
 8007158:	40001800 	.word	0x40001800
 800715c:	40001c00 	.word	0x40001c00
 8007160:	40002000 	.word	0x40002000
 8007164:	08015170 	.word	0x08015170

08007168 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e0f5      	b.n	8007366 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a7c      	ldr	r2, [pc, #496]	; (8007370 <HAL_TIM_PWM_Init+0x208>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d045      	beq.n	8007210 <HAL_TIM_PWM_Init+0xa8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718c:	d040      	beq.n	8007210 <HAL_TIM_PWM_Init+0xa8>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a78      	ldr	r2, [pc, #480]	; (8007374 <HAL_TIM_PWM_Init+0x20c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d03b      	beq.n	8007210 <HAL_TIM_PWM_Init+0xa8>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a76      	ldr	r2, [pc, #472]	; (8007378 <HAL_TIM_PWM_Init+0x210>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d036      	beq.n	8007210 <HAL_TIM_PWM_Init+0xa8>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a75      	ldr	r2, [pc, #468]	; (800737c <HAL_TIM_PWM_Init+0x214>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d031      	beq.n	8007210 <HAL_TIM_PWM_Init+0xa8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a73      	ldr	r2, [pc, #460]	; (8007380 <HAL_TIM_PWM_Init+0x218>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d02c      	beq.n	8007210 <HAL_TIM_PWM_Init+0xa8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a72      	ldr	r2, [pc, #456]	; (8007384 <HAL_TIM_PWM_Init+0x21c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d027      	beq.n	8007210 <HAL_TIM_PWM_Init+0xa8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a70      	ldr	r2, [pc, #448]	; (8007388 <HAL_TIM_PWM_Init+0x220>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d022      	beq.n	8007210 <HAL_TIM_PWM_Init+0xa8>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a6f      	ldr	r2, [pc, #444]	; (800738c <HAL_TIM_PWM_Init+0x224>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d01d      	beq.n	8007210 <HAL_TIM_PWM_Init+0xa8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a6d      	ldr	r2, [pc, #436]	; (8007390 <HAL_TIM_PWM_Init+0x228>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d018      	beq.n	8007210 <HAL_TIM_PWM_Init+0xa8>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a6c      	ldr	r2, [pc, #432]	; (8007394 <HAL_TIM_PWM_Init+0x22c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d013      	beq.n	8007210 <HAL_TIM_PWM_Init+0xa8>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a6a      	ldr	r2, [pc, #424]	; (8007398 <HAL_TIM_PWM_Init+0x230>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d00e      	beq.n	8007210 <HAL_TIM_PWM_Init+0xa8>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a69      	ldr	r2, [pc, #420]	; (800739c <HAL_TIM_PWM_Init+0x234>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d009      	beq.n	8007210 <HAL_TIM_PWM_Init+0xa8>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a67      	ldr	r2, [pc, #412]	; (80073a0 <HAL_TIM_PWM_Init+0x238>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d004      	beq.n	8007210 <HAL_TIM_PWM_Init+0xa8>
 8007206:	f240 5133 	movw	r1, #1331	; 0x533
 800720a:	4866      	ldr	r0, [pc, #408]	; (80073a4 <HAL_TIM_PWM_Init+0x23c>)
 800720c:	f7fb f95f 	bl	80024ce <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d014      	beq.n	8007242 <HAL_TIM_PWM_Init+0xda>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	2b10      	cmp	r3, #16
 800721e:	d010      	beq.n	8007242 <HAL_TIM_PWM_Init+0xda>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2b20      	cmp	r3, #32
 8007226:	d00c      	beq.n	8007242 <HAL_TIM_PWM_Init+0xda>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	2b40      	cmp	r3, #64	; 0x40
 800722e:	d008      	beq.n	8007242 <HAL_TIM_PWM_Init+0xda>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b60      	cmp	r3, #96	; 0x60
 8007236:	d004      	beq.n	8007242 <HAL_TIM_PWM_Init+0xda>
 8007238:	f240 5134 	movw	r1, #1332	; 0x534
 800723c:	4859      	ldr	r0, [pc, #356]	; (80073a4 <HAL_TIM_PWM_Init+0x23c>)
 800723e:	f7fb f946 	bl	80024ce <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00e      	beq.n	8007268 <HAL_TIM_PWM_Init+0x100>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007252:	d009      	beq.n	8007268 <HAL_TIM_PWM_Init+0x100>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800725c:	d004      	beq.n	8007268 <HAL_TIM_PWM_Init+0x100>
 800725e:	f240 5135 	movw	r1, #1333	; 0x535
 8007262:	4850      	ldr	r0, [pc, #320]	; (80073a4 <HAL_TIM_PWM_Init+0x23c>)
 8007264:	f7fb f933 	bl	80024ce <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007270:	d004      	beq.n	800727c <HAL_TIM_PWM_Init+0x114>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a41      	ldr	r2, [pc, #260]	; (800737c <HAL_TIM_PWM_Init+0x214>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d107      	bne.n	800728c <HAL_TIM_PWM_Init+0x124>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	bf14      	ite	ne
 8007284:	2301      	movne	r3, #1
 8007286:	2300      	moveq	r3, #0
 8007288:	b2db      	uxtb	r3, r3
 800728a:	e00e      	b.n	80072aa <HAL_TIM_PWM_Init+0x142>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d006      	beq.n	80072a2 <HAL_TIM_PWM_Init+0x13a>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800729c:	d201      	bcs.n	80072a2 <HAL_TIM_PWM_Init+0x13a>
 800729e:	2301      	movs	r3, #1
 80072a0:	e000      	b.n	80072a4 <HAL_TIM_PWM_Init+0x13c>
 80072a2:	2300      	movs	r3, #0
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d104      	bne.n	80072b8 <HAL_TIM_PWM_Init+0x150>
 80072ae:	f240 5136 	movw	r1, #1334	; 0x536
 80072b2:	483c      	ldr	r0, [pc, #240]	; (80073a4 <HAL_TIM_PWM_Init+0x23c>)
 80072b4:	f7fb f90b 	bl	80024ce <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d008      	beq.n	80072d2 <HAL_TIM_PWM_Init+0x16a>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	2b80      	cmp	r3, #128	; 0x80
 80072c6:	d004      	beq.n	80072d2 <HAL_TIM_PWM_Init+0x16a>
 80072c8:	f240 5137 	movw	r1, #1335	; 0x537
 80072cc:	4835      	ldr	r0, [pc, #212]	; (80073a4 <HAL_TIM_PWM_Init+0x23c>)
 80072ce:	f7fb f8fe 	bl	80024ce <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d106      	bne.n	80072ec <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f85e 	bl	80073a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	3304      	adds	r3, #4
 80072fc:	4619      	mov	r1, r3
 80072fe:	4610      	mov	r0, r2
 8007300:	f001 f932 	bl	8008568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	40010000 	.word	0x40010000
 8007374:	40000400 	.word	0x40000400
 8007378:	40000800 	.word	0x40000800
 800737c:	40000c00 	.word	0x40000c00
 8007380:	40001000 	.word	0x40001000
 8007384:	40001400 	.word	0x40001400
 8007388:	40010400 	.word	0x40010400
 800738c:	40014000 	.word	0x40014000
 8007390:	40014400 	.word	0x40014400
 8007394:	40014800 	.word	0x40014800
 8007398:	40001800 	.word	0x40001800
 800739c:	40001c00 	.word	0x40001c00
 80073a0:	40002000 	.word	0x40002000
 80073a4:	08015170 	.word	0x08015170

080073a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a89      	ldr	r2, [pc, #548]	; (80075f0 <HAL_TIM_PWM_Start+0x234>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d117      	bne.n	8007400 <HAL_TIM_PWM_Start+0x44>
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 80ae 	beq.w	8007534 <HAL_TIM_PWM_Start+0x178>
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	2b04      	cmp	r3, #4
 80073dc:	f000 80aa 	beq.w	8007534 <HAL_TIM_PWM_Start+0x178>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2b08      	cmp	r3, #8
 80073e4:	f000 80a6 	beq.w	8007534 <HAL_TIM_PWM_Start+0x178>
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b0c      	cmp	r3, #12
 80073ec:	f000 80a2 	beq.w	8007534 <HAL_TIM_PWM_Start+0x178>
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b10      	cmp	r3, #16
 80073f4:	f000 809e 	beq.w	8007534 <HAL_TIM_PWM_Start+0x178>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2b14      	cmp	r3, #20
 80073fc:	f000 809a 	beq.w	8007534 <HAL_TIM_PWM_Start+0x178>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007408:	d10f      	bne.n	800742a <HAL_TIM_PWM_Start+0x6e>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 8091 	beq.w	8007534 <HAL_TIM_PWM_Start+0x178>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b04      	cmp	r3, #4
 8007416:	f000 808d 	beq.w	8007534 <HAL_TIM_PWM_Start+0x178>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b08      	cmp	r3, #8
 800741e:	f000 8089 	beq.w	8007534 <HAL_TIM_PWM_Start+0x178>
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2b0c      	cmp	r3, #12
 8007426:	f000 8085 	beq.w	8007534 <HAL_TIM_PWM_Start+0x178>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a71      	ldr	r2, [pc, #452]	; (80075f4 <HAL_TIM_PWM_Start+0x238>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d10b      	bne.n	800744c <HAL_TIM_PWM_Start+0x90>
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d07c      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b04      	cmp	r3, #4
 800743e:	d079      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2b08      	cmp	r3, #8
 8007444:	d076      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b0c      	cmp	r3, #12
 800744a:	d073      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a69      	ldr	r2, [pc, #420]	; (80075f8 <HAL_TIM_PWM_Start+0x23c>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d10b      	bne.n	800746e <HAL_TIM_PWM_Start+0xb2>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d06b      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	2b04      	cmp	r3, #4
 8007460:	d068      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b08      	cmp	r3, #8
 8007466:	d065      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2b0c      	cmp	r3, #12
 800746c:	d062      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a62      	ldr	r2, [pc, #392]	; (80075fc <HAL_TIM_PWM_Start+0x240>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d10b      	bne.n	8007490 <HAL_TIM_PWM_Start+0xd4>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d05a      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b04      	cmp	r3, #4
 8007482:	d057      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b08      	cmp	r3, #8
 8007488:	d054      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b0c      	cmp	r3, #12
 800748e:	d051      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a5a      	ldr	r2, [pc, #360]	; (8007600 <HAL_TIM_PWM_Start+0x244>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d111      	bne.n	80074be <HAL_TIM_PWM_Start+0x102>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d049      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d046      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d043      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b0c      	cmp	r3, #12
 80074b0:	d040      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b10      	cmp	r3, #16
 80074b6:	d03d      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b14      	cmp	r3, #20
 80074bc:	d03a      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a50      	ldr	r2, [pc, #320]	; (8007604 <HAL_TIM_PWM_Start+0x248>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d105      	bne.n	80074d4 <HAL_TIM_PWM_Start+0x118>
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d032      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b04      	cmp	r3, #4
 80074d2:	d02f      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a4b      	ldr	r2, [pc, #300]	; (8007608 <HAL_TIM_PWM_Start+0x24c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d102      	bne.n	80074e4 <HAL_TIM_PWM_Start+0x128>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d027      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a48      	ldr	r2, [pc, #288]	; (800760c <HAL_TIM_PWM_Start+0x250>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d102      	bne.n	80074f4 <HAL_TIM_PWM_Start+0x138>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d01f      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a45      	ldr	r2, [pc, #276]	; (8007610 <HAL_TIM_PWM_Start+0x254>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d105      	bne.n	800750a <HAL_TIM_PWM_Start+0x14e>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d017      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	2b04      	cmp	r3, #4
 8007508:	d014      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a41      	ldr	r2, [pc, #260]	; (8007614 <HAL_TIM_PWM_Start+0x258>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d102      	bne.n	800751a <HAL_TIM_PWM_Start+0x15e>
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00c      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a3e      	ldr	r2, [pc, #248]	; (8007618 <HAL_TIM_PWM_Start+0x25c>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d102      	bne.n	800752a <HAL_TIM_PWM_Start+0x16e>
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d004      	beq.n	8007534 <HAL_TIM_PWM_Start+0x178>
 800752a:	f240 51bc 	movw	r1, #1468	; 0x5bc
 800752e:	483b      	ldr	r0, [pc, #236]	; (800761c <HAL_TIM_PWM_Start+0x260>)
 8007530:	f7fa ffcd 	bl	80024ce <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d109      	bne.n	800754e <HAL_TIM_PWM_Start+0x192>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b01      	cmp	r3, #1
 8007544:	bf14      	ite	ne
 8007546:	2301      	movne	r3, #1
 8007548:	2300      	moveq	r3, #0
 800754a:	b2db      	uxtb	r3, r3
 800754c:	e03c      	b.n	80075c8 <HAL_TIM_PWM_Start+0x20c>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b04      	cmp	r3, #4
 8007552:	d109      	bne.n	8007568 <HAL_TIM_PWM_Start+0x1ac>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b01      	cmp	r3, #1
 800755e:	bf14      	ite	ne
 8007560:	2301      	movne	r3, #1
 8007562:	2300      	moveq	r3, #0
 8007564:	b2db      	uxtb	r3, r3
 8007566:	e02f      	b.n	80075c8 <HAL_TIM_PWM_Start+0x20c>
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	2b08      	cmp	r3, #8
 800756c:	d109      	bne.n	8007582 <HAL_TIM_PWM_Start+0x1c6>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b01      	cmp	r3, #1
 8007578:	bf14      	ite	ne
 800757a:	2301      	movne	r3, #1
 800757c:	2300      	moveq	r3, #0
 800757e:	b2db      	uxtb	r3, r3
 8007580:	e022      	b.n	80075c8 <HAL_TIM_PWM_Start+0x20c>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b0c      	cmp	r3, #12
 8007586:	d109      	bne.n	800759c <HAL_TIM_PWM_Start+0x1e0>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b01      	cmp	r3, #1
 8007592:	bf14      	ite	ne
 8007594:	2301      	movne	r3, #1
 8007596:	2300      	moveq	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	e015      	b.n	80075c8 <HAL_TIM_PWM_Start+0x20c>
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2b10      	cmp	r3, #16
 80075a0:	d109      	bne.n	80075b6 <HAL_TIM_PWM_Start+0x1fa>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	bf14      	ite	ne
 80075ae:	2301      	movne	r3, #1
 80075b0:	2300      	moveq	r3, #0
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	e008      	b.n	80075c8 <HAL_TIM_PWM_Start+0x20c>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b01      	cmp	r3, #1
 80075c0:	bf14      	ite	ne
 80075c2:	2301      	movne	r3, #1
 80075c4:	2300      	moveq	r3, #0
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e0aa      	b.n	8007726 <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d104      	bne.n	80075e0 <HAL_TIM_PWM_Start+0x224>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2202      	movs	r2, #2
 80075da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075de:	e03b      	b.n	8007658 <HAL_TIM_PWM_Start+0x29c>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d11c      	bne.n	8007620 <HAL_TIM_PWM_Start+0x264>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2202      	movs	r2, #2
 80075ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075ee:	e033      	b.n	8007658 <HAL_TIM_PWM_Start+0x29c>
 80075f0:	40010000 	.word	0x40010000
 80075f4:	40000400 	.word	0x40000400
 80075f8:	40000800 	.word	0x40000800
 80075fc:	40000c00 	.word	0x40000c00
 8007600:	40010400 	.word	0x40010400
 8007604:	40014000 	.word	0x40014000
 8007608:	40014400 	.word	0x40014400
 800760c:	40014800 	.word	0x40014800
 8007610:	40001800 	.word	0x40001800
 8007614:	40001c00 	.word	0x40001c00
 8007618:	40002000 	.word	0x40002000
 800761c:	08015170 	.word	0x08015170
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	2b08      	cmp	r3, #8
 8007624:	d104      	bne.n	8007630 <HAL_TIM_PWM_Start+0x274>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2202      	movs	r2, #2
 800762a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800762e:	e013      	b.n	8007658 <HAL_TIM_PWM_Start+0x29c>
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2b0c      	cmp	r3, #12
 8007634:	d104      	bne.n	8007640 <HAL_TIM_PWM_Start+0x284>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2202      	movs	r2, #2
 800763a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800763e:	e00b      	b.n	8007658 <HAL_TIM_PWM_Start+0x29c>
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2b10      	cmp	r3, #16
 8007644:	d104      	bne.n	8007650 <HAL_TIM_PWM_Start+0x294>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2202      	movs	r2, #2
 800764a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800764e:	e003      	b.n	8007658 <HAL_TIM_PWM_Start+0x29c>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2201      	movs	r2, #1
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	4618      	mov	r0, r3
 8007662:	f001 fba3 	bl	8008dac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a31      	ldr	r2, [pc, #196]	; (8007730 <HAL_TIM_PWM_Start+0x374>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d004      	beq.n	800767a <HAL_TIM_PWM_Start+0x2be>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a2f      	ldr	r2, [pc, #188]	; (8007734 <HAL_TIM_PWM_Start+0x378>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d101      	bne.n	800767e <HAL_TIM_PWM_Start+0x2c2>
 800767a:	2301      	movs	r3, #1
 800767c:	e000      	b.n	8007680 <HAL_TIM_PWM_Start+0x2c4>
 800767e:	2300      	movs	r3, #0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d007      	beq.n	8007694 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007692:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a25      	ldr	r2, [pc, #148]	; (8007730 <HAL_TIM_PWM_Start+0x374>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d022      	beq.n	80076e4 <HAL_TIM_PWM_Start+0x328>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a6:	d01d      	beq.n	80076e4 <HAL_TIM_PWM_Start+0x328>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a22      	ldr	r2, [pc, #136]	; (8007738 <HAL_TIM_PWM_Start+0x37c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d018      	beq.n	80076e4 <HAL_TIM_PWM_Start+0x328>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a21      	ldr	r2, [pc, #132]	; (800773c <HAL_TIM_PWM_Start+0x380>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d013      	beq.n	80076e4 <HAL_TIM_PWM_Start+0x328>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a1f      	ldr	r2, [pc, #124]	; (8007740 <HAL_TIM_PWM_Start+0x384>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d00e      	beq.n	80076e4 <HAL_TIM_PWM_Start+0x328>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a1a      	ldr	r2, [pc, #104]	; (8007734 <HAL_TIM_PWM_Start+0x378>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d009      	beq.n	80076e4 <HAL_TIM_PWM_Start+0x328>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a1b      	ldr	r2, [pc, #108]	; (8007744 <HAL_TIM_PWM_Start+0x388>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d004      	beq.n	80076e4 <HAL_TIM_PWM_Start+0x328>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a1a      	ldr	r2, [pc, #104]	; (8007748 <HAL_TIM_PWM_Start+0x38c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d115      	bne.n	8007710 <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689a      	ldr	r2, [r3, #8]
 80076ea:	4b18      	ldr	r3, [pc, #96]	; (800774c <HAL_TIM_PWM_Start+0x390>)
 80076ec:	4013      	ands	r3, r2
 80076ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2b06      	cmp	r3, #6
 80076f4:	d015      	beq.n	8007722 <HAL_TIM_PWM_Start+0x366>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076fc:	d011      	beq.n	8007722 <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f042 0201 	orr.w	r2, r2, #1
 800770c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800770e:	e008      	b.n	8007722 <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0201 	orr.w	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	e000      	b.n	8007724 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007722:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	40010000 	.word	0x40010000
 8007734:	40010400 	.word	0x40010400
 8007738:	40000400 	.word	0x40000400
 800773c:	40000800 	.word	0x40000800
 8007740:	40000c00 	.word	0x40000c00
 8007744:	40014000 	.word	0x40014000
 8007748:	40001800 	.word	0x40001800
 800774c:	00010007 	.word	0x00010007

08007750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	2b02      	cmp	r3, #2
 8007764:	d122      	bne.n	80077ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f003 0302 	and.w	r3, r3, #2
 8007770:	2b02      	cmp	r3, #2
 8007772:	d11b      	bne.n	80077ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f06f 0202 	mvn.w	r2, #2
 800777c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	f003 0303 	and.w	r3, r3, #3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 feca 	bl	800852c <HAL_TIM_IC_CaptureCallback>
 8007798:	e005      	b.n	80077a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 febc 	bl	8008518 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fecd 	bl	8008540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	d122      	bne.n	8007800 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b04      	cmp	r3, #4
 80077c6:	d11b      	bne.n	8007800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f06f 0204 	mvn.w	r2, #4
 80077d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2202      	movs	r2, #2
 80077d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fea0 	bl	800852c <HAL_TIM_IC_CaptureCallback>
 80077ec:	e005      	b.n	80077fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fe92 	bl	8008518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fea3 	bl	8008540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	f003 0308 	and.w	r3, r3, #8
 800780a:	2b08      	cmp	r3, #8
 800780c:	d122      	bne.n	8007854 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	f003 0308 	and.w	r3, r3, #8
 8007818:	2b08      	cmp	r3, #8
 800781a:	d11b      	bne.n	8007854 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f06f 0208 	mvn.w	r2, #8
 8007824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2204      	movs	r2, #4
 800782a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fe76 	bl	800852c <HAL_TIM_IC_CaptureCallback>
 8007840:	e005      	b.n	800784e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fe68 	bl	8008518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fe79 	bl	8008540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	f003 0310 	and.w	r3, r3, #16
 800785e:	2b10      	cmp	r3, #16
 8007860:	d122      	bne.n	80078a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f003 0310 	and.w	r3, r3, #16
 800786c:	2b10      	cmp	r3, #16
 800786e:	d11b      	bne.n	80078a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f06f 0210 	mvn.w	r2, #16
 8007878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2208      	movs	r2, #8
 800787e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fe4c 	bl	800852c <HAL_TIM_IC_CaptureCallback>
 8007894:	e005      	b.n	80078a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fe3e 	bl	8008518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fe4f 	bl	8008540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d10e      	bne.n	80078d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d107      	bne.n	80078d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f06f 0201 	mvn.w	r2, #1
 80078cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fe18 	bl	8008504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078de:	2b80      	cmp	r3, #128	; 0x80
 80078e0:	d10e      	bne.n	8007900 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ec:	2b80      	cmp	r3, #128	; 0x80
 80078ee:	d107      	bne.n	8007900 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f001 fc42 	bl	8009184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800790e:	d10e      	bne.n	800792e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800791a:	2b80      	cmp	r3, #128	; 0x80
 800791c:	d107      	bne.n	800792e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 fc35 	bl	8009198 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007938:	2b40      	cmp	r3, #64	; 0x40
 800793a:	d10e      	bne.n	800795a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007946:	2b40      	cmp	r3, #64	; 0x40
 8007948:	d107      	bne.n	800795a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fdfd 	bl	8008554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	f003 0320 	and.w	r3, r3, #32
 8007964:	2b20      	cmp	r3, #32
 8007966:	d10e      	bne.n	8007986 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	f003 0320 	and.w	r3, r3, #32
 8007972:	2b20      	cmp	r3, #32
 8007974:	d107      	bne.n	8007986 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f06f 0220 	mvn.w	r2, #32
 800797e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f001 fbf5 	bl	8009170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007986:	bf00      	nop
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d016      	beq.n	80079d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d013      	beq.n	80079d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b08      	cmp	r3, #8
 80079b0:	d010      	beq.n	80079d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b0c      	cmp	r3, #12
 80079b6:	d00d      	beq.n	80079d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b10      	cmp	r3, #16
 80079bc:	d00a      	beq.n	80079d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b14      	cmp	r3, #20
 80079c2:	d007      	beq.n	80079d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b3c      	cmp	r3, #60	; 0x3c
 80079c8:	d004      	beq.n	80079d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80079ca:	f241 01af 	movw	r1, #4271	; 0x10af
 80079ce:	4895      	ldr	r0, [pc, #596]	; (8007c24 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80079d0:	f7fa fd7d 	bl	80024ce <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b60      	cmp	r3, #96	; 0x60
 80079da:	d01c      	beq.n	8007a16 <HAL_TIM_PWM_ConfigChannel+0x86>
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b70      	cmp	r3, #112	; 0x70
 80079e2:	d018      	beq.n	8007a16 <HAL_TIM_PWM_ConfigChannel+0x86>
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a8f      	ldr	r2, [pc, #572]	; (8007c28 <HAL_TIM_PWM_ConfigChannel+0x298>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d013      	beq.n	8007a16 <HAL_TIM_PWM_ConfigChannel+0x86>
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a8e      	ldr	r2, [pc, #568]	; (8007c2c <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d00e      	beq.n	8007a16 <HAL_TIM_PWM_ConfigChannel+0x86>
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a8c      	ldr	r2, [pc, #560]	; (8007c30 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d009      	beq.n	8007a16 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a8b      	ldr	r2, [pc, #556]	; (8007c34 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d004      	beq.n	8007a16 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007a0c:	f241 01b0 	movw	r1, #4272	; 0x10b0
 8007a10:	4884      	ldr	r0, [pc, #528]	; (8007c24 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007a12:	f7fa fd5c 	bl	80024ce <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d008      	beq.n	8007a30 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d004      	beq.n	8007a30 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007a26:	f241 01b1 	movw	r1, #4273	; 0x10b1
 8007a2a:	487e      	ldr	r0, [pc, #504]	; (8007c24 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007a2c:	f7fa fd4f 	bl	80024ce <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d008      	beq.n	8007a4a <HAL_TIM_PWM_ConfigChannel+0xba>
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	d004      	beq.n	8007a4a <HAL_TIM_PWM_ConfigChannel+0xba>
 8007a40:	f241 01b2 	movw	r1, #4274	; 0x10b2
 8007a44:	4877      	ldr	r0, [pc, #476]	; (8007c24 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007a46:	f7fa fd42 	bl	80024ce <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d101      	bne.n	8007a58 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8007a54:	2302      	movs	r3, #2
 8007a56:	e1f3      	b.n	8007e40 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b14      	cmp	r3, #20
 8007a64:	f200 81e4 	bhi.w	8007e30 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8007a68:	a201      	add	r2, pc, #4	; (adr r2, 8007a70 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8007a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6e:	bf00      	nop
 8007a70:	08007ac5 	.word	0x08007ac5
 8007a74:	08007e31 	.word	0x08007e31
 8007a78:	08007e31 	.word	0x08007e31
 8007a7c:	08007e31 	.word	0x08007e31
 8007a80:	08007b87 	.word	0x08007b87
 8007a84:	08007e31 	.word	0x08007e31
 8007a88:	08007e31 	.word	0x08007e31
 8007a8c:	08007e31 	.word	0x08007e31
 8007a90:	08007c65 	.word	0x08007c65
 8007a94:	08007e31 	.word	0x08007e31
 8007a98:	08007e31 	.word	0x08007e31
 8007a9c:	08007e31 	.word	0x08007e31
 8007aa0:	08007ceb 	.word	0x08007ceb
 8007aa4:	08007e31 	.word	0x08007e31
 8007aa8:	08007e31 	.word	0x08007e31
 8007aac:	08007e31 	.word	0x08007e31
 8007ab0:	08007d73 	.word	0x08007d73
 8007ab4:	08007e31 	.word	0x08007e31
 8007ab8:	08007e31 	.word	0x08007e31
 8007abc:	08007e31 	.word	0x08007e31
 8007ac0:	08007dd1 	.word	0x08007dd1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a5b      	ldr	r2, [pc, #364]	; (8007c38 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d03b      	beq.n	8007b46 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad6:	d036      	beq.n	8007b46 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a57      	ldr	r2, [pc, #348]	; (8007c3c <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d031      	beq.n	8007b46 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a56      	ldr	r2, [pc, #344]	; (8007c40 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d02c      	beq.n	8007b46 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a54      	ldr	r2, [pc, #336]	; (8007c44 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d027      	beq.n	8007b46 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a53      	ldr	r2, [pc, #332]	; (8007c48 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d022      	beq.n	8007b46 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a51      	ldr	r2, [pc, #324]	; (8007c4c <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d01d      	beq.n	8007b46 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a50      	ldr	r2, [pc, #320]	; (8007c50 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d018      	beq.n	8007b46 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a4e      	ldr	r2, [pc, #312]	; (8007c54 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d013      	beq.n	8007b46 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a4d      	ldr	r2, [pc, #308]	; (8007c58 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d00e      	beq.n	8007b46 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a4b      	ldr	r2, [pc, #300]	; (8007c5c <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d009      	beq.n	8007b46 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a4a      	ldr	r2, [pc, #296]	; (8007c60 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d004      	beq.n	8007b46 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007b3c:	f241 01bc 	movw	r1, #4284	; 0x10bc
 8007b40:	4838      	ldr	r0, [pc, #224]	; (8007c24 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007b42:	f7fa fcc4 	bl	80024ce <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68b9      	ldr	r1, [r7, #8]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 fdab 	bl	80086a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	699a      	ldr	r2, [r3, #24]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f042 0208 	orr.w	r2, r2, #8
 8007b60:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	699a      	ldr	r2, [r3, #24]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 0204 	bic.w	r2, r2, #4
 8007b70:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6999      	ldr	r1, [r3, #24]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	691a      	ldr	r2, [r3, #16]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	430a      	orrs	r2, r1
 8007b82:	619a      	str	r2, [r3, #24]
      break;
 8007b84:	e157      	b.n	8007e36 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a2b      	ldr	r2, [pc, #172]	; (8007c38 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d027      	beq.n	8007be0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b98:	d022      	beq.n	8007be0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a27      	ldr	r2, [pc, #156]	; (8007c3c <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d01d      	beq.n	8007be0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a25      	ldr	r2, [pc, #148]	; (8007c40 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d018      	beq.n	8007be0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a24      	ldr	r2, [pc, #144]	; (8007c44 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d013      	beq.n	8007be0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a22      	ldr	r2, [pc, #136]	; (8007c48 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d00e      	beq.n	8007be0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a21      	ldr	r2, [pc, #132]	; (8007c4c <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d009      	beq.n	8007be0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a21      	ldr	r2, [pc, #132]	; (8007c58 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d004      	beq.n	8007be0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007bd6:	f241 01cd 	movw	r1, #4301	; 0x10cd
 8007bda:	4812      	ldr	r0, [pc, #72]	; (8007c24 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007bdc:	f7fa fc77 	bl	80024ce <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68b9      	ldr	r1, [r7, #8]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fdfa 	bl	80087e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	699a      	ldr	r2, [r3, #24]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699a      	ldr	r2, [r3, #24]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6999      	ldr	r1, [r3, #24]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	021a      	lsls	r2, r3, #8
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	619a      	str	r2, [r3, #24]
      break;
 8007c20:	e109      	b.n	8007e36 <HAL_TIM_PWM_ConfigChannel+0x4a6>
 8007c22:	bf00      	nop
 8007c24:	08015170 	.word	0x08015170
 8007c28:	00010040 	.word	0x00010040
 8007c2c:	00010050 	.word	0x00010050
 8007c30:	00010060 	.word	0x00010060
 8007c34:	00010070 	.word	0x00010070
 8007c38:	40010000 	.word	0x40010000
 8007c3c:	40000400 	.word	0x40000400
 8007c40:	40000800 	.word	0x40000800
 8007c44:	40000c00 	.word	0x40000c00
 8007c48:	40010400 	.word	0x40010400
 8007c4c:	40014000 	.word	0x40014000
 8007c50:	40014400 	.word	0x40014400
 8007c54:	40014800 	.word	0x40014800
 8007c58:	40001800 	.word	0x40001800
 8007c5c:	40001c00 	.word	0x40001c00
 8007c60:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a77      	ldr	r2, [pc, #476]	; (8007e48 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d01d      	beq.n	8007caa <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c76:	d018      	beq.n	8007caa <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a73      	ldr	r2, [pc, #460]	; (8007e4c <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d013      	beq.n	8007caa <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a72      	ldr	r2, [pc, #456]	; (8007e50 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d00e      	beq.n	8007caa <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a70      	ldr	r2, [pc, #448]	; (8007e54 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d009      	beq.n	8007caa <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a6f      	ldr	r2, [pc, #444]	; (8007e58 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d004      	beq.n	8007caa <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007ca0:	f241 01de 	movw	r1, #4318	; 0x10de
 8007ca4:	486d      	ldr	r0, [pc, #436]	; (8007e5c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8007ca6:	f7fa fc12 	bl	80024ce <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68b9      	ldr	r1, [r7, #8]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 fe35 	bl	8008920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	69da      	ldr	r2, [r3, #28]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f042 0208 	orr.w	r2, r2, #8
 8007cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	69da      	ldr	r2, [r3, #28]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f022 0204 	bic.w	r2, r2, #4
 8007cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69d9      	ldr	r1, [r3, #28]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	691a      	ldr	r2, [r3, #16]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	61da      	str	r2, [r3, #28]
      break;
 8007ce8:	e0a5      	b.n	8007e36 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a56      	ldr	r2, [pc, #344]	; (8007e48 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d01d      	beq.n	8007d30 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cfc:	d018      	beq.n	8007d30 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a52      	ldr	r2, [pc, #328]	; (8007e4c <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d013      	beq.n	8007d30 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a50      	ldr	r2, [pc, #320]	; (8007e50 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d00e      	beq.n	8007d30 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a4f      	ldr	r2, [pc, #316]	; (8007e54 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d009      	beq.n	8007d30 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a4d      	ldr	r2, [pc, #308]	; (8007e58 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d004      	beq.n	8007d30 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8007d26:	f241 01ef 	movw	r1, #4335	; 0x10ef
 8007d2a:	484c      	ldr	r0, [pc, #304]	; (8007e5c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8007d2c:	f7fa fbcf 	bl	80024ce <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68b9      	ldr	r1, [r7, #8]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 fe92 	bl	8008a60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	69da      	ldr	r2, [r3, #28]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d4a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	69da      	ldr	r2, [r3, #28]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	69d9      	ldr	r1, [r3, #28]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	021a      	lsls	r2, r3, #8
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	61da      	str	r2, [r3, #28]
      break;
 8007d70:	e061      	b.n	8007e36 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a34      	ldr	r2, [pc, #208]	; (8007e48 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d009      	beq.n	8007d90 <HAL_TIM_PWM_ConfigChannel+0x400>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a35      	ldr	r2, [pc, #212]	; (8007e58 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d004      	beq.n	8007d90 <HAL_TIM_PWM_ConfigChannel+0x400>
 8007d86:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8007d8a:	4834      	ldr	r0, [pc, #208]	; (8007e5c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8007d8c:	f7fa fb9f 	bl	80024ce <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68b9      	ldr	r1, [r7, #8]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 fec8 	bl	8008b2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0208 	orr.w	r2, r2, #8
 8007daa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f022 0204 	bic.w	r2, r2, #4
 8007dba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	691a      	ldr	r2, [r3, #16]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007dce:	e032      	b.n	8007e36 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a1c      	ldr	r2, [pc, #112]	; (8007e48 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d009      	beq.n	8007dee <HAL_TIM_PWM_ConfigChannel+0x45e>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a1e      	ldr	r2, [pc, #120]	; (8007e58 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d004      	beq.n	8007dee <HAL_TIM_PWM_ConfigChannel+0x45e>
 8007de4:	f241 1111 	movw	r1, #4369	; 0x1111
 8007de8:	481c      	ldr	r0, [pc, #112]	; (8007e5c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8007dea:	f7fa fb70 	bl	80024ce <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68b9      	ldr	r1, [r7, #8]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 feeb 	bl	8008bd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e18:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	021a      	lsls	r2, r3, #8
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007e2e:	e002      	b.n	8007e36 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	75fb      	strb	r3, [r7, #23]
      break;
 8007e34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3718      	adds	r7, #24
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	40010000 	.word	0x40010000
 8007e4c:	40000400 	.word	0x40000400
 8007e50:	40000800 	.word	0x40000800
 8007e54:	40000c00 	.word	0x40000c00
 8007e58:	40010400 	.word	0x40010400
 8007e5c:	08015170 	.word	0x08015170

08007e60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d101      	bne.n	8007e7c <HAL_TIM_ConfigClockSource+0x1c>
 8007e78:	2302      	movs	r3, #2
 8007e7a:	e332      	b.n	80084e2 <HAL_TIM_ConfigClockSource+0x682>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e94:	d029      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x8a>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b70      	cmp	r3, #112	; 0x70
 8007e9c:	d025      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x8a>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ea6:	d020      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x8a>
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b40      	cmp	r3, #64	; 0x40
 8007eae:	d01c      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x8a>
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b50      	cmp	r3, #80	; 0x50
 8007eb6:	d018      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x8a>
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b60      	cmp	r3, #96	; 0x60
 8007ebe:	d014      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x8a>
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d010      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x8a>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b10      	cmp	r3, #16
 8007ece:	d00c      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x8a>
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2b20      	cmp	r3, #32
 8007ed6:	d008      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x8a>
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b30      	cmp	r3, #48	; 0x30
 8007ede:	d004      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x8a>
 8007ee0:	f241 514c 	movw	r1, #5452	; 0x154c
 8007ee4:	4893      	ldr	r0, [pc, #588]	; (8008134 <HAL_TIM_ConfigClockSource+0x2d4>)
 8007ee6:	f7fa faf2 	bl	80024ce <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	4b90      	ldr	r3, [pc, #576]	; (8008138 <HAL_TIM_ConfigClockSource+0x2d8>)
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f00:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f12:	f000 812d 	beq.w	8008170 <HAL_TIM_ConfigClockSource+0x310>
 8007f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f1a:	f200 82d5 	bhi.w	80084c8 <HAL_TIM_ConfigClockSource+0x668>
 8007f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f22:	d02e      	beq.n	8007f82 <HAL_TIM_ConfigClockSource+0x122>
 8007f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f28:	f200 82ce 	bhi.w	80084c8 <HAL_TIM_ConfigClockSource+0x668>
 8007f2c:	2b70      	cmp	r3, #112	; 0x70
 8007f2e:	f000 8082 	beq.w	8008036 <HAL_TIM_ConfigClockSource+0x1d6>
 8007f32:	2b70      	cmp	r3, #112	; 0x70
 8007f34:	f200 82c8 	bhi.w	80084c8 <HAL_TIM_ConfigClockSource+0x668>
 8007f38:	2b60      	cmp	r3, #96	; 0x60
 8007f3a:	f000 81e0 	beq.w	80082fe <HAL_TIM_ConfigClockSource+0x49e>
 8007f3e:	2b60      	cmp	r3, #96	; 0x60
 8007f40:	f200 82c2 	bhi.w	80084c8 <HAL_TIM_ConfigClockSource+0x668>
 8007f44:	2b50      	cmp	r3, #80	; 0x50
 8007f46:	f000 8184 	beq.w	8008252 <HAL_TIM_ConfigClockSource+0x3f2>
 8007f4a:	2b50      	cmp	r3, #80	; 0x50
 8007f4c:	f200 82bc 	bhi.w	80084c8 <HAL_TIM_ConfigClockSource+0x668>
 8007f50:	2b40      	cmp	r3, #64	; 0x40
 8007f52:	f000 8237 	beq.w	80083c4 <HAL_TIM_ConfigClockSource+0x564>
 8007f56:	2b40      	cmp	r3, #64	; 0x40
 8007f58:	f200 82b6 	bhi.w	80084c8 <HAL_TIM_ConfigClockSource+0x668>
 8007f5c:	2b30      	cmp	r3, #48	; 0x30
 8007f5e:	f000 8287 	beq.w	8008470 <HAL_TIM_ConfigClockSource+0x610>
 8007f62:	2b30      	cmp	r3, #48	; 0x30
 8007f64:	f200 82b0 	bhi.w	80084c8 <HAL_TIM_ConfigClockSource+0x668>
 8007f68:	2b20      	cmp	r3, #32
 8007f6a:	f000 8281 	beq.w	8008470 <HAL_TIM_ConfigClockSource+0x610>
 8007f6e:	2b20      	cmp	r3, #32
 8007f70:	f200 82aa 	bhi.w	80084c8 <HAL_TIM_ConfigClockSource+0x668>
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 827b 	beq.w	8008470 <HAL_TIM_ConfigClockSource+0x610>
 8007f7a:	2b10      	cmp	r3, #16
 8007f7c:	f000 8278 	beq.w	8008470 <HAL_TIM_ConfigClockSource+0x610>
 8007f80:	e2a2      	b.n	80084c8 <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a6d      	ldr	r2, [pc, #436]	; (800813c <HAL_TIM_ConfigClockSource+0x2dc>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	f000 82a0 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x66e>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f96:	f000 829a 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x66e>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a68      	ldr	r2, [pc, #416]	; (8008140 <HAL_TIM_ConfigClockSource+0x2e0>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	f000 8294 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x66e>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a66      	ldr	r2, [pc, #408]	; (8008144 <HAL_TIM_ConfigClockSource+0x2e4>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	f000 828e 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x66e>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a64      	ldr	r2, [pc, #400]	; (8008148 <HAL_TIM_ConfigClockSource+0x2e8>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	f000 8288 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x66e>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a62      	ldr	r2, [pc, #392]	; (800814c <HAL_TIM_ConfigClockSource+0x2ec>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	f000 8282 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x66e>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a60      	ldr	r2, [pc, #384]	; (8008150 <HAL_TIM_ConfigClockSource+0x2f0>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	f000 827c 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x66e>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a5e      	ldr	r2, [pc, #376]	; (8008154 <HAL_TIM_ConfigClockSource+0x2f4>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	f000 8276 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x66e>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a5c      	ldr	r2, [pc, #368]	; (8008158 <HAL_TIM_ConfigClockSource+0x2f8>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	f000 8270 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x66e>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a5a      	ldr	r2, [pc, #360]	; (800815c <HAL_TIM_ConfigClockSource+0x2fc>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	f000 826a 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x66e>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a58      	ldr	r2, [pc, #352]	; (8008160 <HAL_TIM_ConfigClockSource+0x300>)
 8008000:	4293      	cmp	r3, r2
 8008002:	f000 8264 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x66e>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a56      	ldr	r2, [pc, #344]	; (8008164 <HAL_TIM_ConfigClockSource+0x304>)
 800800c:	4293      	cmp	r3, r2
 800800e:	f000 825e 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x66e>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a54      	ldr	r2, [pc, #336]	; (8008168 <HAL_TIM_ConfigClockSource+0x308>)
 8008018:	4293      	cmp	r3, r2
 800801a:	f000 8258 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x66e>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a52      	ldr	r2, [pc, #328]	; (800816c <HAL_TIM_ConfigClockSource+0x30c>)
 8008024:	4293      	cmp	r3, r2
 8008026:	f000 8252 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x66e>
 800802a:	f241 5158 	movw	r1, #5464	; 0x1558
 800802e:	4841      	ldr	r0, [pc, #260]	; (8008134 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008030:	f7fa fa4d 	bl	80024ce <assert_failed>
      break;
 8008034:	e24b      	b.n	80084ce <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a40      	ldr	r2, [pc, #256]	; (800813c <HAL_TIM_ConfigClockSource+0x2dc>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d027      	beq.n	8008090 <HAL_TIM_ConfigClockSource+0x230>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008048:	d022      	beq.n	8008090 <HAL_TIM_ConfigClockSource+0x230>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a3c      	ldr	r2, [pc, #240]	; (8008140 <HAL_TIM_ConfigClockSource+0x2e0>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d01d      	beq.n	8008090 <HAL_TIM_ConfigClockSource+0x230>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a3a      	ldr	r2, [pc, #232]	; (8008144 <HAL_TIM_ConfigClockSource+0x2e4>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d018      	beq.n	8008090 <HAL_TIM_ConfigClockSource+0x230>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a39      	ldr	r2, [pc, #228]	; (8008148 <HAL_TIM_ConfigClockSource+0x2e8>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d013      	beq.n	8008090 <HAL_TIM_ConfigClockSource+0x230>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a39      	ldr	r2, [pc, #228]	; (8008154 <HAL_TIM_ConfigClockSource+0x2f4>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d00e      	beq.n	8008090 <HAL_TIM_ConfigClockSource+0x230>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a38      	ldr	r2, [pc, #224]	; (8008158 <HAL_TIM_ConfigClockSource+0x2f8>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d009      	beq.n	8008090 <HAL_TIM_ConfigClockSource+0x230>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a38      	ldr	r2, [pc, #224]	; (8008164 <HAL_TIM_ConfigClockSource+0x304>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d004      	beq.n	8008090 <HAL_TIM_ConfigClockSource+0x230>
 8008086:	f241 515f 	movw	r1, #5471	; 0x155f
 800808a:	482a      	ldr	r0, [pc, #168]	; (8008134 <HAL_TIM_ConfigClockSource+0x2d4>)
 800808c:	f7fa fa1f 	bl	80024ce <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d013      	beq.n	80080c0 <HAL_TIM_ConfigClockSource+0x260>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a0:	d00e      	beq.n	80080c0 <HAL_TIM_ConfigClockSource+0x260>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080aa:	d009      	beq.n	80080c0 <HAL_TIM_ConfigClockSource+0x260>
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080b4:	d004      	beq.n	80080c0 <HAL_TIM_ConfigClockSource+0x260>
 80080b6:	f241 5162 	movw	r1, #5474	; 0x1562
 80080ba:	481e      	ldr	r0, [pc, #120]	; (8008134 <HAL_TIM_ConfigClockSource+0x2d4>)
 80080bc:	f7fa fa07 	bl	80024ce <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080c8:	d014      	beq.n	80080f4 <HAL_TIM_ConfigClockSource+0x294>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d010      	beq.n	80080f4 <HAL_TIM_ConfigClockSource+0x294>
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00c      	beq.n	80080f4 <HAL_TIM_ConfigClockSource+0x294>
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d008      	beq.n	80080f4 <HAL_TIM_ConfigClockSource+0x294>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	2b0a      	cmp	r3, #10
 80080e8:	d004      	beq.n	80080f4 <HAL_TIM_ConfigClockSource+0x294>
 80080ea:	f241 5163 	movw	r1, #5475	; 0x1563
 80080ee:	4811      	ldr	r0, [pc, #68]	; (8008134 <HAL_TIM_ConfigClockSource+0x2d4>)
 80080f0:	f7fa f9ed 	bl	80024ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	2b0f      	cmp	r3, #15
 80080fa:	d904      	bls.n	8008106 <HAL_TIM_ConfigClockSource+0x2a6>
 80080fc:	f241 5164 	movw	r1, #5476	; 0x1564
 8008100:	480c      	ldr	r0, [pc, #48]	; (8008134 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008102:	f7fa f9e4 	bl	80024ce <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6818      	ldr	r0, [r3, #0]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	6899      	ldr	r1, [r3, #8]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	685a      	ldr	r2, [r3, #4]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	f000 fe29 	bl	8008d6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008128:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	609a      	str	r2, [r3, #8]
      break;
 8008132:	e1cd      	b.n	80084d0 <HAL_TIM_ConfigClockSource+0x670>
 8008134:	08015170 	.word	0x08015170
 8008138:	fffeff88 	.word	0xfffeff88
 800813c:	40010000 	.word	0x40010000
 8008140:	40000400 	.word	0x40000400
 8008144:	40000800 	.word	0x40000800
 8008148:	40000c00 	.word	0x40000c00
 800814c:	40001000 	.word	0x40001000
 8008150:	40001400 	.word	0x40001400
 8008154:	40010400 	.word	0x40010400
 8008158:	40014000 	.word	0x40014000
 800815c:	40014400 	.word	0x40014400
 8008160:	40014800 	.word	0x40014800
 8008164:	40001800 	.word	0x40001800
 8008168:	40001c00 	.word	0x40001c00
 800816c:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a8d      	ldr	r2, [pc, #564]	; (80083ac <HAL_TIM_ConfigClockSource+0x54c>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d01d      	beq.n	80081b6 <HAL_TIM_ConfigClockSource+0x356>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008182:	d018      	beq.n	80081b6 <HAL_TIM_ConfigClockSource+0x356>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a89      	ldr	r2, [pc, #548]	; (80083b0 <HAL_TIM_ConfigClockSource+0x550>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d013      	beq.n	80081b6 <HAL_TIM_ConfigClockSource+0x356>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a88      	ldr	r2, [pc, #544]	; (80083b4 <HAL_TIM_ConfigClockSource+0x554>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d00e      	beq.n	80081b6 <HAL_TIM_ConfigClockSource+0x356>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a86      	ldr	r2, [pc, #536]	; (80083b8 <HAL_TIM_ConfigClockSource+0x558>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d009      	beq.n	80081b6 <HAL_TIM_ConfigClockSource+0x356>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a85      	ldr	r2, [pc, #532]	; (80083bc <HAL_TIM_ConfigClockSource+0x55c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d004      	beq.n	80081b6 <HAL_TIM_ConfigClockSource+0x356>
 80081ac:	f241 5177 	movw	r1, #5495	; 0x1577
 80081b0:	4883      	ldr	r0, [pc, #524]	; (80083c0 <HAL_TIM_ConfigClockSource+0x560>)
 80081b2:	f7fa f98c 	bl	80024ce <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d013      	beq.n	80081e6 <HAL_TIM_ConfigClockSource+0x386>
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c6:	d00e      	beq.n	80081e6 <HAL_TIM_ConfigClockSource+0x386>
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081d0:	d009      	beq.n	80081e6 <HAL_TIM_ConfigClockSource+0x386>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081da:	d004      	beq.n	80081e6 <HAL_TIM_ConfigClockSource+0x386>
 80081dc:	f241 517a 	movw	r1, #5498	; 0x157a
 80081e0:	4877      	ldr	r0, [pc, #476]	; (80083c0 <HAL_TIM_ConfigClockSource+0x560>)
 80081e2:	f7fa f974 	bl	80024ce <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ee:	d014      	beq.n	800821a <HAL_TIM_ConfigClockSource+0x3ba>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d010      	beq.n	800821a <HAL_TIM_ConfigClockSource+0x3ba>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00c      	beq.n	800821a <HAL_TIM_ConfigClockSource+0x3ba>
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	2b02      	cmp	r3, #2
 8008206:	d008      	beq.n	800821a <HAL_TIM_ConfigClockSource+0x3ba>
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	2b0a      	cmp	r3, #10
 800820e:	d004      	beq.n	800821a <HAL_TIM_ConfigClockSource+0x3ba>
 8008210:	f241 517b 	movw	r1, #5499	; 0x157b
 8008214:	486a      	ldr	r0, [pc, #424]	; (80083c0 <HAL_TIM_ConfigClockSource+0x560>)
 8008216:	f7fa f95a 	bl	80024ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	2b0f      	cmp	r3, #15
 8008220:	d904      	bls.n	800822c <HAL_TIM_ConfigClockSource+0x3cc>
 8008222:	f241 517c 	movw	r1, #5500	; 0x157c
 8008226:	4866      	ldr	r0, [pc, #408]	; (80083c0 <HAL_TIM_ConfigClockSource+0x560>)
 8008228:	f7fa f951 	bl	80024ce <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6818      	ldr	r0, [r3, #0]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	6899      	ldr	r1, [r3, #8]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	685a      	ldr	r2, [r3, #4]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	f000 fd96 	bl	8008d6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689a      	ldr	r2, [r3, #8]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800824e:	609a      	str	r2, [r3, #8]
      break;
 8008250:	e13e      	b.n	80084d0 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a55      	ldr	r2, [pc, #340]	; (80083ac <HAL_TIM_ConfigClockSource+0x54c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d01d      	beq.n	8008298 <HAL_TIM_ConfigClockSource+0x438>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008264:	d018      	beq.n	8008298 <HAL_TIM_ConfigClockSource+0x438>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a51      	ldr	r2, [pc, #324]	; (80083b0 <HAL_TIM_ConfigClockSource+0x550>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d013      	beq.n	8008298 <HAL_TIM_ConfigClockSource+0x438>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a4f      	ldr	r2, [pc, #316]	; (80083b4 <HAL_TIM_ConfigClockSource+0x554>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d00e      	beq.n	8008298 <HAL_TIM_ConfigClockSource+0x438>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a4e      	ldr	r2, [pc, #312]	; (80083b8 <HAL_TIM_ConfigClockSource+0x558>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d009      	beq.n	8008298 <HAL_TIM_ConfigClockSource+0x438>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a4c      	ldr	r2, [pc, #304]	; (80083bc <HAL_TIM_ConfigClockSource+0x55c>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d004      	beq.n	8008298 <HAL_TIM_ConfigClockSource+0x438>
 800828e:	f241 518b 	movw	r1, #5515	; 0x158b
 8008292:	484b      	ldr	r0, [pc, #300]	; (80083c0 <HAL_TIM_ConfigClockSource+0x560>)
 8008294:	f7fa f91b 	bl	80024ce <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082a0:	d014      	beq.n	80082cc <HAL_TIM_ConfigClockSource+0x46c>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d010      	beq.n	80082cc <HAL_TIM_ConfigClockSource+0x46c>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00c      	beq.n	80082cc <HAL_TIM_ConfigClockSource+0x46c>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d008      	beq.n	80082cc <HAL_TIM_ConfigClockSource+0x46c>
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	2b0a      	cmp	r3, #10
 80082c0:	d004      	beq.n	80082cc <HAL_TIM_ConfigClockSource+0x46c>
 80082c2:	f241 518e 	movw	r1, #5518	; 0x158e
 80082c6:	483e      	ldr	r0, [pc, #248]	; (80083c0 <HAL_TIM_ConfigClockSource+0x560>)
 80082c8:	f7fa f901 	bl	80024ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	2b0f      	cmp	r3, #15
 80082d2:	d904      	bls.n	80082de <HAL_TIM_ConfigClockSource+0x47e>
 80082d4:	f241 518f 	movw	r1, #5519	; 0x158f
 80082d8:	4839      	ldr	r0, [pc, #228]	; (80083c0 <HAL_TIM_ConfigClockSource+0x560>)
 80082da:	f7fa f8f8 	bl	80024ce <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6818      	ldr	r0, [r3, #0]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	6859      	ldr	r1, [r3, #4]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	461a      	mov	r2, r3
 80082ec:	f000 fcc4 	bl	8008c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2150      	movs	r1, #80	; 0x50
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fd1d 	bl	8008d36 <TIM_ITRx_SetConfig>
      break;
 80082fc:	e0e8      	b.n	80084d0 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a2a      	ldr	r2, [pc, #168]	; (80083ac <HAL_TIM_ConfigClockSource+0x54c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d01d      	beq.n	8008344 <HAL_TIM_ConfigClockSource+0x4e4>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008310:	d018      	beq.n	8008344 <HAL_TIM_ConfigClockSource+0x4e4>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a26      	ldr	r2, [pc, #152]	; (80083b0 <HAL_TIM_ConfigClockSource+0x550>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d013      	beq.n	8008344 <HAL_TIM_ConfigClockSource+0x4e4>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a24      	ldr	r2, [pc, #144]	; (80083b4 <HAL_TIM_ConfigClockSource+0x554>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d00e      	beq.n	8008344 <HAL_TIM_ConfigClockSource+0x4e4>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a23      	ldr	r2, [pc, #140]	; (80083b8 <HAL_TIM_ConfigClockSource+0x558>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d009      	beq.n	8008344 <HAL_TIM_ConfigClockSource+0x4e4>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a21      	ldr	r2, [pc, #132]	; (80083bc <HAL_TIM_ConfigClockSource+0x55c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d004      	beq.n	8008344 <HAL_TIM_ConfigClockSource+0x4e4>
 800833a:	f241 519b 	movw	r1, #5531	; 0x159b
 800833e:	4820      	ldr	r0, [pc, #128]	; (80083c0 <HAL_TIM_ConfigClockSource+0x560>)
 8008340:	f7fa f8c5 	bl	80024ce <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800834c:	d014      	beq.n	8008378 <HAL_TIM_ConfigClockSource+0x518>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d010      	beq.n	8008378 <HAL_TIM_ConfigClockSource+0x518>
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00c      	beq.n	8008378 <HAL_TIM_ConfigClockSource+0x518>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d008      	beq.n	8008378 <HAL_TIM_ConfigClockSource+0x518>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	2b0a      	cmp	r3, #10
 800836c:	d004      	beq.n	8008378 <HAL_TIM_ConfigClockSource+0x518>
 800836e:	f241 519e 	movw	r1, #5534	; 0x159e
 8008372:	4813      	ldr	r0, [pc, #76]	; (80083c0 <HAL_TIM_ConfigClockSource+0x560>)
 8008374:	f7fa f8ab 	bl	80024ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	2b0f      	cmp	r3, #15
 800837e:	d904      	bls.n	800838a <HAL_TIM_ConfigClockSource+0x52a>
 8008380:	f241 519f 	movw	r1, #5535	; 0x159f
 8008384:	480e      	ldr	r0, [pc, #56]	; (80083c0 <HAL_TIM_ConfigClockSource+0x560>)
 8008386:	f7fa f8a2 	bl	80024ce <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6818      	ldr	r0, [r3, #0]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	6859      	ldr	r1, [r3, #4]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	461a      	mov	r2, r3
 8008398:	f000 fc9d 	bl	8008cd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2160      	movs	r1, #96	; 0x60
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fcc7 	bl	8008d36 <TIM_ITRx_SetConfig>
      break;
 80083a8:	e092      	b.n	80084d0 <HAL_TIM_ConfigClockSource+0x670>
 80083aa:	bf00      	nop
 80083ac:	40010000 	.word	0x40010000
 80083b0:	40000400 	.word	0x40000400
 80083b4:	40000800 	.word	0x40000800
 80083b8:	40000c00 	.word	0x40000c00
 80083bc:	40010400 	.word	0x40010400
 80083c0:	08015170 	.word	0x08015170
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a48      	ldr	r2, [pc, #288]	; (80084ec <HAL_TIM_ConfigClockSource+0x68c>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d01d      	beq.n	800840a <HAL_TIM_ConfigClockSource+0x5aa>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d6:	d018      	beq.n	800840a <HAL_TIM_ConfigClockSource+0x5aa>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a44      	ldr	r2, [pc, #272]	; (80084f0 <HAL_TIM_ConfigClockSource+0x690>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d013      	beq.n	800840a <HAL_TIM_ConfigClockSource+0x5aa>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a43      	ldr	r2, [pc, #268]	; (80084f4 <HAL_TIM_ConfigClockSource+0x694>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d00e      	beq.n	800840a <HAL_TIM_ConfigClockSource+0x5aa>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a41      	ldr	r2, [pc, #260]	; (80084f8 <HAL_TIM_ConfigClockSource+0x698>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d009      	beq.n	800840a <HAL_TIM_ConfigClockSource+0x5aa>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a40      	ldr	r2, [pc, #256]	; (80084fc <HAL_TIM_ConfigClockSource+0x69c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d004      	beq.n	800840a <HAL_TIM_ConfigClockSource+0x5aa>
 8008400:	f241 51ab 	movw	r1, #5547	; 0x15ab
 8008404:	483e      	ldr	r0, [pc, #248]	; (8008500 <HAL_TIM_ConfigClockSource+0x6a0>)
 8008406:	f7fa f862 	bl	80024ce <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008412:	d014      	beq.n	800843e <HAL_TIM_ConfigClockSource+0x5de>
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d010      	beq.n	800843e <HAL_TIM_ConfigClockSource+0x5de>
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00c      	beq.n	800843e <HAL_TIM_ConfigClockSource+0x5de>
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	2b02      	cmp	r3, #2
 800842a:	d008      	beq.n	800843e <HAL_TIM_ConfigClockSource+0x5de>
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	2b0a      	cmp	r3, #10
 8008432:	d004      	beq.n	800843e <HAL_TIM_ConfigClockSource+0x5de>
 8008434:	f241 51ae 	movw	r1, #5550	; 0x15ae
 8008438:	4831      	ldr	r0, [pc, #196]	; (8008500 <HAL_TIM_ConfigClockSource+0x6a0>)
 800843a:	f7fa f848 	bl	80024ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	2b0f      	cmp	r3, #15
 8008444:	d904      	bls.n	8008450 <HAL_TIM_ConfigClockSource+0x5f0>
 8008446:	f241 51af 	movw	r1, #5551	; 0x15af
 800844a:	482d      	ldr	r0, [pc, #180]	; (8008500 <HAL_TIM_ConfigClockSource+0x6a0>)
 800844c:	f7fa f83f 	bl	80024ce <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6818      	ldr	r0, [r3, #0]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	6859      	ldr	r1, [r3, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	461a      	mov	r2, r3
 800845e:	f000 fc0b 	bl	8008c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2140      	movs	r1, #64	; 0x40
 8008468:	4618      	mov	r0, r3
 800846a:	f000 fc64 	bl	8008d36 <TIM_ITRx_SetConfig>
      break;
 800846e:	e02f      	b.n	80084d0 <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a1d      	ldr	r2, [pc, #116]	; (80084ec <HAL_TIM_ConfigClockSource+0x68c>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d01d      	beq.n	80084b6 <HAL_TIM_ConfigClockSource+0x656>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008482:	d018      	beq.n	80084b6 <HAL_TIM_ConfigClockSource+0x656>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a19      	ldr	r2, [pc, #100]	; (80084f0 <HAL_TIM_ConfigClockSource+0x690>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d013      	beq.n	80084b6 <HAL_TIM_ConfigClockSource+0x656>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a18      	ldr	r2, [pc, #96]	; (80084f4 <HAL_TIM_ConfigClockSource+0x694>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d00e      	beq.n	80084b6 <HAL_TIM_ConfigClockSource+0x656>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a16      	ldr	r2, [pc, #88]	; (80084f8 <HAL_TIM_ConfigClockSource+0x698>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d009      	beq.n	80084b6 <HAL_TIM_ConfigClockSource+0x656>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a15      	ldr	r2, [pc, #84]	; (80084fc <HAL_TIM_ConfigClockSource+0x69c>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d004      	beq.n	80084b6 <HAL_TIM_ConfigClockSource+0x656>
 80084ac:	f241 51be 	movw	r1, #5566	; 0x15be
 80084b0:	4813      	ldr	r0, [pc, #76]	; (8008500 <HAL_TIM_ConfigClockSource+0x6a0>)
 80084b2:	f7fa f80c 	bl	80024ce <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4619      	mov	r1, r3
 80084c0:	4610      	mov	r0, r2
 80084c2:	f000 fc38 	bl	8008d36 <TIM_ITRx_SetConfig>
      break;
 80084c6:	e003      	b.n	80084d0 <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	73fb      	strb	r3, [r7, #15]
      break;
 80084cc:	e000      	b.n	80084d0 <HAL_TIM_ConfigClockSource+0x670>
      break;
 80084ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	40010000 	.word	0x40010000
 80084f0:	40000400 	.word	0x40000400
 80084f4:	40000800 	.word	0x40000800
 80084f8:	40000c00 	.word	0x40000c00
 80084fc:	40010400 	.word	0x40010400
 8008500:	08015170 	.word	0x08015170

08008504 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a40      	ldr	r2, [pc, #256]	; (800867c <TIM_Base_SetConfig+0x114>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d013      	beq.n	80085a8 <TIM_Base_SetConfig+0x40>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008586:	d00f      	beq.n	80085a8 <TIM_Base_SetConfig+0x40>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a3d      	ldr	r2, [pc, #244]	; (8008680 <TIM_Base_SetConfig+0x118>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d00b      	beq.n	80085a8 <TIM_Base_SetConfig+0x40>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a3c      	ldr	r2, [pc, #240]	; (8008684 <TIM_Base_SetConfig+0x11c>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d007      	beq.n	80085a8 <TIM_Base_SetConfig+0x40>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a3b      	ldr	r2, [pc, #236]	; (8008688 <TIM_Base_SetConfig+0x120>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d003      	beq.n	80085a8 <TIM_Base_SetConfig+0x40>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a3a      	ldr	r2, [pc, #232]	; (800868c <TIM_Base_SetConfig+0x124>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d108      	bne.n	80085ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a2f      	ldr	r2, [pc, #188]	; (800867c <TIM_Base_SetConfig+0x114>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d02b      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c8:	d027      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a2c      	ldr	r2, [pc, #176]	; (8008680 <TIM_Base_SetConfig+0x118>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d023      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a2b      	ldr	r2, [pc, #172]	; (8008684 <TIM_Base_SetConfig+0x11c>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d01f      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a2a      	ldr	r2, [pc, #168]	; (8008688 <TIM_Base_SetConfig+0x120>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d01b      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a29      	ldr	r2, [pc, #164]	; (800868c <TIM_Base_SetConfig+0x124>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d017      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a28      	ldr	r2, [pc, #160]	; (8008690 <TIM_Base_SetConfig+0x128>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d013      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a27      	ldr	r2, [pc, #156]	; (8008694 <TIM_Base_SetConfig+0x12c>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d00f      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a26      	ldr	r2, [pc, #152]	; (8008698 <TIM_Base_SetConfig+0x130>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d00b      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a25      	ldr	r2, [pc, #148]	; (800869c <TIM_Base_SetConfig+0x134>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d007      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a24      	ldr	r2, [pc, #144]	; (80086a0 <TIM_Base_SetConfig+0x138>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d003      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a23      	ldr	r2, [pc, #140]	; (80086a4 <TIM_Base_SetConfig+0x13c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d108      	bne.n	800862c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	4313      	orrs	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	4313      	orrs	r3, r2
 8008638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a0a      	ldr	r2, [pc, #40]	; (800867c <TIM_Base_SetConfig+0x114>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d003      	beq.n	8008660 <TIM_Base_SetConfig+0xf8>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a0c      	ldr	r2, [pc, #48]	; (800868c <TIM_Base_SetConfig+0x124>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d103      	bne.n	8008668 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	691a      	ldr	r2, [r3, #16]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	615a      	str	r2, [r3, #20]
}
 800866e:	bf00      	nop
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	40010000 	.word	0x40010000
 8008680:	40000400 	.word	0x40000400
 8008684:	40000800 	.word	0x40000800
 8008688:	40000c00 	.word	0x40000c00
 800868c:	40010400 	.word	0x40010400
 8008690:	40014000 	.word	0x40014000
 8008694:	40014400 	.word	0x40014400
 8008698:	40014800 	.word	0x40014800
 800869c:	40001800 	.word	0x40001800
 80086a0:	40001c00 	.word	0x40001c00
 80086a4:	40002000 	.word	0x40002000

080086a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	f023 0201 	bic.w	r2, r3, #1
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	4b3f      	ldr	r3, [pc, #252]	; (80087d0 <TIM_OC1_SetConfig+0x128>)
 80086d4:	4013      	ands	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f023 0303 	bic.w	r3, r3, #3
 80086de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f023 0302 	bic.w	r3, r3, #2
 80086f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a35      	ldr	r2, [pc, #212]	; (80087d4 <TIM_OC1_SetConfig+0x12c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d003      	beq.n	800870c <TIM_OC1_SetConfig+0x64>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a34      	ldr	r2, [pc, #208]	; (80087d8 <TIM_OC1_SetConfig+0x130>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d119      	bne.n	8008740 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d008      	beq.n	8008726 <TIM_OC1_SetConfig+0x7e>
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	2b08      	cmp	r3, #8
 800871a:	d004      	beq.n	8008726 <TIM_OC1_SetConfig+0x7e>
 800871c:	f641 3167 	movw	r1, #7015	; 0x1b67
 8008720:	482e      	ldr	r0, [pc, #184]	; (80087dc <TIM_OC1_SetConfig+0x134>)
 8008722:	f7f9 fed4 	bl	80024ce <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f023 0308 	bic.w	r3, r3, #8
 800872c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	4313      	orrs	r3, r2
 8008736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f023 0304 	bic.w	r3, r3, #4
 800873e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a24      	ldr	r2, [pc, #144]	; (80087d4 <TIM_OC1_SetConfig+0x12c>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d003      	beq.n	8008750 <TIM_OC1_SetConfig+0xa8>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a23      	ldr	r2, [pc, #140]	; (80087d8 <TIM_OC1_SetConfig+0x130>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d12d      	bne.n	80087ac <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	699b      	ldr	r3, [r3, #24]
 8008754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008758:	d008      	beq.n	800876c <TIM_OC1_SetConfig+0xc4>
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d004      	beq.n	800876c <TIM_OC1_SetConfig+0xc4>
 8008762:	f641 3174 	movw	r1, #7028	; 0x1b74
 8008766:	481d      	ldr	r0, [pc, #116]	; (80087dc <TIM_OC1_SetConfig+0x134>)
 8008768:	f7f9 feb1 	bl	80024ce <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008774:	d008      	beq.n	8008788 <TIM_OC1_SetConfig+0xe0>
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d004      	beq.n	8008788 <TIM_OC1_SetConfig+0xe0>
 800877e:	f641 3175 	movw	r1, #7029	; 0x1b75
 8008782:	4816      	ldr	r0, [pc, #88]	; (80087dc <TIM_OC1_SetConfig+0x134>)
 8008784:	f7f9 fea3 	bl	80024ce <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800878e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	4313      	orrs	r3, r2
 80087a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	621a      	str	r2, [r3, #32]
}
 80087c6:	bf00      	nop
 80087c8:	3718      	adds	r7, #24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	fffeff8f 	.word	0xfffeff8f
 80087d4:	40010000 	.word	0x40010000
 80087d8:	40010400 	.word	0x40010400
 80087dc:	08015170 	.word	0x08015170

080087e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	f023 0210 	bic.w	r2, r3, #16
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	4b41      	ldr	r3, [pc, #260]	; (8008910 <TIM_OC2_SetConfig+0x130>)
 800880c:	4013      	ands	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	021b      	lsls	r3, r3, #8
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	4313      	orrs	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f023 0320 	bic.w	r3, r3, #32
 800882a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	011b      	lsls	r3, r3, #4
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	4313      	orrs	r3, r2
 8008836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a36      	ldr	r2, [pc, #216]	; (8008914 <TIM_OC2_SetConfig+0x134>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d003      	beq.n	8008848 <TIM_OC2_SetConfig+0x68>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a35      	ldr	r2, [pc, #212]	; (8008918 <TIM_OC2_SetConfig+0x138>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d11a      	bne.n	800887e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d008      	beq.n	8008862 <TIM_OC2_SetConfig+0x82>
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	2b08      	cmp	r3, #8
 8008856:	d004      	beq.n	8008862 <TIM_OC2_SetConfig+0x82>
 8008858:	f641 31b2 	movw	r1, #7090	; 0x1bb2
 800885c:	482f      	ldr	r0, [pc, #188]	; (800891c <TIM_OC2_SetConfig+0x13c>)
 800885e:	f7f9 fe36 	bl	80024ce <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008868:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	011b      	lsls	r3, r3, #4
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	4313      	orrs	r3, r2
 8008874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800887c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a24      	ldr	r2, [pc, #144]	; (8008914 <TIM_OC2_SetConfig+0x134>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d003      	beq.n	800888e <TIM_OC2_SetConfig+0xae>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a23      	ldr	r2, [pc, #140]	; (8008918 <TIM_OC2_SetConfig+0x138>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d12f      	bne.n	80088ee <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008896:	d008      	beq.n	80088aa <TIM_OC2_SetConfig+0xca>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d004      	beq.n	80088aa <TIM_OC2_SetConfig+0xca>
 80088a0:	f44f 51de 	mov.w	r1, #7104	; 0x1bc0
 80088a4:	481d      	ldr	r0, [pc, #116]	; (800891c <TIM_OC2_SetConfig+0x13c>)
 80088a6:	f7f9 fe12 	bl	80024ce <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088b2:	d008      	beq.n	80088c6 <TIM_OC2_SetConfig+0xe6>
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d004      	beq.n	80088c6 <TIM_OC2_SetConfig+0xe6>
 80088bc:	f641 31c1 	movw	r1, #7105	; 0x1bc1
 80088c0:	4816      	ldr	r0, [pc, #88]	; (800891c <TIM_OC2_SetConfig+0x13c>)
 80088c2:	f7f9 fe04 	bl	80024ce <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	4313      	orrs	r3, r2
 80088e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	621a      	str	r2, [r3, #32]
}
 8008908:	bf00      	nop
 800890a:	3718      	adds	r7, #24
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	feff8fff 	.word	0xfeff8fff
 8008914:	40010000 	.word	0x40010000
 8008918:	40010400 	.word	0x40010400
 800891c:	08015170 	.word	0x08015170

08008920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	4b41      	ldr	r3, [pc, #260]	; (8008a50 <TIM_OC3_SetConfig+0x130>)
 800894c:	4013      	ands	r3, r2
 800894e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f023 0303 	bic.w	r3, r3, #3
 8008956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	4313      	orrs	r3, r2
 8008960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	021b      	lsls	r3, r3, #8
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	4313      	orrs	r3, r2
 8008974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a36      	ldr	r2, [pc, #216]	; (8008a54 <TIM_OC3_SetConfig+0x134>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d003      	beq.n	8008986 <TIM_OC3_SetConfig+0x66>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a35      	ldr	r2, [pc, #212]	; (8008a58 <TIM_OC3_SetConfig+0x138>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d11a      	bne.n	80089bc <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d008      	beq.n	80089a0 <TIM_OC3_SetConfig+0x80>
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	2b08      	cmp	r3, #8
 8008994:	d004      	beq.n	80089a0 <TIM_OC3_SetConfig+0x80>
 8008996:	f641 31fd 	movw	r1, #7165	; 0x1bfd
 800899a:	4830      	ldr	r0, [pc, #192]	; (8008a5c <TIM_OC3_SetConfig+0x13c>)
 800899c:	f7f9 fd97 	bl	80024ce <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	021b      	lsls	r3, r3, #8
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a25      	ldr	r2, [pc, #148]	; (8008a54 <TIM_OC3_SetConfig+0x134>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d003      	beq.n	80089cc <TIM_OC3_SetConfig+0xac>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a24      	ldr	r2, [pc, #144]	; (8008a58 <TIM_OC3_SetConfig+0x138>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d12f      	bne.n	8008a2c <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089d4:	d008      	beq.n	80089e8 <TIM_OC3_SetConfig+0xc8>
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d004      	beq.n	80089e8 <TIM_OC3_SetConfig+0xc8>
 80089de:	f641 410a 	movw	r1, #7178	; 0x1c0a
 80089e2:	481e      	ldr	r0, [pc, #120]	; (8008a5c <TIM_OC3_SetConfig+0x13c>)
 80089e4:	f7f9 fd73 	bl	80024ce <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089f0:	d008      	beq.n	8008a04 <TIM_OC3_SetConfig+0xe4>
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d004      	beq.n	8008a04 <TIM_OC3_SetConfig+0xe4>
 80089fa:	f641 410b 	movw	r1, #7179	; 0x1c0b
 80089fe:	4817      	ldr	r0, [pc, #92]	; (8008a5c <TIM_OC3_SetConfig+0x13c>)
 8008a00:	f7f9 fd65 	bl	80024ce <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	011b      	lsls	r3, r3, #4
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	011b      	lsls	r3, r3, #4
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	621a      	str	r2, [r3, #32]
}
 8008a46:	bf00      	nop
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	fffeff8f 	.word	0xfffeff8f
 8008a54:	40010000 	.word	0x40010000
 8008a58:	40010400 	.word	0x40010400
 8008a5c:	08015170 	.word	0x08015170

08008a60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	4b24      	ldr	r3, [pc, #144]	; (8008b1c <TIM_OC4_SetConfig+0xbc>)
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	021b      	lsls	r3, r3, #8
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008aaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	031b      	lsls	r3, r3, #12
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a19      	ldr	r2, [pc, #100]	; (8008b20 <TIM_OC4_SetConfig+0xc0>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d003      	beq.n	8008ac8 <TIM_OC4_SetConfig+0x68>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a18      	ldr	r2, [pc, #96]	; (8008b24 <TIM_OC4_SetConfig+0xc4>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d117      	bne.n	8008af8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ad0:	d008      	beq.n	8008ae4 <TIM_OC4_SetConfig+0x84>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d004      	beq.n	8008ae4 <TIM_OC4_SetConfig+0x84>
 8008ada:	f641 4149 	movw	r1, #7241	; 0x1c49
 8008ade:	4812      	ldr	r0, [pc, #72]	; (8008b28 <TIM_OC4_SetConfig+0xc8>)
 8008ae0:	f7f9 fcf5 	bl	80024ce <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	019b      	lsls	r3, r3, #6
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	621a      	str	r2, [r3, #32]
}
 8008b12:	bf00      	nop
 8008b14:	3718      	adds	r7, #24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	feff8fff 	.word	0xfeff8fff
 8008b20:	40010000 	.word	0x40010000
 8008b24:	40010400 	.word	0x40010400
 8008b28:	08015170 	.word	0x08015170

08008b2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b087      	sub	sp, #28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	4b1b      	ldr	r3, [pc, #108]	; (8008bc4 <TIM_OC5_SetConfig+0x98>)
 8008b58:	4013      	ands	r3, r2
 8008b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	041b      	lsls	r3, r3, #16
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a12      	ldr	r2, [pc, #72]	; (8008bc8 <TIM_OC5_SetConfig+0x9c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d003      	beq.n	8008b8a <TIM_OC5_SetConfig+0x5e>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a11      	ldr	r2, [pc, #68]	; (8008bcc <TIM_OC5_SetConfig+0xa0>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d109      	bne.n	8008b9e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	021b      	lsls	r3, r3, #8
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685a      	ldr	r2, [r3, #4]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	621a      	str	r2, [r3, #32]
}
 8008bb8:	bf00      	nop
 8008bba:	371c      	adds	r7, #28
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	fffeff8f 	.word	0xfffeff8f
 8008bc8:	40010000 	.word	0x40010000
 8008bcc:	40010400 	.word	0x40010400

08008bd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b087      	sub	sp, #28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	4b1c      	ldr	r3, [pc, #112]	; (8008c6c <TIM_OC6_SetConfig+0x9c>)
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	021b      	lsls	r3, r3, #8
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	051b      	lsls	r3, r3, #20
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a13      	ldr	r2, [pc, #76]	; (8008c70 <TIM_OC6_SetConfig+0xa0>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d003      	beq.n	8008c30 <TIM_OC6_SetConfig+0x60>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a12      	ldr	r2, [pc, #72]	; (8008c74 <TIM_OC6_SetConfig+0xa4>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d109      	bne.n	8008c44 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	029b      	lsls	r3, r3, #10
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	621a      	str	r2, [r3, #32]
}
 8008c5e:	bf00      	nop
 8008c60:	371c      	adds	r7, #28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	feff8fff 	.word	0xfeff8fff
 8008c70:	40010000 	.word	0x40010000
 8008c74:	40010400 	.word	0x40010400

08008c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6a1b      	ldr	r3, [r3, #32]
 8008c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	f023 0201 	bic.w	r2, r3, #1
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	011b      	lsls	r3, r3, #4
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	f023 030a 	bic.w	r3, r3, #10
 8008cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	621a      	str	r2, [r3, #32]
}
 8008cca:	bf00      	nop
 8008ccc:	371c      	adds	r7, #28
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b087      	sub	sp, #28
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	60f8      	str	r0, [r7, #12]
 8008cde:	60b9      	str	r1, [r7, #8]
 8008ce0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	f023 0210 	bic.w	r2, r3, #16
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6a1b      	ldr	r3, [r3, #32]
 8008cf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	031b      	lsls	r3, r3, #12
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	011b      	lsls	r3, r3, #4
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	621a      	str	r2, [r3, #32]
}
 8008d2a:	bf00      	nop
 8008d2c:	371c      	adds	r7, #28
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b085      	sub	sp, #20
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	f043 0307 	orr.w	r3, r3, #7
 8008d58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	609a      	str	r2, [r3, #8]
}
 8008d60:	bf00      	nop
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b087      	sub	sp, #28
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
 8008d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	021a      	lsls	r2, r3, #8
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	431a      	orrs	r2, r3
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	609a      	str	r2, [r3, #8]
}
 8008da0:	bf00      	nop
 8008da2:	371c      	adds	r7, #28
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	4a35      	ldr	r2, [pc, #212]	; (8008e90 <TIM_CCxChannelCmd+0xe4>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d030      	beq.n	8008e22 <TIM_CCxChannelCmd+0x76>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dc6:	d02c      	beq.n	8008e22 <TIM_CCxChannelCmd+0x76>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	4a32      	ldr	r2, [pc, #200]	; (8008e94 <TIM_CCxChannelCmd+0xe8>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d028      	beq.n	8008e22 <TIM_CCxChannelCmd+0x76>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4a31      	ldr	r2, [pc, #196]	; (8008e98 <TIM_CCxChannelCmd+0xec>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d024      	beq.n	8008e22 <TIM_CCxChannelCmd+0x76>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	4a30      	ldr	r2, [pc, #192]	; (8008e9c <TIM_CCxChannelCmd+0xf0>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d020      	beq.n	8008e22 <TIM_CCxChannelCmd+0x76>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4a2f      	ldr	r2, [pc, #188]	; (8008ea0 <TIM_CCxChannelCmd+0xf4>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d01c      	beq.n	8008e22 <TIM_CCxChannelCmd+0x76>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	4a2e      	ldr	r2, [pc, #184]	; (8008ea4 <TIM_CCxChannelCmd+0xf8>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d018      	beq.n	8008e22 <TIM_CCxChannelCmd+0x76>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4a2d      	ldr	r2, [pc, #180]	; (8008ea8 <TIM_CCxChannelCmd+0xfc>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d014      	beq.n	8008e22 <TIM_CCxChannelCmd+0x76>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4a2c      	ldr	r2, [pc, #176]	; (8008eac <TIM_CCxChannelCmd+0x100>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d010      	beq.n	8008e22 <TIM_CCxChannelCmd+0x76>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	4a2b      	ldr	r2, [pc, #172]	; (8008eb0 <TIM_CCxChannelCmd+0x104>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d00c      	beq.n	8008e22 <TIM_CCxChannelCmd+0x76>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4a2a      	ldr	r2, [pc, #168]	; (8008eb4 <TIM_CCxChannelCmd+0x108>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d008      	beq.n	8008e22 <TIM_CCxChannelCmd+0x76>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	4a29      	ldr	r2, [pc, #164]	; (8008eb8 <TIM_CCxChannelCmd+0x10c>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d004      	beq.n	8008e22 <TIM_CCxChannelCmd+0x76>
 8008e18:	f641 61a1 	movw	r1, #7841	; 0x1ea1
 8008e1c:	4827      	ldr	r0, [pc, #156]	; (8008ebc <TIM_CCxChannelCmd+0x110>)
 8008e1e:	f7f9 fb56 	bl	80024ce <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d016      	beq.n	8008e56 <TIM_CCxChannelCmd+0xaa>
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	d013      	beq.n	8008e56 <TIM_CCxChannelCmd+0xaa>
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d010      	beq.n	8008e56 <TIM_CCxChannelCmd+0xaa>
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2b0c      	cmp	r3, #12
 8008e38:	d00d      	beq.n	8008e56 <TIM_CCxChannelCmd+0xaa>
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2b10      	cmp	r3, #16
 8008e3e:	d00a      	beq.n	8008e56 <TIM_CCxChannelCmd+0xaa>
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2b14      	cmp	r3, #20
 8008e44:	d007      	beq.n	8008e56 <TIM_CCxChannelCmd+0xaa>
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	2b3c      	cmp	r3, #60	; 0x3c
 8008e4a:	d004      	beq.n	8008e56 <TIM_CCxChannelCmd+0xaa>
 8008e4c:	f641 61a2 	movw	r1, #7842	; 0x1ea2
 8008e50:	481a      	ldr	r0, [pc, #104]	; (8008ebc <TIM_CCxChannelCmd+0x110>)
 8008e52:	f7f9 fb3c 	bl	80024ce <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	f003 031f 	and.w	r3, r3, #31
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e62:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6a1a      	ldr	r2, [r3, #32]
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	43db      	mvns	r3, r3
 8008e6c:	401a      	ands	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6a1a      	ldr	r2, [r3, #32]
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	f003 031f 	and.w	r3, r3, #31
 8008e7c:	6879      	ldr	r1, [r7, #4]
 8008e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e82:	431a      	orrs	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	621a      	str	r2, [r3, #32]
}
 8008e88:	bf00      	nop
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	40010000 	.word	0x40010000
 8008e94:	40000400 	.word	0x40000400
 8008e98:	40000800 	.word	0x40000800
 8008e9c:	40000c00 	.word	0x40000c00
 8008ea0:	40010400 	.word	0x40010400
 8008ea4:	40014000 	.word	0x40014000
 8008ea8:	40014400 	.word	0x40014400
 8008eac:	40014800 	.word	0x40014800
 8008eb0:	40001800 	.word	0x40001800
 8008eb4:	40001c00 	.word	0x40001c00
 8008eb8:	40002000 	.word	0x40002000
 8008ebc:	08015170 	.word	0x08015170

08008ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a32      	ldr	r2, [pc, #200]	; (8008f98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d027      	beq.n	8008f24 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008edc:	d022      	beq.n	8008f24 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a2e      	ldr	r2, [pc, #184]	; (8008f9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d01d      	beq.n	8008f24 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a2c      	ldr	r2, [pc, #176]	; (8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d018      	beq.n	8008f24 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a2b      	ldr	r2, [pc, #172]	; (8008fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d013      	beq.n	8008f24 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a29      	ldr	r2, [pc, #164]	; (8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d00e      	beq.n	8008f24 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a28      	ldr	r2, [pc, #160]	; (8008fac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d009      	beq.n	8008f24 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a26      	ldr	r2, [pc, #152]	; (8008fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d004      	beq.n	8008f24 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008f1a:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8008f1e:	4825      	ldr	r0, [pc, #148]	; (8008fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f20:	f7f9 fad5 	bl	80024ce <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d020      	beq.n	8008f6e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b10      	cmp	r3, #16
 8008f32:	d01c      	beq.n	8008f6e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2b20      	cmp	r3, #32
 8008f3a:	d018      	beq.n	8008f6e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b30      	cmp	r3, #48	; 0x30
 8008f42:	d014      	beq.n	8008f6e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b40      	cmp	r3, #64	; 0x40
 8008f4a:	d010      	beq.n	8008f6e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b50      	cmp	r3, #80	; 0x50
 8008f52:	d00c      	beq.n	8008f6e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b60      	cmp	r3, #96	; 0x60
 8008f5a:	d008      	beq.n	8008f6e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b70      	cmp	r3, #112	; 0x70
 8008f62:	d004      	beq.n	8008f6e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008f64:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8008f68:	4812      	ldr	r0, [pc, #72]	; (8008fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f6a:	f7f9 fab0 	bl	80024ce <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	2b80      	cmp	r3, #128	; 0x80
 8008f74:	d008      	beq.n	8008f88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d004      	beq.n	8008f88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f7e:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8008f82:	480c      	ldr	r0, [pc, #48]	; (8008fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f84:	f7f9 faa3 	bl	80024ce <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d112      	bne.n	8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8008f92:	2302      	movs	r3, #2
 8008f94:	e0d7      	b.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8008f96:	bf00      	nop
 8008f98:	40010000 	.word	0x40010000
 8008f9c:	40000400 	.word	0x40000400
 8008fa0:	40000800 	.word	0x40000800
 8008fa4:	40000c00 	.word	0x40000c00
 8008fa8:	40001000 	.word	0x40001000
 8008fac:	40001400 	.word	0x40001400
 8008fb0:	40010400 	.word	0x40010400
 8008fb4:	080151a8 	.word	0x080151a8
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2202      	movs	r2, #2
 8008fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a5c      	ldr	r2, [pc, #368]	; (8009150 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d004      	beq.n	8008fec <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a5b      	ldr	r2, [pc, #364]	; (8009154 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d161      	bne.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d054      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ffc:	d04f      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009006:	d04a      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009010:	d045      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800901a:	d040      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009024:	d03b      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800902e:	d036      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009038:	d031      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8009042:	d02c      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800904c:	d027      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8009056:	d022      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009060:	d01d      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 800906a:	d018      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009074:	d013      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 800907e:	d00e      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8009088:	d009      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8009092:	d004      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009094:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8009098:	482f      	ldr	r0, [pc, #188]	; (8009158 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800909a:	f7f9 fa18 	bl	80024ce <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80090a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	4313      	orrs	r3, r2
 80090c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a20      	ldr	r2, [pc, #128]	; (8009150 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d022      	beq.n	800911a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090dc:	d01d      	beq.n	800911a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a1e      	ldr	r2, [pc, #120]	; (800915c <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d018      	beq.n	800911a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a1c      	ldr	r2, [pc, #112]	; (8009160 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d013      	beq.n	800911a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a1b      	ldr	r2, [pc, #108]	; (8009164 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d00e      	beq.n	800911a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a14      	ldr	r2, [pc, #80]	; (8009154 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d009      	beq.n	800911a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a17      	ldr	r2, [pc, #92]	; (8009168 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d004      	beq.n	800911a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a15      	ldr	r2, [pc, #84]	; (800916c <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d10c      	bne.n	8009134 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009120:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	4313      	orrs	r3, r2
 800912a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	40010000 	.word	0x40010000
 8009154:	40010400 	.word	0x40010400
 8009158:	080151a8 	.word	0x080151a8
 800915c:	40000400 	.word	0x40000400
 8009160:	40000800 	.word	0x40000800
 8009164:	40000c00 	.word	0x40000c00
 8009168:	40014000 	.word	0x40014000
 800916c:	40001800 	.word	0x40001800

08009170 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d101      	bne.n	80091be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e09f      	b.n	80092fe <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d02d      	beq.n	8009222 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a4f      	ldr	r2, [pc, #316]	; (8009308 <HAL_UART_Init+0x15c>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d055      	beq.n	800927c <HAL_UART_Init+0xd0>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a4d      	ldr	r2, [pc, #308]	; (800930c <HAL_UART_Init+0x160>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d050      	beq.n	800927c <HAL_UART_Init+0xd0>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a4c      	ldr	r2, [pc, #304]	; (8009310 <HAL_UART_Init+0x164>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d04b      	beq.n	800927c <HAL_UART_Init+0xd0>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a4a      	ldr	r2, [pc, #296]	; (8009314 <HAL_UART_Init+0x168>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d046      	beq.n	800927c <HAL_UART_Init+0xd0>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a49      	ldr	r2, [pc, #292]	; (8009318 <HAL_UART_Init+0x16c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d041      	beq.n	800927c <HAL_UART_Init+0xd0>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a47      	ldr	r2, [pc, #284]	; (800931c <HAL_UART_Init+0x170>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d03c      	beq.n	800927c <HAL_UART_Init+0xd0>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a46      	ldr	r2, [pc, #280]	; (8009320 <HAL_UART_Init+0x174>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d037      	beq.n	800927c <HAL_UART_Init+0xd0>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a44      	ldr	r2, [pc, #272]	; (8009324 <HAL_UART_Init+0x178>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d032      	beq.n	800927c <HAL_UART_Init+0xd0>
 8009216:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800921a:	4843      	ldr	r0, [pc, #268]	; (8009328 <HAL_UART_Init+0x17c>)
 800921c:	f7f9 f957 	bl	80024ce <assert_failed>
 8009220:	e02c      	b.n	800927c <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a38      	ldr	r2, [pc, #224]	; (8009308 <HAL_UART_Init+0x15c>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d027      	beq.n	800927c <HAL_UART_Init+0xd0>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a36      	ldr	r2, [pc, #216]	; (800930c <HAL_UART_Init+0x160>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d022      	beq.n	800927c <HAL_UART_Init+0xd0>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a35      	ldr	r2, [pc, #212]	; (8009310 <HAL_UART_Init+0x164>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d01d      	beq.n	800927c <HAL_UART_Init+0xd0>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a33      	ldr	r2, [pc, #204]	; (8009314 <HAL_UART_Init+0x168>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d018      	beq.n	800927c <HAL_UART_Init+0xd0>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a32      	ldr	r2, [pc, #200]	; (8009318 <HAL_UART_Init+0x16c>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d013      	beq.n	800927c <HAL_UART_Init+0xd0>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a30      	ldr	r2, [pc, #192]	; (800931c <HAL_UART_Init+0x170>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d00e      	beq.n	800927c <HAL_UART_Init+0xd0>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a2f      	ldr	r2, [pc, #188]	; (8009320 <HAL_UART_Init+0x174>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d009      	beq.n	800927c <HAL_UART_Init+0xd0>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a2d      	ldr	r2, [pc, #180]	; (8009324 <HAL_UART_Init+0x178>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d004      	beq.n	800927c <HAL_UART_Init+0xd0>
 8009272:	f240 1131 	movw	r1, #305	; 0x131
 8009276:	482c      	ldr	r0, [pc, #176]	; (8009328 <HAL_UART_Init+0x17c>)
 8009278:	f7f9 f929 	bl	80024ce <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009280:	2b00      	cmp	r3, #0
 8009282:	d106      	bne.n	8009292 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7f9 fd1b 	bl	8002cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2224      	movs	r2, #36	; 0x24
 8009296:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f022 0201 	bic.w	r2, r2, #1
 80092a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fbf9 	bl	8009aa0 <UART_SetConfig>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d101      	bne.n	80092b8 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e022      	b.n	80092fe <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 fee3 	bl	800a08c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	689a      	ldr	r2, [r3, #8]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f042 0201 	orr.w	r2, r2, #1
 80092f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f001 f820 	bl	800a33c <UART_CheckIdleState>
 80092fc:	4603      	mov	r3, r0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	40011000 	.word	0x40011000
 800930c:	40004400 	.word	0x40004400
 8009310:	40004800 	.word	0x40004800
 8009314:	40004c00 	.word	0x40004c00
 8009318:	40005000 	.word	0x40005000
 800931c:	40011400 	.word	0x40011400
 8009320:	40007800 	.word	0x40007800
 8009324:	40007c00 	.word	0x40007c00
 8009328:	080151e4 	.word	0x080151e4

0800932c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08a      	sub	sp, #40	; 0x28
 8009330:	af02      	add	r7, sp, #8
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	603b      	str	r3, [r7, #0]
 8009338:	4613      	mov	r3, r2
 800933a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009340:	2b20      	cmp	r3, #32
 8009342:	d171      	bne.n	8009428 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d002      	beq.n	8009350 <HAL_UART_Transmit+0x24>
 800934a:	88fb      	ldrh	r3, [r7, #6]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d101      	bne.n	8009354 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e06a      	b.n	800942a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2221      	movs	r2, #33	; 0x21
 8009360:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009362:	f7f9 fdad 	bl	8002ec0 <HAL_GetTick>
 8009366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	88fa      	ldrh	r2, [r7, #6]
 800936c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	88fa      	ldrh	r2, [r7, #6]
 8009374:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009380:	d108      	bne.n	8009394 <HAL_UART_Transmit+0x68>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d104      	bne.n	8009394 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800938a:	2300      	movs	r3, #0
 800938c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	61bb      	str	r3, [r7, #24]
 8009392:	e003      	b.n	800939c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009398:	2300      	movs	r3, #0
 800939a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800939c:	e02c      	b.n	80093f8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	2200      	movs	r2, #0
 80093a6:	2180      	movs	r1, #128	; 0x80
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 fffe 	bl	800a3aa <UART_WaitOnFlagUntilTimeout>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e038      	b.n	800942a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10b      	bne.n	80093d6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	881b      	ldrh	r3, [r3, #0]
 80093c2:	461a      	mov	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	3302      	adds	r3, #2
 80093d2:	61bb      	str	r3, [r7, #24]
 80093d4:	e007      	b.n	80093e6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	781a      	ldrb	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	3301      	adds	r3, #1
 80093e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	3b01      	subs	r3, #1
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80093fe:	b29b      	uxth	r3, r3
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1cc      	bne.n	800939e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	2200      	movs	r2, #0
 800940c:	2140      	movs	r1, #64	; 0x40
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 ffcb 	bl	800a3aa <UART_WaitOnFlagUntilTimeout>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e005      	b.n	800942a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2220      	movs	r2, #32
 8009422:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	e000      	b.n	800942a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009428:	2302      	movs	r3, #2
  }
}
 800942a:	4618      	mov	r0, r3
 800942c:	3720      	adds	r7, #32
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b08a      	sub	sp, #40	; 0x28
 8009436:	af00      	add	r7, sp, #0
 8009438:	60f8      	str	r0, [r7, #12]
 800943a:	60b9      	str	r1, [r7, #8]
 800943c:	4613      	mov	r3, r2
 800943e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009446:	2b20      	cmp	r3, #32
 8009448:	d132      	bne.n	80094b0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <HAL_UART_Receive_IT+0x24>
 8009450:	88fb      	ldrh	r3, [r7, #6]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d101      	bne.n	800945a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e02b      	b.n	80094b2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800946a:	2b00      	cmp	r3, #0
 800946c:	d018      	beq.n	80094a0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	e853 3f00 	ldrex	r3, [r3]
 800947a:	613b      	str	r3, [r7, #16]
   return(result);
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009482:	627b      	str	r3, [r7, #36]	; 0x24
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	461a      	mov	r2, r3
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	623b      	str	r3, [r7, #32]
 800948e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009490:	69f9      	ldr	r1, [r7, #28]
 8009492:	6a3a      	ldr	r2, [r7, #32]
 8009494:	e841 2300 	strex	r3, r2, [r1]
 8009498:	61bb      	str	r3, [r7, #24]
   return(result);
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1e6      	bne.n	800946e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80094a0:	88fb      	ldrh	r3, [r7, #6]
 80094a2:	461a      	mov	r2, r3
 80094a4:	68b9      	ldr	r1, [r7, #8]
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f001 f846 	bl	800a538 <UART_Start_Receive_IT>
 80094ac:	4603      	mov	r3, r0
 80094ae:	e000      	b.n	80094b2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80094b0:	2302      	movs	r3, #2
  }
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3728      	adds	r7, #40	; 0x28
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
	...

080094bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b0ba      	sub	sp, #232	; 0xe8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	69db      	ldr	r3, [r3, #28]
 80094ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80094e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80094e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80094ea:	4013      	ands	r3, r2
 80094ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80094f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d115      	bne.n	8009524 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80094f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094fc:	f003 0320 	and.w	r3, r3, #32
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00f      	beq.n	8009524 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009508:	f003 0320 	and.w	r3, r3, #32
 800950c:	2b00      	cmp	r3, #0
 800950e:	d009      	beq.n	8009524 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 8297 	beq.w	8009a48 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	4798      	blx	r3
      }
      return;
 8009522:	e291      	b.n	8009a48 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 8117 	beq.w	800975c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800952e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d106      	bne.n	8009548 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800953a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800953e:	4b85      	ldr	r3, [pc, #532]	; (8009754 <HAL_UART_IRQHandler+0x298>)
 8009540:	4013      	ands	r3, r2
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 810a 	beq.w	800975c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	2b00      	cmp	r3, #0
 8009552:	d011      	beq.n	8009578 <HAL_UART_IRQHandler+0xbc>
 8009554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00b      	beq.n	8009578 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2201      	movs	r2, #1
 8009566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800956e:	f043 0201 	orr.w	r2, r3, #1
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800957c:	f003 0302 	and.w	r3, r3, #2
 8009580:	2b00      	cmp	r3, #0
 8009582:	d011      	beq.n	80095a8 <HAL_UART_IRQHandler+0xec>
 8009584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00b      	beq.n	80095a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2202      	movs	r2, #2
 8009596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800959e:	f043 0204 	orr.w	r2, r3, #4
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ac:	f003 0304 	and.w	r3, r3, #4
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d011      	beq.n	80095d8 <HAL_UART_IRQHandler+0x11c>
 80095b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095b8:	f003 0301 	and.w	r3, r3, #1
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00b      	beq.n	80095d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2204      	movs	r2, #4
 80095c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095ce:	f043 0202 	orr.w	r2, r3, #2
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80095d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095dc:	f003 0308 	and.w	r3, r3, #8
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d017      	beq.n	8009614 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80095e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095e8:	f003 0320 	and.w	r3, r3, #32
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d105      	bne.n	80095fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80095f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00b      	beq.n	8009614 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2208      	movs	r2, #8
 8009602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800960a:	f043 0208 	orr.w	r2, r3, #8
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800961c:	2b00      	cmp	r3, #0
 800961e:	d012      	beq.n	8009646 <HAL_UART_IRQHandler+0x18a>
 8009620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00c      	beq.n	8009646 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009634:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800963c:	f043 0220 	orr.w	r2, r3, #32
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 81fd 	beq.w	8009a4c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009656:	f003 0320 	and.w	r3, r3, #32
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00d      	beq.n	800967a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800965e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009662:	f003 0320 	and.w	r3, r3, #32
 8009666:	2b00      	cmp	r3, #0
 8009668:	d007      	beq.n	800967a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800968e:	2b40      	cmp	r3, #64	; 0x40
 8009690:	d005      	beq.n	800969e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009696:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800969a:	2b00      	cmp	r3, #0
 800969c:	d04f      	beq.n	800973e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f001 f810 	bl	800a6c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ae:	2b40      	cmp	r3, #64	; 0x40
 80096b0:	d141      	bne.n	8009736 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3308      	adds	r3, #8
 80096b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096c0:	e853 3f00 	ldrex	r3, [r3]
 80096c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80096c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3308      	adds	r3, #8
 80096da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80096de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80096e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80096ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80096ee:	e841 2300 	strex	r3, r2, [r1]
 80096f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80096f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1d9      	bne.n	80096b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009702:	2b00      	cmp	r3, #0
 8009704:	d013      	beq.n	800972e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800970a:	4a13      	ldr	r2, [pc, #76]	; (8009758 <HAL_UART_IRQHandler+0x29c>)
 800970c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009712:	4618      	mov	r0, r3
 8009714:	f7f9 fdb4 	bl	8003280 <HAL_DMA_Abort_IT>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d017      	beq.n	800974e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009728:	4610      	mov	r0, r2
 800972a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800972c:	e00f      	b.n	800974e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f9a0 	bl	8009a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009734:	e00b      	b.n	800974e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f99c 	bl	8009a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800973c:	e007      	b.n	800974e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f998 	bl	8009a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800974c:	e17e      	b.n	8009a4c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800974e:	bf00      	nop
    return;
 8009750:	e17c      	b.n	8009a4c <HAL_UART_IRQHandler+0x590>
 8009752:	bf00      	nop
 8009754:	04000120 	.word	0x04000120
 8009758:	0800a78d 	.word	0x0800a78d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009760:	2b01      	cmp	r3, #1
 8009762:	f040 814c 	bne.w	80099fe <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800976a:	f003 0310 	and.w	r3, r3, #16
 800976e:	2b00      	cmp	r3, #0
 8009770:	f000 8145 	beq.w	80099fe <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009778:	f003 0310 	and.w	r3, r3, #16
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 813e 	beq.w	80099fe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2210      	movs	r2, #16
 8009788:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009794:	2b40      	cmp	r3, #64	; 0x40
 8009796:	f040 80b6 	bne.w	8009906 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80097a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f000 8150 	beq.w	8009a50 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80097b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097ba:	429a      	cmp	r2, r3
 80097bc:	f080 8148 	bcs.w	8009a50 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ce:	69db      	ldr	r3, [r3, #28]
 80097d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097d4:	f000 8086 	beq.w	80098e4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097e4:	e853 3f00 	ldrex	r3, [r3]
 80097e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80097ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	461a      	mov	r2, r3
 80097fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009802:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009806:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800980e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009812:	e841 2300 	strex	r3, r2, [r1]
 8009816:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800981a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1da      	bne.n	80097d8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	3308      	adds	r3, #8
 8009828:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800982c:	e853 3f00 	ldrex	r3, [r3]
 8009830:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009832:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009834:	f023 0301 	bic.w	r3, r3, #1
 8009838:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	3308      	adds	r3, #8
 8009842:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009846:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800984a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800984e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009852:	e841 2300 	strex	r3, r2, [r1]
 8009856:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1e1      	bne.n	8009822 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3308      	adds	r3, #8
 8009864:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009868:	e853 3f00 	ldrex	r3, [r3]
 800986c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800986e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009874:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3308      	adds	r3, #8
 800987e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009882:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009884:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009886:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009888:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800988a:	e841 2300 	strex	r3, r2, [r1]
 800988e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1e3      	bne.n	800985e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2220      	movs	r2, #32
 800989a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098ac:	e853 3f00 	ldrex	r3, [r3]
 80098b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b4:	f023 0310 	bic.w	r3, r3, #16
 80098b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	461a      	mov	r2, r3
 80098c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80098c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098ce:	e841 2300 	strex	r3, r2, [r1]
 80098d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1e4      	bne.n	80098a4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098de:	4618      	mov	r0, r3
 80098e0:	f7f9 fc5e 	bl	80031a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2202      	movs	r2, #2
 80098e8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f8c2 	bl	8009a88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009904:	e0a4      	b.n	8009a50 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009912:	b29b      	uxth	r3, r3
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009920:	b29b      	uxth	r3, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 8096 	beq.w	8009a54 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009928:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 8091 	beq.w	8009a54 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993a:	e853 3f00 	ldrex	r3, [r3]
 800993e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009942:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009946:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	461a      	mov	r2, r3
 8009950:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009954:	647b      	str	r3, [r7, #68]	; 0x44
 8009956:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009958:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800995a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800995c:	e841 2300 	strex	r3, r2, [r1]
 8009960:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1e4      	bne.n	8009932 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3308      	adds	r3, #8
 800996e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	e853 3f00 	ldrex	r3, [r3]
 8009976:	623b      	str	r3, [r7, #32]
   return(result);
 8009978:	6a3b      	ldr	r3, [r7, #32]
 800997a:	f023 0301 	bic.w	r3, r3, #1
 800997e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3308      	adds	r3, #8
 8009988:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800998c:	633a      	str	r2, [r7, #48]	; 0x30
 800998e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009990:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009994:	e841 2300 	strex	r3, r2, [r1]
 8009998:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800999a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1e3      	bne.n	8009968 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2220      	movs	r2, #32
 80099a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	e853 3f00 	ldrex	r3, [r3]
 80099c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f023 0310 	bic.w	r3, r3, #16
 80099c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	461a      	mov	r2, r3
 80099d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80099d6:	61fb      	str	r3, [r7, #28]
 80099d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099da:	69b9      	ldr	r1, [r7, #24]
 80099dc:	69fa      	ldr	r2, [r7, #28]
 80099de:	e841 2300 	strex	r3, r2, [r1]
 80099e2:	617b      	str	r3, [r7, #20]
   return(result);
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1e4      	bne.n	80099b4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2202      	movs	r2, #2
 80099ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099f4:	4619      	mov	r1, r3
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f846 	bl	8009a88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099fc:	e02a      	b.n	8009a54 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80099fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00e      	beq.n	8009a28 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d008      	beq.n	8009a28 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d01c      	beq.n	8009a58 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	4798      	blx	r3
    }
    return;
 8009a26:	e017      	b.n	8009a58 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d012      	beq.n	8009a5a <HAL_UART_IRQHandler+0x59e>
 8009a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00c      	beq.n	8009a5a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 feb9 	bl	800a7b8 <UART_EndTransmit_IT>
    return;
 8009a46:	e008      	b.n	8009a5a <HAL_UART_IRQHandler+0x59e>
      return;
 8009a48:	bf00      	nop
 8009a4a:	e006      	b.n	8009a5a <HAL_UART_IRQHandler+0x59e>
    return;
 8009a4c:	bf00      	nop
 8009a4e:	e004      	b.n	8009a5a <HAL_UART_IRQHandler+0x59e>
      return;
 8009a50:	bf00      	nop
 8009a52:	e002      	b.n	8009a5a <HAL_UART_IRQHandler+0x59e>
      return;
 8009a54:	bf00      	nop
 8009a56:	e000      	b.n	8009a5a <HAL_UART_IRQHandler+0x59e>
    return;
 8009a58:	bf00      	nop
  }

}
 8009a5a:	37e8      	adds	r7, #232	; 0xe8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	460b      	mov	r3, r1
 8009a92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	4aa0      	ldr	r2, [pc, #640]	; (8009d34 <UART_SetConfig+0x294>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d904      	bls.n	8009ac0 <UART_SetConfig+0x20>
 8009ab6:	f640 315d 	movw	r1, #2909	; 0xb5d
 8009aba:	489f      	ldr	r0, [pc, #636]	; (8009d38 <UART_SetConfig+0x298>)
 8009abc:	f7f8 fd07 	bl	80024ce <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ac8:	d00d      	beq.n	8009ae6 <UART_SetConfig+0x46>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d009      	beq.n	8009ae6 <UART_SetConfig+0x46>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ada:	d004      	beq.n	8009ae6 <UART_SetConfig+0x46>
 8009adc:	f640 315e 	movw	r1, #2910	; 0xb5e
 8009ae0:	4895      	ldr	r0, [pc, #596]	; (8009d38 <UART_SetConfig+0x298>)
 8009ae2:	f7f8 fcf4 	bl	80024ce <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aee:	d012      	beq.n	8009b16 <UART_SetConfig+0x76>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00e      	beq.n	8009b16 <UART_SetConfig+0x76>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b00:	d009      	beq.n	8009b16 <UART_SetConfig+0x76>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b0a:	d004      	beq.n	8009b16 <UART_SetConfig+0x76>
 8009b0c:	f640 315f 	movw	r1, #2911	; 0xb5f
 8009b10:	4889      	ldr	r0, [pc, #548]	; (8009d38 <UART_SetConfig+0x298>)
 8009b12:	f7f8 fcdc 	bl	80024ce <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d009      	beq.n	8009b32 <UART_SetConfig+0x92>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a1b      	ldr	r3, [r3, #32]
 8009b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b26:	d004      	beq.n	8009b32 <UART_SetConfig+0x92>
 8009b28:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8009b2c:	4882      	ldr	r0, [pc, #520]	; (8009d38 <UART_SetConfig+0x298>)
 8009b2e:	f7f8 fcce 	bl	80024ce <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00e      	beq.n	8009b58 <UART_SetConfig+0xb8>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b42:	d009      	beq.n	8009b58 <UART_SetConfig+0xb8>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009b4c:	d004      	beq.n	8009b58 <UART_SetConfig+0xb8>
 8009b4e:	f640 3162 	movw	r1, #2914	; 0xb62
 8009b52:	4879      	ldr	r0, [pc, #484]	; (8009d38 <UART_SetConfig+0x298>)
 8009b54:	f7f8 fcbb 	bl	80024ce <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	695b      	ldr	r3, [r3, #20]
 8009b5c:	f023 030c 	bic.w	r3, r3, #12
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d103      	bne.n	8009b6c <UART_SetConfig+0xcc>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	695b      	ldr	r3, [r3, #20]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d104      	bne.n	8009b76 <UART_SetConfig+0xd6>
 8009b6c:	f640 3163 	movw	r1, #2915	; 0xb63
 8009b70:	4871      	ldr	r0, [pc, #452]	; (8009d38 <UART_SetConfig+0x298>)
 8009b72:	f7f8 fcac 	bl	80024ce <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d013      	beq.n	8009ba6 <UART_SetConfig+0x106>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	699b      	ldr	r3, [r3, #24]
 8009b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b86:	d00e      	beq.n	8009ba6 <UART_SetConfig+0x106>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b90:	d009      	beq.n	8009ba6 <UART_SetConfig+0x106>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	699b      	ldr	r3, [r3, #24]
 8009b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b9a:	d004      	beq.n	8009ba6 <UART_SetConfig+0x106>
 8009b9c:	f640 3164 	movw	r1, #2916	; 0xb64
 8009ba0:	4865      	ldr	r0, [pc, #404]	; (8009d38 <UART_SetConfig+0x298>)
 8009ba2:	f7f8 fc94 	bl	80024ce <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	69db      	ldr	r3, [r3, #28]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d009      	beq.n	8009bc2 <UART_SetConfig+0x122>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bb6:	d004      	beq.n	8009bc2 <UART_SetConfig+0x122>
 8009bb8:	f640 3165 	movw	r1, #2917	; 0xb65
 8009bbc:	485e      	ldr	r0, [pc, #376]	; (8009d38 <UART_SetConfig+0x298>)
 8009bbe:	f7f8 fc86 	bl	80024ce <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	689a      	ldr	r2, [r3, #8]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	431a      	orrs	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	431a      	orrs	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	69db      	ldr	r3, [r3, #28]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	4b56      	ldr	r3, [pc, #344]	; (8009d3c <UART_SetConfig+0x29c>)
 8009be2:	4013      	ands	r3, r2
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	6812      	ldr	r2, [r2, #0]
 8009be8:	6979      	ldr	r1, [r7, #20]
 8009bea:	430b      	orrs	r3, r1
 8009bec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	68da      	ldr	r2, [r3, #12]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	430a      	orrs	r2, r1
 8009c02:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	697a      	ldr	r2, [r7, #20]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a44      	ldr	r2, [pc, #272]	; (8009d40 <UART_SetConfig+0x2a0>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d121      	bne.n	8009c76 <UART_SetConfig+0x1d6>
 8009c32:	4b44      	ldr	r3, [pc, #272]	; (8009d44 <UART_SetConfig+0x2a4>)
 8009c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c38:	f003 0303 	and.w	r3, r3, #3
 8009c3c:	2b03      	cmp	r3, #3
 8009c3e:	d817      	bhi.n	8009c70 <UART_SetConfig+0x1d0>
 8009c40:	a201      	add	r2, pc, #4	; (adr r2, 8009c48 <UART_SetConfig+0x1a8>)
 8009c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c46:	bf00      	nop
 8009c48:	08009c59 	.word	0x08009c59
 8009c4c:	08009c65 	.word	0x08009c65
 8009c50:	08009c5f 	.word	0x08009c5f
 8009c54:	08009c6b 	.word	0x08009c6b
 8009c58:	2301      	movs	r3, #1
 8009c5a:	77fb      	strb	r3, [r7, #31]
 8009c5c:	e14c      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009c5e:	2302      	movs	r3, #2
 8009c60:	77fb      	strb	r3, [r7, #31]
 8009c62:	e149      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009c64:	2304      	movs	r3, #4
 8009c66:	77fb      	strb	r3, [r7, #31]
 8009c68:	e146      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009c6a:	2308      	movs	r3, #8
 8009c6c:	77fb      	strb	r3, [r7, #31]
 8009c6e:	e143      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009c70:	2310      	movs	r3, #16
 8009c72:	77fb      	strb	r3, [r7, #31]
 8009c74:	e140      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a33      	ldr	r2, [pc, #204]	; (8009d48 <UART_SetConfig+0x2a8>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d132      	bne.n	8009ce6 <UART_SetConfig+0x246>
 8009c80:	4b30      	ldr	r3, [pc, #192]	; (8009d44 <UART_SetConfig+0x2a4>)
 8009c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c86:	f003 030c 	and.w	r3, r3, #12
 8009c8a:	2b0c      	cmp	r3, #12
 8009c8c:	d828      	bhi.n	8009ce0 <UART_SetConfig+0x240>
 8009c8e:	a201      	add	r2, pc, #4	; (adr r2, 8009c94 <UART_SetConfig+0x1f4>)
 8009c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c94:	08009cc9 	.word	0x08009cc9
 8009c98:	08009ce1 	.word	0x08009ce1
 8009c9c:	08009ce1 	.word	0x08009ce1
 8009ca0:	08009ce1 	.word	0x08009ce1
 8009ca4:	08009cd5 	.word	0x08009cd5
 8009ca8:	08009ce1 	.word	0x08009ce1
 8009cac:	08009ce1 	.word	0x08009ce1
 8009cb0:	08009ce1 	.word	0x08009ce1
 8009cb4:	08009ccf 	.word	0x08009ccf
 8009cb8:	08009ce1 	.word	0x08009ce1
 8009cbc:	08009ce1 	.word	0x08009ce1
 8009cc0:	08009ce1 	.word	0x08009ce1
 8009cc4:	08009cdb 	.word	0x08009cdb
 8009cc8:	2300      	movs	r3, #0
 8009cca:	77fb      	strb	r3, [r7, #31]
 8009ccc:	e114      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009cce:	2302      	movs	r3, #2
 8009cd0:	77fb      	strb	r3, [r7, #31]
 8009cd2:	e111      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009cd4:	2304      	movs	r3, #4
 8009cd6:	77fb      	strb	r3, [r7, #31]
 8009cd8:	e10e      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009cda:	2308      	movs	r3, #8
 8009cdc:	77fb      	strb	r3, [r7, #31]
 8009cde:	e10b      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009ce0:	2310      	movs	r3, #16
 8009ce2:	77fb      	strb	r3, [r7, #31]
 8009ce4:	e108      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a18      	ldr	r2, [pc, #96]	; (8009d4c <UART_SetConfig+0x2ac>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d12f      	bne.n	8009d50 <UART_SetConfig+0x2b0>
 8009cf0:	4b14      	ldr	r3, [pc, #80]	; (8009d44 <UART_SetConfig+0x2a4>)
 8009cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cf6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009cfa:	2b30      	cmp	r3, #48	; 0x30
 8009cfc:	d013      	beq.n	8009d26 <UART_SetConfig+0x286>
 8009cfe:	2b30      	cmp	r3, #48	; 0x30
 8009d00:	d814      	bhi.n	8009d2c <UART_SetConfig+0x28c>
 8009d02:	2b20      	cmp	r3, #32
 8009d04:	d009      	beq.n	8009d1a <UART_SetConfig+0x27a>
 8009d06:	2b20      	cmp	r3, #32
 8009d08:	d810      	bhi.n	8009d2c <UART_SetConfig+0x28c>
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d002      	beq.n	8009d14 <UART_SetConfig+0x274>
 8009d0e:	2b10      	cmp	r3, #16
 8009d10:	d006      	beq.n	8009d20 <UART_SetConfig+0x280>
 8009d12:	e00b      	b.n	8009d2c <UART_SetConfig+0x28c>
 8009d14:	2300      	movs	r3, #0
 8009d16:	77fb      	strb	r3, [r7, #31]
 8009d18:	e0ee      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009d1a:	2302      	movs	r3, #2
 8009d1c:	77fb      	strb	r3, [r7, #31]
 8009d1e:	e0eb      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009d20:	2304      	movs	r3, #4
 8009d22:	77fb      	strb	r3, [r7, #31]
 8009d24:	e0e8      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009d26:	2308      	movs	r3, #8
 8009d28:	77fb      	strb	r3, [r7, #31]
 8009d2a:	e0e5      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009d2c:	2310      	movs	r3, #16
 8009d2e:	77fb      	strb	r3, [r7, #31]
 8009d30:	e0e2      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009d32:	bf00      	nop
 8009d34:	019bfcc0 	.word	0x019bfcc0
 8009d38:	080151e4 	.word	0x080151e4
 8009d3c:	efff69f3 	.word	0xefff69f3
 8009d40:	40011000 	.word	0x40011000
 8009d44:	40023800 	.word	0x40023800
 8009d48:	40004400 	.word	0x40004400
 8009d4c:	40004800 	.word	0x40004800
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4aa5      	ldr	r2, [pc, #660]	; (8009fec <UART_SetConfig+0x54c>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d120      	bne.n	8009d9c <UART_SetConfig+0x2fc>
 8009d5a:	4ba5      	ldr	r3, [pc, #660]	; (8009ff0 <UART_SetConfig+0x550>)
 8009d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009d64:	2bc0      	cmp	r3, #192	; 0xc0
 8009d66:	d013      	beq.n	8009d90 <UART_SetConfig+0x2f0>
 8009d68:	2bc0      	cmp	r3, #192	; 0xc0
 8009d6a:	d814      	bhi.n	8009d96 <UART_SetConfig+0x2f6>
 8009d6c:	2b80      	cmp	r3, #128	; 0x80
 8009d6e:	d009      	beq.n	8009d84 <UART_SetConfig+0x2e4>
 8009d70:	2b80      	cmp	r3, #128	; 0x80
 8009d72:	d810      	bhi.n	8009d96 <UART_SetConfig+0x2f6>
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <UART_SetConfig+0x2de>
 8009d78:	2b40      	cmp	r3, #64	; 0x40
 8009d7a:	d006      	beq.n	8009d8a <UART_SetConfig+0x2ea>
 8009d7c:	e00b      	b.n	8009d96 <UART_SetConfig+0x2f6>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	77fb      	strb	r3, [r7, #31]
 8009d82:	e0b9      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009d84:	2302      	movs	r3, #2
 8009d86:	77fb      	strb	r3, [r7, #31]
 8009d88:	e0b6      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009d8a:	2304      	movs	r3, #4
 8009d8c:	77fb      	strb	r3, [r7, #31]
 8009d8e:	e0b3      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009d90:	2308      	movs	r3, #8
 8009d92:	77fb      	strb	r3, [r7, #31]
 8009d94:	e0b0      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009d96:	2310      	movs	r3, #16
 8009d98:	77fb      	strb	r3, [r7, #31]
 8009d9a:	e0ad      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a94      	ldr	r2, [pc, #592]	; (8009ff4 <UART_SetConfig+0x554>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d125      	bne.n	8009df2 <UART_SetConfig+0x352>
 8009da6:	4b92      	ldr	r3, [pc, #584]	; (8009ff0 <UART_SetConfig+0x550>)
 8009da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009db0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009db4:	d017      	beq.n	8009de6 <UART_SetConfig+0x346>
 8009db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dba:	d817      	bhi.n	8009dec <UART_SetConfig+0x34c>
 8009dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dc0:	d00b      	beq.n	8009dda <UART_SetConfig+0x33a>
 8009dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dc6:	d811      	bhi.n	8009dec <UART_SetConfig+0x34c>
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d003      	beq.n	8009dd4 <UART_SetConfig+0x334>
 8009dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dd0:	d006      	beq.n	8009de0 <UART_SetConfig+0x340>
 8009dd2:	e00b      	b.n	8009dec <UART_SetConfig+0x34c>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	77fb      	strb	r3, [r7, #31]
 8009dd8:	e08e      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009dda:	2302      	movs	r3, #2
 8009ddc:	77fb      	strb	r3, [r7, #31]
 8009dde:	e08b      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009de0:	2304      	movs	r3, #4
 8009de2:	77fb      	strb	r3, [r7, #31]
 8009de4:	e088      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009de6:	2308      	movs	r3, #8
 8009de8:	77fb      	strb	r3, [r7, #31]
 8009dea:	e085      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009dec:	2310      	movs	r3, #16
 8009dee:	77fb      	strb	r3, [r7, #31]
 8009df0:	e082      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a80      	ldr	r2, [pc, #512]	; (8009ff8 <UART_SetConfig+0x558>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d125      	bne.n	8009e48 <UART_SetConfig+0x3a8>
 8009dfc:	4b7c      	ldr	r3, [pc, #496]	; (8009ff0 <UART_SetConfig+0x550>)
 8009dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009e06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009e0a:	d017      	beq.n	8009e3c <UART_SetConfig+0x39c>
 8009e0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009e10:	d817      	bhi.n	8009e42 <UART_SetConfig+0x3a2>
 8009e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e16:	d00b      	beq.n	8009e30 <UART_SetConfig+0x390>
 8009e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e1c:	d811      	bhi.n	8009e42 <UART_SetConfig+0x3a2>
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d003      	beq.n	8009e2a <UART_SetConfig+0x38a>
 8009e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e26:	d006      	beq.n	8009e36 <UART_SetConfig+0x396>
 8009e28:	e00b      	b.n	8009e42 <UART_SetConfig+0x3a2>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	77fb      	strb	r3, [r7, #31]
 8009e2e:	e063      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009e30:	2302      	movs	r3, #2
 8009e32:	77fb      	strb	r3, [r7, #31]
 8009e34:	e060      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009e36:	2304      	movs	r3, #4
 8009e38:	77fb      	strb	r3, [r7, #31]
 8009e3a:	e05d      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009e3c:	2308      	movs	r3, #8
 8009e3e:	77fb      	strb	r3, [r7, #31]
 8009e40:	e05a      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009e42:	2310      	movs	r3, #16
 8009e44:	77fb      	strb	r3, [r7, #31]
 8009e46:	e057      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a6b      	ldr	r2, [pc, #428]	; (8009ffc <UART_SetConfig+0x55c>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d125      	bne.n	8009e9e <UART_SetConfig+0x3fe>
 8009e52:	4b67      	ldr	r3, [pc, #412]	; (8009ff0 <UART_SetConfig+0x550>)
 8009e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e58:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009e5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e60:	d017      	beq.n	8009e92 <UART_SetConfig+0x3f2>
 8009e62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e66:	d817      	bhi.n	8009e98 <UART_SetConfig+0x3f8>
 8009e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e6c:	d00b      	beq.n	8009e86 <UART_SetConfig+0x3e6>
 8009e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e72:	d811      	bhi.n	8009e98 <UART_SetConfig+0x3f8>
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d003      	beq.n	8009e80 <UART_SetConfig+0x3e0>
 8009e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e7c:	d006      	beq.n	8009e8c <UART_SetConfig+0x3ec>
 8009e7e:	e00b      	b.n	8009e98 <UART_SetConfig+0x3f8>
 8009e80:	2300      	movs	r3, #0
 8009e82:	77fb      	strb	r3, [r7, #31]
 8009e84:	e038      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009e86:	2302      	movs	r3, #2
 8009e88:	77fb      	strb	r3, [r7, #31]
 8009e8a:	e035      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009e8c:	2304      	movs	r3, #4
 8009e8e:	77fb      	strb	r3, [r7, #31]
 8009e90:	e032      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009e92:	2308      	movs	r3, #8
 8009e94:	77fb      	strb	r3, [r7, #31]
 8009e96:	e02f      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009e98:	2310      	movs	r3, #16
 8009e9a:	77fb      	strb	r3, [r7, #31]
 8009e9c:	e02c      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a57      	ldr	r2, [pc, #348]	; (800a000 <UART_SetConfig+0x560>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d125      	bne.n	8009ef4 <UART_SetConfig+0x454>
 8009ea8:	4b51      	ldr	r3, [pc, #324]	; (8009ff0 <UART_SetConfig+0x550>)
 8009eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009eb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009eb6:	d017      	beq.n	8009ee8 <UART_SetConfig+0x448>
 8009eb8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009ebc:	d817      	bhi.n	8009eee <UART_SetConfig+0x44e>
 8009ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ec2:	d00b      	beq.n	8009edc <UART_SetConfig+0x43c>
 8009ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ec8:	d811      	bhi.n	8009eee <UART_SetConfig+0x44e>
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <UART_SetConfig+0x436>
 8009ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ed2:	d006      	beq.n	8009ee2 <UART_SetConfig+0x442>
 8009ed4:	e00b      	b.n	8009eee <UART_SetConfig+0x44e>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	77fb      	strb	r3, [r7, #31]
 8009eda:	e00d      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009edc:	2302      	movs	r3, #2
 8009ede:	77fb      	strb	r3, [r7, #31]
 8009ee0:	e00a      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009ee2:	2304      	movs	r3, #4
 8009ee4:	77fb      	strb	r3, [r7, #31]
 8009ee6:	e007      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009ee8:	2308      	movs	r3, #8
 8009eea:	77fb      	strb	r3, [r7, #31]
 8009eec:	e004      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009eee:	2310      	movs	r3, #16
 8009ef0:	77fb      	strb	r3, [r7, #31]
 8009ef2:	e001      	b.n	8009ef8 <UART_SetConfig+0x458>
 8009ef4:	2310      	movs	r3, #16
 8009ef6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	69db      	ldr	r3, [r3, #28]
 8009efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f00:	d15c      	bne.n	8009fbc <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 8009f02:	7ffb      	ldrb	r3, [r7, #31]
 8009f04:	2b08      	cmp	r3, #8
 8009f06:	d828      	bhi.n	8009f5a <UART_SetConfig+0x4ba>
 8009f08:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <UART_SetConfig+0x470>)
 8009f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0e:	bf00      	nop
 8009f10:	08009f35 	.word	0x08009f35
 8009f14:	08009f3d 	.word	0x08009f3d
 8009f18:	08009f45 	.word	0x08009f45
 8009f1c:	08009f5b 	.word	0x08009f5b
 8009f20:	08009f4b 	.word	0x08009f4b
 8009f24:	08009f5b 	.word	0x08009f5b
 8009f28:	08009f5b 	.word	0x08009f5b
 8009f2c:	08009f5b 	.word	0x08009f5b
 8009f30:	08009f53 	.word	0x08009f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f34:	f7fb ffec 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 8009f38:	61b8      	str	r0, [r7, #24]
        break;
 8009f3a:	e013      	b.n	8009f64 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f3c:	f7fb fffc 	bl	8005f38 <HAL_RCC_GetPCLK2Freq>
 8009f40:	61b8      	str	r0, [r7, #24]
        break;
 8009f42:	e00f      	b.n	8009f64 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f44:	4b2f      	ldr	r3, [pc, #188]	; (800a004 <UART_SetConfig+0x564>)
 8009f46:	61bb      	str	r3, [r7, #24]
        break;
 8009f48:	e00c      	b.n	8009f64 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f4a:	f7fb ff0f 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 8009f4e:	61b8      	str	r0, [r7, #24]
        break;
 8009f50:	e008      	b.n	8009f64 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f56:	61bb      	str	r3, [r7, #24]
        break;
 8009f58:	e004      	b.n	8009f64 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	77bb      	strb	r3, [r7, #30]
        break;
 8009f62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f000 8082 	beq.w	800a070 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	005a      	lsls	r2, r3, #1
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	085b      	lsrs	r3, r3, #1
 8009f76:	441a      	add	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	2b0f      	cmp	r3, #15
 8009f86:	d916      	bls.n	8009fb6 <UART_SetConfig+0x516>
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f8e:	d212      	bcs.n	8009fb6 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	f023 030f 	bic.w	r3, r3, #15
 8009f98:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	085b      	lsrs	r3, r3, #1
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	f003 0307 	and.w	r3, r3, #7
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	89fb      	ldrh	r3, [r7, #14]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	89fa      	ldrh	r2, [r7, #14]
 8009fb2:	60da      	str	r2, [r3, #12]
 8009fb4:	e05c      	b.n	800a070 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	77bb      	strb	r3, [r7, #30]
 8009fba:	e059      	b.n	800a070 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fbc:	7ffb      	ldrb	r3, [r7, #31]
 8009fbe:	2b08      	cmp	r3, #8
 8009fc0:	d835      	bhi.n	800a02e <UART_SetConfig+0x58e>
 8009fc2:	a201      	add	r2, pc, #4	; (adr r2, 8009fc8 <UART_SetConfig+0x528>)
 8009fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc8:	0800a009 	.word	0x0800a009
 8009fcc:	0800a011 	.word	0x0800a011
 8009fd0:	0800a019 	.word	0x0800a019
 8009fd4:	0800a02f 	.word	0x0800a02f
 8009fd8:	0800a01f 	.word	0x0800a01f
 8009fdc:	0800a02f 	.word	0x0800a02f
 8009fe0:	0800a02f 	.word	0x0800a02f
 8009fe4:	0800a02f 	.word	0x0800a02f
 8009fe8:	0800a027 	.word	0x0800a027
 8009fec:	40004c00 	.word	0x40004c00
 8009ff0:	40023800 	.word	0x40023800
 8009ff4:	40005000 	.word	0x40005000
 8009ff8:	40011400 	.word	0x40011400
 8009ffc:	40007800 	.word	0x40007800
 800a000:	40007c00 	.word	0x40007c00
 800a004:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a008:	f7fb ff82 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 800a00c:	61b8      	str	r0, [r7, #24]
        break;
 800a00e:	e013      	b.n	800a038 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a010:	f7fb ff92 	bl	8005f38 <HAL_RCC_GetPCLK2Freq>
 800a014:	61b8      	str	r0, [r7, #24]
        break;
 800a016:	e00f      	b.n	800a038 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a018:	4b1b      	ldr	r3, [pc, #108]	; (800a088 <UART_SetConfig+0x5e8>)
 800a01a:	61bb      	str	r3, [r7, #24]
        break;
 800a01c:	e00c      	b.n	800a038 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a01e:	f7fb fea5 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 800a022:	61b8      	str	r0, [r7, #24]
        break;
 800a024:	e008      	b.n	800a038 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a02a:	61bb      	str	r3, [r7, #24]
        break;
 800a02c:	e004      	b.n	800a038 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 800a02e:	2300      	movs	r3, #0
 800a030:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	77bb      	strb	r3, [r7, #30]
        break;
 800a036:	bf00      	nop
    }

    if (pclk != 0U)
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d018      	beq.n	800a070 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	085a      	lsrs	r2, r3, #1
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	441a      	add	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a050:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	2b0f      	cmp	r3, #15
 800a056:	d909      	bls.n	800a06c <UART_SetConfig+0x5cc>
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a05e:	d205      	bcs.n	800a06c <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	b29a      	uxth	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	60da      	str	r2, [r3, #12]
 800a06a:	e001      	b.n	800a070 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a07c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3720      	adds	r7, #32
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	00f42400 	.word	0x00f42400

0800a08c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a098:	2bff      	cmp	r3, #255	; 0xff
 800a09a:	d904      	bls.n	800a0a6 <UART_AdvFeatureConfig+0x1a>
 800a09c:	f640 31e6 	movw	r1, #3046	; 0xbe6
 800a0a0:	488e      	ldr	r0, [pc, #568]	; (800a2dc <UART_AdvFeatureConfig+0x250>)
 800a0a2:	f7f8 fa14 	bl	80024ce <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0aa:	f003 0301 	and.w	r3, r3, #1
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d018      	beq.n	800a0e4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d009      	beq.n	800a0ce <UART_AdvFeatureConfig+0x42>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0c2:	d004      	beq.n	800a0ce <UART_AdvFeatureConfig+0x42>
 800a0c4:	f640 31eb 	movw	r1, #3051	; 0xbeb
 800a0c8:	4884      	ldr	r0, [pc, #528]	; (800a2dc <UART_AdvFeatureConfig+0x250>)
 800a0ca:	f7f8 fa00 	bl	80024ce <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	430a      	orrs	r2, r1
 800a0e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e8:	f003 0302 	and.w	r3, r3, #2
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d018      	beq.n	800a122 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d009      	beq.n	800a10c <UART_AdvFeatureConfig+0x80>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a100:	d004      	beq.n	800a10c <UART_AdvFeatureConfig+0x80>
 800a102:	f640 31f2 	movw	r1, #3058	; 0xbf2
 800a106:	4875      	ldr	r0, [pc, #468]	; (800a2dc <UART_AdvFeatureConfig+0x250>)
 800a108:	f7f8 f9e1 	bl	80024ce <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	f003 0304 	and.w	r3, r3, #4
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d018      	beq.n	800a160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a132:	2b00      	cmp	r3, #0
 800a134:	d009      	beq.n	800a14a <UART_AdvFeatureConfig+0xbe>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a13a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a13e:	d004      	beq.n	800a14a <UART_AdvFeatureConfig+0xbe>
 800a140:	f640 31f9 	movw	r1, #3065	; 0xbf9
 800a144:	4865      	ldr	r0, [pc, #404]	; (800a2dc <UART_AdvFeatureConfig+0x250>)
 800a146:	f7f8 f9c2 	bl	80024ce <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	430a      	orrs	r2, r1
 800a15e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a164:	f003 0308 	and.w	r3, r3, #8
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d018      	beq.n	800a19e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a170:	2b00      	cmp	r3, #0
 800a172:	d009      	beq.n	800a188 <UART_AdvFeatureConfig+0xfc>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a17c:	d004      	beq.n	800a188 <UART_AdvFeatureConfig+0xfc>
 800a17e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800a182:	4856      	ldr	r0, [pc, #344]	; (800a2dc <UART_AdvFeatureConfig+0x250>)
 800a184:	f7f8 f9a3 	bl	80024ce <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	430a      	orrs	r2, r1
 800a19c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a2:	f003 0310 	and.w	r3, r3, #16
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d018      	beq.n	800a1dc <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d009      	beq.n	800a1c6 <UART_AdvFeatureConfig+0x13a>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ba:	d004      	beq.n	800a1c6 <UART_AdvFeatureConfig+0x13a>
 800a1bc:	f640 4107 	movw	r1, #3079	; 0xc07
 800a1c0:	4846      	ldr	r0, [pc, #280]	; (800a2dc <UART_AdvFeatureConfig+0x250>)
 800a1c2:	f7f8 f984 	bl	80024ce <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	430a      	orrs	r2, r1
 800a1da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e0:	f003 0320 	and.w	r3, r3, #32
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d018      	beq.n	800a21a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d009      	beq.n	800a204 <UART_AdvFeatureConfig+0x178>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1f8:	d004      	beq.n	800a204 <UART_AdvFeatureConfig+0x178>
 800a1fa:	f640 410e 	movw	r1, #3086	; 0xc0e
 800a1fe:	4837      	ldr	r0, [pc, #220]	; (800a2dc <UART_AdvFeatureConfig+0x250>)
 800a200:	f7f8 f965 	bl	80024ce <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	430a      	orrs	r2, r1
 800a218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a222:	2b00      	cmp	r3, #0
 800a224:	d064      	beq.n	800a2f0 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a2d      	ldr	r2, [pc, #180]	; (800a2e0 <UART_AdvFeatureConfig+0x254>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d013      	beq.n	800a258 <UART_AdvFeatureConfig+0x1cc>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a2b      	ldr	r2, [pc, #172]	; (800a2e4 <UART_AdvFeatureConfig+0x258>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d00e      	beq.n	800a258 <UART_AdvFeatureConfig+0x1cc>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a2a      	ldr	r2, [pc, #168]	; (800a2e8 <UART_AdvFeatureConfig+0x25c>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d009      	beq.n	800a258 <UART_AdvFeatureConfig+0x1cc>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a28      	ldr	r2, [pc, #160]	; (800a2ec <UART_AdvFeatureConfig+0x260>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d004      	beq.n	800a258 <UART_AdvFeatureConfig+0x1cc>
 800a24e:	f640 4115 	movw	r1, #3093	; 0xc15
 800a252:	4822      	ldr	r0, [pc, #136]	; (800a2dc <UART_AdvFeatureConfig+0x250>)
 800a254:	f7f8 f93b 	bl	80024ce <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d009      	beq.n	800a274 <UART_AdvFeatureConfig+0x1e8>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a268:	d004      	beq.n	800a274 <UART_AdvFeatureConfig+0x1e8>
 800a26a:	f640 4116 	movw	r1, #3094	; 0xc16
 800a26e:	481b      	ldr	r0, [pc, #108]	; (800a2dc <UART_AdvFeatureConfig+0x250>)
 800a270:	f7f8 f92d 	bl	80024ce <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	430a      	orrs	r2, r1
 800a288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a292:	d12d      	bne.n	800a2f0 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d013      	beq.n	800a2c4 <UART_AdvFeatureConfig+0x238>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2a4:	d00e      	beq.n	800a2c4 <UART_AdvFeatureConfig+0x238>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2ae:	d009      	beq.n	800a2c4 <UART_AdvFeatureConfig+0x238>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a2b8:	d004      	beq.n	800a2c4 <UART_AdvFeatureConfig+0x238>
 800a2ba:	f640 411b 	movw	r1, #3099	; 0xc1b
 800a2be:	4807      	ldr	r0, [pc, #28]	; (800a2dc <UART_AdvFeatureConfig+0x250>)
 800a2c0:	f7f8 f905 	bl	80024ce <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	605a      	str	r2, [r3, #4]
 800a2da:	e009      	b.n	800a2f0 <UART_AdvFeatureConfig+0x264>
 800a2dc:	080151e4 	.word	0x080151e4
 800a2e0:	40011000 	.word	0x40011000
 800a2e4:	40004400 	.word	0x40004400
 800a2e8:	40004800 	.word	0x40004800
 800a2ec:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d018      	beq.n	800a32e <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a300:	2b00      	cmp	r3, #0
 800a302:	d009      	beq.n	800a318 <UART_AdvFeatureConfig+0x28c>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a308:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a30c:	d004      	beq.n	800a318 <UART_AdvFeatureConfig+0x28c>
 800a30e:	f640 4123 	movw	r1, #3107	; 0xc23
 800a312:	4809      	ldr	r0, [pc, #36]	; (800a338 <UART_AdvFeatureConfig+0x2ac>)
 800a314:	f7f8 f8db 	bl	80024ce <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	430a      	orrs	r2, r1
 800a32c:	605a      	str	r2, [r3, #4]
  }
}
 800a32e:	bf00      	nop
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	080151e4 	.word	0x080151e4

0800a33c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af02      	add	r7, sp, #8
 800a342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a34c:	f7f8 fdb8 	bl	8002ec0 <HAL_GetTick>
 800a350:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 0308 	and.w	r3, r3, #8
 800a35c:	2b08      	cmp	r3, #8
 800a35e:	d10e      	bne.n	800a37e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a360:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f81b 	bl	800a3aa <UART_WaitOnFlagUntilTimeout>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d001      	beq.n	800a37e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a37a:	2303      	movs	r3, #3
 800a37c:	e011      	b.n	800a3a2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2220      	movs	r2, #32
 800a382:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2220      	movs	r2, #32
 800a388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b09c      	sub	sp, #112	; 0x70
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	60f8      	str	r0, [r7, #12]
 800a3b2:	60b9      	str	r1, [r7, #8]
 800a3b4:	603b      	str	r3, [r7, #0]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3ba:	e0a7      	b.n	800a50c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c2:	f000 80a3 	beq.w	800a50c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3c6:	f7f8 fd7b 	bl	8002ec0 <HAL_GetTick>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d302      	bcc.n	800a3dc <UART_WaitOnFlagUntilTimeout+0x32>
 800a3d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d13f      	bne.n	800a45c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3e4:	e853 3f00 	ldrex	r3, [r3]
 800a3e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a3ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a3f0:	667b      	str	r3, [r7, #100]	; 0x64
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a400:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a402:	e841 2300 	strex	r3, r2, [r1]
 800a406:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1e6      	bne.n	800a3dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	3308      	adds	r3, #8
 800a414:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a418:	e853 3f00 	ldrex	r3, [r3]
 800a41c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a420:	f023 0301 	bic.w	r3, r3, #1
 800a424:	663b      	str	r3, [r7, #96]	; 0x60
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3308      	adds	r3, #8
 800a42c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a42e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a430:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a432:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a436:	e841 2300 	strex	r3, r2, [r1]
 800a43a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a43c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1e5      	bne.n	800a40e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2220      	movs	r2, #32
 800a446:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2220      	movs	r2, #32
 800a44c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a458:	2303      	movs	r3, #3
 800a45a:	e068      	b.n	800a52e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 0304 	and.w	r3, r3, #4
 800a466:	2b00      	cmp	r3, #0
 800a468:	d050      	beq.n	800a50c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a478:	d148      	bne.n	800a50c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a482:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48c:	e853 3f00 	ldrex	r3, [r3]
 800a490:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a494:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a498:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4a2:	637b      	str	r3, [r7, #52]	; 0x34
 800a4a4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4aa:	e841 2300 	strex	r3, r2, [r1]
 800a4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1e6      	bne.n	800a484 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	3308      	adds	r3, #8
 800a4bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	e853 3f00 	ldrex	r3, [r3]
 800a4c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	f023 0301 	bic.w	r3, r3, #1
 800a4cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	3308      	adds	r3, #8
 800a4d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a4d6:	623a      	str	r2, [r7, #32]
 800a4d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4da:	69f9      	ldr	r1, [r7, #28]
 800a4dc:	6a3a      	ldr	r2, [r7, #32]
 800a4de:	e841 2300 	strex	r3, r2, [r1]
 800a4e2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1e5      	bne.n	800a4b6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2220      	movs	r2, #32
 800a4ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2220      	movs	r2, #32
 800a4f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2220      	movs	r2, #32
 800a4fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e010      	b.n	800a52e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	69da      	ldr	r2, [r3, #28]
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	4013      	ands	r3, r2
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	429a      	cmp	r2, r3
 800a51a:	bf0c      	ite	eq
 800a51c:	2301      	moveq	r3, #1
 800a51e:	2300      	movne	r3, #0
 800a520:	b2db      	uxtb	r3, r3
 800a522:	461a      	mov	r2, r3
 800a524:	79fb      	ldrb	r3, [r7, #7]
 800a526:	429a      	cmp	r2, r3
 800a528:	f43f af48 	beq.w	800a3bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3770      	adds	r7, #112	; 0x70
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
	...

0800a538 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a538:	b480      	push	{r7}
 800a53a:	b097      	sub	sp, #92	; 0x5c
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	4613      	mov	r3, r2
 800a544:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	88fa      	ldrh	r2, [r7, #6]
 800a550:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	88fa      	ldrh	r2, [r7, #6]
 800a558:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a56a:	d10e      	bne.n	800a58a <UART_Start_Receive_IT+0x52>
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	691b      	ldr	r3, [r3, #16]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d105      	bne.n	800a580 <UART_Start_Receive_IT+0x48>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a57a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a57e:	e02d      	b.n	800a5dc <UART_Start_Receive_IT+0xa4>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	22ff      	movs	r2, #255	; 0xff
 800a584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a588:	e028      	b.n	800a5dc <UART_Start_Receive_IT+0xa4>
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10d      	bne.n	800a5ae <UART_Start_Receive_IT+0x76>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d104      	bne.n	800a5a4 <UART_Start_Receive_IT+0x6c>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	22ff      	movs	r2, #255	; 0xff
 800a59e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a5a2:	e01b      	b.n	800a5dc <UART_Start_Receive_IT+0xa4>
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	227f      	movs	r2, #127	; 0x7f
 800a5a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a5ac:	e016      	b.n	800a5dc <UART_Start_Receive_IT+0xa4>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5b6:	d10d      	bne.n	800a5d4 <UART_Start_Receive_IT+0x9c>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d104      	bne.n	800a5ca <UART_Start_Receive_IT+0x92>
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	227f      	movs	r2, #127	; 0x7f
 800a5c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a5c8:	e008      	b.n	800a5dc <UART_Start_Receive_IT+0xa4>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	223f      	movs	r2, #63	; 0x3f
 800a5ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a5d2:	e003      	b.n	800a5dc <UART_Start_Receive_IT+0xa4>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2222      	movs	r2, #34	; 0x22
 800a5e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	3308      	adds	r3, #8
 800a5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5f6:	e853 3f00 	ldrex	r3, [r3]
 800a5fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fe:	f043 0301 	orr.w	r3, r3, #1
 800a602:	657b      	str	r3, [r7, #84]	; 0x54
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	3308      	adds	r3, #8
 800a60a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a60c:	64ba      	str	r2, [r7, #72]	; 0x48
 800a60e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a610:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a614:	e841 2300 	strex	r3, r2, [r1]
 800a618:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a61a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1e5      	bne.n	800a5ec <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a628:	d107      	bne.n	800a63a <UART_Start_Receive_IT+0x102>
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d103      	bne.n	800a63a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	4a21      	ldr	r2, [pc, #132]	; (800a6bc <UART_Start_Receive_IT+0x184>)
 800a636:	669a      	str	r2, [r3, #104]	; 0x68
 800a638:	e002      	b.n	800a640 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	4a20      	ldr	r2, [pc, #128]	; (800a6c0 <UART_Start_Receive_IT+0x188>)
 800a63e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d019      	beq.n	800a67c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a650:	e853 3f00 	ldrex	r3, [r3]
 800a654:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a65c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	461a      	mov	r2, r3
 800a664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a666:	637b      	str	r3, [r7, #52]	; 0x34
 800a668:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a66c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a66e:	e841 2300 	strex	r3, r2, [r1]
 800a672:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1e6      	bne.n	800a648 <UART_Start_Receive_IT+0x110>
 800a67a:	e018      	b.n	800a6ae <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	e853 3f00 	ldrex	r3, [r3]
 800a688:	613b      	str	r3, [r7, #16]
   return(result);
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	f043 0320 	orr.w	r3, r3, #32
 800a690:	653b      	str	r3, [r7, #80]	; 0x50
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	461a      	mov	r2, r3
 800a698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a69a:	623b      	str	r3, [r7, #32]
 800a69c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69e:	69f9      	ldr	r1, [r7, #28]
 800a6a0:	6a3a      	ldr	r2, [r7, #32]
 800a6a2:	e841 2300 	strex	r3, r2, [r1]
 800a6a6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1e6      	bne.n	800a67c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	375c      	adds	r7, #92	; 0x5c
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr
 800a6bc:	0800a973 	.word	0x0800a973
 800a6c0:	0800a80d 	.word	0x0800a80d

0800a6c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b095      	sub	sp, #84	; 0x54
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d4:	e853 3f00 	ldrex	r3, [r3]
 800a6d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6ea:	643b      	str	r3, [r7, #64]	; 0x40
 800a6ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a6f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6f2:	e841 2300 	strex	r3, r2, [r1]
 800a6f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1e6      	bne.n	800a6cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3308      	adds	r3, #8
 800a704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a706:	6a3b      	ldr	r3, [r7, #32]
 800a708:	e853 3f00 	ldrex	r3, [r3]
 800a70c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	f023 0301 	bic.w	r3, r3, #1
 800a714:	64bb      	str	r3, [r7, #72]	; 0x48
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3308      	adds	r3, #8
 800a71c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a71e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a720:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a726:	e841 2300 	strex	r3, r2, [r1]
 800a72a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1e5      	bne.n	800a6fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a736:	2b01      	cmp	r3, #1
 800a738:	d118      	bne.n	800a76c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	e853 3f00 	ldrex	r3, [r3]
 800a746:	60bb      	str	r3, [r7, #8]
   return(result);
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	f023 0310 	bic.w	r3, r3, #16
 800a74e:	647b      	str	r3, [r7, #68]	; 0x44
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	461a      	mov	r2, r3
 800a756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a758:	61bb      	str	r3, [r7, #24]
 800a75a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75c:	6979      	ldr	r1, [r7, #20]
 800a75e:	69ba      	ldr	r2, [r7, #24]
 800a760:	e841 2300 	strex	r3, r2, [r1]
 800a764:	613b      	str	r3, [r7, #16]
   return(result);
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1e6      	bne.n	800a73a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2220      	movs	r2, #32
 800a770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a780:	bf00      	nop
 800a782:	3754      	adds	r7, #84	; 0x54
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a798:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	f7ff f962 	bl	8009a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7b0:	bf00      	nop
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b088      	sub	sp, #32
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	e853 3f00 	ldrex	r3, [r3]
 800a7cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7d4:	61fb      	str	r3, [r7, #28]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	61bb      	str	r3, [r7, #24]
 800a7e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e2:	6979      	ldr	r1, [r7, #20]
 800a7e4:	69ba      	ldr	r2, [r7, #24]
 800a7e6:	e841 2300 	strex	r3, r2, [r1]
 800a7ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1e6      	bne.n	800a7c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2220      	movs	r2, #32
 800a7f6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f7ff f92e 	bl	8009a60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a804:	bf00      	nop
 800a806:	3720      	adds	r7, #32
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b096      	sub	sp, #88	; 0x58
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a81a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a824:	2b22      	cmp	r3, #34	; 0x22
 800a826:	f040 8098 	bne.w	800a95a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a830:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a834:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a838:	b2d9      	uxtb	r1, r3
 800a83a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a83e:	b2da      	uxtb	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a844:	400a      	ands	r2, r1
 800a846:	b2d2      	uxtb	r2, r2
 800a848:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a84e:	1c5a      	adds	r2, r3, #1
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	3b01      	subs	r3, #1
 800a85e:	b29a      	uxth	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d17b      	bne.n	800a96a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87a:	e853 3f00 	ldrex	r3, [r3]
 800a87e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a882:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a886:	653b      	str	r3, [r7, #80]	; 0x50
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	461a      	mov	r2, r3
 800a88e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a890:	647b      	str	r3, [r7, #68]	; 0x44
 800a892:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a894:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a898:	e841 2300 	strex	r3, r2, [r1]
 800a89c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d1e6      	bne.n	800a872 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	3308      	adds	r3, #8
 800a8aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ae:	e853 3f00 	ldrex	r3, [r3]
 800a8b2:	623b      	str	r3, [r7, #32]
   return(result);
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	f023 0301 	bic.w	r3, r3, #1
 800a8ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3308      	adds	r3, #8
 800a8c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a8c4:	633a      	str	r2, [r7, #48]	; 0x30
 800a8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8cc:	e841 2300 	strex	r3, r2, [r1]
 800a8d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1e5      	bne.n	800a8a4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2220      	movs	r2, #32
 800a8dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d12e      	bne.n	800a952 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	e853 3f00 	ldrex	r3, [r3]
 800a906:	60fb      	str	r3, [r7, #12]
   return(result);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f023 0310 	bic.w	r3, r3, #16
 800a90e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	461a      	mov	r2, r3
 800a916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a918:	61fb      	str	r3, [r7, #28]
 800a91a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91c:	69b9      	ldr	r1, [r7, #24]
 800a91e:	69fa      	ldr	r2, [r7, #28]
 800a920:	e841 2300 	strex	r3, r2, [r1]
 800a924:	617b      	str	r3, [r7, #20]
   return(result);
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1e6      	bne.n	800a8fa <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	69db      	ldr	r3, [r3, #28]
 800a932:	f003 0310 	and.w	r3, r3, #16
 800a936:	2b10      	cmp	r3, #16
 800a938:	d103      	bne.n	800a942 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2210      	movs	r2, #16
 800a940:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a948:	4619      	mov	r1, r3
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7ff f89c 	bl	8009a88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a950:	e00b      	b.n	800a96a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7f7 fd3a 	bl	80023cc <HAL_UART_RxCpltCallback>
}
 800a958:	e007      	b.n	800a96a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	699a      	ldr	r2, [r3, #24]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f042 0208 	orr.w	r2, r2, #8
 800a968:	619a      	str	r2, [r3, #24]
}
 800a96a:	bf00      	nop
 800a96c:	3758      	adds	r7, #88	; 0x58
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b096      	sub	sp, #88	; 0x58
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a980:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a98a:	2b22      	cmp	r3, #34	; 0x22
 800a98c:	f040 8098 	bne.w	800aac0 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a996:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a99e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a9a0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a9a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9ae:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9b4:	1c9a      	adds	r2, r3, #2
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d17b      	bne.n	800aad0 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e0:	e853 3f00 	ldrex	r3, [r3]
 800a9e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9f6:	643b      	str	r3, [r7, #64]	; 0x40
 800a9f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9fe:	e841 2300 	strex	r3, r2, [r1]
 800aa02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1e6      	bne.n	800a9d8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3308      	adds	r3, #8
 800aa10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa12:	6a3b      	ldr	r3, [r7, #32]
 800aa14:	e853 3f00 	ldrex	r3, [r3]
 800aa18:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	f023 0301 	bic.w	r3, r3, #1
 800aa20:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3308      	adds	r3, #8
 800aa28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa32:	e841 2300 	strex	r3, r2, [r1]
 800aa36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1e5      	bne.n	800aa0a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2220      	movs	r2, #32
 800aa42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d12e      	bne.n	800aab8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	e853 3f00 	ldrex	r3, [r3]
 800aa6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	f023 0310 	bic.w	r3, r3, #16
 800aa74:	647b      	str	r3, [r7, #68]	; 0x44
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa7e:	61bb      	str	r3, [r7, #24]
 800aa80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa82:	6979      	ldr	r1, [r7, #20]
 800aa84:	69ba      	ldr	r2, [r7, #24]
 800aa86:	e841 2300 	strex	r3, r2, [r1]
 800aa8a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1e6      	bne.n	800aa60 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	69db      	ldr	r3, [r3, #28]
 800aa98:	f003 0310 	and.w	r3, r3, #16
 800aa9c:	2b10      	cmp	r3, #16
 800aa9e:	d103      	bne.n	800aaa8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2210      	movs	r2, #16
 800aaa6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7fe ffe9 	bl	8009a88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aab6:	e00b      	b.n	800aad0 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7f7 fc87 	bl	80023cc <HAL_UART_RxCpltCallback>
}
 800aabe:	e007      	b.n	800aad0 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	699a      	ldr	r2, [r3, #24]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f042 0208 	orr.w	r2, r2, #8
 800aace:	619a      	str	r2, [r3, #24]
}
 800aad0:	bf00      	nop
 800aad2:	3758      	adds	r7, #88	; 0x58
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aae2:	2300      	movs	r3, #0
 800aae4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800aae6:	6839      	ldr	r1, [r7, #0]
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f001 fce2 	bl	800c4b2 <VL53L0X_get_offset_calibration_data_micro_meter>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800aaf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
	...

0800ab00 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800ab00:	b5b0      	push	{r4, r5, r7, lr}
 800ab02:	b096      	sub	sp, #88	; 0x58
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800ab0e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d107      	bne.n	800ab26 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800ab16:	2200      	movs	r2, #0
 800ab18:	2188      	movs	r1, #136	; 0x88
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f004 feda 	bl	800f8d4 <VL53L0X_WrByte>
 800ab20:	4603      	mov	r3, r0
 800ab22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab34:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ab3e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a9e      	ldr	r2, [pc, #632]	; (800adc0 <VL53L0X_DataInit+0x2c0>)
 800ab46:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a9d      	ldr	r2, [pc, #628]	; (800adc4 <VL53L0X_DataInit+0x2c4>)
 800ab4e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800ab58:	f107 0310 	add.w	r3, r7, #16
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fac2 	bl	800b0e8 <VL53L0X_GetDeviceParameters>
 800ab64:	4603      	mov	r3, r0
 800ab66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800ab6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d112      	bne.n	800ab98 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800ab72:	2300      	movs	r3, #0
 800ab74:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800ab76:	2300      	movs	r3, #0
 800ab78:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f103 0410 	add.w	r4, r3, #16
 800ab80:	f107 0510 	add.w	r5, r7, #16
 800ab84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ab94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2264      	movs	r2, #100	; 0x64
 800ab9c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f44f 7261 	mov.w	r2, #900	; 0x384
 800aba6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800abb0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800abba:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2201      	movs	r2, #1
 800abc2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800abc6:	2201      	movs	r2, #1
 800abc8:	2180      	movs	r1, #128	; 0x80
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f004 fe82 	bl	800f8d4 <VL53L0X_WrByte>
 800abd0:	4603      	mov	r3, r0
 800abd2:	461a      	mov	r2, r3
 800abd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800abd8:	4313      	orrs	r3, r2
 800abda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800abde:	2201      	movs	r2, #1
 800abe0:	21ff      	movs	r1, #255	; 0xff
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f004 fe76 	bl	800f8d4 <VL53L0X_WrByte>
 800abe8:	4603      	mov	r3, r0
 800abea:	461a      	mov	r2, r3
 800abec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800abf0:	4313      	orrs	r3, r2
 800abf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800abf6:	2200      	movs	r2, #0
 800abf8:	2100      	movs	r1, #0
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f004 fe6a 	bl	800f8d4 <VL53L0X_WrByte>
 800ac00:	4603      	mov	r3, r0
 800ac02:	461a      	mov	r2, r3
 800ac04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800ac0e:	f107 030f 	add.w	r3, r7, #15
 800ac12:	461a      	mov	r2, r3
 800ac14:	2191      	movs	r1, #145	; 0x91
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f004 fede 	bl	800f9d8 <VL53L0X_RdByte>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	461a      	mov	r2, r3
 800ac20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac24:	4313      	orrs	r3, r2
 800ac26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800ac2a:	7bfa      	ldrb	r2, [r7, #15]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800ac32:	2201      	movs	r2, #1
 800ac34:	2100      	movs	r1, #0
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f004 fe4c 	bl	800f8d4 <VL53L0X_WrByte>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	461a      	mov	r2, r3
 800ac40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac44:	4313      	orrs	r3, r2
 800ac46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	21ff      	movs	r1, #255	; 0xff
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f004 fe40 	bl	800f8d4 <VL53L0X_WrByte>
 800ac54:	4603      	mov	r3, r0
 800ac56:	461a      	mov	r2, r3
 800ac58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800ac62:	2200      	movs	r2, #0
 800ac64:	2180      	movs	r1, #128	; 0x80
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f004 fe34 	bl	800f8d4 <VL53L0X_WrByte>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	461a      	mov	r2, r3
 800ac70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac74:	4313      	orrs	r3, r2
 800ac76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	653b      	str	r3, [r7, #80]	; 0x50
 800ac7e:	e014      	b.n	800acaa <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800ac80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d114      	bne.n	800acb2 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800ac88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	4619      	mov	r1, r3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 fd35 	bl	800b700 <VL53L0X_SetLimitCheckEnable>
 800ac96:	4603      	mov	r3, r0
 800ac98:	461a      	mov	r2, r3
 800ac9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800aca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aca6:	3301      	adds	r3, #1
 800aca8:	653b      	str	r3, [r7, #80]	; 0x50
 800acaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acac:	2b05      	cmp	r3, #5
 800acae:	dde7      	ble.n	800ac80 <VL53L0X_DataInit+0x180>
 800acb0:	e000      	b.n	800acb4 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800acb2:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800acb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d107      	bne.n	800accc <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800acbc:	2200      	movs	r2, #0
 800acbe:	2102      	movs	r1, #2
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fd1d 	bl	800b700 <VL53L0X_SetLimitCheckEnable>
 800acc6:	4603      	mov	r3, r0
 800acc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800accc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d107      	bne.n	800ace4 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800acd4:	2200      	movs	r2, #0
 800acd6:	2103      	movs	r1, #3
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fd11 	bl	800b700 <VL53L0X_SetLimitCheckEnable>
 800acde:	4603      	mov	r3, r0
 800ace0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800ace4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d107      	bne.n	800acfc <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800acec:	2200      	movs	r2, #0
 800acee:	2104      	movs	r1, #4
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fd05 	bl	800b700 <VL53L0X_SetLimitCheckEnable>
 800acf6:	4603      	mov	r3, r0
 800acf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800acfc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d107      	bne.n	800ad14 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800ad04:	2200      	movs	r2, #0
 800ad06:	2105      	movs	r1, #5
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fcf9 	bl	800b700 <VL53L0X_SetLimitCheckEnable>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800ad14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d108      	bne.n	800ad2e <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800ad1c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800ad20:	2100      	movs	r1, #0
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fd9c 	bl	800b860 <VL53L0X_SetLimitCheckValue>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ad2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d108      	bne.n	800ad48 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800ad36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 fd8f 	bl	800b860 <VL53L0X_SetLimitCheckValue>
 800ad42:	4603      	mov	r3, r0
 800ad44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ad48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d108      	bne.n	800ad62 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800ad50:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800ad54:	2102      	movs	r1, #2
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fd82 	bl	800b860 <VL53L0X_SetLimitCheckValue>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ad62:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d107      	bne.n	800ad7a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	2103      	movs	r1, #3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fd76 	bl	800b860 <VL53L0X_SetLimitCheckValue>
 800ad74:	4603      	mov	r3, r0
 800ad76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ad7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10f      	bne.n	800ada2 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	22ff      	movs	r2, #255	; 0xff
 800ad86:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ad8a:	22ff      	movs	r2, #255	; 0xff
 800ad8c:	2101      	movs	r1, #1
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f004 fda0 	bl	800f8d4 <VL53L0X_WrByte>
 800ad94:	4603      	mov	r3, r0
 800ad96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800ada2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d103      	bne.n	800adb2 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800adb2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3758      	adds	r7, #88	; 0x58
 800adba:	46bd      	mov	sp, r7
 800adbc:	bdb0      	pop	{r4, r5, r7, pc}
 800adbe:	bf00      	nop
 800adc0:	00016b85 	.word	0x00016b85
 800adc4:	000970a4 	.word	0x000970a4

0800adc8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800adc8:	b5b0      	push	{r4, r5, r7, lr}
 800adca:	b09e      	sub	sp, #120	; 0x78
 800adcc:	af02      	add	r7, sp, #8
 800adce:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800add0:	2300      	movs	r3, #0
 800add2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800add6:	f107 031c 	add.w	r3, r7, #28
 800adda:	2240      	movs	r2, #64	; 0x40
 800addc:	2100      	movs	r1, #0
 800adde:	4618      	mov	r0, r3
 800ade0:	f004 fee0 	bl	800fba4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800ade4:	2300      	movs	r3, #0
 800ade6:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800ade8:	2300      	movs	r3, #0
 800adea:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800adec:	2300      	movs	r3, #0
 800adee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800adf2:	2300      	movs	r3, #0
 800adf4:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800adf6:	2300      	movs	r3, #0
 800adf8:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800adfe:	2300      	movs	r3, #0
 800ae00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800ae04:	2101      	movs	r1, #1
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f002 faa9 	bl	800d35e <VL53L0X_get_info_from_device>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800ae18:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800ae20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800ae24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d80d      	bhi.n	800ae48 <VL53L0X_StaticInit+0x80>
 800ae2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d102      	bne.n	800ae3a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800ae34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae36:	2b20      	cmp	r3, #32
 800ae38:	d806      	bhi.n	800ae48 <VL53L0X_StaticInit+0x80>
 800ae3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d10e      	bne.n	800ae60 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800ae42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae44:	2b0c      	cmp	r3, #12
 800ae46:	d90b      	bls.n	800ae60 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800ae48:	f107 0218 	add.w	r2, r7, #24
 800ae4c:	f107 0314 	add.w	r3, r7, #20
 800ae50:	4619      	mov	r1, r3
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f001 fd28 	bl	800c8a8 <VL53L0X_perform_ref_spad_management>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ae5e:	e009      	b.n	800ae74 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800ae60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae64:	461a      	mov	r2, r3
 800ae66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f001 ff29 	bl	800ccc0 <VL53L0X_set_reference_spads>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800ae74:	4b94      	ldr	r3, [pc, #592]	; (800b0c8 <VL53L0X_StaticInit+0x300>)
 800ae76:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800ae78:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10f      	bne.n	800aea0 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800ae86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800ae8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d104      	bne.n	800ae9c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800ae98:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae9a:	e001      	b.n	800aea0 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800ae9c:	4b8a      	ldr	r3, [pc, #552]	; (800b0c8 <VL53L0X_StaticInit+0x300>)
 800ae9e:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800aea0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d106      	bne.n	800aeb6 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800aea8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f003 fdfc 	bl	800eaa8 <VL53L0X_load_tuning_settings>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800aeb6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d10a      	bne.n	800aed4 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800aebe:	2300      	movs	r3, #0
 800aec0:	9300      	str	r3, [sp, #0]
 800aec2:	2304      	movs	r3, #4
 800aec4:	2200      	movs	r2, #0
 800aec6:	2100      	movs	r1, #0
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f001 f8f1 	bl	800c0b0 <VL53L0X_SetGpioConfig>
 800aece:	4603      	mov	r3, r0
 800aed0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aed4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d121      	bne.n	800af20 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800aedc:	2201      	movs	r2, #1
 800aede:	21ff      	movs	r1, #255	; 0xff
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f004 fcf7 	bl	800f8d4 <VL53L0X_WrByte>
 800aee6:	4603      	mov	r3, r0
 800aee8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800aeec:	f107 031a 	add.w	r3, r7, #26
 800aef0:	461a      	mov	r2, r3
 800aef2:	2184      	movs	r1, #132	; 0x84
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f004 fd99 	bl	800fa2c <VL53L0X_RdWord>
 800aefa:	4603      	mov	r3, r0
 800aefc:	461a      	mov	r2, r3
 800aefe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800af02:	4313      	orrs	r3, r2
 800af04:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800af08:	2200      	movs	r2, #0
 800af0a:	21ff      	movs	r1, #255	; 0xff
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f004 fce1 	bl	800f8d4 <VL53L0X_WrByte>
 800af12:	4603      	mov	r3, r0
 800af14:	461a      	mov	r2, r3
 800af16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800af1a:	4313      	orrs	r3, r2
 800af1c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800af20:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800af24:	2b00      	cmp	r3, #0
 800af26:	d105      	bne.n	800af34 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800af28:	8b7b      	ldrh	r3, [r7, #26]
 800af2a:	011b      	lsls	r3, r3, #4
 800af2c:	461a      	mov	r2, r3
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800af34:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d108      	bne.n	800af4e <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800af3c:	f107 031c 	add.w	r3, r7, #28
 800af40:	4619      	mov	r1, r3
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 f8d0 	bl	800b0e8 <VL53L0X_GetDeviceParameters>
 800af48:	4603      	mov	r3, r0
 800af4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800af4e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800af52:	2b00      	cmp	r3, #0
 800af54:	d110      	bne.n	800af78 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800af56:	f107 0319 	add.w	r3, r7, #25
 800af5a:	4619      	mov	r1, r3
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f992 	bl	800b286 <VL53L0X_GetFractionEnable>
 800af62:	4603      	mov	r3, r0
 800af64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800af68:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d103      	bne.n	800af78 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800af70:	7e7a      	ldrb	r2, [r7, #25]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800af78:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10e      	bne.n	800af9e <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f103 0410 	add.w	r4, r3, #16
 800af86:	f107 051c 	add.w	r5, r7, #28
 800af8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800af9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800af9e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d111      	bne.n	800afca <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800afa6:	f107 0319 	add.w	r3, r7, #25
 800afaa:	461a      	mov	r2, r3
 800afac:	2101      	movs	r1, #1
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f004 fd12 	bl	800f9d8 <VL53L0X_RdByte>
 800afb4:	4603      	mov	r3, r0
 800afb6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800afba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d103      	bne.n	800afca <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800afc2:	7e7a      	ldrb	r2, [r7, #25]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800afca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d107      	bne.n	800afe2 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800afd2:	2200      	movs	r2, #0
 800afd4:	2100      	movs	r1, #0
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f9ca 	bl	800b370 <VL53L0X_SetSequenceStepEnable>
 800afdc:	4603      	mov	r3, r0
 800afde:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800afe2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d107      	bne.n	800affa <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800afea:	2200      	movs	r2, #0
 800afec:	2102      	movs	r1, #2
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f9be 	bl	800b370 <VL53L0X_SetSequenceStepEnable>
 800aff4:	4603      	mov	r3, r0
 800aff6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800affa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800affe:	2b00      	cmp	r3, #0
 800b000:	d103      	bne.n	800b00a <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2203      	movs	r2, #3
 800b006:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b00a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d109      	bne.n	800b026 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b012:	f107 0313 	add.w	r3, r7, #19
 800b016:	461a      	mov	r2, r3
 800b018:	2100      	movs	r1, #0
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 f990 	bl	800b340 <VL53L0X_GetVcselPulsePeriod>
 800b020:	4603      	mov	r3, r0
 800b022:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b026:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d103      	bne.n	800b036 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b02e:	7cfa      	ldrb	r2, [r7, #19]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b036:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d109      	bne.n	800b052 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b03e:	f107 0313 	add.w	r3, r7, #19
 800b042:	461a      	mov	r2, r3
 800b044:	2101      	movs	r1, #1
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 f97a 	bl	800b340 <VL53L0X_GetVcselPulsePeriod>
 800b04c:	4603      	mov	r3, r0
 800b04e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b052:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b056:	2b00      	cmp	r3, #0
 800b058:	d103      	bne.n	800b062 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b05a:	7cfa      	ldrb	r2, [r7, #19]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b062:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b066:	2b00      	cmp	r3, #0
 800b068:	d109      	bne.n	800b07e <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800b06a:	f107 030c 	add.w	r3, r7, #12
 800b06e:	461a      	mov	r2, r3
 800b070:	2103      	movs	r1, #3
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f002 fef4 	bl	800de60 <get_sequence_step_timeout>
 800b078:	4603      	mov	r3, r0
 800b07a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b07e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b082:	2b00      	cmp	r3, #0
 800b084:	d103      	bne.n	800b08e <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b08e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b092:	2b00      	cmp	r3, #0
 800b094:	d109      	bne.n	800b0aa <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800b096:	f107 030c 	add.w	r3, r7, #12
 800b09a:	461a      	mov	r2, r3
 800b09c:	2104      	movs	r1, #4
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f002 fede 	bl	800de60 <get_sequence_step_timeout>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b0aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d103      	bne.n	800b0ba <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b0b2:	68fa      	ldr	r2, [r7, #12]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b0ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3770      	adds	r7, #112	; 0x70
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bdb0      	pop	{r4, r5, r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	2000000c 	.word	0x2000000c

0800b0cc <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800b0d4:	239d      	movs	r3, #157	; 0x9d
 800b0d6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800b0d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3714      	adds	r7, #20
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f8b0 	bl	800b260 <VL53L0X_GetDeviceMode>
 800b100:	4603      	mov	r3, r0
 800b102:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d107      	bne.n	800b11c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	3308      	adds	r3, #8
 800b110:	4619      	mov	r1, r3
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 fa78 	bl	800b608 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800b118:	4603      	mov	r3, r0
 800b11a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800b11c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d102      	bne.n	800b12a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	2200      	movs	r2, #0
 800b128:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800b12a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d107      	bne.n	800b142 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	3310      	adds	r3, #16
 800b136:	4619      	mov	r1, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 faae 	bl	800b69a <VL53L0X_GetXTalkCompensationRateMegaCps>
 800b13e:	4603      	mov	r3, r0
 800b140:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800b142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d107      	bne.n	800b15a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	3314      	adds	r3, #20
 800b14e:	4619      	mov	r1, r3
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7ff fcc1 	bl	800aad8 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800b156:	4603      	mov	r3, r0
 800b158:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800b15a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d134      	bne.n	800b1cc <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b162:	2300      	movs	r3, #0
 800b164:	60bb      	str	r3, [r7, #8]
 800b166:	e02a      	b.n	800b1be <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d12a      	bne.n	800b1c6 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	b299      	uxth	r1, r3
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	3308      	adds	r3, #8
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	683a      	ldr	r2, [r7, #0]
 800b17c:	4413      	add	r3, r2
 800b17e:	3304      	adds	r3, #4
 800b180:	461a      	mov	r2, r3
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fbce 	bl	800b924 <VL53L0X_GetLimitCheckValue>
 800b188:	4603      	mov	r3, r0
 800b18a:	461a      	mov	r2, r3
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
 800b18e:	4313      	orrs	r3, r2
 800b190:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d117      	bne.n	800b1ca <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	b299      	uxth	r1, r3
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	3318      	adds	r3, #24
 800b1a2:	683a      	ldr	r2, [r7, #0]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 fb35 	bl	800b818 <VL53L0X_GetLimitCheckEnable>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	7bfb      	ldrb	r3, [r7, #15]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	60bb      	str	r3, [r7, #8]
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	2b05      	cmp	r3, #5
 800b1c2:	ddd1      	ble.n	800b168 <VL53L0X_GetDeviceParameters+0x80>
 800b1c4:	e002      	b.n	800b1cc <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800b1c6:	bf00      	nop
 800b1c8:	e000      	b.n	800b1cc <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800b1ca:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b1cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d107      	bne.n	800b1e4 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	333c      	adds	r3, #60	; 0x3c
 800b1d8:	4619      	mov	r1, r3
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 fc30 	bl	800ba40 <VL53L0X_GetWrapAroundCheckEnable>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800b1e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d107      	bne.n	800b1fc <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f879 	bl	800b2ea <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b1fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b200:	4618      	mov	r0, r3
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	460b      	mov	r3, r1
 800b212:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b214:	2300      	movs	r3, #0
 800b216:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800b218:	78fb      	ldrb	r3, [r7, #3]
 800b21a:	2b15      	cmp	r3, #21
 800b21c:	bf8c      	ite	hi
 800b21e:	2201      	movhi	r2, #1
 800b220:	2200      	movls	r2, #0
 800b222:	b2d2      	uxtb	r2, r2
 800b224:	2a00      	cmp	r2, #0
 800b226:	d10e      	bne.n	800b246 <VL53L0X_SetDeviceMode+0x3e>
 800b228:	2201      	movs	r2, #1
 800b22a:	409a      	lsls	r2, r3
 800b22c:	4b0b      	ldr	r3, [pc, #44]	; (800b25c <VL53L0X_SetDeviceMode+0x54>)
 800b22e:	4013      	ands	r3, r2
 800b230:	2b00      	cmp	r3, #0
 800b232:	bf14      	ite	ne
 800b234:	2301      	movne	r3, #1
 800b236:	2300      	moveq	r3, #0
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d003      	beq.n	800b246 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	78fa      	ldrb	r2, [r7, #3]
 800b242:	741a      	strb	r2, [r3, #16]
		break;
 800b244:	e001      	b.n	800b24a <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b246:	23f8      	movs	r3, #248	; 0xf8
 800b248:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b24a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3714      	adds	r7, #20
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr
 800b25a:	bf00      	nop
 800b25c:	0030000b 	.word	0x0030000b

0800b260 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800b260:	b480      	push	{r7}
 800b262:	b085      	sub	sp, #20
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b26a:	2300      	movs	r3, #0
 800b26c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	7c1a      	ldrb	r2, [r3, #16]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b276:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3714      	adds	r7, #20
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b084      	sub	sp, #16
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b290:	2300      	movs	r3, #0
 800b292:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800b294:	683a      	ldr	r2, [r7, #0]
 800b296:	2109      	movs	r1, #9
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f004 fb9d 	bl	800f9d8 <VL53L0X_RdByte>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b2a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d106      	bne.n	800b2b8 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	b2da      	uxtb	r2, r3
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b2b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f003 fa56 	bl	800e786 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800b2de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b084      	sub	sp, #16
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800b2f8:	6839      	ldr	r1, [r7, #0]
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f003 fb23 	bl	800e946 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800b300:	4603      	mov	r3, r0
 800b302:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800b304:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	460b      	mov	r3, r1
 800b31a:	70fb      	strb	r3, [r7, #3]
 800b31c:	4613      	mov	r3, r2
 800b31e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800b324:	78ba      	ldrb	r2, [r7, #2]
 800b326:	78fb      	ldrb	r3, [r7, #3]
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f002 ff6b 	bl	800e206 <VL53L0X_set_vcsel_pulse_period>
 800b330:	4603      	mov	r3, r0
 800b332:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800b334:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	460b      	mov	r3, r1
 800b34a:	607a      	str	r2, [r7, #4]
 800b34c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b34e:	2300      	movs	r3, #0
 800b350:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800b352:	7afb      	ldrb	r3, [r7, #11]
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	4619      	mov	r1, r3
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f003 f9dd 	bl	800e718 <VL53L0X_get_vcsel_pulse_period>
 800b35e:	4603      	mov	r3, r0
 800b360:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800b362:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3718      	adds	r7, #24
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
	...

0800b370 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b086      	sub	sp, #24
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	460b      	mov	r3, r1
 800b37a:	70fb      	strb	r3, [r7, #3]
 800b37c:	4613      	mov	r3, r2
 800b37e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b380:	2300      	movs	r3, #0
 800b382:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800b388:	2300      	movs	r3, #0
 800b38a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b38c:	f107 030f 	add.w	r3, r7, #15
 800b390:	461a      	mov	r2, r3
 800b392:	2101      	movs	r1, #1
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f004 fb1f 	bl	800f9d8 <VL53L0X_RdByte>
 800b39a:	4603      	mov	r3, r0
 800b39c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
 800b3a0:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800b3a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d15a      	bne.n	800b460 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800b3aa:	78bb      	ldrb	r3, [r7, #2]
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d12b      	bne.n	800b408 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800b3b0:	78fb      	ldrb	r3, [r7, #3]
 800b3b2:	2b04      	cmp	r3, #4
 800b3b4:	d825      	bhi.n	800b402 <VL53L0X_SetSequenceStepEnable+0x92>
 800b3b6:	a201      	add	r2, pc, #4	; (adr r2, 800b3bc <VL53L0X_SetSequenceStepEnable+0x4c>)
 800b3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3bc:	0800b3d1 	.word	0x0800b3d1
 800b3c0:	0800b3db 	.word	0x0800b3db
 800b3c4:	0800b3e5 	.word	0x0800b3e5
 800b3c8:	0800b3ef 	.word	0x0800b3ef
 800b3cc:	0800b3f9 	.word	0x0800b3f9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800b3d0:	7dbb      	ldrb	r3, [r7, #22]
 800b3d2:	f043 0310 	orr.w	r3, r3, #16
 800b3d6:	75bb      	strb	r3, [r7, #22]
				break;
 800b3d8:	e043      	b.n	800b462 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800b3da:	7dbb      	ldrb	r3, [r7, #22]
 800b3dc:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800b3e0:	75bb      	strb	r3, [r7, #22]
				break;
 800b3e2:	e03e      	b.n	800b462 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800b3e4:	7dbb      	ldrb	r3, [r7, #22]
 800b3e6:	f043 0304 	orr.w	r3, r3, #4
 800b3ea:	75bb      	strb	r3, [r7, #22]
				break;
 800b3ec:	e039      	b.n	800b462 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800b3ee:	7dbb      	ldrb	r3, [r7, #22]
 800b3f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3f4:	75bb      	strb	r3, [r7, #22]
				break;
 800b3f6:	e034      	b.n	800b462 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800b3f8:	7dbb      	ldrb	r3, [r7, #22]
 800b3fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b3fe:	75bb      	strb	r3, [r7, #22]
				break;
 800b400:	e02f      	b.n	800b462 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b402:	23fc      	movs	r3, #252	; 0xfc
 800b404:	75fb      	strb	r3, [r7, #23]
 800b406:	e02c      	b.n	800b462 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800b408:	78fb      	ldrb	r3, [r7, #3]
 800b40a:	2b04      	cmp	r3, #4
 800b40c:	d825      	bhi.n	800b45a <VL53L0X_SetSequenceStepEnable+0xea>
 800b40e:	a201      	add	r2, pc, #4	; (adr r2, 800b414 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800b410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b414:	0800b429 	.word	0x0800b429
 800b418:	0800b433 	.word	0x0800b433
 800b41c:	0800b43d 	.word	0x0800b43d
 800b420:	0800b447 	.word	0x0800b447
 800b424:	0800b451 	.word	0x0800b451
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800b428:	7dbb      	ldrb	r3, [r7, #22]
 800b42a:	f023 0310 	bic.w	r3, r3, #16
 800b42e:	75bb      	strb	r3, [r7, #22]
				break;
 800b430:	e017      	b.n	800b462 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800b432:	7dbb      	ldrb	r3, [r7, #22]
 800b434:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800b438:	75bb      	strb	r3, [r7, #22]
				break;
 800b43a:	e012      	b.n	800b462 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800b43c:	7dbb      	ldrb	r3, [r7, #22]
 800b43e:	f023 0304 	bic.w	r3, r3, #4
 800b442:	75bb      	strb	r3, [r7, #22]
				break;
 800b444:	e00d      	b.n	800b462 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800b446:	7dbb      	ldrb	r3, [r7, #22]
 800b448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b44c:	75bb      	strb	r3, [r7, #22]
				break;
 800b44e:	e008      	b.n	800b462 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800b450:	7dbb      	ldrb	r3, [r7, #22]
 800b452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b456:	75bb      	strb	r3, [r7, #22]
				break;
 800b458:	e003      	b.n	800b462 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b45a:	23fc      	movs	r3, #252	; 0xfc
 800b45c:	75fb      	strb	r3, [r7, #23]
 800b45e:	e000      	b.n	800b462 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800b460:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800b462:	7bfb      	ldrb	r3, [r7, #15]
 800b464:	7dba      	ldrb	r2, [r7, #22]
 800b466:	429a      	cmp	r2, r3
 800b468:	d01e      	beq.n	800b4a8 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800b46a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d107      	bne.n	800b482 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800b472:	7dbb      	ldrb	r3, [r7, #22]
 800b474:	461a      	mov	r2, r3
 800b476:	2101      	movs	r1, #1
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f004 fa2b 	bl	800f8d4 <VL53L0X_WrByte>
 800b47e:	4603      	mov	r3, r0
 800b480:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800b482:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d103      	bne.n	800b492 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	7dba      	ldrb	r2, [r7, #22]
 800b48e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800b492:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d106      	bne.n	800b4a8 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	695b      	ldr	r3, [r3, #20]
 800b49e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800b4a0:	6939      	ldr	r1, [r7, #16]
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7ff ff0e 	bl	800b2c4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800b4a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3718      	adds	r7, #24
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b087      	sub	sp, #28
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	607b      	str	r3, [r7, #4]
 800b4be:	460b      	mov	r3, r1
 800b4c0:	72fb      	strb	r3, [r7, #11]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800b4d0:	7afb      	ldrb	r3, [r7, #11]
 800b4d2:	2b04      	cmp	r3, #4
 800b4d4:	d836      	bhi.n	800b544 <sequence_step_enabled+0x90>
 800b4d6:	a201      	add	r2, pc, #4	; (adr r2, 800b4dc <sequence_step_enabled+0x28>)
 800b4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4dc:	0800b4f1 	.word	0x0800b4f1
 800b4e0:	0800b503 	.word	0x0800b503
 800b4e4:	0800b515 	.word	0x0800b515
 800b4e8:	0800b527 	.word	0x0800b527
 800b4ec:	0800b539 	.word	0x0800b539
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800b4f0:	7abb      	ldrb	r3, [r7, #10]
 800b4f2:	111b      	asrs	r3, r3, #4
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	f003 0301 	and.w	r3, r3, #1
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	701a      	strb	r2, [r3, #0]
		break;
 800b500:	e022      	b.n	800b548 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800b502:	7abb      	ldrb	r3, [r7, #10]
 800b504:	10db      	asrs	r3, r3, #3
 800b506:	b2db      	uxtb	r3, r3
 800b508:	f003 0301 	and.w	r3, r3, #1
 800b50c:	b2da      	uxtb	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	701a      	strb	r2, [r3, #0]
		break;
 800b512:	e019      	b.n	800b548 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800b514:	7abb      	ldrb	r3, [r7, #10]
 800b516:	109b      	asrs	r3, r3, #2
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	f003 0301 	and.w	r3, r3, #1
 800b51e:	b2da      	uxtb	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	701a      	strb	r2, [r3, #0]
		break;
 800b524:	e010      	b.n	800b548 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800b526:	7abb      	ldrb	r3, [r7, #10]
 800b528:	119b      	asrs	r3, r3, #6
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	f003 0301 	and.w	r3, r3, #1
 800b530:	b2da      	uxtb	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	701a      	strb	r2, [r3, #0]
		break;
 800b536:	e007      	b.n	800b548 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800b538:	7abb      	ldrb	r3, [r7, #10]
 800b53a:	09db      	lsrs	r3, r3, #7
 800b53c:	b2da      	uxtb	r2, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	701a      	strb	r2, [r3, #0]
		break;
 800b542:	e001      	b.n	800b548 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b544:	23fc      	movs	r3, #252	; 0xfc
 800b546:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b548:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	371c      	adds	r7, #28
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b562:	2300      	movs	r3, #0
 800b564:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800b566:	2300      	movs	r3, #0
 800b568:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b56a:	f107 030e 	add.w	r3, r7, #14
 800b56e:	461a      	mov	r2, r3
 800b570:	2101      	movs	r1, #1
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f004 fa30 	bl	800f9d8 <VL53L0X_RdByte>
 800b578:	4603      	mov	r3, r0
 800b57a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800b57c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d107      	bne.n	800b594 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800b584:	7bba      	ldrb	r2, [r7, #14]
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	2100      	movs	r1, #0
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7ff ff92 	bl	800b4b4 <sequence_step_enabled>
 800b590:	4603      	mov	r3, r0
 800b592:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d108      	bne.n	800b5ae <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800b59c:	7bba      	ldrb	r2, [r7, #14]
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	3302      	adds	r3, #2
 800b5a2:	2101      	movs	r1, #1
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f7ff ff85 	bl	800b4b4 <sequence_step_enabled>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b5ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d108      	bne.n	800b5c8 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800b5b6:	7bba      	ldrb	r2, [r7, #14]
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	2102      	movs	r1, #2
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7ff ff78 	bl	800b4b4 <sequence_step_enabled>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b5c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d108      	bne.n	800b5e2 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800b5d0:	7bba      	ldrb	r2, [r7, #14]
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	3303      	adds	r3, #3
 800b5d6:	2103      	movs	r1, #3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7ff ff6b 	bl	800b4b4 <sequence_step_enabled>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b5e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d108      	bne.n	800b5fc <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800b5ea:	7bba      	ldrb	r2, [r7, #14]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	3304      	adds	r3, #4
 800b5f0:	2104      	movs	r1, #4
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7ff ff5e 	bl	800b4b4 <sequence_step_enabled>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b5fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b612:	2300      	movs	r3, #0
 800b614:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800b616:	f107 030c 	add.w	r3, r7, #12
 800b61a:	461a      	mov	r2, r3
 800b61c:	21f8      	movs	r1, #248	; 0xf8
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f004 fa04 	bl	800fa2c <VL53L0X_RdWord>
 800b624:	4603      	mov	r3, r0
 800b626:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800b628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d108      	bne.n	800b642 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800b630:	f107 0308 	add.w	r3, r7, #8
 800b634:	461a      	mov	r2, r3
 800b636:	2104      	movs	r1, #4
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f004 fa2f 	bl	800fa9c <VL53L0X_RdDWord>
 800b63e:	4603      	mov	r3, r0
 800b640:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10c      	bne.n	800b664 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800b64a:	89bb      	ldrh	r3, [r7, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d005      	beq.n	800b65c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	89ba      	ldrh	r2, [r7, #12]
 800b654:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b664:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800b670:	b480      	push	{r7}
 800b672:	b085      	sub	sp, #20
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b67a:	2300      	movs	r3, #0
 800b67c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	7f1b      	ldrb	r3, [r3, #28]
 800b682:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	7bba      	ldrb	r2, [r7, #14]
 800b688:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b68a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3714      	adds	r7, #20
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b086      	sub	sp, #24
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
 800b6a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800b6a8:	f107 030e 	add.w	r3, r7, #14
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	2120      	movs	r1, #32
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f004 f9bb 	bl	800fa2c <VL53L0X_RdWord>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800b6ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d118      	bne.n	800b6f4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800b6c2:	89fb      	ldrh	r3, [r7, #14]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d109      	bne.n	800b6dc <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a1b      	ldr	r3, [r3, #32]
 800b6cc:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	693a      	ldr	r2, [r7, #16]
 800b6d2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	771a      	strb	r2, [r3, #28]
 800b6da:	e00b      	b.n	800b6f4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800b6dc:	89fb      	ldrh	r3, [r7, #14]
 800b6de:	00db      	lsls	r3, r3, #3
 800b6e0:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	693a      	ldr	r2, [r7, #16]
 800b6e6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	693a      	ldr	r2, [r7, #16]
 800b6ec:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b6f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3718      	adds	r7, #24
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	460b      	mov	r3, r1
 800b70a:	807b      	strh	r3, [r7, #2]
 800b70c:	4613      	mov	r3, r2
 800b70e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b710:	2300      	movs	r3, #0
 800b712:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800b714:	2300      	movs	r3, #0
 800b716:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800b718:	2300      	movs	r3, #0
 800b71a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800b71c:	2300      	movs	r3, #0
 800b71e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b720:	887b      	ldrh	r3, [r7, #2]
 800b722:	2b05      	cmp	r3, #5
 800b724:	d902      	bls.n	800b72c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b726:	23fc      	movs	r3, #252	; 0xfc
 800b728:	75fb      	strb	r3, [r7, #23]
 800b72a:	e05b      	b.n	800b7e4 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800b72c:	787b      	ldrb	r3, [r7, #1]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d106      	bne.n	800b740 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800b732:	2300      	movs	r3, #0
 800b734:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800b736:	2300      	movs	r3, #0
 800b738:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800b73a:	2301      	movs	r3, #1
 800b73c:	73bb      	strb	r3, [r7, #14]
 800b73e:	e00a      	b.n	800b756 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b740:	887b      	ldrh	r3, [r7, #2]
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	330c      	adds	r3, #12
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800b74e:	2300      	movs	r3, #0
 800b750:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800b752:	2301      	movs	r3, #1
 800b754:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800b756:	887b      	ldrh	r3, [r7, #2]
 800b758:	2b05      	cmp	r3, #5
 800b75a:	d841      	bhi.n	800b7e0 <VL53L0X_SetLimitCheckEnable+0xe0>
 800b75c:	a201      	add	r2, pc, #4	; (adr r2, 800b764 <VL53L0X_SetLimitCheckEnable+0x64>)
 800b75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b762:	bf00      	nop
 800b764:	0800b77d 	.word	0x0800b77d
 800b768:	0800b787 	.word	0x0800b787
 800b76c:	0800b79d 	.word	0x0800b79d
 800b770:	0800b7a7 	.word	0x0800b7a7
 800b774:	0800b7b1 	.word	0x0800b7b1
 800b778:	0800b7c9 	.word	0x0800b7c9

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	7bfa      	ldrb	r2, [r7, #15]
 800b780:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800b784:	e02e      	b.n	800b7e4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	461a      	mov	r2, r3
 800b78e:	2144      	movs	r1, #68	; 0x44
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f004 f8c3 	bl	800f91c <VL53L0X_WrWord>
 800b796:	4603      	mov	r3, r0
 800b798:	75fb      	strb	r3, [r7, #23]

			break;
 800b79a:	e023      	b.n	800b7e4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	7bfa      	ldrb	r2, [r7, #15]
 800b7a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800b7a4:	e01e      	b.n	800b7e4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	7bfa      	ldrb	r2, [r7, #15]
 800b7aa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800b7ae:	e019      	b.n	800b7e4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800b7b0:	7bbb      	ldrb	r3, [r7, #14]
 800b7b2:	005b      	lsls	r3, r3, #1
 800b7b4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800b7b6:	7b7b      	ldrb	r3, [r7, #13]
 800b7b8:	22fe      	movs	r2, #254	; 0xfe
 800b7ba:	2160      	movs	r1, #96	; 0x60
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f004 f8d7 	bl	800f970 <VL53L0X_UpdateByte>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800b7c6:	e00d      	b.n	800b7e4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800b7c8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ca:	011b      	lsls	r3, r3, #4
 800b7cc:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800b7ce:	7b7b      	ldrb	r3, [r7, #13]
 800b7d0:	22ef      	movs	r2, #239	; 0xef
 800b7d2:	2160      	movs	r1, #96	; 0x60
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f004 f8cb 	bl	800f970 <VL53L0X_UpdateByte>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800b7de:	e001      	b.n	800b7e4 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b7e0:	23fc      	movs	r3, #252	; 0xfc
 800b7e2:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b7e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10f      	bne.n	800b80c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800b7ec:	787b      	ldrb	r3, [r7, #1]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d106      	bne.n	800b800 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b7f2:	887b      	ldrh	r3, [r7, #2]
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b7fe:	e005      	b.n	800b80c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b800:	887b      	ldrh	r3, [r7, #2]
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	4413      	add	r3, r2
 800b806:	2201      	movs	r2, #1
 800b808:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b80c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b810:	4618      	mov	r0, r3
 800b812:	3718      	adds	r7, #24
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800b818:	b480      	push	{r7}
 800b81a:	b087      	sub	sp, #28
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	460b      	mov	r3, r1
 800b822:	607a      	str	r2, [r7, #4]
 800b824:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b826:	2300      	movs	r3, #0
 800b828:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b82a:	897b      	ldrh	r3, [r7, #10]
 800b82c:	2b05      	cmp	r3, #5
 800b82e:	d905      	bls.n	800b83c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b830:	23fc      	movs	r3, #252	; 0xfc
 800b832:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	701a      	strb	r2, [r3, #0]
 800b83a:	e008      	b.n	800b84e <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b83c:	897b      	ldrh	r3, [r7, #10]
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	4413      	add	r3, r2
 800b842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b846:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	7dba      	ldrb	r2, [r7, #22]
 800b84c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b84e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b852:	4618      	mov	r0, r3
 800b854:	371c      	adds	r7, #28
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
	...

0800b860 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b086      	sub	sp, #24
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	460b      	mov	r3, r1
 800b86a:	607a      	str	r2, [r7, #4]
 800b86c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b86e:	2300      	movs	r3, #0
 800b870:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800b872:	897b      	ldrh	r3, [r7, #10]
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	4413      	add	r3, r2
 800b878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b87c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800b87e:	7dbb      	ldrb	r3, [r7, #22]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d107      	bne.n	800b894 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b884:	897b      	ldrh	r3, [r7, #10]
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	330c      	adds	r3, #12
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	4413      	add	r3, r2
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	605a      	str	r2, [r3, #4]
 800b892:	e040      	b.n	800b916 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800b894:	897b      	ldrh	r3, [r7, #10]
 800b896:	2b05      	cmp	r3, #5
 800b898:	d830      	bhi.n	800b8fc <VL53L0X_SetLimitCheckValue+0x9c>
 800b89a:	a201      	add	r2, pc, #4	; (adr r2, 800b8a0 <VL53L0X_SetLimitCheckValue+0x40>)
 800b89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a0:	0800b8b9 	.word	0x0800b8b9
 800b8a4:	0800b8c1 	.word	0x0800b8c1
 800b8a8:	0800b8d7 	.word	0x0800b8d7
 800b8ac:	0800b8df 	.word	0x0800b8df
 800b8b0:	0800b8e7 	.word	0x0800b8e7
 800b8b4:	0800b8e7 	.word	0x0800b8e7

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800b8be:	e01f      	b.n	800b900 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	2144      	movs	r1, #68	; 0x44
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	f004 f826 	bl	800f91c <VL53L0X_WrWord>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800b8d4:	e014      	b.n	800b900 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800b8dc:	e010      	b.n	800b900 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800b8e4:	e00c      	b.n	800b900 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	2164      	movs	r1, #100	; 0x64
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f004 f813 	bl	800f91c <VL53L0X_WrWord>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800b8fa:	e001      	b.n	800b900 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b8fc:	23fc      	movs	r3, #252	; 0xfc
 800b8fe:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b900:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d106      	bne.n	800b916 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b908:	897b      	ldrh	r3, [r7, #10]
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	330c      	adds	r3, #12
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	4413      	add	r3, r2
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b916:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3718      	adds	r7, #24
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop

0800b924 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b088      	sub	sp, #32
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	460b      	mov	r3, r1
 800b92e:	607a      	str	r2, [r7, #4]
 800b930:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b932:	2300      	movs	r3, #0
 800b934:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800b936:	2300      	movs	r3, #0
 800b938:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800b93a:	897b      	ldrh	r3, [r7, #10]
 800b93c:	2b05      	cmp	r3, #5
 800b93e:	d847      	bhi.n	800b9d0 <VL53L0X_GetLimitCheckValue+0xac>
 800b940:	a201      	add	r2, pc, #4	; (adr r2, 800b948 <VL53L0X_GetLimitCheckValue+0x24>)
 800b942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b946:	bf00      	nop
 800b948:	0800b961 	.word	0x0800b961
 800b94c:	0800b96d 	.word	0x0800b96d
 800b950:	0800b993 	.word	0x0800b993
 800b954:	0800b99f 	.word	0x0800b99f
 800b958:	0800b9ab 	.word	0x0800b9ab
 800b95c:	0800b9ab 	.word	0x0800b9ab

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b964:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800b966:	2300      	movs	r3, #0
 800b968:	77bb      	strb	r3, [r7, #30]
		break;
 800b96a:	e033      	b.n	800b9d4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800b96c:	f107 0316 	add.w	r3, r7, #22
 800b970:	461a      	mov	r2, r3
 800b972:	2144      	movs	r1, #68	; 0x44
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f004 f859 	bl	800fa2c <VL53L0X_RdWord>
 800b97a:	4603      	mov	r3, r0
 800b97c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800b97e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d102      	bne.n	800b98c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800b986:	8afb      	ldrh	r3, [r7, #22]
 800b988:	025b      	lsls	r3, r3, #9
 800b98a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800b98c:	2301      	movs	r3, #1
 800b98e:	77bb      	strb	r3, [r7, #30]
		break;
 800b990:	e020      	b.n	800b9d4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b996:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800b998:	2300      	movs	r3, #0
 800b99a:	77bb      	strb	r3, [r7, #30]
		break;
 800b99c:	e01a      	b.n	800b9d4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	77bb      	strb	r3, [r7, #30]
		break;
 800b9a8:	e014      	b.n	800b9d4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800b9aa:	f107 0316 	add.w	r3, r7, #22
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	2164      	movs	r1, #100	; 0x64
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f004 f83a 	bl	800fa2c <VL53L0X_RdWord>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800b9bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d102      	bne.n	800b9ca <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800b9c4:	8afb      	ldrh	r3, [r7, #22]
 800b9c6:	025b      	lsls	r3, r3, #9
 800b9c8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	77bb      	strb	r3, [r7, #30]
		break;
 800b9ce:	e001      	b.n	800b9d4 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b9d0:	23fc      	movs	r3, #252	; 0xfc
 800b9d2:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b9d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d12a      	bne.n	800ba32 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800b9dc:	7fbb      	ldrb	r3, [r7, #30]
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d124      	bne.n	800ba2c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800b9e2:	69bb      	ldr	r3, [r7, #24]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d110      	bne.n	800ba0a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800b9e8:	897b      	ldrh	r3, [r7, #10]
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	330c      	adds	r3, #12
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	4413      	add	r3, r2
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	69ba      	ldr	r2, [r7, #24]
 800b9fa:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800b9fc:	897b      	ldrh	r3, [r7, #10]
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	4413      	add	r3, r2
 800ba02:	2200      	movs	r2, #0
 800ba04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ba08:	e013      	b.n	800ba32 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	69ba      	ldr	r2, [r7, #24]
 800ba0e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800ba10:	897b      	ldrh	r3, [r7, #10]
 800ba12:	68fa      	ldr	r2, [r7, #12]
 800ba14:	330c      	adds	r3, #12
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	4413      	add	r3, r2
 800ba1a:	69ba      	ldr	r2, [r7, #24]
 800ba1c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800ba1e:	897b      	ldrh	r3, [r7, #10]
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	4413      	add	r3, r2
 800ba24:	2201      	movs	r2, #1
 800ba26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ba2a:	e002      	b.n	800ba32 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	69ba      	ldr	r2, [r7, #24]
 800ba30:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ba32:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3720      	adds	r7, #32
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop

0800ba40 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800ba4e:	f107 030e 	add.w	r3, r7, #14
 800ba52:	461a      	mov	r2, r3
 800ba54:	2101      	movs	r1, #1
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f003 ffbe 	bl	800f9d8 <VL53L0X_RdByte>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800ba60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10e      	bne.n	800ba86 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800ba68:	7bba      	ldrb	r2, [r7, #14]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800ba70:	7bbb      	ldrb	r3, [r7, #14]
 800ba72:	b25b      	sxtb	r3, r3
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	da03      	bge.n	800ba80 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	701a      	strb	r2, [r3, #0]
 800ba7e:	e002      	b.n	800ba86 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2200      	movs	r2, #0
 800ba84:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ba86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d104      	bne.n	800ba98 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	781a      	ldrb	r2, [r3, #0]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ba98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3710      	adds	r7, #16
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800baac:	2300      	movs	r3, #0
 800baae:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800bab0:	f107 030e 	add.w	r3, r7, #14
 800bab4:	4619      	mov	r1, r3
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7ff fbd2 	bl	800b260 <VL53L0X_GetDeviceMode>
 800babc:	4603      	mov	r3, r0
 800babe:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800bac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d107      	bne.n	800bad8 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800bac8:	7bbb      	ldrb	r3, [r7, #14]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d104      	bne.n	800bad8 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f898 	bl	800bc04 <VL53L0X_StartMeasurement>
 800bad4:	4603      	mov	r3, r0
 800bad6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800bad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d104      	bne.n	800baea <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f001 fb6f 	bl	800d1c4 <VL53L0X_measurement_poll_for_completion>
 800bae6:	4603      	mov	r3, r0
 800bae8:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800baea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d106      	bne.n	800bb00 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800baf2:	7bbb      	ldrb	r3, [r7, #14]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d103      	bne.n	800bb00 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2203      	movs	r2, #3
 800bafc:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800bb00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	68b9      	ldr	r1, [r7, #8]
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f001 fb11 	bl	800d14a <VL53L0X_perform_ref_calibration>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800bb2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3718      	adds	r7, #24
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	460b      	mov	r3, r1
 800bb42:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb44:	2300      	movs	r3, #0
 800bb46:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800bb4e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800bb50:	7dbb      	ldrb	r3, [r7, #22]
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d005      	beq.n	800bb62 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800bb56:	7dbb      	ldrb	r3, [r7, #22]
 800bb58:	2b02      	cmp	r3, #2
 800bb5a:	d002      	beq.n	800bb62 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800bb5c:	7dbb      	ldrb	r3, [r7, #22]
 800bb5e:	2b03      	cmp	r3, #3
 800bb60:	d147      	bne.n	800bbf2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800bb62:	f107 030c 	add.w	r3, r7, #12
 800bb66:	f107 0210 	add.w	r2, r7, #16
 800bb6a:	2101      	movs	r1, #1
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fbc3 	bl	800c2f8 <VL53L0X_GetInterruptThresholds>
 800bb72:	4603      	mov	r3, r0
 800bb74:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800bb7c:	d803      	bhi.n	800bb86 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800bb7e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800bb80:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800bb84:	d935      	bls.n	800bbf2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800bb86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d131      	bne.n	800bbf2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800bb8e:	78fb      	ldrb	r3, [r7, #3]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d006      	beq.n	800bba2 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800bb94:	491a      	ldr	r1, [pc, #104]	; (800bc00 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f002 ff86 	bl	800eaa8 <VL53L0X_load_tuning_settings>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	75fb      	strb	r3, [r7, #23]
 800bba0:	e027      	b.n	800bbf2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800bba2:	2204      	movs	r2, #4
 800bba4:	21ff      	movs	r1, #255	; 0xff
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f003 fe94 	bl	800f8d4 <VL53L0X_WrByte>
 800bbac:	4603      	mov	r3, r0
 800bbae:	461a      	mov	r2, r3
 800bbb0:	7dfb      	ldrb	r3, [r7, #23]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	2170      	movs	r1, #112	; 0x70
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f003 fe8a 	bl	800f8d4 <VL53L0X_WrByte>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	7dfb      	ldrb	r3, [r7, #23]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bbca:	2200      	movs	r2, #0
 800bbcc:	21ff      	movs	r1, #255	; 0xff
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f003 fe80 	bl	800f8d4 <VL53L0X_WrByte>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	7dfb      	ldrb	r3, [r7, #23]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800bbde:	2200      	movs	r2, #0
 800bbe0:	2180      	movs	r1, #128	; 0x80
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f003 fe76 	bl	800f8d4 <VL53L0X_WrByte>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	461a      	mov	r2, r3
 800bbec:	7dfb      	ldrb	r3, [r7, #23]
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800bbf2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3718      	adds	r7, #24
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	20000100 	.word	0x20000100

0800bc04 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b086      	sub	sp, #24
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800bc10:	2301      	movs	r3, #1
 800bc12:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800bc14:	f107 030e 	add.w	r3, r7, #14
 800bc18:	4619      	mov	r1, r3
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7ff fb20 	bl	800b260 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800bc20:	2201      	movs	r2, #1
 800bc22:	2180      	movs	r1, #128	; 0x80
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f003 fe55 	bl	800f8d4 <VL53L0X_WrByte>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bc2e:	2201      	movs	r2, #1
 800bc30:	21ff      	movs	r1, #255	; 0xff
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f003 fe4e 	bl	800f8d4 <VL53L0X_WrByte>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	2100      	movs	r1, #0
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f003 fe47 	bl	800f8d4 <VL53L0X_WrByte>
 800bc46:	4603      	mov	r3, r0
 800bc48:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800bc50:	461a      	mov	r2, r3
 800bc52:	2191      	movs	r1, #145	; 0x91
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f003 fe3d 	bl	800f8d4 <VL53L0X_WrByte>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800bc5e:	2201      	movs	r2, #1
 800bc60:	2100      	movs	r1, #0
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f003 fe36 	bl	800f8d4 <VL53L0X_WrByte>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	21ff      	movs	r1, #255	; 0xff
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f003 fe2f 	bl	800f8d4 <VL53L0X_WrByte>
 800bc76:	4603      	mov	r3, r0
 800bc78:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	2180      	movs	r1, #128	; 0x80
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f003 fe28 	bl	800f8d4 <VL53L0X_WrByte>
 800bc84:	4603      	mov	r3, r0
 800bc86:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800bc88:	7bbb      	ldrb	r3, [r7, #14]
 800bc8a:	2b03      	cmp	r3, #3
 800bc8c:	d054      	beq.n	800bd38 <VL53L0X_StartMeasurement+0x134>
 800bc8e:	2b03      	cmp	r3, #3
 800bc90:	dc6c      	bgt.n	800bd6c <VL53L0X_StartMeasurement+0x168>
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d002      	beq.n	800bc9c <VL53L0X_StartMeasurement+0x98>
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d034      	beq.n	800bd04 <VL53L0X_StartMeasurement+0x100>
 800bc9a:	e067      	b.n	800bd6c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	2100      	movs	r1, #0
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f003 fe17 	bl	800f8d4 <VL53L0X_WrByte>
 800bca6:	4603      	mov	r3, r0
 800bca8:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800bcaa:	7bfb      	ldrb	r3, [r7, #15]
 800bcac:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800bcae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d15d      	bne.n	800bd72 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d008      	beq.n	800bcd2 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800bcc0:	f107 030d 	add.w	r3, r7, #13
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f003 fe85 	bl	800f9d8 <VL53L0X_RdByte>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800bcd8:	7b7a      	ldrb	r2, [r7, #13]
 800bcda:	7bfb      	ldrb	r3, [r7, #15]
 800bcdc:	4013      	ands	r3, r2
 800bcde:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800bce0:	7bfa      	ldrb	r2, [r7, #15]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d107      	bne.n	800bcf6 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800bce6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d103      	bne.n	800bcf6 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bcf4:	d3e1      	bcc.n	800bcba <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bcfc:	d339      	bcc.n	800bd72 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800bcfe:	23f9      	movs	r3, #249	; 0xf9
 800bd00:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800bd02:	e036      	b.n	800bd72 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800bd04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d105      	bne.n	800bd18 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800bd0c:	2101      	movs	r1, #1
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f7ff ff12 	bl	800bb38 <VL53L0X_CheckAndLoadInterruptSettings>
 800bd14:	4603      	mov	r3, r0
 800bd16:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800bd18:	2202      	movs	r2, #2
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f003 fdd9 	bl	800f8d4 <VL53L0X_WrByte>
 800bd22:	4603      	mov	r3, r0
 800bd24:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800bd26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d123      	bne.n	800bd76 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2204      	movs	r2, #4
 800bd32:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800bd36:	e01e      	b.n	800bd76 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800bd38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d105      	bne.n	800bd4c <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800bd40:	2101      	movs	r1, #1
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f7ff fef8 	bl	800bb38 <VL53L0X_CheckAndLoadInterruptSettings>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800bd4c:	2204      	movs	r2, #4
 800bd4e:	2100      	movs	r1, #0
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f003 fdbf 	bl	800f8d4 <VL53L0X_WrByte>
 800bd56:	4603      	mov	r3, r0
 800bd58:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800bd5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d10b      	bne.n	800bd7a <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2204      	movs	r2, #4
 800bd66:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800bd6a:	e006      	b.n	800bd7a <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800bd6c:	23f8      	movs	r3, #248	; 0xf8
 800bd6e:	75fb      	strb	r3, [r7, #23]
 800bd70:	e004      	b.n	800bd7c <VL53L0X_StartMeasurement+0x178>
		break;
 800bd72:	bf00      	nop
 800bd74:	e002      	b.n	800bd7c <VL53L0X_StartMeasurement+0x178>
		break;
 800bd76:	bf00      	nop
 800bd78:	e000      	b.n	800bd7c <VL53L0X_StartMeasurement+0x178>
		break;
 800bd7a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800bd7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3718      	adds	r7, #24
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd92:	2300      	movs	r3, #0
 800bd94:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800bd9c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800bd9e:	7bbb      	ldrb	r3, [r7, #14]
 800bda0:	2b04      	cmp	r3, #4
 800bda2:	d112      	bne.n	800bdca <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800bda4:	f107 0308 	add.w	r3, r7, #8
 800bda8:	4619      	mov	r1, r3
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 fb1a 	bl	800c3e4 <VL53L0X_GetInterruptMaskStatus>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	2b04      	cmp	r3, #4
 800bdb8:	d103      	bne.n	800bdc2 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	701a      	strb	r2, [r3, #0]
 800bdc0:	e01c      	b.n	800bdfc <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	701a      	strb	r2, [r3, #0]
 800bdc8:	e018      	b.n	800bdfc <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800bdca:	f107 030d 	add.w	r3, r7, #13
 800bdce:	461a      	mov	r2, r3
 800bdd0:	2114      	movs	r1, #20
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f003 fe00 	bl	800f9d8 <VL53L0X_RdByte>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800bddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d10b      	bne.n	800bdfc <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800bde4:	7b7b      	ldrb	r3, [r7, #13]
 800bde6:	f003 0301 	and.w	r3, r3, #1
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d003      	beq.n	800bdf6 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	701a      	strb	r2, [r3, #0]
 800bdf4:	e002      	b.n	800bdfc <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bdfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be00:	4618      	mov	r0, r3
 800be02:	3710      	adds	r7, #16
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800be08:	b5b0      	push	{r4, r5, r7, lr}
 800be0a:	b096      	sub	sp, #88	; 0x58
 800be0c:	af02      	add	r7, sp, #8
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be12:	2300      	movs	r3, #0
 800be14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800be18:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800be1c:	230c      	movs	r3, #12
 800be1e:	2114      	movs	r1, #20
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f003 fd2b 	bl	800f87c <VL53L0X_ReadMulti>
 800be26:	4603      	mov	r3, r0
 800be28:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800be2c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800be30:	2b00      	cmp	r3, #0
 800be32:	f040 80d1 	bne.w	800bfd8 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	2200      	movs	r2, #0
 800be3a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	2200      	movs	r2, #0
 800be40:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800be42:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800be46:	b29b      	uxth	r3, r3
 800be48:	021b      	lsls	r3, r3, #8
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800be50:	b29b      	uxth	r3, r3
 800be52:	4413      	add	r3, r2
 800be54:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	2200      	movs	r2, #0
 800be5c:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800be5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800be62:	b29b      	uxth	r3, r3
 800be64:	021b      	lsls	r3, r3, #8
 800be66:	b29a      	uxth	r2, r3
 800be68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	4413      	add	r3, r2
 800be70:	b29b      	uxth	r3, r3
 800be72:	025b      	lsls	r3, r3, #9
 800be74:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be7a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800be7c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800be80:	b29b      	uxth	r3, r3
 800be82:	021b      	lsls	r3, r3, #8
 800be84:	b29a      	uxth	r2, r3
 800be86:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	4413      	add	r3, r2
 800be8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800be92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800be96:	025b      	lsls	r3, r3, #9
 800be98:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800be9e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	021b      	lsls	r3, r3, #8
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800beac:	b29b      	uxth	r3, r3
 800beae:	4413      	add	r3, r2
 800beb0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800beba:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800bebc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bec0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800beca:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800bed2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800bed6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bedc:	d046      	beq.n	800bf6c <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800bede:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bee0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800bee4:	fb02 f303 	mul.w	r3, r2, r3
 800bee8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800beec:	4a57      	ldr	r2, [pc, #348]	; (800c04c <VL53L0X_GetRangingMeasurementData+0x244>)
 800beee:	fb82 1203 	smull	r1, r2, r2, r3
 800bef2:	1192      	asrs	r2, r2, #6
 800bef4:	17db      	asrs	r3, r3, #31
 800bef6:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800bef8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6a1b      	ldr	r3, [r3, #32]
 800bf00:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	7f1b      	ldrb	r3, [r3, #28]
 800bf06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800bf0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d02c      	beq.n	800bf6c <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800bf12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bf14:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800bf18:	fb02 f303 	mul.w	r3, r2, r3
 800bf1c:	121a      	asrs	r2, r3, #8
					<= 0) {
 800bf1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d10d      	bne.n	800bf40 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800bf24:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d004      	beq.n	800bf36 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800bf2c:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800bf30:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800bf34:	e016      	b.n	800bf64 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800bf36:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800bf3a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800bf3e:	e011      	b.n	800bf64 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800bf40:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bf44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf46:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800bf4a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bf4c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800bf50:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800bf54:	121b      	asrs	r3, r3, #8
 800bf56:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800bf58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf5a:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800bf5c:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800bf60:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800bf64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bf68:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800bf6c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d00d      	beq.n	800bf90 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800bf74:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bf78:	089b      	lsrs	r3, r3, #2
 800bf7a:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800bf80:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	019b      	lsls	r3, r3, #6
 800bf88:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	75da      	strb	r2, [r3, #23]
 800bf8e:	e006      	b.n	800bf9e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800bf96:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800bf9e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800bfa2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800bfa6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800bfaa:	9301      	str	r3, [sp, #4]
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	9300      	str	r3, [sp, #0]
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f003 fa15 	bl	800f3e4 <VL53L0X_get_pal_range_status>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800bfc8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d103      	bne.n	800bfd8 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800bfd0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bfd8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d12f      	bne.n	800c040 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f107 040c 	add.w	r4, r7, #12
 800bfe6:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800bfea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bfec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bfee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bff2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800bffa:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800c000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800c008:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800c00e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800c014:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800c01a:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800c020:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800c026:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800c030:	f107 050c 	add.w	r5, r7, #12
 800c034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c038:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c03c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c040:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800c044:	4618      	mov	r0, r3
 800c046:	3750      	adds	r7, #80	; 0x50
 800c048:	46bd      	mov	sp, r7
 800c04a:	bdb0      	pop	{r4, r5, r7, pc}
 800c04c:	10624dd3 	.word	0x10624dd3

0800c050 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c05a:	2300      	movs	r3, #0
 800c05c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800c05e:	2100      	movs	r1, #0
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f7ff f8d1 	bl	800b208 <VL53L0X_SetDeviceMode>
 800c066:	4603      	mov	r3, r0
 800c068:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c06a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d104      	bne.n	800c07c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f7ff fd16 	bl	800baa4 <VL53L0X_PerformSingleMeasurement>
 800c078:	4603      	mov	r3, r0
 800c07a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800c07c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d105      	bne.n	800c090 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800c084:	6839      	ldr	r1, [r7, #0]
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f7ff febe 	bl	800be08 <VL53L0X_GetRangingMeasurementData>
 800c08c:	4603      	mov	r3, r0
 800c08e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800c090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d105      	bne.n	800c0a4 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c098:	2100      	movs	r1, #0
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 f962 	bl	800c364 <VL53L0X_ClearInterruptMask>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800c0a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	4608      	mov	r0, r1
 800c0ba:	4611      	mov	r1, r2
 800c0bc:	461a      	mov	r2, r3
 800c0be:	4603      	mov	r3, r0
 800c0c0:	70fb      	strb	r3, [r7, #3]
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	70bb      	strb	r3, [r7, #2]
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800c0ce:	78fb      	ldrb	r3, [r7, #3]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d002      	beq.n	800c0da <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800c0d4:	23f6      	movs	r3, #246	; 0xf6
 800c0d6:	73fb      	strb	r3, [r7, #15]
 800c0d8:	e107      	b.n	800c2ea <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800c0da:	78bb      	ldrb	r3, [r7, #2]
 800c0dc:	2b14      	cmp	r3, #20
 800c0de:	d110      	bne.n	800c102 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c0e0:	7e3b      	ldrb	r3, [r7, #24]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d102      	bne.n	800c0ec <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800c0e6:	2310      	movs	r3, #16
 800c0e8:	73bb      	strb	r3, [r7, #14]
 800c0ea:	e001      	b.n	800c0f0 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800c0f0:	7bbb      	ldrb	r3, [r7, #14]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	2184      	movs	r1, #132	; 0x84
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f003 fbec 	bl	800f8d4 <VL53L0X_WrByte>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	73fb      	strb	r3, [r7, #15]
 800c100:	e0f3      	b.n	800c2ea <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800c102:	78bb      	ldrb	r3, [r7, #2]
 800c104:	2b15      	cmp	r3, #21
 800c106:	f040 8097 	bne.w	800c238 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c10a:	2201      	movs	r2, #1
 800c10c:	21ff      	movs	r1, #255	; 0xff
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f003 fbe0 	bl	800f8d4 <VL53L0X_WrByte>
 800c114:	4603      	mov	r3, r0
 800c116:	461a      	mov	r2, r3
 800c118:	7bfb      	ldrb	r3, [r7, #15]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c11e:	2200      	movs	r2, #0
 800c120:	2100      	movs	r1, #0
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f003 fbd6 	bl	800f8d4 <VL53L0X_WrByte>
 800c128:	4603      	mov	r3, r0
 800c12a:	461a      	mov	r2, r3
 800c12c:	7bfb      	ldrb	r3, [r7, #15]
 800c12e:	4313      	orrs	r3, r2
 800c130:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c132:	2200      	movs	r2, #0
 800c134:	21ff      	movs	r1, #255	; 0xff
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f003 fbcc 	bl	800f8d4 <VL53L0X_WrByte>
 800c13c:	4603      	mov	r3, r0
 800c13e:	461a      	mov	r2, r3
 800c140:	7bfb      	ldrb	r3, [r7, #15]
 800c142:	4313      	orrs	r3, r2
 800c144:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c146:	2201      	movs	r2, #1
 800c148:	2180      	movs	r1, #128	; 0x80
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f003 fbc2 	bl	800f8d4 <VL53L0X_WrByte>
 800c150:	4603      	mov	r3, r0
 800c152:	461a      	mov	r2, r3
 800c154:	7bfb      	ldrb	r3, [r7, #15]
 800c156:	4313      	orrs	r3, r2
 800c158:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800c15a:	2202      	movs	r2, #2
 800c15c:	2185      	movs	r1, #133	; 0x85
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f003 fbb8 	bl	800f8d4 <VL53L0X_WrByte>
 800c164:	4603      	mov	r3, r0
 800c166:	461a      	mov	r2, r3
 800c168:	7bfb      	ldrb	r3, [r7, #15]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800c16e:	2204      	movs	r2, #4
 800c170:	21ff      	movs	r1, #255	; 0xff
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f003 fbae 	bl	800f8d4 <VL53L0X_WrByte>
 800c178:	4603      	mov	r3, r0
 800c17a:	461a      	mov	r2, r3
 800c17c:	7bfb      	ldrb	r3, [r7, #15]
 800c17e:	4313      	orrs	r3, r2
 800c180:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800c182:	2200      	movs	r2, #0
 800c184:	21cd      	movs	r1, #205	; 0xcd
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f003 fba4 	bl	800f8d4 <VL53L0X_WrByte>
 800c18c:	4603      	mov	r3, r0
 800c18e:	461a      	mov	r2, r3
 800c190:	7bfb      	ldrb	r3, [r7, #15]
 800c192:	4313      	orrs	r3, r2
 800c194:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800c196:	2211      	movs	r2, #17
 800c198:	21cc      	movs	r1, #204	; 0xcc
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f003 fb9a 	bl	800f8d4 <VL53L0X_WrByte>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	7bfb      	ldrb	r3, [r7, #15]
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800c1aa:	2207      	movs	r2, #7
 800c1ac:	21ff      	movs	r1, #255	; 0xff
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f003 fb90 	bl	800f8d4 <VL53L0X_WrByte>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800c1be:	2200      	movs	r2, #0
 800c1c0:	21be      	movs	r1, #190	; 0xbe
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f003 fb86 	bl	800f8d4 <VL53L0X_WrByte>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	7bfb      	ldrb	r3, [r7, #15]
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800c1d2:	2206      	movs	r2, #6
 800c1d4:	21ff      	movs	r1, #255	; 0xff
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f003 fb7c 	bl	800f8d4 <VL53L0X_WrByte>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	461a      	mov	r2, r3
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800c1e6:	2209      	movs	r2, #9
 800c1e8:	21cc      	movs	r1, #204	; 0xcc
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f003 fb72 	bl	800f8d4 <VL53L0X_WrByte>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	7bfb      	ldrb	r3, [r7, #15]
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	21ff      	movs	r1, #255	; 0xff
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f003 fb68 	bl	800f8d4 <VL53L0X_WrByte>
 800c204:	4603      	mov	r3, r0
 800c206:	461a      	mov	r2, r3
 800c208:	7bfb      	ldrb	r3, [r7, #15]
 800c20a:	4313      	orrs	r3, r2
 800c20c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c20e:	2201      	movs	r2, #1
 800c210:	21ff      	movs	r1, #255	; 0xff
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f003 fb5e 	bl	800f8d4 <VL53L0X_WrByte>
 800c218:	4603      	mov	r3, r0
 800c21a:	461a      	mov	r2, r3
 800c21c:	7bfb      	ldrb	r3, [r7, #15]
 800c21e:	4313      	orrs	r3, r2
 800c220:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c222:	2200      	movs	r2, #0
 800c224:	2100      	movs	r1, #0
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f003 fb54 	bl	800f8d4 <VL53L0X_WrByte>
 800c22c:	4603      	mov	r3, r0
 800c22e:	461a      	mov	r2, r3
 800c230:	7bfb      	ldrb	r3, [r7, #15]
 800c232:	4313      	orrs	r3, r2
 800c234:	73fb      	strb	r3, [r7, #15]
 800c236:	e058      	b.n	800c2ea <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800c238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d121      	bne.n	800c284 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800c240:	787b      	ldrb	r3, [r7, #1]
 800c242:	2b04      	cmp	r3, #4
 800c244:	d81b      	bhi.n	800c27e <VL53L0X_SetGpioConfig+0x1ce>
 800c246:	a201      	add	r2, pc, #4	; (adr r2, 800c24c <VL53L0X_SetGpioConfig+0x19c>)
 800c248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c24c:	0800c261 	.word	0x0800c261
 800c250:	0800c267 	.word	0x0800c267
 800c254:	0800c26d 	.word	0x0800c26d
 800c258:	0800c273 	.word	0x0800c273
 800c25c:	0800c279 	.word	0x0800c279
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800c260:	2300      	movs	r3, #0
 800c262:	73bb      	strb	r3, [r7, #14]
				break;
 800c264:	e00f      	b.n	800c286 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800c266:	2301      	movs	r3, #1
 800c268:	73bb      	strb	r3, [r7, #14]
				break;
 800c26a:	e00c      	b.n	800c286 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800c26c:	2302      	movs	r3, #2
 800c26e:	73bb      	strb	r3, [r7, #14]
				break;
 800c270:	e009      	b.n	800c286 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800c272:	2303      	movs	r3, #3
 800c274:	73bb      	strb	r3, [r7, #14]
				break;
 800c276:	e006      	b.n	800c286 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800c278:	2304      	movs	r3, #4
 800c27a:	73bb      	strb	r3, [r7, #14]
				break;
 800c27c:	e003      	b.n	800c286 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800c27e:	23f5      	movs	r3, #245	; 0xf5
 800c280:	73fb      	strb	r3, [r7, #15]
 800c282:	e000      	b.n	800c286 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800c284:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800c286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d107      	bne.n	800c29e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800c28e:	7bbb      	ldrb	r3, [r7, #14]
 800c290:	461a      	mov	r2, r3
 800c292:	210a      	movs	r1, #10
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f003 fb1d 	bl	800f8d4 <VL53L0X_WrByte>
 800c29a:	4603      	mov	r3, r0
 800c29c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800c29e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10f      	bne.n	800c2c6 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c2a6:	7e3b      	ldrb	r3, [r7, #24]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d102      	bne.n	800c2b2 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	73bb      	strb	r3, [r7, #14]
 800c2b0:	e001      	b.n	800c2b6 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800c2b2:	2310      	movs	r3, #16
 800c2b4:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800c2b6:	7bbb      	ldrb	r3, [r7, #14]
 800c2b8:	22ef      	movs	r2, #239	; 0xef
 800c2ba:	2184      	movs	r1, #132	; 0x84
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f003 fb57 	bl	800f970 <VL53L0X_UpdateByte>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800c2c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d103      	bne.n	800c2d6 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	787a      	ldrb	r2, [r7, #1]
 800c2d2:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800c2d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d105      	bne.n	800c2ea <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c2de:	2100      	movs	r1, #0
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 f83f 	bl	800c364 <VL53L0X_ClearInterruptMask>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c2ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3710      	adds	r7, #16
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop

0800c2f8 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b086      	sub	sp, #24
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	607a      	str	r2, [r7, #4]
 800c302:	603b      	str	r3, [r7, #0]
 800c304:	460b      	mov	r3, r1
 800c306:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c308:	2300      	movs	r3, #0
 800c30a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800c30c:	f107 0314 	add.w	r3, r7, #20
 800c310:	461a      	mov	r2, r3
 800c312:	210e      	movs	r1, #14
 800c314:	68f8      	ldr	r0, [r7, #12]
 800c316:	f003 fb89 	bl	800fa2c <VL53L0X_RdWord>
 800c31a:	4603      	mov	r3, r0
 800c31c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c31e:	8abb      	ldrh	r3, [r7, #20]
 800c320:	045b      	lsls	r3, r3, #17
 800c322:	461a      	mov	r2, r3
 800c324:	4b0e      	ldr	r3, [pc, #56]	; (800c360 <VL53L0X_GetInterruptThresholds+0x68>)
 800c326:	4013      	ands	r3, r2
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800c32c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d10f      	bne.n	800c354 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800c334:	f107 0314 	add.w	r3, r7, #20
 800c338:	461a      	mov	r2, r3
 800c33a:	210c      	movs	r1, #12
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f003 fb75 	bl	800fa2c <VL53L0X_RdWord>
 800c342:	4603      	mov	r3, r0
 800c344:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c346:	8abb      	ldrh	r3, [r7, #20]
 800c348:	045b      	lsls	r3, r3, #17
 800c34a:	461a      	mov	r2, r3
 800c34c:	4b04      	ldr	r3, [pc, #16]	; (800c360 <VL53L0X_GetInterruptThresholds+0x68>)
 800c34e:	4013      	ands	r3, r2
		*pThresholdHigh =
 800c350:	683a      	ldr	r2, [r7, #0]
 800c352:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c354:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3718      	adds	r7, #24
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	1ffe0000 	.word	0x1ffe0000

0800c364 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c36e:	2300      	movs	r3, #0
 800c370:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800c372:	2300      	movs	r3, #0
 800c374:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800c376:	2201      	movs	r2, #1
 800c378:	210b      	movs	r1, #11
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f003 faaa 	bl	800f8d4 <VL53L0X_WrByte>
 800c380:	4603      	mov	r3, r0
 800c382:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800c384:	2200      	movs	r2, #0
 800c386:	210b      	movs	r1, #11
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f003 faa3 	bl	800f8d4 <VL53L0X_WrByte>
 800c38e:	4603      	mov	r3, r0
 800c390:	461a      	mov	r2, r3
 800c392:	7bfb      	ldrb	r3, [r7, #15]
 800c394:	4313      	orrs	r3, r2
 800c396:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800c398:	f107 030d 	add.w	r3, r7, #13
 800c39c:	461a      	mov	r2, r3
 800c39e:	2113      	movs	r1, #19
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f003 fb19 	bl	800f9d8 <VL53L0X_RdByte>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	7bfb      	ldrb	r3, [r7, #15]
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800c3b0:	7bbb      	ldrb	r3, [r7, #14]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800c3b6:	7b7b      	ldrb	r3, [r7, #13]
 800c3b8:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d006      	beq.n	800c3ce <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800c3c0:	7bbb      	ldrb	r3, [r7, #14]
 800c3c2:	2b02      	cmp	r3, #2
 800c3c4:	d803      	bhi.n	800c3ce <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800c3c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d0d3      	beq.n	800c376 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800c3ce:	7bbb      	ldrb	r3, [r7, #14]
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	d901      	bls.n	800c3d8 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800c3d4:	23f4      	movs	r3, #244	; 0xf4
 800c3d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800c3d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800c3f2:	f107 030e 	add.w	r3, r7, #14
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	2113      	movs	r1, #19
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f003 faec 	bl	800f9d8 <VL53L0X_RdByte>
 800c400:	4603      	mov	r3, r0
 800c402:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800c404:	7bbb      	ldrb	r3, [r7, #14]
 800c406:	f003 0207 	and.w	r2, r3, #7
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800c40e:	7bbb      	ldrb	r3, [r7, #14]
 800c410:	f003 0318 	and.w	r3, r3, #24
 800c414:	2b00      	cmp	r3, #0
 800c416:	d001      	beq.n	800c41c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800c418:	23fa      	movs	r3, #250	; 0xfa
 800c41a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800c41c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3710      	adds	r7, #16
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b086      	sub	sp, #24
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c434:	2300      	movs	r3, #0
 800c436:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	68b9      	ldr	r1, [r7, #8]
 800c43c:	68f8      	ldr	r0, [r7, #12]
 800c43e:	f000 fa33 	bl	800c8a8 <VL53L0X_perform_ref_spad_management>
 800c442:	4603      	mov	r3, r0
 800c444:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800c446:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3718      	adds	r7, #24
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800c452:	b580      	push	{r7, lr}
 800c454:	b084      	sub	sp, #16
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
 800c45a:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800c45c:	2101      	movs	r1, #1
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f7fe fed2 	bl	800b208 <VL53L0X_SetDeviceMode>
 800c464:	4603      	mov	r3, r0
 800c466:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800c468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d002      	beq.n	800c476 <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800c470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c474:	e019      	b.n	800c4aa <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f7ff fbc4 	bl	800bc04 <VL53L0X_StartMeasurement>
 800c47c:	4603      	mov	r3, r0
 800c47e:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800c480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800c488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c48c:	e00d      	b.n	800c4aa <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800c48e:	6839      	ldr	r1, [r7, #0]
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f7ff fcb9 	bl	800be08 <VL53L0X_GetRangingMeasurementData>
 800c496:	4603      	mov	r3, r0
 800c498:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800c49a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d002      	beq.n	800c4a8 <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800c4a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4a6:	e000      	b.n	800c4aa <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3710      	adds	r7, #16
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b084      	sub	sp, #16
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
 800c4ba:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800c4c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800c4c4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800c4c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4ca:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800c4cc:	f107 0308 	add.w	r3, r7, #8
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	2128      	movs	r1, #40	; 0x28
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f003 faa9 	bl	800fa2c <VL53L0X_RdWord>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800c4de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d11e      	bne.n	800c524 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800c4e6:	893b      	ldrh	r3, [r7, #8]
 800c4e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800c4f0:	893b      	ldrh	r3, [r7, #8]
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	dd0b      	ble.n	800c514 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800c4fc:	893a      	ldrh	r2, [r7, #8]
 800c4fe:	897b      	ldrh	r3, [r7, #10]
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	b29b      	uxth	r3, r3
 800c504:	b21b      	sxth	r3, r3
 800c506:	461a      	mov	r2, r3
					* 250;
 800c508:	23fa      	movs	r3, #250	; 0xfa
 800c50a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	601a      	str	r2, [r3, #0]
 800c512:	e007      	b.n	800c524 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800c514:	893b      	ldrh	r3, [r7, #8]
 800c516:	b21b      	sxth	r3, r3
 800c518:	461a      	mov	r2, r3
 800c51a:	23fa      	movs	r3, #250	; 0xfa
 800c51c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800c524:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3710      	adds	r7, #16
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800c530:	b480      	push	{r7}
 800c532:	b08b      	sub	sp, #44	; 0x2c
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
 800c53c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800c53e:	2308      	movs	r3, #8
 800c540:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	f04f 32ff 	mov.w	r2, #4294967295
 800c54c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	fbb2 f3f3 	udiv	r3, r2, r3
 800c556:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	69ba      	ldr	r2, [r7, #24]
 800c55c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c560:	69b9      	ldr	r1, [r7, #24]
 800c562:	fb01 f202 	mul.w	r2, r1, r2
 800c566:	1a9b      	subs	r3, r3, r2
 800c568:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	627b      	str	r3, [r7, #36]	; 0x24
 800c56e:	e030      	b.n	800c5d2 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800c570:	2300      	movs	r3, #0
 800c572:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c578:	4413      	add	r3, r2
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800c57e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	429a      	cmp	r2, r3
 800c584:	d11e      	bne.n	800c5c4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800c586:	7ffa      	ldrb	r2, [r7, #31]
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	fa42 f303 	asr.w	r3, r2, r3
 800c58e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800c594:	e016      	b.n	800c5c4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800c596:	7ffb      	ldrb	r3, [r7, #31]
 800c598:	f003 0301 	and.w	r3, r3, #1
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d00b      	beq.n	800c5b8 <get_next_good_spad+0x88>
				success = 1;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a6:	69ba      	ldr	r2, [r7, #24]
 800c5a8:	fb03 f202 	mul.w	r2, r3, r2
 800c5ac:	6a3b      	ldr	r3, [r7, #32]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	601a      	str	r2, [r3, #0]
				break;
 800c5b6:	e009      	b.n	800c5cc <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800c5b8:	7ffb      	ldrb	r3, [r7, #31]
 800c5ba:	085b      	lsrs	r3, r3, #1
 800c5bc:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800c5be:	6a3b      	ldr	r3, [r7, #32]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800c5c4:	6a3a      	ldr	r2, [r7, #32]
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d3e4      	bcc.n	800c596 <get_next_good_spad+0x66>
				coarseIndex++) {
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800c5d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d202      	bcs.n	800c5e0 <get_next_good_spad+0xb0>
 800c5da:	7fbb      	ldrb	r3, [r7, #30]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d0c7      	beq.n	800c570 <get_next_good_spad+0x40>
		}
	}
}
 800c5e0:	bf00      	nop
 800c5e2:	372c      	adds	r7, #44	; 0x2c
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b085      	sub	sp, #20
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	099b      	lsrs	r3, r3, #6
 800c5fc:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800c5fe:	4a07      	ldr	r2, [pc, #28]	; (800c61c <is_aperture+0x30>)
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d101      	bne.n	800c60e <is_aperture+0x22>
		isAperture = 0;
 800c60a:	2300      	movs	r3, #0
 800c60c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c610:	4618      	mov	r0, r3
 800c612:	3714      	adds	r7, #20
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr
 800c61c:	200002b8 	.word	0x200002b8

0800c620 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800c620:	b480      	push	{r7}
 800c622:	b089      	sub	sp, #36	; 0x24
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c62c:	2300      	movs	r3, #0
 800c62e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800c630:	2308      	movs	r3, #8
 800c632:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	69bb      	ldr	r3, [r7, #24]
 800c638:	fbb2 f3f3 	udiv	r3, r2, r3
 800c63c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	69ba      	ldr	r2, [r7, #24]
 800c642:	fbb3 f2f2 	udiv	r2, r3, r2
 800c646:	69b9      	ldr	r1, [r7, #24]
 800c648:	fb01 f202 	mul.w	r2, r1, r2
 800c64c:	1a9b      	subs	r3, r3, r2
 800c64e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800c650:	697a      	ldr	r2, [r7, #20]
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	429a      	cmp	r2, r3
 800c656:	d302      	bcc.n	800c65e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c658:	23ce      	movs	r3, #206	; 0xce
 800c65a:	77fb      	strb	r3, [r7, #31]
 800c65c:	e010      	b.n	800c680 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	4413      	add	r3, r2
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	b25a      	sxtb	r2, r3
 800c668:	2101      	movs	r1, #1
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	fa01 f303 	lsl.w	r3, r1, r3
 800c670:	b25b      	sxtb	r3, r3
 800c672:	4313      	orrs	r3, r2
 800c674:	b259      	sxtb	r1, r3
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	4413      	add	r3, r2
 800c67c:	b2ca      	uxtb	r2, r1
 800c67e:	701a      	strb	r2, [r3, #0]

	return status;
 800c680:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c684:	4618      	mov	r0, r3
 800c686:	3724      	adds	r7, #36	; 0x24
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800c69a:	2306      	movs	r3, #6
 800c69c:	683a      	ldr	r2, [r7, #0]
 800c69e:	21b0      	movs	r1, #176	; 0xb0
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f003 f8bb 	bl	800f81c <VL53L0X_WriteMulti>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800c6aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b084      	sub	sp, #16
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
 800c6be:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800c6c0:	2306      	movs	r3, #6
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	21b0      	movs	r1, #176	; 0xb0
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f003 f8d8 	bl	800f87c <VL53L0X_ReadMulti>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800c6d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b08c      	sub	sp, #48	; 0x30
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	607a      	str	r2, [r7, #4]
 800c6e6:	603b      	str	r3, [r7, #0]
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800c6f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6f4:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800c6f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6f8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6fe:	e02b      	b.n	800c758 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800c700:	f107 031c 	add.w	r3, r7, #28
 800c704:	6a3a      	ldr	r2, [r7, #32]
 800c706:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f7ff ff11 	bl	800c530 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800c70e:	69fb      	ldr	r3, [r7, #28]
 800c710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c714:	d103      	bne.n	800c71e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c716:	23ce      	movs	r3, #206	; 0xce
 800c718:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800c71c:	e020      	b.n	800c760 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	461a      	mov	r2, r3
 800c722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c724:	4413      	add	r3, r2
 800c726:	4618      	mov	r0, r3
 800c728:	f7ff ff60 	bl	800c5ec <is_aperture>
 800c72c:	4603      	mov	r3, r0
 800c72e:	461a      	mov	r2, r3
 800c730:	7afb      	ldrb	r3, [r7, #11]
 800c732:	4293      	cmp	r3, r2
 800c734:	d003      	beq.n	800c73e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c736:	23ce      	movs	r3, #206	; 0xce
 800c738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800c73c:	e010      	b.n	800c760 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800c73e:	69fb      	ldr	r3, [r7, #28]
 800c740:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800c742:	6a3a      	ldr	r2, [r7, #32]
 800c744:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c746:	6838      	ldr	r0, [r7, #0]
 800c748:	f7ff ff6a 	bl	800c620 <enable_spad_bit>
		currentSpad++;
 800c74c:	6a3b      	ldr	r3, [r7, #32]
 800c74e:	3301      	adds	r3, #1
 800c750:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800c752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c754:	3301      	adds	r3, #1
 800c756:	62bb      	str	r3, [r7, #40]	; 0x28
 800c758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c75a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d3cf      	bcc.n	800c700 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800c760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c762:	6a3a      	ldr	r2, [r7, #32]
 800c764:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800c766:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d106      	bne.n	800c77c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800c76e:	6839      	ldr	r1, [r7, #0]
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	f7ff ff8d 	bl	800c690 <set_ref_spad_map>
 800c776:	4603      	mov	r3, r0
 800c778:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800c77c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c780:	2b00      	cmp	r3, #0
 800c782:	d121      	bne.n	800c7c8 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800c784:	f107 0314 	add.w	r3, r7, #20
 800c788:	4619      	mov	r1, r3
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f7ff ff93 	bl	800c6b6 <get_ref_spad_map>
 800c790:	4603      	mov	r3, r0
 800c792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800c796:	2300      	movs	r3, #0
 800c798:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800c79a:	e011      	b.n	800c7c0 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800c79c:	683a      	ldr	r2, [r7, #0]
 800c79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a0:	4413      	add	r3, r2
 800c7a2:	781a      	ldrb	r2, [r3, #0]
 800c7a4:	f107 0114 	add.w	r1, r7, #20
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7aa:	440b      	add	r3, r1
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d003      	beq.n	800c7ba <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c7b2:	23ce      	movs	r3, #206	; 0xce
 800c7b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800c7b8:	e006      	b.n	800c7c8 <enable_ref_spads+0xec>
			}
			i++;
 800c7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7bc:	3301      	adds	r3, #1
 800c7be:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800c7c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d3e9      	bcc.n	800c79c <enable_ref_spads+0xc0>
		}
	}
	return status;
 800c7c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3730      	adds	r7, #48	; 0x30
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b08a      	sub	sp, #40	; 0x28
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c7f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800c7f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d107      	bne.n	800c80c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800c7fc:	22c0      	movs	r2, #192	; 0xc0
 800c7fe:	2101      	movs	r1, #1
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f003 f867 	bl	800f8d4 <VL53L0X_WrByte>
 800c806:	4603      	mov	r3, r0
 800c808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800c80c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c810:	2b00      	cmp	r3, #0
 800c812:	d108      	bne.n	800c826 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800c814:	f107 0308 	add.w	r3, r7, #8
 800c818:	4619      	mov	r1, r3
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7ff fc18 	bl	800c050 <VL53L0X_PerformSingleRangingMeasurement>
 800c820:	4603      	mov	r3, r0
 800c822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800c826:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d107      	bne.n	800c83e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c82e:	2201      	movs	r2, #1
 800c830:	21ff      	movs	r1, #255	; 0xff
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f003 f84e 	bl	800f8d4 <VL53L0X_WrByte>
 800c838:	4603      	mov	r3, r0
 800c83a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800c83e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c842:	2b00      	cmp	r3, #0
 800c844:	d107      	bne.n	800c856 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800c846:	683a      	ldr	r2, [r7, #0]
 800c848:	21b6      	movs	r1, #182	; 0xb6
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f003 f8ee 	bl	800fa2c <VL53L0X_RdWord>
 800c850:	4603      	mov	r3, r0
 800c852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800c856:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d107      	bne.n	800c86e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c85e:	2200      	movs	r2, #0
 800c860:	21ff      	movs	r1, #255	; 0xff
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f003 f836 	bl	800f8d4 <VL53L0X_WrByte>
 800c868:	4603      	mov	r3, r0
 800c86a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800c86e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c872:	2b00      	cmp	r3, #0
 800c874:	d112      	bne.n	800c89c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c876:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c87a:	461a      	mov	r2, r3
 800c87c:	2101      	movs	r1, #1
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f003 f828 	bl	800f8d4 <VL53L0X_WrByte>
 800c884:	4603      	mov	r3, r0
 800c886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800c88a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d104      	bne.n	800c89c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c898:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800c89c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3728      	adds	r7, #40	; 0x28
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800c8a8:	b590      	push	{r4, r7, lr}
 800c8aa:	b09d      	sub	sp, #116	; 0x74
 800c8ac:	af06      	add	r7, sp, #24
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800c8ba:	23b4      	movs	r3, #180	; 0xb4
 800c8bc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800c8c0:	2303      	movs	r3, #3
 800c8c2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800c8c4:	232c      	movs	r3, #44	; 0x2c
 800c8c6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800c8d4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800c8d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800c8e2:	2306      	movs	r3, #6
 800c8e4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800c900:	2300      	movs	r3, #0
 800c902:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800c90c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800c90e:	2300      	movs	r3, #0
 800c910:	64bb      	str	r3, [r7, #72]	; 0x48
 800c912:	e009      	b.n	800c928 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c918:	4413      	add	r3, r2
 800c91a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800c91e:	2200      	movs	r2, #0
 800c920:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800c922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c924:	3301      	adds	r3, #1
 800c926:	64bb      	str	r3, [r7, #72]	; 0x48
 800c928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d3f1      	bcc.n	800c914 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c930:	2201      	movs	r2, #1
 800c932:	21ff      	movs	r1, #255	; 0xff
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f002 ffcd 	bl	800f8d4 <VL53L0X_WrByte>
 800c93a:	4603      	mov	r3, r0
 800c93c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800c940:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c944:	2b00      	cmp	r3, #0
 800c946:	d107      	bne.n	800c958 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800c948:	2200      	movs	r2, #0
 800c94a:	214f      	movs	r1, #79	; 0x4f
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	f002 ffc1 	bl	800f8d4 <VL53L0X_WrByte>
 800c952:	4603      	mov	r3, r0
 800c954:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800c958:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d107      	bne.n	800c970 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800c960:	222c      	movs	r2, #44	; 0x2c
 800c962:	214e      	movs	r1, #78	; 0x4e
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f002 ffb5 	bl	800f8d4 <VL53L0X_WrByte>
 800c96a:	4603      	mov	r3, r0
 800c96c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800c970:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c974:	2b00      	cmp	r3, #0
 800c976:	d107      	bne.n	800c988 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c978:	2200      	movs	r2, #0
 800c97a:	21ff      	movs	r1, #255	; 0xff
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f002 ffa9 	bl	800f8d4 <VL53L0X_WrByte>
 800c982:	4603      	mov	r3, r0
 800c984:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800c988:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d109      	bne.n	800c9a4 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800c990:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800c994:	461a      	mov	r2, r3
 800c996:	21b6      	movs	r1, #182	; 0xb6
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f002 ff9b 	bl	800f8d4 <VL53L0X_WrByte>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800c9a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d107      	bne.n	800c9bc <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	2180      	movs	r1, #128	; 0x80
 800c9b0:	68f8      	ldr	r0, [r7, #12]
 800c9b2:	f002 ff8f 	bl	800f8d4 <VL53L0X_WrByte>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800c9bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d10a      	bne.n	800c9da <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800c9c4:	f107 0210 	add.w	r2, r7, #16
 800c9c8:	f107 0111 	add.w	r1, r7, #17
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	f000 fbbb 	bl	800d14a <VL53L0X_perform_ref_calibration>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800c9da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d121      	bne.n	800ca26 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800c9e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9e8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800c9ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9f0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800c9fe:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ca02:	f107 0218 	add.w	r2, r7, #24
 800ca06:	9204      	str	r2, [sp, #16]
 800ca08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca0a:	9203      	str	r2, [sp, #12]
 800ca0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca0e:	9202      	str	r2, [sp, #8]
 800ca10:	9301      	str	r3, [sp, #4]
 800ca12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	4623      	mov	r3, r4
 800ca18:	4602      	mov	r2, r0
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f7ff fe5e 	bl	800c6dc <enable_ref_spads>
 800ca20:	4603      	mov	r3, r0
 800ca22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ca26:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d174      	bne.n	800cb18 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800ca32:	f107 0312 	add.w	r3, r7, #18
 800ca36:	4619      	mov	r1, r3
 800ca38:	68f8      	ldr	r0, [r7, #12]
 800ca3a:	f7ff fecb 	bl	800c7d4 <perform_ref_signal_measurement>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800ca44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d161      	bne.n	800cb10 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800ca4c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800ca4e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d25d      	bcs.n	800cb10 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800ca54:	2300      	movs	r3, #0
 800ca56:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca58:	e009      	b.n	800ca6e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ca5a:	68fa      	ldr	r2, [r7, #12]
 800ca5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca5e:	4413      	add	r3, r2
 800ca60:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ca64:	2200      	movs	r2, #0
 800ca66:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800ca68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d3f1      	bcc.n	800ca5a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800ca76:	e002      	b.n	800ca7e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800ca78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800ca7e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800ca82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca84:	4413      	add	r3, r2
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7ff fdb0 	bl	800c5ec <is_aperture>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d103      	bne.n	800ca9a <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800ca92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d3ee      	bcc.n	800ca78 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800ca9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caa0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800caae:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800cab2:	f107 0218 	add.w	r2, r7, #24
 800cab6:	9204      	str	r2, [sp, #16]
 800cab8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800caba:	9203      	str	r2, [sp, #12]
 800cabc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cabe:	9202      	str	r2, [sp, #8]
 800cac0:	9301      	str	r3, [sp, #4]
 800cac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac4:	9300      	str	r3, [sp, #0]
 800cac6:	4623      	mov	r3, r4
 800cac8:	4602      	mov	r2, r0
 800caca:	68f8      	ldr	r0, [r7, #12]
 800cacc:	f7ff fe06 	bl	800c6dc <enable_ref_spads>
 800cad0:	4603      	mov	r3, r0
 800cad2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800cad6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d11b      	bne.n	800cb16 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800cae2:	f107 0312 	add.w	r3, r7, #18
 800cae6:	4619      	mov	r1, r3
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	f7ff fe73 	bl	800c7d4 <perform_ref_signal_measurement>
 800caee:	4603      	mov	r3, r0
 800caf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800caf4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d10c      	bne.n	800cb16 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800cafc:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800cafe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d208      	bcs.n	800cb16 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800cb04:	2301      	movs	r3, #1
 800cb06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800cb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800cb0e:	e002      	b.n	800cb16 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800cb10:	2300      	movs	r3, #0
 800cb12:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb14:	e000      	b.n	800cb18 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800cb16:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800cb18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f040 80af 	bne.w	800cc80 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800cb22:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800cb24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb26:	429a      	cmp	r2, r3
 800cb28:	f240 80aa 	bls.w	800cc80 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800cb2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800cb32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb34:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800cb3c:	f107 031c 	add.w	r3, r7, #28
 800cb40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb42:	4618      	mov	r0, r3
 800cb44:	f003 f820 	bl	800fb88 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800cb48:	8a7b      	ldrh	r3, [r7, #18]
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb4e:	1ad3      	subs	r3, r2, r3
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	bfb8      	it	lt
 800cb54:	425b      	neglt	r3, r3
 800cb56:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800cb5e:	e086      	b.n	800cc6e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800cb66:	f107 0314 	add.w	r3, r7, #20
 800cb6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb6e:	f7ff fcdf 	bl	800c530 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb78:	d103      	bne.n	800cb82 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cb7a:	23ce      	movs	r3, #206	; 0xce
 800cb7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800cb80:	e07e      	b.n	800cc80 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800cb82:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800cb86:	697a      	ldr	r2, [r7, #20]
 800cb88:	4413      	add	r3, r2
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7ff fd2e 	bl	800c5ec <is_aperture>
 800cb90:	4603      	mov	r3, r0
 800cb92:	461a      	mov	r2, r3
 800cb94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d003      	beq.n	800cba2 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800cba0:	e06e      	b.n	800cc80 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800cba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cba4:	3301      	adds	r3, #1
 800cba6:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800cbb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cbb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7ff fd32 	bl	800c620 <enable_spad_bit>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800cbc2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10c      	bne.n	800cbe4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800cbca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbcc:	3301      	adds	r3, #1
 800cbce:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	f7ff fd59 	bl	800c690 <set_ref_spad_map>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800cbe4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d146      	bne.n	800cc7a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800cbec:	f107 0312 	add.w	r3, r7, #18
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f7ff fdee 	bl	800c7d4 <perform_ref_signal_measurement>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800cbfe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d13b      	bne.n	800cc7e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800cc06:	8a7b      	ldrh	r3, [r7, #18]
 800cc08:	461a      	mov	r2, r3
 800cc0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cc0c:	1ad3      	subs	r3, r2, r3
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	bfb8      	it	lt
 800cc12:	425b      	neglt	r3, r3
 800cc14:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800cc16:	8a7b      	ldrh	r3, [r7, #18]
 800cc18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d21c      	bcs.n	800cc58 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800cc1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d914      	bls.n	800cc50 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800cc26:	f107 031c 	add.w	r3, r7, #28
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f7ff fd2f 	bl	800c690 <set_ref_spad_map>
 800cc32:	4603      	mov	r3, r0
 800cc34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800cc3e:	f107 011c 	add.w	r1, r7, #28
 800cc42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc44:	4618      	mov	r0, r3
 800cc46:	f002 ff9f 	bl	800fb88 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800cc4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc4c:	3b01      	subs	r3, #1
 800cc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800cc50:	2301      	movs	r3, #1
 800cc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc56:	e00a      	b.n	800cc6e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800cc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800cc62:	f107 031c 	add.w	r3, r7, #28
 800cc66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f002 ff8d 	bl	800fb88 <memcpy>
		while (!complete) {
 800cc6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	f43f af74 	beq.w	800cb60 <VL53L0X_perform_ref_spad_management+0x2b8>
 800cc78:	e002      	b.n	800cc80 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800cc7a:	bf00      	nop
 800cc7c:	e000      	b.n	800cc80 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800cc7e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cc80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d115      	bne.n	800ccb4 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc8c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800cc94:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2201      	movs	r2, #1
 800cc9a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	b2da      	uxtb	r2, r3
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	781a      	ldrb	r2, [r3, #0]
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800ccb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	375c      	adds	r7, #92	; 0x5c
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd90      	pop	{r4, r7, pc}

0800ccc0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800ccc0:	b590      	push	{r4, r7, lr}
 800ccc2:	b093      	sub	sp, #76	; 0x4c
 800ccc4:	af06      	add	r7, sp, #24
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	4613      	mov	r3, r2
 800cccc:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800ccd8:	23b4      	movs	r3, #180	; 0xb4
 800ccda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800ccde:	2306      	movs	r3, #6
 800cce0:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800cce2:	232c      	movs	r3, #44	; 0x2c
 800cce4:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cce6:	2201      	movs	r2, #1
 800cce8:	21ff      	movs	r1, #255	; 0xff
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f002 fdf2 	bl	800f8d4 <VL53L0X_WrByte>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800ccf6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d107      	bne.n	800cd0e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800ccfe:	2200      	movs	r2, #0
 800cd00:	214f      	movs	r1, #79	; 0x4f
 800cd02:	68f8      	ldr	r0, [r7, #12]
 800cd04:	f002 fde6 	bl	800f8d4 <VL53L0X_WrByte>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800cd0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d107      	bne.n	800cd26 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800cd16:	222c      	movs	r2, #44	; 0x2c
 800cd18:	214e      	movs	r1, #78	; 0x4e
 800cd1a:	68f8      	ldr	r0, [r7, #12]
 800cd1c:	f002 fdda 	bl	800f8d4 <VL53L0X_WrByte>
 800cd20:	4603      	mov	r3, r0
 800cd22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800cd26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d107      	bne.n	800cd3e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cd2e:	2200      	movs	r2, #0
 800cd30:	21ff      	movs	r1, #255	; 0xff
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f002 fdce 	bl	800f8d4 <VL53L0X_WrByte>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800cd3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d109      	bne.n	800cd5a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800cd46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	21b6      	movs	r1, #182	; 0xb6
 800cd4e:	68f8      	ldr	r0, [r7, #12]
 800cd50:	f002 fdc0 	bl	800f8d4 <VL53L0X_WrByte>
 800cd54:	4603      	mov	r3, r0
 800cd56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	627b      	str	r3, [r7, #36]	; 0x24
 800cd5e:	e009      	b.n	800cd74 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800cd60:	68fa      	ldr	r2, [r7, #12]
 800cd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd64:	4413      	add	r3, r2
 800cd66:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800cd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd70:	3301      	adds	r3, #1
 800cd72:	627b      	str	r3, [r7, #36]	; 0x24
 800cd74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd76:	69fb      	ldr	r3, [r7, #28]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d3f1      	bcc.n	800cd60 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800cd7c:	79fb      	ldrb	r3, [r7, #7]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d011      	beq.n	800cda6 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800cd82:	e002      	b.n	800cd8a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800cd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd86:	3301      	adds	r3, #1
 800cd88:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800cd8a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800cd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd90:	4413      	add	r3, r2
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7ff fc2a 	bl	800c5ec <is_aperture>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d103      	bne.n	800cda6 <VL53L0X_set_reference_spads+0xe6>
 800cd9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d3ee      	bcc.n	800cd84 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800cdb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cdb6:	79f9      	ldrb	r1, [r7, #7]
 800cdb8:	f107 0214 	add.w	r2, r7, #20
 800cdbc:	9204      	str	r2, [sp, #16]
 800cdbe:	68ba      	ldr	r2, [r7, #8]
 800cdc0:	9203      	str	r2, [sp, #12]
 800cdc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdc4:	9202      	str	r2, [sp, #8]
 800cdc6:	9301      	str	r3, [sp, #4]
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	9300      	str	r3, [sp, #0]
 800cdcc:	4623      	mov	r3, r4
 800cdce:	4602      	mov	r2, r0
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f7ff fc83 	bl	800c6dc <enable_ref_spads>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800cddc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d10c      	bne.n	800cdfe <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	b2da      	uxtb	r2, r3
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	79fa      	ldrb	r2, [r7, #7]
 800cdfa:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800cdfe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3734      	adds	r7, #52	; 0x34
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd90      	pop	{r4, r7, pc}

0800ce0a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800ce0a:	b580      	push	{r7, lr}
 800ce0c:	b084      	sub	sp, #16
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	6078      	str	r0, [r7, #4]
 800ce12:	460b      	mov	r3, r1
 800ce14:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce16:	2300      	movs	r3, #0
 800ce18:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800ce1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d10a      	bne.n	800ce38 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800ce22:	78fb      	ldrb	r3, [r7, #3]
 800ce24:	f043 0301 	orr.w	r3, r3, #1
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f002 fd50 	bl	800f8d4 <VL53L0X_WrByte>
 800ce34:	4603      	mov	r3, r0
 800ce36:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800ce38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d104      	bne.n	800ce4a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 f9bf 	bl	800d1c4 <VL53L0X_measurement_poll_for_completion>
 800ce46:	4603      	mov	r3, r0
 800ce48:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800ce4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d105      	bne.n	800ce5e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800ce52:	2100      	movs	r1, #0
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7ff fa85 	bl	800c364 <VL53L0X_ClearInterruptMask>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800ce5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d106      	bne.n	800ce74 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800ce66:	2200      	movs	r2, #0
 800ce68:	2100      	movs	r1, #0
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f002 fd32 	bl	800f8d4 <VL53L0X_WrByte>
 800ce70:	4603      	mov	r3, r0
 800ce72:	73fb      	strb	r3, [r7, #15]

	return Status;
 800ce74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	4608      	mov	r0, r1
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	4603      	mov	r3, r0
 800ce90:	70fb      	strb	r3, [r7, #3]
 800ce92:	460b      	mov	r3, r1
 800ce94:	70bb      	strb	r3, [r7, #2]
 800ce96:	4613      	mov	r3, r2
 800ce98:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cea2:	2201      	movs	r2, #1
 800cea4:	21ff      	movs	r1, #255	; 0xff
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f002 fd14 	bl	800f8d4 <VL53L0X_WrByte>
 800ceac:	4603      	mov	r3, r0
 800ceae:	461a      	mov	r2, r3
 800ceb0:	7bfb      	ldrb	r3, [r7, #15]
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	2100      	movs	r1, #0
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f002 fd0a 	bl	800f8d4 <VL53L0X_WrByte>
 800cec0:	4603      	mov	r3, r0
 800cec2:	461a      	mov	r2, r3
 800cec4:	7bfb      	ldrb	r3, [r7, #15]
 800cec6:	4313      	orrs	r3, r2
 800cec8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ceca:	2200      	movs	r2, #0
 800cecc:	21ff      	movs	r1, #255	; 0xff
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f002 fd00 	bl	800f8d4 <VL53L0X_WrByte>
 800ced4:	4603      	mov	r3, r0
 800ced6:	461a      	mov	r2, r3
 800ced8:	7bfb      	ldrb	r3, [r7, #15]
 800ceda:	4313      	orrs	r3, r2
 800cedc:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800cede:	78fb      	ldrb	r3, [r7, #3]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d01e      	beq.n	800cf22 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800cee4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d009      	beq.n	800cf00 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800ceec:	69ba      	ldr	r2, [r7, #24]
 800ceee:	21cb      	movs	r1, #203	; 0xcb
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f002 fd71 	bl	800f9d8 <VL53L0X_RdByte>
 800cef6:	4603      	mov	r3, r0
 800cef8:	461a      	mov	r2, r3
 800cefa:	7bfb      	ldrb	r3, [r7, #15]
 800cefc:	4313      	orrs	r3, r2
 800cefe:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800cf00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d02a      	beq.n	800cf5e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800cf08:	f107 030e 	add.w	r3, r7, #14
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	21ee      	movs	r1, #238	; 0xee
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f002 fd61 	bl	800f9d8 <VL53L0X_RdByte>
 800cf16:	4603      	mov	r3, r0
 800cf18:	461a      	mov	r2, r3
 800cf1a:	7bfb      	ldrb	r3, [r7, #15]
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	73fb      	strb	r3, [r7, #15]
 800cf20:	e01d      	b.n	800cf5e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800cf22:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00a      	beq.n	800cf40 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800cf2a:	78bb      	ldrb	r3, [r7, #2]
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	21cb      	movs	r1, #203	; 0xcb
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f002 fccf 	bl	800f8d4 <VL53L0X_WrByte>
 800cf36:	4603      	mov	r3, r0
 800cf38:	461a      	mov	r2, r3
 800cf3a:	7bfb      	ldrb	r3, [r7, #15]
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800cf40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00a      	beq.n	800cf5e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800cf48:	787b      	ldrb	r3, [r7, #1]
 800cf4a:	2280      	movs	r2, #128	; 0x80
 800cf4c:	21ee      	movs	r1, #238	; 0xee
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f002 fd0e 	bl	800f970 <VL53L0X_UpdateByte>
 800cf54:	4603      	mov	r3, r0
 800cf56:	461a      	mov	r2, r3
 800cf58:	7bfb      	ldrb	r3, [r7, #15]
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cf5e:	2201      	movs	r2, #1
 800cf60:	21ff      	movs	r1, #255	; 0xff
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f002 fcb6 	bl	800f8d4 <VL53L0X_WrByte>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800cf72:	2201      	movs	r2, #1
 800cf74:	2100      	movs	r1, #0
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f002 fcac 	bl	800f8d4 <VL53L0X_WrByte>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	461a      	mov	r2, r3
 800cf80:	7bfb      	ldrb	r3, [r7, #15]
 800cf82:	4313      	orrs	r3, r2
 800cf84:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cf86:	2200      	movs	r2, #0
 800cf88:	21ff      	movs	r1, #255	; 0xff
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f002 fca2 	bl	800f8d4 <VL53L0X_WrByte>
 800cf90:	4603      	mov	r3, r0
 800cf92:	461a      	mov	r2, r3
 800cf94:	7bfb      	ldrb	r3, [r7, #15]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800cf9a:	7bbb      	ldrb	r3, [r7, #14]
 800cf9c:	f023 0310 	bic.w	r3, r3, #16
 800cfa0:	b2da      	uxtb	r2, r3
 800cfa2:	69fb      	ldr	r3, [r7, #28]
 800cfa4:	701a      	strb	r2, [r3, #0]

	return Status;
 800cfa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b08a      	sub	sp, #40	; 0x28
 800cfb6:	af04      	add	r7, sp, #16
 800cfb8:	60f8      	str	r0, [r7, #12]
 800cfba:	60b9      	str	r1, [r7, #8]
 800cfbc:	4611      	mov	r1, r2
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	71fb      	strb	r3, [r7, #7]
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800cfdc:	79bb      	ldrb	r3, [r7, #6]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d003      	beq.n	800cfea <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800cfe8:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800cfea:	2201      	movs	r2, #1
 800cfec:	2101      	movs	r1, #1
 800cfee:	68f8      	ldr	r0, [r7, #12]
 800cff0:	f002 fc70 	bl	800f8d4 <VL53L0X_WrByte>
 800cff4:	4603      	mov	r3, r0
 800cff6:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800cff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d105      	bne.n	800d00c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800d000:	2140      	movs	r1, #64	; 0x40
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	f7ff ff01 	bl	800ce0a <VL53L0X_perform_single_ref_calibration>
 800d008:	4603      	mov	r3, r0
 800d00a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d00c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d115      	bne.n	800d040 <VL53L0X_perform_vhv_calibration+0x8e>
 800d014:	79fb      	ldrb	r3, [r7, #7]
 800d016:	2b01      	cmp	r3, #1
 800d018:	d112      	bne.n	800d040 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d01a:	7d39      	ldrb	r1, [r7, #20]
 800d01c:	7d7a      	ldrb	r2, [r7, #21]
 800d01e:	2300      	movs	r3, #0
 800d020:	9303      	str	r3, [sp, #12]
 800d022:	2301      	movs	r3, #1
 800d024:	9302      	str	r3, [sp, #8]
 800d026:	f107 0313 	add.w	r3, r7, #19
 800d02a:	9301      	str	r3, [sp, #4]
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	460b      	mov	r3, r1
 800d032:	2101      	movs	r1, #1
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f7ff ff23 	bl	800ce80 <VL53L0X_ref_calibration_io>
 800d03a:	4603      	mov	r3, r0
 800d03c:	75fb      	strb	r3, [r7, #23]
 800d03e:	e002      	b.n	800d046 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	2200      	movs	r2, #0
 800d044:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d046:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d112      	bne.n	800d074 <VL53L0X_perform_vhv_calibration+0xc2>
 800d04e:	79bb      	ldrb	r3, [r7, #6]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d00f      	beq.n	800d074 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d054:	7dbb      	ldrb	r3, [r7, #22]
 800d056:	461a      	mov	r2, r3
 800d058:	2101      	movs	r1, #1
 800d05a:	68f8      	ldr	r0, [r7, #12]
 800d05c:	f002 fc3a 	bl	800f8d4 <VL53L0X_WrByte>
 800d060:	4603      	mov	r3, r0
 800d062:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d064:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d103      	bne.n	800d074 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	7dba      	ldrb	r2, [r7, #22]
 800d070:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d074:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3718      	adds	r7, #24
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b08a      	sub	sp, #40	; 0x28
 800d084:	af04      	add	r7, sp, #16
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	4611      	mov	r1, r2
 800d08c:	461a      	mov	r2, r3
 800d08e:	460b      	mov	r3, r1
 800d090:	71fb      	strb	r3, [r7, #7]
 800d092:	4613      	mov	r3, r2
 800d094:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d096:	2300      	movs	r3, #0
 800d098:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d09a:	2300      	movs	r3, #0
 800d09c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d0a6:	79bb      	ldrb	r3, [r7, #6]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d003      	beq.n	800d0b4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d0b2:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800d0b4:	2202      	movs	r2, #2
 800d0b6:	2101      	movs	r1, #1
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f002 fc0b 	bl	800f8d4 <VL53L0X_WrByte>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800d0c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d105      	bne.n	800d0d6 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800d0ca:	2100      	movs	r1, #0
 800d0cc:	68f8      	ldr	r0, [r7, #12]
 800d0ce:	f7ff fe9c 	bl	800ce0a <VL53L0X_perform_single_ref_calibration>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d0d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d115      	bne.n	800d10a <VL53L0X_perform_phase_calibration+0x8a>
 800d0de:	79fb      	ldrb	r3, [r7, #7]
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d112      	bne.n	800d10a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d0e4:	7d39      	ldrb	r1, [r7, #20]
 800d0e6:	7d7a      	ldrb	r2, [r7, #21]
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	9303      	str	r3, [sp, #12]
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	9302      	str	r3, [sp, #8]
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	9301      	str	r3, [sp, #4]
 800d0f4:	f107 0313 	add.w	r3, r7, #19
 800d0f8:	9300      	str	r3, [sp, #0]
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	2101      	movs	r1, #1
 800d0fe:	68f8      	ldr	r0, [r7, #12]
 800d100:	f7ff febe 	bl	800ce80 <VL53L0X_ref_calibration_io>
 800d104:	4603      	mov	r3, r0
 800d106:	75fb      	strb	r3, [r7, #23]
 800d108:	e002      	b.n	800d110 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	2200      	movs	r2, #0
 800d10e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d110:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d112      	bne.n	800d13e <VL53L0X_perform_phase_calibration+0xbe>
 800d118:	79bb      	ldrb	r3, [r7, #6]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d00f      	beq.n	800d13e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d11e:	7dbb      	ldrb	r3, [r7, #22]
 800d120:	461a      	mov	r2, r3
 800d122:	2101      	movs	r1, #1
 800d124:	68f8      	ldr	r0, [r7, #12]
 800d126:	f002 fbd5 	bl	800f8d4 <VL53L0X_WrByte>
 800d12a:	4603      	mov	r3, r0
 800d12c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d12e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d103      	bne.n	800d13e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	7dba      	ldrb	r2, [r7, #22]
 800d13a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d13e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d142:	4618      	mov	r0, r3
 800d144:	3718      	adds	r7, #24
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800d14a:	b580      	push	{r7, lr}
 800d14c:	b086      	sub	sp, #24
 800d14e:	af00      	add	r7, sp, #0
 800d150:	60f8      	str	r0, [r7, #12]
 800d152:	60b9      	str	r1, [r7, #8]
 800d154:	607a      	str	r2, [r7, #4]
 800d156:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d158:	2300      	movs	r3, #0
 800d15a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d15c:	2300      	movs	r3, #0
 800d15e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d166:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800d168:	78fa      	ldrb	r2, [r7, #3]
 800d16a:	2300      	movs	r3, #0
 800d16c:	68b9      	ldr	r1, [r7, #8]
 800d16e:	68f8      	ldr	r0, [r7, #12]
 800d170:	f7ff ff1f 	bl	800cfb2 <VL53L0X_perform_vhv_calibration>
 800d174:	4603      	mov	r3, r0
 800d176:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800d178:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d107      	bne.n	800d190 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800d180:	78fa      	ldrb	r2, [r7, #3]
 800d182:	2300      	movs	r3, #0
 800d184:	6879      	ldr	r1, [r7, #4]
 800d186:	68f8      	ldr	r0, [r7, #12]
 800d188:	f7ff ff7a 	bl	800d080 <VL53L0X_perform_phase_calibration>
 800d18c:	4603      	mov	r3, r0
 800d18e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800d190:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d10f      	bne.n	800d1b8 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d198:	7dbb      	ldrb	r3, [r7, #22]
 800d19a:	461a      	mov	r2, r3
 800d19c:	2101      	movs	r1, #1
 800d19e:	68f8      	ldr	r0, [r7, #12]
 800d1a0:	f002 fb98 	bl	800f8d4 <VL53L0X_WrByte>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d1a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d103      	bne.n	800d1b8 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	7dba      	ldrb	r2, [r7, #22]
 800d1b4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d1b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3718      	adds	r7, #24
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b086      	sub	sp, #24
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800d1d8:	f107 030f 	add.w	r3, r7, #15
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f7fe fdd2 	bl	800bd88 <VL53L0X_GetMeasurementDataReady>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800d1e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d110      	bne.n	800d212 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800d1f0:	7bfb      	ldrb	r3, [r7, #15]
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d00f      	beq.n	800d216 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d202:	d302      	bcc.n	800d20a <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800d204:	23f9      	movs	r3, #249	; 0xf9
 800d206:	75fb      	strb	r3, [r7, #23]
			break;
 800d208:	e006      	b.n	800d218 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f002 fc82 	bl	800fb14 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800d210:	e7e2      	b.n	800d1d8 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800d212:	bf00      	nop
 800d214:	e000      	b.n	800d218 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800d216:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800d218:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3718      	adds	r7, #24
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
 800d22a:	4603      	mov	r3, r0
 800d22c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800d22e:	2300      	movs	r3, #0
 800d230:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800d232:	79fb      	ldrb	r3, [r7, #7]
 800d234:	3301      	adds	r3, #1
 800d236:	b2db      	uxtb	r3, r3
 800d238:	005b      	lsls	r3, r3, #1
 800d23a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800d23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3714      	adds	r7, #20
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr

0800d24a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800d24a:	b480      	push	{r7}
 800d24c:	b085      	sub	sp, #20
 800d24e:	af00      	add	r7, sp, #0
 800d250:	4603      	mov	r3, r0
 800d252:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800d254:	2300      	movs	r3, #0
 800d256:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800d258:	79fb      	ldrb	r3, [r7, #7]
 800d25a:	085b      	lsrs	r3, r3, #1
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	3b01      	subs	r3, #1
 800d260:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800d262:	7bfb      	ldrb	r3, [r7, #15]
}
 800d264:	4618      	mov	r0, r3
 800d266:	3714      	adds	r7, #20
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr

0800d270 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800d270:	b480      	push	{r7}
 800d272:	b085      	sub	sp, #20
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800d278:	2300      	movs	r3, #0
 800d27a:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800d27c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d280:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800d282:	e002      	b.n	800d28a <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	089b      	lsrs	r3, r3, #2
 800d288:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800d28a:	68ba      	ldr	r2, [r7, #8]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d8f8      	bhi.n	800d284 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800d292:	e017      	b.n	800d2c4 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	4413      	add	r3, r2
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d30b      	bcc.n	800d2b8 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800d2a0:	68fa      	ldr	r2, [r7, #12]
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	1ad3      	subs	r3, r2, r3
 800d2aa:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	085b      	lsrs	r3, r3, #1
 800d2b0:	68ba      	ldr	r2, [r7, #8]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	60fb      	str	r3, [r7, #12]
 800d2b6:	e002      	b.n	800d2be <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	085b      	lsrs	r3, r3, #1
 800d2bc:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	089b      	lsrs	r3, r3, #2
 800d2c2:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d1e4      	bne.n	800d294 <VL53L0X_isqrt+0x24>
	}

	return res;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3714      	adds	r7, #20
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b086      	sub	sp, #24
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	2183      	movs	r1, #131	; 0x83
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f002 faf3 	bl	800f8d4 <VL53L0X_WrByte>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	461a      	mov	r2, r3
 800d2f2:	7dfb      	ldrb	r3, [r7, #23]
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800d2f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d11e      	bne.n	800d33e <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800d300:	2300      	movs	r3, #0
 800d302:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800d304:	f107 030f 	add.w	r3, r7, #15
 800d308:	461a      	mov	r2, r3
 800d30a:	2183      	movs	r1, #131	; 0x83
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f002 fb63 	bl	800f9d8 <VL53L0X_RdByte>
 800d312:	4603      	mov	r3, r0
 800d314:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800d316:	7bfb      	ldrb	r3, [r7, #15]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d10a      	bne.n	800d332 <VL53L0X_device_read_strobe+0x5a>
 800d31c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d106      	bne.n	800d332 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	3301      	adds	r3, #1
 800d328:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d330:	d3e8      	bcc.n	800d304 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d338:	d301      	bcc.n	800d33e <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800d33a:	23f9      	movs	r3, #249	; 0xf9
 800d33c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800d33e:	2201      	movs	r2, #1
 800d340:	2183      	movs	r1, #131	; 0x83
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f002 fac6 	bl	800f8d4 <VL53L0X_WrByte>
 800d348:	4603      	mov	r3, r0
 800d34a:	461a      	mov	r2, r3
 800d34c:	7dfb      	ldrb	r3, [r7, #23]
 800d34e:	4313      	orrs	r3, r2
 800d350:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800d352:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800d356:	4618      	mov	r0, r3
 800d358:	3718      	adds	r7, #24
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b098      	sub	sp, #96	; 0x60
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
 800d366:	460b      	mov	r3, r1
 800d368:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d36a:	2300      	movs	r3, #0
 800d36c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800d370:	2300      	movs	r3, #0
 800d372:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800d376:	2300      	movs	r3, #0
 800d378:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800d37c:	2300      	movs	r3, #0
 800d37e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800d380:	2300      	movs	r3, #0
 800d382:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800d384:	2300      	movs	r3, #0
 800d386:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800d388:	2300      	movs	r3, #0
 800d38a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800d38e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800d392:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800d394:	2300      	movs	r3, #0
 800d396:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800d398:	2300      	movs	r3, #0
 800d39a:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800d39c:	2300      	movs	r3, #0
 800d39e:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800d3a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800d3aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d3ae:	2b07      	cmp	r3, #7
 800d3b0:	f000 8408 	beq.w	800dbc4 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	2180      	movs	r1, #128	; 0x80
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f002 fa8b 	bl	800f8d4 <VL53L0X_WrByte>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	21ff      	movs	r1, #255	; 0xff
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f002 fa7f 	bl	800f8d4 <VL53L0X_WrByte>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	461a      	mov	r2, r3
 800d3da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f002 fa73 	bl	800f8d4 <VL53L0X_WrByte>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800d3fc:	2206      	movs	r2, #6
 800d3fe:	21ff      	movs	r1, #255	; 0xff
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f002 fa67 	bl	800f8d4 <VL53L0X_WrByte>
 800d406:	4603      	mov	r3, r0
 800d408:	461a      	mov	r2, r3
 800d40a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d40e:	4313      	orrs	r3, r2
 800d410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800d414:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800d418:	461a      	mov	r2, r3
 800d41a:	2183      	movs	r1, #131	; 0x83
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f002 fadb 	bl	800f9d8 <VL53L0X_RdByte>
 800d422:	4603      	mov	r3, r0
 800d424:	461a      	mov	r2, r3
 800d426:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d42a:	4313      	orrs	r3, r2
 800d42c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800d430:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d434:	f043 0304 	orr.w	r3, r3, #4
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	461a      	mov	r2, r3
 800d43c:	2183      	movs	r1, #131	; 0x83
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f002 fa48 	bl	800f8d4 <VL53L0X_WrByte>
 800d444:	4603      	mov	r3, r0
 800d446:	461a      	mov	r2, r3
 800d448:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d44c:	4313      	orrs	r3, r2
 800d44e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800d452:	2207      	movs	r2, #7
 800d454:	21ff      	movs	r1, #255	; 0xff
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f002 fa3c 	bl	800f8d4 <VL53L0X_WrByte>
 800d45c:	4603      	mov	r3, r0
 800d45e:	461a      	mov	r2, r3
 800d460:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d464:	4313      	orrs	r3, r2
 800d466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800d46a:	2201      	movs	r2, #1
 800d46c:	2181      	movs	r1, #129	; 0x81
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f002 fa30 	bl	800f8d4 <VL53L0X_WrByte>
 800d474:	4603      	mov	r3, r0
 800d476:	461a      	mov	r2, r3
 800d478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d47c:	4313      	orrs	r3, r2
 800d47e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f002 fb46 	bl	800fb14 <VL53L0X_PollingDelay>
 800d488:	4603      	mov	r3, r0
 800d48a:	461a      	mov	r2, r3
 800d48c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d490:	4313      	orrs	r3, r2
 800d492:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800d496:	2201      	movs	r2, #1
 800d498:	2180      	movs	r1, #128	; 0x80
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f002 fa1a 	bl	800f8d4 <VL53L0X_WrByte>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800d4ae:	78fb      	ldrb	r3, [r7, #3]
 800d4b0:	f003 0301 	and.w	r3, r3, #1
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	f000 8098 	beq.w	800d5ea <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800d4ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d4be:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	f040 8091 	bne.w	800d5ea <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800d4c8:	226b      	movs	r2, #107	; 0x6b
 800d4ca:	2194      	movs	r1, #148	; 0x94
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f002 fa01 	bl	800f8d4 <VL53L0X_WrByte>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f7ff fef9 	bl	800d2d8 <VL53L0X_device_read_strobe>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d4f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	2190      	movs	r1, #144	; 0x90
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f002 facd 	bl	800fa9c <VL53L0X_RdDWord>
 800d502:	4603      	mov	r3, r0
 800d504:	461a      	mov	r2, r3
 800d506:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d50a:	4313      	orrs	r3, r2
 800d50c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800d510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d512:	0a1b      	lsrs	r3, r3, #8
 800d514:	b2db      	uxtb	r3, r3
 800d516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d51a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800d51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d520:	0bdb      	lsrs	r3, r3, #15
 800d522:	b2db      	uxtb	r3, r3
 800d524:	f003 0301 	and.w	r3, r3, #1
 800d528:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800d52c:	2224      	movs	r2, #36	; 0x24
 800d52e:	2194      	movs	r1, #148	; 0x94
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f002 f9cf 	bl	800f8d4 <VL53L0X_WrByte>
 800d536:	4603      	mov	r3, r0
 800d538:	461a      	mov	r2, r3
 800d53a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d53e:	4313      	orrs	r3, r2
 800d540:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7ff fec7 	bl	800d2d8 <VL53L0X_device_read_strobe>
 800d54a:	4603      	mov	r3, r0
 800d54c:	461a      	mov	r2, r3
 800d54e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d552:	4313      	orrs	r3, r2
 800d554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d558:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d55c:	461a      	mov	r2, r3
 800d55e:	2190      	movs	r1, #144	; 0x90
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f002 fa9b 	bl	800fa9c <VL53L0X_RdDWord>
 800d566:	4603      	mov	r3, r0
 800d568:	461a      	mov	r2, r3
 800d56a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d56e:	4313      	orrs	r3, r2
 800d570:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800d574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d576:	0e1b      	lsrs	r3, r3, #24
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800d57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d57e:	0c1b      	lsrs	r3, r3, #16
 800d580:	b2db      	uxtb	r3, r3
 800d582:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800d584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d586:	0a1b      	lsrs	r3, r3, #8
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800d58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800d592:	2225      	movs	r2, #37	; 0x25
 800d594:	2194      	movs	r1, #148	; 0x94
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f002 f99c 	bl	800f8d4 <VL53L0X_WrByte>
 800d59c:	4603      	mov	r3, r0
 800d59e:	461a      	mov	r2, r3
 800d5a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f7ff fe94 	bl	800d2d8 <VL53L0X_device_read_strobe>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d5be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	2190      	movs	r1, #144	; 0x90
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f002 fa68 	bl	800fa9c <VL53L0X_RdDWord>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800d5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5dc:	0e1b      	lsrs	r3, r3, #24
 800d5de:	b2db      	uxtb	r3, r3
 800d5e0:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e4:	0c1b      	lsrs	r3, r3, #16
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800d5ea:	78fb      	ldrb	r3, [r7, #3]
 800d5ec:	f003 0302 	and.w	r3, r3, #2
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f000 8189 	beq.w	800d908 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800d5f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d5fa:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	f040 8182 	bne.w	800d908 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800d604:	2202      	movs	r2, #2
 800d606:	2194      	movs	r1, #148	; 0x94
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f002 f963 	bl	800f8d4 <VL53L0X_WrByte>
 800d60e:	4603      	mov	r3, r0
 800d610:	461a      	mov	r2, r3
 800d612:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d616:	4313      	orrs	r3, r2
 800d618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f7ff fe5b 	bl	800d2d8 <VL53L0X_device_read_strobe>
 800d622:	4603      	mov	r3, r0
 800d624:	461a      	mov	r2, r3
 800d626:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d62a:	4313      	orrs	r3, r2
 800d62c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800d630:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800d634:	461a      	mov	r2, r3
 800d636:	2190      	movs	r1, #144	; 0x90
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f002 f9cd 	bl	800f9d8 <VL53L0X_RdByte>
 800d63e:	4603      	mov	r3, r0
 800d640:	461a      	mov	r2, r3
 800d642:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d646:	4313      	orrs	r3, r2
 800d648:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800d64c:	227b      	movs	r2, #123	; 0x7b
 800d64e:	2194      	movs	r1, #148	; 0x94
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f002 f93f 	bl	800f8d4 <VL53L0X_WrByte>
 800d656:	4603      	mov	r3, r0
 800d658:	461a      	mov	r2, r3
 800d65a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d65e:	4313      	orrs	r3, r2
 800d660:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7ff fe37 	bl	800d2d8 <VL53L0X_device_read_strobe>
 800d66a:	4603      	mov	r3, r0
 800d66c:	461a      	mov	r2, r3
 800d66e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d672:	4313      	orrs	r3, r2
 800d674:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800d678:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800d67c:	461a      	mov	r2, r3
 800d67e:	2190      	movs	r1, #144	; 0x90
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f002 f9a9 	bl	800f9d8 <VL53L0X_RdByte>
 800d686:	4603      	mov	r3, r0
 800d688:	461a      	mov	r2, r3
 800d68a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d68e:	4313      	orrs	r3, r2
 800d690:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800d694:	2277      	movs	r2, #119	; 0x77
 800d696:	2194      	movs	r1, #148	; 0x94
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f002 f91b 	bl	800f8d4 <VL53L0X_WrByte>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f7ff fe13 	bl	800d2d8 <VL53L0X_device_read_strobe>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6ba:	4313      	orrs	r3, r2
 800d6bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d6c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	2190      	movs	r1, #144	; 0x90
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f002 f9e7 	bl	800fa9c <VL53L0X_RdDWord>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800d6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6de:	0e5b      	lsrs	r3, r3, #25
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800d6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ec:	0c9b      	lsrs	r3, r3, #18
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800d6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fa:	0adb      	lsrs	r3, r3, #11
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d702:	b2db      	uxtb	r3, r3
 800d704:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800d706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d708:	091b      	lsrs	r3, r3, #4
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d710:	b2db      	uxtb	r3, r3
 800d712:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800d714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d716:	b2db      	uxtb	r3, r3
 800d718:	00db      	lsls	r3, r3, #3
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800d720:	b2db      	uxtb	r3, r3
 800d722:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800d726:	2278      	movs	r2, #120	; 0x78
 800d728:	2194      	movs	r1, #148	; 0x94
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f002 f8d2 	bl	800f8d4 <VL53L0X_WrByte>
 800d730:	4603      	mov	r3, r0
 800d732:	461a      	mov	r2, r3
 800d734:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d738:	4313      	orrs	r3, r2
 800d73a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f7ff fdca 	bl	800d2d8 <VL53L0X_device_read_strobe>
 800d744:	4603      	mov	r3, r0
 800d746:	461a      	mov	r2, r3
 800d748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d74c:	4313      	orrs	r3, r2
 800d74e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d752:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d756:	461a      	mov	r2, r3
 800d758:	2190      	movs	r1, #144	; 0x90
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f002 f99e 	bl	800fa9c <VL53L0X_RdDWord>
 800d760:	4603      	mov	r3, r0
 800d762:	461a      	mov	r2, r3
 800d764:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d768:	4313      	orrs	r3, r2
 800d76a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800d76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d770:	0f5b      	lsrs	r3, r3, #29
 800d772:	b2db      	uxtb	r3, r3
 800d774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d778:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800d77a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d77e:	4413      	add	r3, r2
 800d780:	b2db      	uxtb	r3, r3
 800d782:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800d784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d786:	0d9b      	lsrs	r3, r3, #22
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800d792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d794:	0bdb      	lsrs	r3, r3, #15
 800d796:	b2db      	uxtb	r3, r3
 800d798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d79c:	b2db      	uxtb	r3, r3
 800d79e:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800d7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a2:	0a1b      	lsrs	r3, r3, #8
 800d7a4:	b2db      	uxtb	r3, r3
 800d7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800d7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b0:	085b      	lsrs	r3, r3, #1
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800d7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	019b      	lsls	r3, r3, #6
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800d7ce:	2279      	movs	r2, #121	; 0x79
 800d7d0:	2194      	movs	r1, #148	; 0x94
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f002 f87e 	bl	800f8d4 <VL53L0X_WrByte>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	461a      	mov	r2, r3
 800d7dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7ff fd76 	bl	800d2d8 <VL53L0X_device_read_strobe>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d7fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d7fe:	461a      	mov	r2, r3
 800d800:	2190      	movs	r1, #144	; 0x90
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f002 f94a 	bl	800fa9c <VL53L0X_RdDWord>
 800d808:	4603      	mov	r3, r0
 800d80a:	461a      	mov	r2, r3
 800d80c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d810:	4313      	orrs	r3, r2
 800d812:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800d816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d818:	0e9b      	lsrs	r3, r3, #26
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d820:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800d822:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d826:	4413      	add	r3, r2
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800d82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82e:	0cdb      	lsrs	r3, r3, #19
 800d830:	b2db      	uxtb	r3, r3
 800d832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d836:	b2db      	uxtb	r3, r3
 800d838:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800d83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83c:	0b1b      	lsrs	r3, r3, #12
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d844:	b2db      	uxtb	r3, r3
 800d846:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800d848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84a:	095b      	lsrs	r3, r3, #5
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d852:	b2db      	uxtb	r3, r3
 800d854:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800d856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800d862:	b2db      	uxtb	r3, r3
 800d864:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800d868:	227a      	movs	r2, #122	; 0x7a
 800d86a:	2194      	movs	r1, #148	; 0x94
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f002 f831 	bl	800f8d4 <VL53L0X_WrByte>
 800d872:	4603      	mov	r3, r0
 800d874:	461a      	mov	r2, r3
 800d876:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d87a:	4313      	orrs	r3, r2
 800d87c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f7ff fd29 	bl	800d2d8 <VL53L0X_device_read_strobe>
 800d886:	4603      	mov	r3, r0
 800d888:	461a      	mov	r2, r3
 800d88a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d88e:	4313      	orrs	r3, r2
 800d890:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d894:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d898:	461a      	mov	r2, r3
 800d89a:	2190      	movs	r1, #144	; 0x90
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f002 f8fd 	bl	800fa9c <VL53L0X_RdDWord>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800d8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b2:	0f9b      	lsrs	r3, r3, #30
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ba:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800d8bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8c0:	4413      	add	r3, r2
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800d8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c8:	0ddb      	lsrs	r3, r3, #23
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800d8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d6:	0c1b      	lsrs	r3, r3, #16
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800d8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e4:	0a5b      	lsrs	r3, r3, #9
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800d8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f4:	089b      	lsrs	r3, r3, #2
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8fc:	b2db      	uxtb	r3, r3
 800d8fe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800d902:	2300      	movs	r3, #0
 800d904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800d908:	78fb      	ldrb	r3, [r7, #3]
 800d90a:	f003 0304 	and.w	r3, r3, #4
 800d90e:	2b00      	cmp	r3, #0
 800d910:	f000 80f1 	beq.w	800daf6 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800d914:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d918:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f040 80ea 	bne.w	800daf6 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800d922:	227b      	movs	r2, #123	; 0x7b
 800d924:	2194      	movs	r1, #148	; 0x94
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f001 ffd4 	bl	800f8d4 <VL53L0X_WrByte>
 800d92c:	4603      	mov	r3, r0
 800d92e:	461a      	mov	r2, r3
 800d930:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d934:	4313      	orrs	r3, r2
 800d936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7ff fccc 	bl	800d2d8 <VL53L0X_device_read_strobe>
 800d940:	4603      	mov	r3, r0
 800d942:	461a      	mov	r2, r3
 800d944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d948:	4313      	orrs	r3, r2
 800d94a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800d94e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d952:	461a      	mov	r2, r3
 800d954:	2190      	movs	r1, #144	; 0x90
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f002 f8a0 	bl	800fa9c <VL53L0X_RdDWord>
 800d95c:	4603      	mov	r3, r0
 800d95e:	461a      	mov	r2, r3
 800d960:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d964:	4313      	orrs	r3, r2
 800d966:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800d96a:	227c      	movs	r2, #124	; 0x7c
 800d96c:	2194      	movs	r1, #148	; 0x94
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f001 ffb0 	bl	800f8d4 <VL53L0X_WrByte>
 800d974:	4603      	mov	r3, r0
 800d976:	461a      	mov	r2, r3
 800d978:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d97c:	4313      	orrs	r3, r2
 800d97e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f7ff fca8 	bl	800d2d8 <VL53L0X_device_read_strobe>
 800d988:	4603      	mov	r3, r0
 800d98a:	461a      	mov	r2, r3
 800d98c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d990:	4313      	orrs	r3, r2
 800d992:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800d996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d99a:	461a      	mov	r2, r3
 800d99c:	2190      	movs	r1, #144	; 0x90
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f002 f87c 	bl	800fa9c <VL53L0X_RdDWord>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800d9b2:	2273      	movs	r2, #115	; 0x73
 800d9b4:	2194      	movs	r1, #148	; 0x94
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f001 ff8c 	bl	800f8d4 <VL53L0X_WrByte>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	461a      	mov	r2, r3
 800d9c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f7ff fc84 	bl	800d2d8 <VL53L0X_device_read_strobe>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9d8:	4313      	orrs	r3, r2
 800d9da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d9de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	2190      	movs	r1, #144	; 0x90
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f002 f858 	bl	800fa9c <VL53L0X_RdDWord>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fc:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800da02:	2274      	movs	r2, #116	; 0x74
 800da04:	2194      	movs	r1, #148	; 0x94
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f001 ff64 	bl	800f8d4 <VL53L0X_WrByte>
 800da0c:	4603      	mov	r3, r0
 800da0e:	461a      	mov	r2, r3
 800da10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da14:	4313      	orrs	r3, r2
 800da16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f7ff fc5c 	bl	800d2d8 <VL53L0X_device_read_strobe>
 800da20:	4603      	mov	r3, r0
 800da22:	461a      	mov	r2, r3
 800da24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da28:	4313      	orrs	r3, r2
 800da2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800da2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800da32:	461a      	mov	r2, r3
 800da34:	2190      	movs	r1, #144	; 0x90
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f002 f830 	bl	800fa9c <VL53L0X_RdDWord>
 800da3c:	4603      	mov	r3, r0
 800da3e:	461a      	mov	r2, r3
 800da40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da44:	4313      	orrs	r3, r2
 800da46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800da4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800da4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da50:	4313      	orrs	r3, r2
 800da52:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800da54:	2275      	movs	r2, #117	; 0x75
 800da56:	2194      	movs	r1, #148	; 0x94
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f001 ff3b 	bl	800f8d4 <VL53L0X_WrByte>
 800da5e:	4603      	mov	r3, r0
 800da60:	461a      	mov	r2, r3
 800da62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da66:	4313      	orrs	r3, r2
 800da68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f7ff fc33 	bl	800d2d8 <VL53L0X_device_read_strobe>
 800da72:	4603      	mov	r3, r0
 800da74:	461a      	mov	r2, r3
 800da76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da7a:	4313      	orrs	r3, r2
 800da7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800da80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800da84:	461a      	mov	r2, r3
 800da86:	2190      	movs	r1, #144	; 0x90
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f002 f807 	bl	800fa9c <VL53L0X_RdDWord>
 800da8e:	4603      	mov	r3, r0
 800da90:	461a      	mov	r2, r3
 800da92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da96:	4313      	orrs	r3, r2
 800da98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800da9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9e:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800daa4:	2276      	movs	r2, #118	; 0x76
 800daa6:	2194      	movs	r1, #148	; 0x94
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f001 ff13 	bl	800f8d4 <VL53L0X_WrByte>
 800daae:	4603      	mov	r3, r0
 800dab0:	461a      	mov	r2, r3
 800dab2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dab6:	4313      	orrs	r3, r2
 800dab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f7ff fc0b 	bl	800d2d8 <VL53L0X_device_read_strobe>
 800dac2:	4603      	mov	r3, r0
 800dac4:	461a      	mov	r2, r3
 800dac6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800daca:	4313      	orrs	r3, r2
 800dacc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dad0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dad4:	461a      	mov	r2, r3
 800dad6:	2190      	movs	r1, #144	; 0x90
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f001 ffdf 	bl	800fa9c <VL53L0X_RdDWord>
 800dade:	4603      	mov	r3, r0
 800dae0:	461a      	mov	r2, r3
 800dae2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dae6:	4313      	orrs	r3, r2
 800dae8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800daec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daee:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800daf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800daf2:	4313      	orrs	r3, r2
 800daf4:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800daf6:	2200      	movs	r2, #0
 800daf8:	2181      	movs	r1, #129	; 0x81
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f001 feea 	bl	800f8d4 <VL53L0X_WrByte>
 800db00:	4603      	mov	r3, r0
 800db02:	461a      	mov	r2, r3
 800db04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db08:	4313      	orrs	r3, r2
 800db0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800db0e:	2206      	movs	r2, #6
 800db10:	21ff      	movs	r1, #255	; 0xff
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f001 fede 	bl	800f8d4 <VL53L0X_WrByte>
 800db18:	4603      	mov	r3, r0
 800db1a:	461a      	mov	r2, r3
 800db1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db20:	4313      	orrs	r3, r2
 800db22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800db26:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800db2a:	461a      	mov	r2, r3
 800db2c:	2183      	movs	r1, #131	; 0x83
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f001 ff52 	bl	800f9d8 <VL53L0X_RdByte>
 800db34:	4603      	mov	r3, r0
 800db36:	461a      	mov	r2, r3
 800db38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db3c:	4313      	orrs	r3, r2
 800db3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800db42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db46:	f023 0304 	bic.w	r3, r3, #4
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	461a      	mov	r2, r3
 800db4e:	2183      	movs	r1, #131	; 0x83
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f001 febf 	bl	800f8d4 <VL53L0X_WrByte>
 800db56:	4603      	mov	r3, r0
 800db58:	461a      	mov	r2, r3
 800db5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db5e:	4313      	orrs	r3, r2
 800db60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800db64:	2201      	movs	r2, #1
 800db66:	21ff      	movs	r1, #255	; 0xff
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f001 feb3 	bl	800f8d4 <VL53L0X_WrByte>
 800db6e:	4603      	mov	r3, r0
 800db70:	461a      	mov	r2, r3
 800db72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db76:	4313      	orrs	r3, r2
 800db78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800db7c:	2201      	movs	r2, #1
 800db7e:	2100      	movs	r1, #0
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f001 fea7 	bl	800f8d4 <VL53L0X_WrByte>
 800db86:	4603      	mov	r3, r0
 800db88:	461a      	mov	r2, r3
 800db8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db8e:	4313      	orrs	r3, r2
 800db90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800db94:	2200      	movs	r2, #0
 800db96:	21ff      	movs	r1, #255	; 0xff
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f001 fe9b 	bl	800f8d4 <VL53L0X_WrByte>
 800db9e:	4603      	mov	r3, r0
 800dba0:	461a      	mov	r2, r3
 800dba2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dba6:	4313      	orrs	r3, r2
 800dba8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800dbac:	2200      	movs	r2, #0
 800dbae:	2180      	movs	r1, #128	; 0x80
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f001 fe8f 	bl	800f8d4 <VL53L0X_WrByte>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	461a      	mov	r2, r3
 800dbba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800dbc4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f040 808f 	bne.w	800dcec <VL53L0X_get_info_from_device+0x98e>
 800dbce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dbd2:	2b07      	cmp	r3, #7
 800dbd4:	f000 808a 	beq.w	800dcec <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800dbd8:	78fb      	ldrb	r3, [r7, #3]
 800dbda:	f003 0301 	and.w	r3, r3, #1
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d024      	beq.n	800dc2c <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800dbe2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dbe6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d11e      	bne.n	800dc2c <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800dbf4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800dbfe:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800dc02:	2300      	movs	r3, #0
 800dc04:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc06:	e00e      	b.n	800dc26 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800dc08:	f107 0208 	add.w	r2, r7, #8
 800dc0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc0e:	4413      	add	r3, r2
 800dc10:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc16:	4413      	add	r3, r2
 800dc18:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800dc1c:	460a      	mov	r2, r1
 800dc1e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800dc20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc22:	3301      	adds	r3, #1
 800dc24:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc28:	2b05      	cmp	r3, #5
 800dc2a:	dded      	ble.n	800dc08 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800dc2c:	78fb      	ldrb	r3, [r7, #3]
 800dc2e:	f003 0302 	and.w	r3, r3, #2
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d018      	beq.n	800dc68 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800dc36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc3a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d112      	bne.n	800dc68 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dc42:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dc4c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	33f3      	adds	r3, #243	; 0xf3
 800dc5a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800dc5c:	f107 0310 	add.w	r3, r7, #16
 800dc60:	4619      	mov	r1, r3
 800dc62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc64:	f002 feb7 	bl	80109d6 <strcpy>

		}

		if (((option & 4) == 4) &&
 800dc68:	78fb      	ldrb	r3, [r7, #3]
 800dc6a:	f003 0304 	and.w	r3, r3, #4
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d030      	beq.n	800dcd4 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800dc72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc76:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d12a      	bne.n	800dcd4 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dc7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dc86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800dc8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc90:	025b      	lsls	r3, r3, #9
 800dc92:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc98:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800dca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d011      	beq.n	800dccc <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800dca8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dcaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcac:	1ad3      	subs	r3, r2, r3
 800dcae:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800dcb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dcb6:	fb02 f303 	mul.w	r3, r2, r3
 800dcba:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800dcbc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800dcc0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800dcc4:	425b      	negs	r3, r3
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800dccc:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800dcd4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800dcd8:	78fb      	ldrb	r3, [r7, #3]
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800dce2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800dcec:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3760      	adds	r7, #96	; 0x60
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b087      	sub	sp, #28
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	460b      	mov	r3, r1
 800dd02:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800dd04:	f240 6277 	movw	r2, #1655	; 0x677
 800dd08:	f04f 0300 	mov.w	r3, #0
 800dd0c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800dd10:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800dd14:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800dd16:	78fb      	ldrb	r3, [r7, #3]
 800dd18:	68fa      	ldr	r2, [r7, #12]
 800dd1a:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800dd1e:	693a      	ldr	r2, [r7, #16]
 800dd20:	fb02 f303 	mul.w	r3, r2, r3
 800dd24:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800dd26:	68bb      	ldr	r3, [r7, #8]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	371c      	adds	r7, #28
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr

0800dd34 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800dd34:	b480      	push	{r7}
 800dd36:	b087      	sub	sp, #28
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800dd44:	2300      	movs	r3, #0
 800dd46:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d017      	beq.n	800dd7e <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	3b01      	subs	r3, #1
 800dd52:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800dd54:	e005      	b.n	800dd62 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	085b      	lsrs	r3, r3, #1
 800dd5a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800dd5c:	89fb      	ldrh	r3, [r7, #14]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d1f4      	bne.n	800dd56 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800dd6c:	89fb      	ldrh	r3, [r7, #14]
 800dd6e:	021b      	lsls	r3, r3, #8
 800dd70:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800dd7a:	4413      	add	r3, r2
 800dd7c:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800dd7e:	8afb      	ldrh	r3, [r7, #22]

}
 800dd80:	4618      	mov	r0, r3
 800dd82:	371c      	adds	r7, #28
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr

0800dd8c <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b085      	sub	sp, #20
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	4603      	mov	r3, r0
 800dd94:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800dd96:	2300      	movs	r3, #0
 800dd98:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800dd9a:	88fb      	ldrh	r3, [r7, #6]
 800dd9c:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800dd9e:	88fa      	ldrh	r2, [r7, #6]
 800dda0:	0a12      	lsrs	r2, r2, #8
 800dda2:	b292      	uxth	r2, r2
 800dda4:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800dda6:	3301      	adds	r3, #1
 800dda8:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3714      	adds	r7, #20
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	4770      	bx	lr

0800ddb8 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b088      	sub	sp, #32
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	4613      	mov	r3, r2
 800ddc4:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800ddca:	79fb      	ldrb	r3, [r7, #7]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	68f8      	ldr	r0, [r7, #12]
 800ddd0:	f7ff ff92 	bl	800dcf8 <VL53L0X_calc_macro_period_ps>
 800ddd4:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800ddd6:	69bb      	ldr	r3, [r7, #24]
 800ddd8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800dddc:	4a0a      	ldr	r2, [pc, #40]	; (800de08 <VL53L0X_calc_timeout_mclks+0x50>)
 800ddde:	fba2 2303 	umull	r2, r3, r2, r3
 800dde2:	099b      	lsrs	r3, r3, #6
 800dde4:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ddec:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	085b      	lsrs	r3, r3, #1
 800ddf4:	441a      	add	r2, r3
	timeout_period_mclks =
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddfc:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800ddfe:	69fb      	ldr	r3, [r7, #28]
}
 800de00:	4618      	mov	r0, r3
 800de02:	3720      	adds	r7, #32
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}
 800de08:	10624dd3 	.word	0x10624dd3

0800de0c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b086      	sub	sp, #24
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	460b      	mov	r3, r1
 800de16:	807b      	strh	r3, [r7, #2]
 800de18:	4613      	mov	r3, r2
 800de1a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800de1c:	2300      	movs	r3, #0
 800de1e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800de20:	787b      	ldrb	r3, [r7, #1]
 800de22:	4619      	mov	r1, r3
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f7ff ff67 	bl	800dcf8 <VL53L0X_calc_macro_period_ps>
 800de2a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800de32:	4a0a      	ldr	r2, [pc, #40]	; (800de5c <VL53L0X_calc_timeout_us+0x50>)
 800de34:	fba2 2303 	umull	r2, r3, r2, r3
 800de38:	099b      	lsrs	r3, r3, #6
 800de3a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800de3c:	887b      	ldrh	r3, [r7, #2]
 800de3e:	68fa      	ldr	r2, [r7, #12]
 800de40:	fb02 f303 	mul.w	r3, r2, r3
 800de44:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800de48:	4a04      	ldr	r2, [pc, #16]	; (800de5c <VL53L0X_calc_timeout_us+0x50>)
 800de4a:	fba2 2303 	umull	r2, r3, r2, r3
 800de4e:	099b      	lsrs	r3, r3, #6
 800de50:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800de52:	697b      	ldr	r3, [r7, #20]
}
 800de54:	4618      	mov	r0, r3
 800de56:	3718      	adds	r7, #24
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	10624dd3 	.word	0x10624dd3

0800de60 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b08c      	sub	sp, #48	; 0x30
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	460b      	mov	r3, r1
 800de6a:	607a      	str	r2, [r7, #4]
 800de6c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de6e:	2300      	movs	r3, #0
 800de70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800de74:	2300      	movs	r3, #0
 800de76:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800de7a:	2300      	movs	r3, #0
 800de7c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800de7e:	2300      	movs	r3, #0
 800de80:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800de82:	2300      	movs	r3, #0
 800de84:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800de86:	7afb      	ldrb	r3, [r7, #11]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d005      	beq.n	800de98 <get_sequence_step_timeout+0x38>
 800de8c:	7afb      	ldrb	r3, [r7, #11]
 800de8e:	2b01      	cmp	r3, #1
 800de90:	d002      	beq.n	800de98 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800de92:	7afb      	ldrb	r3, [r7, #11]
 800de94:	2b02      	cmp	r3, #2
 800de96:	d128      	bne.n	800deea <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800de98:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800de9c:	461a      	mov	r2, r3
 800de9e:	2100      	movs	r1, #0
 800dea0:	68f8      	ldr	r0, [r7, #12]
 800dea2:	f7fd fa4d 	bl	800b340 <VL53L0X_GetVcselPulsePeriod>
 800dea6:	4603      	mov	r3, r0
 800dea8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800deac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d109      	bne.n	800dec8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800deb4:	f107 0320 	add.w	r3, r7, #32
 800deb8:	461a      	mov	r2, r3
 800deba:	2146      	movs	r1, #70	; 0x46
 800debc:	68f8      	ldr	r0, [r7, #12]
 800debe:	f001 fd8b 	bl	800f9d8 <VL53L0X_RdByte>
 800dec2:	4603      	mov	r3, r0
 800dec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800dec8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800decc:	b29b      	uxth	r3, r3
 800dece:	4618      	mov	r0, r3
 800ded0:	f7ff ff5c 	bl	800dd8c <VL53L0X_decode_timeout>
 800ded4:	4603      	mov	r3, r0
 800ded6:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800ded8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800dedc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dede:	4619      	mov	r1, r3
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f7ff ff93 	bl	800de0c <VL53L0X_calc_timeout_us>
 800dee6:	62b8      	str	r0, [r7, #40]	; 0x28
 800dee8:	e092      	b.n	800e010 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800deea:	7afb      	ldrb	r3, [r7, #11]
 800deec:	2b03      	cmp	r3, #3
 800deee:	d135      	bne.n	800df5c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800def0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800def4:	461a      	mov	r2, r3
 800def6:	2100      	movs	r1, #0
 800def8:	68f8      	ldr	r0, [r7, #12]
 800defa:	f7fd fa21 	bl	800b340 <VL53L0X_GetVcselPulsePeriod>
 800defe:	4603      	mov	r3, r0
 800df00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800df04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800df08:	2b00      	cmp	r3, #0
 800df0a:	f040 8081 	bne.w	800e010 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800df0e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800df12:	461a      	mov	r2, r3
 800df14:	2100      	movs	r1, #0
 800df16:	68f8      	ldr	r0, [r7, #12]
 800df18:	f7fd fa12 	bl	800b340 <VL53L0X_GetVcselPulsePeriod>
 800df1c:	4603      	mov	r3, r0
 800df1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800df22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800df26:	2b00      	cmp	r3, #0
 800df28:	d109      	bne.n	800df3e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800df2a:	f107 031e 	add.w	r3, r7, #30
 800df2e:	461a      	mov	r2, r3
 800df30:	2151      	movs	r1, #81	; 0x51
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f001 fd7a 	bl	800fa2c <VL53L0X_RdWord>
 800df38:	4603      	mov	r3, r0
 800df3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800df3e:	8bfb      	ldrh	r3, [r7, #30]
 800df40:	4618      	mov	r0, r3
 800df42:	f7ff ff23 	bl	800dd8c <VL53L0X_decode_timeout>
 800df46:	4603      	mov	r3, r0
 800df48:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800df4a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800df4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800df50:	4619      	mov	r1, r3
 800df52:	68f8      	ldr	r0, [r7, #12]
 800df54:	f7ff ff5a 	bl	800de0c <VL53L0X_calc_timeout_us>
 800df58:	62b8      	str	r0, [r7, #40]	; 0x28
 800df5a:	e059      	b.n	800e010 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800df5c:	7afb      	ldrb	r3, [r7, #11]
 800df5e:	2b04      	cmp	r3, #4
 800df60:	d156      	bne.n	800e010 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800df62:	f107 0314 	add.w	r3, r7, #20
 800df66:	4619      	mov	r1, r3
 800df68:	68f8      	ldr	r0, [r7, #12]
 800df6a:	f7fd faf5 	bl	800b558 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800df6e:	2300      	movs	r3, #0
 800df70:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800df72:	7dfb      	ldrb	r3, [r7, #23]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d01d      	beq.n	800dfb4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800df78:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800df7c:	461a      	mov	r2, r3
 800df7e:	2100      	movs	r1, #0
 800df80:	68f8      	ldr	r0, [r7, #12]
 800df82:	f7fd f9dd 	bl	800b340 <VL53L0X_GetVcselPulsePeriod>
 800df86:	4603      	mov	r3, r0
 800df88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800df8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10f      	bne.n	800dfb4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800df94:	f107 031e 	add.w	r3, r7, #30
 800df98:	461a      	mov	r2, r3
 800df9a:	2151      	movs	r1, #81	; 0x51
 800df9c:	68f8      	ldr	r0, [r7, #12]
 800df9e:	f001 fd45 	bl	800fa2c <VL53L0X_RdWord>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800dfa8:	8bfb      	ldrh	r3, [r7, #30]
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7ff feee 	bl	800dd8c <VL53L0X_decode_timeout>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800dfb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d109      	bne.n	800dfd0 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800dfbc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	2101      	movs	r1, #1
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f7fd f9bb 	bl	800b340 <VL53L0X_GetVcselPulsePeriod>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800dfd0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d10f      	bne.n	800dff8 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800dfd8:	f107 031c 	add.w	r3, r7, #28
 800dfdc:	461a      	mov	r2, r3
 800dfde:	2171      	movs	r1, #113	; 0x71
 800dfe0:	68f8      	ldr	r0, [r7, #12]
 800dfe2:	f001 fd23 	bl	800fa2c <VL53L0X_RdWord>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800dfec:	8bbb      	ldrh	r3, [r7, #28]
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7ff fecc 	bl	800dd8c <VL53L0X_decode_timeout>
 800dff4:	4603      	mov	r3, r0
 800dff6:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800dff8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dffa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dffc:	1ad3      	subs	r3, r2, r3
 800dffe:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e000:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e006:	4619      	mov	r1, r3
 800e008:	68f8      	ldr	r0, [r7, #12]
 800e00a:	f7ff feff 	bl	800de0c <VL53L0X_calc_timeout_us>
 800e00e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e014:	601a      	str	r2, [r3, #0]

	return Status;
 800e016:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3730      	adds	r7, #48	; 0x30
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}

0800e022 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800e022:	b580      	push	{r7, lr}
 800e024:	b08a      	sub	sp, #40	; 0x28
 800e026:	af00      	add	r7, sp, #0
 800e028:	60f8      	str	r0, [r7, #12]
 800e02a:	460b      	mov	r3, r1
 800e02c:	607a      	str	r2, [r7, #4]
 800e02e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e030:	2300      	movs	r3, #0
 800e032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800e036:	7afb      	ldrb	r3, [r7, #11]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d005      	beq.n	800e048 <set_sequence_step_timeout+0x26>
 800e03c:	7afb      	ldrb	r3, [r7, #11]
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d002      	beq.n	800e048 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800e042:	7afb      	ldrb	r3, [r7, #11]
 800e044:	2b02      	cmp	r3, #2
 800e046:	d138      	bne.n	800e0ba <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e048:	f107 031b 	add.w	r3, r7, #27
 800e04c:	461a      	mov	r2, r3
 800e04e:	2100      	movs	r1, #0
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f7fd f975 	bl	800b340 <VL53L0X_GetVcselPulsePeriod>
 800e056:	4603      	mov	r3, r0
 800e058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800e05c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e060:	2b00      	cmp	r3, #0
 800e062:	d11a      	bne.n	800e09a <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800e064:	7efb      	ldrb	r3, [r7, #27]
 800e066:	461a      	mov	r2, r3
 800e068:	6879      	ldr	r1, [r7, #4]
 800e06a:	68f8      	ldr	r0, [r7, #12]
 800e06c:	f7ff fea4 	bl	800ddb8 <VL53L0X_calc_timeout_mclks>
 800e070:	4603      	mov	r3, r0
 800e072:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800e074:	8bbb      	ldrh	r3, [r7, #28]
 800e076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e07a:	d903      	bls.n	800e084 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800e07c:	23ff      	movs	r3, #255	; 0xff
 800e07e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e082:	e004      	b.n	800e08e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800e084:	8bbb      	ldrh	r3, [r7, #28]
 800e086:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800e088:	3b01      	subs	r3, #1
 800e08a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e08e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e092:	b29a      	uxth	r2, r3
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e09a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	f040 80ab 	bne.w	800e1fa <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800e0a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0a8:	461a      	mov	r2, r3
 800e0aa:	2146      	movs	r1, #70	; 0x46
 800e0ac:	68f8      	ldr	r0, [r7, #12]
 800e0ae:	f001 fc11 	bl	800f8d4 <VL53L0X_WrByte>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800e0b8:	e09f      	b.n	800e1fa <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e0ba:	7afb      	ldrb	r3, [r7, #11]
 800e0bc:	2b03      	cmp	r3, #3
 800e0be:	d135      	bne.n	800e12c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800e0c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d11b      	bne.n	800e100 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e0c8:	f107 031b 	add.w	r3, r7, #27
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	2100      	movs	r1, #0
 800e0d0:	68f8      	ldr	r0, [r7, #12]
 800e0d2:	f7fd f935 	bl	800b340 <VL53L0X_GetVcselPulsePeriod>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800e0dc:	7efb      	ldrb	r3, [r7, #27]
 800e0de:	461a      	mov	r2, r3
 800e0e0:	6879      	ldr	r1, [r7, #4]
 800e0e2:	68f8      	ldr	r0, [r7, #12]
 800e0e4:	f7ff fe68 	bl	800ddb8 <VL53L0X_calc_timeout_mclks>
 800e0e8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800e0ea:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800e0ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7ff fe20 	bl	800dd34 <VL53L0X_encode_timeout>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e0f8:	8b3a      	ldrh	r2, [r7, #24]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e100:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e104:	2b00      	cmp	r3, #0
 800e106:	d108      	bne.n	800e11a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800e108:	8b3b      	ldrh	r3, [r7, #24]
 800e10a:	461a      	mov	r2, r3
 800e10c:	2151      	movs	r1, #81	; 0x51
 800e10e:	68f8      	ldr	r0, [r7, #12]
 800e110:	f001 fc04 	bl	800f91c <VL53L0X_WrWord>
 800e114:	4603      	mov	r3, r0
 800e116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e11a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d16b      	bne.n	800e1fa <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800e12a:	e066      	b.n	800e1fa <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e12c:	7afb      	ldrb	r3, [r7, #11]
 800e12e:	2b04      	cmp	r3, #4
 800e130:	d160      	bne.n	800e1f4 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800e132:	f107 0310 	add.w	r3, r7, #16
 800e136:	4619      	mov	r1, r3
 800e138:	68f8      	ldr	r0, [r7, #12]
 800e13a:	f7fd fa0d 	bl	800b558 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800e13e:	2300      	movs	r3, #0
 800e140:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800e142:	7cfb      	ldrb	r3, [r7, #19]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d01d      	beq.n	800e184 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e148:	f107 031b 	add.w	r3, r7, #27
 800e14c:	461a      	mov	r2, r3
 800e14e:	2100      	movs	r1, #0
 800e150:	68f8      	ldr	r0, [r7, #12]
 800e152:	f7fd f8f5 	bl	800b340 <VL53L0X_GetVcselPulsePeriod>
 800e156:	4603      	mov	r3, r0
 800e158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800e15c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e160:	2b00      	cmp	r3, #0
 800e162:	d10f      	bne.n	800e184 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800e164:	f107 0318 	add.w	r3, r7, #24
 800e168:	461a      	mov	r2, r3
 800e16a:	2151      	movs	r1, #81	; 0x51
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f001 fc5d 	bl	800fa2c <VL53L0X_RdWord>
 800e172:	4603      	mov	r3, r0
 800e174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800e178:	8b3b      	ldrh	r3, [r7, #24]
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7ff fe06 	bl	800dd8c <VL53L0X_decode_timeout>
 800e180:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800e182:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800e184:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d109      	bne.n	800e1a0 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e18c:	f107 031b 	add.w	r3, r7, #27
 800e190:	461a      	mov	r2, r3
 800e192:	2101      	movs	r1, #1
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	f7fd f8d3 	bl	800b340 <VL53L0X_GetVcselPulsePeriod>
 800e19a:	4603      	mov	r3, r0
 800e19c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800e1a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d128      	bne.n	800e1fa <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800e1a8:	7efb      	ldrb	r3, [r7, #27]
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	6879      	ldr	r1, [r7, #4]
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	f7ff fe02 	bl	800ddb8 <VL53L0X_calc_timeout_mclks>
 800e1b4:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800e1b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1b8:	6a3a      	ldr	r2, [r7, #32]
 800e1ba:	4413      	add	r3, r2
 800e1bc:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800e1be:	6a38      	ldr	r0, [r7, #32]
 800e1c0:	f7ff fdb8 	bl	800dd34 <VL53L0X_encode_timeout>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800e1c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d108      	bne.n	800e1e2 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800e1d0:	8bfb      	ldrh	r3, [r7, #30]
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	2171      	movs	r1, #113	; 0x71
 800e1d6:	68f8      	ldr	r0, [r7, #12]
 800e1d8:	f001 fba0 	bl	800f91c <VL53L0X_WrWord>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800e1e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d107      	bne.n	800e1fa <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800e1f2:	e002      	b.n	800e1fa <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e1f4:	23fc      	movs	r3, #252	; 0xfc
 800e1f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800e1fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3728      	adds	r7, #40	; 0x28
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}

0800e206 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800e206:	b580      	push	{r7, lr}
 800e208:	b08a      	sub	sp, #40	; 0x28
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
 800e20e:	460b      	mov	r3, r1
 800e210:	70fb      	strb	r3, [r7, #3]
 800e212:	4613      	mov	r3, r2
 800e214:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e216:	2300      	movs	r3, #0
 800e218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800e21c:	230c      	movs	r3, #12
 800e21e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800e222:	2312      	movs	r3, #18
 800e224:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800e228:	2308      	movs	r3, #8
 800e22a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800e22e:	230e      	movs	r3, #14
 800e230:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800e234:	2300      	movs	r3, #0
 800e236:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800e238:	78bb      	ldrb	r3, [r7, #2]
 800e23a:	f003 0301 	and.w	r3, r3, #1
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	2b00      	cmp	r3, #0
 800e242:	d003      	beq.n	800e24c <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e244:	23fc      	movs	r3, #252	; 0xfc
 800e246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e24a:	e020      	b.n	800e28e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800e24c:	78fb      	ldrb	r3, [r7, #3]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d10d      	bne.n	800e26e <VL53L0X_set_vcsel_pulse_period+0x68>
 800e252:	78ba      	ldrb	r2, [r7, #2]
 800e254:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e258:	429a      	cmp	r2, r3
 800e25a:	d304      	bcc.n	800e266 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800e25c:	78ba      	ldrb	r2, [r7, #2]
 800e25e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e262:	429a      	cmp	r2, r3
 800e264:	d903      	bls.n	800e26e <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e266:	23fc      	movs	r3, #252	; 0xfc
 800e268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e26c:	e00f      	b.n	800e28e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800e26e:	78fb      	ldrb	r3, [r7, #3]
 800e270:	2b01      	cmp	r3, #1
 800e272:	d10c      	bne.n	800e28e <VL53L0X_set_vcsel_pulse_period+0x88>
 800e274:	78ba      	ldrb	r2, [r7, #2]
 800e276:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d304      	bcc.n	800e288 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800e27e:	78ba      	ldrb	r2, [r7, #2]
 800e280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e284:	429a      	cmp	r2, r3
 800e286:	d902      	bls.n	800e28e <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e288:	23fc      	movs	r3, #252	; 0xfc
 800e28a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800e28e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e292:	2b00      	cmp	r3, #0
 800e294:	d002      	beq.n	800e29c <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800e296:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e29a:	e239      	b.n	800e710 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800e29c:	78fb      	ldrb	r3, [r7, #3]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d150      	bne.n	800e344 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800e2a2:	78bb      	ldrb	r3, [r7, #2]
 800e2a4:	2b0c      	cmp	r3, #12
 800e2a6:	d110      	bne.n	800e2ca <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800e2a8:	2218      	movs	r2, #24
 800e2aa:	2157      	movs	r1, #87	; 0x57
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f001 fb11 	bl	800f8d4 <VL53L0X_WrByte>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800e2b8:	2208      	movs	r2, #8
 800e2ba:	2156      	movs	r1, #86	; 0x56
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f001 fb09 	bl	800f8d4 <VL53L0X_WrByte>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2c8:	e17f      	b.n	800e5ca <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800e2ca:	78bb      	ldrb	r3, [r7, #2]
 800e2cc:	2b0e      	cmp	r3, #14
 800e2ce:	d110      	bne.n	800e2f2 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800e2d0:	2230      	movs	r2, #48	; 0x30
 800e2d2:	2157      	movs	r1, #87	; 0x57
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f001 fafd 	bl	800f8d4 <VL53L0X_WrByte>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800e2e0:	2208      	movs	r2, #8
 800e2e2:	2156      	movs	r1, #86	; 0x56
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f001 faf5 	bl	800f8d4 <VL53L0X_WrByte>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2f0:	e16b      	b.n	800e5ca <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800e2f2:	78bb      	ldrb	r3, [r7, #2]
 800e2f4:	2b10      	cmp	r3, #16
 800e2f6:	d110      	bne.n	800e31a <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800e2f8:	2240      	movs	r2, #64	; 0x40
 800e2fa:	2157      	movs	r1, #87	; 0x57
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f001 fae9 	bl	800f8d4 <VL53L0X_WrByte>
 800e302:	4603      	mov	r3, r0
 800e304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800e308:	2208      	movs	r2, #8
 800e30a:	2156      	movs	r1, #86	; 0x56
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f001 fae1 	bl	800f8d4 <VL53L0X_WrByte>
 800e312:	4603      	mov	r3, r0
 800e314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e318:	e157      	b.n	800e5ca <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800e31a:	78bb      	ldrb	r3, [r7, #2]
 800e31c:	2b12      	cmp	r3, #18
 800e31e:	f040 8154 	bne.w	800e5ca <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800e322:	2250      	movs	r2, #80	; 0x50
 800e324:	2157      	movs	r1, #87	; 0x57
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f001 fad4 	bl	800f8d4 <VL53L0X_WrByte>
 800e32c:	4603      	mov	r3, r0
 800e32e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800e332:	2208      	movs	r2, #8
 800e334:	2156      	movs	r1, #86	; 0x56
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f001 facc 	bl	800f8d4 <VL53L0X_WrByte>
 800e33c:	4603      	mov	r3, r0
 800e33e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e342:	e142      	b.n	800e5ca <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800e344:	78fb      	ldrb	r3, [r7, #3]
 800e346:	2b01      	cmp	r3, #1
 800e348:	f040 813f 	bne.w	800e5ca <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800e34c:	78bb      	ldrb	r3, [r7, #2]
 800e34e:	2b08      	cmp	r3, #8
 800e350:	d14c      	bne.n	800e3ec <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800e352:	2210      	movs	r2, #16
 800e354:	2148      	movs	r1, #72	; 0x48
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f001 fabc 	bl	800f8d4 <VL53L0X_WrByte>
 800e35c:	4603      	mov	r3, r0
 800e35e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800e362:	2208      	movs	r2, #8
 800e364:	2147      	movs	r1, #71	; 0x47
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f001 fab4 	bl	800f8d4 <VL53L0X_WrByte>
 800e36c:	4603      	mov	r3, r0
 800e36e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e372:	2202      	movs	r2, #2
 800e374:	2132      	movs	r1, #50	; 0x32
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f001 faac 	bl	800f8d4 <VL53L0X_WrByte>
 800e37c:	4603      	mov	r3, r0
 800e37e:	461a      	mov	r2, r3
 800e380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e384:	4313      	orrs	r3, r2
 800e386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800e38a:	220c      	movs	r2, #12
 800e38c:	2130      	movs	r1, #48	; 0x30
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f001 faa0 	bl	800f8d4 <VL53L0X_WrByte>
 800e394:	4603      	mov	r3, r0
 800e396:	461a      	mov	r2, r3
 800e398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e39c:	4313      	orrs	r3, r2
 800e39e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	21ff      	movs	r1, #255	; 0xff
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f001 fa94 	bl	800f8d4 <VL53L0X_WrByte>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800e3ba:	2230      	movs	r2, #48	; 0x30
 800e3bc:	2130      	movs	r1, #48	; 0x30
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f001 fa88 	bl	800f8d4 <VL53L0X_WrByte>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	21ff      	movs	r1, #255	; 0xff
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f001 fa7c 	bl	800f8d4 <VL53L0X_WrByte>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	461a      	mov	r2, r3
 800e3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3e4:	4313      	orrs	r3, r2
 800e3e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e3ea:	e0ee      	b.n	800e5ca <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800e3ec:	78bb      	ldrb	r3, [r7, #2]
 800e3ee:	2b0a      	cmp	r3, #10
 800e3f0:	d14c      	bne.n	800e48c <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800e3f2:	2228      	movs	r2, #40	; 0x28
 800e3f4:	2148      	movs	r1, #72	; 0x48
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f001 fa6c 	bl	800f8d4 <VL53L0X_WrByte>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800e402:	2208      	movs	r2, #8
 800e404:	2147      	movs	r1, #71	; 0x47
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f001 fa64 	bl	800f8d4 <VL53L0X_WrByte>
 800e40c:	4603      	mov	r3, r0
 800e40e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e412:	2203      	movs	r2, #3
 800e414:	2132      	movs	r1, #50	; 0x32
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f001 fa5c 	bl	800f8d4 <VL53L0X_WrByte>
 800e41c:	4603      	mov	r3, r0
 800e41e:	461a      	mov	r2, r3
 800e420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e424:	4313      	orrs	r3, r2
 800e426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e42a:	2209      	movs	r2, #9
 800e42c:	2130      	movs	r1, #48	; 0x30
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f001 fa50 	bl	800f8d4 <VL53L0X_WrByte>
 800e434:	4603      	mov	r3, r0
 800e436:	461a      	mov	r2, r3
 800e438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e43c:	4313      	orrs	r3, r2
 800e43e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e442:	2201      	movs	r2, #1
 800e444:	21ff      	movs	r1, #255	; 0xff
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f001 fa44 	bl	800f8d4 <VL53L0X_WrByte>
 800e44c:	4603      	mov	r3, r0
 800e44e:	461a      	mov	r2, r3
 800e450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e454:	4313      	orrs	r3, r2
 800e456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800e45a:	2220      	movs	r2, #32
 800e45c:	2130      	movs	r1, #48	; 0x30
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f001 fa38 	bl	800f8d4 <VL53L0X_WrByte>
 800e464:	4603      	mov	r3, r0
 800e466:	461a      	mov	r2, r3
 800e468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e46c:	4313      	orrs	r3, r2
 800e46e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e472:	2200      	movs	r2, #0
 800e474:	21ff      	movs	r1, #255	; 0xff
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f001 fa2c 	bl	800f8d4 <VL53L0X_WrByte>
 800e47c:	4603      	mov	r3, r0
 800e47e:	461a      	mov	r2, r3
 800e480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e484:	4313      	orrs	r3, r2
 800e486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e48a:	e09e      	b.n	800e5ca <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800e48c:	78bb      	ldrb	r3, [r7, #2]
 800e48e:	2b0c      	cmp	r3, #12
 800e490:	d14c      	bne.n	800e52c <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800e492:	2238      	movs	r2, #56	; 0x38
 800e494:	2148      	movs	r1, #72	; 0x48
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f001 fa1c 	bl	800f8d4 <VL53L0X_WrByte>
 800e49c:	4603      	mov	r3, r0
 800e49e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800e4a2:	2208      	movs	r2, #8
 800e4a4:	2147      	movs	r1, #71	; 0x47
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f001 fa14 	bl	800f8d4 <VL53L0X_WrByte>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e4b2:	2203      	movs	r2, #3
 800e4b4:	2132      	movs	r1, #50	; 0x32
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f001 fa0c 	bl	800f8d4 <VL53L0X_WrByte>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	461a      	mov	r2, r3
 800e4c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4c4:	4313      	orrs	r3, r2
 800e4c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e4ca:	2208      	movs	r2, #8
 800e4cc:	2130      	movs	r1, #48	; 0x30
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f001 fa00 	bl	800f8d4 <VL53L0X_WrByte>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4dc:	4313      	orrs	r3, r2
 800e4de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	21ff      	movs	r1, #255	; 0xff
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f001 f9f4 	bl	800f8d4 <VL53L0X_WrByte>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4f4:	4313      	orrs	r3, r2
 800e4f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800e4fa:	2220      	movs	r2, #32
 800e4fc:	2130      	movs	r1, #48	; 0x30
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f001 f9e8 	bl	800f8d4 <VL53L0X_WrByte>
 800e504:	4603      	mov	r3, r0
 800e506:	461a      	mov	r2, r3
 800e508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e50c:	4313      	orrs	r3, r2
 800e50e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e512:	2200      	movs	r2, #0
 800e514:	21ff      	movs	r1, #255	; 0xff
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f001 f9dc 	bl	800f8d4 <VL53L0X_WrByte>
 800e51c:	4603      	mov	r3, r0
 800e51e:	461a      	mov	r2, r3
 800e520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e524:	4313      	orrs	r3, r2
 800e526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e52a:	e04e      	b.n	800e5ca <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800e52c:	78bb      	ldrb	r3, [r7, #2]
 800e52e:	2b0e      	cmp	r3, #14
 800e530:	d14b      	bne.n	800e5ca <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800e532:	2248      	movs	r2, #72	; 0x48
 800e534:	2148      	movs	r1, #72	; 0x48
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f001 f9cc 	bl	800f8d4 <VL53L0X_WrByte>
 800e53c:	4603      	mov	r3, r0
 800e53e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800e542:	2208      	movs	r2, #8
 800e544:	2147      	movs	r1, #71	; 0x47
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f001 f9c4 	bl	800f8d4 <VL53L0X_WrByte>
 800e54c:	4603      	mov	r3, r0
 800e54e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e552:	2203      	movs	r2, #3
 800e554:	2132      	movs	r1, #50	; 0x32
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f001 f9bc 	bl	800f8d4 <VL53L0X_WrByte>
 800e55c:	4603      	mov	r3, r0
 800e55e:	461a      	mov	r2, r3
 800e560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e564:	4313      	orrs	r3, r2
 800e566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e56a:	2207      	movs	r2, #7
 800e56c:	2130      	movs	r1, #48	; 0x30
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f001 f9b0 	bl	800f8d4 <VL53L0X_WrByte>
 800e574:	4603      	mov	r3, r0
 800e576:	461a      	mov	r2, r3
 800e578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e57c:	4313      	orrs	r3, r2
 800e57e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e582:	2201      	movs	r2, #1
 800e584:	21ff      	movs	r1, #255	; 0xff
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f001 f9a4 	bl	800f8d4 <VL53L0X_WrByte>
 800e58c:	4603      	mov	r3, r0
 800e58e:	461a      	mov	r2, r3
 800e590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e594:	4313      	orrs	r3, r2
 800e596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800e59a:	2220      	movs	r2, #32
 800e59c:	2130      	movs	r1, #48	; 0x30
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f001 f998 	bl	800f8d4 <VL53L0X_WrByte>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	21ff      	movs	r1, #255	; 0xff
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f001 f98c 	bl	800f8d4 <VL53L0X_WrByte>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	461a      	mov	r2, r3
 800e5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5c4:	4313      	orrs	r3, r2
 800e5c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800e5ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d17f      	bne.n	800e6d2 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800e5d2:	78bb      	ldrb	r3, [r7, #2]
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7fe fe38 	bl	800d24a <VL53L0X_encode_vcsel_period>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800e5e0:	78fb      	ldrb	r3, [r7, #3]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d002      	beq.n	800e5ec <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d045      	beq.n	800e676 <VL53L0X_set_vcsel_pulse_period+0x470>
 800e5ea:	e06e      	b.n	800e6ca <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800e5ec:	f107 0314 	add.w	r3, r7, #20
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	2103      	movs	r1, #3
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f7ff fc33 	bl	800de60 <get_sequence_step_timeout>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800e600:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e604:	2b00      	cmp	r3, #0
 800e606:	d109      	bne.n	800e61c <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800e608:	f107 0310 	add.w	r3, r7, #16
 800e60c:	461a      	mov	r2, r3
 800e60e:	2102      	movs	r1, #2
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f7ff fc25 	bl	800de60 <get_sequence_step_timeout>
 800e616:	4603      	mov	r3, r0
 800e618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800e61c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e620:	2b00      	cmp	r3, #0
 800e622:	d109      	bne.n	800e638 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800e624:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e628:	461a      	mov	r2, r3
 800e62a:	2150      	movs	r1, #80	; 0x50
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f001 f951 	bl	800f8d4 <VL53L0X_WrByte>
 800e632:	4603      	mov	r3, r0
 800e634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800e638:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d108      	bne.n	800e652 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	461a      	mov	r2, r3
 800e644:	2103      	movs	r1, #3
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f7ff fceb 	bl	800e022 <set_sequence_step_timeout>
 800e64c:	4603      	mov	r3, r0
 800e64e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800e652:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e656:	2b00      	cmp	r3, #0
 800e658:	d108      	bne.n	800e66c <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	461a      	mov	r2, r3
 800e65e:	2102      	movs	r1, #2
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f7ff fcde 	bl	800e022 <set_sequence_step_timeout>
 800e666:	4603      	mov	r3, r0
 800e668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	78ba      	ldrb	r2, [r7, #2]
 800e670:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800e674:	e02e      	b.n	800e6d4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800e676:	f107 0318 	add.w	r3, r7, #24
 800e67a:	461a      	mov	r2, r3
 800e67c:	2104      	movs	r1, #4
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f7ff fbee 	bl	800de60 <get_sequence_step_timeout>
 800e684:	4603      	mov	r3, r0
 800e686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800e68a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d109      	bne.n	800e6a6 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800e692:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e696:	461a      	mov	r2, r3
 800e698:	2170      	movs	r1, #112	; 0x70
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f001 f91a 	bl	800f8d4 <VL53L0X_WrByte>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800e6a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d108      	bne.n	800e6c0 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	2104      	movs	r1, #4
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f7ff fcb4 	bl	800e022 <set_sequence_step_timeout>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	78ba      	ldrb	r2, [r7, #2]
 800e6c4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800e6c8:	e004      	b.n	800e6d4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e6ca:	23fc      	movs	r3, #252	; 0xfc
 800e6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e6d0:	e000      	b.n	800e6d4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800e6d2:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800e6d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d109      	bne.n	800e6f0 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	695b      	ldr	r3, [r3, #20]
 800e6e0:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800e6e2:	69f9      	ldr	r1, [r7, #28]
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f7fc fded 	bl	800b2c4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800e6f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d109      	bne.n	800e70c <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800e6f8:	f107 010f 	add.w	r1, r7, #15
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	2200      	movs	r2, #0
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f7fe fcbd 	bl	800d080 <VL53L0X_perform_phase_calibration>
 800e706:	4603      	mov	r3, r0
 800e708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800e70c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e710:	4618      	mov	r0, r3
 800e712:	3728      	adds	r7, #40	; 0x28
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b086      	sub	sp, #24
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	460b      	mov	r3, r1
 800e722:	607a      	str	r2, [r7, #4]
 800e724:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e726:	2300      	movs	r3, #0
 800e728:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800e72a:	7afb      	ldrb	r3, [r7, #11]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d002      	beq.n	800e736 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800e730:	2b01      	cmp	r3, #1
 800e732:	d00a      	beq.n	800e74a <VL53L0X_get_vcsel_pulse_period+0x32>
 800e734:	e013      	b.n	800e75e <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800e736:	f107 0316 	add.w	r3, r7, #22
 800e73a:	461a      	mov	r2, r3
 800e73c:	2150      	movs	r1, #80	; 0x50
 800e73e:	68f8      	ldr	r0, [r7, #12]
 800e740:	f001 f94a 	bl	800f9d8 <VL53L0X_RdByte>
 800e744:	4603      	mov	r3, r0
 800e746:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800e748:	e00b      	b.n	800e762 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800e74a:	f107 0316 	add.w	r3, r7, #22
 800e74e:	461a      	mov	r2, r3
 800e750:	2170      	movs	r1, #112	; 0x70
 800e752:	68f8      	ldr	r0, [r7, #12]
 800e754:	f001 f940 	bl	800f9d8 <VL53L0X_RdByte>
 800e758:	4603      	mov	r3, r0
 800e75a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800e75c:	e001      	b.n	800e762 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e75e:	23fc      	movs	r3, #252	; 0xfc
 800e760:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800e762:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d107      	bne.n	800e77a <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800e76a:	7dbb      	ldrb	r3, [r7, #22]
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7fe fd59 	bl	800d224 <VL53L0X_decode_vcsel_period>
 800e772:	4603      	mov	r3, r0
 800e774:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	701a      	strb	r2, [r3, #0]

	return Status;
 800e77a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3718      	adds	r7, #24
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}

0800e786 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800e786:	b580      	push	{r7, lr}
 800e788:	b092      	sub	sp, #72	; 0x48
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	6078      	str	r0, [r7, #4]
 800e78e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e790:	2300      	movs	r3, #0
 800e792:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800e796:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e79a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800e79c:	f240 7376 	movw	r3, #1910	; 0x776
 800e7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800e7a2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800e7a6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800e7a8:	f44f 7325 	mov.w	r3, #660	; 0x294
 800e7ac:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800e7ae:	f240 234e 	movw	r3, #590	; 0x24e
 800e7b2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800e7b4:	f240 23b2 	movw	r3, #690	; 0x2b2
 800e7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800e7ba:	f44f 7325 	mov.w	r3, #660	; 0x294
 800e7be:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800e7c0:	f240 2326 	movw	r3, #550	; 0x226
 800e7c4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800e7ca:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e7ce:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800e7d4:	683a      	ldr	r2, [r7, #0]
 800e7d6:	6a3b      	ldr	r3, [r7, #32]
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d205      	bcs.n	800e7e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e7dc:	23fc      	movs	r3, #252	; 0xfc
 800e7de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800e7e2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e7e6:	e0aa      	b.n	800e93e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800e7e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ec:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800e7ee:	683a      	ldr	r2, [r7, #0]
 800e7f0:	1ad3      	subs	r3, r2, r3
 800e7f2:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e7f4:	f107 0314 	add.w	r3, r7, #20
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f7fc feac 	bl	800b558 <VL53L0X_GetSequenceStepEnables>
 800e800:	4603      	mov	r3, r0
 800e802:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800e806:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d15b      	bne.n	800e8c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800e80e:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800e810:	2b00      	cmp	r3, #0
 800e812:	d105      	bne.n	800e820 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800e814:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800e816:	2b00      	cmp	r3, #0
 800e818:	d102      	bne.n	800e820 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800e81a:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d052      	beq.n	800e8c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800e820:	f107 0310 	add.w	r3, r7, #16
 800e824:	461a      	mov	r2, r3
 800e826:	2102      	movs	r1, #2
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f7ff fb19 	bl	800de60 <get_sequence_step_timeout>
 800e82e:	4603      	mov	r3, r0
 800e830:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800e834:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d002      	beq.n	800e842 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800e83c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e840:	e07d      	b.n	800e93e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800e842:	7d3b      	ldrb	r3, [r7, #20]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d00f      	beq.n	800e868 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800e848:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800e84a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e84c:	4413      	add	r3, r2
 800e84e:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800e850:	69fa      	ldr	r2, [r7, #28]
 800e852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e854:	429a      	cmp	r2, r3
 800e856:	d204      	bcs.n	800e862 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800e858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e85a:	69fb      	ldr	r3, [r7, #28]
 800e85c:	1ad3      	subs	r3, r2, r3
 800e85e:	643b      	str	r3, [r7, #64]	; 0x40
 800e860:	e002      	b.n	800e868 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e862:	23fc      	movs	r3, #252	; 0xfc
 800e864:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800e868:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d002      	beq.n	800e876 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800e870:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e874:	e063      	b.n	800e93e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800e876:	7dbb      	ldrb	r3, [r7, #22]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d011      	beq.n	800e8a0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800e87c:	693a      	ldr	r2, [r7, #16]
 800e87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e880:	4413      	add	r3, r2
 800e882:	005b      	lsls	r3, r3, #1
 800e884:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e886:	69fa      	ldr	r2, [r7, #28]
 800e888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d204      	bcs.n	800e898 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800e88e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	1ad3      	subs	r3, r2, r3
 800e894:	643b      	str	r3, [r7, #64]	; 0x40
 800e896:	e016      	b.n	800e8c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e898:	23fc      	movs	r3, #252	; 0xfc
 800e89a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e89e:	e012      	b.n	800e8c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800e8a0:	7d7b      	ldrb	r3, [r7, #21]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d00f      	beq.n	800e8c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8aa:	4413      	add	r3, r2
 800e8ac:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e8ae:	69fa      	ldr	r2, [r7, #28]
 800e8b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d204      	bcs.n	800e8c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800e8b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	1ad3      	subs	r3, r2, r3
 800e8bc:	643b      	str	r3, [r7, #64]	; 0x40
 800e8be:	e002      	b.n	800e8c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e8c0:	23fc      	movs	r3, #252	; 0xfc
 800e8c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800e8c6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d002      	beq.n	800e8d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800e8ce:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e8d2:	e034      	b.n	800e93e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800e8d4:	7dfb      	ldrb	r3, [r7, #23]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d019      	beq.n	800e90e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800e8da:	f107 030c 	add.w	r3, r7, #12
 800e8de:	461a      	mov	r2, r3
 800e8e0:	2103      	movs	r1, #3
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f7ff fabc 	bl	800de60 <get_sequence_step_timeout>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8f2:	4413      	add	r3, r2
 800e8f4:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e8f6:	69fa      	ldr	r2, [r7, #28]
 800e8f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d204      	bcs.n	800e908 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800e8fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	1ad3      	subs	r3, r2, r3
 800e904:	643b      	str	r3, [r7, #64]	; 0x40
 800e906:	e002      	b.n	800e90e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e908:	23fc      	movs	r3, #252	; 0xfc
 800e90a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800e90e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e912:	2b00      	cmp	r3, #0
 800e914:	d111      	bne.n	800e93a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800e916:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d00e      	beq.n	800e93a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800e91c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e920:	1ad3      	subs	r3, r2, r3
 800e922:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800e924:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e926:	2104      	movs	r1, #4
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f7ff fb7a 	bl	800e022 <set_sequence_step_timeout>
 800e92e:	4603      	mov	r3, r0
 800e930:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	683a      	ldr	r2, [r7, #0]
 800e938:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800e93a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3748      	adds	r7, #72	; 0x48
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}

0800e946 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800e946:	b580      	push	{r7, lr}
 800e948:	b090      	sub	sp, #64	; 0x40
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
 800e94e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e950:	2300      	movs	r3, #0
 800e952:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800e956:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e95a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800e95c:	f240 7376 	movw	r3, #1910	; 0x776
 800e960:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800e962:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800e966:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800e968:	f44f 7325 	mov.w	r3, #660	; 0x294
 800e96c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800e96e:	f240 234e 	movw	r3, #590	; 0x24e
 800e972:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800e974:	f240 23b2 	movw	r3, #690	; 0x2b2
 800e978:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800e97a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800e97e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800e980:	f240 2326 	movw	r3, #550	; 0x226
 800e984:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800e986:	2300      	movs	r3, #0
 800e988:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800e98a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e98c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e98e:	441a      	add	r2, r3
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e994:	f107 0318 	add.w	r3, r7, #24
 800e998:	4619      	mov	r1, r3
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f7fc fddc 	bl	800b558 <VL53L0X_GetSequenceStepEnables>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800e9a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d002      	beq.n	800e9b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800e9ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e9b2:	e075      	b.n	800eaa0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800e9b4:	7e3b      	ldrb	r3, [r7, #24]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d105      	bne.n	800e9c6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800e9ba:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d102      	bne.n	800e9c6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800e9c0:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d030      	beq.n	800ea28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800e9c6:	f107 0310 	add.w	r3, r7, #16
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	2102      	movs	r1, #2
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f7ff fa46 	bl	800de60 <get_sequence_step_timeout>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800e9da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d122      	bne.n	800ea28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800e9e2:	7e3b      	ldrb	r3, [r7, #24]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d007      	beq.n	800e9f8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800e9ec:	6939      	ldr	r1, [r7, #16]
 800e9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f0:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800e9f2:	441a      	add	r2, r3
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800e9f8:	7ebb      	ldrb	r3, [r7, #26]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d009      	beq.n	800ea12 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800ea02:	6939      	ldr	r1, [r7, #16]
 800ea04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea06:	440b      	add	r3, r1
 800ea08:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ea0a:	441a      	add	r2, r3
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	601a      	str	r2, [r3, #0]
 800ea10:	e00a      	b.n	800ea28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800ea12:	7e7b      	ldrb	r3, [r7, #25]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d007      	beq.n	800ea28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800ea1c:	6939      	ldr	r1, [r7, #16]
 800ea1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea20:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ea22:	441a      	add	r2, r3
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ea28:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d114      	bne.n	800ea5a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800ea30:	7efb      	ldrb	r3, [r7, #27]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d011      	beq.n	800ea5a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800ea36:	f107 030c 	add.w	r3, r7, #12
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	2103      	movs	r1, #3
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f7ff fa0e 	bl	800de60 <get_sequence_step_timeout>
 800ea44:	4603      	mov	r3, r0
 800ea46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800ea4e:	68f9      	ldr	r1, [r7, #12]
 800ea50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea52:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ea54:	441a      	add	r2, r3
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ea5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d114      	bne.n	800ea8c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800ea62:	7f3b      	ldrb	r3, [r7, #28]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d011      	beq.n	800ea8c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800ea68:	f107 0314 	add.w	r3, r7, #20
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	2104      	movs	r1, #4
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f7ff f9f5 	bl	800de60 <get_sequence_step_timeout>
 800ea76:	4603      	mov	r3, r0
 800ea78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800ea80:	6979      	ldr	r1, [r7, #20]
 800ea82:	6a3b      	ldr	r3, [r7, #32]
 800ea84:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ea86:	441a      	add	r2, r3
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ea8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d103      	bne.n	800ea9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ea9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3740      	adds	r7, #64	; 0x40
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}

0800eaa8 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b088      	sub	sp, #32
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eab2:	2300      	movs	r3, #0
 800eab4:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800eab6:	2300      	movs	r3, #0
 800eab8:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800eaba:	e0c6      	b.n	800ec4a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	683a      	ldr	r2, [r7, #0]
 800eac0:	4413      	add	r3, r2
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	74fb      	strb	r3, [r7, #19]
		Index++;
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	3301      	adds	r3, #1
 800eaca:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800eacc:	7cfb      	ldrb	r3, [r7, #19]
 800eace:	2bff      	cmp	r3, #255	; 0xff
 800ead0:	f040 808d 	bne.w	800ebee <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	683a      	ldr	r2, [r7, #0]
 800ead8:	4413      	add	r3, r2
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	747b      	strb	r3, [r7, #17]
			Index++;
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	3301      	adds	r3, #1
 800eae2:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800eae4:	7c7b      	ldrb	r3, [r7, #17]
 800eae6:	2b03      	cmp	r3, #3
 800eae8:	d87e      	bhi.n	800ebe8 <VL53L0X_load_tuning_settings+0x140>
 800eaea:	a201      	add	r2, pc, #4	; (adr r2, 800eaf0 <VL53L0X_load_tuning_settings+0x48>)
 800eaec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf0:	0800eb01 	.word	0x0800eb01
 800eaf4:	0800eb3b 	.word	0x0800eb3b
 800eaf8:	0800eb75 	.word	0x0800eb75
 800eafc:	0800ebaf 	.word	0x0800ebaf
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	683a      	ldr	r2, [r7, #0]
 800eb04:	4413      	add	r3, r2
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	743b      	strb	r3, [r7, #16]
				Index++;
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	683a      	ldr	r2, [r7, #0]
 800eb14:	4413      	add	r3, r2
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	73fb      	strb	r3, [r7, #15]
				Index++;
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800eb20:	7c3b      	ldrb	r3, [r7, #16]
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	021b      	lsls	r3, r3, #8
 800eb26:	b29a      	uxth	r2, r3
 800eb28:	7bfb      	ldrb	r3, [r7, #15]
 800eb2a:	b29b      	uxth	r3, r3
 800eb2c:	4413      	add	r3, r2
 800eb2e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	89ba      	ldrh	r2, [r7, #12]
 800eb34:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800eb38:	e087      	b.n	800ec4a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	683a      	ldr	r2, [r7, #0]
 800eb3e:	4413      	add	r3, r2
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	743b      	strb	r3, [r7, #16]
				Index++;
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	3301      	adds	r3, #1
 800eb48:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	683a      	ldr	r2, [r7, #0]
 800eb4e:	4413      	add	r3, r2
 800eb50:	781b      	ldrb	r3, [r3, #0]
 800eb52:	73fb      	strb	r3, [r7, #15]
				Index++;
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	3301      	adds	r3, #1
 800eb58:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800eb5a:	7c3b      	ldrb	r3, [r7, #16]
 800eb5c:	b29b      	uxth	r3, r3
 800eb5e:	021b      	lsls	r3, r3, #8
 800eb60:	b29a      	uxth	r2, r3
 800eb62:	7bfb      	ldrb	r3, [r7, #15]
 800eb64:	b29b      	uxth	r3, r3
 800eb66:	4413      	add	r3, r2
 800eb68:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	89ba      	ldrh	r2, [r7, #12]
 800eb6e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800eb72:	e06a      	b.n	800ec4a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	683a      	ldr	r2, [r7, #0]
 800eb78:	4413      	add	r3, r2
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	743b      	strb	r3, [r7, #16]
				Index++;
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	3301      	adds	r3, #1
 800eb82:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	683a      	ldr	r2, [r7, #0]
 800eb88:	4413      	add	r3, r2
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	3301      	adds	r3, #1
 800eb92:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800eb94:	7c3b      	ldrb	r3, [r7, #16]
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	021b      	lsls	r3, r3, #8
 800eb9a:	b29a      	uxth	r2, r3
 800eb9c:	7bfb      	ldrb	r3, [r7, #15]
 800eb9e:	b29b      	uxth	r3, r3
 800eba0:	4413      	add	r3, r2
 800eba2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	89ba      	ldrh	r2, [r7, #12]
 800eba8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800ebac:	e04d      	b.n	800ec4a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	683a      	ldr	r2, [r7, #0]
 800ebb2:	4413      	add	r3, r2
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	743b      	strb	r3, [r7, #16]
				Index++;
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	3301      	adds	r3, #1
 800ebbc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	683a      	ldr	r2, [r7, #0]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	3301      	adds	r3, #1
 800ebcc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ebce:	7c3b      	ldrb	r3, [r7, #16]
 800ebd0:	b29b      	uxth	r3, r3
 800ebd2:	021b      	lsls	r3, r3, #8
 800ebd4:	b29a      	uxth	r2, r3
 800ebd6:	7bfb      	ldrb	r3, [r7, #15]
 800ebd8:	b29b      	uxth	r3, r3
 800ebda:	4413      	add	r3, r2
 800ebdc:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	89ba      	ldrh	r2, [r7, #12]
 800ebe2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800ebe6:	e030      	b.n	800ec4a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ebe8:	23fc      	movs	r3, #252	; 0xfc
 800ebea:	77fb      	strb	r3, [r7, #31]
 800ebec:	e02d      	b.n	800ec4a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800ebee:	7cfb      	ldrb	r3, [r7, #19]
 800ebf0:	2b04      	cmp	r3, #4
 800ebf2:	d828      	bhi.n	800ec46 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	683a      	ldr	r2, [r7, #0]
 800ebf8:	4413      	add	r3, r2
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	74bb      	strb	r3, [r7, #18]
			Index++;
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	3301      	adds	r3, #1
 800ec02:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800ec04:	2300      	movs	r3, #0
 800ec06:	61bb      	str	r3, [r7, #24]
 800ec08:	e00f      	b.n	800ec2a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	683a      	ldr	r2, [r7, #0]
 800ec0e:	4413      	add	r3, r2
 800ec10:	7819      	ldrb	r1, [r3, #0]
 800ec12:	f107 0208 	add.w	r2, r7, #8
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	4413      	add	r3, r2
 800ec1a:	460a      	mov	r2, r1
 800ec1c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	3301      	adds	r3, #1
 800ec22:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800ec24:	69bb      	ldr	r3, [r7, #24]
 800ec26:	3301      	adds	r3, #1
 800ec28:	61bb      	str	r3, [r7, #24]
 800ec2a:	7cfb      	ldrb	r3, [r7, #19]
 800ec2c:	69ba      	ldr	r2, [r7, #24]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	dbeb      	blt.n	800ec0a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800ec32:	7cfb      	ldrb	r3, [r7, #19]
 800ec34:	f107 0208 	add.w	r2, r7, #8
 800ec38:	7cb9      	ldrb	r1, [r7, #18]
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f000 fdee 	bl	800f81c <VL53L0X_WriteMulti>
 800ec40:	4603      	mov	r3, r0
 800ec42:	77fb      	strb	r3, [r7, #31]
 800ec44:	e001      	b.n	800ec4a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ec46:	23fc      	movs	r3, #252	; 0xfc
 800ec48:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	683a      	ldr	r2, [r7, #0]
 800ec4e:	4413      	add	r3, r2
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d004      	beq.n	800ec60 <VL53L0X_load_tuning_settings+0x1b8>
 800ec56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	f43f af2e 	beq.w	800eabc <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ec60:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3720      	adds	r7, #32
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b088      	sub	sp, #32
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	60f8      	str	r0, [r7, #12]
 800ec74:	60b9      	str	r1, [r7, #8]
 800ec76:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800ec82:	f107 0313 	add.w	r3, r7, #19
 800ec86:	4619      	mov	r1, r3
 800ec88:	68f8      	ldr	r0, [r7, #12]
 800ec8a:	f7fc fcf1 	bl	800b670 <VL53L0X_GetXTalkCompensationEnable>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800ec92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d111      	bne.n	800ecbe <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800ec9a:	7cfb      	ldrb	r3, [r7, #19]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d00e      	beq.n	800ecbe <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	6a1b      	ldr	r3, [r3, #32]
 800eca4:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	8a9b      	ldrh	r3, [r3, #20]
 800ecaa:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800ecac:	69bb      	ldr	r3, [r7, #24]
 800ecae:	fb02 f303 	mul.w	r3, r2, r3
 800ecb2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	3380      	adds	r3, #128	; 0x80
 800ecb8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800ecbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3720      	adds	r7, #32
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}

0800ecca <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800ecca:	b580      	push	{r7, lr}
 800eccc:	b086      	sub	sp, #24
 800ecce:	af00      	add	r7, sp, #0
 800ecd0:	60f8      	str	r0, [r7, #12]
 800ecd2:	60b9      	str	r1, [r7, #8]
 800ecd4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800ece2:	f107 0310 	add.w	r3, r7, #16
 800ece6:	461a      	mov	r2, r3
 800ece8:	68b9      	ldr	r1, [r7, #8]
 800ecea:	68f8      	ldr	r0, [r7, #12]
 800ecec:	f7ff ffbe 	bl	800ec6c <VL53L0X_get_total_xtalk_rate>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800ecf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d105      	bne.n	800ed08 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	441a      	add	r2, r3
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	601a      	str	r2, [r3, #0]

	return Status;
 800ed08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3718      	adds	r7, #24
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b09a      	sub	sp, #104	; 0x68
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	607a      	str	r2, [r7, #4]
 800ed20:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800ed22:	2312      	movs	r3, #18
 800ed24:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800ed26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ed2a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800ed2c:	2342      	movs	r3, #66	; 0x42
 800ed2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800ed30:	2306      	movs	r3, #6
 800ed32:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800ed34:	2307      	movs	r3, #7
 800ed36:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800ed44:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ed4c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800ed4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed52:	fb02 f303 	mul.w	r3, r2, r3
 800ed56:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800ed58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed5a:	3380      	adds	r3, #128	; 0x80
 800ed5c:	0a1b      	lsrs	r3, r3, #8
 800ed5e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800ed60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed64:	fb02 f303 	mul.w	r3, r2, r3
 800ed68:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d01a      	beq.n	800edaa <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	029b      	lsls	r3, r3, #10
 800ed78:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800ed7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed80:	4413      	add	r3, r2
 800ed82:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800ed84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed8c:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800ed8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ed90:	4613      	mov	r3, r2
 800ed92:	005b      	lsls	r3, r3, #1
 800ed94:	4413      	add	r3, r2
 800ed96:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800ed98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed9a:	fb03 f303 	mul.w	r3, r3, r3
 800ed9e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800eda0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eda2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800eda6:	0c1b      	lsrs	r3, r3, #16
 800eda8:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800edae:	fb02 f303 	mul.w	r3, r2, r3
 800edb2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800edb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800edba:	0c1b      	lsrs	r3, r3, #16
 800edbc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800edbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc0:	fb03 f303 	mul.w	r3, r3, r3
 800edc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800edc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800edc8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800edcc:	0c1b      	lsrs	r3, r3, #16
 800edce:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800edd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edd2:	085a      	lsrs	r2, r3, #1
 800edd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd6:	441a      	add	r2, r3
 800edd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edda:	fbb2 f3f3 	udiv	r3, r2, r3
 800edde:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800ede0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ede4:	fb02 f303 	mul.w	r3, r2, r3
 800ede8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800edea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edf0:	d302      	bcc.n	800edf8 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800edf2:	4b54      	ldr	r3, [pc, #336]	; (800ef44 <VL53L0X_calc_dmax+0x230>)
 800edf4:	663b      	str	r3, [r7, #96]	; 0x60
 800edf6:	e015      	b.n	800ee24 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800edf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edfa:	085a      	lsrs	r2, r3, #1
 800edfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800edfe:	441a      	add	r2, r3
 800ee00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee06:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800ee08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee0c:	fb02 f303 	mul.w	r3, r2, r3
 800ee10:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800ee12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee14:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ee18:	0c1b      	lsrs	r3, r3, #16
 800ee1a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800ee1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee1e:	fb03 f303 	mul.w	r3, r3, r3
 800ee22:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800ee24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee26:	039b      	lsls	r3, r3, #14
 800ee28:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ee2c:	4a46      	ldr	r2, [pc, #280]	; (800ef48 <VL53L0X_calc_dmax+0x234>)
 800ee2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ee32:	099b      	lsrs	r3, r3, #6
 800ee34:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800ee36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee38:	fb03 f303 	mul.w	r3, r3, r3
 800ee3c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800ee3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee40:	fb03 f303 	mul.w	r3, r3, r3
 800ee44:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800ee46:	6a3b      	ldr	r3, [r7, #32]
 800ee48:	3308      	adds	r3, #8
 800ee4a:	091b      	lsrs	r3, r3, #4
 800ee4c:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800ee4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee50:	6a3b      	ldr	r3, [r7, #32]
 800ee52:	1ad3      	subs	r3, r2, r3
 800ee54:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800ee56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee58:	4613      	mov	r3, r2
 800ee5a:	005b      	lsls	r3, r3, #1
 800ee5c:	4413      	add	r3, r2
 800ee5e:	011b      	lsls	r3, r3, #4
 800ee60:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800ee62:	69fb      	ldr	r3, [r7, #28]
 800ee64:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ee68:	0b9b      	lsrs	r3, r3, #14
 800ee6a:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800ee6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee70:	4413      	add	r3, r2
 800ee72:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800ee74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee76:	085b      	lsrs	r3, r3, #1
 800ee78:	69ba      	ldr	r2, [r7, #24]
 800ee7a:	4413      	add	r3, r2
 800ee7c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800ee7e:	69ba      	ldr	r2, [r7, #24]
 800ee80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee86:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	039b      	lsls	r3, r3, #14
 800ee8c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800ee8e:	69fb      	ldr	r3, [r7, #28]
 800ee90:	085b      	lsrs	r3, r3, #1
 800ee92:	69ba      	ldr	r2, [r7, #24]
 800ee94:	4413      	add	r3, r2
 800ee96:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800ee98:	69ba      	ldr	r2, [r7, #24]
 800ee9a:	69fb      	ldr	r3, [r7, #28]
 800ee9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800eea0:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800eea6:	fb02 f303 	mul.w	r3, r2, r3
 800eeaa:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800eeac:	69bb      	ldr	r3, [r7, #24]
 800eeae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800eeb2:	4a25      	ldr	r2, [pc, #148]	; (800ef48 <VL53L0X_calc_dmax+0x234>)
 800eeb4:	fba2 2303 	umull	r2, r3, r2, r3
 800eeb8:	099b      	lsrs	r3, r3, #6
 800eeba:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	011b      	lsls	r3, r3, #4
 800eec0:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800eec2:	69bb      	ldr	r3, [r7, #24]
 800eec4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800eec8:	4a1f      	ldr	r2, [pc, #124]	; (800ef48 <VL53L0X_calc_dmax+0x234>)
 800eeca:	fba2 2303 	umull	r2, r3, r2, r3
 800eece:	099b      	lsrs	r3, r3, #6
 800eed0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800eed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eed4:	3380      	adds	r3, #128	; 0x80
 800eed6:	0a1b      	lsrs	r3, r3, #8
 800eed8:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d008      	beq.n	800eef2 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	085a      	lsrs	r2, r3, #1
 800eee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eee6:	441a      	add	r2, r3
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	fbb2 f3f3 	udiv	r3, r2, r3
 800eeee:	65bb      	str	r3, [r7, #88]	; 0x58
 800eef0:	e001      	b.n	800eef6 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800eef2:	2300      	movs	r3, #0
 800eef4:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800eef6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800eef8:	f7fe f9ba 	bl	800d270 <VL53L0X_isqrt>
 800eefc:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800eefe:	69bb      	ldr	r3, [r7, #24]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d008      	beq.n	800ef16 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800ef04:	69bb      	ldr	r3, [r7, #24]
 800ef06:	085a      	lsrs	r2, r3, #1
 800ef08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef0a:	441a      	add	r2, r3
 800ef0c:	69bb      	ldr	r3, [r7, #24]
 800ef0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef12:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ef14:	e001      	b.n	800ef1a <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800ef16:	2300      	movs	r3, #0
 800ef18:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800ef1a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ef1c:	f7fe f9a8 	bl	800d270 <VL53L0X_isqrt>
 800ef20:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800ef22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ef24:	693a      	ldr	r2, [r7, #16]
 800ef26:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800ef28:	693a      	ldr	r2, [r7, #16]
 800ef2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d902      	bls.n	800ef36 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800ef30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ef32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ef34:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800ef36:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3768      	adds	r7, #104	; 0x68
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	fff00000 	.word	0xfff00000
 800ef48:	10624dd3 	.word	0x10624dd3

0800ef4c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b0b4      	sub	sp, #208	; 0xd0
 800ef50:	af04      	add	r7, sp, #16
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	60b9      	str	r1, [r7, #8]
 800ef56:	607a      	str	r2, [r7, #4]
 800ef58:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800ef5a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800ef5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800ef62:	f44f 7316 	mov.w	r3, #600	; 0x258
 800ef66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800ef6a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800ef6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800ef72:	f241 235c 	movw	r3, #4700	; 0x125c
 800ef76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800ef7a:	4b9e      	ldr	r3, [pc, #632]	; (800f1f4 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800ef7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800ef80:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800ef84:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800ef86:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800ef8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ef8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef92:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800ef94:	4b98      	ldr	r3, [pc, #608]	; (800f1f8 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800ef96:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800ef98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef9c:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800ef9e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800efa2:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800efa4:	f240 6377 	movw	r3, #1655	; 0x677
 800efa8:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800efaa:	2300      	movs	r3, #0
 800efac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	6a1b      	ldr	r3, [r3, #32]
 800efb4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	691b      	ldr	r3, [r3, #16]
 800efba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800efbe:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800efc2:	0c1b      	lsrs	r3, r3, #16
 800efc4:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	68db      	ldr	r3, [r3, #12]
 800efca:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800efcc:	f107 0310 	add.w	r3, r7, #16
 800efd0:	461a      	mov	r2, r3
 800efd2:	68b9      	ldr	r1, [r7, #8]
 800efd4:	68f8      	ldr	r0, [r7, #12]
 800efd6:	f7ff fe78 	bl	800ecca <VL53L0X_get_total_signal_rate>
 800efda:	4603      	mov	r3, r0
 800efdc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800efe0:	f107 0314 	add.w	r3, r7, #20
 800efe4:	461a      	mov	r2, r3
 800efe6:	68b9      	ldr	r1, [r7, #8]
 800efe8:	68f8      	ldr	r0, [r7, #12]
 800efea:	f7ff fe3f 	bl	800ec6c <VL53L0X_get_total_xtalk_rate>
 800efee:	4603      	mov	r3, r0
 800eff0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800effa:	fb02 f303 	mul.w	r3, r2, r3
 800effe:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800f000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f002:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f006:	0c1b      	lsrs	r3, r3, #16
 800f008:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f010:	fb02 f303 	mul.w	r3, r2, r3
 800f014:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800f018:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f01c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f01e:	429a      	cmp	r2, r3
 800f020:	d902      	bls.n	800f028 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800f022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f024:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800f028:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d168      	bne.n	800f102 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f036:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800f040:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f044:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f048:	461a      	mov	r2, r3
 800f04a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	f7fe feb2 	bl	800ddb8 <VL53L0X_calc_timeout_mclks>
 800f054:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f05c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800f066:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f06a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f06e:	461a      	mov	r2, r3
 800f070:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800f074:	68f8      	ldr	r0, [r7, #12]
 800f076:	f7fe fe9f 	bl	800ddb8 <VL53L0X_calc_timeout_mclks>
 800f07a:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800f07c:	2303      	movs	r3, #3
 800f07e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800f082:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f086:	2b08      	cmp	r3, #8
 800f088:	d102      	bne.n	800f090 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800f08a:	2302      	movs	r3, #2
 800f08c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800f090:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f094:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800f096:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f09a:	fb02 f303 	mul.w	r3, r2, r3
 800f09e:	02db      	lsls	r3, r3, #11
 800f0a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f0a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f0a8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f0ac:	4a53      	ldr	r2, [pc, #332]	; (800f1fc <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f0ae:	fba2 2303 	umull	r2, r3, r2, r3
 800f0b2:	099b      	lsrs	r3, r3, #6
 800f0b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800f0b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f0bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f0be:	fb02 f303 	mul.w	r3, r2, r3
 800f0c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f0c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f0ca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f0ce:	4a4b      	ldr	r2, [pc, #300]	; (800f1fc <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f0d0:	fba2 2303 	umull	r2, r3, r2, r3
 800f0d4:	099b      	lsrs	r3, r3, #6
 800f0d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	3380      	adds	r3, #128	; 0x80
 800f0de:	0a1b      	lsrs	r3, r3, #8
 800f0e0:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800f0e2:	693a      	ldr	r2, [r7, #16]
 800f0e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f0e8:	fb02 f303 	mul.w	r3, r2, r3
 800f0ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800f0f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f0f4:	3380      	adds	r3, #128	; 0x80
 800f0f6:	0a1b      	lsrs	r3, r3, #8
 800f0f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	021b      	lsls	r3, r3, #8
 800f100:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800f102:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f106:	2b00      	cmp	r3, #0
 800f108:	d002      	beq.n	800f110 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800f10a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f10e:	e15e      	b.n	800f3ce <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800f110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f112:	2b00      	cmp	r3, #0
 800f114:	d10c      	bne.n	800f130 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f11c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f124:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	2200      	movs	r2, #0
 800f12c:	601a      	str	r2, [r3, #0]
 800f12e:	e14c      	b.n	800f3ca <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800f130:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f134:	2b00      	cmp	r3, #0
 800f136:	d102      	bne.n	800f13e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800f138:	2301      	movs	r3, #1
 800f13a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800f13e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f142:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800f144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f146:	041a      	lsls	r2, r3, #16
 800f148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f14a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f14e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800f152:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f158:	429a      	cmp	r2, r3
 800f15a:	d902      	bls.n	800f162 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800f15c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f15e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800f162:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f166:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f16a:	fb02 f303 	mul.w	r3, r2, r3
 800f16e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800f172:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f176:	4613      	mov	r3, r2
 800f178:	005b      	lsls	r3, r3, #1
 800f17a:	4413      	add	r3, r2
 800f17c:	009b      	lsls	r3, r3, #2
 800f17e:	4618      	mov	r0, r3
 800f180:	f7fe f876 	bl	800d270 <VL53L0X_isqrt>
 800f184:	4603      	mov	r3, r0
 800f186:	005b      	lsls	r3, r3, #1
 800f188:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	891b      	ldrh	r3, [r3, #8]
 800f18e:	461a      	mov	r2, r3
 800f190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f192:	fb02 f303 	mul.w	r3, r2, r3
 800f196:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f19a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f19c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f1a0:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f1a2:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f1a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f1a8:	4a14      	ldr	r2, [pc, #80]	; (800f1fc <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f1aa:	fba2 2303 	umull	r2, r3, r2, r3
 800f1ae:	099b      	lsrs	r3, r3, #6
 800f1b0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800f1b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f1b4:	041b      	lsls	r3, r3, #16
 800f1b6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f1ba:	4a10      	ldr	r2, [pc, #64]	; (800f1fc <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f1bc:	fba2 2303 	umull	r2, r3, r2, r3
 800f1c0:	099b      	lsrs	r3, r3, #6
 800f1c2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800f1c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1c6:	021b      	lsls	r3, r3, #8
 800f1c8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800f1ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	bfb8      	it	lt
 800f1d6:	425b      	neglt	r3, r3
 800f1d8:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800f1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1dc:	021b      	lsls	r3, r3, #8
 800f1de:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	7e1b      	ldrb	r3, [r3, #24]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d00b      	beq.n	800f200 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800f1e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f1ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f1f0:	e033      	b.n	800f25a <VL53L0X_calc_sigma_estimate+0x30e>
 800f1f2:	bf00      	nop
 800f1f4:	028f87ae 	.word	0x028f87ae
 800f1f8:	0006999a 	.word	0x0006999a
 800f1fc:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800f200:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f202:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f206:	fbb2 f3f3 	udiv	r3, r2, r3
 800f20a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800f20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f210:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800f214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f218:	fb02 f303 	mul.w	r3, r2, r3
 800f21c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800f220:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f224:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f226:	4413      	add	r3, r2
 800f228:	0c1b      	lsrs	r3, r3, #16
 800f22a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800f22e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f232:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800f23a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f23e:	085b      	lsrs	r3, r3, #1
 800f240:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800f244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f248:	fb03 f303 	mul.w	r3, r3, r3
 800f24c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800f250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f254:	0b9b      	lsrs	r3, r3, #14
 800f256:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800f25a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f25e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f260:	fb02 f303 	mul.w	r3, r2, r3
 800f264:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800f266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f268:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f26c:	0c1b      	lsrs	r3, r3, #16
 800f26e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800f270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f272:	fb03 f303 	mul.w	r3, r3, r3
 800f276:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800f278:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f27c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800f27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f280:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f284:	0c1b      	lsrs	r3, r3, #16
 800f286:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800f288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28a:	fb03 f303 	mul.w	r3, r3, r3
 800f28e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800f290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f294:	4413      	add	r3, r2
 800f296:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800f298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f29a:	f7fd ffe9 	bl	800d270 <VL53L0X_isqrt>
 800f29e:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800f2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a2:	041b      	lsls	r3, r3, #16
 800f2a4:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800f2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a8:	3332      	adds	r3, #50	; 0x32
 800f2aa:	4a4b      	ldr	r2, [pc, #300]	; (800f3d8 <VL53L0X_calc_sigma_estimate+0x48c>)
 800f2ac:	fba2 2303 	umull	r2, r3, r2, r3
 800f2b0:	095a      	lsrs	r2, r3, #5
 800f2b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800f2bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f2c0:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800f2c4:	fb02 f303 	mul.w	r3, r2, r3
 800f2c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800f2cc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f2d0:	f241 3388 	movw	r3, #5000	; 0x1388
 800f2d4:	4413      	add	r3, r2
 800f2d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800f2da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f2de:	4a3f      	ldr	r2, [pc, #252]	; (800f3dc <VL53L0X_calc_sigma_estimate+0x490>)
 800f2e0:	fba2 2303 	umull	r2, r3, r2, r3
 800f2e4:	0b5b      	lsrs	r3, r3, #13
 800f2e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800f2ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f2ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d902      	bls.n	800f2fa <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800f2f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f2f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800f2fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f2fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f302:	4413      	add	r3, r2
 800f304:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800f308:	4a35      	ldr	r2, [pc, #212]	; (800f3e0 <VL53L0X_calc_sigma_estimate+0x494>)
 800f30a:	fba2 2303 	umull	r2, r3, r2, r3
 800f30e:	099b      	lsrs	r3, r3, #6
 800f310:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800f312:	6a3b      	ldr	r3, [r7, #32]
 800f314:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800f316:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f31a:	441a      	add	r2, r3
 800f31c:	6a3b      	ldr	r3, [r7, #32]
 800f31e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f322:	4618      	mov	r0, r3
 800f324:	f7fd ffa4 	bl	800d270 <VL53L0X_isqrt>
 800f328:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800f32a:	69fb      	ldr	r3, [r7, #28]
 800f32c:	021b      	lsls	r3, r3, #8
 800f32e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f336:	4a2a      	ldr	r2, [pc, #168]	; (800f3e0 <VL53L0X_calc_sigma_estimate+0x494>)
 800f338:	fba2 2303 	umull	r2, r3, r2, r3
 800f33c:	099b      	lsrs	r3, r3, #6
 800f33e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800f340:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f344:	fb03 f303 	mul.w	r3, r3, r3
 800f348:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800f34a:	69fb      	ldr	r3, [r7, #28]
 800f34c:	fb03 f303 	mul.w	r3, r3, r3
 800f350:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800f352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f356:	4413      	add	r3, r2
 800f358:	4618      	mov	r0, r3
 800f35a:	f7fd ff89 	bl	800d270 <VL53L0X_isqrt>
 800f35e:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800f360:	69bb      	ldr	r3, [r7, #24]
 800f362:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f366:	fb02 f303 	mul.w	r3, r2, r3
 800f36a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800f36e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f370:	2b00      	cmp	r3, #0
 800f372:	d009      	beq.n	800f388 <VL53L0X_calc_sigma_estimate+0x43c>
 800f374:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d005      	beq.n	800f388 <VL53L0X_calc_sigma_estimate+0x43c>
 800f37c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f380:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f384:	429a      	cmp	r2, r3
 800f386:	d903      	bls.n	800f390 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800f388:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f38c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f396:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800f3a2:	6939      	ldr	r1, [r7, #16]
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	9303      	str	r3, [sp, #12]
 800f3a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f3ac:	9302      	str	r3, [sp, #8]
 800f3ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f3b2:	9301      	str	r3, [sp, #4]
 800f3b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3b6:	9300      	str	r3, [sp, #0]
 800f3b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f3bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f3be:	68f8      	ldr	r0, [r7, #12]
 800f3c0:	f7ff fca8 	bl	800ed14 <VL53L0X_calc_dmax>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f3ca:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	37c0      	adds	r7, #192	; 0xc0
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	51eb851f 	.word	0x51eb851f
 800f3dc:	d1b71759 	.word	0xd1b71759
 800f3e0:	10624dd3 	.word	0x10624dd3

0800f3e4 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b090      	sub	sp, #64	; 0x40
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	607a      	str	r2, [r7, #4]
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	460b      	mov	r3, r1
 800f3f2:	72fb      	strb	r3, [r7, #11]
 800f3f4:	4613      	mov	r3, r2
 800f3f6:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800f3fe:	2300      	movs	r3, #0
 800f400:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800f404:	2300      	movs	r3, #0
 800f406:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800f40a:	2300      	movs	r3, #0
 800f40c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800f410:	2300      	movs	r3, #0
 800f412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800f416:	2300      	movs	r3, #0
 800f418:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800f41c:	2300      	movs	r3, #0
 800f41e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800f422:	2300      	movs	r3, #0
 800f424:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800f428:	2300      	movs	r3, #0
 800f42a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800f42e:	2300      	movs	r3, #0
 800f430:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800f432:	2300      	movs	r3, #0
 800f434:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800f436:	7afb      	ldrb	r3, [r7, #11]
 800f438:	10db      	asrs	r3, r3, #3
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	f003 030f 	and.w	r3, r3, #15
 800f440:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800f444:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d017      	beq.n	800f47c <VL53L0X_get_pal_range_status+0x98>
 800f44c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f450:	2b05      	cmp	r3, #5
 800f452:	d013      	beq.n	800f47c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800f454:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f458:	2b07      	cmp	r3, #7
 800f45a:	d00f      	beq.n	800f47c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800f45c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f460:	2b0c      	cmp	r3, #12
 800f462:	d00b      	beq.n	800f47c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800f464:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f468:	2b0d      	cmp	r3, #13
 800f46a:	d007      	beq.n	800f47c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800f46c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f470:	2b0e      	cmp	r3, #14
 800f472:	d003      	beq.n	800f47c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800f474:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f478:	2b0f      	cmp	r3, #15
 800f47a:	d103      	bne.n	800f484 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800f47c:	2301      	movs	r3, #1
 800f47e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800f482:	e002      	b.n	800f48a <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800f484:	2300      	movs	r3, #0
 800f486:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800f48a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d109      	bne.n	800f4a6 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f492:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800f496:	461a      	mov	r2, r3
 800f498:	2100      	movs	r1, #0
 800f49a:	68f8      	ldr	r0, [r7, #12]
 800f49c:	f7fc f9bc 	bl	800b818 <VL53L0X_GetLimitCheckEnable>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800f4a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d02e      	beq.n	800f50c <VL53L0X_get_pal_range_status+0x128>
 800f4ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d12a      	bne.n	800f50c <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800f4b6:	f107 0310 	add.w	r3, r7, #16
 800f4ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f4be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f4c0:	68f8      	ldr	r0, [r7, #12]
 800f4c2:	f7ff fd43 	bl	800ef4c <VL53L0X_calc_sigma_estimate>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800f4cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d103      	bne.n	800f4dc <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	b29a      	uxth	r2, r3
 800f4d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4da:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800f4dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d113      	bne.n	800f50c <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800f4e4:	f107 0320 	add.w	r3, r7, #32
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	f7fc fa19 	bl	800b924 <VL53L0X_GetLimitCheckValue>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800f4f8:	6a3b      	ldr	r3, [r7, #32]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d006      	beq.n	800f50c <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800f4fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f500:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800f502:	429a      	cmp	r2, r3
 800f504:	d902      	bls.n	800f50c <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800f506:	2301      	movs	r3, #1
 800f508:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800f50c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f510:	2b00      	cmp	r3, #0
 800f512:	d109      	bne.n	800f528 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f514:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800f518:	461a      	mov	r2, r3
 800f51a:	2102      	movs	r1, #2
 800f51c:	68f8      	ldr	r0, [r7, #12]
 800f51e:	f7fc f97b 	bl	800b818 <VL53L0X_GetLimitCheckEnable>
 800f522:	4603      	mov	r3, r0
 800f524:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800f528:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d044      	beq.n	800f5ba <VL53L0X_get_pal_range_status+0x1d6>
 800f530:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f534:	2b00      	cmp	r3, #0
 800f536:	d140      	bne.n	800f5ba <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800f538:	f107 031c 	add.w	r3, r7, #28
 800f53c:	461a      	mov	r2, r3
 800f53e:	2102      	movs	r1, #2
 800f540:	68f8      	ldr	r0, [r7, #12]
 800f542:	f7fc f9ef 	bl	800b924 <VL53L0X_GetLimitCheckValue>
 800f546:	4603      	mov	r3, r0
 800f548:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800f54c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f550:	2b00      	cmp	r3, #0
 800f552:	d107      	bne.n	800f564 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800f554:	2201      	movs	r2, #1
 800f556:	21ff      	movs	r1, #255	; 0xff
 800f558:	68f8      	ldr	r0, [r7, #12]
 800f55a:	f000 f9bb 	bl	800f8d4 <VL53L0X_WrByte>
 800f55e:	4603      	mov	r3, r0
 800f560:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800f564:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d109      	bne.n	800f580 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800f56c:	f107 0316 	add.w	r3, r7, #22
 800f570:	461a      	mov	r2, r3
 800f572:	21b6      	movs	r1, #182	; 0xb6
 800f574:	68f8      	ldr	r0, [r7, #12]
 800f576:	f000 fa59 	bl	800fa2c <VL53L0X_RdWord>
 800f57a:	4603      	mov	r3, r0
 800f57c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800f580:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f584:	2b00      	cmp	r3, #0
 800f586:	d107      	bne.n	800f598 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800f588:	2200      	movs	r2, #0
 800f58a:	21ff      	movs	r1, #255	; 0xff
 800f58c:	68f8      	ldr	r0, [r7, #12]
 800f58e:	f000 f9a1 	bl	800f8d4 <VL53L0X_WrByte>
 800f592:	4603      	mov	r3, r0
 800f594:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800f598:	8afb      	ldrh	r3, [r7, #22]
 800f59a:	025b      	lsls	r3, r3, #9
 800f59c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5a2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800f5a6:	69fb      	ldr	r3, [r7, #28]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d006      	beq.n	800f5ba <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800f5ac:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800f5ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d902      	bls.n	800f5ba <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800f5ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d109      	bne.n	800f5d6 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f5c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5c6:	461a      	mov	r2, r3
 800f5c8:	2103      	movs	r1, #3
 800f5ca:	68f8      	ldr	r0, [r7, #12]
 800f5cc:	f7fc f924 	bl	800b818 <VL53L0X_GetLimitCheckEnable>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800f5d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d023      	beq.n	800f626 <VL53L0X_get_pal_range_status+0x242>
 800f5de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d11f      	bne.n	800f626 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800f5e6:	893b      	ldrh	r3, [r7, #8]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d102      	bne.n	800f5f2 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	637b      	str	r3, [r7, #52]	; 0x34
 800f5f0:	e005      	b.n	800f5fe <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	021a      	lsls	r2, r3, #8
 800f5f6:	893b      	ldrh	r3, [r7, #8]
 800f5f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5fc:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800f5fe:	f107 0318 	add.w	r3, r7, #24
 800f602:	461a      	mov	r2, r3
 800f604:	2103      	movs	r1, #3
 800f606:	68f8      	ldr	r0, [r7, #12]
 800f608:	f7fc f98c 	bl	800b924 <VL53L0X_GetLimitCheckValue>
 800f60c:	4603      	mov	r3, r0
 800f60e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d006      	beq.n	800f626 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800f618:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800f61a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d202      	bcs.n	800f626 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800f620:	2301      	movs	r3, #1
 800f622:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f626:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d14a      	bne.n	800f6c4 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800f62e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f632:	2b01      	cmp	r3, #1
 800f634:	d103      	bne.n	800f63e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800f636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f638:	22ff      	movs	r2, #255	; 0xff
 800f63a:	701a      	strb	r2, [r3, #0]
 800f63c:	e042      	b.n	800f6c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800f63e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f642:	2b01      	cmp	r3, #1
 800f644:	d007      	beq.n	800f656 <VL53L0X_get_pal_range_status+0x272>
 800f646:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f64a:	2b02      	cmp	r3, #2
 800f64c:	d003      	beq.n	800f656 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800f64e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f652:	2b03      	cmp	r3, #3
 800f654:	d103      	bne.n	800f65e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800f656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f658:	2205      	movs	r2, #5
 800f65a:	701a      	strb	r2, [r3, #0]
 800f65c:	e032      	b.n	800f6c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800f65e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f662:	2b06      	cmp	r3, #6
 800f664:	d003      	beq.n	800f66e <VL53L0X_get_pal_range_status+0x28a>
 800f666:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f66a:	2b09      	cmp	r3, #9
 800f66c:	d103      	bne.n	800f676 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800f66e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f670:	2204      	movs	r2, #4
 800f672:	701a      	strb	r2, [r3, #0]
 800f674:	e026      	b.n	800f6c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800f676:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f67a:	2b08      	cmp	r3, #8
 800f67c:	d007      	beq.n	800f68e <VL53L0X_get_pal_range_status+0x2aa>
 800f67e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f682:	2b0a      	cmp	r3, #10
 800f684:	d003      	beq.n	800f68e <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800f686:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f68a:	2b01      	cmp	r3, #1
 800f68c:	d103      	bne.n	800f696 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800f68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f690:	2203      	movs	r2, #3
 800f692:	701a      	strb	r2, [r3, #0]
 800f694:	e016      	b.n	800f6c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800f696:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f69a:	2b04      	cmp	r3, #4
 800f69c:	d003      	beq.n	800f6a6 <VL53L0X_get_pal_range_status+0x2c2>
 800f69e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f6a2:	2b01      	cmp	r3, #1
 800f6a4:	d103      	bne.n	800f6ae <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800f6a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6a8:	2202      	movs	r2, #2
 800f6aa:	701a      	strb	r2, [r3, #0]
 800f6ac:	e00a      	b.n	800f6c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800f6ae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800f6b2:	2b01      	cmp	r3, #1
 800f6b4:	d103      	bne.n	800f6be <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800f6b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6b8:	2201      	movs	r2, #1
 800f6ba:	701a      	strb	r2, [r3, #0]
 800f6bc:	e002      	b.n	800f6c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800f6be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800f6c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d102      	bne.n	800f6d2 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800f6cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f6d2:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	2101      	movs	r1, #1
 800f6da:	68f8      	ldr	r0, [r7, #12]
 800f6dc:	f7fc f89c 	bl	800b818 <VL53L0X_GetLimitCheckEnable>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800f6e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d14f      	bne.n	800f78e <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800f6ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d003      	beq.n	800f6fe <VL53L0X_get_pal_range_status+0x31a>
 800f6f6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d103      	bne.n	800f706 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800f6fe:	2301      	movs	r3, #1
 800f700:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f704:	e002      	b.n	800f70c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800f706:	2300      	movs	r3, #0
 800f708:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f712:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800f716:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f71a:	2b04      	cmp	r3, #4
 800f71c:	d003      	beq.n	800f726 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800f71e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800f722:	2b00      	cmp	r3, #0
 800f724:	d103      	bne.n	800f72e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800f726:	2301      	movs	r3, #1
 800f728:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f72c:	e002      	b.n	800f734 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800f72e:	2300      	movs	r3, #0
 800f730:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f73a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800f73e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800f742:	2b00      	cmp	r3, #0
 800f744:	d003      	beq.n	800f74e <VL53L0X_get_pal_range_status+0x36a>
 800f746:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f74a:	2b01      	cmp	r3, #1
 800f74c:	d103      	bne.n	800f756 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800f74e:	2301      	movs	r3, #1
 800f750:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f754:	e002      	b.n	800f75c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800f756:	2300      	movs	r3, #0
 800f758:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f762:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800f766:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d003      	beq.n	800f776 <VL53L0X_get_pal_range_status+0x392>
 800f76e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f772:	2b01      	cmp	r3, #1
 800f774:	d103      	bne.n	800f77e <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800f776:	2301      	movs	r3, #1
 800f778:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f77c:	e002      	b.n	800f784 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800f77e:	2300      	movs	r3, #0
 800f780:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f78a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f78e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800f792:	4618      	mov	r0, r3
 800f794:	3740      	adds	r7, #64	; 0x40
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}

0800f79a <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f79a:	b580      	push	{r7, lr}
 800f79c:	b088      	sub	sp, #32
 800f79e:	af02      	add	r7, sp, #8
 800f7a0:	60f8      	str	r0, [r7, #12]
 800f7a2:	60b9      	str	r1, [r7, #8]
 800f7a4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	330a      	adds	r3, #10
 800f7aa:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800f7b8:	b299      	uxth	r1, r3
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	b29a      	uxth	r2, r3
 800f7be:	697b      	ldr	r3, [r7, #20]
 800f7c0:	9300      	str	r3, [sp, #0]
 800f7c2:	4613      	mov	r3, r2
 800f7c4:	68ba      	ldr	r2, [r7, #8]
 800f7c6:	f7f4 fa81 	bl	8003ccc <HAL_I2C_Master_Transmit>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f7ce:	693b      	ldr	r3, [r7, #16]
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3718      	adds	r7, #24
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b088      	sub	sp, #32
 800f7dc:	af02      	add	r7, sp, #8
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	60b9      	str	r1, [r7, #8]
 800f7e2:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	330a      	adds	r3, #10
 800f7e8:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800f7f6:	f043 0301 	orr.w	r3, r3, #1
 800f7fa:	b2db      	uxtb	r3, r3
 800f7fc:	b299      	uxth	r1, r3
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	b29a      	uxth	r2, r3
 800f802:	697b      	ldr	r3, [r7, #20]
 800f804:	9300      	str	r3, [sp, #0]
 800f806:	4613      	mov	r3, r2
 800f808:	68ba      	ldr	r2, [r7, #8]
 800f80a:	f7f4 fb53 	bl	8003eb4 <HAL_I2C_Master_Receive>
 800f80e:	4603      	mov	r3, r0
 800f810:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f812:	693b      	ldr	r3, [r7, #16]
}
 800f814:	4618      	mov	r0, r3
 800f816:	3718      	adds	r7, #24
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b086      	sub	sp, #24
 800f820:	af00      	add	r7, sp, #0
 800f822:	60f8      	str	r0, [r7, #12]
 800f824:	607a      	str	r2, [r7, #4]
 800f826:	603b      	str	r3, [r7, #0]
 800f828:	460b      	mov	r3, r1
 800f82a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f82c:	2300      	movs	r3, #0
 800f82e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	2b3f      	cmp	r3, #63	; 0x3f
 800f834:	d902      	bls.n	800f83c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800f836:	f06f 0303 	mvn.w	r3, #3
 800f83a:	e016      	b.n	800f86a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800f83c:	4a0d      	ldr	r2, [pc, #52]	; (800f874 <VL53L0X_WriteMulti+0x58>)
 800f83e:	7afb      	ldrb	r3, [r7, #11]
 800f840:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800f842:	683a      	ldr	r2, [r7, #0]
 800f844:	6879      	ldr	r1, [r7, #4]
 800f846:	480c      	ldr	r0, [pc, #48]	; (800f878 <VL53L0X_WriteMulti+0x5c>)
 800f848:	f000 f99e 	bl	800fb88 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	3301      	adds	r3, #1
 800f850:	461a      	mov	r2, r3
 800f852:	4908      	ldr	r1, [pc, #32]	; (800f874 <VL53L0X_WriteMulti+0x58>)
 800f854:	68f8      	ldr	r0, [r7, #12]
 800f856:	f7ff ffa0 	bl	800f79a <_I2CWrite>
 800f85a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d001      	beq.n	800f866 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f862:	23ec      	movs	r3, #236	; 0xec
 800f864:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800f866:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	3718      	adds	r7, #24
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}
 800f872:	bf00      	nop
 800f874:	20000728 	.word	0x20000728
 800f878:	20000729 	.word	0x20000729

0800f87c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b086      	sub	sp, #24
 800f880:	af00      	add	r7, sp, #0
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	607a      	str	r2, [r7, #4]
 800f886:	603b      	str	r3, [r7, #0]
 800f888:	460b      	mov	r3, r1
 800f88a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f88c:	2300      	movs	r3, #0
 800f88e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800f890:	f107 030b 	add.w	r3, r7, #11
 800f894:	2201      	movs	r2, #1
 800f896:	4619      	mov	r1, r3
 800f898:	68f8      	ldr	r0, [r7, #12]
 800f89a:	f7ff ff7e 	bl	800f79a <_I2CWrite>
 800f89e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d002      	beq.n	800f8ac <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f8a6:	23ec      	movs	r3, #236	; 0xec
 800f8a8:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f8aa:	e00c      	b.n	800f8c6 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800f8ac:	683a      	ldr	r2, [r7, #0]
 800f8ae:	6879      	ldr	r1, [r7, #4]
 800f8b0:	68f8      	ldr	r0, [r7, #12]
 800f8b2:	f7ff ff91 	bl	800f7d8 <_I2CRead>
 800f8b6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d002      	beq.n	800f8c4 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f8be:	23ec      	movs	r3, #236	; 0xec
 800f8c0:	75fb      	strb	r3, [r7, #23]
 800f8c2:	e000      	b.n	800f8c6 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800f8c4:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800f8c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3718      	adds	r7, #24
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
	...

0800f8d4 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b084      	sub	sp, #16
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	460b      	mov	r3, r1
 800f8de:	70fb      	strb	r3, [r7, #3]
 800f8e0:	4613      	mov	r3, r2
 800f8e2:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800f8e8:	4a0b      	ldr	r2, [pc, #44]	; (800f918 <VL53L0X_WrByte+0x44>)
 800f8ea:	78fb      	ldrb	r3, [r7, #3]
 800f8ec:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800f8ee:	4a0a      	ldr	r2, [pc, #40]	; (800f918 <VL53L0X_WrByte+0x44>)
 800f8f0:	78bb      	ldrb	r3, [r7, #2]
 800f8f2:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800f8f4:	2202      	movs	r2, #2
 800f8f6:	4908      	ldr	r1, [pc, #32]	; (800f918 <VL53L0X_WrByte+0x44>)
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f7ff ff4e 	bl	800f79a <_I2CWrite>
 800f8fe:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d001      	beq.n	800f90a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f906:	23ec      	movs	r3, #236	; 0xec
 800f908:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800f90a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f90e:	4618      	mov	r0, r3
 800f910:	3710      	adds	r7, #16
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}
 800f916:	bf00      	nop
 800f918:	20000728 	.word	0x20000728

0800f91c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b084      	sub	sp, #16
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	460b      	mov	r3, r1
 800f926:	70fb      	strb	r3, [r7, #3]
 800f928:	4613      	mov	r3, r2
 800f92a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f92c:	2300      	movs	r3, #0
 800f92e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800f930:	4a0e      	ldr	r2, [pc, #56]	; (800f96c <VL53L0X_WrWord+0x50>)
 800f932:	78fb      	ldrb	r3, [r7, #3]
 800f934:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800f936:	883b      	ldrh	r3, [r7, #0]
 800f938:	0a1b      	lsrs	r3, r3, #8
 800f93a:	b29b      	uxth	r3, r3
 800f93c:	b2da      	uxtb	r2, r3
 800f93e:	4b0b      	ldr	r3, [pc, #44]	; (800f96c <VL53L0X_WrWord+0x50>)
 800f940:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800f942:	883b      	ldrh	r3, [r7, #0]
 800f944:	b2da      	uxtb	r2, r3
 800f946:	4b09      	ldr	r3, [pc, #36]	; (800f96c <VL53L0X_WrWord+0x50>)
 800f948:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800f94a:	2203      	movs	r2, #3
 800f94c:	4907      	ldr	r1, [pc, #28]	; (800f96c <VL53L0X_WrWord+0x50>)
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f7ff ff23 	bl	800f79a <_I2CWrite>
 800f954:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d001      	beq.n	800f960 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f95c:	23ec      	movs	r3, #236	; 0xec
 800f95e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800f960:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f964:	4618      	mov	r0, r3
 800f966:	3710      	adds	r7, #16
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}
 800f96c:	20000728 	.word	0x20000728

0800f970 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800f970:	b580      	push	{r7, lr}
 800f972:	b084      	sub	sp, #16
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	4608      	mov	r0, r1
 800f97a:	4611      	mov	r1, r2
 800f97c:	461a      	mov	r2, r3
 800f97e:	4603      	mov	r3, r0
 800f980:	70fb      	strb	r3, [r7, #3]
 800f982:	460b      	mov	r3, r1
 800f984:	70bb      	strb	r3, [r7, #2]
 800f986:	4613      	mov	r3, r2
 800f988:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f98a:	2300      	movs	r3, #0
 800f98c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800f98e:	f107 020e 	add.w	r2, r7, #14
 800f992:	78fb      	ldrb	r3, [r7, #3]
 800f994:	4619      	mov	r1, r3
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f000 f81e 	bl	800f9d8 <VL53L0X_RdByte>
 800f99c:	4603      	mov	r3, r0
 800f99e:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800f9a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d110      	bne.n	800f9ca <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800f9a8:	7bba      	ldrb	r2, [r7, #14]
 800f9aa:	78bb      	ldrb	r3, [r7, #2]
 800f9ac:	4013      	ands	r3, r2
 800f9ae:	b2da      	uxtb	r2, r3
 800f9b0:	787b      	ldrb	r3, [r7, #1]
 800f9b2:	4313      	orrs	r3, r2
 800f9b4:	b2db      	uxtb	r3, r3
 800f9b6:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800f9b8:	7bba      	ldrb	r2, [r7, #14]
 800f9ba:	78fb      	ldrb	r3, [r7, #3]
 800f9bc:	4619      	mov	r1, r3
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f7ff ff88 	bl	800f8d4 <VL53L0X_WrByte>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	73fb      	strb	r3, [r7, #15]
 800f9c8:	e000      	b.n	800f9cc <VL53L0X_UpdateByte+0x5c>
        goto done;
 800f9ca:	bf00      	nop
done:
    return Status;
 800f9cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3710      	adds	r7, #16
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b086      	sub	sp, #24
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	607a      	str	r2, [r7, #4]
 800f9e4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800f9ea:	f107 030b 	add.w	r3, r7, #11
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	68f8      	ldr	r0, [r7, #12]
 800f9f4:	f7ff fed1 	bl	800f79a <_I2CWrite>
 800f9f8:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d002      	beq.n	800fa06 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fa00:	23ec      	movs	r3, #236	; 0xec
 800fa02:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fa04:	e00c      	b.n	800fa20 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800fa06:	2201      	movs	r2, #1
 800fa08:	6879      	ldr	r1, [r7, #4]
 800fa0a:	68f8      	ldr	r0, [r7, #12]
 800fa0c:	f7ff fee4 	bl	800f7d8 <_I2CRead>
 800fa10:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d002      	beq.n	800fa1e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fa18:	23ec      	movs	r3, #236	; 0xec
 800fa1a:	75fb      	strb	r3, [r7, #23]
 800fa1c:	e000      	b.n	800fa20 <VL53L0X_RdByte+0x48>
    }
done:
 800fa1e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800fa20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3718      	adds	r7, #24
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}

0800fa2c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b086      	sub	sp, #24
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	60f8      	str	r0, [r7, #12]
 800fa34:	460b      	mov	r3, r1
 800fa36:	607a      	str	r2, [r7, #4]
 800fa38:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fa3e:	f107 030b 	add.w	r3, r7, #11
 800fa42:	2201      	movs	r2, #1
 800fa44:	4619      	mov	r1, r3
 800fa46:	68f8      	ldr	r0, [r7, #12]
 800fa48:	f7ff fea7 	bl	800f79a <_I2CWrite>
 800fa4c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d002      	beq.n	800fa5a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fa54:	23ec      	movs	r3, #236	; 0xec
 800fa56:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fa58:	e017      	b.n	800fa8a <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800fa5a:	2202      	movs	r2, #2
 800fa5c:	490e      	ldr	r1, [pc, #56]	; (800fa98 <VL53L0X_RdWord+0x6c>)
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f7ff feba 	bl	800f7d8 <_I2CRead>
 800fa64:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d002      	beq.n	800fa72 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fa6c:	23ec      	movs	r3, #236	; 0xec
 800fa6e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fa70:	e00b      	b.n	800fa8a <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800fa72:	4b09      	ldr	r3, [pc, #36]	; (800fa98 <VL53L0X_RdWord+0x6c>)
 800fa74:	781b      	ldrb	r3, [r3, #0]
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	021b      	lsls	r3, r3, #8
 800fa7a:	b29a      	uxth	r2, r3
 800fa7c:	4b06      	ldr	r3, [pc, #24]	; (800fa98 <VL53L0X_RdWord+0x6c>)
 800fa7e:	785b      	ldrb	r3, [r3, #1]
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	4413      	add	r3, r2
 800fa84:	b29a      	uxth	r2, r3
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800fa8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3718      	adds	r7, #24
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	bf00      	nop
 800fa98:	20000728 	.word	0x20000728

0800fa9c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b086      	sub	sp, #24
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	60f8      	str	r0, [r7, #12]
 800faa4:	460b      	mov	r3, r1
 800faa6:	607a      	str	r2, [r7, #4]
 800faa8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800faaa:	2300      	movs	r3, #0
 800faac:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800faae:	f107 030b 	add.w	r3, r7, #11
 800fab2:	2201      	movs	r2, #1
 800fab4:	4619      	mov	r1, r3
 800fab6:	68f8      	ldr	r0, [r7, #12]
 800fab8:	f7ff fe6f 	bl	800f79a <_I2CWrite>
 800fabc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d002      	beq.n	800faca <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fac4:	23ec      	movs	r3, #236	; 0xec
 800fac6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fac8:	e01b      	b.n	800fb02 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800faca:	2204      	movs	r2, #4
 800facc:	4910      	ldr	r1, [pc, #64]	; (800fb10 <VL53L0X_RdDWord+0x74>)
 800face:	68f8      	ldr	r0, [r7, #12]
 800fad0:	f7ff fe82 	bl	800f7d8 <_I2CRead>
 800fad4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fad6:	693b      	ldr	r3, [r7, #16]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d002      	beq.n	800fae2 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fadc:	23ec      	movs	r3, #236	; 0xec
 800fade:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fae0:	e00f      	b.n	800fb02 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800fae2:	4b0b      	ldr	r3, [pc, #44]	; (800fb10 <VL53L0X_RdDWord+0x74>)
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	061a      	lsls	r2, r3, #24
 800fae8:	4b09      	ldr	r3, [pc, #36]	; (800fb10 <VL53L0X_RdDWord+0x74>)
 800faea:	785b      	ldrb	r3, [r3, #1]
 800faec:	041b      	lsls	r3, r3, #16
 800faee:	441a      	add	r2, r3
 800faf0:	4b07      	ldr	r3, [pc, #28]	; (800fb10 <VL53L0X_RdDWord+0x74>)
 800faf2:	789b      	ldrb	r3, [r3, #2]
 800faf4:	021b      	lsls	r3, r3, #8
 800faf6:	4413      	add	r3, r2
 800faf8:	4a05      	ldr	r2, [pc, #20]	; (800fb10 <VL53L0X_RdDWord+0x74>)
 800fafa:	78d2      	ldrb	r2, [r2, #3]
 800fafc:	441a      	add	r2, r3
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800fb02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3718      	adds	r7, #24
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	20000728 	.word	0x20000728

0800fb14 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b084      	sub	sp, #16
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800fb20:	2002      	movs	r0, #2
 800fb22:	f7f3 f9d9 	bl	8002ed8 <HAL_Delay>
    return status;
 800fb26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3710      	adds	r7, #16
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
	...

0800fb34 <__errno>:
 800fb34:	4b01      	ldr	r3, [pc, #4]	; (800fb3c <__errno+0x8>)
 800fb36:	6818      	ldr	r0, [r3, #0]
 800fb38:	4770      	bx	lr
 800fb3a:	bf00      	nop
 800fb3c:	200002c8 	.word	0x200002c8

0800fb40 <__libc_init_array>:
 800fb40:	b570      	push	{r4, r5, r6, lr}
 800fb42:	4d0d      	ldr	r5, [pc, #52]	; (800fb78 <__libc_init_array+0x38>)
 800fb44:	4c0d      	ldr	r4, [pc, #52]	; (800fb7c <__libc_init_array+0x3c>)
 800fb46:	1b64      	subs	r4, r4, r5
 800fb48:	10a4      	asrs	r4, r4, #2
 800fb4a:	2600      	movs	r6, #0
 800fb4c:	42a6      	cmp	r6, r4
 800fb4e:	d109      	bne.n	800fb64 <__libc_init_array+0x24>
 800fb50:	4d0b      	ldr	r5, [pc, #44]	; (800fb80 <__libc_init_array+0x40>)
 800fb52:	4c0c      	ldr	r4, [pc, #48]	; (800fb84 <__libc_init_array+0x44>)
 800fb54:	f005 f8ce 	bl	8014cf4 <_init>
 800fb58:	1b64      	subs	r4, r4, r5
 800fb5a:	10a4      	asrs	r4, r4, #2
 800fb5c:	2600      	movs	r6, #0
 800fb5e:	42a6      	cmp	r6, r4
 800fb60:	d105      	bne.n	800fb6e <__libc_init_array+0x2e>
 800fb62:	bd70      	pop	{r4, r5, r6, pc}
 800fb64:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb68:	4798      	blx	r3
 800fb6a:	3601      	adds	r6, #1
 800fb6c:	e7ee      	b.n	800fb4c <__libc_init_array+0xc>
 800fb6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb72:	4798      	blx	r3
 800fb74:	3601      	adds	r6, #1
 800fb76:	e7f2      	b.n	800fb5e <__libc_init_array+0x1e>
 800fb78:	08015704 	.word	0x08015704
 800fb7c:	08015704 	.word	0x08015704
 800fb80:	08015704 	.word	0x08015704
 800fb84:	08015708 	.word	0x08015708

0800fb88 <memcpy>:
 800fb88:	440a      	add	r2, r1
 800fb8a:	4291      	cmp	r1, r2
 800fb8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb90:	d100      	bne.n	800fb94 <memcpy+0xc>
 800fb92:	4770      	bx	lr
 800fb94:	b510      	push	{r4, lr}
 800fb96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb9e:	4291      	cmp	r1, r2
 800fba0:	d1f9      	bne.n	800fb96 <memcpy+0xe>
 800fba2:	bd10      	pop	{r4, pc}

0800fba4 <memset>:
 800fba4:	4402      	add	r2, r0
 800fba6:	4603      	mov	r3, r0
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	d100      	bne.n	800fbae <memset+0xa>
 800fbac:	4770      	bx	lr
 800fbae:	f803 1b01 	strb.w	r1, [r3], #1
 800fbb2:	e7f9      	b.n	800fba8 <memset+0x4>

0800fbb4 <__cvt>:
 800fbb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fbb8:	ec55 4b10 	vmov	r4, r5, d0
 800fbbc:	2d00      	cmp	r5, #0
 800fbbe:	460e      	mov	r6, r1
 800fbc0:	4619      	mov	r1, r3
 800fbc2:	462b      	mov	r3, r5
 800fbc4:	bfbb      	ittet	lt
 800fbc6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fbca:	461d      	movlt	r5, r3
 800fbcc:	2300      	movge	r3, #0
 800fbce:	232d      	movlt	r3, #45	; 0x2d
 800fbd0:	700b      	strb	r3, [r1, #0]
 800fbd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fbd4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fbd8:	4691      	mov	r9, r2
 800fbda:	f023 0820 	bic.w	r8, r3, #32
 800fbde:	bfbc      	itt	lt
 800fbe0:	4622      	movlt	r2, r4
 800fbe2:	4614      	movlt	r4, r2
 800fbe4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fbe8:	d005      	beq.n	800fbf6 <__cvt+0x42>
 800fbea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fbee:	d100      	bne.n	800fbf2 <__cvt+0x3e>
 800fbf0:	3601      	adds	r6, #1
 800fbf2:	2102      	movs	r1, #2
 800fbf4:	e000      	b.n	800fbf8 <__cvt+0x44>
 800fbf6:	2103      	movs	r1, #3
 800fbf8:	ab03      	add	r3, sp, #12
 800fbfa:	9301      	str	r3, [sp, #4]
 800fbfc:	ab02      	add	r3, sp, #8
 800fbfe:	9300      	str	r3, [sp, #0]
 800fc00:	ec45 4b10 	vmov	d0, r4, r5
 800fc04:	4653      	mov	r3, sl
 800fc06:	4632      	mov	r2, r6
 800fc08:	f001 fe5e 	bl	80118c8 <_dtoa_r>
 800fc0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fc10:	4607      	mov	r7, r0
 800fc12:	d102      	bne.n	800fc1a <__cvt+0x66>
 800fc14:	f019 0f01 	tst.w	r9, #1
 800fc18:	d022      	beq.n	800fc60 <__cvt+0xac>
 800fc1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fc1e:	eb07 0906 	add.w	r9, r7, r6
 800fc22:	d110      	bne.n	800fc46 <__cvt+0x92>
 800fc24:	783b      	ldrb	r3, [r7, #0]
 800fc26:	2b30      	cmp	r3, #48	; 0x30
 800fc28:	d10a      	bne.n	800fc40 <__cvt+0x8c>
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	4620      	mov	r0, r4
 800fc30:	4629      	mov	r1, r5
 800fc32:	f7f0 ff69 	bl	8000b08 <__aeabi_dcmpeq>
 800fc36:	b918      	cbnz	r0, 800fc40 <__cvt+0x8c>
 800fc38:	f1c6 0601 	rsb	r6, r6, #1
 800fc3c:	f8ca 6000 	str.w	r6, [sl]
 800fc40:	f8da 3000 	ldr.w	r3, [sl]
 800fc44:	4499      	add	r9, r3
 800fc46:	2200      	movs	r2, #0
 800fc48:	2300      	movs	r3, #0
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	4629      	mov	r1, r5
 800fc4e:	f7f0 ff5b 	bl	8000b08 <__aeabi_dcmpeq>
 800fc52:	b108      	cbz	r0, 800fc58 <__cvt+0xa4>
 800fc54:	f8cd 900c 	str.w	r9, [sp, #12]
 800fc58:	2230      	movs	r2, #48	; 0x30
 800fc5a:	9b03      	ldr	r3, [sp, #12]
 800fc5c:	454b      	cmp	r3, r9
 800fc5e:	d307      	bcc.n	800fc70 <__cvt+0xbc>
 800fc60:	9b03      	ldr	r3, [sp, #12]
 800fc62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc64:	1bdb      	subs	r3, r3, r7
 800fc66:	4638      	mov	r0, r7
 800fc68:	6013      	str	r3, [r2, #0]
 800fc6a:	b004      	add	sp, #16
 800fc6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc70:	1c59      	adds	r1, r3, #1
 800fc72:	9103      	str	r1, [sp, #12]
 800fc74:	701a      	strb	r2, [r3, #0]
 800fc76:	e7f0      	b.n	800fc5a <__cvt+0xa6>

0800fc78 <__exponent>:
 800fc78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	2900      	cmp	r1, #0
 800fc7e:	bfb8      	it	lt
 800fc80:	4249      	neglt	r1, r1
 800fc82:	f803 2b02 	strb.w	r2, [r3], #2
 800fc86:	bfb4      	ite	lt
 800fc88:	222d      	movlt	r2, #45	; 0x2d
 800fc8a:	222b      	movge	r2, #43	; 0x2b
 800fc8c:	2909      	cmp	r1, #9
 800fc8e:	7042      	strb	r2, [r0, #1]
 800fc90:	dd2a      	ble.n	800fce8 <__exponent+0x70>
 800fc92:	f10d 0407 	add.w	r4, sp, #7
 800fc96:	46a4      	mov	ip, r4
 800fc98:	270a      	movs	r7, #10
 800fc9a:	46a6      	mov	lr, r4
 800fc9c:	460a      	mov	r2, r1
 800fc9e:	fb91 f6f7 	sdiv	r6, r1, r7
 800fca2:	fb07 1516 	mls	r5, r7, r6, r1
 800fca6:	3530      	adds	r5, #48	; 0x30
 800fca8:	2a63      	cmp	r2, #99	; 0x63
 800fcaa:	f104 34ff 	add.w	r4, r4, #4294967295
 800fcae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fcb2:	4631      	mov	r1, r6
 800fcb4:	dcf1      	bgt.n	800fc9a <__exponent+0x22>
 800fcb6:	3130      	adds	r1, #48	; 0x30
 800fcb8:	f1ae 0502 	sub.w	r5, lr, #2
 800fcbc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fcc0:	1c44      	adds	r4, r0, #1
 800fcc2:	4629      	mov	r1, r5
 800fcc4:	4561      	cmp	r1, ip
 800fcc6:	d30a      	bcc.n	800fcde <__exponent+0x66>
 800fcc8:	f10d 0209 	add.w	r2, sp, #9
 800fccc:	eba2 020e 	sub.w	r2, r2, lr
 800fcd0:	4565      	cmp	r5, ip
 800fcd2:	bf88      	it	hi
 800fcd4:	2200      	movhi	r2, #0
 800fcd6:	4413      	add	r3, r2
 800fcd8:	1a18      	subs	r0, r3, r0
 800fcda:	b003      	add	sp, #12
 800fcdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fce2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fce6:	e7ed      	b.n	800fcc4 <__exponent+0x4c>
 800fce8:	2330      	movs	r3, #48	; 0x30
 800fcea:	3130      	adds	r1, #48	; 0x30
 800fcec:	7083      	strb	r3, [r0, #2]
 800fcee:	70c1      	strb	r1, [r0, #3]
 800fcf0:	1d03      	adds	r3, r0, #4
 800fcf2:	e7f1      	b.n	800fcd8 <__exponent+0x60>

0800fcf4 <_printf_float>:
 800fcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf8:	ed2d 8b02 	vpush	{d8}
 800fcfc:	b08d      	sub	sp, #52	; 0x34
 800fcfe:	460c      	mov	r4, r1
 800fd00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fd04:	4616      	mov	r6, r2
 800fd06:	461f      	mov	r7, r3
 800fd08:	4605      	mov	r5, r0
 800fd0a:	f002 ff3b 	bl	8012b84 <_localeconv_r>
 800fd0e:	f8d0 a000 	ldr.w	sl, [r0]
 800fd12:	4650      	mov	r0, sl
 800fd14:	f7f0 fa7c 	bl	8000210 <strlen>
 800fd18:	2300      	movs	r3, #0
 800fd1a:	930a      	str	r3, [sp, #40]	; 0x28
 800fd1c:	6823      	ldr	r3, [r4, #0]
 800fd1e:	9305      	str	r3, [sp, #20]
 800fd20:	f8d8 3000 	ldr.w	r3, [r8]
 800fd24:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fd28:	3307      	adds	r3, #7
 800fd2a:	f023 0307 	bic.w	r3, r3, #7
 800fd2e:	f103 0208 	add.w	r2, r3, #8
 800fd32:	f8c8 2000 	str.w	r2, [r8]
 800fd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fd3e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fd42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fd46:	9307      	str	r3, [sp, #28]
 800fd48:	f8cd 8018 	str.w	r8, [sp, #24]
 800fd4c:	ee08 0a10 	vmov	s16, r0
 800fd50:	4b9f      	ldr	r3, [pc, #636]	; (800ffd0 <_printf_float+0x2dc>)
 800fd52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fd56:	f04f 32ff 	mov.w	r2, #4294967295
 800fd5a:	f7f0 ff07 	bl	8000b6c <__aeabi_dcmpun>
 800fd5e:	bb88      	cbnz	r0, 800fdc4 <_printf_float+0xd0>
 800fd60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fd64:	4b9a      	ldr	r3, [pc, #616]	; (800ffd0 <_printf_float+0x2dc>)
 800fd66:	f04f 32ff 	mov.w	r2, #4294967295
 800fd6a:	f7f0 fee1 	bl	8000b30 <__aeabi_dcmple>
 800fd6e:	bb48      	cbnz	r0, 800fdc4 <_printf_float+0xd0>
 800fd70:	2200      	movs	r2, #0
 800fd72:	2300      	movs	r3, #0
 800fd74:	4640      	mov	r0, r8
 800fd76:	4649      	mov	r1, r9
 800fd78:	f7f0 fed0 	bl	8000b1c <__aeabi_dcmplt>
 800fd7c:	b110      	cbz	r0, 800fd84 <_printf_float+0x90>
 800fd7e:	232d      	movs	r3, #45	; 0x2d
 800fd80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd84:	4b93      	ldr	r3, [pc, #588]	; (800ffd4 <_printf_float+0x2e0>)
 800fd86:	4894      	ldr	r0, [pc, #592]	; (800ffd8 <_printf_float+0x2e4>)
 800fd88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fd8c:	bf94      	ite	ls
 800fd8e:	4698      	movls	r8, r3
 800fd90:	4680      	movhi	r8, r0
 800fd92:	2303      	movs	r3, #3
 800fd94:	6123      	str	r3, [r4, #16]
 800fd96:	9b05      	ldr	r3, [sp, #20]
 800fd98:	f023 0204 	bic.w	r2, r3, #4
 800fd9c:	6022      	str	r2, [r4, #0]
 800fd9e:	f04f 0900 	mov.w	r9, #0
 800fda2:	9700      	str	r7, [sp, #0]
 800fda4:	4633      	mov	r3, r6
 800fda6:	aa0b      	add	r2, sp, #44	; 0x2c
 800fda8:	4621      	mov	r1, r4
 800fdaa:	4628      	mov	r0, r5
 800fdac:	f000 f9d8 	bl	8010160 <_printf_common>
 800fdb0:	3001      	adds	r0, #1
 800fdb2:	f040 8090 	bne.w	800fed6 <_printf_float+0x1e2>
 800fdb6:	f04f 30ff 	mov.w	r0, #4294967295
 800fdba:	b00d      	add	sp, #52	; 0x34
 800fdbc:	ecbd 8b02 	vpop	{d8}
 800fdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdc4:	4642      	mov	r2, r8
 800fdc6:	464b      	mov	r3, r9
 800fdc8:	4640      	mov	r0, r8
 800fdca:	4649      	mov	r1, r9
 800fdcc:	f7f0 fece 	bl	8000b6c <__aeabi_dcmpun>
 800fdd0:	b140      	cbz	r0, 800fde4 <_printf_float+0xf0>
 800fdd2:	464b      	mov	r3, r9
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	bfbc      	itt	lt
 800fdd8:	232d      	movlt	r3, #45	; 0x2d
 800fdda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fdde:	487f      	ldr	r0, [pc, #508]	; (800ffdc <_printf_float+0x2e8>)
 800fde0:	4b7f      	ldr	r3, [pc, #508]	; (800ffe0 <_printf_float+0x2ec>)
 800fde2:	e7d1      	b.n	800fd88 <_printf_float+0x94>
 800fde4:	6863      	ldr	r3, [r4, #4]
 800fde6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fdea:	9206      	str	r2, [sp, #24]
 800fdec:	1c5a      	adds	r2, r3, #1
 800fdee:	d13f      	bne.n	800fe70 <_printf_float+0x17c>
 800fdf0:	2306      	movs	r3, #6
 800fdf2:	6063      	str	r3, [r4, #4]
 800fdf4:	9b05      	ldr	r3, [sp, #20]
 800fdf6:	6861      	ldr	r1, [r4, #4]
 800fdf8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	9303      	str	r3, [sp, #12]
 800fe00:	ab0a      	add	r3, sp, #40	; 0x28
 800fe02:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fe06:	ab09      	add	r3, sp, #36	; 0x24
 800fe08:	ec49 8b10 	vmov	d0, r8, r9
 800fe0c:	9300      	str	r3, [sp, #0]
 800fe0e:	6022      	str	r2, [r4, #0]
 800fe10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fe14:	4628      	mov	r0, r5
 800fe16:	f7ff fecd 	bl	800fbb4 <__cvt>
 800fe1a:	9b06      	ldr	r3, [sp, #24]
 800fe1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe1e:	2b47      	cmp	r3, #71	; 0x47
 800fe20:	4680      	mov	r8, r0
 800fe22:	d108      	bne.n	800fe36 <_printf_float+0x142>
 800fe24:	1cc8      	adds	r0, r1, #3
 800fe26:	db02      	blt.n	800fe2e <_printf_float+0x13a>
 800fe28:	6863      	ldr	r3, [r4, #4]
 800fe2a:	4299      	cmp	r1, r3
 800fe2c:	dd41      	ble.n	800feb2 <_printf_float+0x1be>
 800fe2e:	f1ab 0b02 	sub.w	fp, fp, #2
 800fe32:	fa5f fb8b 	uxtb.w	fp, fp
 800fe36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fe3a:	d820      	bhi.n	800fe7e <_printf_float+0x18a>
 800fe3c:	3901      	subs	r1, #1
 800fe3e:	465a      	mov	r2, fp
 800fe40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fe44:	9109      	str	r1, [sp, #36]	; 0x24
 800fe46:	f7ff ff17 	bl	800fc78 <__exponent>
 800fe4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe4c:	1813      	adds	r3, r2, r0
 800fe4e:	2a01      	cmp	r2, #1
 800fe50:	4681      	mov	r9, r0
 800fe52:	6123      	str	r3, [r4, #16]
 800fe54:	dc02      	bgt.n	800fe5c <_printf_float+0x168>
 800fe56:	6822      	ldr	r2, [r4, #0]
 800fe58:	07d2      	lsls	r2, r2, #31
 800fe5a:	d501      	bpl.n	800fe60 <_printf_float+0x16c>
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	6123      	str	r3, [r4, #16]
 800fe60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d09c      	beq.n	800fda2 <_printf_float+0xae>
 800fe68:	232d      	movs	r3, #45	; 0x2d
 800fe6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe6e:	e798      	b.n	800fda2 <_printf_float+0xae>
 800fe70:	9a06      	ldr	r2, [sp, #24]
 800fe72:	2a47      	cmp	r2, #71	; 0x47
 800fe74:	d1be      	bne.n	800fdf4 <_printf_float+0x100>
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d1bc      	bne.n	800fdf4 <_printf_float+0x100>
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	e7b9      	b.n	800fdf2 <_printf_float+0xfe>
 800fe7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fe82:	d118      	bne.n	800feb6 <_printf_float+0x1c2>
 800fe84:	2900      	cmp	r1, #0
 800fe86:	6863      	ldr	r3, [r4, #4]
 800fe88:	dd0b      	ble.n	800fea2 <_printf_float+0x1ae>
 800fe8a:	6121      	str	r1, [r4, #16]
 800fe8c:	b913      	cbnz	r3, 800fe94 <_printf_float+0x1a0>
 800fe8e:	6822      	ldr	r2, [r4, #0]
 800fe90:	07d0      	lsls	r0, r2, #31
 800fe92:	d502      	bpl.n	800fe9a <_printf_float+0x1a6>
 800fe94:	3301      	adds	r3, #1
 800fe96:	440b      	add	r3, r1
 800fe98:	6123      	str	r3, [r4, #16]
 800fe9a:	65a1      	str	r1, [r4, #88]	; 0x58
 800fe9c:	f04f 0900 	mov.w	r9, #0
 800fea0:	e7de      	b.n	800fe60 <_printf_float+0x16c>
 800fea2:	b913      	cbnz	r3, 800feaa <_printf_float+0x1b6>
 800fea4:	6822      	ldr	r2, [r4, #0]
 800fea6:	07d2      	lsls	r2, r2, #31
 800fea8:	d501      	bpl.n	800feae <_printf_float+0x1ba>
 800feaa:	3302      	adds	r3, #2
 800feac:	e7f4      	b.n	800fe98 <_printf_float+0x1a4>
 800feae:	2301      	movs	r3, #1
 800feb0:	e7f2      	b.n	800fe98 <_printf_float+0x1a4>
 800feb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800feb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800feb8:	4299      	cmp	r1, r3
 800feba:	db05      	blt.n	800fec8 <_printf_float+0x1d4>
 800febc:	6823      	ldr	r3, [r4, #0]
 800febe:	6121      	str	r1, [r4, #16]
 800fec0:	07d8      	lsls	r0, r3, #31
 800fec2:	d5ea      	bpl.n	800fe9a <_printf_float+0x1a6>
 800fec4:	1c4b      	adds	r3, r1, #1
 800fec6:	e7e7      	b.n	800fe98 <_printf_float+0x1a4>
 800fec8:	2900      	cmp	r1, #0
 800feca:	bfd4      	ite	le
 800fecc:	f1c1 0202 	rsble	r2, r1, #2
 800fed0:	2201      	movgt	r2, #1
 800fed2:	4413      	add	r3, r2
 800fed4:	e7e0      	b.n	800fe98 <_printf_float+0x1a4>
 800fed6:	6823      	ldr	r3, [r4, #0]
 800fed8:	055a      	lsls	r2, r3, #21
 800feda:	d407      	bmi.n	800feec <_printf_float+0x1f8>
 800fedc:	6923      	ldr	r3, [r4, #16]
 800fede:	4642      	mov	r2, r8
 800fee0:	4631      	mov	r1, r6
 800fee2:	4628      	mov	r0, r5
 800fee4:	47b8      	blx	r7
 800fee6:	3001      	adds	r0, #1
 800fee8:	d12c      	bne.n	800ff44 <_printf_float+0x250>
 800feea:	e764      	b.n	800fdb6 <_printf_float+0xc2>
 800feec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fef0:	f240 80e0 	bls.w	80100b4 <_printf_float+0x3c0>
 800fef4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fef8:	2200      	movs	r2, #0
 800fefa:	2300      	movs	r3, #0
 800fefc:	f7f0 fe04 	bl	8000b08 <__aeabi_dcmpeq>
 800ff00:	2800      	cmp	r0, #0
 800ff02:	d034      	beq.n	800ff6e <_printf_float+0x27a>
 800ff04:	4a37      	ldr	r2, [pc, #220]	; (800ffe4 <_printf_float+0x2f0>)
 800ff06:	2301      	movs	r3, #1
 800ff08:	4631      	mov	r1, r6
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	47b8      	blx	r7
 800ff0e:	3001      	adds	r0, #1
 800ff10:	f43f af51 	beq.w	800fdb6 <_printf_float+0xc2>
 800ff14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	db02      	blt.n	800ff22 <_printf_float+0x22e>
 800ff1c:	6823      	ldr	r3, [r4, #0]
 800ff1e:	07d8      	lsls	r0, r3, #31
 800ff20:	d510      	bpl.n	800ff44 <_printf_float+0x250>
 800ff22:	ee18 3a10 	vmov	r3, s16
 800ff26:	4652      	mov	r2, sl
 800ff28:	4631      	mov	r1, r6
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	47b8      	blx	r7
 800ff2e:	3001      	adds	r0, #1
 800ff30:	f43f af41 	beq.w	800fdb6 <_printf_float+0xc2>
 800ff34:	f04f 0800 	mov.w	r8, #0
 800ff38:	f104 091a 	add.w	r9, r4, #26
 800ff3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff3e:	3b01      	subs	r3, #1
 800ff40:	4543      	cmp	r3, r8
 800ff42:	dc09      	bgt.n	800ff58 <_printf_float+0x264>
 800ff44:	6823      	ldr	r3, [r4, #0]
 800ff46:	079b      	lsls	r3, r3, #30
 800ff48:	f100 8105 	bmi.w	8010156 <_printf_float+0x462>
 800ff4c:	68e0      	ldr	r0, [r4, #12]
 800ff4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff50:	4298      	cmp	r0, r3
 800ff52:	bfb8      	it	lt
 800ff54:	4618      	movlt	r0, r3
 800ff56:	e730      	b.n	800fdba <_printf_float+0xc6>
 800ff58:	2301      	movs	r3, #1
 800ff5a:	464a      	mov	r2, r9
 800ff5c:	4631      	mov	r1, r6
 800ff5e:	4628      	mov	r0, r5
 800ff60:	47b8      	blx	r7
 800ff62:	3001      	adds	r0, #1
 800ff64:	f43f af27 	beq.w	800fdb6 <_printf_float+0xc2>
 800ff68:	f108 0801 	add.w	r8, r8, #1
 800ff6c:	e7e6      	b.n	800ff3c <_printf_float+0x248>
 800ff6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	dc39      	bgt.n	800ffe8 <_printf_float+0x2f4>
 800ff74:	4a1b      	ldr	r2, [pc, #108]	; (800ffe4 <_printf_float+0x2f0>)
 800ff76:	2301      	movs	r3, #1
 800ff78:	4631      	mov	r1, r6
 800ff7a:	4628      	mov	r0, r5
 800ff7c:	47b8      	blx	r7
 800ff7e:	3001      	adds	r0, #1
 800ff80:	f43f af19 	beq.w	800fdb6 <_printf_float+0xc2>
 800ff84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff88:	4313      	orrs	r3, r2
 800ff8a:	d102      	bne.n	800ff92 <_printf_float+0x29e>
 800ff8c:	6823      	ldr	r3, [r4, #0]
 800ff8e:	07d9      	lsls	r1, r3, #31
 800ff90:	d5d8      	bpl.n	800ff44 <_printf_float+0x250>
 800ff92:	ee18 3a10 	vmov	r3, s16
 800ff96:	4652      	mov	r2, sl
 800ff98:	4631      	mov	r1, r6
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	47b8      	blx	r7
 800ff9e:	3001      	adds	r0, #1
 800ffa0:	f43f af09 	beq.w	800fdb6 <_printf_float+0xc2>
 800ffa4:	f04f 0900 	mov.w	r9, #0
 800ffa8:	f104 0a1a 	add.w	sl, r4, #26
 800ffac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffae:	425b      	negs	r3, r3
 800ffb0:	454b      	cmp	r3, r9
 800ffb2:	dc01      	bgt.n	800ffb8 <_printf_float+0x2c4>
 800ffb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffb6:	e792      	b.n	800fede <_printf_float+0x1ea>
 800ffb8:	2301      	movs	r3, #1
 800ffba:	4652      	mov	r2, sl
 800ffbc:	4631      	mov	r1, r6
 800ffbe:	4628      	mov	r0, r5
 800ffc0:	47b8      	blx	r7
 800ffc2:	3001      	adds	r0, #1
 800ffc4:	f43f aef7 	beq.w	800fdb6 <_printf_float+0xc2>
 800ffc8:	f109 0901 	add.w	r9, r9, #1
 800ffcc:	e7ee      	b.n	800ffac <_printf_float+0x2b8>
 800ffce:	bf00      	nop
 800ffd0:	7fefffff 	.word	0x7fefffff
 800ffd4:	08015248 	.word	0x08015248
 800ffd8:	0801524c 	.word	0x0801524c
 800ffdc:	08015254 	.word	0x08015254
 800ffe0:	08015250 	.word	0x08015250
 800ffe4:	08015649 	.word	0x08015649
 800ffe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ffec:	429a      	cmp	r2, r3
 800ffee:	bfa8      	it	ge
 800fff0:	461a      	movge	r2, r3
 800fff2:	2a00      	cmp	r2, #0
 800fff4:	4691      	mov	r9, r2
 800fff6:	dc37      	bgt.n	8010068 <_printf_float+0x374>
 800fff8:	f04f 0b00 	mov.w	fp, #0
 800fffc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010000:	f104 021a 	add.w	r2, r4, #26
 8010004:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010006:	9305      	str	r3, [sp, #20]
 8010008:	eba3 0309 	sub.w	r3, r3, r9
 801000c:	455b      	cmp	r3, fp
 801000e:	dc33      	bgt.n	8010078 <_printf_float+0x384>
 8010010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010014:	429a      	cmp	r2, r3
 8010016:	db3b      	blt.n	8010090 <_printf_float+0x39c>
 8010018:	6823      	ldr	r3, [r4, #0]
 801001a:	07da      	lsls	r2, r3, #31
 801001c:	d438      	bmi.n	8010090 <_printf_float+0x39c>
 801001e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010020:	9a05      	ldr	r2, [sp, #20]
 8010022:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010024:	1a9a      	subs	r2, r3, r2
 8010026:	eba3 0901 	sub.w	r9, r3, r1
 801002a:	4591      	cmp	r9, r2
 801002c:	bfa8      	it	ge
 801002e:	4691      	movge	r9, r2
 8010030:	f1b9 0f00 	cmp.w	r9, #0
 8010034:	dc35      	bgt.n	80100a2 <_printf_float+0x3ae>
 8010036:	f04f 0800 	mov.w	r8, #0
 801003a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801003e:	f104 0a1a 	add.w	sl, r4, #26
 8010042:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010046:	1a9b      	subs	r3, r3, r2
 8010048:	eba3 0309 	sub.w	r3, r3, r9
 801004c:	4543      	cmp	r3, r8
 801004e:	f77f af79 	ble.w	800ff44 <_printf_float+0x250>
 8010052:	2301      	movs	r3, #1
 8010054:	4652      	mov	r2, sl
 8010056:	4631      	mov	r1, r6
 8010058:	4628      	mov	r0, r5
 801005a:	47b8      	blx	r7
 801005c:	3001      	adds	r0, #1
 801005e:	f43f aeaa 	beq.w	800fdb6 <_printf_float+0xc2>
 8010062:	f108 0801 	add.w	r8, r8, #1
 8010066:	e7ec      	b.n	8010042 <_printf_float+0x34e>
 8010068:	4613      	mov	r3, r2
 801006a:	4631      	mov	r1, r6
 801006c:	4642      	mov	r2, r8
 801006e:	4628      	mov	r0, r5
 8010070:	47b8      	blx	r7
 8010072:	3001      	adds	r0, #1
 8010074:	d1c0      	bne.n	800fff8 <_printf_float+0x304>
 8010076:	e69e      	b.n	800fdb6 <_printf_float+0xc2>
 8010078:	2301      	movs	r3, #1
 801007a:	4631      	mov	r1, r6
 801007c:	4628      	mov	r0, r5
 801007e:	9205      	str	r2, [sp, #20]
 8010080:	47b8      	blx	r7
 8010082:	3001      	adds	r0, #1
 8010084:	f43f ae97 	beq.w	800fdb6 <_printf_float+0xc2>
 8010088:	9a05      	ldr	r2, [sp, #20]
 801008a:	f10b 0b01 	add.w	fp, fp, #1
 801008e:	e7b9      	b.n	8010004 <_printf_float+0x310>
 8010090:	ee18 3a10 	vmov	r3, s16
 8010094:	4652      	mov	r2, sl
 8010096:	4631      	mov	r1, r6
 8010098:	4628      	mov	r0, r5
 801009a:	47b8      	blx	r7
 801009c:	3001      	adds	r0, #1
 801009e:	d1be      	bne.n	801001e <_printf_float+0x32a>
 80100a0:	e689      	b.n	800fdb6 <_printf_float+0xc2>
 80100a2:	9a05      	ldr	r2, [sp, #20]
 80100a4:	464b      	mov	r3, r9
 80100a6:	4442      	add	r2, r8
 80100a8:	4631      	mov	r1, r6
 80100aa:	4628      	mov	r0, r5
 80100ac:	47b8      	blx	r7
 80100ae:	3001      	adds	r0, #1
 80100b0:	d1c1      	bne.n	8010036 <_printf_float+0x342>
 80100b2:	e680      	b.n	800fdb6 <_printf_float+0xc2>
 80100b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100b6:	2a01      	cmp	r2, #1
 80100b8:	dc01      	bgt.n	80100be <_printf_float+0x3ca>
 80100ba:	07db      	lsls	r3, r3, #31
 80100bc:	d538      	bpl.n	8010130 <_printf_float+0x43c>
 80100be:	2301      	movs	r3, #1
 80100c0:	4642      	mov	r2, r8
 80100c2:	4631      	mov	r1, r6
 80100c4:	4628      	mov	r0, r5
 80100c6:	47b8      	blx	r7
 80100c8:	3001      	adds	r0, #1
 80100ca:	f43f ae74 	beq.w	800fdb6 <_printf_float+0xc2>
 80100ce:	ee18 3a10 	vmov	r3, s16
 80100d2:	4652      	mov	r2, sl
 80100d4:	4631      	mov	r1, r6
 80100d6:	4628      	mov	r0, r5
 80100d8:	47b8      	blx	r7
 80100da:	3001      	adds	r0, #1
 80100dc:	f43f ae6b 	beq.w	800fdb6 <_printf_float+0xc2>
 80100e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80100e4:	2200      	movs	r2, #0
 80100e6:	2300      	movs	r3, #0
 80100e8:	f7f0 fd0e 	bl	8000b08 <__aeabi_dcmpeq>
 80100ec:	b9d8      	cbnz	r0, 8010126 <_printf_float+0x432>
 80100ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100f0:	f108 0201 	add.w	r2, r8, #1
 80100f4:	3b01      	subs	r3, #1
 80100f6:	4631      	mov	r1, r6
 80100f8:	4628      	mov	r0, r5
 80100fa:	47b8      	blx	r7
 80100fc:	3001      	adds	r0, #1
 80100fe:	d10e      	bne.n	801011e <_printf_float+0x42a>
 8010100:	e659      	b.n	800fdb6 <_printf_float+0xc2>
 8010102:	2301      	movs	r3, #1
 8010104:	4652      	mov	r2, sl
 8010106:	4631      	mov	r1, r6
 8010108:	4628      	mov	r0, r5
 801010a:	47b8      	blx	r7
 801010c:	3001      	adds	r0, #1
 801010e:	f43f ae52 	beq.w	800fdb6 <_printf_float+0xc2>
 8010112:	f108 0801 	add.w	r8, r8, #1
 8010116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010118:	3b01      	subs	r3, #1
 801011a:	4543      	cmp	r3, r8
 801011c:	dcf1      	bgt.n	8010102 <_printf_float+0x40e>
 801011e:	464b      	mov	r3, r9
 8010120:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010124:	e6dc      	b.n	800fee0 <_printf_float+0x1ec>
 8010126:	f04f 0800 	mov.w	r8, #0
 801012a:	f104 0a1a 	add.w	sl, r4, #26
 801012e:	e7f2      	b.n	8010116 <_printf_float+0x422>
 8010130:	2301      	movs	r3, #1
 8010132:	4642      	mov	r2, r8
 8010134:	e7df      	b.n	80100f6 <_printf_float+0x402>
 8010136:	2301      	movs	r3, #1
 8010138:	464a      	mov	r2, r9
 801013a:	4631      	mov	r1, r6
 801013c:	4628      	mov	r0, r5
 801013e:	47b8      	blx	r7
 8010140:	3001      	adds	r0, #1
 8010142:	f43f ae38 	beq.w	800fdb6 <_printf_float+0xc2>
 8010146:	f108 0801 	add.w	r8, r8, #1
 801014a:	68e3      	ldr	r3, [r4, #12]
 801014c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801014e:	1a5b      	subs	r3, r3, r1
 8010150:	4543      	cmp	r3, r8
 8010152:	dcf0      	bgt.n	8010136 <_printf_float+0x442>
 8010154:	e6fa      	b.n	800ff4c <_printf_float+0x258>
 8010156:	f04f 0800 	mov.w	r8, #0
 801015a:	f104 0919 	add.w	r9, r4, #25
 801015e:	e7f4      	b.n	801014a <_printf_float+0x456>

08010160 <_printf_common>:
 8010160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010164:	4616      	mov	r6, r2
 8010166:	4699      	mov	r9, r3
 8010168:	688a      	ldr	r2, [r1, #8]
 801016a:	690b      	ldr	r3, [r1, #16]
 801016c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010170:	4293      	cmp	r3, r2
 8010172:	bfb8      	it	lt
 8010174:	4613      	movlt	r3, r2
 8010176:	6033      	str	r3, [r6, #0]
 8010178:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801017c:	4607      	mov	r7, r0
 801017e:	460c      	mov	r4, r1
 8010180:	b10a      	cbz	r2, 8010186 <_printf_common+0x26>
 8010182:	3301      	adds	r3, #1
 8010184:	6033      	str	r3, [r6, #0]
 8010186:	6823      	ldr	r3, [r4, #0]
 8010188:	0699      	lsls	r1, r3, #26
 801018a:	bf42      	ittt	mi
 801018c:	6833      	ldrmi	r3, [r6, #0]
 801018e:	3302      	addmi	r3, #2
 8010190:	6033      	strmi	r3, [r6, #0]
 8010192:	6825      	ldr	r5, [r4, #0]
 8010194:	f015 0506 	ands.w	r5, r5, #6
 8010198:	d106      	bne.n	80101a8 <_printf_common+0x48>
 801019a:	f104 0a19 	add.w	sl, r4, #25
 801019e:	68e3      	ldr	r3, [r4, #12]
 80101a0:	6832      	ldr	r2, [r6, #0]
 80101a2:	1a9b      	subs	r3, r3, r2
 80101a4:	42ab      	cmp	r3, r5
 80101a6:	dc26      	bgt.n	80101f6 <_printf_common+0x96>
 80101a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80101ac:	1e13      	subs	r3, r2, #0
 80101ae:	6822      	ldr	r2, [r4, #0]
 80101b0:	bf18      	it	ne
 80101b2:	2301      	movne	r3, #1
 80101b4:	0692      	lsls	r2, r2, #26
 80101b6:	d42b      	bmi.n	8010210 <_printf_common+0xb0>
 80101b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80101bc:	4649      	mov	r1, r9
 80101be:	4638      	mov	r0, r7
 80101c0:	47c0      	blx	r8
 80101c2:	3001      	adds	r0, #1
 80101c4:	d01e      	beq.n	8010204 <_printf_common+0xa4>
 80101c6:	6823      	ldr	r3, [r4, #0]
 80101c8:	68e5      	ldr	r5, [r4, #12]
 80101ca:	6832      	ldr	r2, [r6, #0]
 80101cc:	f003 0306 	and.w	r3, r3, #6
 80101d0:	2b04      	cmp	r3, #4
 80101d2:	bf08      	it	eq
 80101d4:	1aad      	subeq	r5, r5, r2
 80101d6:	68a3      	ldr	r3, [r4, #8]
 80101d8:	6922      	ldr	r2, [r4, #16]
 80101da:	bf0c      	ite	eq
 80101dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80101e0:	2500      	movne	r5, #0
 80101e2:	4293      	cmp	r3, r2
 80101e4:	bfc4      	itt	gt
 80101e6:	1a9b      	subgt	r3, r3, r2
 80101e8:	18ed      	addgt	r5, r5, r3
 80101ea:	2600      	movs	r6, #0
 80101ec:	341a      	adds	r4, #26
 80101ee:	42b5      	cmp	r5, r6
 80101f0:	d11a      	bne.n	8010228 <_printf_common+0xc8>
 80101f2:	2000      	movs	r0, #0
 80101f4:	e008      	b.n	8010208 <_printf_common+0xa8>
 80101f6:	2301      	movs	r3, #1
 80101f8:	4652      	mov	r2, sl
 80101fa:	4649      	mov	r1, r9
 80101fc:	4638      	mov	r0, r7
 80101fe:	47c0      	blx	r8
 8010200:	3001      	adds	r0, #1
 8010202:	d103      	bne.n	801020c <_printf_common+0xac>
 8010204:	f04f 30ff 	mov.w	r0, #4294967295
 8010208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801020c:	3501      	adds	r5, #1
 801020e:	e7c6      	b.n	801019e <_printf_common+0x3e>
 8010210:	18e1      	adds	r1, r4, r3
 8010212:	1c5a      	adds	r2, r3, #1
 8010214:	2030      	movs	r0, #48	; 0x30
 8010216:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801021a:	4422      	add	r2, r4
 801021c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010220:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010224:	3302      	adds	r3, #2
 8010226:	e7c7      	b.n	80101b8 <_printf_common+0x58>
 8010228:	2301      	movs	r3, #1
 801022a:	4622      	mov	r2, r4
 801022c:	4649      	mov	r1, r9
 801022e:	4638      	mov	r0, r7
 8010230:	47c0      	blx	r8
 8010232:	3001      	adds	r0, #1
 8010234:	d0e6      	beq.n	8010204 <_printf_common+0xa4>
 8010236:	3601      	adds	r6, #1
 8010238:	e7d9      	b.n	80101ee <_printf_common+0x8e>
	...

0801023c <_printf_i>:
 801023c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010240:	7e0f      	ldrb	r7, [r1, #24]
 8010242:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010244:	2f78      	cmp	r7, #120	; 0x78
 8010246:	4691      	mov	r9, r2
 8010248:	4680      	mov	r8, r0
 801024a:	460c      	mov	r4, r1
 801024c:	469a      	mov	sl, r3
 801024e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010252:	d807      	bhi.n	8010264 <_printf_i+0x28>
 8010254:	2f62      	cmp	r7, #98	; 0x62
 8010256:	d80a      	bhi.n	801026e <_printf_i+0x32>
 8010258:	2f00      	cmp	r7, #0
 801025a:	f000 80d8 	beq.w	801040e <_printf_i+0x1d2>
 801025e:	2f58      	cmp	r7, #88	; 0x58
 8010260:	f000 80a3 	beq.w	80103aa <_printf_i+0x16e>
 8010264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010268:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801026c:	e03a      	b.n	80102e4 <_printf_i+0xa8>
 801026e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010272:	2b15      	cmp	r3, #21
 8010274:	d8f6      	bhi.n	8010264 <_printf_i+0x28>
 8010276:	a101      	add	r1, pc, #4	; (adr r1, 801027c <_printf_i+0x40>)
 8010278:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801027c:	080102d5 	.word	0x080102d5
 8010280:	080102e9 	.word	0x080102e9
 8010284:	08010265 	.word	0x08010265
 8010288:	08010265 	.word	0x08010265
 801028c:	08010265 	.word	0x08010265
 8010290:	08010265 	.word	0x08010265
 8010294:	080102e9 	.word	0x080102e9
 8010298:	08010265 	.word	0x08010265
 801029c:	08010265 	.word	0x08010265
 80102a0:	08010265 	.word	0x08010265
 80102a4:	08010265 	.word	0x08010265
 80102a8:	080103f5 	.word	0x080103f5
 80102ac:	08010319 	.word	0x08010319
 80102b0:	080103d7 	.word	0x080103d7
 80102b4:	08010265 	.word	0x08010265
 80102b8:	08010265 	.word	0x08010265
 80102bc:	08010417 	.word	0x08010417
 80102c0:	08010265 	.word	0x08010265
 80102c4:	08010319 	.word	0x08010319
 80102c8:	08010265 	.word	0x08010265
 80102cc:	08010265 	.word	0x08010265
 80102d0:	080103df 	.word	0x080103df
 80102d4:	682b      	ldr	r3, [r5, #0]
 80102d6:	1d1a      	adds	r2, r3, #4
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	602a      	str	r2, [r5, #0]
 80102dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80102e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80102e4:	2301      	movs	r3, #1
 80102e6:	e0a3      	b.n	8010430 <_printf_i+0x1f4>
 80102e8:	6820      	ldr	r0, [r4, #0]
 80102ea:	6829      	ldr	r1, [r5, #0]
 80102ec:	0606      	lsls	r6, r0, #24
 80102ee:	f101 0304 	add.w	r3, r1, #4
 80102f2:	d50a      	bpl.n	801030a <_printf_i+0xce>
 80102f4:	680e      	ldr	r6, [r1, #0]
 80102f6:	602b      	str	r3, [r5, #0]
 80102f8:	2e00      	cmp	r6, #0
 80102fa:	da03      	bge.n	8010304 <_printf_i+0xc8>
 80102fc:	232d      	movs	r3, #45	; 0x2d
 80102fe:	4276      	negs	r6, r6
 8010300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010304:	485e      	ldr	r0, [pc, #376]	; (8010480 <_printf_i+0x244>)
 8010306:	230a      	movs	r3, #10
 8010308:	e019      	b.n	801033e <_printf_i+0x102>
 801030a:	680e      	ldr	r6, [r1, #0]
 801030c:	602b      	str	r3, [r5, #0]
 801030e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010312:	bf18      	it	ne
 8010314:	b236      	sxthne	r6, r6
 8010316:	e7ef      	b.n	80102f8 <_printf_i+0xbc>
 8010318:	682b      	ldr	r3, [r5, #0]
 801031a:	6820      	ldr	r0, [r4, #0]
 801031c:	1d19      	adds	r1, r3, #4
 801031e:	6029      	str	r1, [r5, #0]
 8010320:	0601      	lsls	r1, r0, #24
 8010322:	d501      	bpl.n	8010328 <_printf_i+0xec>
 8010324:	681e      	ldr	r6, [r3, #0]
 8010326:	e002      	b.n	801032e <_printf_i+0xf2>
 8010328:	0646      	lsls	r6, r0, #25
 801032a:	d5fb      	bpl.n	8010324 <_printf_i+0xe8>
 801032c:	881e      	ldrh	r6, [r3, #0]
 801032e:	4854      	ldr	r0, [pc, #336]	; (8010480 <_printf_i+0x244>)
 8010330:	2f6f      	cmp	r7, #111	; 0x6f
 8010332:	bf0c      	ite	eq
 8010334:	2308      	moveq	r3, #8
 8010336:	230a      	movne	r3, #10
 8010338:	2100      	movs	r1, #0
 801033a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801033e:	6865      	ldr	r5, [r4, #4]
 8010340:	60a5      	str	r5, [r4, #8]
 8010342:	2d00      	cmp	r5, #0
 8010344:	bfa2      	ittt	ge
 8010346:	6821      	ldrge	r1, [r4, #0]
 8010348:	f021 0104 	bicge.w	r1, r1, #4
 801034c:	6021      	strge	r1, [r4, #0]
 801034e:	b90e      	cbnz	r6, 8010354 <_printf_i+0x118>
 8010350:	2d00      	cmp	r5, #0
 8010352:	d04d      	beq.n	80103f0 <_printf_i+0x1b4>
 8010354:	4615      	mov	r5, r2
 8010356:	fbb6 f1f3 	udiv	r1, r6, r3
 801035a:	fb03 6711 	mls	r7, r3, r1, r6
 801035e:	5dc7      	ldrb	r7, [r0, r7]
 8010360:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010364:	4637      	mov	r7, r6
 8010366:	42bb      	cmp	r3, r7
 8010368:	460e      	mov	r6, r1
 801036a:	d9f4      	bls.n	8010356 <_printf_i+0x11a>
 801036c:	2b08      	cmp	r3, #8
 801036e:	d10b      	bne.n	8010388 <_printf_i+0x14c>
 8010370:	6823      	ldr	r3, [r4, #0]
 8010372:	07de      	lsls	r6, r3, #31
 8010374:	d508      	bpl.n	8010388 <_printf_i+0x14c>
 8010376:	6923      	ldr	r3, [r4, #16]
 8010378:	6861      	ldr	r1, [r4, #4]
 801037a:	4299      	cmp	r1, r3
 801037c:	bfde      	ittt	le
 801037e:	2330      	movle	r3, #48	; 0x30
 8010380:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010384:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010388:	1b52      	subs	r2, r2, r5
 801038a:	6122      	str	r2, [r4, #16]
 801038c:	f8cd a000 	str.w	sl, [sp]
 8010390:	464b      	mov	r3, r9
 8010392:	aa03      	add	r2, sp, #12
 8010394:	4621      	mov	r1, r4
 8010396:	4640      	mov	r0, r8
 8010398:	f7ff fee2 	bl	8010160 <_printf_common>
 801039c:	3001      	adds	r0, #1
 801039e:	d14c      	bne.n	801043a <_printf_i+0x1fe>
 80103a0:	f04f 30ff 	mov.w	r0, #4294967295
 80103a4:	b004      	add	sp, #16
 80103a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103aa:	4835      	ldr	r0, [pc, #212]	; (8010480 <_printf_i+0x244>)
 80103ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80103b0:	6829      	ldr	r1, [r5, #0]
 80103b2:	6823      	ldr	r3, [r4, #0]
 80103b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80103b8:	6029      	str	r1, [r5, #0]
 80103ba:	061d      	lsls	r5, r3, #24
 80103bc:	d514      	bpl.n	80103e8 <_printf_i+0x1ac>
 80103be:	07df      	lsls	r7, r3, #31
 80103c0:	bf44      	itt	mi
 80103c2:	f043 0320 	orrmi.w	r3, r3, #32
 80103c6:	6023      	strmi	r3, [r4, #0]
 80103c8:	b91e      	cbnz	r6, 80103d2 <_printf_i+0x196>
 80103ca:	6823      	ldr	r3, [r4, #0]
 80103cc:	f023 0320 	bic.w	r3, r3, #32
 80103d0:	6023      	str	r3, [r4, #0]
 80103d2:	2310      	movs	r3, #16
 80103d4:	e7b0      	b.n	8010338 <_printf_i+0xfc>
 80103d6:	6823      	ldr	r3, [r4, #0]
 80103d8:	f043 0320 	orr.w	r3, r3, #32
 80103dc:	6023      	str	r3, [r4, #0]
 80103de:	2378      	movs	r3, #120	; 0x78
 80103e0:	4828      	ldr	r0, [pc, #160]	; (8010484 <_printf_i+0x248>)
 80103e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80103e6:	e7e3      	b.n	80103b0 <_printf_i+0x174>
 80103e8:	0659      	lsls	r1, r3, #25
 80103ea:	bf48      	it	mi
 80103ec:	b2b6      	uxthmi	r6, r6
 80103ee:	e7e6      	b.n	80103be <_printf_i+0x182>
 80103f0:	4615      	mov	r5, r2
 80103f2:	e7bb      	b.n	801036c <_printf_i+0x130>
 80103f4:	682b      	ldr	r3, [r5, #0]
 80103f6:	6826      	ldr	r6, [r4, #0]
 80103f8:	6961      	ldr	r1, [r4, #20]
 80103fa:	1d18      	adds	r0, r3, #4
 80103fc:	6028      	str	r0, [r5, #0]
 80103fe:	0635      	lsls	r5, r6, #24
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	d501      	bpl.n	8010408 <_printf_i+0x1cc>
 8010404:	6019      	str	r1, [r3, #0]
 8010406:	e002      	b.n	801040e <_printf_i+0x1d2>
 8010408:	0670      	lsls	r0, r6, #25
 801040a:	d5fb      	bpl.n	8010404 <_printf_i+0x1c8>
 801040c:	8019      	strh	r1, [r3, #0]
 801040e:	2300      	movs	r3, #0
 8010410:	6123      	str	r3, [r4, #16]
 8010412:	4615      	mov	r5, r2
 8010414:	e7ba      	b.n	801038c <_printf_i+0x150>
 8010416:	682b      	ldr	r3, [r5, #0]
 8010418:	1d1a      	adds	r2, r3, #4
 801041a:	602a      	str	r2, [r5, #0]
 801041c:	681d      	ldr	r5, [r3, #0]
 801041e:	6862      	ldr	r2, [r4, #4]
 8010420:	2100      	movs	r1, #0
 8010422:	4628      	mov	r0, r5
 8010424:	f7ef fefc 	bl	8000220 <memchr>
 8010428:	b108      	cbz	r0, 801042e <_printf_i+0x1f2>
 801042a:	1b40      	subs	r0, r0, r5
 801042c:	6060      	str	r0, [r4, #4]
 801042e:	6863      	ldr	r3, [r4, #4]
 8010430:	6123      	str	r3, [r4, #16]
 8010432:	2300      	movs	r3, #0
 8010434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010438:	e7a8      	b.n	801038c <_printf_i+0x150>
 801043a:	6923      	ldr	r3, [r4, #16]
 801043c:	462a      	mov	r2, r5
 801043e:	4649      	mov	r1, r9
 8010440:	4640      	mov	r0, r8
 8010442:	47d0      	blx	sl
 8010444:	3001      	adds	r0, #1
 8010446:	d0ab      	beq.n	80103a0 <_printf_i+0x164>
 8010448:	6823      	ldr	r3, [r4, #0]
 801044a:	079b      	lsls	r3, r3, #30
 801044c:	d413      	bmi.n	8010476 <_printf_i+0x23a>
 801044e:	68e0      	ldr	r0, [r4, #12]
 8010450:	9b03      	ldr	r3, [sp, #12]
 8010452:	4298      	cmp	r0, r3
 8010454:	bfb8      	it	lt
 8010456:	4618      	movlt	r0, r3
 8010458:	e7a4      	b.n	80103a4 <_printf_i+0x168>
 801045a:	2301      	movs	r3, #1
 801045c:	4632      	mov	r2, r6
 801045e:	4649      	mov	r1, r9
 8010460:	4640      	mov	r0, r8
 8010462:	47d0      	blx	sl
 8010464:	3001      	adds	r0, #1
 8010466:	d09b      	beq.n	80103a0 <_printf_i+0x164>
 8010468:	3501      	adds	r5, #1
 801046a:	68e3      	ldr	r3, [r4, #12]
 801046c:	9903      	ldr	r1, [sp, #12]
 801046e:	1a5b      	subs	r3, r3, r1
 8010470:	42ab      	cmp	r3, r5
 8010472:	dcf2      	bgt.n	801045a <_printf_i+0x21e>
 8010474:	e7eb      	b.n	801044e <_printf_i+0x212>
 8010476:	2500      	movs	r5, #0
 8010478:	f104 0619 	add.w	r6, r4, #25
 801047c:	e7f5      	b.n	801046a <_printf_i+0x22e>
 801047e:	bf00      	nop
 8010480:	08015258 	.word	0x08015258
 8010484:	08015269 	.word	0x08015269

08010488 <_scanf_float>:
 8010488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801048c:	b087      	sub	sp, #28
 801048e:	4617      	mov	r7, r2
 8010490:	9303      	str	r3, [sp, #12]
 8010492:	688b      	ldr	r3, [r1, #8]
 8010494:	1e5a      	subs	r2, r3, #1
 8010496:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801049a:	bf83      	ittte	hi
 801049c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80104a0:	195b      	addhi	r3, r3, r5
 80104a2:	9302      	strhi	r3, [sp, #8]
 80104a4:	2300      	movls	r3, #0
 80104a6:	bf86      	itte	hi
 80104a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80104ac:	608b      	strhi	r3, [r1, #8]
 80104ae:	9302      	strls	r3, [sp, #8]
 80104b0:	680b      	ldr	r3, [r1, #0]
 80104b2:	468b      	mov	fp, r1
 80104b4:	2500      	movs	r5, #0
 80104b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80104ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80104be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80104c2:	4680      	mov	r8, r0
 80104c4:	460c      	mov	r4, r1
 80104c6:	465e      	mov	r6, fp
 80104c8:	46aa      	mov	sl, r5
 80104ca:	46a9      	mov	r9, r5
 80104cc:	9501      	str	r5, [sp, #4]
 80104ce:	68a2      	ldr	r2, [r4, #8]
 80104d0:	b152      	cbz	r2, 80104e8 <_scanf_float+0x60>
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	2b4e      	cmp	r3, #78	; 0x4e
 80104d8:	d864      	bhi.n	80105a4 <_scanf_float+0x11c>
 80104da:	2b40      	cmp	r3, #64	; 0x40
 80104dc:	d83c      	bhi.n	8010558 <_scanf_float+0xd0>
 80104de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80104e2:	b2c8      	uxtb	r0, r1
 80104e4:	280e      	cmp	r0, #14
 80104e6:	d93a      	bls.n	801055e <_scanf_float+0xd6>
 80104e8:	f1b9 0f00 	cmp.w	r9, #0
 80104ec:	d003      	beq.n	80104f6 <_scanf_float+0x6e>
 80104ee:	6823      	ldr	r3, [r4, #0]
 80104f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104f4:	6023      	str	r3, [r4, #0]
 80104f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80104fa:	f1ba 0f01 	cmp.w	sl, #1
 80104fe:	f200 8113 	bhi.w	8010728 <_scanf_float+0x2a0>
 8010502:	455e      	cmp	r6, fp
 8010504:	f200 8105 	bhi.w	8010712 <_scanf_float+0x28a>
 8010508:	2501      	movs	r5, #1
 801050a:	4628      	mov	r0, r5
 801050c:	b007      	add	sp, #28
 801050e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010512:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010516:	2a0d      	cmp	r2, #13
 8010518:	d8e6      	bhi.n	80104e8 <_scanf_float+0x60>
 801051a:	a101      	add	r1, pc, #4	; (adr r1, 8010520 <_scanf_float+0x98>)
 801051c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010520:	0801065f 	.word	0x0801065f
 8010524:	080104e9 	.word	0x080104e9
 8010528:	080104e9 	.word	0x080104e9
 801052c:	080104e9 	.word	0x080104e9
 8010530:	080106bf 	.word	0x080106bf
 8010534:	08010697 	.word	0x08010697
 8010538:	080104e9 	.word	0x080104e9
 801053c:	080104e9 	.word	0x080104e9
 8010540:	0801066d 	.word	0x0801066d
 8010544:	080104e9 	.word	0x080104e9
 8010548:	080104e9 	.word	0x080104e9
 801054c:	080104e9 	.word	0x080104e9
 8010550:	080104e9 	.word	0x080104e9
 8010554:	08010625 	.word	0x08010625
 8010558:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801055c:	e7db      	b.n	8010516 <_scanf_float+0x8e>
 801055e:	290e      	cmp	r1, #14
 8010560:	d8c2      	bhi.n	80104e8 <_scanf_float+0x60>
 8010562:	a001      	add	r0, pc, #4	; (adr r0, 8010568 <_scanf_float+0xe0>)
 8010564:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010568:	08010617 	.word	0x08010617
 801056c:	080104e9 	.word	0x080104e9
 8010570:	08010617 	.word	0x08010617
 8010574:	080106ab 	.word	0x080106ab
 8010578:	080104e9 	.word	0x080104e9
 801057c:	080105c5 	.word	0x080105c5
 8010580:	08010601 	.word	0x08010601
 8010584:	08010601 	.word	0x08010601
 8010588:	08010601 	.word	0x08010601
 801058c:	08010601 	.word	0x08010601
 8010590:	08010601 	.word	0x08010601
 8010594:	08010601 	.word	0x08010601
 8010598:	08010601 	.word	0x08010601
 801059c:	08010601 	.word	0x08010601
 80105a0:	08010601 	.word	0x08010601
 80105a4:	2b6e      	cmp	r3, #110	; 0x6e
 80105a6:	d809      	bhi.n	80105bc <_scanf_float+0x134>
 80105a8:	2b60      	cmp	r3, #96	; 0x60
 80105aa:	d8b2      	bhi.n	8010512 <_scanf_float+0x8a>
 80105ac:	2b54      	cmp	r3, #84	; 0x54
 80105ae:	d077      	beq.n	80106a0 <_scanf_float+0x218>
 80105b0:	2b59      	cmp	r3, #89	; 0x59
 80105b2:	d199      	bne.n	80104e8 <_scanf_float+0x60>
 80105b4:	2d07      	cmp	r5, #7
 80105b6:	d197      	bne.n	80104e8 <_scanf_float+0x60>
 80105b8:	2508      	movs	r5, #8
 80105ba:	e029      	b.n	8010610 <_scanf_float+0x188>
 80105bc:	2b74      	cmp	r3, #116	; 0x74
 80105be:	d06f      	beq.n	80106a0 <_scanf_float+0x218>
 80105c0:	2b79      	cmp	r3, #121	; 0x79
 80105c2:	e7f6      	b.n	80105b2 <_scanf_float+0x12a>
 80105c4:	6821      	ldr	r1, [r4, #0]
 80105c6:	05c8      	lsls	r0, r1, #23
 80105c8:	d51a      	bpl.n	8010600 <_scanf_float+0x178>
 80105ca:	9b02      	ldr	r3, [sp, #8]
 80105cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80105d0:	6021      	str	r1, [r4, #0]
 80105d2:	f109 0901 	add.w	r9, r9, #1
 80105d6:	b11b      	cbz	r3, 80105e0 <_scanf_float+0x158>
 80105d8:	3b01      	subs	r3, #1
 80105da:	3201      	adds	r2, #1
 80105dc:	9302      	str	r3, [sp, #8]
 80105de:	60a2      	str	r2, [r4, #8]
 80105e0:	68a3      	ldr	r3, [r4, #8]
 80105e2:	3b01      	subs	r3, #1
 80105e4:	60a3      	str	r3, [r4, #8]
 80105e6:	6923      	ldr	r3, [r4, #16]
 80105e8:	3301      	adds	r3, #1
 80105ea:	6123      	str	r3, [r4, #16]
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	3b01      	subs	r3, #1
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	607b      	str	r3, [r7, #4]
 80105f4:	f340 8084 	ble.w	8010700 <_scanf_float+0x278>
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	3301      	adds	r3, #1
 80105fc:	603b      	str	r3, [r7, #0]
 80105fe:	e766      	b.n	80104ce <_scanf_float+0x46>
 8010600:	eb1a 0f05 	cmn.w	sl, r5
 8010604:	f47f af70 	bne.w	80104e8 <_scanf_float+0x60>
 8010608:	6822      	ldr	r2, [r4, #0]
 801060a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801060e:	6022      	str	r2, [r4, #0]
 8010610:	f806 3b01 	strb.w	r3, [r6], #1
 8010614:	e7e4      	b.n	80105e0 <_scanf_float+0x158>
 8010616:	6822      	ldr	r2, [r4, #0]
 8010618:	0610      	lsls	r0, r2, #24
 801061a:	f57f af65 	bpl.w	80104e8 <_scanf_float+0x60>
 801061e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010622:	e7f4      	b.n	801060e <_scanf_float+0x186>
 8010624:	f1ba 0f00 	cmp.w	sl, #0
 8010628:	d10e      	bne.n	8010648 <_scanf_float+0x1c0>
 801062a:	f1b9 0f00 	cmp.w	r9, #0
 801062e:	d10e      	bne.n	801064e <_scanf_float+0x1c6>
 8010630:	6822      	ldr	r2, [r4, #0]
 8010632:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010636:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801063a:	d108      	bne.n	801064e <_scanf_float+0x1c6>
 801063c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010640:	6022      	str	r2, [r4, #0]
 8010642:	f04f 0a01 	mov.w	sl, #1
 8010646:	e7e3      	b.n	8010610 <_scanf_float+0x188>
 8010648:	f1ba 0f02 	cmp.w	sl, #2
 801064c:	d055      	beq.n	80106fa <_scanf_float+0x272>
 801064e:	2d01      	cmp	r5, #1
 8010650:	d002      	beq.n	8010658 <_scanf_float+0x1d0>
 8010652:	2d04      	cmp	r5, #4
 8010654:	f47f af48 	bne.w	80104e8 <_scanf_float+0x60>
 8010658:	3501      	adds	r5, #1
 801065a:	b2ed      	uxtb	r5, r5
 801065c:	e7d8      	b.n	8010610 <_scanf_float+0x188>
 801065e:	f1ba 0f01 	cmp.w	sl, #1
 8010662:	f47f af41 	bne.w	80104e8 <_scanf_float+0x60>
 8010666:	f04f 0a02 	mov.w	sl, #2
 801066a:	e7d1      	b.n	8010610 <_scanf_float+0x188>
 801066c:	b97d      	cbnz	r5, 801068e <_scanf_float+0x206>
 801066e:	f1b9 0f00 	cmp.w	r9, #0
 8010672:	f47f af3c 	bne.w	80104ee <_scanf_float+0x66>
 8010676:	6822      	ldr	r2, [r4, #0]
 8010678:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801067c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010680:	f47f af39 	bne.w	80104f6 <_scanf_float+0x6e>
 8010684:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010688:	6022      	str	r2, [r4, #0]
 801068a:	2501      	movs	r5, #1
 801068c:	e7c0      	b.n	8010610 <_scanf_float+0x188>
 801068e:	2d03      	cmp	r5, #3
 8010690:	d0e2      	beq.n	8010658 <_scanf_float+0x1d0>
 8010692:	2d05      	cmp	r5, #5
 8010694:	e7de      	b.n	8010654 <_scanf_float+0x1cc>
 8010696:	2d02      	cmp	r5, #2
 8010698:	f47f af26 	bne.w	80104e8 <_scanf_float+0x60>
 801069c:	2503      	movs	r5, #3
 801069e:	e7b7      	b.n	8010610 <_scanf_float+0x188>
 80106a0:	2d06      	cmp	r5, #6
 80106a2:	f47f af21 	bne.w	80104e8 <_scanf_float+0x60>
 80106a6:	2507      	movs	r5, #7
 80106a8:	e7b2      	b.n	8010610 <_scanf_float+0x188>
 80106aa:	6822      	ldr	r2, [r4, #0]
 80106ac:	0591      	lsls	r1, r2, #22
 80106ae:	f57f af1b 	bpl.w	80104e8 <_scanf_float+0x60>
 80106b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80106b6:	6022      	str	r2, [r4, #0]
 80106b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80106bc:	e7a8      	b.n	8010610 <_scanf_float+0x188>
 80106be:	6822      	ldr	r2, [r4, #0]
 80106c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80106c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80106c8:	d006      	beq.n	80106d8 <_scanf_float+0x250>
 80106ca:	0550      	lsls	r0, r2, #21
 80106cc:	f57f af0c 	bpl.w	80104e8 <_scanf_float+0x60>
 80106d0:	f1b9 0f00 	cmp.w	r9, #0
 80106d4:	f43f af0f 	beq.w	80104f6 <_scanf_float+0x6e>
 80106d8:	0591      	lsls	r1, r2, #22
 80106da:	bf58      	it	pl
 80106dc:	9901      	ldrpl	r1, [sp, #4]
 80106de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80106e2:	bf58      	it	pl
 80106e4:	eba9 0101 	subpl.w	r1, r9, r1
 80106e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80106ec:	bf58      	it	pl
 80106ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80106f2:	6022      	str	r2, [r4, #0]
 80106f4:	f04f 0900 	mov.w	r9, #0
 80106f8:	e78a      	b.n	8010610 <_scanf_float+0x188>
 80106fa:	f04f 0a03 	mov.w	sl, #3
 80106fe:	e787      	b.n	8010610 <_scanf_float+0x188>
 8010700:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010704:	4639      	mov	r1, r7
 8010706:	4640      	mov	r0, r8
 8010708:	4798      	blx	r3
 801070a:	2800      	cmp	r0, #0
 801070c:	f43f aedf 	beq.w	80104ce <_scanf_float+0x46>
 8010710:	e6ea      	b.n	80104e8 <_scanf_float+0x60>
 8010712:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010716:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801071a:	463a      	mov	r2, r7
 801071c:	4640      	mov	r0, r8
 801071e:	4798      	blx	r3
 8010720:	6923      	ldr	r3, [r4, #16]
 8010722:	3b01      	subs	r3, #1
 8010724:	6123      	str	r3, [r4, #16]
 8010726:	e6ec      	b.n	8010502 <_scanf_float+0x7a>
 8010728:	1e6b      	subs	r3, r5, #1
 801072a:	2b06      	cmp	r3, #6
 801072c:	d825      	bhi.n	801077a <_scanf_float+0x2f2>
 801072e:	2d02      	cmp	r5, #2
 8010730:	d836      	bhi.n	80107a0 <_scanf_float+0x318>
 8010732:	455e      	cmp	r6, fp
 8010734:	f67f aee8 	bls.w	8010508 <_scanf_float+0x80>
 8010738:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801073c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010740:	463a      	mov	r2, r7
 8010742:	4640      	mov	r0, r8
 8010744:	4798      	blx	r3
 8010746:	6923      	ldr	r3, [r4, #16]
 8010748:	3b01      	subs	r3, #1
 801074a:	6123      	str	r3, [r4, #16]
 801074c:	e7f1      	b.n	8010732 <_scanf_float+0x2aa>
 801074e:	9802      	ldr	r0, [sp, #8]
 8010750:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010754:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010758:	9002      	str	r0, [sp, #8]
 801075a:	463a      	mov	r2, r7
 801075c:	4640      	mov	r0, r8
 801075e:	4798      	blx	r3
 8010760:	6923      	ldr	r3, [r4, #16]
 8010762:	3b01      	subs	r3, #1
 8010764:	6123      	str	r3, [r4, #16]
 8010766:	f10a 3aff 	add.w	sl, sl, #4294967295
 801076a:	fa5f fa8a 	uxtb.w	sl, sl
 801076e:	f1ba 0f02 	cmp.w	sl, #2
 8010772:	d1ec      	bne.n	801074e <_scanf_float+0x2c6>
 8010774:	3d03      	subs	r5, #3
 8010776:	b2ed      	uxtb	r5, r5
 8010778:	1b76      	subs	r6, r6, r5
 801077a:	6823      	ldr	r3, [r4, #0]
 801077c:	05da      	lsls	r2, r3, #23
 801077e:	d52f      	bpl.n	80107e0 <_scanf_float+0x358>
 8010780:	055b      	lsls	r3, r3, #21
 8010782:	d510      	bpl.n	80107a6 <_scanf_float+0x31e>
 8010784:	455e      	cmp	r6, fp
 8010786:	f67f aebf 	bls.w	8010508 <_scanf_float+0x80>
 801078a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801078e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010792:	463a      	mov	r2, r7
 8010794:	4640      	mov	r0, r8
 8010796:	4798      	blx	r3
 8010798:	6923      	ldr	r3, [r4, #16]
 801079a:	3b01      	subs	r3, #1
 801079c:	6123      	str	r3, [r4, #16]
 801079e:	e7f1      	b.n	8010784 <_scanf_float+0x2fc>
 80107a0:	46aa      	mov	sl, r5
 80107a2:	9602      	str	r6, [sp, #8]
 80107a4:	e7df      	b.n	8010766 <_scanf_float+0x2de>
 80107a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80107aa:	6923      	ldr	r3, [r4, #16]
 80107ac:	2965      	cmp	r1, #101	; 0x65
 80107ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80107b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80107b6:	6123      	str	r3, [r4, #16]
 80107b8:	d00c      	beq.n	80107d4 <_scanf_float+0x34c>
 80107ba:	2945      	cmp	r1, #69	; 0x45
 80107bc:	d00a      	beq.n	80107d4 <_scanf_float+0x34c>
 80107be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80107c2:	463a      	mov	r2, r7
 80107c4:	4640      	mov	r0, r8
 80107c6:	4798      	blx	r3
 80107c8:	6923      	ldr	r3, [r4, #16]
 80107ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80107ce:	3b01      	subs	r3, #1
 80107d0:	1eb5      	subs	r5, r6, #2
 80107d2:	6123      	str	r3, [r4, #16]
 80107d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80107d8:	463a      	mov	r2, r7
 80107da:	4640      	mov	r0, r8
 80107dc:	4798      	blx	r3
 80107de:	462e      	mov	r6, r5
 80107e0:	6825      	ldr	r5, [r4, #0]
 80107e2:	f015 0510 	ands.w	r5, r5, #16
 80107e6:	d159      	bne.n	801089c <_scanf_float+0x414>
 80107e8:	7035      	strb	r5, [r6, #0]
 80107ea:	6823      	ldr	r3, [r4, #0]
 80107ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80107f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80107f4:	d11b      	bne.n	801082e <_scanf_float+0x3a6>
 80107f6:	9b01      	ldr	r3, [sp, #4]
 80107f8:	454b      	cmp	r3, r9
 80107fa:	eba3 0209 	sub.w	r2, r3, r9
 80107fe:	d123      	bne.n	8010848 <_scanf_float+0x3c0>
 8010800:	2200      	movs	r2, #0
 8010802:	4659      	mov	r1, fp
 8010804:	4640      	mov	r0, r8
 8010806:	f000 ff25 	bl	8011654 <_strtod_r>
 801080a:	6822      	ldr	r2, [r4, #0]
 801080c:	9b03      	ldr	r3, [sp, #12]
 801080e:	f012 0f02 	tst.w	r2, #2
 8010812:	ec57 6b10 	vmov	r6, r7, d0
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	d021      	beq.n	801085e <_scanf_float+0x3d6>
 801081a:	9903      	ldr	r1, [sp, #12]
 801081c:	1d1a      	adds	r2, r3, #4
 801081e:	600a      	str	r2, [r1, #0]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	e9c3 6700 	strd	r6, r7, [r3]
 8010826:	68e3      	ldr	r3, [r4, #12]
 8010828:	3301      	adds	r3, #1
 801082a:	60e3      	str	r3, [r4, #12]
 801082c:	e66d      	b.n	801050a <_scanf_float+0x82>
 801082e:	9b04      	ldr	r3, [sp, #16]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d0e5      	beq.n	8010800 <_scanf_float+0x378>
 8010834:	9905      	ldr	r1, [sp, #20]
 8010836:	230a      	movs	r3, #10
 8010838:	462a      	mov	r2, r5
 801083a:	3101      	adds	r1, #1
 801083c:	4640      	mov	r0, r8
 801083e:	f000 ff91 	bl	8011764 <_strtol_r>
 8010842:	9b04      	ldr	r3, [sp, #16]
 8010844:	9e05      	ldr	r6, [sp, #20]
 8010846:	1ac2      	subs	r2, r0, r3
 8010848:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801084c:	429e      	cmp	r6, r3
 801084e:	bf28      	it	cs
 8010850:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010854:	4912      	ldr	r1, [pc, #72]	; (80108a0 <_scanf_float+0x418>)
 8010856:	4630      	mov	r0, r6
 8010858:	f000 f82c 	bl	80108b4 <siprintf>
 801085c:	e7d0      	b.n	8010800 <_scanf_float+0x378>
 801085e:	9903      	ldr	r1, [sp, #12]
 8010860:	f012 0f04 	tst.w	r2, #4
 8010864:	f103 0204 	add.w	r2, r3, #4
 8010868:	600a      	str	r2, [r1, #0]
 801086a:	d1d9      	bne.n	8010820 <_scanf_float+0x398>
 801086c:	f8d3 8000 	ldr.w	r8, [r3]
 8010870:	ee10 2a10 	vmov	r2, s0
 8010874:	ee10 0a10 	vmov	r0, s0
 8010878:	463b      	mov	r3, r7
 801087a:	4639      	mov	r1, r7
 801087c:	f7f0 f976 	bl	8000b6c <__aeabi_dcmpun>
 8010880:	b128      	cbz	r0, 801088e <_scanf_float+0x406>
 8010882:	4808      	ldr	r0, [pc, #32]	; (80108a4 <_scanf_float+0x41c>)
 8010884:	f000 f810 	bl	80108a8 <nanf>
 8010888:	ed88 0a00 	vstr	s0, [r8]
 801088c:	e7cb      	b.n	8010826 <_scanf_float+0x39e>
 801088e:	4630      	mov	r0, r6
 8010890:	4639      	mov	r1, r7
 8010892:	f7f0 f9c9 	bl	8000c28 <__aeabi_d2f>
 8010896:	f8c8 0000 	str.w	r0, [r8]
 801089a:	e7c4      	b.n	8010826 <_scanf_float+0x39e>
 801089c:	2500      	movs	r5, #0
 801089e:	e634      	b.n	801050a <_scanf_float+0x82>
 80108a0:	0801527a 	.word	0x0801527a
 80108a4:	0801569b 	.word	0x0801569b

080108a8 <nanf>:
 80108a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80108b0 <nanf+0x8>
 80108ac:	4770      	bx	lr
 80108ae:	bf00      	nop
 80108b0:	7fc00000 	.word	0x7fc00000

080108b4 <siprintf>:
 80108b4:	b40e      	push	{r1, r2, r3}
 80108b6:	b500      	push	{lr}
 80108b8:	b09c      	sub	sp, #112	; 0x70
 80108ba:	ab1d      	add	r3, sp, #116	; 0x74
 80108bc:	9002      	str	r0, [sp, #8]
 80108be:	9006      	str	r0, [sp, #24]
 80108c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80108c4:	4809      	ldr	r0, [pc, #36]	; (80108ec <siprintf+0x38>)
 80108c6:	9107      	str	r1, [sp, #28]
 80108c8:	9104      	str	r1, [sp, #16]
 80108ca:	4909      	ldr	r1, [pc, #36]	; (80108f0 <siprintf+0x3c>)
 80108cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80108d0:	9105      	str	r1, [sp, #20]
 80108d2:	6800      	ldr	r0, [r0, #0]
 80108d4:	9301      	str	r3, [sp, #4]
 80108d6:	a902      	add	r1, sp, #8
 80108d8:	f002 ff98 	bl	801380c <_svfiprintf_r>
 80108dc:	9b02      	ldr	r3, [sp, #8]
 80108de:	2200      	movs	r2, #0
 80108e0:	701a      	strb	r2, [r3, #0]
 80108e2:	b01c      	add	sp, #112	; 0x70
 80108e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80108e8:	b003      	add	sp, #12
 80108ea:	4770      	bx	lr
 80108ec:	200002c8 	.word	0x200002c8
 80108f0:	ffff0208 	.word	0xffff0208

080108f4 <siscanf>:
 80108f4:	b40e      	push	{r1, r2, r3}
 80108f6:	b510      	push	{r4, lr}
 80108f8:	b09f      	sub	sp, #124	; 0x7c
 80108fa:	ac21      	add	r4, sp, #132	; 0x84
 80108fc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010900:	f854 2b04 	ldr.w	r2, [r4], #4
 8010904:	9201      	str	r2, [sp, #4]
 8010906:	f8ad 101c 	strh.w	r1, [sp, #28]
 801090a:	9004      	str	r0, [sp, #16]
 801090c:	9008      	str	r0, [sp, #32]
 801090e:	f7ef fc7f 	bl	8000210 <strlen>
 8010912:	4b0c      	ldr	r3, [pc, #48]	; (8010944 <siscanf+0x50>)
 8010914:	9005      	str	r0, [sp, #20]
 8010916:	9009      	str	r0, [sp, #36]	; 0x24
 8010918:	930d      	str	r3, [sp, #52]	; 0x34
 801091a:	480b      	ldr	r0, [pc, #44]	; (8010948 <siscanf+0x54>)
 801091c:	9a01      	ldr	r2, [sp, #4]
 801091e:	6800      	ldr	r0, [r0, #0]
 8010920:	9403      	str	r4, [sp, #12]
 8010922:	2300      	movs	r3, #0
 8010924:	9311      	str	r3, [sp, #68]	; 0x44
 8010926:	9316      	str	r3, [sp, #88]	; 0x58
 8010928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801092c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010930:	a904      	add	r1, sp, #16
 8010932:	4623      	mov	r3, r4
 8010934:	f003 f8c4 	bl	8013ac0 <__ssvfiscanf_r>
 8010938:	b01f      	add	sp, #124	; 0x7c
 801093a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801093e:	b003      	add	sp, #12
 8010940:	4770      	bx	lr
 8010942:	bf00      	nop
 8010944:	0801096f 	.word	0x0801096f
 8010948:	200002c8 	.word	0x200002c8

0801094c <__sread>:
 801094c:	b510      	push	{r4, lr}
 801094e:	460c      	mov	r4, r1
 8010950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010954:	f003 fb7e 	bl	8014054 <_read_r>
 8010958:	2800      	cmp	r0, #0
 801095a:	bfab      	itete	ge
 801095c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801095e:	89a3      	ldrhlt	r3, [r4, #12]
 8010960:	181b      	addge	r3, r3, r0
 8010962:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010966:	bfac      	ite	ge
 8010968:	6563      	strge	r3, [r4, #84]	; 0x54
 801096a:	81a3      	strhlt	r3, [r4, #12]
 801096c:	bd10      	pop	{r4, pc}

0801096e <__seofread>:
 801096e:	2000      	movs	r0, #0
 8010970:	4770      	bx	lr

08010972 <__swrite>:
 8010972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010976:	461f      	mov	r7, r3
 8010978:	898b      	ldrh	r3, [r1, #12]
 801097a:	05db      	lsls	r3, r3, #23
 801097c:	4605      	mov	r5, r0
 801097e:	460c      	mov	r4, r1
 8010980:	4616      	mov	r6, r2
 8010982:	d505      	bpl.n	8010990 <__swrite+0x1e>
 8010984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010988:	2302      	movs	r3, #2
 801098a:	2200      	movs	r2, #0
 801098c:	f002 f8fe 	bl	8012b8c <_lseek_r>
 8010990:	89a3      	ldrh	r3, [r4, #12]
 8010992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801099a:	81a3      	strh	r3, [r4, #12]
 801099c:	4632      	mov	r2, r6
 801099e:	463b      	mov	r3, r7
 80109a0:	4628      	mov	r0, r5
 80109a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109a6:	f000 bedf 	b.w	8011768 <_write_r>

080109aa <__sseek>:
 80109aa:	b510      	push	{r4, lr}
 80109ac:	460c      	mov	r4, r1
 80109ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109b2:	f002 f8eb 	bl	8012b8c <_lseek_r>
 80109b6:	1c43      	adds	r3, r0, #1
 80109b8:	89a3      	ldrh	r3, [r4, #12]
 80109ba:	bf15      	itete	ne
 80109bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80109be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80109c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80109c6:	81a3      	strheq	r3, [r4, #12]
 80109c8:	bf18      	it	ne
 80109ca:	81a3      	strhne	r3, [r4, #12]
 80109cc:	bd10      	pop	{r4, pc}

080109ce <__sclose>:
 80109ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109d2:	f000 bedb 	b.w	801178c <_close_r>

080109d6 <strcpy>:
 80109d6:	4603      	mov	r3, r0
 80109d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109dc:	f803 2b01 	strb.w	r2, [r3], #1
 80109e0:	2a00      	cmp	r2, #0
 80109e2:	d1f9      	bne.n	80109d8 <strcpy+0x2>
 80109e4:	4770      	bx	lr

080109e6 <strncmp>:
 80109e6:	b510      	push	{r4, lr}
 80109e8:	b17a      	cbz	r2, 8010a0a <strncmp+0x24>
 80109ea:	4603      	mov	r3, r0
 80109ec:	3901      	subs	r1, #1
 80109ee:	1884      	adds	r4, r0, r2
 80109f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80109f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80109f8:	4290      	cmp	r0, r2
 80109fa:	d101      	bne.n	8010a00 <strncmp+0x1a>
 80109fc:	42a3      	cmp	r3, r4
 80109fe:	d101      	bne.n	8010a04 <strncmp+0x1e>
 8010a00:	1a80      	subs	r0, r0, r2
 8010a02:	bd10      	pop	{r4, pc}
 8010a04:	2800      	cmp	r0, #0
 8010a06:	d1f3      	bne.n	80109f0 <strncmp+0xa>
 8010a08:	e7fa      	b.n	8010a00 <strncmp+0x1a>
 8010a0a:	4610      	mov	r0, r2
 8010a0c:	e7f9      	b.n	8010a02 <strncmp+0x1c>

08010a0e <sulp>:
 8010a0e:	b570      	push	{r4, r5, r6, lr}
 8010a10:	4604      	mov	r4, r0
 8010a12:	460d      	mov	r5, r1
 8010a14:	ec45 4b10 	vmov	d0, r4, r5
 8010a18:	4616      	mov	r6, r2
 8010a1a:	f002 fc55 	bl	80132c8 <__ulp>
 8010a1e:	ec51 0b10 	vmov	r0, r1, d0
 8010a22:	b17e      	cbz	r6, 8010a44 <sulp+0x36>
 8010a24:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010a28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	dd09      	ble.n	8010a44 <sulp+0x36>
 8010a30:	051b      	lsls	r3, r3, #20
 8010a32:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010a36:	2400      	movs	r4, #0
 8010a38:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010a3c:	4622      	mov	r2, r4
 8010a3e:	462b      	mov	r3, r5
 8010a40:	f7ef fdfa 	bl	8000638 <__aeabi_dmul>
 8010a44:	bd70      	pop	{r4, r5, r6, pc}
	...

08010a48 <_strtod_l>:
 8010a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a4c:	ed2d 8b02 	vpush	{d8}
 8010a50:	b09d      	sub	sp, #116	; 0x74
 8010a52:	461f      	mov	r7, r3
 8010a54:	2300      	movs	r3, #0
 8010a56:	9318      	str	r3, [sp, #96]	; 0x60
 8010a58:	4ba2      	ldr	r3, [pc, #648]	; (8010ce4 <_strtod_l+0x29c>)
 8010a5a:	9213      	str	r2, [sp, #76]	; 0x4c
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	9305      	str	r3, [sp, #20]
 8010a60:	4604      	mov	r4, r0
 8010a62:	4618      	mov	r0, r3
 8010a64:	4688      	mov	r8, r1
 8010a66:	f7ef fbd3 	bl	8000210 <strlen>
 8010a6a:	f04f 0a00 	mov.w	sl, #0
 8010a6e:	4605      	mov	r5, r0
 8010a70:	f04f 0b00 	mov.w	fp, #0
 8010a74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010a78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010a7a:	781a      	ldrb	r2, [r3, #0]
 8010a7c:	2a2b      	cmp	r2, #43	; 0x2b
 8010a7e:	d04e      	beq.n	8010b1e <_strtod_l+0xd6>
 8010a80:	d83b      	bhi.n	8010afa <_strtod_l+0xb2>
 8010a82:	2a0d      	cmp	r2, #13
 8010a84:	d834      	bhi.n	8010af0 <_strtod_l+0xa8>
 8010a86:	2a08      	cmp	r2, #8
 8010a88:	d834      	bhi.n	8010af4 <_strtod_l+0xac>
 8010a8a:	2a00      	cmp	r2, #0
 8010a8c:	d03e      	beq.n	8010b0c <_strtod_l+0xc4>
 8010a8e:	2300      	movs	r3, #0
 8010a90:	930a      	str	r3, [sp, #40]	; 0x28
 8010a92:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010a94:	7833      	ldrb	r3, [r6, #0]
 8010a96:	2b30      	cmp	r3, #48	; 0x30
 8010a98:	f040 80b0 	bne.w	8010bfc <_strtod_l+0x1b4>
 8010a9c:	7873      	ldrb	r3, [r6, #1]
 8010a9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010aa2:	2b58      	cmp	r3, #88	; 0x58
 8010aa4:	d168      	bne.n	8010b78 <_strtod_l+0x130>
 8010aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010aa8:	9301      	str	r3, [sp, #4]
 8010aaa:	ab18      	add	r3, sp, #96	; 0x60
 8010aac:	9702      	str	r7, [sp, #8]
 8010aae:	9300      	str	r3, [sp, #0]
 8010ab0:	4a8d      	ldr	r2, [pc, #564]	; (8010ce8 <_strtod_l+0x2a0>)
 8010ab2:	ab19      	add	r3, sp, #100	; 0x64
 8010ab4:	a917      	add	r1, sp, #92	; 0x5c
 8010ab6:	4620      	mov	r0, r4
 8010ab8:	f001 fd5c 	bl	8012574 <__gethex>
 8010abc:	f010 0707 	ands.w	r7, r0, #7
 8010ac0:	4605      	mov	r5, r0
 8010ac2:	d005      	beq.n	8010ad0 <_strtod_l+0x88>
 8010ac4:	2f06      	cmp	r7, #6
 8010ac6:	d12c      	bne.n	8010b22 <_strtod_l+0xda>
 8010ac8:	3601      	adds	r6, #1
 8010aca:	2300      	movs	r3, #0
 8010acc:	9617      	str	r6, [sp, #92]	; 0x5c
 8010ace:	930a      	str	r3, [sp, #40]	; 0x28
 8010ad0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	f040 8590 	bne.w	80115f8 <_strtod_l+0xbb0>
 8010ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ada:	b1eb      	cbz	r3, 8010b18 <_strtod_l+0xd0>
 8010adc:	4652      	mov	r2, sl
 8010ade:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010ae2:	ec43 2b10 	vmov	d0, r2, r3
 8010ae6:	b01d      	add	sp, #116	; 0x74
 8010ae8:	ecbd 8b02 	vpop	{d8}
 8010aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010af0:	2a20      	cmp	r2, #32
 8010af2:	d1cc      	bne.n	8010a8e <_strtod_l+0x46>
 8010af4:	3301      	adds	r3, #1
 8010af6:	9317      	str	r3, [sp, #92]	; 0x5c
 8010af8:	e7be      	b.n	8010a78 <_strtod_l+0x30>
 8010afa:	2a2d      	cmp	r2, #45	; 0x2d
 8010afc:	d1c7      	bne.n	8010a8e <_strtod_l+0x46>
 8010afe:	2201      	movs	r2, #1
 8010b00:	920a      	str	r2, [sp, #40]	; 0x28
 8010b02:	1c5a      	adds	r2, r3, #1
 8010b04:	9217      	str	r2, [sp, #92]	; 0x5c
 8010b06:	785b      	ldrb	r3, [r3, #1]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d1c2      	bne.n	8010a92 <_strtod_l+0x4a>
 8010b0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010b0e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	f040 856e 	bne.w	80115f4 <_strtod_l+0xbac>
 8010b18:	4652      	mov	r2, sl
 8010b1a:	465b      	mov	r3, fp
 8010b1c:	e7e1      	b.n	8010ae2 <_strtod_l+0x9a>
 8010b1e:	2200      	movs	r2, #0
 8010b20:	e7ee      	b.n	8010b00 <_strtod_l+0xb8>
 8010b22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010b24:	b13a      	cbz	r2, 8010b36 <_strtod_l+0xee>
 8010b26:	2135      	movs	r1, #53	; 0x35
 8010b28:	a81a      	add	r0, sp, #104	; 0x68
 8010b2a:	f002 fcd8 	bl	80134de <__copybits>
 8010b2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010b30:	4620      	mov	r0, r4
 8010b32:	f002 f897 	bl	8012c64 <_Bfree>
 8010b36:	3f01      	subs	r7, #1
 8010b38:	2f04      	cmp	r7, #4
 8010b3a:	d806      	bhi.n	8010b4a <_strtod_l+0x102>
 8010b3c:	e8df f007 	tbb	[pc, r7]
 8010b40:	1714030a 	.word	0x1714030a
 8010b44:	0a          	.byte	0x0a
 8010b45:	00          	.byte	0x00
 8010b46:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8010b4a:	0728      	lsls	r0, r5, #28
 8010b4c:	d5c0      	bpl.n	8010ad0 <_strtod_l+0x88>
 8010b4e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010b52:	e7bd      	b.n	8010ad0 <_strtod_l+0x88>
 8010b54:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010b58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010b5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010b5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010b62:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010b66:	e7f0      	b.n	8010b4a <_strtod_l+0x102>
 8010b68:	f8df b180 	ldr.w	fp, [pc, #384]	; 8010cec <_strtod_l+0x2a4>
 8010b6c:	e7ed      	b.n	8010b4a <_strtod_l+0x102>
 8010b6e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010b72:	f04f 3aff 	mov.w	sl, #4294967295
 8010b76:	e7e8      	b.n	8010b4a <_strtod_l+0x102>
 8010b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010b7a:	1c5a      	adds	r2, r3, #1
 8010b7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8010b7e:	785b      	ldrb	r3, [r3, #1]
 8010b80:	2b30      	cmp	r3, #48	; 0x30
 8010b82:	d0f9      	beq.n	8010b78 <_strtod_l+0x130>
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d0a3      	beq.n	8010ad0 <_strtod_l+0x88>
 8010b88:	2301      	movs	r3, #1
 8010b8a:	f04f 0900 	mov.w	r9, #0
 8010b8e:	9304      	str	r3, [sp, #16]
 8010b90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010b92:	9308      	str	r3, [sp, #32]
 8010b94:	f8cd 901c 	str.w	r9, [sp, #28]
 8010b98:	464f      	mov	r7, r9
 8010b9a:	220a      	movs	r2, #10
 8010b9c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010b9e:	7806      	ldrb	r6, [r0, #0]
 8010ba0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010ba4:	b2d9      	uxtb	r1, r3
 8010ba6:	2909      	cmp	r1, #9
 8010ba8:	d92a      	bls.n	8010c00 <_strtod_l+0x1b8>
 8010baa:	9905      	ldr	r1, [sp, #20]
 8010bac:	462a      	mov	r2, r5
 8010bae:	f7ff ff1a 	bl	80109e6 <strncmp>
 8010bb2:	b398      	cbz	r0, 8010c1c <_strtod_l+0x1d4>
 8010bb4:	2000      	movs	r0, #0
 8010bb6:	4632      	mov	r2, r6
 8010bb8:	463d      	mov	r5, r7
 8010bba:	9005      	str	r0, [sp, #20]
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	2a65      	cmp	r2, #101	; 0x65
 8010bc0:	d001      	beq.n	8010bc6 <_strtod_l+0x17e>
 8010bc2:	2a45      	cmp	r2, #69	; 0x45
 8010bc4:	d118      	bne.n	8010bf8 <_strtod_l+0x1b0>
 8010bc6:	b91d      	cbnz	r5, 8010bd0 <_strtod_l+0x188>
 8010bc8:	9a04      	ldr	r2, [sp, #16]
 8010bca:	4302      	orrs	r2, r0
 8010bcc:	d09e      	beq.n	8010b0c <_strtod_l+0xc4>
 8010bce:	2500      	movs	r5, #0
 8010bd0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8010bd4:	f108 0201 	add.w	r2, r8, #1
 8010bd8:	9217      	str	r2, [sp, #92]	; 0x5c
 8010bda:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010bde:	2a2b      	cmp	r2, #43	; 0x2b
 8010be0:	d075      	beq.n	8010cce <_strtod_l+0x286>
 8010be2:	2a2d      	cmp	r2, #45	; 0x2d
 8010be4:	d07b      	beq.n	8010cde <_strtod_l+0x296>
 8010be6:	f04f 0c00 	mov.w	ip, #0
 8010bea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010bee:	2909      	cmp	r1, #9
 8010bf0:	f240 8082 	bls.w	8010cf8 <_strtod_l+0x2b0>
 8010bf4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010bf8:	2600      	movs	r6, #0
 8010bfa:	e09d      	b.n	8010d38 <_strtod_l+0x2f0>
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	e7c4      	b.n	8010b8a <_strtod_l+0x142>
 8010c00:	2f08      	cmp	r7, #8
 8010c02:	bfd8      	it	le
 8010c04:	9907      	ldrle	r1, [sp, #28]
 8010c06:	f100 0001 	add.w	r0, r0, #1
 8010c0a:	bfda      	itte	le
 8010c0c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010c10:	9307      	strle	r3, [sp, #28]
 8010c12:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010c16:	3701      	adds	r7, #1
 8010c18:	9017      	str	r0, [sp, #92]	; 0x5c
 8010c1a:	e7bf      	b.n	8010b9c <_strtod_l+0x154>
 8010c1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010c1e:	195a      	adds	r2, r3, r5
 8010c20:	9217      	str	r2, [sp, #92]	; 0x5c
 8010c22:	5d5a      	ldrb	r2, [r3, r5]
 8010c24:	2f00      	cmp	r7, #0
 8010c26:	d037      	beq.n	8010c98 <_strtod_l+0x250>
 8010c28:	9005      	str	r0, [sp, #20]
 8010c2a:	463d      	mov	r5, r7
 8010c2c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010c30:	2b09      	cmp	r3, #9
 8010c32:	d912      	bls.n	8010c5a <_strtod_l+0x212>
 8010c34:	2301      	movs	r3, #1
 8010c36:	e7c2      	b.n	8010bbe <_strtod_l+0x176>
 8010c38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010c3a:	1c5a      	adds	r2, r3, #1
 8010c3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8010c3e:	785a      	ldrb	r2, [r3, #1]
 8010c40:	3001      	adds	r0, #1
 8010c42:	2a30      	cmp	r2, #48	; 0x30
 8010c44:	d0f8      	beq.n	8010c38 <_strtod_l+0x1f0>
 8010c46:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010c4a:	2b08      	cmp	r3, #8
 8010c4c:	f200 84d9 	bhi.w	8011602 <_strtod_l+0xbba>
 8010c50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010c52:	9005      	str	r0, [sp, #20]
 8010c54:	2000      	movs	r0, #0
 8010c56:	9308      	str	r3, [sp, #32]
 8010c58:	4605      	mov	r5, r0
 8010c5a:	3a30      	subs	r2, #48	; 0x30
 8010c5c:	f100 0301 	add.w	r3, r0, #1
 8010c60:	d014      	beq.n	8010c8c <_strtod_l+0x244>
 8010c62:	9905      	ldr	r1, [sp, #20]
 8010c64:	4419      	add	r1, r3
 8010c66:	9105      	str	r1, [sp, #20]
 8010c68:	462b      	mov	r3, r5
 8010c6a:	eb00 0e05 	add.w	lr, r0, r5
 8010c6e:	210a      	movs	r1, #10
 8010c70:	4573      	cmp	r3, lr
 8010c72:	d113      	bne.n	8010c9c <_strtod_l+0x254>
 8010c74:	182b      	adds	r3, r5, r0
 8010c76:	2b08      	cmp	r3, #8
 8010c78:	f105 0501 	add.w	r5, r5, #1
 8010c7c:	4405      	add	r5, r0
 8010c7e:	dc1c      	bgt.n	8010cba <_strtod_l+0x272>
 8010c80:	9907      	ldr	r1, [sp, #28]
 8010c82:	230a      	movs	r3, #10
 8010c84:	fb03 2301 	mla	r3, r3, r1, r2
 8010c88:	9307      	str	r3, [sp, #28]
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010c8e:	1c51      	adds	r1, r2, #1
 8010c90:	9117      	str	r1, [sp, #92]	; 0x5c
 8010c92:	7852      	ldrb	r2, [r2, #1]
 8010c94:	4618      	mov	r0, r3
 8010c96:	e7c9      	b.n	8010c2c <_strtod_l+0x1e4>
 8010c98:	4638      	mov	r0, r7
 8010c9a:	e7d2      	b.n	8010c42 <_strtod_l+0x1fa>
 8010c9c:	2b08      	cmp	r3, #8
 8010c9e:	dc04      	bgt.n	8010caa <_strtod_l+0x262>
 8010ca0:	9e07      	ldr	r6, [sp, #28]
 8010ca2:	434e      	muls	r6, r1
 8010ca4:	9607      	str	r6, [sp, #28]
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	e7e2      	b.n	8010c70 <_strtod_l+0x228>
 8010caa:	f103 0c01 	add.w	ip, r3, #1
 8010cae:	f1bc 0f10 	cmp.w	ip, #16
 8010cb2:	bfd8      	it	le
 8010cb4:	fb01 f909 	mulle.w	r9, r1, r9
 8010cb8:	e7f5      	b.n	8010ca6 <_strtod_l+0x25e>
 8010cba:	2d10      	cmp	r5, #16
 8010cbc:	bfdc      	itt	le
 8010cbe:	230a      	movle	r3, #10
 8010cc0:	fb03 2909 	mlale	r9, r3, r9, r2
 8010cc4:	e7e1      	b.n	8010c8a <_strtod_l+0x242>
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	9305      	str	r3, [sp, #20]
 8010cca:	2301      	movs	r3, #1
 8010ccc:	e77c      	b.n	8010bc8 <_strtod_l+0x180>
 8010cce:	f04f 0c00 	mov.w	ip, #0
 8010cd2:	f108 0202 	add.w	r2, r8, #2
 8010cd6:	9217      	str	r2, [sp, #92]	; 0x5c
 8010cd8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010cdc:	e785      	b.n	8010bea <_strtod_l+0x1a2>
 8010cde:	f04f 0c01 	mov.w	ip, #1
 8010ce2:	e7f6      	b.n	8010cd2 <_strtod_l+0x28a>
 8010ce4:	080154c8 	.word	0x080154c8
 8010ce8:	08015280 	.word	0x08015280
 8010cec:	7ff00000 	.word	0x7ff00000
 8010cf0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010cf2:	1c51      	adds	r1, r2, #1
 8010cf4:	9117      	str	r1, [sp, #92]	; 0x5c
 8010cf6:	7852      	ldrb	r2, [r2, #1]
 8010cf8:	2a30      	cmp	r2, #48	; 0x30
 8010cfa:	d0f9      	beq.n	8010cf0 <_strtod_l+0x2a8>
 8010cfc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010d00:	2908      	cmp	r1, #8
 8010d02:	f63f af79 	bhi.w	8010bf8 <_strtod_l+0x1b0>
 8010d06:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010d0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010d0c:	9206      	str	r2, [sp, #24]
 8010d0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010d10:	1c51      	adds	r1, r2, #1
 8010d12:	9117      	str	r1, [sp, #92]	; 0x5c
 8010d14:	7852      	ldrb	r2, [r2, #1]
 8010d16:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010d1a:	2e09      	cmp	r6, #9
 8010d1c:	d937      	bls.n	8010d8e <_strtod_l+0x346>
 8010d1e:	9e06      	ldr	r6, [sp, #24]
 8010d20:	1b89      	subs	r1, r1, r6
 8010d22:	2908      	cmp	r1, #8
 8010d24:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010d28:	dc02      	bgt.n	8010d30 <_strtod_l+0x2e8>
 8010d2a:	4576      	cmp	r6, lr
 8010d2c:	bfa8      	it	ge
 8010d2e:	4676      	movge	r6, lr
 8010d30:	f1bc 0f00 	cmp.w	ip, #0
 8010d34:	d000      	beq.n	8010d38 <_strtod_l+0x2f0>
 8010d36:	4276      	negs	r6, r6
 8010d38:	2d00      	cmp	r5, #0
 8010d3a:	d14d      	bne.n	8010dd8 <_strtod_l+0x390>
 8010d3c:	9904      	ldr	r1, [sp, #16]
 8010d3e:	4301      	orrs	r1, r0
 8010d40:	f47f aec6 	bne.w	8010ad0 <_strtod_l+0x88>
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	f47f aee1 	bne.w	8010b0c <_strtod_l+0xc4>
 8010d4a:	2a69      	cmp	r2, #105	; 0x69
 8010d4c:	d027      	beq.n	8010d9e <_strtod_l+0x356>
 8010d4e:	dc24      	bgt.n	8010d9a <_strtod_l+0x352>
 8010d50:	2a49      	cmp	r2, #73	; 0x49
 8010d52:	d024      	beq.n	8010d9e <_strtod_l+0x356>
 8010d54:	2a4e      	cmp	r2, #78	; 0x4e
 8010d56:	f47f aed9 	bne.w	8010b0c <_strtod_l+0xc4>
 8010d5a:	499f      	ldr	r1, [pc, #636]	; (8010fd8 <_strtod_l+0x590>)
 8010d5c:	a817      	add	r0, sp, #92	; 0x5c
 8010d5e:	f001 fe61 	bl	8012a24 <__match>
 8010d62:	2800      	cmp	r0, #0
 8010d64:	f43f aed2 	beq.w	8010b0c <_strtod_l+0xc4>
 8010d68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	2b28      	cmp	r3, #40	; 0x28
 8010d6e:	d12d      	bne.n	8010dcc <_strtod_l+0x384>
 8010d70:	499a      	ldr	r1, [pc, #616]	; (8010fdc <_strtod_l+0x594>)
 8010d72:	aa1a      	add	r2, sp, #104	; 0x68
 8010d74:	a817      	add	r0, sp, #92	; 0x5c
 8010d76:	f001 fe69 	bl	8012a4c <__hexnan>
 8010d7a:	2805      	cmp	r0, #5
 8010d7c:	d126      	bne.n	8010dcc <_strtod_l+0x384>
 8010d7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010d80:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8010d84:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010d88:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010d8c:	e6a0      	b.n	8010ad0 <_strtod_l+0x88>
 8010d8e:	210a      	movs	r1, #10
 8010d90:	fb01 2e0e 	mla	lr, r1, lr, r2
 8010d94:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010d98:	e7b9      	b.n	8010d0e <_strtod_l+0x2c6>
 8010d9a:	2a6e      	cmp	r2, #110	; 0x6e
 8010d9c:	e7db      	b.n	8010d56 <_strtod_l+0x30e>
 8010d9e:	4990      	ldr	r1, [pc, #576]	; (8010fe0 <_strtod_l+0x598>)
 8010da0:	a817      	add	r0, sp, #92	; 0x5c
 8010da2:	f001 fe3f 	bl	8012a24 <__match>
 8010da6:	2800      	cmp	r0, #0
 8010da8:	f43f aeb0 	beq.w	8010b0c <_strtod_l+0xc4>
 8010dac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010dae:	498d      	ldr	r1, [pc, #564]	; (8010fe4 <_strtod_l+0x59c>)
 8010db0:	3b01      	subs	r3, #1
 8010db2:	a817      	add	r0, sp, #92	; 0x5c
 8010db4:	9317      	str	r3, [sp, #92]	; 0x5c
 8010db6:	f001 fe35 	bl	8012a24 <__match>
 8010dba:	b910      	cbnz	r0, 8010dc2 <_strtod_l+0x37a>
 8010dbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010dbe:	3301      	adds	r3, #1
 8010dc0:	9317      	str	r3, [sp, #92]	; 0x5c
 8010dc2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010ff4 <_strtod_l+0x5ac>
 8010dc6:	f04f 0a00 	mov.w	sl, #0
 8010dca:	e681      	b.n	8010ad0 <_strtod_l+0x88>
 8010dcc:	4886      	ldr	r0, [pc, #536]	; (8010fe8 <_strtod_l+0x5a0>)
 8010dce:	f003 f953 	bl	8014078 <nan>
 8010dd2:	ec5b ab10 	vmov	sl, fp, d0
 8010dd6:	e67b      	b.n	8010ad0 <_strtod_l+0x88>
 8010dd8:	9b05      	ldr	r3, [sp, #20]
 8010dda:	9807      	ldr	r0, [sp, #28]
 8010ddc:	1af3      	subs	r3, r6, r3
 8010dde:	2f00      	cmp	r7, #0
 8010de0:	bf08      	it	eq
 8010de2:	462f      	moveq	r7, r5
 8010de4:	2d10      	cmp	r5, #16
 8010de6:	9306      	str	r3, [sp, #24]
 8010de8:	46a8      	mov	r8, r5
 8010dea:	bfa8      	it	ge
 8010dec:	f04f 0810 	movge.w	r8, #16
 8010df0:	f7ef fba8 	bl	8000544 <__aeabi_ui2d>
 8010df4:	2d09      	cmp	r5, #9
 8010df6:	4682      	mov	sl, r0
 8010df8:	468b      	mov	fp, r1
 8010dfa:	dd13      	ble.n	8010e24 <_strtod_l+0x3dc>
 8010dfc:	4b7b      	ldr	r3, [pc, #492]	; (8010fec <_strtod_l+0x5a4>)
 8010dfe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010e02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010e06:	f7ef fc17 	bl	8000638 <__aeabi_dmul>
 8010e0a:	4682      	mov	sl, r0
 8010e0c:	4648      	mov	r0, r9
 8010e0e:	468b      	mov	fp, r1
 8010e10:	f7ef fb98 	bl	8000544 <__aeabi_ui2d>
 8010e14:	4602      	mov	r2, r0
 8010e16:	460b      	mov	r3, r1
 8010e18:	4650      	mov	r0, sl
 8010e1a:	4659      	mov	r1, fp
 8010e1c:	f7ef fa56 	bl	80002cc <__adddf3>
 8010e20:	4682      	mov	sl, r0
 8010e22:	468b      	mov	fp, r1
 8010e24:	2d0f      	cmp	r5, #15
 8010e26:	dc38      	bgt.n	8010e9a <_strtod_l+0x452>
 8010e28:	9b06      	ldr	r3, [sp, #24]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	f43f ae50 	beq.w	8010ad0 <_strtod_l+0x88>
 8010e30:	dd24      	ble.n	8010e7c <_strtod_l+0x434>
 8010e32:	2b16      	cmp	r3, #22
 8010e34:	dc0b      	bgt.n	8010e4e <_strtod_l+0x406>
 8010e36:	496d      	ldr	r1, [pc, #436]	; (8010fec <_strtod_l+0x5a4>)
 8010e38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010e3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e40:	4652      	mov	r2, sl
 8010e42:	465b      	mov	r3, fp
 8010e44:	f7ef fbf8 	bl	8000638 <__aeabi_dmul>
 8010e48:	4682      	mov	sl, r0
 8010e4a:	468b      	mov	fp, r1
 8010e4c:	e640      	b.n	8010ad0 <_strtod_l+0x88>
 8010e4e:	9a06      	ldr	r2, [sp, #24]
 8010e50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010e54:	4293      	cmp	r3, r2
 8010e56:	db20      	blt.n	8010e9a <_strtod_l+0x452>
 8010e58:	4c64      	ldr	r4, [pc, #400]	; (8010fec <_strtod_l+0x5a4>)
 8010e5a:	f1c5 050f 	rsb	r5, r5, #15
 8010e5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010e62:	4652      	mov	r2, sl
 8010e64:	465b      	mov	r3, fp
 8010e66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e6a:	f7ef fbe5 	bl	8000638 <__aeabi_dmul>
 8010e6e:	9b06      	ldr	r3, [sp, #24]
 8010e70:	1b5d      	subs	r5, r3, r5
 8010e72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010e76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010e7a:	e7e3      	b.n	8010e44 <_strtod_l+0x3fc>
 8010e7c:	9b06      	ldr	r3, [sp, #24]
 8010e7e:	3316      	adds	r3, #22
 8010e80:	db0b      	blt.n	8010e9a <_strtod_l+0x452>
 8010e82:	9b05      	ldr	r3, [sp, #20]
 8010e84:	1b9e      	subs	r6, r3, r6
 8010e86:	4b59      	ldr	r3, [pc, #356]	; (8010fec <_strtod_l+0x5a4>)
 8010e88:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010e8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010e90:	4650      	mov	r0, sl
 8010e92:	4659      	mov	r1, fp
 8010e94:	f7ef fcfa 	bl	800088c <__aeabi_ddiv>
 8010e98:	e7d6      	b.n	8010e48 <_strtod_l+0x400>
 8010e9a:	9b06      	ldr	r3, [sp, #24]
 8010e9c:	eba5 0808 	sub.w	r8, r5, r8
 8010ea0:	4498      	add	r8, r3
 8010ea2:	f1b8 0f00 	cmp.w	r8, #0
 8010ea6:	dd74      	ble.n	8010f92 <_strtod_l+0x54a>
 8010ea8:	f018 030f 	ands.w	r3, r8, #15
 8010eac:	d00a      	beq.n	8010ec4 <_strtod_l+0x47c>
 8010eae:	494f      	ldr	r1, [pc, #316]	; (8010fec <_strtod_l+0x5a4>)
 8010eb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010eb4:	4652      	mov	r2, sl
 8010eb6:	465b      	mov	r3, fp
 8010eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ebc:	f7ef fbbc 	bl	8000638 <__aeabi_dmul>
 8010ec0:	4682      	mov	sl, r0
 8010ec2:	468b      	mov	fp, r1
 8010ec4:	f038 080f 	bics.w	r8, r8, #15
 8010ec8:	d04f      	beq.n	8010f6a <_strtod_l+0x522>
 8010eca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010ece:	dd22      	ble.n	8010f16 <_strtod_l+0x4ce>
 8010ed0:	2500      	movs	r5, #0
 8010ed2:	462e      	mov	r6, r5
 8010ed4:	9507      	str	r5, [sp, #28]
 8010ed6:	9505      	str	r5, [sp, #20]
 8010ed8:	2322      	movs	r3, #34	; 0x22
 8010eda:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010ff4 <_strtod_l+0x5ac>
 8010ede:	6023      	str	r3, [r4, #0]
 8010ee0:	f04f 0a00 	mov.w	sl, #0
 8010ee4:	9b07      	ldr	r3, [sp, #28]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	f43f adf2 	beq.w	8010ad0 <_strtod_l+0x88>
 8010eec:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010eee:	4620      	mov	r0, r4
 8010ef0:	f001 feb8 	bl	8012c64 <_Bfree>
 8010ef4:	9905      	ldr	r1, [sp, #20]
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f001 feb4 	bl	8012c64 <_Bfree>
 8010efc:	4631      	mov	r1, r6
 8010efe:	4620      	mov	r0, r4
 8010f00:	f001 feb0 	bl	8012c64 <_Bfree>
 8010f04:	9907      	ldr	r1, [sp, #28]
 8010f06:	4620      	mov	r0, r4
 8010f08:	f001 feac 	bl	8012c64 <_Bfree>
 8010f0c:	4629      	mov	r1, r5
 8010f0e:	4620      	mov	r0, r4
 8010f10:	f001 fea8 	bl	8012c64 <_Bfree>
 8010f14:	e5dc      	b.n	8010ad0 <_strtod_l+0x88>
 8010f16:	4b36      	ldr	r3, [pc, #216]	; (8010ff0 <_strtod_l+0x5a8>)
 8010f18:	9304      	str	r3, [sp, #16]
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010f20:	4650      	mov	r0, sl
 8010f22:	4659      	mov	r1, fp
 8010f24:	4699      	mov	r9, r3
 8010f26:	f1b8 0f01 	cmp.w	r8, #1
 8010f2a:	dc21      	bgt.n	8010f70 <_strtod_l+0x528>
 8010f2c:	b10b      	cbz	r3, 8010f32 <_strtod_l+0x4ea>
 8010f2e:	4682      	mov	sl, r0
 8010f30:	468b      	mov	fp, r1
 8010f32:	4b2f      	ldr	r3, [pc, #188]	; (8010ff0 <_strtod_l+0x5a8>)
 8010f34:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010f38:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010f3c:	4652      	mov	r2, sl
 8010f3e:	465b      	mov	r3, fp
 8010f40:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010f44:	f7ef fb78 	bl	8000638 <__aeabi_dmul>
 8010f48:	4b2a      	ldr	r3, [pc, #168]	; (8010ff4 <_strtod_l+0x5ac>)
 8010f4a:	460a      	mov	r2, r1
 8010f4c:	400b      	ands	r3, r1
 8010f4e:	492a      	ldr	r1, [pc, #168]	; (8010ff8 <_strtod_l+0x5b0>)
 8010f50:	428b      	cmp	r3, r1
 8010f52:	4682      	mov	sl, r0
 8010f54:	d8bc      	bhi.n	8010ed0 <_strtod_l+0x488>
 8010f56:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010f5a:	428b      	cmp	r3, r1
 8010f5c:	bf86      	itte	hi
 8010f5e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8010ffc <_strtod_l+0x5b4>
 8010f62:	f04f 3aff 	movhi.w	sl, #4294967295
 8010f66:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	9304      	str	r3, [sp, #16]
 8010f6e:	e084      	b.n	801107a <_strtod_l+0x632>
 8010f70:	f018 0f01 	tst.w	r8, #1
 8010f74:	d005      	beq.n	8010f82 <_strtod_l+0x53a>
 8010f76:	9b04      	ldr	r3, [sp, #16]
 8010f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f7c:	f7ef fb5c 	bl	8000638 <__aeabi_dmul>
 8010f80:	2301      	movs	r3, #1
 8010f82:	9a04      	ldr	r2, [sp, #16]
 8010f84:	3208      	adds	r2, #8
 8010f86:	f109 0901 	add.w	r9, r9, #1
 8010f8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010f8e:	9204      	str	r2, [sp, #16]
 8010f90:	e7c9      	b.n	8010f26 <_strtod_l+0x4de>
 8010f92:	d0ea      	beq.n	8010f6a <_strtod_l+0x522>
 8010f94:	f1c8 0800 	rsb	r8, r8, #0
 8010f98:	f018 020f 	ands.w	r2, r8, #15
 8010f9c:	d00a      	beq.n	8010fb4 <_strtod_l+0x56c>
 8010f9e:	4b13      	ldr	r3, [pc, #76]	; (8010fec <_strtod_l+0x5a4>)
 8010fa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fa4:	4650      	mov	r0, sl
 8010fa6:	4659      	mov	r1, fp
 8010fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fac:	f7ef fc6e 	bl	800088c <__aeabi_ddiv>
 8010fb0:	4682      	mov	sl, r0
 8010fb2:	468b      	mov	fp, r1
 8010fb4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010fb8:	d0d7      	beq.n	8010f6a <_strtod_l+0x522>
 8010fba:	f1b8 0f1f 	cmp.w	r8, #31
 8010fbe:	dd1f      	ble.n	8011000 <_strtod_l+0x5b8>
 8010fc0:	2500      	movs	r5, #0
 8010fc2:	462e      	mov	r6, r5
 8010fc4:	9507      	str	r5, [sp, #28]
 8010fc6:	9505      	str	r5, [sp, #20]
 8010fc8:	2322      	movs	r3, #34	; 0x22
 8010fca:	f04f 0a00 	mov.w	sl, #0
 8010fce:	f04f 0b00 	mov.w	fp, #0
 8010fd2:	6023      	str	r3, [r4, #0]
 8010fd4:	e786      	b.n	8010ee4 <_strtod_l+0x49c>
 8010fd6:	bf00      	nop
 8010fd8:	08015255 	.word	0x08015255
 8010fdc:	08015294 	.word	0x08015294
 8010fe0:	0801524d 	.word	0x0801524d
 8010fe4:	080153d4 	.word	0x080153d4
 8010fe8:	0801569b 	.word	0x0801569b
 8010fec:	08015560 	.word	0x08015560
 8010ff0:	08015538 	.word	0x08015538
 8010ff4:	7ff00000 	.word	0x7ff00000
 8010ff8:	7ca00000 	.word	0x7ca00000
 8010ffc:	7fefffff 	.word	0x7fefffff
 8011000:	f018 0310 	ands.w	r3, r8, #16
 8011004:	bf18      	it	ne
 8011006:	236a      	movne	r3, #106	; 0x6a
 8011008:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80113b8 <_strtod_l+0x970>
 801100c:	9304      	str	r3, [sp, #16]
 801100e:	4650      	mov	r0, sl
 8011010:	4659      	mov	r1, fp
 8011012:	2300      	movs	r3, #0
 8011014:	f018 0f01 	tst.w	r8, #1
 8011018:	d004      	beq.n	8011024 <_strtod_l+0x5dc>
 801101a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801101e:	f7ef fb0b 	bl	8000638 <__aeabi_dmul>
 8011022:	2301      	movs	r3, #1
 8011024:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011028:	f109 0908 	add.w	r9, r9, #8
 801102c:	d1f2      	bne.n	8011014 <_strtod_l+0x5cc>
 801102e:	b10b      	cbz	r3, 8011034 <_strtod_l+0x5ec>
 8011030:	4682      	mov	sl, r0
 8011032:	468b      	mov	fp, r1
 8011034:	9b04      	ldr	r3, [sp, #16]
 8011036:	b1c3      	cbz	r3, 801106a <_strtod_l+0x622>
 8011038:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801103c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011040:	2b00      	cmp	r3, #0
 8011042:	4659      	mov	r1, fp
 8011044:	dd11      	ble.n	801106a <_strtod_l+0x622>
 8011046:	2b1f      	cmp	r3, #31
 8011048:	f340 8124 	ble.w	8011294 <_strtod_l+0x84c>
 801104c:	2b34      	cmp	r3, #52	; 0x34
 801104e:	bfde      	ittt	le
 8011050:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8011054:	f04f 33ff 	movle.w	r3, #4294967295
 8011058:	fa03 f202 	lslle.w	r2, r3, r2
 801105c:	f04f 0a00 	mov.w	sl, #0
 8011060:	bfcc      	ite	gt
 8011062:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011066:	ea02 0b01 	andle.w	fp, r2, r1
 801106a:	2200      	movs	r2, #0
 801106c:	2300      	movs	r3, #0
 801106e:	4650      	mov	r0, sl
 8011070:	4659      	mov	r1, fp
 8011072:	f7ef fd49 	bl	8000b08 <__aeabi_dcmpeq>
 8011076:	2800      	cmp	r0, #0
 8011078:	d1a2      	bne.n	8010fc0 <_strtod_l+0x578>
 801107a:	9b07      	ldr	r3, [sp, #28]
 801107c:	9300      	str	r3, [sp, #0]
 801107e:	9908      	ldr	r1, [sp, #32]
 8011080:	462b      	mov	r3, r5
 8011082:	463a      	mov	r2, r7
 8011084:	4620      	mov	r0, r4
 8011086:	f001 fe55 	bl	8012d34 <__s2b>
 801108a:	9007      	str	r0, [sp, #28]
 801108c:	2800      	cmp	r0, #0
 801108e:	f43f af1f 	beq.w	8010ed0 <_strtod_l+0x488>
 8011092:	9b05      	ldr	r3, [sp, #20]
 8011094:	1b9e      	subs	r6, r3, r6
 8011096:	9b06      	ldr	r3, [sp, #24]
 8011098:	2b00      	cmp	r3, #0
 801109a:	bfb4      	ite	lt
 801109c:	4633      	movlt	r3, r6
 801109e:	2300      	movge	r3, #0
 80110a0:	930c      	str	r3, [sp, #48]	; 0x30
 80110a2:	9b06      	ldr	r3, [sp, #24]
 80110a4:	2500      	movs	r5, #0
 80110a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80110aa:	9312      	str	r3, [sp, #72]	; 0x48
 80110ac:	462e      	mov	r6, r5
 80110ae:	9b07      	ldr	r3, [sp, #28]
 80110b0:	4620      	mov	r0, r4
 80110b2:	6859      	ldr	r1, [r3, #4]
 80110b4:	f001 fd96 	bl	8012be4 <_Balloc>
 80110b8:	9005      	str	r0, [sp, #20]
 80110ba:	2800      	cmp	r0, #0
 80110bc:	f43f af0c 	beq.w	8010ed8 <_strtod_l+0x490>
 80110c0:	9b07      	ldr	r3, [sp, #28]
 80110c2:	691a      	ldr	r2, [r3, #16]
 80110c4:	3202      	adds	r2, #2
 80110c6:	f103 010c 	add.w	r1, r3, #12
 80110ca:	0092      	lsls	r2, r2, #2
 80110cc:	300c      	adds	r0, #12
 80110ce:	f7fe fd5b 	bl	800fb88 <memcpy>
 80110d2:	ec4b ab10 	vmov	d0, sl, fp
 80110d6:	aa1a      	add	r2, sp, #104	; 0x68
 80110d8:	a919      	add	r1, sp, #100	; 0x64
 80110da:	4620      	mov	r0, r4
 80110dc:	f002 f970 	bl	80133c0 <__d2b>
 80110e0:	ec4b ab18 	vmov	d8, sl, fp
 80110e4:	9018      	str	r0, [sp, #96]	; 0x60
 80110e6:	2800      	cmp	r0, #0
 80110e8:	f43f aef6 	beq.w	8010ed8 <_strtod_l+0x490>
 80110ec:	2101      	movs	r1, #1
 80110ee:	4620      	mov	r0, r4
 80110f0:	f001 feba 	bl	8012e68 <__i2b>
 80110f4:	4606      	mov	r6, r0
 80110f6:	2800      	cmp	r0, #0
 80110f8:	f43f aeee 	beq.w	8010ed8 <_strtod_l+0x490>
 80110fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80110fe:	9904      	ldr	r1, [sp, #16]
 8011100:	2b00      	cmp	r3, #0
 8011102:	bfab      	itete	ge
 8011104:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8011106:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8011108:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801110a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801110e:	bfac      	ite	ge
 8011110:	eb03 0902 	addge.w	r9, r3, r2
 8011114:	1ad7      	sublt	r7, r2, r3
 8011116:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011118:	eba3 0801 	sub.w	r8, r3, r1
 801111c:	4490      	add	r8, r2
 801111e:	4ba1      	ldr	r3, [pc, #644]	; (80113a4 <_strtod_l+0x95c>)
 8011120:	f108 38ff 	add.w	r8, r8, #4294967295
 8011124:	4598      	cmp	r8, r3
 8011126:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801112a:	f280 80c7 	bge.w	80112bc <_strtod_l+0x874>
 801112e:	eba3 0308 	sub.w	r3, r3, r8
 8011132:	2b1f      	cmp	r3, #31
 8011134:	eba2 0203 	sub.w	r2, r2, r3
 8011138:	f04f 0101 	mov.w	r1, #1
 801113c:	f300 80b1 	bgt.w	80112a2 <_strtod_l+0x85a>
 8011140:	fa01 f303 	lsl.w	r3, r1, r3
 8011144:	930d      	str	r3, [sp, #52]	; 0x34
 8011146:	2300      	movs	r3, #0
 8011148:	9308      	str	r3, [sp, #32]
 801114a:	eb09 0802 	add.w	r8, r9, r2
 801114e:	9b04      	ldr	r3, [sp, #16]
 8011150:	45c1      	cmp	r9, r8
 8011152:	4417      	add	r7, r2
 8011154:	441f      	add	r7, r3
 8011156:	464b      	mov	r3, r9
 8011158:	bfa8      	it	ge
 801115a:	4643      	movge	r3, r8
 801115c:	42bb      	cmp	r3, r7
 801115e:	bfa8      	it	ge
 8011160:	463b      	movge	r3, r7
 8011162:	2b00      	cmp	r3, #0
 8011164:	bfc2      	ittt	gt
 8011166:	eba8 0803 	subgt.w	r8, r8, r3
 801116a:	1aff      	subgt	r7, r7, r3
 801116c:	eba9 0903 	subgt.w	r9, r9, r3
 8011170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011172:	2b00      	cmp	r3, #0
 8011174:	dd17      	ble.n	80111a6 <_strtod_l+0x75e>
 8011176:	4631      	mov	r1, r6
 8011178:	461a      	mov	r2, r3
 801117a:	4620      	mov	r0, r4
 801117c:	f001 ff34 	bl	8012fe8 <__pow5mult>
 8011180:	4606      	mov	r6, r0
 8011182:	2800      	cmp	r0, #0
 8011184:	f43f aea8 	beq.w	8010ed8 <_strtod_l+0x490>
 8011188:	4601      	mov	r1, r0
 801118a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801118c:	4620      	mov	r0, r4
 801118e:	f001 fe81 	bl	8012e94 <__multiply>
 8011192:	900b      	str	r0, [sp, #44]	; 0x2c
 8011194:	2800      	cmp	r0, #0
 8011196:	f43f ae9f 	beq.w	8010ed8 <_strtod_l+0x490>
 801119a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801119c:	4620      	mov	r0, r4
 801119e:	f001 fd61 	bl	8012c64 <_Bfree>
 80111a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111a4:	9318      	str	r3, [sp, #96]	; 0x60
 80111a6:	f1b8 0f00 	cmp.w	r8, #0
 80111aa:	f300 808c 	bgt.w	80112c6 <_strtod_l+0x87e>
 80111ae:	9b06      	ldr	r3, [sp, #24]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	dd08      	ble.n	80111c6 <_strtod_l+0x77e>
 80111b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80111b6:	9905      	ldr	r1, [sp, #20]
 80111b8:	4620      	mov	r0, r4
 80111ba:	f001 ff15 	bl	8012fe8 <__pow5mult>
 80111be:	9005      	str	r0, [sp, #20]
 80111c0:	2800      	cmp	r0, #0
 80111c2:	f43f ae89 	beq.w	8010ed8 <_strtod_l+0x490>
 80111c6:	2f00      	cmp	r7, #0
 80111c8:	dd08      	ble.n	80111dc <_strtod_l+0x794>
 80111ca:	9905      	ldr	r1, [sp, #20]
 80111cc:	463a      	mov	r2, r7
 80111ce:	4620      	mov	r0, r4
 80111d0:	f001 ff64 	bl	801309c <__lshift>
 80111d4:	9005      	str	r0, [sp, #20]
 80111d6:	2800      	cmp	r0, #0
 80111d8:	f43f ae7e 	beq.w	8010ed8 <_strtod_l+0x490>
 80111dc:	f1b9 0f00 	cmp.w	r9, #0
 80111e0:	dd08      	ble.n	80111f4 <_strtod_l+0x7ac>
 80111e2:	4631      	mov	r1, r6
 80111e4:	464a      	mov	r2, r9
 80111e6:	4620      	mov	r0, r4
 80111e8:	f001 ff58 	bl	801309c <__lshift>
 80111ec:	4606      	mov	r6, r0
 80111ee:	2800      	cmp	r0, #0
 80111f0:	f43f ae72 	beq.w	8010ed8 <_strtod_l+0x490>
 80111f4:	9a05      	ldr	r2, [sp, #20]
 80111f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80111f8:	4620      	mov	r0, r4
 80111fa:	f001 ffdb 	bl	80131b4 <__mdiff>
 80111fe:	4605      	mov	r5, r0
 8011200:	2800      	cmp	r0, #0
 8011202:	f43f ae69 	beq.w	8010ed8 <_strtod_l+0x490>
 8011206:	68c3      	ldr	r3, [r0, #12]
 8011208:	930b      	str	r3, [sp, #44]	; 0x2c
 801120a:	2300      	movs	r3, #0
 801120c:	60c3      	str	r3, [r0, #12]
 801120e:	4631      	mov	r1, r6
 8011210:	f001 ffb4 	bl	801317c <__mcmp>
 8011214:	2800      	cmp	r0, #0
 8011216:	da60      	bge.n	80112da <_strtod_l+0x892>
 8011218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801121a:	ea53 030a 	orrs.w	r3, r3, sl
 801121e:	f040 8082 	bne.w	8011326 <_strtod_l+0x8de>
 8011222:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011226:	2b00      	cmp	r3, #0
 8011228:	d17d      	bne.n	8011326 <_strtod_l+0x8de>
 801122a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801122e:	0d1b      	lsrs	r3, r3, #20
 8011230:	051b      	lsls	r3, r3, #20
 8011232:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011236:	d976      	bls.n	8011326 <_strtod_l+0x8de>
 8011238:	696b      	ldr	r3, [r5, #20]
 801123a:	b913      	cbnz	r3, 8011242 <_strtod_l+0x7fa>
 801123c:	692b      	ldr	r3, [r5, #16]
 801123e:	2b01      	cmp	r3, #1
 8011240:	dd71      	ble.n	8011326 <_strtod_l+0x8de>
 8011242:	4629      	mov	r1, r5
 8011244:	2201      	movs	r2, #1
 8011246:	4620      	mov	r0, r4
 8011248:	f001 ff28 	bl	801309c <__lshift>
 801124c:	4631      	mov	r1, r6
 801124e:	4605      	mov	r5, r0
 8011250:	f001 ff94 	bl	801317c <__mcmp>
 8011254:	2800      	cmp	r0, #0
 8011256:	dd66      	ble.n	8011326 <_strtod_l+0x8de>
 8011258:	9904      	ldr	r1, [sp, #16]
 801125a:	4a53      	ldr	r2, [pc, #332]	; (80113a8 <_strtod_l+0x960>)
 801125c:	465b      	mov	r3, fp
 801125e:	2900      	cmp	r1, #0
 8011260:	f000 8081 	beq.w	8011366 <_strtod_l+0x91e>
 8011264:	ea02 010b 	and.w	r1, r2, fp
 8011268:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801126c:	dc7b      	bgt.n	8011366 <_strtod_l+0x91e>
 801126e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011272:	f77f aea9 	ble.w	8010fc8 <_strtod_l+0x580>
 8011276:	4b4d      	ldr	r3, [pc, #308]	; (80113ac <_strtod_l+0x964>)
 8011278:	4650      	mov	r0, sl
 801127a:	4659      	mov	r1, fp
 801127c:	2200      	movs	r2, #0
 801127e:	f7ef f9db 	bl	8000638 <__aeabi_dmul>
 8011282:	460b      	mov	r3, r1
 8011284:	4303      	orrs	r3, r0
 8011286:	bf08      	it	eq
 8011288:	2322      	moveq	r3, #34	; 0x22
 801128a:	4682      	mov	sl, r0
 801128c:	468b      	mov	fp, r1
 801128e:	bf08      	it	eq
 8011290:	6023      	streq	r3, [r4, #0]
 8011292:	e62b      	b.n	8010eec <_strtod_l+0x4a4>
 8011294:	f04f 32ff 	mov.w	r2, #4294967295
 8011298:	fa02 f303 	lsl.w	r3, r2, r3
 801129c:	ea03 0a0a 	and.w	sl, r3, sl
 80112a0:	e6e3      	b.n	801106a <_strtod_l+0x622>
 80112a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80112a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80112aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80112ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80112b2:	fa01 f308 	lsl.w	r3, r1, r8
 80112b6:	9308      	str	r3, [sp, #32]
 80112b8:	910d      	str	r1, [sp, #52]	; 0x34
 80112ba:	e746      	b.n	801114a <_strtod_l+0x702>
 80112bc:	2300      	movs	r3, #0
 80112be:	9308      	str	r3, [sp, #32]
 80112c0:	2301      	movs	r3, #1
 80112c2:	930d      	str	r3, [sp, #52]	; 0x34
 80112c4:	e741      	b.n	801114a <_strtod_l+0x702>
 80112c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80112c8:	4642      	mov	r2, r8
 80112ca:	4620      	mov	r0, r4
 80112cc:	f001 fee6 	bl	801309c <__lshift>
 80112d0:	9018      	str	r0, [sp, #96]	; 0x60
 80112d2:	2800      	cmp	r0, #0
 80112d4:	f47f af6b 	bne.w	80111ae <_strtod_l+0x766>
 80112d8:	e5fe      	b.n	8010ed8 <_strtod_l+0x490>
 80112da:	465f      	mov	r7, fp
 80112dc:	d16e      	bne.n	80113bc <_strtod_l+0x974>
 80112de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80112e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80112e4:	b342      	cbz	r2, 8011338 <_strtod_l+0x8f0>
 80112e6:	4a32      	ldr	r2, [pc, #200]	; (80113b0 <_strtod_l+0x968>)
 80112e8:	4293      	cmp	r3, r2
 80112ea:	d128      	bne.n	801133e <_strtod_l+0x8f6>
 80112ec:	9b04      	ldr	r3, [sp, #16]
 80112ee:	4651      	mov	r1, sl
 80112f0:	b1eb      	cbz	r3, 801132e <_strtod_l+0x8e6>
 80112f2:	4b2d      	ldr	r3, [pc, #180]	; (80113a8 <_strtod_l+0x960>)
 80112f4:	403b      	ands	r3, r7
 80112f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80112fa:	f04f 32ff 	mov.w	r2, #4294967295
 80112fe:	d819      	bhi.n	8011334 <_strtod_l+0x8ec>
 8011300:	0d1b      	lsrs	r3, r3, #20
 8011302:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011306:	fa02 f303 	lsl.w	r3, r2, r3
 801130a:	4299      	cmp	r1, r3
 801130c:	d117      	bne.n	801133e <_strtod_l+0x8f6>
 801130e:	4b29      	ldr	r3, [pc, #164]	; (80113b4 <_strtod_l+0x96c>)
 8011310:	429f      	cmp	r7, r3
 8011312:	d102      	bne.n	801131a <_strtod_l+0x8d2>
 8011314:	3101      	adds	r1, #1
 8011316:	f43f addf 	beq.w	8010ed8 <_strtod_l+0x490>
 801131a:	4b23      	ldr	r3, [pc, #140]	; (80113a8 <_strtod_l+0x960>)
 801131c:	403b      	ands	r3, r7
 801131e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011322:	f04f 0a00 	mov.w	sl, #0
 8011326:	9b04      	ldr	r3, [sp, #16]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d1a4      	bne.n	8011276 <_strtod_l+0x82e>
 801132c:	e5de      	b.n	8010eec <_strtod_l+0x4a4>
 801132e:	f04f 33ff 	mov.w	r3, #4294967295
 8011332:	e7ea      	b.n	801130a <_strtod_l+0x8c2>
 8011334:	4613      	mov	r3, r2
 8011336:	e7e8      	b.n	801130a <_strtod_l+0x8c2>
 8011338:	ea53 030a 	orrs.w	r3, r3, sl
 801133c:	d08c      	beq.n	8011258 <_strtod_l+0x810>
 801133e:	9b08      	ldr	r3, [sp, #32]
 8011340:	b1db      	cbz	r3, 801137a <_strtod_l+0x932>
 8011342:	423b      	tst	r3, r7
 8011344:	d0ef      	beq.n	8011326 <_strtod_l+0x8de>
 8011346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011348:	9a04      	ldr	r2, [sp, #16]
 801134a:	4650      	mov	r0, sl
 801134c:	4659      	mov	r1, fp
 801134e:	b1c3      	cbz	r3, 8011382 <_strtod_l+0x93a>
 8011350:	f7ff fb5d 	bl	8010a0e <sulp>
 8011354:	4602      	mov	r2, r0
 8011356:	460b      	mov	r3, r1
 8011358:	ec51 0b18 	vmov	r0, r1, d8
 801135c:	f7ee ffb6 	bl	80002cc <__adddf3>
 8011360:	4682      	mov	sl, r0
 8011362:	468b      	mov	fp, r1
 8011364:	e7df      	b.n	8011326 <_strtod_l+0x8de>
 8011366:	4013      	ands	r3, r2
 8011368:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801136c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011370:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011374:	f04f 3aff 	mov.w	sl, #4294967295
 8011378:	e7d5      	b.n	8011326 <_strtod_l+0x8de>
 801137a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801137c:	ea13 0f0a 	tst.w	r3, sl
 8011380:	e7e0      	b.n	8011344 <_strtod_l+0x8fc>
 8011382:	f7ff fb44 	bl	8010a0e <sulp>
 8011386:	4602      	mov	r2, r0
 8011388:	460b      	mov	r3, r1
 801138a:	ec51 0b18 	vmov	r0, r1, d8
 801138e:	f7ee ff9b 	bl	80002c8 <__aeabi_dsub>
 8011392:	2200      	movs	r2, #0
 8011394:	2300      	movs	r3, #0
 8011396:	4682      	mov	sl, r0
 8011398:	468b      	mov	fp, r1
 801139a:	f7ef fbb5 	bl	8000b08 <__aeabi_dcmpeq>
 801139e:	2800      	cmp	r0, #0
 80113a0:	d0c1      	beq.n	8011326 <_strtod_l+0x8de>
 80113a2:	e611      	b.n	8010fc8 <_strtod_l+0x580>
 80113a4:	fffffc02 	.word	0xfffffc02
 80113a8:	7ff00000 	.word	0x7ff00000
 80113ac:	39500000 	.word	0x39500000
 80113b0:	000fffff 	.word	0x000fffff
 80113b4:	7fefffff 	.word	0x7fefffff
 80113b8:	080152a8 	.word	0x080152a8
 80113bc:	4631      	mov	r1, r6
 80113be:	4628      	mov	r0, r5
 80113c0:	f002 f85a 	bl	8013478 <__ratio>
 80113c4:	ec59 8b10 	vmov	r8, r9, d0
 80113c8:	ee10 0a10 	vmov	r0, s0
 80113cc:	2200      	movs	r2, #0
 80113ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80113d2:	4649      	mov	r1, r9
 80113d4:	f7ef fbac 	bl	8000b30 <__aeabi_dcmple>
 80113d8:	2800      	cmp	r0, #0
 80113da:	d07a      	beq.n	80114d2 <_strtod_l+0xa8a>
 80113dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d04a      	beq.n	8011478 <_strtod_l+0xa30>
 80113e2:	4b95      	ldr	r3, [pc, #596]	; (8011638 <_strtod_l+0xbf0>)
 80113e4:	2200      	movs	r2, #0
 80113e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80113ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011638 <_strtod_l+0xbf0>
 80113ee:	f04f 0800 	mov.w	r8, #0
 80113f2:	4b92      	ldr	r3, [pc, #584]	; (801163c <_strtod_l+0xbf4>)
 80113f4:	403b      	ands	r3, r7
 80113f6:	930d      	str	r3, [sp, #52]	; 0x34
 80113f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80113fa:	4b91      	ldr	r3, [pc, #580]	; (8011640 <_strtod_l+0xbf8>)
 80113fc:	429a      	cmp	r2, r3
 80113fe:	f040 80b0 	bne.w	8011562 <_strtod_l+0xb1a>
 8011402:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011406:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801140a:	ec4b ab10 	vmov	d0, sl, fp
 801140e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011412:	f001 ff59 	bl	80132c8 <__ulp>
 8011416:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801141a:	ec53 2b10 	vmov	r2, r3, d0
 801141e:	f7ef f90b 	bl	8000638 <__aeabi_dmul>
 8011422:	4652      	mov	r2, sl
 8011424:	465b      	mov	r3, fp
 8011426:	f7ee ff51 	bl	80002cc <__adddf3>
 801142a:	460b      	mov	r3, r1
 801142c:	4983      	ldr	r1, [pc, #524]	; (801163c <_strtod_l+0xbf4>)
 801142e:	4a85      	ldr	r2, [pc, #532]	; (8011644 <_strtod_l+0xbfc>)
 8011430:	4019      	ands	r1, r3
 8011432:	4291      	cmp	r1, r2
 8011434:	4682      	mov	sl, r0
 8011436:	d960      	bls.n	80114fa <_strtod_l+0xab2>
 8011438:	ee18 3a90 	vmov	r3, s17
 801143c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011440:	4293      	cmp	r3, r2
 8011442:	d104      	bne.n	801144e <_strtod_l+0xa06>
 8011444:	ee18 3a10 	vmov	r3, s16
 8011448:	3301      	adds	r3, #1
 801144a:	f43f ad45 	beq.w	8010ed8 <_strtod_l+0x490>
 801144e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8011650 <_strtod_l+0xc08>
 8011452:	f04f 3aff 	mov.w	sl, #4294967295
 8011456:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011458:	4620      	mov	r0, r4
 801145a:	f001 fc03 	bl	8012c64 <_Bfree>
 801145e:	9905      	ldr	r1, [sp, #20]
 8011460:	4620      	mov	r0, r4
 8011462:	f001 fbff 	bl	8012c64 <_Bfree>
 8011466:	4631      	mov	r1, r6
 8011468:	4620      	mov	r0, r4
 801146a:	f001 fbfb 	bl	8012c64 <_Bfree>
 801146e:	4629      	mov	r1, r5
 8011470:	4620      	mov	r0, r4
 8011472:	f001 fbf7 	bl	8012c64 <_Bfree>
 8011476:	e61a      	b.n	80110ae <_strtod_l+0x666>
 8011478:	f1ba 0f00 	cmp.w	sl, #0
 801147c:	d11b      	bne.n	80114b6 <_strtod_l+0xa6e>
 801147e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011482:	b9f3      	cbnz	r3, 80114c2 <_strtod_l+0xa7a>
 8011484:	4b6c      	ldr	r3, [pc, #432]	; (8011638 <_strtod_l+0xbf0>)
 8011486:	2200      	movs	r2, #0
 8011488:	4640      	mov	r0, r8
 801148a:	4649      	mov	r1, r9
 801148c:	f7ef fb46 	bl	8000b1c <__aeabi_dcmplt>
 8011490:	b9d0      	cbnz	r0, 80114c8 <_strtod_l+0xa80>
 8011492:	4640      	mov	r0, r8
 8011494:	4649      	mov	r1, r9
 8011496:	4b6c      	ldr	r3, [pc, #432]	; (8011648 <_strtod_l+0xc00>)
 8011498:	2200      	movs	r2, #0
 801149a:	f7ef f8cd 	bl	8000638 <__aeabi_dmul>
 801149e:	4680      	mov	r8, r0
 80114a0:	4689      	mov	r9, r1
 80114a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80114a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80114aa:	9315      	str	r3, [sp, #84]	; 0x54
 80114ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80114b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80114b4:	e79d      	b.n	80113f2 <_strtod_l+0x9aa>
 80114b6:	f1ba 0f01 	cmp.w	sl, #1
 80114ba:	d102      	bne.n	80114c2 <_strtod_l+0xa7a>
 80114bc:	2f00      	cmp	r7, #0
 80114be:	f43f ad83 	beq.w	8010fc8 <_strtod_l+0x580>
 80114c2:	4b62      	ldr	r3, [pc, #392]	; (801164c <_strtod_l+0xc04>)
 80114c4:	2200      	movs	r2, #0
 80114c6:	e78e      	b.n	80113e6 <_strtod_l+0x99e>
 80114c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8011648 <_strtod_l+0xc00>
 80114cc:	f04f 0800 	mov.w	r8, #0
 80114d0:	e7e7      	b.n	80114a2 <_strtod_l+0xa5a>
 80114d2:	4b5d      	ldr	r3, [pc, #372]	; (8011648 <_strtod_l+0xc00>)
 80114d4:	4640      	mov	r0, r8
 80114d6:	4649      	mov	r1, r9
 80114d8:	2200      	movs	r2, #0
 80114da:	f7ef f8ad 	bl	8000638 <__aeabi_dmul>
 80114de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114e0:	4680      	mov	r8, r0
 80114e2:	4689      	mov	r9, r1
 80114e4:	b933      	cbnz	r3, 80114f4 <_strtod_l+0xaac>
 80114e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80114ea:	900e      	str	r0, [sp, #56]	; 0x38
 80114ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80114ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80114f2:	e7dd      	b.n	80114b0 <_strtod_l+0xa68>
 80114f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80114f8:	e7f9      	b.n	80114ee <_strtod_l+0xaa6>
 80114fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80114fe:	9b04      	ldr	r3, [sp, #16]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d1a8      	bne.n	8011456 <_strtod_l+0xa0e>
 8011504:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011508:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801150a:	0d1b      	lsrs	r3, r3, #20
 801150c:	051b      	lsls	r3, r3, #20
 801150e:	429a      	cmp	r2, r3
 8011510:	d1a1      	bne.n	8011456 <_strtod_l+0xa0e>
 8011512:	4640      	mov	r0, r8
 8011514:	4649      	mov	r1, r9
 8011516:	f7ef fbef 	bl	8000cf8 <__aeabi_d2lz>
 801151a:	f7ef f85f 	bl	80005dc <__aeabi_l2d>
 801151e:	4602      	mov	r2, r0
 8011520:	460b      	mov	r3, r1
 8011522:	4640      	mov	r0, r8
 8011524:	4649      	mov	r1, r9
 8011526:	f7ee fecf 	bl	80002c8 <__aeabi_dsub>
 801152a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801152c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011530:	ea43 030a 	orr.w	r3, r3, sl
 8011534:	4313      	orrs	r3, r2
 8011536:	4680      	mov	r8, r0
 8011538:	4689      	mov	r9, r1
 801153a:	d055      	beq.n	80115e8 <_strtod_l+0xba0>
 801153c:	a336      	add	r3, pc, #216	; (adr r3, 8011618 <_strtod_l+0xbd0>)
 801153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011542:	f7ef faeb 	bl	8000b1c <__aeabi_dcmplt>
 8011546:	2800      	cmp	r0, #0
 8011548:	f47f acd0 	bne.w	8010eec <_strtod_l+0x4a4>
 801154c:	a334      	add	r3, pc, #208	; (adr r3, 8011620 <_strtod_l+0xbd8>)
 801154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011552:	4640      	mov	r0, r8
 8011554:	4649      	mov	r1, r9
 8011556:	f7ef faff 	bl	8000b58 <__aeabi_dcmpgt>
 801155a:	2800      	cmp	r0, #0
 801155c:	f43f af7b 	beq.w	8011456 <_strtod_l+0xa0e>
 8011560:	e4c4      	b.n	8010eec <_strtod_l+0x4a4>
 8011562:	9b04      	ldr	r3, [sp, #16]
 8011564:	b333      	cbz	r3, 80115b4 <_strtod_l+0xb6c>
 8011566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011568:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801156c:	d822      	bhi.n	80115b4 <_strtod_l+0xb6c>
 801156e:	a32e      	add	r3, pc, #184	; (adr r3, 8011628 <_strtod_l+0xbe0>)
 8011570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011574:	4640      	mov	r0, r8
 8011576:	4649      	mov	r1, r9
 8011578:	f7ef fada 	bl	8000b30 <__aeabi_dcmple>
 801157c:	b1a0      	cbz	r0, 80115a8 <_strtod_l+0xb60>
 801157e:	4649      	mov	r1, r9
 8011580:	4640      	mov	r0, r8
 8011582:	f7ef fb31 	bl	8000be8 <__aeabi_d2uiz>
 8011586:	2801      	cmp	r0, #1
 8011588:	bf38      	it	cc
 801158a:	2001      	movcc	r0, #1
 801158c:	f7ee ffda 	bl	8000544 <__aeabi_ui2d>
 8011590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011592:	4680      	mov	r8, r0
 8011594:	4689      	mov	r9, r1
 8011596:	bb23      	cbnz	r3, 80115e2 <_strtod_l+0xb9a>
 8011598:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801159c:	9010      	str	r0, [sp, #64]	; 0x40
 801159e:	9311      	str	r3, [sp, #68]	; 0x44
 80115a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80115a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80115a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80115ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80115b0:	1a9b      	subs	r3, r3, r2
 80115b2:	9309      	str	r3, [sp, #36]	; 0x24
 80115b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80115b8:	eeb0 0a48 	vmov.f32	s0, s16
 80115bc:	eef0 0a68 	vmov.f32	s1, s17
 80115c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80115c4:	f001 fe80 	bl	80132c8 <__ulp>
 80115c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80115cc:	ec53 2b10 	vmov	r2, r3, d0
 80115d0:	f7ef f832 	bl	8000638 <__aeabi_dmul>
 80115d4:	ec53 2b18 	vmov	r2, r3, d8
 80115d8:	f7ee fe78 	bl	80002cc <__adddf3>
 80115dc:	4682      	mov	sl, r0
 80115de:	468b      	mov	fp, r1
 80115e0:	e78d      	b.n	80114fe <_strtod_l+0xab6>
 80115e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80115e6:	e7db      	b.n	80115a0 <_strtod_l+0xb58>
 80115e8:	a311      	add	r3, pc, #68	; (adr r3, 8011630 <_strtod_l+0xbe8>)
 80115ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ee:	f7ef fa95 	bl	8000b1c <__aeabi_dcmplt>
 80115f2:	e7b2      	b.n	801155a <_strtod_l+0xb12>
 80115f4:	2300      	movs	r3, #0
 80115f6:	930a      	str	r3, [sp, #40]	; 0x28
 80115f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80115fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80115fc:	6013      	str	r3, [r2, #0]
 80115fe:	f7ff ba6b 	b.w	8010ad8 <_strtod_l+0x90>
 8011602:	2a65      	cmp	r2, #101	; 0x65
 8011604:	f43f ab5f 	beq.w	8010cc6 <_strtod_l+0x27e>
 8011608:	2a45      	cmp	r2, #69	; 0x45
 801160a:	f43f ab5c 	beq.w	8010cc6 <_strtod_l+0x27e>
 801160e:	2301      	movs	r3, #1
 8011610:	f7ff bb94 	b.w	8010d3c <_strtod_l+0x2f4>
 8011614:	f3af 8000 	nop.w
 8011618:	94a03595 	.word	0x94a03595
 801161c:	3fdfffff 	.word	0x3fdfffff
 8011620:	35afe535 	.word	0x35afe535
 8011624:	3fe00000 	.word	0x3fe00000
 8011628:	ffc00000 	.word	0xffc00000
 801162c:	41dfffff 	.word	0x41dfffff
 8011630:	94a03595 	.word	0x94a03595
 8011634:	3fcfffff 	.word	0x3fcfffff
 8011638:	3ff00000 	.word	0x3ff00000
 801163c:	7ff00000 	.word	0x7ff00000
 8011640:	7fe00000 	.word	0x7fe00000
 8011644:	7c9fffff 	.word	0x7c9fffff
 8011648:	3fe00000 	.word	0x3fe00000
 801164c:	bff00000 	.word	0xbff00000
 8011650:	7fefffff 	.word	0x7fefffff

08011654 <_strtod_r>:
 8011654:	4b01      	ldr	r3, [pc, #4]	; (801165c <_strtod_r+0x8>)
 8011656:	f7ff b9f7 	b.w	8010a48 <_strtod_l>
 801165a:	bf00      	nop
 801165c:	20000330 	.word	0x20000330

08011660 <_strtol_l.constprop.0>:
 8011660:	2b01      	cmp	r3, #1
 8011662:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011666:	d001      	beq.n	801166c <_strtol_l.constprop.0+0xc>
 8011668:	2b24      	cmp	r3, #36	; 0x24
 801166a:	d906      	bls.n	801167a <_strtol_l.constprop.0+0x1a>
 801166c:	f7fe fa62 	bl	800fb34 <__errno>
 8011670:	2316      	movs	r3, #22
 8011672:	6003      	str	r3, [r0, #0]
 8011674:	2000      	movs	r0, #0
 8011676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801167a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011760 <_strtol_l.constprop.0+0x100>
 801167e:	460d      	mov	r5, r1
 8011680:	462e      	mov	r6, r5
 8011682:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011686:	f814 700c 	ldrb.w	r7, [r4, ip]
 801168a:	f017 0708 	ands.w	r7, r7, #8
 801168e:	d1f7      	bne.n	8011680 <_strtol_l.constprop.0+0x20>
 8011690:	2c2d      	cmp	r4, #45	; 0x2d
 8011692:	d132      	bne.n	80116fa <_strtol_l.constprop.0+0x9a>
 8011694:	782c      	ldrb	r4, [r5, #0]
 8011696:	2701      	movs	r7, #1
 8011698:	1cb5      	adds	r5, r6, #2
 801169a:	2b00      	cmp	r3, #0
 801169c:	d05b      	beq.n	8011756 <_strtol_l.constprop.0+0xf6>
 801169e:	2b10      	cmp	r3, #16
 80116a0:	d109      	bne.n	80116b6 <_strtol_l.constprop.0+0x56>
 80116a2:	2c30      	cmp	r4, #48	; 0x30
 80116a4:	d107      	bne.n	80116b6 <_strtol_l.constprop.0+0x56>
 80116a6:	782c      	ldrb	r4, [r5, #0]
 80116a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80116ac:	2c58      	cmp	r4, #88	; 0x58
 80116ae:	d14d      	bne.n	801174c <_strtol_l.constprop.0+0xec>
 80116b0:	786c      	ldrb	r4, [r5, #1]
 80116b2:	2310      	movs	r3, #16
 80116b4:	3502      	adds	r5, #2
 80116b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80116ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80116be:	f04f 0c00 	mov.w	ip, #0
 80116c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80116c6:	4666      	mov	r6, ip
 80116c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80116cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80116d0:	f1be 0f09 	cmp.w	lr, #9
 80116d4:	d816      	bhi.n	8011704 <_strtol_l.constprop.0+0xa4>
 80116d6:	4674      	mov	r4, lr
 80116d8:	42a3      	cmp	r3, r4
 80116da:	dd24      	ble.n	8011726 <_strtol_l.constprop.0+0xc6>
 80116dc:	f1bc 0f00 	cmp.w	ip, #0
 80116e0:	db1e      	blt.n	8011720 <_strtol_l.constprop.0+0xc0>
 80116e2:	45b1      	cmp	r9, r6
 80116e4:	d31c      	bcc.n	8011720 <_strtol_l.constprop.0+0xc0>
 80116e6:	d101      	bne.n	80116ec <_strtol_l.constprop.0+0x8c>
 80116e8:	45a2      	cmp	sl, r4
 80116ea:	db19      	blt.n	8011720 <_strtol_l.constprop.0+0xc0>
 80116ec:	fb06 4603 	mla	r6, r6, r3, r4
 80116f0:	f04f 0c01 	mov.w	ip, #1
 80116f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80116f8:	e7e8      	b.n	80116cc <_strtol_l.constprop.0+0x6c>
 80116fa:	2c2b      	cmp	r4, #43	; 0x2b
 80116fc:	bf04      	itt	eq
 80116fe:	782c      	ldrbeq	r4, [r5, #0]
 8011700:	1cb5      	addeq	r5, r6, #2
 8011702:	e7ca      	b.n	801169a <_strtol_l.constprop.0+0x3a>
 8011704:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011708:	f1be 0f19 	cmp.w	lr, #25
 801170c:	d801      	bhi.n	8011712 <_strtol_l.constprop.0+0xb2>
 801170e:	3c37      	subs	r4, #55	; 0x37
 8011710:	e7e2      	b.n	80116d8 <_strtol_l.constprop.0+0x78>
 8011712:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011716:	f1be 0f19 	cmp.w	lr, #25
 801171a:	d804      	bhi.n	8011726 <_strtol_l.constprop.0+0xc6>
 801171c:	3c57      	subs	r4, #87	; 0x57
 801171e:	e7db      	b.n	80116d8 <_strtol_l.constprop.0+0x78>
 8011720:	f04f 3cff 	mov.w	ip, #4294967295
 8011724:	e7e6      	b.n	80116f4 <_strtol_l.constprop.0+0x94>
 8011726:	f1bc 0f00 	cmp.w	ip, #0
 801172a:	da05      	bge.n	8011738 <_strtol_l.constprop.0+0xd8>
 801172c:	2322      	movs	r3, #34	; 0x22
 801172e:	6003      	str	r3, [r0, #0]
 8011730:	4646      	mov	r6, r8
 8011732:	b942      	cbnz	r2, 8011746 <_strtol_l.constprop.0+0xe6>
 8011734:	4630      	mov	r0, r6
 8011736:	e79e      	b.n	8011676 <_strtol_l.constprop.0+0x16>
 8011738:	b107      	cbz	r7, 801173c <_strtol_l.constprop.0+0xdc>
 801173a:	4276      	negs	r6, r6
 801173c:	2a00      	cmp	r2, #0
 801173e:	d0f9      	beq.n	8011734 <_strtol_l.constprop.0+0xd4>
 8011740:	f1bc 0f00 	cmp.w	ip, #0
 8011744:	d000      	beq.n	8011748 <_strtol_l.constprop.0+0xe8>
 8011746:	1e69      	subs	r1, r5, #1
 8011748:	6011      	str	r1, [r2, #0]
 801174a:	e7f3      	b.n	8011734 <_strtol_l.constprop.0+0xd4>
 801174c:	2430      	movs	r4, #48	; 0x30
 801174e:	2b00      	cmp	r3, #0
 8011750:	d1b1      	bne.n	80116b6 <_strtol_l.constprop.0+0x56>
 8011752:	2308      	movs	r3, #8
 8011754:	e7af      	b.n	80116b6 <_strtol_l.constprop.0+0x56>
 8011756:	2c30      	cmp	r4, #48	; 0x30
 8011758:	d0a5      	beq.n	80116a6 <_strtol_l.constprop.0+0x46>
 801175a:	230a      	movs	r3, #10
 801175c:	e7ab      	b.n	80116b6 <_strtol_l.constprop.0+0x56>
 801175e:	bf00      	nop
 8011760:	080152d1 	.word	0x080152d1

08011764 <_strtol_r>:
 8011764:	f7ff bf7c 	b.w	8011660 <_strtol_l.constprop.0>

08011768 <_write_r>:
 8011768:	b538      	push	{r3, r4, r5, lr}
 801176a:	4d07      	ldr	r5, [pc, #28]	; (8011788 <_write_r+0x20>)
 801176c:	4604      	mov	r4, r0
 801176e:	4608      	mov	r0, r1
 8011770:	4611      	mov	r1, r2
 8011772:	2200      	movs	r2, #0
 8011774:	602a      	str	r2, [r5, #0]
 8011776:	461a      	mov	r2, r3
 8011778:	f7f1 f8c9 	bl	800290e <_write>
 801177c:	1c43      	adds	r3, r0, #1
 801177e:	d102      	bne.n	8011786 <_write_r+0x1e>
 8011780:	682b      	ldr	r3, [r5, #0]
 8011782:	b103      	cbz	r3, 8011786 <_write_r+0x1e>
 8011784:	6023      	str	r3, [r4, #0]
 8011786:	bd38      	pop	{r3, r4, r5, pc}
 8011788:	20000770 	.word	0x20000770

0801178c <_close_r>:
 801178c:	b538      	push	{r3, r4, r5, lr}
 801178e:	4d06      	ldr	r5, [pc, #24]	; (80117a8 <_close_r+0x1c>)
 8011790:	2300      	movs	r3, #0
 8011792:	4604      	mov	r4, r0
 8011794:	4608      	mov	r0, r1
 8011796:	602b      	str	r3, [r5, #0]
 8011798:	f7f1 f8d5 	bl	8002946 <_close>
 801179c:	1c43      	adds	r3, r0, #1
 801179e:	d102      	bne.n	80117a6 <_close_r+0x1a>
 80117a0:	682b      	ldr	r3, [r5, #0]
 80117a2:	b103      	cbz	r3, 80117a6 <_close_r+0x1a>
 80117a4:	6023      	str	r3, [r4, #0]
 80117a6:	bd38      	pop	{r3, r4, r5, pc}
 80117a8:	20000770 	.word	0x20000770

080117ac <quorem>:
 80117ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117b0:	6903      	ldr	r3, [r0, #16]
 80117b2:	690c      	ldr	r4, [r1, #16]
 80117b4:	42a3      	cmp	r3, r4
 80117b6:	4607      	mov	r7, r0
 80117b8:	f2c0 8081 	blt.w	80118be <quorem+0x112>
 80117bc:	3c01      	subs	r4, #1
 80117be:	f101 0814 	add.w	r8, r1, #20
 80117c2:	f100 0514 	add.w	r5, r0, #20
 80117c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80117ca:	9301      	str	r3, [sp, #4]
 80117cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80117d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80117d4:	3301      	adds	r3, #1
 80117d6:	429a      	cmp	r2, r3
 80117d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80117dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80117e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80117e4:	d331      	bcc.n	801184a <quorem+0x9e>
 80117e6:	f04f 0e00 	mov.w	lr, #0
 80117ea:	4640      	mov	r0, r8
 80117ec:	46ac      	mov	ip, r5
 80117ee:	46f2      	mov	sl, lr
 80117f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80117f4:	b293      	uxth	r3, r2
 80117f6:	fb06 e303 	mla	r3, r6, r3, lr
 80117fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80117fe:	b29b      	uxth	r3, r3
 8011800:	ebaa 0303 	sub.w	r3, sl, r3
 8011804:	f8dc a000 	ldr.w	sl, [ip]
 8011808:	0c12      	lsrs	r2, r2, #16
 801180a:	fa13 f38a 	uxtah	r3, r3, sl
 801180e:	fb06 e202 	mla	r2, r6, r2, lr
 8011812:	9300      	str	r3, [sp, #0]
 8011814:	9b00      	ldr	r3, [sp, #0]
 8011816:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801181a:	b292      	uxth	r2, r2
 801181c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011820:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011824:	f8bd 3000 	ldrh.w	r3, [sp]
 8011828:	4581      	cmp	r9, r0
 801182a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801182e:	f84c 3b04 	str.w	r3, [ip], #4
 8011832:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011836:	d2db      	bcs.n	80117f0 <quorem+0x44>
 8011838:	f855 300b 	ldr.w	r3, [r5, fp]
 801183c:	b92b      	cbnz	r3, 801184a <quorem+0x9e>
 801183e:	9b01      	ldr	r3, [sp, #4]
 8011840:	3b04      	subs	r3, #4
 8011842:	429d      	cmp	r5, r3
 8011844:	461a      	mov	r2, r3
 8011846:	d32e      	bcc.n	80118a6 <quorem+0xfa>
 8011848:	613c      	str	r4, [r7, #16]
 801184a:	4638      	mov	r0, r7
 801184c:	f001 fc96 	bl	801317c <__mcmp>
 8011850:	2800      	cmp	r0, #0
 8011852:	db24      	blt.n	801189e <quorem+0xf2>
 8011854:	3601      	adds	r6, #1
 8011856:	4628      	mov	r0, r5
 8011858:	f04f 0c00 	mov.w	ip, #0
 801185c:	f858 2b04 	ldr.w	r2, [r8], #4
 8011860:	f8d0 e000 	ldr.w	lr, [r0]
 8011864:	b293      	uxth	r3, r2
 8011866:	ebac 0303 	sub.w	r3, ip, r3
 801186a:	0c12      	lsrs	r2, r2, #16
 801186c:	fa13 f38e 	uxtah	r3, r3, lr
 8011870:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011874:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011878:	b29b      	uxth	r3, r3
 801187a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801187e:	45c1      	cmp	r9, r8
 8011880:	f840 3b04 	str.w	r3, [r0], #4
 8011884:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011888:	d2e8      	bcs.n	801185c <quorem+0xb0>
 801188a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801188e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011892:	b922      	cbnz	r2, 801189e <quorem+0xf2>
 8011894:	3b04      	subs	r3, #4
 8011896:	429d      	cmp	r5, r3
 8011898:	461a      	mov	r2, r3
 801189a:	d30a      	bcc.n	80118b2 <quorem+0x106>
 801189c:	613c      	str	r4, [r7, #16]
 801189e:	4630      	mov	r0, r6
 80118a0:	b003      	add	sp, #12
 80118a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118a6:	6812      	ldr	r2, [r2, #0]
 80118a8:	3b04      	subs	r3, #4
 80118aa:	2a00      	cmp	r2, #0
 80118ac:	d1cc      	bne.n	8011848 <quorem+0x9c>
 80118ae:	3c01      	subs	r4, #1
 80118b0:	e7c7      	b.n	8011842 <quorem+0x96>
 80118b2:	6812      	ldr	r2, [r2, #0]
 80118b4:	3b04      	subs	r3, #4
 80118b6:	2a00      	cmp	r2, #0
 80118b8:	d1f0      	bne.n	801189c <quorem+0xf0>
 80118ba:	3c01      	subs	r4, #1
 80118bc:	e7eb      	b.n	8011896 <quorem+0xea>
 80118be:	2000      	movs	r0, #0
 80118c0:	e7ee      	b.n	80118a0 <quorem+0xf4>
 80118c2:	0000      	movs	r0, r0
 80118c4:	0000      	movs	r0, r0
	...

080118c8 <_dtoa_r>:
 80118c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118cc:	ed2d 8b04 	vpush	{d8-d9}
 80118d0:	ec57 6b10 	vmov	r6, r7, d0
 80118d4:	b093      	sub	sp, #76	; 0x4c
 80118d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80118d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80118dc:	9106      	str	r1, [sp, #24]
 80118de:	ee10 aa10 	vmov	sl, s0
 80118e2:	4604      	mov	r4, r0
 80118e4:	9209      	str	r2, [sp, #36]	; 0x24
 80118e6:	930c      	str	r3, [sp, #48]	; 0x30
 80118e8:	46bb      	mov	fp, r7
 80118ea:	b975      	cbnz	r5, 801190a <_dtoa_r+0x42>
 80118ec:	2010      	movs	r0, #16
 80118ee:	f001 f95f 	bl	8012bb0 <malloc>
 80118f2:	4602      	mov	r2, r0
 80118f4:	6260      	str	r0, [r4, #36]	; 0x24
 80118f6:	b920      	cbnz	r0, 8011902 <_dtoa_r+0x3a>
 80118f8:	4ba7      	ldr	r3, [pc, #668]	; (8011b98 <_dtoa_r+0x2d0>)
 80118fa:	21ea      	movs	r1, #234	; 0xea
 80118fc:	48a7      	ldr	r0, [pc, #668]	; (8011b9c <_dtoa_r+0x2d4>)
 80118fe:	f002 fcc7 	bl	8014290 <__assert_func>
 8011902:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011906:	6005      	str	r5, [r0, #0]
 8011908:	60c5      	str	r5, [r0, #12]
 801190a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801190c:	6819      	ldr	r1, [r3, #0]
 801190e:	b151      	cbz	r1, 8011926 <_dtoa_r+0x5e>
 8011910:	685a      	ldr	r2, [r3, #4]
 8011912:	604a      	str	r2, [r1, #4]
 8011914:	2301      	movs	r3, #1
 8011916:	4093      	lsls	r3, r2
 8011918:	608b      	str	r3, [r1, #8]
 801191a:	4620      	mov	r0, r4
 801191c:	f001 f9a2 	bl	8012c64 <_Bfree>
 8011920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011922:	2200      	movs	r2, #0
 8011924:	601a      	str	r2, [r3, #0]
 8011926:	1e3b      	subs	r3, r7, #0
 8011928:	bfaa      	itet	ge
 801192a:	2300      	movge	r3, #0
 801192c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011930:	f8c8 3000 	strge.w	r3, [r8]
 8011934:	4b9a      	ldr	r3, [pc, #616]	; (8011ba0 <_dtoa_r+0x2d8>)
 8011936:	bfbc      	itt	lt
 8011938:	2201      	movlt	r2, #1
 801193a:	f8c8 2000 	strlt.w	r2, [r8]
 801193e:	ea33 030b 	bics.w	r3, r3, fp
 8011942:	d11b      	bne.n	801197c <_dtoa_r+0xb4>
 8011944:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011946:	f242 730f 	movw	r3, #9999	; 0x270f
 801194a:	6013      	str	r3, [r2, #0]
 801194c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011950:	4333      	orrs	r3, r6
 8011952:	f000 8592 	beq.w	801247a <_dtoa_r+0xbb2>
 8011956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011958:	b963      	cbnz	r3, 8011974 <_dtoa_r+0xac>
 801195a:	4b92      	ldr	r3, [pc, #584]	; (8011ba4 <_dtoa_r+0x2dc>)
 801195c:	e022      	b.n	80119a4 <_dtoa_r+0xdc>
 801195e:	4b92      	ldr	r3, [pc, #584]	; (8011ba8 <_dtoa_r+0x2e0>)
 8011960:	9301      	str	r3, [sp, #4]
 8011962:	3308      	adds	r3, #8
 8011964:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011966:	6013      	str	r3, [r2, #0]
 8011968:	9801      	ldr	r0, [sp, #4]
 801196a:	b013      	add	sp, #76	; 0x4c
 801196c:	ecbd 8b04 	vpop	{d8-d9}
 8011970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011974:	4b8b      	ldr	r3, [pc, #556]	; (8011ba4 <_dtoa_r+0x2dc>)
 8011976:	9301      	str	r3, [sp, #4]
 8011978:	3303      	adds	r3, #3
 801197a:	e7f3      	b.n	8011964 <_dtoa_r+0x9c>
 801197c:	2200      	movs	r2, #0
 801197e:	2300      	movs	r3, #0
 8011980:	4650      	mov	r0, sl
 8011982:	4659      	mov	r1, fp
 8011984:	f7ef f8c0 	bl	8000b08 <__aeabi_dcmpeq>
 8011988:	ec4b ab19 	vmov	d9, sl, fp
 801198c:	4680      	mov	r8, r0
 801198e:	b158      	cbz	r0, 80119a8 <_dtoa_r+0xe0>
 8011990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011992:	2301      	movs	r3, #1
 8011994:	6013      	str	r3, [r2, #0]
 8011996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011998:	2b00      	cmp	r3, #0
 801199a:	f000 856b 	beq.w	8012474 <_dtoa_r+0xbac>
 801199e:	4883      	ldr	r0, [pc, #524]	; (8011bac <_dtoa_r+0x2e4>)
 80119a0:	6018      	str	r0, [r3, #0]
 80119a2:	1e43      	subs	r3, r0, #1
 80119a4:	9301      	str	r3, [sp, #4]
 80119a6:	e7df      	b.n	8011968 <_dtoa_r+0xa0>
 80119a8:	ec4b ab10 	vmov	d0, sl, fp
 80119ac:	aa10      	add	r2, sp, #64	; 0x40
 80119ae:	a911      	add	r1, sp, #68	; 0x44
 80119b0:	4620      	mov	r0, r4
 80119b2:	f001 fd05 	bl	80133c0 <__d2b>
 80119b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80119ba:	ee08 0a10 	vmov	s16, r0
 80119be:	2d00      	cmp	r5, #0
 80119c0:	f000 8084 	beq.w	8011acc <_dtoa_r+0x204>
 80119c4:	ee19 3a90 	vmov	r3, s19
 80119c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80119cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80119d0:	4656      	mov	r6, sl
 80119d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80119d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80119da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80119de:	4b74      	ldr	r3, [pc, #464]	; (8011bb0 <_dtoa_r+0x2e8>)
 80119e0:	2200      	movs	r2, #0
 80119e2:	4630      	mov	r0, r6
 80119e4:	4639      	mov	r1, r7
 80119e6:	f7ee fc6f 	bl	80002c8 <__aeabi_dsub>
 80119ea:	a365      	add	r3, pc, #404	; (adr r3, 8011b80 <_dtoa_r+0x2b8>)
 80119ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f0:	f7ee fe22 	bl	8000638 <__aeabi_dmul>
 80119f4:	a364      	add	r3, pc, #400	; (adr r3, 8011b88 <_dtoa_r+0x2c0>)
 80119f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119fa:	f7ee fc67 	bl	80002cc <__adddf3>
 80119fe:	4606      	mov	r6, r0
 8011a00:	4628      	mov	r0, r5
 8011a02:	460f      	mov	r7, r1
 8011a04:	f7ee fdae 	bl	8000564 <__aeabi_i2d>
 8011a08:	a361      	add	r3, pc, #388	; (adr r3, 8011b90 <_dtoa_r+0x2c8>)
 8011a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a0e:	f7ee fe13 	bl	8000638 <__aeabi_dmul>
 8011a12:	4602      	mov	r2, r0
 8011a14:	460b      	mov	r3, r1
 8011a16:	4630      	mov	r0, r6
 8011a18:	4639      	mov	r1, r7
 8011a1a:	f7ee fc57 	bl	80002cc <__adddf3>
 8011a1e:	4606      	mov	r6, r0
 8011a20:	460f      	mov	r7, r1
 8011a22:	f7ef f8b9 	bl	8000b98 <__aeabi_d2iz>
 8011a26:	2200      	movs	r2, #0
 8011a28:	9000      	str	r0, [sp, #0]
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	4630      	mov	r0, r6
 8011a2e:	4639      	mov	r1, r7
 8011a30:	f7ef f874 	bl	8000b1c <__aeabi_dcmplt>
 8011a34:	b150      	cbz	r0, 8011a4c <_dtoa_r+0x184>
 8011a36:	9800      	ldr	r0, [sp, #0]
 8011a38:	f7ee fd94 	bl	8000564 <__aeabi_i2d>
 8011a3c:	4632      	mov	r2, r6
 8011a3e:	463b      	mov	r3, r7
 8011a40:	f7ef f862 	bl	8000b08 <__aeabi_dcmpeq>
 8011a44:	b910      	cbnz	r0, 8011a4c <_dtoa_r+0x184>
 8011a46:	9b00      	ldr	r3, [sp, #0]
 8011a48:	3b01      	subs	r3, #1
 8011a4a:	9300      	str	r3, [sp, #0]
 8011a4c:	9b00      	ldr	r3, [sp, #0]
 8011a4e:	2b16      	cmp	r3, #22
 8011a50:	d85a      	bhi.n	8011b08 <_dtoa_r+0x240>
 8011a52:	9a00      	ldr	r2, [sp, #0]
 8011a54:	4b57      	ldr	r3, [pc, #348]	; (8011bb4 <_dtoa_r+0x2ec>)
 8011a56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a5e:	ec51 0b19 	vmov	r0, r1, d9
 8011a62:	f7ef f85b 	bl	8000b1c <__aeabi_dcmplt>
 8011a66:	2800      	cmp	r0, #0
 8011a68:	d050      	beq.n	8011b0c <_dtoa_r+0x244>
 8011a6a:	9b00      	ldr	r3, [sp, #0]
 8011a6c:	3b01      	subs	r3, #1
 8011a6e:	9300      	str	r3, [sp, #0]
 8011a70:	2300      	movs	r3, #0
 8011a72:	930b      	str	r3, [sp, #44]	; 0x2c
 8011a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011a76:	1b5d      	subs	r5, r3, r5
 8011a78:	1e6b      	subs	r3, r5, #1
 8011a7a:	9305      	str	r3, [sp, #20]
 8011a7c:	bf45      	ittet	mi
 8011a7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8011a82:	9304      	strmi	r3, [sp, #16]
 8011a84:	2300      	movpl	r3, #0
 8011a86:	2300      	movmi	r3, #0
 8011a88:	bf4c      	ite	mi
 8011a8a:	9305      	strmi	r3, [sp, #20]
 8011a8c:	9304      	strpl	r3, [sp, #16]
 8011a8e:	9b00      	ldr	r3, [sp, #0]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	db3d      	blt.n	8011b10 <_dtoa_r+0x248>
 8011a94:	9b05      	ldr	r3, [sp, #20]
 8011a96:	9a00      	ldr	r2, [sp, #0]
 8011a98:	920a      	str	r2, [sp, #40]	; 0x28
 8011a9a:	4413      	add	r3, r2
 8011a9c:	9305      	str	r3, [sp, #20]
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	9307      	str	r3, [sp, #28]
 8011aa2:	9b06      	ldr	r3, [sp, #24]
 8011aa4:	2b09      	cmp	r3, #9
 8011aa6:	f200 8089 	bhi.w	8011bbc <_dtoa_r+0x2f4>
 8011aaa:	2b05      	cmp	r3, #5
 8011aac:	bfc4      	itt	gt
 8011aae:	3b04      	subgt	r3, #4
 8011ab0:	9306      	strgt	r3, [sp, #24]
 8011ab2:	9b06      	ldr	r3, [sp, #24]
 8011ab4:	f1a3 0302 	sub.w	r3, r3, #2
 8011ab8:	bfcc      	ite	gt
 8011aba:	2500      	movgt	r5, #0
 8011abc:	2501      	movle	r5, #1
 8011abe:	2b03      	cmp	r3, #3
 8011ac0:	f200 8087 	bhi.w	8011bd2 <_dtoa_r+0x30a>
 8011ac4:	e8df f003 	tbb	[pc, r3]
 8011ac8:	59383a2d 	.word	0x59383a2d
 8011acc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011ad0:	441d      	add	r5, r3
 8011ad2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011ad6:	2b20      	cmp	r3, #32
 8011ad8:	bfc1      	itttt	gt
 8011ada:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011ade:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011ae2:	fa0b f303 	lslgt.w	r3, fp, r3
 8011ae6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011aea:	bfda      	itte	le
 8011aec:	f1c3 0320 	rsble	r3, r3, #32
 8011af0:	fa06 f003 	lslle.w	r0, r6, r3
 8011af4:	4318      	orrgt	r0, r3
 8011af6:	f7ee fd25 	bl	8000544 <__aeabi_ui2d>
 8011afa:	2301      	movs	r3, #1
 8011afc:	4606      	mov	r6, r0
 8011afe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011b02:	3d01      	subs	r5, #1
 8011b04:	930e      	str	r3, [sp, #56]	; 0x38
 8011b06:	e76a      	b.n	80119de <_dtoa_r+0x116>
 8011b08:	2301      	movs	r3, #1
 8011b0a:	e7b2      	b.n	8011a72 <_dtoa_r+0x1aa>
 8011b0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8011b0e:	e7b1      	b.n	8011a74 <_dtoa_r+0x1ac>
 8011b10:	9b04      	ldr	r3, [sp, #16]
 8011b12:	9a00      	ldr	r2, [sp, #0]
 8011b14:	1a9b      	subs	r3, r3, r2
 8011b16:	9304      	str	r3, [sp, #16]
 8011b18:	4253      	negs	r3, r2
 8011b1a:	9307      	str	r3, [sp, #28]
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8011b20:	e7bf      	b.n	8011aa2 <_dtoa_r+0x1da>
 8011b22:	2300      	movs	r3, #0
 8011b24:	9308      	str	r3, [sp, #32]
 8011b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	dc55      	bgt.n	8011bd8 <_dtoa_r+0x310>
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011b32:	461a      	mov	r2, r3
 8011b34:	9209      	str	r2, [sp, #36]	; 0x24
 8011b36:	e00c      	b.n	8011b52 <_dtoa_r+0x28a>
 8011b38:	2301      	movs	r3, #1
 8011b3a:	e7f3      	b.n	8011b24 <_dtoa_r+0x25c>
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b40:	9308      	str	r3, [sp, #32]
 8011b42:	9b00      	ldr	r3, [sp, #0]
 8011b44:	4413      	add	r3, r2
 8011b46:	9302      	str	r3, [sp, #8]
 8011b48:	3301      	adds	r3, #1
 8011b4a:	2b01      	cmp	r3, #1
 8011b4c:	9303      	str	r3, [sp, #12]
 8011b4e:	bfb8      	it	lt
 8011b50:	2301      	movlt	r3, #1
 8011b52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011b54:	2200      	movs	r2, #0
 8011b56:	6042      	str	r2, [r0, #4]
 8011b58:	2204      	movs	r2, #4
 8011b5a:	f102 0614 	add.w	r6, r2, #20
 8011b5e:	429e      	cmp	r6, r3
 8011b60:	6841      	ldr	r1, [r0, #4]
 8011b62:	d93d      	bls.n	8011be0 <_dtoa_r+0x318>
 8011b64:	4620      	mov	r0, r4
 8011b66:	f001 f83d 	bl	8012be4 <_Balloc>
 8011b6a:	9001      	str	r0, [sp, #4]
 8011b6c:	2800      	cmp	r0, #0
 8011b6e:	d13b      	bne.n	8011be8 <_dtoa_r+0x320>
 8011b70:	4b11      	ldr	r3, [pc, #68]	; (8011bb8 <_dtoa_r+0x2f0>)
 8011b72:	4602      	mov	r2, r0
 8011b74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011b78:	e6c0      	b.n	80118fc <_dtoa_r+0x34>
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	e7df      	b.n	8011b3e <_dtoa_r+0x276>
 8011b7e:	bf00      	nop
 8011b80:	636f4361 	.word	0x636f4361
 8011b84:	3fd287a7 	.word	0x3fd287a7
 8011b88:	8b60c8b3 	.word	0x8b60c8b3
 8011b8c:	3fc68a28 	.word	0x3fc68a28
 8011b90:	509f79fb 	.word	0x509f79fb
 8011b94:	3fd34413 	.word	0x3fd34413
 8011b98:	080153de 	.word	0x080153de
 8011b9c:	080153f5 	.word	0x080153f5
 8011ba0:	7ff00000 	.word	0x7ff00000
 8011ba4:	080153da 	.word	0x080153da
 8011ba8:	080153d1 	.word	0x080153d1
 8011bac:	0801564a 	.word	0x0801564a
 8011bb0:	3ff80000 	.word	0x3ff80000
 8011bb4:	08015560 	.word	0x08015560
 8011bb8:	08015450 	.word	0x08015450
 8011bbc:	2501      	movs	r5, #1
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	9306      	str	r3, [sp, #24]
 8011bc2:	9508      	str	r5, [sp, #32]
 8011bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8011bc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	2312      	movs	r3, #18
 8011bd0:	e7b0      	b.n	8011b34 <_dtoa_r+0x26c>
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	9308      	str	r3, [sp, #32]
 8011bd6:	e7f5      	b.n	8011bc4 <_dtoa_r+0x2fc>
 8011bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011bde:	e7b8      	b.n	8011b52 <_dtoa_r+0x28a>
 8011be0:	3101      	adds	r1, #1
 8011be2:	6041      	str	r1, [r0, #4]
 8011be4:	0052      	lsls	r2, r2, #1
 8011be6:	e7b8      	b.n	8011b5a <_dtoa_r+0x292>
 8011be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011bea:	9a01      	ldr	r2, [sp, #4]
 8011bec:	601a      	str	r2, [r3, #0]
 8011bee:	9b03      	ldr	r3, [sp, #12]
 8011bf0:	2b0e      	cmp	r3, #14
 8011bf2:	f200 809d 	bhi.w	8011d30 <_dtoa_r+0x468>
 8011bf6:	2d00      	cmp	r5, #0
 8011bf8:	f000 809a 	beq.w	8011d30 <_dtoa_r+0x468>
 8011bfc:	9b00      	ldr	r3, [sp, #0]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	dd32      	ble.n	8011c68 <_dtoa_r+0x3a0>
 8011c02:	4ab7      	ldr	r2, [pc, #732]	; (8011ee0 <_dtoa_r+0x618>)
 8011c04:	f003 030f 	and.w	r3, r3, #15
 8011c08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011c0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011c10:	9b00      	ldr	r3, [sp, #0]
 8011c12:	05d8      	lsls	r0, r3, #23
 8011c14:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011c18:	d516      	bpl.n	8011c48 <_dtoa_r+0x380>
 8011c1a:	4bb2      	ldr	r3, [pc, #712]	; (8011ee4 <_dtoa_r+0x61c>)
 8011c1c:	ec51 0b19 	vmov	r0, r1, d9
 8011c20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011c24:	f7ee fe32 	bl	800088c <__aeabi_ddiv>
 8011c28:	f007 070f 	and.w	r7, r7, #15
 8011c2c:	4682      	mov	sl, r0
 8011c2e:	468b      	mov	fp, r1
 8011c30:	2503      	movs	r5, #3
 8011c32:	4eac      	ldr	r6, [pc, #688]	; (8011ee4 <_dtoa_r+0x61c>)
 8011c34:	b957      	cbnz	r7, 8011c4c <_dtoa_r+0x384>
 8011c36:	4642      	mov	r2, r8
 8011c38:	464b      	mov	r3, r9
 8011c3a:	4650      	mov	r0, sl
 8011c3c:	4659      	mov	r1, fp
 8011c3e:	f7ee fe25 	bl	800088c <__aeabi_ddiv>
 8011c42:	4682      	mov	sl, r0
 8011c44:	468b      	mov	fp, r1
 8011c46:	e028      	b.n	8011c9a <_dtoa_r+0x3d2>
 8011c48:	2502      	movs	r5, #2
 8011c4a:	e7f2      	b.n	8011c32 <_dtoa_r+0x36a>
 8011c4c:	07f9      	lsls	r1, r7, #31
 8011c4e:	d508      	bpl.n	8011c62 <_dtoa_r+0x39a>
 8011c50:	4640      	mov	r0, r8
 8011c52:	4649      	mov	r1, r9
 8011c54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011c58:	f7ee fcee 	bl	8000638 <__aeabi_dmul>
 8011c5c:	3501      	adds	r5, #1
 8011c5e:	4680      	mov	r8, r0
 8011c60:	4689      	mov	r9, r1
 8011c62:	107f      	asrs	r7, r7, #1
 8011c64:	3608      	adds	r6, #8
 8011c66:	e7e5      	b.n	8011c34 <_dtoa_r+0x36c>
 8011c68:	f000 809b 	beq.w	8011da2 <_dtoa_r+0x4da>
 8011c6c:	9b00      	ldr	r3, [sp, #0]
 8011c6e:	4f9d      	ldr	r7, [pc, #628]	; (8011ee4 <_dtoa_r+0x61c>)
 8011c70:	425e      	negs	r6, r3
 8011c72:	4b9b      	ldr	r3, [pc, #620]	; (8011ee0 <_dtoa_r+0x618>)
 8011c74:	f006 020f 	and.w	r2, r6, #15
 8011c78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c80:	ec51 0b19 	vmov	r0, r1, d9
 8011c84:	f7ee fcd8 	bl	8000638 <__aeabi_dmul>
 8011c88:	1136      	asrs	r6, r6, #4
 8011c8a:	4682      	mov	sl, r0
 8011c8c:	468b      	mov	fp, r1
 8011c8e:	2300      	movs	r3, #0
 8011c90:	2502      	movs	r5, #2
 8011c92:	2e00      	cmp	r6, #0
 8011c94:	d17a      	bne.n	8011d8c <_dtoa_r+0x4c4>
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d1d3      	bne.n	8011c42 <_dtoa_r+0x37a>
 8011c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	f000 8082 	beq.w	8011da6 <_dtoa_r+0x4de>
 8011ca2:	4b91      	ldr	r3, [pc, #580]	; (8011ee8 <_dtoa_r+0x620>)
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	4650      	mov	r0, sl
 8011ca8:	4659      	mov	r1, fp
 8011caa:	f7ee ff37 	bl	8000b1c <__aeabi_dcmplt>
 8011cae:	2800      	cmp	r0, #0
 8011cb0:	d079      	beq.n	8011da6 <_dtoa_r+0x4de>
 8011cb2:	9b03      	ldr	r3, [sp, #12]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d076      	beq.n	8011da6 <_dtoa_r+0x4de>
 8011cb8:	9b02      	ldr	r3, [sp, #8]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	dd36      	ble.n	8011d2c <_dtoa_r+0x464>
 8011cbe:	9b00      	ldr	r3, [sp, #0]
 8011cc0:	4650      	mov	r0, sl
 8011cc2:	4659      	mov	r1, fp
 8011cc4:	1e5f      	subs	r7, r3, #1
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	4b88      	ldr	r3, [pc, #544]	; (8011eec <_dtoa_r+0x624>)
 8011cca:	f7ee fcb5 	bl	8000638 <__aeabi_dmul>
 8011cce:	9e02      	ldr	r6, [sp, #8]
 8011cd0:	4682      	mov	sl, r0
 8011cd2:	468b      	mov	fp, r1
 8011cd4:	3501      	adds	r5, #1
 8011cd6:	4628      	mov	r0, r5
 8011cd8:	f7ee fc44 	bl	8000564 <__aeabi_i2d>
 8011cdc:	4652      	mov	r2, sl
 8011cde:	465b      	mov	r3, fp
 8011ce0:	f7ee fcaa 	bl	8000638 <__aeabi_dmul>
 8011ce4:	4b82      	ldr	r3, [pc, #520]	; (8011ef0 <_dtoa_r+0x628>)
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	f7ee faf0 	bl	80002cc <__adddf3>
 8011cec:	46d0      	mov	r8, sl
 8011cee:	46d9      	mov	r9, fp
 8011cf0:	4682      	mov	sl, r0
 8011cf2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011cf6:	2e00      	cmp	r6, #0
 8011cf8:	d158      	bne.n	8011dac <_dtoa_r+0x4e4>
 8011cfa:	4b7e      	ldr	r3, [pc, #504]	; (8011ef4 <_dtoa_r+0x62c>)
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	4640      	mov	r0, r8
 8011d00:	4649      	mov	r1, r9
 8011d02:	f7ee fae1 	bl	80002c8 <__aeabi_dsub>
 8011d06:	4652      	mov	r2, sl
 8011d08:	465b      	mov	r3, fp
 8011d0a:	4680      	mov	r8, r0
 8011d0c:	4689      	mov	r9, r1
 8011d0e:	f7ee ff23 	bl	8000b58 <__aeabi_dcmpgt>
 8011d12:	2800      	cmp	r0, #0
 8011d14:	f040 8295 	bne.w	8012242 <_dtoa_r+0x97a>
 8011d18:	4652      	mov	r2, sl
 8011d1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011d1e:	4640      	mov	r0, r8
 8011d20:	4649      	mov	r1, r9
 8011d22:	f7ee fefb 	bl	8000b1c <__aeabi_dcmplt>
 8011d26:	2800      	cmp	r0, #0
 8011d28:	f040 8289 	bne.w	801223e <_dtoa_r+0x976>
 8011d2c:	ec5b ab19 	vmov	sl, fp, d9
 8011d30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	f2c0 8148 	blt.w	8011fc8 <_dtoa_r+0x700>
 8011d38:	9a00      	ldr	r2, [sp, #0]
 8011d3a:	2a0e      	cmp	r2, #14
 8011d3c:	f300 8144 	bgt.w	8011fc8 <_dtoa_r+0x700>
 8011d40:	4b67      	ldr	r3, [pc, #412]	; (8011ee0 <_dtoa_r+0x618>)
 8011d42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011d46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	f280 80d5 	bge.w	8011efc <_dtoa_r+0x634>
 8011d52:	9b03      	ldr	r3, [sp, #12]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	f300 80d1 	bgt.w	8011efc <_dtoa_r+0x634>
 8011d5a:	f040 826f 	bne.w	801223c <_dtoa_r+0x974>
 8011d5e:	4b65      	ldr	r3, [pc, #404]	; (8011ef4 <_dtoa_r+0x62c>)
 8011d60:	2200      	movs	r2, #0
 8011d62:	4640      	mov	r0, r8
 8011d64:	4649      	mov	r1, r9
 8011d66:	f7ee fc67 	bl	8000638 <__aeabi_dmul>
 8011d6a:	4652      	mov	r2, sl
 8011d6c:	465b      	mov	r3, fp
 8011d6e:	f7ee fee9 	bl	8000b44 <__aeabi_dcmpge>
 8011d72:	9e03      	ldr	r6, [sp, #12]
 8011d74:	4637      	mov	r7, r6
 8011d76:	2800      	cmp	r0, #0
 8011d78:	f040 8245 	bne.w	8012206 <_dtoa_r+0x93e>
 8011d7c:	9d01      	ldr	r5, [sp, #4]
 8011d7e:	2331      	movs	r3, #49	; 0x31
 8011d80:	f805 3b01 	strb.w	r3, [r5], #1
 8011d84:	9b00      	ldr	r3, [sp, #0]
 8011d86:	3301      	adds	r3, #1
 8011d88:	9300      	str	r3, [sp, #0]
 8011d8a:	e240      	b.n	801220e <_dtoa_r+0x946>
 8011d8c:	07f2      	lsls	r2, r6, #31
 8011d8e:	d505      	bpl.n	8011d9c <_dtoa_r+0x4d4>
 8011d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011d94:	f7ee fc50 	bl	8000638 <__aeabi_dmul>
 8011d98:	3501      	adds	r5, #1
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	1076      	asrs	r6, r6, #1
 8011d9e:	3708      	adds	r7, #8
 8011da0:	e777      	b.n	8011c92 <_dtoa_r+0x3ca>
 8011da2:	2502      	movs	r5, #2
 8011da4:	e779      	b.n	8011c9a <_dtoa_r+0x3d2>
 8011da6:	9f00      	ldr	r7, [sp, #0]
 8011da8:	9e03      	ldr	r6, [sp, #12]
 8011daa:	e794      	b.n	8011cd6 <_dtoa_r+0x40e>
 8011dac:	9901      	ldr	r1, [sp, #4]
 8011dae:	4b4c      	ldr	r3, [pc, #304]	; (8011ee0 <_dtoa_r+0x618>)
 8011db0:	4431      	add	r1, r6
 8011db2:	910d      	str	r1, [sp, #52]	; 0x34
 8011db4:	9908      	ldr	r1, [sp, #32]
 8011db6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011dba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011dbe:	2900      	cmp	r1, #0
 8011dc0:	d043      	beq.n	8011e4a <_dtoa_r+0x582>
 8011dc2:	494d      	ldr	r1, [pc, #308]	; (8011ef8 <_dtoa_r+0x630>)
 8011dc4:	2000      	movs	r0, #0
 8011dc6:	f7ee fd61 	bl	800088c <__aeabi_ddiv>
 8011dca:	4652      	mov	r2, sl
 8011dcc:	465b      	mov	r3, fp
 8011dce:	f7ee fa7b 	bl	80002c8 <__aeabi_dsub>
 8011dd2:	9d01      	ldr	r5, [sp, #4]
 8011dd4:	4682      	mov	sl, r0
 8011dd6:	468b      	mov	fp, r1
 8011dd8:	4649      	mov	r1, r9
 8011dda:	4640      	mov	r0, r8
 8011ddc:	f7ee fedc 	bl	8000b98 <__aeabi_d2iz>
 8011de0:	4606      	mov	r6, r0
 8011de2:	f7ee fbbf 	bl	8000564 <__aeabi_i2d>
 8011de6:	4602      	mov	r2, r0
 8011de8:	460b      	mov	r3, r1
 8011dea:	4640      	mov	r0, r8
 8011dec:	4649      	mov	r1, r9
 8011dee:	f7ee fa6b 	bl	80002c8 <__aeabi_dsub>
 8011df2:	3630      	adds	r6, #48	; 0x30
 8011df4:	f805 6b01 	strb.w	r6, [r5], #1
 8011df8:	4652      	mov	r2, sl
 8011dfa:	465b      	mov	r3, fp
 8011dfc:	4680      	mov	r8, r0
 8011dfe:	4689      	mov	r9, r1
 8011e00:	f7ee fe8c 	bl	8000b1c <__aeabi_dcmplt>
 8011e04:	2800      	cmp	r0, #0
 8011e06:	d163      	bne.n	8011ed0 <_dtoa_r+0x608>
 8011e08:	4642      	mov	r2, r8
 8011e0a:	464b      	mov	r3, r9
 8011e0c:	4936      	ldr	r1, [pc, #216]	; (8011ee8 <_dtoa_r+0x620>)
 8011e0e:	2000      	movs	r0, #0
 8011e10:	f7ee fa5a 	bl	80002c8 <__aeabi_dsub>
 8011e14:	4652      	mov	r2, sl
 8011e16:	465b      	mov	r3, fp
 8011e18:	f7ee fe80 	bl	8000b1c <__aeabi_dcmplt>
 8011e1c:	2800      	cmp	r0, #0
 8011e1e:	f040 80b5 	bne.w	8011f8c <_dtoa_r+0x6c4>
 8011e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e24:	429d      	cmp	r5, r3
 8011e26:	d081      	beq.n	8011d2c <_dtoa_r+0x464>
 8011e28:	4b30      	ldr	r3, [pc, #192]	; (8011eec <_dtoa_r+0x624>)
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	4650      	mov	r0, sl
 8011e2e:	4659      	mov	r1, fp
 8011e30:	f7ee fc02 	bl	8000638 <__aeabi_dmul>
 8011e34:	4b2d      	ldr	r3, [pc, #180]	; (8011eec <_dtoa_r+0x624>)
 8011e36:	4682      	mov	sl, r0
 8011e38:	468b      	mov	fp, r1
 8011e3a:	4640      	mov	r0, r8
 8011e3c:	4649      	mov	r1, r9
 8011e3e:	2200      	movs	r2, #0
 8011e40:	f7ee fbfa 	bl	8000638 <__aeabi_dmul>
 8011e44:	4680      	mov	r8, r0
 8011e46:	4689      	mov	r9, r1
 8011e48:	e7c6      	b.n	8011dd8 <_dtoa_r+0x510>
 8011e4a:	4650      	mov	r0, sl
 8011e4c:	4659      	mov	r1, fp
 8011e4e:	f7ee fbf3 	bl	8000638 <__aeabi_dmul>
 8011e52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e54:	9d01      	ldr	r5, [sp, #4]
 8011e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e58:	4682      	mov	sl, r0
 8011e5a:	468b      	mov	fp, r1
 8011e5c:	4649      	mov	r1, r9
 8011e5e:	4640      	mov	r0, r8
 8011e60:	f7ee fe9a 	bl	8000b98 <__aeabi_d2iz>
 8011e64:	4606      	mov	r6, r0
 8011e66:	f7ee fb7d 	bl	8000564 <__aeabi_i2d>
 8011e6a:	3630      	adds	r6, #48	; 0x30
 8011e6c:	4602      	mov	r2, r0
 8011e6e:	460b      	mov	r3, r1
 8011e70:	4640      	mov	r0, r8
 8011e72:	4649      	mov	r1, r9
 8011e74:	f7ee fa28 	bl	80002c8 <__aeabi_dsub>
 8011e78:	f805 6b01 	strb.w	r6, [r5], #1
 8011e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e7e:	429d      	cmp	r5, r3
 8011e80:	4680      	mov	r8, r0
 8011e82:	4689      	mov	r9, r1
 8011e84:	f04f 0200 	mov.w	r2, #0
 8011e88:	d124      	bne.n	8011ed4 <_dtoa_r+0x60c>
 8011e8a:	4b1b      	ldr	r3, [pc, #108]	; (8011ef8 <_dtoa_r+0x630>)
 8011e8c:	4650      	mov	r0, sl
 8011e8e:	4659      	mov	r1, fp
 8011e90:	f7ee fa1c 	bl	80002cc <__adddf3>
 8011e94:	4602      	mov	r2, r0
 8011e96:	460b      	mov	r3, r1
 8011e98:	4640      	mov	r0, r8
 8011e9a:	4649      	mov	r1, r9
 8011e9c:	f7ee fe5c 	bl	8000b58 <__aeabi_dcmpgt>
 8011ea0:	2800      	cmp	r0, #0
 8011ea2:	d173      	bne.n	8011f8c <_dtoa_r+0x6c4>
 8011ea4:	4652      	mov	r2, sl
 8011ea6:	465b      	mov	r3, fp
 8011ea8:	4913      	ldr	r1, [pc, #76]	; (8011ef8 <_dtoa_r+0x630>)
 8011eaa:	2000      	movs	r0, #0
 8011eac:	f7ee fa0c 	bl	80002c8 <__aeabi_dsub>
 8011eb0:	4602      	mov	r2, r0
 8011eb2:	460b      	mov	r3, r1
 8011eb4:	4640      	mov	r0, r8
 8011eb6:	4649      	mov	r1, r9
 8011eb8:	f7ee fe30 	bl	8000b1c <__aeabi_dcmplt>
 8011ebc:	2800      	cmp	r0, #0
 8011ebe:	f43f af35 	beq.w	8011d2c <_dtoa_r+0x464>
 8011ec2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011ec4:	1e6b      	subs	r3, r5, #1
 8011ec6:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ec8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011ecc:	2b30      	cmp	r3, #48	; 0x30
 8011ece:	d0f8      	beq.n	8011ec2 <_dtoa_r+0x5fa>
 8011ed0:	9700      	str	r7, [sp, #0]
 8011ed2:	e049      	b.n	8011f68 <_dtoa_r+0x6a0>
 8011ed4:	4b05      	ldr	r3, [pc, #20]	; (8011eec <_dtoa_r+0x624>)
 8011ed6:	f7ee fbaf 	bl	8000638 <__aeabi_dmul>
 8011eda:	4680      	mov	r8, r0
 8011edc:	4689      	mov	r9, r1
 8011ede:	e7bd      	b.n	8011e5c <_dtoa_r+0x594>
 8011ee0:	08015560 	.word	0x08015560
 8011ee4:	08015538 	.word	0x08015538
 8011ee8:	3ff00000 	.word	0x3ff00000
 8011eec:	40240000 	.word	0x40240000
 8011ef0:	401c0000 	.word	0x401c0000
 8011ef4:	40140000 	.word	0x40140000
 8011ef8:	3fe00000 	.word	0x3fe00000
 8011efc:	9d01      	ldr	r5, [sp, #4]
 8011efe:	4656      	mov	r6, sl
 8011f00:	465f      	mov	r7, fp
 8011f02:	4642      	mov	r2, r8
 8011f04:	464b      	mov	r3, r9
 8011f06:	4630      	mov	r0, r6
 8011f08:	4639      	mov	r1, r7
 8011f0a:	f7ee fcbf 	bl	800088c <__aeabi_ddiv>
 8011f0e:	f7ee fe43 	bl	8000b98 <__aeabi_d2iz>
 8011f12:	4682      	mov	sl, r0
 8011f14:	f7ee fb26 	bl	8000564 <__aeabi_i2d>
 8011f18:	4642      	mov	r2, r8
 8011f1a:	464b      	mov	r3, r9
 8011f1c:	f7ee fb8c 	bl	8000638 <__aeabi_dmul>
 8011f20:	4602      	mov	r2, r0
 8011f22:	460b      	mov	r3, r1
 8011f24:	4630      	mov	r0, r6
 8011f26:	4639      	mov	r1, r7
 8011f28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011f2c:	f7ee f9cc 	bl	80002c8 <__aeabi_dsub>
 8011f30:	f805 6b01 	strb.w	r6, [r5], #1
 8011f34:	9e01      	ldr	r6, [sp, #4]
 8011f36:	9f03      	ldr	r7, [sp, #12]
 8011f38:	1bae      	subs	r6, r5, r6
 8011f3a:	42b7      	cmp	r7, r6
 8011f3c:	4602      	mov	r2, r0
 8011f3e:	460b      	mov	r3, r1
 8011f40:	d135      	bne.n	8011fae <_dtoa_r+0x6e6>
 8011f42:	f7ee f9c3 	bl	80002cc <__adddf3>
 8011f46:	4642      	mov	r2, r8
 8011f48:	464b      	mov	r3, r9
 8011f4a:	4606      	mov	r6, r0
 8011f4c:	460f      	mov	r7, r1
 8011f4e:	f7ee fe03 	bl	8000b58 <__aeabi_dcmpgt>
 8011f52:	b9d0      	cbnz	r0, 8011f8a <_dtoa_r+0x6c2>
 8011f54:	4642      	mov	r2, r8
 8011f56:	464b      	mov	r3, r9
 8011f58:	4630      	mov	r0, r6
 8011f5a:	4639      	mov	r1, r7
 8011f5c:	f7ee fdd4 	bl	8000b08 <__aeabi_dcmpeq>
 8011f60:	b110      	cbz	r0, 8011f68 <_dtoa_r+0x6a0>
 8011f62:	f01a 0f01 	tst.w	sl, #1
 8011f66:	d110      	bne.n	8011f8a <_dtoa_r+0x6c2>
 8011f68:	4620      	mov	r0, r4
 8011f6a:	ee18 1a10 	vmov	r1, s16
 8011f6e:	f000 fe79 	bl	8012c64 <_Bfree>
 8011f72:	2300      	movs	r3, #0
 8011f74:	9800      	ldr	r0, [sp, #0]
 8011f76:	702b      	strb	r3, [r5, #0]
 8011f78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f7a:	3001      	adds	r0, #1
 8011f7c:	6018      	str	r0, [r3, #0]
 8011f7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	f43f acf1 	beq.w	8011968 <_dtoa_r+0xa0>
 8011f86:	601d      	str	r5, [r3, #0]
 8011f88:	e4ee      	b.n	8011968 <_dtoa_r+0xa0>
 8011f8a:	9f00      	ldr	r7, [sp, #0]
 8011f8c:	462b      	mov	r3, r5
 8011f8e:	461d      	mov	r5, r3
 8011f90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011f94:	2a39      	cmp	r2, #57	; 0x39
 8011f96:	d106      	bne.n	8011fa6 <_dtoa_r+0x6de>
 8011f98:	9a01      	ldr	r2, [sp, #4]
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d1f7      	bne.n	8011f8e <_dtoa_r+0x6c6>
 8011f9e:	9901      	ldr	r1, [sp, #4]
 8011fa0:	2230      	movs	r2, #48	; 0x30
 8011fa2:	3701      	adds	r7, #1
 8011fa4:	700a      	strb	r2, [r1, #0]
 8011fa6:	781a      	ldrb	r2, [r3, #0]
 8011fa8:	3201      	adds	r2, #1
 8011faa:	701a      	strb	r2, [r3, #0]
 8011fac:	e790      	b.n	8011ed0 <_dtoa_r+0x608>
 8011fae:	4ba6      	ldr	r3, [pc, #664]	; (8012248 <_dtoa_r+0x980>)
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	f7ee fb41 	bl	8000638 <__aeabi_dmul>
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	2300      	movs	r3, #0
 8011fba:	4606      	mov	r6, r0
 8011fbc:	460f      	mov	r7, r1
 8011fbe:	f7ee fda3 	bl	8000b08 <__aeabi_dcmpeq>
 8011fc2:	2800      	cmp	r0, #0
 8011fc4:	d09d      	beq.n	8011f02 <_dtoa_r+0x63a>
 8011fc6:	e7cf      	b.n	8011f68 <_dtoa_r+0x6a0>
 8011fc8:	9a08      	ldr	r2, [sp, #32]
 8011fca:	2a00      	cmp	r2, #0
 8011fcc:	f000 80d7 	beq.w	801217e <_dtoa_r+0x8b6>
 8011fd0:	9a06      	ldr	r2, [sp, #24]
 8011fd2:	2a01      	cmp	r2, #1
 8011fd4:	f300 80ba 	bgt.w	801214c <_dtoa_r+0x884>
 8011fd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011fda:	2a00      	cmp	r2, #0
 8011fdc:	f000 80b2 	beq.w	8012144 <_dtoa_r+0x87c>
 8011fe0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011fe4:	9e07      	ldr	r6, [sp, #28]
 8011fe6:	9d04      	ldr	r5, [sp, #16]
 8011fe8:	9a04      	ldr	r2, [sp, #16]
 8011fea:	441a      	add	r2, r3
 8011fec:	9204      	str	r2, [sp, #16]
 8011fee:	9a05      	ldr	r2, [sp, #20]
 8011ff0:	2101      	movs	r1, #1
 8011ff2:	441a      	add	r2, r3
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	9205      	str	r2, [sp, #20]
 8011ff8:	f000 ff36 	bl	8012e68 <__i2b>
 8011ffc:	4607      	mov	r7, r0
 8011ffe:	2d00      	cmp	r5, #0
 8012000:	dd0c      	ble.n	801201c <_dtoa_r+0x754>
 8012002:	9b05      	ldr	r3, [sp, #20]
 8012004:	2b00      	cmp	r3, #0
 8012006:	dd09      	ble.n	801201c <_dtoa_r+0x754>
 8012008:	42ab      	cmp	r3, r5
 801200a:	9a04      	ldr	r2, [sp, #16]
 801200c:	bfa8      	it	ge
 801200e:	462b      	movge	r3, r5
 8012010:	1ad2      	subs	r2, r2, r3
 8012012:	9204      	str	r2, [sp, #16]
 8012014:	9a05      	ldr	r2, [sp, #20]
 8012016:	1aed      	subs	r5, r5, r3
 8012018:	1ad3      	subs	r3, r2, r3
 801201a:	9305      	str	r3, [sp, #20]
 801201c:	9b07      	ldr	r3, [sp, #28]
 801201e:	b31b      	cbz	r3, 8012068 <_dtoa_r+0x7a0>
 8012020:	9b08      	ldr	r3, [sp, #32]
 8012022:	2b00      	cmp	r3, #0
 8012024:	f000 80af 	beq.w	8012186 <_dtoa_r+0x8be>
 8012028:	2e00      	cmp	r6, #0
 801202a:	dd13      	ble.n	8012054 <_dtoa_r+0x78c>
 801202c:	4639      	mov	r1, r7
 801202e:	4632      	mov	r2, r6
 8012030:	4620      	mov	r0, r4
 8012032:	f000 ffd9 	bl	8012fe8 <__pow5mult>
 8012036:	ee18 2a10 	vmov	r2, s16
 801203a:	4601      	mov	r1, r0
 801203c:	4607      	mov	r7, r0
 801203e:	4620      	mov	r0, r4
 8012040:	f000 ff28 	bl	8012e94 <__multiply>
 8012044:	ee18 1a10 	vmov	r1, s16
 8012048:	4680      	mov	r8, r0
 801204a:	4620      	mov	r0, r4
 801204c:	f000 fe0a 	bl	8012c64 <_Bfree>
 8012050:	ee08 8a10 	vmov	s16, r8
 8012054:	9b07      	ldr	r3, [sp, #28]
 8012056:	1b9a      	subs	r2, r3, r6
 8012058:	d006      	beq.n	8012068 <_dtoa_r+0x7a0>
 801205a:	ee18 1a10 	vmov	r1, s16
 801205e:	4620      	mov	r0, r4
 8012060:	f000 ffc2 	bl	8012fe8 <__pow5mult>
 8012064:	ee08 0a10 	vmov	s16, r0
 8012068:	2101      	movs	r1, #1
 801206a:	4620      	mov	r0, r4
 801206c:	f000 fefc 	bl	8012e68 <__i2b>
 8012070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012072:	2b00      	cmp	r3, #0
 8012074:	4606      	mov	r6, r0
 8012076:	f340 8088 	ble.w	801218a <_dtoa_r+0x8c2>
 801207a:	461a      	mov	r2, r3
 801207c:	4601      	mov	r1, r0
 801207e:	4620      	mov	r0, r4
 8012080:	f000 ffb2 	bl	8012fe8 <__pow5mult>
 8012084:	9b06      	ldr	r3, [sp, #24]
 8012086:	2b01      	cmp	r3, #1
 8012088:	4606      	mov	r6, r0
 801208a:	f340 8081 	ble.w	8012190 <_dtoa_r+0x8c8>
 801208e:	f04f 0800 	mov.w	r8, #0
 8012092:	6933      	ldr	r3, [r6, #16]
 8012094:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012098:	6918      	ldr	r0, [r3, #16]
 801209a:	f000 fe95 	bl	8012dc8 <__hi0bits>
 801209e:	f1c0 0020 	rsb	r0, r0, #32
 80120a2:	9b05      	ldr	r3, [sp, #20]
 80120a4:	4418      	add	r0, r3
 80120a6:	f010 001f 	ands.w	r0, r0, #31
 80120aa:	f000 8092 	beq.w	80121d2 <_dtoa_r+0x90a>
 80120ae:	f1c0 0320 	rsb	r3, r0, #32
 80120b2:	2b04      	cmp	r3, #4
 80120b4:	f340 808a 	ble.w	80121cc <_dtoa_r+0x904>
 80120b8:	f1c0 001c 	rsb	r0, r0, #28
 80120bc:	9b04      	ldr	r3, [sp, #16]
 80120be:	4403      	add	r3, r0
 80120c0:	9304      	str	r3, [sp, #16]
 80120c2:	9b05      	ldr	r3, [sp, #20]
 80120c4:	4403      	add	r3, r0
 80120c6:	4405      	add	r5, r0
 80120c8:	9305      	str	r3, [sp, #20]
 80120ca:	9b04      	ldr	r3, [sp, #16]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	dd07      	ble.n	80120e0 <_dtoa_r+0x818>
 80120d0:	ee18 1a10 	vmov	r1, s16
 80120d4:	461a      	mov	r2, r3
 80120d6:	4620      	mov	r0, r4
 80120d8:	f000 ffe0 	bl	801309c <__lshift>
 80120dc:	ee08 0a10 	vmov	s16, r0
 80120e0:	9b05      	ldr	r3, [sp, #20]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	dd05      	ble.n	80120f2 <_dtoa_r+0x82a>
 80120e6:	4631      	mov	r1, r6
 80120e8:	461a      	mov	r2, r3
 80120ea:	4620      	mov	r0, r4
 80120ec:	f000 ffd6 	bl	801309c <__lshift>
 80120f0:	4606      	mov	r6, r0
 80120f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d06e      	beq.n	80121d6 <_dtoa_r+0x90e>
 80120f8:	ee18 0a10 	vmov	r0, s16
 80120fc:	4631      	mov	r1, r6
 80120fe:	f001 f83d 	bl	801317c <__mcmp>
 8012102:	2800      	cmp	r0, #0
 8012104:	da67      	bge.n	80121d6 <_dtoa_r+0x90e>
 8012106:	9b00      	ldr	r3, [sp, #0]
 8012108:	3b01      	subs	r3, #1
 801210a:	ee18 1a10 	vmov	r1, s16
 801210e:	9300      	str	r3, [sp, #0]
 8012110:	220a      	movs	r2, #10
 8012112:	2300      	movs	r3, #0
 8012114:	4620      	mov	r0, r4
 8012116:	f000 fdc7 	bl	8012ca8 <__multadd>
 801211a:	9b08      	ldr	r3, [sp, #32]
 801211c:	ee08 0a10 	vmov	s16, r0
 8012120:	2b00      	cmp	r3, #0
 8012122:	f000 81b1 	beq.w	8012488 <_dtoa_r+0xbc0>
 8012126:	2300      	movs	r3, #0
 8012128:	4639      	mov	r1, r7
 801212a:	220a      	movs	r2, #10
 801212c:	4620      	mov	r0, r4
 801212e:	f000 fdbb 	bl	8012ca8 <__multadd>
 8012132:	9b02      	ldr	r3, [sp, #8]
 8012134:	2b00      	cmp	r3, #0
 8012136:	4607      	mov	r7, r0
 8012138:	f300 808e 	bgt.w	8012258 <_dtoa_r+0x990>
 801213c:	9b06      	ldr	r3, [sp, #24]
 801213e:	2b02      	cmp	r3, #2
 8012140:	dc51      	bgt.n	80121e6 <_dtoa_r+0x91e>
 8012142:	e089      	b.n	8012258 <_dtoa_r+0x990>
 8012144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012146:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801214a:	e74b      	b.n	8011fe4 <_dtoa_r+0x71c>
 801214c:	9b03      	ldr	r3, [sp, #12]
 801214e:	1e5e      	subs	r6, r3, #1
 8012150:	9b07      	ldr	r3, [sp, #28]
 8012152:	42b3      	cmp	r3, r6
 8012154:	bfbf      	itttt	lt
 8012156:	9b07      	ldrlt	r3, [sp, #28]
 8012158:	9607      	strlt	r6, [sp, #28]
 801215a:	1af2      	sublt	r2, r6, r3
 801215c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801215e:	bfb6      	itet	lt
 8012160:	189b      	addlt	r3, r3, r2
 8012162:	1b9e      	subge	r6, r3, r6
 8012164:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012166:	9b03      	ldr	r3, [sp, #12]
 8012168:	bfb8      	it	lt
 801216a:	2600      	movlt	r6, #0
 801216c:	2b00      	cmp	r3, #0
 801216e:	bfb7      	itett	lt
 8012170:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8012174:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012178:	1a9d      	sublt	r5, r3, r2
 801217a:	2300      	movlt	r3, #0
 801217c:	e734      	b.n	8011fe8 <_dtoa_r+0x720>
 801217e:	9e07      	ldr	r6, [sp, #28]
 8012180:	9d04      	ldr	r5, [sp, #16]
 8012182:	9f08      	ldr	r7, [sp, #32]
 8012184:	e73b      	b.n	8011ffe <_dtoa_r+0x736>
 8012186:	9a07      	ldr	r2, [sp, #28]
 8012188:	e767      	b.n	801205a <_dtoa_r+0x792>
 801218a:	9b06      	ldr	r3, [sp, #24]
 801218c:	2b01      	cmp	r3, #1
 801218e:	dc18      	bgt.n	80121c2 <_dtoa_r+0x8fa>
 8012190:	f1ba 0f00 	cmp.w	sl, #0
 8012194:	d115      	bne.n	80121c2 <_dtoa_r+0x8fa>
 8012196:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801219a:	b993      	cbnz	r3, 80121c2 <_dtoa_r+0x8fa>
 801219c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80121a0:	0d1b      	lsrs	r3, r3, #20
 80121a2:	051b      	lsls	r3, r3, #20
 80121a4:	b183      	cbz	r3, 80121c8 <_dtoa_r+0x900>
 80121a6:	9b04      	ldr	r3, [sp, #16]
 80121a8:	3301      	adds	r3, #1
 80121aa:	9304      	str	r3, [sp, #16]
 80121ac:	9b05      	ldr	r3, [sp, #20]
 80121ae:	3301      	adds	r3, #1
 80121b0:	9305      	str	r3, [sp, #20]
 80121b2:	f04f 0801 	mov.w	r8, #1
 80121b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	f47f af6a 	bne.w	8012092 <_dtoa_r+0x7ca>
 80121be:	2001      	movs	r0, #1
 80121c0:	e76f      	b.n	80120a2 <_dtoa_r+0x7da>
 80121c2:	f04f 0800 	mov.w	r8, #0
 80121c6:	e7f6      	b.n	80121b6 <_dtoa_r+0x8ee>
 80121c8:	4698      	mov	r8, r3
 80121ca:	e7f4      	b.n	80121b6 <_dtoa_r+0x8ee>
 80121cc:	f43f af7d 	beq.w	80120ca <_dtoa_r+0x802>
 80121d0:	4618      	mov	r0, r3
 80121d2:	301c      	adds	r0, #28
 80121d4:	e772      	b.n	80120bc <_dtoa_r+0x7f4>
 80121d6:	9b03      	ldr	r3, [sp, #12]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	dc37      	bgt.n	801224c <_dtoa_r+0x984>
 80121dc:	9b06      	ldr	r3, [sp, #24]
 80121de:	2b02      	cmp	r3, #2
 80121e0:	dd34      	ble.n	801224c <_dtoa_r+0x984>
 80121e2:	9b03      	ldr	r3, [sp, #12]
 80121e4:	9302      	str	r3, [sp, #8]
 80121e6:	9b02      	ldr	r3, [sp, #8]
 80121e8:	b96b      	cbnz	r3, 8012206 <_dtoa_r+0x93e>
 80121ea:	4631      	mov	r1, r6
 80121ec:	2205      	movs	r2, #5
 80121ee:	4620      	mov	r0, r4
 80121f0:	f000 fd5a 	bl	8012ca8 <__multadd>
 80121f4:	4601      	mov	r1, r0
 80121f6:	4606      	mov	r6, r0
 80121f8:	ee18 0a10 	vmov	r0, s16
 80121fc:	f000 ffbe 	bl	801317c <__mcmp>
 8012200:	2800      	cmp	r0, #0
 8012202:	f73f adbb 	bgt.w	8011d7c <_dtoa_r+0x4b4>
 8012206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012208:	9d01      	ldr	r5, [sp, #4]
 801220a:	43db      	mvns	r3, r3
 801220c:	9300      	str	r3, [sp, #0]
 801220e:	f04f 0800 	mov.w	r8, #0
 8012212:	4631      	mov	r1, r6
 8012214:	4620      	mov	r0, r4
 8012216:	f000 fd25 	bl	8012c64 <_Bfree>
 801221a:	2f00      	cmp	r7, #0
 801221c:	f43f aea4 	beq.w	8011f68 <_dtoa_r+0x6a0>
 8012220:	f1b8 0f00 	cmp.w	r8, #0
 8012224:	d005      	beq.n	8012232 <_dtoa_r+0x96a>
 8012226:	45b8      	cmp	r8, r7
 8012228:	d003      	beq.n	8012232 <_dtoa_r+0x96a>
 801222a:	4641      	mov	r1, r8
 801222c:	4620      	mov	r0, r4
 801222e:	f000 fd19 	bl	8012c64 <_Bfree>
 8012232:	4639      	mov	r1, r7
 8012234:	4620      	mov	r0, r4
 8012236:	f000 fd15 	bl	8012c64 <_Bfree>
 801223a:	e695      	b.n	8011f68 <_dtoa_r+0x6a0>
 801223c:	2600      	movs	r6, #0
 801223e:	4637      	mov	r7, r6
 8012240:	e7e1      	b.n	8012206 <_dtoa_r+0x93e>
 8012242:	9700      	str	r7, [sp, #0]
 8012244:	4637      	mov	r7, r6
 8012246:	e599      	b.n	8011d7c <_dtoa_r+0x4b4>
 8012248:	40240000 	.word	0x40240000
 801224c:	9b08      	ldr	r3, [sp, #32]
 801224e:	2b00      	cmp	r3, #0
 8012250:	f000 80ca 	beq.w	80123e8 <_dtoa_r+0xb20>
 8012254:	9b03      	ldr	r3, [sp, #12]
 8012256:	9302      	str	r3, [sp, #8]
 8012258:	2d00      	cmp	r5, #0
 801225a:	dd05      	ble.n	8012268 <_dtoa_r+0x9a0>
 801225c:	4639      	mov	r1, r7
 801225e:	462a      	mov	r2, r5
 8012260:	4620      	mov	r0, r4
 8012262:	f000 ff1b 	bl	801309c <__lshift>
 8012266:	4607      	mov	r7, r0
 8012268:	f1b8 0f00 	cmp.w	r8, #0
 801226c:	d05b      	beq.n	8012326 <_dtoa_r+0xa5e>
 801226e:	6879      	ldr	r1, [r7, #4]
 8012270:	4620      	mov	r0, r4
 8012272:	f000 fcb7 	bl	8012be4 <_Balloc>
 8012276:	4605      	mov	r5, r0
 8012278:	b928      	cbnz	r0, 8012286 <_dtoa_r+0x9be>
 801227a:	4b87      	ldr	r3, [pc, #540]	; (8012498 <_dtoa_r+0xbd0>)
 801227c:	4602      	mov	r2, r0
 801227e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012282:	f7ff bb3b 	b.w	80118fc <_dtoa_r+0x34>
 8012286:	693a      	ldr	r2, [r7, #16]
 8012288:	3202      	adds	r2, #2
 801228a:	0092      	lsls	r2, r2, #2
 801228c:	f107 010c 	add.w	r1, r7, #12
 8012290:	300c      	adds	r0, #12
 8012292:	f7fd fc79 	bl	800fb88 <memcpy>
 8012296:	2201      	movs	r2, #1
 8012298:	4629      	mov	r1, r5
 801229a:	4620      	mov	r0, r4
 801229c:	f000 fefe 	bl	801309c <__lshift>
 80122a0:	9b01      	ldr	r3, [sp, #4]
 80122a2:	f103 0901 	add.w	r9, r3, #1
 80122a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80122aa:	4413      	add	r3, r2
 80122ac:	9305      	str	r3, [sp, #20]
 80122ae:	f00a 0301 	and.w	r3, sl, #1
 80122b2:	46b8      	mov	r8, r7
 80122b4:	9304      	str	r3, [sp, #16]
 80122b6:	4607      	mov	r7, r0
 80122b8:	4631      	mov	r1, r6
 80122ba:	ee18 0a10 	vmov	r0, s16
 80122be:	f7ff fa75 	bl	80117ac <quorem>
 80122c2:	4641      	mov	r1, r8
 80122c4:	9002      	str	r0, [sp, #8]
 80122c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80122ca:	ee18 0a10 	vmov	r0, s16
 80122ce:	f000 ff55 	bl	801317c <__mcmp>
 80122d2:	463a      	mov	r2, r7
 80122d4:	9003      	str	r0, [sp, #12]
 80122d6:	4631      	mov	r1, r6
 80122d8:	4620      	mov	r0, r4
 80122da:	f000 ff6b 	bl	80131b4 <__mdiff>
 80122de:	68c2      	ldr	r2, [r0, #12]
 80122e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80122e4:	4605      	mov	r5, r0
 80122e6:	bb02      	cbnz	r2, 801232a <_dtoa_r+0xa62>
 80122e8:	4601      	mov	r1, r0
 80122ea:	ee18 0a10 	vmov	r0, s16
 80122ee:	f000 ff45 	bl	801317c <__mcmp>
 80122f2:	4602      	mov	r2, r0
 80122f4:	4629      	mov	r1, r5
 80122f6:	4620      	mov	r0, r4
 80122f8:	9207      	str	r2, [sp, #28]
 80122fa:	f000 fcb3 	bl	8012c64 <_Bfree>
 80122fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012302:	ea43 0102 	orr.w	r1, r3, r2
 8012306:	9b04      	ldr	r3, [sp, #16]
 8012308:	430b      	orrs	r3, r1
 801230a:	464d      	mov	r5, r9
 801230c:	d10f      	bne.n	801232e <_dtoa_r+0xa66>
 801230e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012312:	d02a      	beq.n	801236a <_dtoa_r+0xaa2>
 8012314:	9b03      	ldr	r3, [sp, #12]
 8012316:	2b00      	cmp	r3, #0
 8012318:	dd02      	ble.n	8012320 <_dtoa_r+0xa58>
 801231a:	9b02      	ldr	r3, [sp, #8]
 801231c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012320:	f88b a000 	strb.w	sl, [fp]
 8012324:	e775      	b.n	8012212 <_dtoa_r+0x94a>
 8012326:	4638      	mov	r0, r7
 8012328:	e7ba      	b.n	80122a0 <_dtoa_r+0x9d8>
 801232a:	2201      	movs	r2, #1
 801232c:	e7e2      	b.n	80122f4 <_dtoa_r+0xa2c>
 801232e:	9b03      	ldr	r3, [sp, #12]
 8012330:	2b00      	cmp	r3, #0
 8012332:	db04      	blt.n	801233e <_dtoa_r+0xa76>
 8012334:	9906      	ldr	r1, [sp, #24]
 8012336:	430b      	orrs	r3, r1
 8012338:	9904      	ldr	r1, [sp, #16]
 801233a:	430b      	orrs	r3, r1
 801233c:	d122      	bne.n	8012384 <_dtoa_r+0xabc>
 801233e:	2a00      	cmp	r2, #0
 8012340:	ddee      	ble.n	8012320 <_dtoa_r+0xa58>
 8012342:	ee18 1a10 	vmov	r1, s16
 8012346:	2201      	movs	r2, #1
 8012348:	4620      	mov	r0, r4
 801234a:	f000 fea7 	bl	801309c <__lshift>
 801234e:	4631      	mov	r1, r6
 8012350:	ee08 0a10 	vmov	s16, r0
 8012354:	f000 ff12 	bl	801317c <__mcmp>
 8012358:	2800      	cmp	r0, #0
 801235a:	dc03      	bgt.n	8012364 <_dtoa_r+0xa9c>
 801235c:	d1e0      	bne.n	8012320 <_dtoa_r+0xa58>
 801235e:	f01a 0f01 	tst.w	sl, #1
 8012362:	d0dd      	beq.n	8012320 <_dtoa_r+0xa58>
 8012364:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012368:	d1d7      	bne.n	801231a <_dtoa_r+0xa52>
 801236a:	2339      	movs	r3, #57	; 0x39
 801236c:	f88b 3000 	strb.w	r3, [fp]
 8012370:	462b      	mov	r3, r5
 8012372:	461d      	mov	r5, r3
 8012374:	3b01      	subs	r3, #1
 8012376:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801237a:	2a39      	cmp	r2, #57	; 0x39
 801237c:	d071      	beq.n	8012462 <_dtoa_r+0xb9a>
 801237e:	3201      	adds	r2, #1
 8012380:	701a      	strb	r2, [r3, #0]
 8012382:	e746      	b.n	8012212 <_dtoa_r+0x94a>
 8012384:	2a00      	cmp	r2, #0
 8012386:	dd07      	ble.n	8012398 <_dtoa_r+0xad0>
 8012388:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801238c:	d0ed      	beq.n	801236a <_dtoa_r+0xaa2>
 801238e:	f10a 0301 	add.w	r3, sl, #1
 8012392:	f88b 3000 	strb.w	r3, [fp]
 8012396:	e73c      	b.n	8012212 <_dtoa_r+0x94a>
 8012398:	9b05      	ldr	r3, [sp, #20]
 801239a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801239e:	4599      	cmp	r9, r3
 80123a0:	d047      	beq.n	8012432 <_dtoa_r+0xb6a>
 80123a2:	ee18 1a10 	vmov	r1, s16
 80123a6:	2300      	movs	r3, #0
 80123a8:	220a      	movs	r2, #10
 80123aa:	4620      	mov	r0, r4
 80123ac:	f000 fc7c 	bl	8012ca8 <__multadd>
 80123b0:	45b8      	cmp	r8, r7
 80123b2:	ee08 0a10 	vmov	s16, r0
 80123b6:	f04f 0300 	mov.w	r3, #0
 80123ba:	f04f 020a 	mov.w	r2, #10
 80123be:	4641      	mov	r1, r8
 80123c0:	4620      	mov	r0, r4
 80123c2:	d106      	bne.n	80123d2 <_dtoa_r+0xb0a>
 80123c4:	f000 fc70 	bl	8012ca8 <__multadd>
 80123c8:	4680      	mov	r8, r0
 80123ca:	4607      	mov	r7, r0
 80123cc:	f109 0901 	add.w	r9, r9, #1
 80123d0:	e772      	b.n	80122b8 <_dtoa_r+0x9f0>
 80123d2:	f000 fc69 	bl	8012ca8 <__multadd>
 80123d6:	4639      	mov	r1, r7
 80123d8:	4680      	mov	r8, r0
 80123da:	2300      	movs	r3, #0
 80123dc:	220a      	movs	r2, #10
 80123de:	4620      	mov	r0, r4
 80123e0:	f000 fc62 	bl	8012ca8 <__multadd>
 80123e4:	4607      	mov	r7, r0
 80123e6:	e7f1      	b.n	80123cc <_dtoa_r+0xb04>
 80123e8:	9b03      	ldr	r3, [sp, #12]
 80123ea:	9302      	str	r3, [sp, #8]
 80123ec:	9d01      	ldr	r5, [sp, #4]
 80123ee:	ee18 0a10 	vmov	r0, s16
 80123f2:	4631      	mov	r1, r6
 80123f4:	f7ff f9da 	bl	80117ac <quorem>
 80123f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80123fc:	9b01      	ldr	r3, [sp, #4]
 80123fe:	f805 ab01 	strb.w	sl, [r5], #1
 8012402:	1aea      	subs	r2, r5, r3
 8012404:	9b02      	ldr	r3, [sp, #8]
 8012406:	4293      	cmp	r3, r2
 8012408:	dd09      	ble.n	801241e <_dtoa_r+0xb56>
 801240a:	ee18 1a10 	vmov	r1, s16
 801240e:	2300      	movs	r3, #0
 8012410:	220a      	movs	r2, #10
 8012412:	4620      	mov	r0, r4
 8012414:	f000 fc48 	bl	8012ca8 <__multadd>
 8012418:	ee08 0a10 	vmov	s16, r0
 801241c:	e7e7      	b.n	80123ee <_dtoa_r+0xb26>
 801241e:	9b02      	ldr	r3, [sp, #8]
 8012420:	2b00      	cmp	r3, #0
 8012422:	bfc8      	it	gt
 8012424:	461d      	movgt	r5, r3
 8012426:	9b01      	ldr	r3, [sp, #4]
 8012428:	bfd8      	it	le
 801242a:	2501      	movle	r5, #1
 801242c:	441d      	add	r5, r3
 801242e:	f04f 0800 	mov.w	r8, #0
 8012432:	ee18 1a10 	vmov	r1, s16
 8012436:	2201      	movs	r2, #1
 8012438:	4620      	mov	r0, r4
 801243a:	f000 fe2f 	bl	801309c <__lshift>
 801243e:	4631      	mov	r1, r6
 8012440:	ee08 0a10 	vmov	s16, r0
 8012444:	f000 fe9a 	bl	801317c <__mcmp>
 8012448:	2800      	cmp	r0, #0
 801244a:	dc91      	bgt.n	8012370 <_dtoa_r+0xaa8>
 801244c:	d102      	bne.n	8012454 <_dtoa_r+0xb8c>
 801244e:	f01a 0f01 	tst.w	sl, #1
 8012452:	d18d      	bne.n	8012370 <_dtoa_r+0xaa8>
 8012454:	462b      	mov	r3, r5
 8012456:	461d      	mov	r5, r3
 8012458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801245c:	2a30      	cmp	r2, #48	; 0x30
 801245e:	d0fa      	beq.n	8012456 <_dtoa_r+0xb8e>
 8012460:	e6d7      	b.n	8012212 <_dtoa_r+0x94a>
 8012462:	9a01      	ldr	r2, [sp, #4]
 8012464:	429a      	cmp	r2, r3
 8012466:	d184      	bne.n	8012372 <_dtoa_r+0xaaa>
 8012468:	9b00      	ldr	r3, [sp, #0]
 801246a:	3301      	adds	r3, #1
 801246c:	9300      	str	r3, [sp, #0]
 801246e:	2331      	movs	r3, #49	; 0x31
 8012470:	7013      	strb	r3, [r2, #0]
 8012472:	e6ce      	b.n	8012212 <_dtoa_r+0x94a>
 8012474:	4b09      	ldr	r3, [pc, #36]	; (801249c <_dtoa_r+0xbd4>)
 8012476:	f7ff ba95 	b.w	80119a4 <_dtoa_r+0xdc>
 801247a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801247c:	2b00      	cmp	r3, #0
 801247e:	f47f aa6e 	bne.w	801195e <_dtoa_r+0x96>
 8012482:	4b07      	ldr	r3, [pc, #28]	; (80124a0 <_dtoa_r+0xbd8>)
 8012484:	f7ff ba8e 	b.w	80119a4 <_dtoa_r+0xdc>
 8012488:	9b02      	ldr	r3, [sp, #8]
 801248a:	2b00      	cmp	r3, #0
 801248c:	dcae      	bgt.n	80123ec <_dtoa_r+0xb24>
 801248e:	9b06      	ldr	r3, [sp, #24]
 8012490:	2b02      	cmp	r3, #2
 8012492:	f73f aea8 	bgt.w	80121e6 <_dtoa_r+0x91e>
 8012496:	e7a9      	b.n	80123ec <_dtoa_r+0xb24>
 8012498:	08015450 	.word	0x08015450
 801249c:	08015649 	.word	0x08015649
 80124a0:	080153d1 	.word	0x080153d1

080124a4 <rshift>:
 80124a4:	6903      	ldr	r3, [r0, #16]
 80124a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80124aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80124ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80124b2:	f100 0414 	add.w	r4, r0, #20
 80124b6:	dd45      	ble.n	8012544 <rshift+0xa0>
 80124b8:	f011 011f 	ands.w	r1, r1, #31
 80124bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80124c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80124c4:	d10c      	bne.n	80124e0 <rshift+0x3c>
 80124c6:	f100 0710 	add.w	r7, r0, #16
 80124ca:	4629      	mov	r1, r5
 80124cc:	42b1      	cmp	r1, r6
 80124ce:	d334      	bcc.n	801253a <rshift+0x96>
 80124d0:	1a9b      	subs	r3, r3, r2
 80124d2:	009b      	lsls	r3, r3, #2
 80124d4:	1eea      	subs	r2, r5, #3
 80124d6:	4296      	cmp	r6, r2
 80124d8:	bf38      	it	cc
 80124da:	2300      	movcc	r3, #0
 80124dc:	4423      	add	r3, r4
 80124de:	e015      	b.n	801250c <rshift+0x68>
 80124e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80124e4:	f1c1 0820 	rsb	r8, r1, #32
 80124e8:	40cf      	lsrs	r7, r1
 80124ea:	f105 0e04 	add.w	lr, r5, #4
 80124ee:	46a1      	mov	r9, r4
 80124f0:	4576      	cmp	r6, lr
 80124f2:	46f4      	mov	ip, lr
 80124f4:	d815      	bhi.n	8012522 <rshift+0x7e>
 80124f6:	1a9a      	subs	r2, r3, r2
 80124f8:	0092      	lsls	r2, r2, #2
 80124fa:	3a04      	subs	r2, #4
 80124fc:	3501      	adds	r5, #1
 80124fe:	42ae      	cmp	r6, r5
 8012500:	bf38      	it	cc
 8012502:	2200      	movcc	r2, #0
 8012504:	18a3      	adds	r3, r4, r2
 8012506:	50a7      	str	r7, [r4, r2]
 8012508:	b107      	cbz	r7, 801250c <rshift+0x68>
 801250a:	3304      	adds	r3, #4
 801250c:	1b1a      	subs	r2, r3, r4
 801250e:	42a3      	cmp	r3, r4
 8012510:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012514:	bf08      	it	eq
 8012516:	2300      	moveq	r3, #0
 8012518:	6102      	str	r2, [r0, #16]
 801251a:	bf08      	it	eq
 801251c:	6143      	streq	r3, [r0, #20]
 801251e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012522:	f8dc c000 	ldr.w	ip, [ip]
 8012526:	fa0c fc08 	lsl.w	ip, ip, r8
 801252a:	ea4c 0707 	orr.w	r7, ip, r7
 801252e:	f849 7b04 	str.w	r7, [r9], #4
 8012532:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012536:	40cf      	lsrs	r7, r1
 8012538:	e7da      	b.n	80124f0 <rshift+0x4c>
 801253a:	f851 cb04 	ldr.w	ip, [r1], #4
 801253e:	f847 cf04 	str.w	ip, [r7, #4]!
 8012542:	e7c3      	b.n	80124cc <rshift+0x28>
 8012544:	4623      	mov	r3, r4
 8012546:	e7e1      	b.n	801250c <rshift+0x68>

08012548 <__hexdig_fun>:
 8012548:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801254c:	2b09      	cmp	r3, #9
 801254e:	d802      	bhi.n	8012556 <__hexdig_fun+0xe>
 8012550:	3820      	subs	r0, #32
 8012552:	b2c0      	uxtb	r0, r0
 8012554:	4770      	bx	lr
 8012556:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801255a:	2b05      	cmp	r3, #5
 801255c:	d801      	bhi.n	8012562 <__hexdig_fun+0x1a>
 801255e:	3847      	subs	r0, #71	; 0x47
 8012560:	e7f7      	b.n	8012552 <__hexdig_fun+0xa>
 8012562:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012566:	2b05      	cmp	r3, #5
 8012568:	d801      	bhi.n	801256e <__hexdig_fun+0x26>
 801256a:	3827      	subs	r0, #39	; 0x27
 801256c:	e7f1      	b.n	8012552 <__hexdig_fun+0xa>
 801256e:	2000      	movs	r0, #0
 8012570:	4770      	bx	lr
	...

08012574 <__gethex>:
 8012574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012578:	ed2d 8b02 	vpush	{d8}
 801257c:	b089      	sub	sp, #36	; 0x24
 801257e:	ee08 0a10 	vmov	s16, r0
 8012582:	9304      	str	r3, [sp, #16]
 8012584:	4bb4      	ldr	r3, [pc, #720]	; (8012858 <__gethex+0x2e4>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	9301      	str	r3, [sp, #4]
 801258a:	4618      	mov	r0, r3
 801258c:	468b      	mov	fp, r1
 801258e:	4690      	mov	r8, r2
 8012590:	f7ed fe3e 	bl	8000210 <strlen>
 8012594:	9b01      	ldr	r3, [sp, #4]
 8012596:	f8db 2000 	ldr.w	r2, [fp]
 801259a:	4403      	add	r3, r0
 801259c:	4682      	mov	sl, r0
 801259e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80125a2:	9305      	str	r3, [sp, #20]
 80125a4:	1c93      	adds	r3, r2, #2
 80125a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80125aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80125ae:	32fe      	adds	r2, #254	; 0xfe
 80125b0:	18d1      	adds	r1, r2, r3
 80125b2:	461f      	mov	r7, r3
 80125b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80125b8:	9100      	str	r1, [sp, #0]
 80125ba:	2830      	cmp	r0, #48	; 0x30
 80125bc:	d0f8      	beq.n	80125b0 <__gethex+0x3c>
 80125be:	f7ff ffc3 	bl	8012548 <__hexdig_fun>
 80125c2:	4604      	mov	r4, r0
 80125c4:	2800      	cmp	r0, #0
 80125c6:	d13a      	bne.n	801263e <__gethex+0xca>
 80125c8:	9901      	ldr	r1, [sp, #4]
 80125ca:	4652      	mov	r2, sl
 80125cc:	4638      	mov	r0, r7
 80125ce:	f7fe fa0a 	bl	80109e6 <strncmp>
 80125d2:	4605      	mov	r5, r0
 80125d4:	2800      	cmp	r0, #0
 80125d6:	d168      	bne.n	80126aa <__gethex+0x136>
 80125d8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80125dc:	eb07 060a 	add.w	r6, r7, sl
 80125e0:	f7ff ffb2 	bl	8012548 <__hexdig_fun>
 80125e4:	2800      	cmp	r0, #0
 80125e6:	d062      	beq.n	80126ae <__gethex+0x13a>
 80125e8:	4633      	mov	r3, r6
 80125ea:	7818      	ldrb	r0, [r3, #0]
 80125ec:	2830      	cmp	r0, #48	; 0x30
 80125ee:	461f      	mov	r7, r3
 80125f0:	f103 0301 	add.w	r3, r3, #1
 80125f4:	d0f9      	beq.n	80125ea <__gethex+0x76>
 80125f6:	f7ff ffa7 	bl	8012548 <__hexdig_fun>
 80125fa:	2301      	movs	r3, #1
 80125fc:	fab0 f480 	clz	r4, r0
 8012600:	0964      	lsrs	r4, r4, #5
 8012602:	4635      	mov	r5, r6
 8012604:	9300      	str	r3, [sp, #0]
 8012606:	463a      	mov	r2, r7
 8012608:	4616      	mov	r6, r2
 801260a:	3201      	adds	r2, #1
 801260c:	7830      	ldrb	r0, [r6, #0]
 801260e:	f7ff ff9b 	bl	8012548 <__hexdig_fun>
 8012612:	2800      	cmp	r0, #0
 8012614:	d1f8      	bne.n	8012608 <__gethex+0x94>
 8012616:	9901      	ldr	r1, [sp, #4]
 8012618:	4652      	mov	r2, sl
 801261a:	4630      	mov	r0, r6
 801261c:	f7fe f9e3 	bl	80109e6 <strncmp>
 8012620:	b980      	cbnz	r0, 8012644 <__gethex+0xd0>
 8012622:	b94d      	cbnz	r5, 8012638 <__gethex+0xc4>
 8012624:	eb06 050a 	add.w	r5, r6, sl
 8012628:	462a      	mov	r2, r5
 801262a:	4616      	mov	r6, r2
 801262c:	3201      	adds	r2, #1
 801262e:	7830      	ldrb	r0, [r6, #0]
 8012630:	f7ff ff8a 	bl	8012548 <__hexdig_fun>
 8012634:	2800      	cmp	r0, #0
 8012636:	d1f8      	bne.n	801262a <__gethex+0xb6>
 8012638:	1bad      	subs	r5, r5, r6
 801263a:	00ad      	lsls	r5, r5, #2
 801263c:	e004      	b.n	8012648 <__gethex+0xd4>
 801263e:	2400      	movs	r4, #0
 8012640:	4625      	mov	r5, r4
 8012642:	e7e0      	b.n	8012606 <__gethex+0x92>
 8012644:	2d00      	cmp	r5, #0
 8012646:	d1f7      	bne.n	8012638 <__gethex+0xc4>
 8012648:	7833      	ldrb	r3, [r6, #0]
 801264a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801264e:	2b50      	cmp	r3, #80	; 0x50
 8012650:	d13b      	bne.n	80126ca <__gethex+0x156>
 8012652:	7873      	ldrb	r3, [r6, #1]
 8012654:	2b2b      	cmp	r3, #43	; 0x2b
 8012656:	d02c      	beq.n	80126b2 <__gethex+0x13e>
 8012658:	2b2d      	cmp	r3, #45	; 0x2d
 801265a:	d02e      	beq.n	80126ba <__gethex+0x146>
 801265c:	1c71      	adds	r1, r6, #1
 801265e:	f04f 0900 	mov.w	r9, #0
 8012662:	7808      	ldrb	r0, [r1, #0]
 8012664:	f7ff ff70 	bl	8012548 <__hexdig_fun>
 8012668:	1e43      	subs	r3, r0, #1
 801266a:	b2db      	uxtb	r3, r3
 801266c:	2b18      	cmp	r3, #24
 801266e:	d82c      	bhi.n	80126ca <__gethex+0x156>
 8012670:	f1a0 0210 	sub.w	r2, r0, #16
 8012674:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012678:	f7ff ff66 	bl	8012548 <__hexdig_fun>
 801267c:	1e43      	subs	r3, r0, #1
 801267e:	b2db      	uxtb	r3, r3
 8012680:	2b18      	cmp	r3, #24
 8012682:	d91d      	bls.n	80126c0 <__gethex+0x14c>
 8012684:	f1b9 0f00 	cmp.w	r9, #0
 8012688:	d000      	beq.n	801268c <__gethex+0x118>
 801268a:	4252      	negs	r2, r2
 801268c:	4415      	add	r5, r2
 801268e:	f8cb 1000 	str.w	r1, [fp]
 8012692:	b1e4      	cbz	r4, 80126ce <__gethex+0x15a>
 8012694:	9b00      	ldr	r3, [sp, #0]
 8012696:	2b00      	cmp	r3, #0
 8012698:	bf14      	ite	ne
 801269a:	2700      	movne	r7, #0
 801269c:	2706      	moveq	r7, #6
 801269e:	4638      	mov	r0, r7
 80126a0:	b009      	add	sp, #36	; 0x24
 80126a2:	ecbd 8b02 	vpop	{d8}
 80126a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126aa:	463e      	mov	r6, r7
 80126ac:	4625      	mov	r5, r4
 80126ae:	2401      	movs	r4, #1
 80126b0:	e7ca      	b.n	8012648 <__gethex+0xd4>
 80126b2:	f04f 0900 	mov.w	r9, #0
 80126b6:	1cb1      	adds	r1, r6, #2
 80126b8:	e7d3      	b.n	8012662 <__gethex+0xee>
 80126ba:	f04f 0901 	mov.w	r9, #1
 80126be:	e7fa      	b.n	80126b6 <__gethex+0x142>
 80126c0:	230a      	movs	r3, #10
 80126c2:	fb03 0202 	mla	r2, r3, r2, r0
 80126c6:	3a10      	subs	r2, #16
 80126c8:	e7d4      	b.n	8012674 <__gethex+0x100>
 80126ca:	4631      	mov	r1, r6
 80126cc:	e7df      	b.n	801268e <__gethex+0x11a>
 80126ce:	1bf3      	subs	r3, r6, r7
 80126d0:	3b01      	subs	r3, #1
 80126d2:	4621      	mov	r1, r4
 80126d4:	2b07      	cmp	r3, #7
 80126d6:	dc0b      	bgt.n	80126f0 <__gethex+0x17c>
 80126d8:	ee18 0a10 	vmov	r0, s16
 80126dc:	f000 fa82 	bl	8012be4 <_Balloc>
 80126e0:	4604      	mov	r4, r0
 80126e2:	b940      	cbnz	r0, 80126f6 <__gethex+0x182>
 80126e4:	4b5d      	ldr	r3, [pc, #372]	; (801285c <__gethex+0x2e8>)
 80126e6:	4602      	mov	r2, r0
 80126e8:	21de      	movs	r1, #222	; 0xde
 80126ea:	485d      	ldr	r0, [pc, #372]	; (8012860 <__gethex+0x2ec>)
 80126ec:	f001 fdd0 	bl	8014290 <__assert_func>
 80126f0:	3101      	adds	r1, #1
 80126f2:	105b      	asrs	r3, r3, #1
 80126f4:	e7ee      	b.n	80126d4 <__gethex+0x160>
 80126f6:	f100 0914 	add.w	r9, r0, #20
 80126fa:	f04f 0b00 	mov.w	fp, #0
 80126fe:	f1ca 0301 	rsb	r3, sl, #1
 8012702:	f8cd 9008 	str.w	r9, [sp, #8]
 8012706:	f8cd b000 	str.w	fp, [sp]
 801270a:	9306      	str	r3, [sp, #24]
 801270c:	42b7      	cmp	r7, r6
 801270e:	d340      	bcc.n	8012792 <__gethex+0x21e>
 8012710:	9802      	ldr	r0, [sp, #8]
 8012712:	9b00      	ldr	r3, [sp, #0]
 8012714:	f840 3b04 	str.w	r3, [r0], #4
 8012718:	eba0 0009 	sub.w	r0, r0, r9
 801271c:	1080      	asrs	r0, r0, #2
 801271e:	0146      	lsls	r6, r0, #5
 8012720:	6120      	str	r0, [r4, #16]
 8012722:	4618      	mov	r0, r3
 8012724:	f000 fb50 	bl	8012dc8 <__hi0bits>
 8012728:	1a30      	subs	r0, r6, r0
 801272a:	f8d8 6000 	ldr.w	r6, [r8]
 801272e:	42b0      	cmp	r0, r6
 8012730:	dd63      	ble.n	80127fa <__gethex+0x286>
 8012732:	1b87      	subs	r7, r0, r6
 8012734:	4639      	mov	r1, r7
 8012736:	4620      	mov	r0, r4
 8012738:	f000 fef4 	bl	8013524 <__any_on>
 801273c:	4682      	mov	sl, r0
 801273e:	b1a8      	cbz	r0, 801276c <__gethex+0x1f8>
 8012740:	1e7b      	subs	r3, r7, #1
 8012742:	1159      	asrs	r1, r3, #5
 8012744:	f003 021f 	and.w	r2, r3, #31
 8012748:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801274c:	f04f 0a01 	mov.w	sl, #1
 8012750:	fa0a f202 	lsl.w	r2, sl, r2
 8012754:	420a      	tst	r2, r1
 8012756:	d009      	beq.n	801276c <__gethex+0x1f8>
 8012758:	4553      	cmp	r3, sl
 801275a:	dd05      	ble.n	8012768 <__gethex+0x1f4>
 801275c:	1eb9      	subs	r1, r7, #2
 801275e:	4620      	mov	r0, r4
 8012760:	f000 fee0 	bl	8013524 <__any_on>
 8012764:	2800      	cmp	r0, #0
 8012766:	d145      	bne.n	80127f4 <__gethex+0x280>
 8012768:	f04f 0a02 	mov.w	sl, #2
 801276c:	4639      	mov	r1, r7
 801276e:	4620      	mov	r0, r4
 8012770:	f7ff fe98 	bl	80124a4 <rshift>
 8012774:	443d      	add	r5, r7
 8012776:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801277a:	42ab      	cmp	r3, r5
 801277c:	da4c      	bge.n	8012818 <__gethex+0x2a4>
 801277e:	ee18 0a10 	vmov	r0, s16
 8012782:	4621      	mov	r1, r4
 8012784:	f000 fa6e 	bl	8012c64 <_Bfree>
 8012788:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801278a:	2300      	movs	r3, #0
 801278c:	6013      	str	r3, [r2, #0]
 801278e:	27a3      	movs	r7, #163	; 0xa3
 8012790:	e785      	b.n	801269e <__gethex+0x12a>
 8012792:	1e73      	subs	r3, r6, #1
 8012794:	9a05      	ldr	r2, [sp, #20]
 8012796:	9303      	str	r3, [sp, #12]
 8012798:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801279c:	4293      	cmp	r3, r2
 801279e:	d019      	beq.n	80127d4 <__gethex+0x260>
 80127a0:	f1bb 0f20 	cmp.w	fp, #32
 80127a4:	d107      	bne.n	80127b6 <__gethex+0x242>
 80127a6:	9b02      	ldr	r3, [sp, #8]
 80127a8:	9a00      	ldr	r2, [sp, #0]
 80127aa:	f843 2b04 	str.w	r2, [r3], #4
 80127ae:	9302      	str	r3, [sp, #8]
 80127b0:	2300      	movs	r3, #0
 80127b2:	9300      	str	r3, [sp, #0]
 80127b4:	469b      	mov	fp, r3
 80127b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80127ba:	f7ff fec5 	bl	8012548 <__hexdig_fun>
 80127be:	9b00      	ldr	r3, [sp, #0]
 80127c0:	f000 000f 	and.w	r0, r0, #15
 80127c4:	fa00 f00b 	lsl.w	r0, r0, fp
 80127c8:	4303      	orrs	r3, r0
 80127ca:	9300      	str	r3, [sp, #0]
 80127cc:	f10b 0b04 	add.w	fp, fp, #4
 80127d0:	9b03      	ldr	r3, [sp, #12]
 80127d2:	e00d      	b.n	80127f0 <__gethex+0x27c>
 80127d4:	9b03      	ldr	r3, [sp, #12]
 80127d6:	9a06      	ldr	r2, [sp, #24]
 80127d8:	4413      	add	r3, r2
 80127da:	42bb      	cmp	r3, r7
 80127dc:	d3e0      	bcc.n	80127a0 <__gethex+0x22c>
 80127de:	4618      	mov	r0, r3
 80127e0:	9901      	ldr	r1, [sp, #4]
 80127e2:	9307      	str	r3, [sp, #28]
 80127e4:	4652      	mov	r2, sl
 80127e6:	f7fe f8fe 	bl	80109e6 <strncmp>
 80127ea:	9b07      	ldr	r3, [sp, #28]
 80127ec:	2800      	cmp	r0, #0
 80127ee:	d1d7      	bne.n	80127a0 <__gethex+0x22c>
 80127f0:	461e      	mov	r6, r3
 80127f2:	e78b      	b.n	801270c <__gethex+0x198>
 80127f4:	f04f 0a03 	mov.w	sl, #3
 80127f8:	e7b8      	b.n	801276c <__gethex+0x1f8>
 80127fa:	da0a      	bge.n	8012812 <__gethex+0x29e>
 80127fc:	1a37      	subs	r7, r6, r0
 80127fe:	4621      	mov	r1, r4
 8012800:	ee18 0a10 	vmov	r0, s16
 8012804:	463a      	mov	r2, r7
 8012806:	f000 fc49 	bl	801309c <__lshift>
 801280a:	1bed      	subs	r5, r5, r7
 801280c:	4604      	mov	r4, r0
 801280e:	f100 0914 	add.w	r9, r0, #20
 8012812:	f04f 0a00 	mov.w	sl, #0
 8012816:	e7ae      	b.n	8012776 <__gethex+0x202>
 8012818:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801281c:	42a8      	cmp	r0, r5
 801281e:	dd72      	ble.n	8012906 <__gethex+0x392>
 8012820:	1b45      	subs	r5, r0, r5
 8012822:	42ae      	cmp	r6, r5
 8012824:	dc36      	bgt.n	8012894 <__gethex+0x320>
 8012826:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801282a:	2b02      	cmp	r3, #2
 801282c:	d02a      	beq.n	8012884 <__gethex+0x310>
 801282e:	2b03      	cmp	r3, #3
 8012830:	d02c      	beq.n	801288c <__gethex+0x318>
 8012832:	2b01      	cmp	r3, #1
 8012834:	d11c      	bne.n	8012870 <__gethex+0x2fc>
 8012836:	42ae      	cmp	r6, r5
 8012838:	d11a      	bne.n	8012870 <__gethex+0x2fc>
 801283a:	2e01      	cmp	r6, #1
 801283c:	d112      	bne.n	8012864 <__gethex+0x2f0>
 801283e:	9a04      	ldr	r2, [sp, #16]
 8012840:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012844:	6013      	str	r3, [r2, #0]
 8012846:	2301      	movs	r3, #1
 8012848:	6123      	str	r3, [r4, #16]
 801284a:	f8c9 3000 	str.w	r3, [r9]
 801284e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012850:	2762      	movs	r7, #98	; 0x62
 8012852:	601c      	str	r4, [r3, #0]
 8012854:	e723      	b.n	801269e <__gethex+0x12a>
 8012856:	bf00      	nop
 8012858:	080154c8 	.word	0x080154c8
 801285c:	08015450 	.word	0x08015450
 8012860:	08015461 	.word	0x08015461
 8012864:	1e71      	subs	r1, r6, #1
 8012866:	4620      	mov	r0, r4
 8012868:	f000 fe5c 	bl	8013524 <__any_on>
 801286c:	2800      	cmp	r0, #0
 801286e:	d1e6      	bne.n	801283e <__gethex+0x2ca>
 8012870:	ee18 0a10 	vmov	r0, s16
 8012874:	4621      	mov	r1, r4
 8012876:	f000 f9f5 	bl	8012c64 <_Bfree>
 801287a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801287c:	2300      	movs	r3, #0
 801287e:	6013      	str	r3, [r2, #0]
 8012880:	2750      	movs	r7, #80	; 0x50
 8012882:	e70c      	b.n	801269e <__gethex+0x12a>
 8012884:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012886:	2b00      	cmp	r3, #0
 8012888:	d1f2      	bne.n	8012870 <__gethex+0x2fc>
 801288a:	e7d8      	b.n	801283e <__gethex+0x2ca>
 801288c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801288e:	2b00      	cmp	r3, #0
 8012890:	d1d5      	bne.n	801283e <__gethex+0x2ca>
 8012892:	e7ed      	b.n	8012870 <__gethex+0x2fc>
 8012894:	1e6f      	subs	r7, r5, #1
 8012896:	f1ba 0f00 	cmp.w	sl, #0
 801289a:	d131      	bne.n	8012900 <__gethex+0x38c>
 801289c:	b127      	cbz	r7, 80128a8 <__gethex+0x334>
 801289e:	4639      	mov	r1, r7
 80128a0:	4620      	mov	r0, r4
 80128a2:	f000 fe3f 	bl	8013524 <__any_on>
 80128a6:	4682      	mov	sl, r0
 80128a8:	117b      	asrs	r3, r7, #5
 80128aa:	2101      	movs	r1, #1
 80128ac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80128b0:	f007 071f 	and.w	r7, r7, #31
 80128b4:	fa01 f707 	lsl.w	r7, r1, r7
 80128b8:	421f      	tst	r7, r3
 80128ba:	4629      	mov	r1, r5
 80128bc:	4620      	mov	r0, r4
 80128be:	bf18      	it	ne
 80128c0:	f04a 0a02 	orrne.w	sl, sl, #2
 80128c4:	1b76      	subs	r6, r6, r5
 80128c6:	f7ff fded 	bl	80124a4 <rshift>
 80128ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80128ce:	2702      	movs	r7, #2
 80128d0:	f1ba 0f00 	cmp.w	sl, #0
 80128d4:	d048      	beq.n	8012968 <__gethex+0x3f4>
 80128d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80128da:	2b02      	cmp	r3, #2
 80128dc:	d015      	beq.n	801290a <__gethex+0x396>
 80128de:	2b03      	cmp	r3, #3
 80128e0:	d017      	beq.n	8012912 <__gethex+0x39e>
 80128e2:	2b01      	cmp	r3, #1
 80128e4:	d109      	bne.n	80128fa <__gethex+0x386>
 80128e6:	f01a 0f02 	tst.w	sl, #2
 80128ea:	d006      	beq.n	80128fa <__gethex+0x386>
 80128ec:	f8d9 0000 	ldr.w	r0, [r9]
 80128f0:	ea4a 0a00 	orr.w	sl, sl, r0
 80128f4:	f01a 0f01 	tst.w	sl, #1
 80128f8:	d10e      	bne.n	8012918 <__gethex+0x3a4>
 80128fa:	f047 0710 	orr.w	r7, r7, #16
 80128fe:	e033      	b.n	8012968 <__gethex+0x3f4>
 8012900:	f04f 0a01 	mov.w	sl, #1
 8012904:	e7d0      	b.n	80128a8 <__gethex+0x334>
 8012906:	2701      	movs	r7, #1
 8012908:	e7e2      	b.n	80128d0 <__gethex+0x35c>
 801290a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801290c:	f1c3 0301 	rsb	r3, r3, #1
 8012910:	9315      	str	r3, [sp, #84]	; 0x54
 8012912:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012914:	2b00      	cmp	r3, #0
 8012916:	d0f0      	beq.n	80128fa <__gethex+0x386>
 8012918:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801291c:	f104 0314 	add.w	r3, r4, #20
 8012920:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012924:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012928:	f04f 0c00 	mov.w	ip, #0
 801292c:	4618      	mov	r0, r3
 801292e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012932:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012936:	d01c      	beq.n	8012972 <__gethex+0x3fe>
 8012938:	3201      	adds	r2, #1
 801293a:	6002      	str	r2, [r0, #0]
 801293c:	2f02      	cmp	r7, #2
 801293e:	f104 0314 	add.w	r3, r4, #20
 8012942:	d13f      	bne.n	80129c4 <__gethex+0x450>
 8012944:	f8d8 2000 	ldr.w	r2, [r8]
 8012948:	3a01      	subs	r2, #1
 801294a:	42b2      	cmp	r2, r6
 801294c:	d10a      	bne.n	8012964 <__gethex+0x3f0>
 801294e:	1171      	asrs	r1, r6, #5
 8012950:	2201      	movs	r2, #1
 8012952:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012956:	f006 061f 	and.w	r6, r6, #31
 801295a:	fa02 f606 	lsl.w	r6, r2, r6
 801295e:	421e      	tst	r6, r3
 8012960:	bf18      	it	ne
 8012962:	4617      	movne	r7, r2
 8012964:	f047 0720 	orr.w	r7, r7, #32
 8012968:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801296a:	601c      	str	r4, [r3, #0]
 801296c:	9b04      	ldr	r3, [sp, #16]
 801296e:	601d      	str	r5, [r3, #0]
 8012970:	e695      	b.n	801269e <__gethex+0x12a>
 8012972:	4299      	cmp	r1, r3
 8012974:	f843 cc04 	str.w	ip, [r3, #-4]
 8012978:	d8d8      	bhi.n	801292c <__gethex+0x3b8>
 801297a:	68a3      	ldr	r3, [r4, #8]
 801297c:	459b      	cmp	fp, r3
 801297e:	db19      	blt.n	80129b4 <__gethex+0x440>
 8012980:	6861      	ldr	r1, [r4, #4]
 8012982:	ee18 0a10 	vmov	r0, s16
 8012986:	3101      	adds	r1, #1
 8012988:	f000 f92c 	bl	8012be4 <_Balloc>
 801298c:	4681      	mov	r9, r0
 801298e:	b918      	cbnz	r0, 8012998 <__gethex+0x424>
 8012990:	4b1a      	ldr	r3, [pc, #104]	; (80129fc <__gethex+0x488>)
 8012992:	4602      	mov	r2, r0
 8012994:	2184      	movs	r1, #132	; 0x84
 8012996:	e6a8      	b.n	80126ea <__gethex+0x176>
 8012998:	6922      	ldr	r2, [r4, #16]
 801299a:	3202      	adds	r2, #2
 801299c:	f104 010c 	add.w	r1, r4, #12
 80129a0:	0092      	lsls	r2, r2, #2
 80129a2:	300c      	adds	r0, #12
 80129a4:	f7fd f8f0 	bl	800fb88 <memcpy>
 80129a8:	4621      	mov	r1, r4
 80129aa:	ee18 0a10 	vmov	r0, s16
 80129ae:	f000 f959 	bl	8012c64 <_Bfree>
 80129b2:	464c      	mov	r4, r9
 80129b4:	6923      	ldr	r3, [r4, #16]
 80129b6:	1c5a      	adds	r2, r3, #1
 80129b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80129bc:	6122      	str	r2, [r4, #16]
 80129be:	2201      	movs	r2, #1
 80129c0:	615a      	str	r2, [r3, #20]
 80129c2:	e7bb      	b.n	801293c <__gethex+0x3c8>
 80129c4:	6922      	ldr	r2, [r4, #16]
 80129c6:	455a      	cmp	r2, fp
 80129c8:	dd0b      	ble.n	80129e2 <__gethex+0x46e>
 80129ca:	2101      	movs	r1, #1
 80129cc:	4620      	mov	r0, r4
 80129ce:	f7ff fd69 	bl	80124a4 <rshift>
 80129d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80129d6:	3501      	adds	r5, #1
 80129d8:	42ab      	cmp	r3, r5
 80129da:	f6ff aed0 	blt.w	801277e <__gethex+0x20a>
 80129de:	2701      	movs	r7, #1
 80129e0:	e7c0      	b.n	8012964 <__gethex+0x3f0>
 80129e2:	f016 061f 	ands.w	r6, r6, #31
 80129e6:	d0fa      	beq.n	80129de <__gethex+0x46a>
 80129e8:	4453      	add	r3, sl
 80129ea:	f1c6 0620 	rsb	r6, r6, #32
 80129ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80129f2:	f000 f9e9 	bl	8012dc8 <__hi0bits>
 80129f6:	42b0      	cmp	r0, r6
 80129f8:	dbe7      	blt.n	80129ca <__gethex+0x456>
 80129fa:	e7f0      	b.n	80129de <__gethex+0x46a>
 80129fc:	08015450 	.word	0x08015450

08012a00 <L_shift>:
 8012a00:	f1c2 0208 	rsb	r2, r2, #8
 8012a04:	0092      	lsls	r2, r2, #2
 8012a06:	b570      	push	{r4, r5, r6, lr}
 8012a08:	f1c2 0620 	rsb	r6, r2, #32
 8012a0c:	6843      	ldr	r3, [r0, #4]
 8012a0e:	6804      	ldr	r4, [r0, #0]
 8012a10:	fa03 f506 	lsl.w	r5, r3, r6
 8012a14:	432c      	orrs	r4, r5
 8012a16:	40d3      	lsrs	r3, r2
 8012a18:	6004      	str	r4, [r0, #0]
 8012a1a:	f840 3f04 	str.w	r3, [r0, #4]!
 8012a1e:	4288      	cmp	r0, r1
 8012a20:	d3f4      	bcc.n	8012a0c <L_shift+0xc>
 8012a22:	bd70      	pop	{r4, r5, r6, pc}

08012a24 <__match>:
 8012a24:	b530      	push	{r4, r5, lr}
 8012a26:	6803      	ldr	r3, [r0, #0]
 8012a28:	3301      	adds	r3, #1
 8012a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a2e:	b914      	cbnz	r4, 8012a36 <__match+0x12>
 8012a30:	6003      	str	r3, [r0, #0]
 8012a32:	2001      	movs	r0, #1
 8012a34:	bd30      	pop	{r4, r5, pc}
 8012a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a3a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012a3e:	2d19      	cmp	r5, #25
 8012a40:	bf98      	it	ls
 8012a42:	3220      	addls	r2, #32
 8012a44:	42a2      	cmp	r2, r4
 8012a46:	d0f0      	beq.n	8012a2a <__match+0x6>
 8012a48:	2000      	movs	r0, #0
 8012a4a:	e7f3      	b.n	8012a34 <__match+0x10>

08012a4c <__hexnan>:
 8012a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a50:	680b      	ldr	r3, [r1, #0]
 8012a52:	115e      	asrs	r6, r3, #5
 8012a54:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012a58:	f013 031f 	ands.w	r3, r3, #31
 8012a5c:	b087      	sub	sp, #28
 8012a5e:	bf18      	it	ne
 8012a60:	3604      	addne	r6, #4
 8012a62:	2500      	movs	r5, #0
 8012a64:	1f37      	subs	r7, r6, #4
 8012a66:	4690      	mov	r8, r2
 8012a68:	6802      	ldr	r2, [r0, #0]
 8012a6a:	9301      	str	r3, [sp, #4]
 8012a6c:	4682      	mov	sl, r0
 8012a6e:	f846 5c04 	str.w	r5, [r6, #-4]
 8012a72:	46b9      	mov	r9, r7
 8012a74:	463c      	mov	r4, r7
 8012a76:	9502      	str	r5, [sp, #8]
 8012a78:	46ab      	mov	fp, r5
 8012a7a:	7851      	ldrb	r1, [r2, #1]
 8012a7c:	1c53      	adds	r3, r2, #1
 8012a7e:	9303      	str	r3, [sp, #12]
 8012a80:	b341      	cbz	r1, 8012ad4 <__hexnan+0x88>
 8012a82:	4608      	mov	r0, r1
 8012a84:	9205      	str	r2, [sp, #20]
 8012a86:	9104      	str	r1, [sp, #16]
 8012a88:	f7ff fd5e 	bl	8012548 <__hexdig_fun>
 8012a8c:	2800      	cmp	r0, #0
 8012a8e:	d14f      	bne.n	8012b30 <__hexnan+0xe4>
 8012a90:	9904      	ldr	r1, [sp, #16]
 8012a92:	9a05      	ldr	r2, [sp, #20]
 8012a94:	2920      	cmp	r1, #32
 8012a96:	d818      	bhi.n	8012aca <__hexnan+0x7e>
 8012a98:	9b02      	ldr	r3, [sp, #8]
 8012a9a:	459b      	cmp	fp, r3
 8012a9c:	dd13      	ble.n	8012ac6 <__hexnan+0x7a>
 8012a9e:	454c      	cmp	r4, r9
 8012aa0:	d206      	bcs.n	8012ab0 <__hexnan+0x64>
 8012aa2:	2d07      	cmp	r5, #7
 8012aa4:	dc04      	bgt.n	8012ab0 <__hexnan+0x64>
 8012aa6:	462a      	mov	r2, r5
 8012aa8:	4649      	mov	r1, r9
 8012aaa:	4620      	mov	r0, r4
 8012aac:	f7ff ffa8 	bl	8012a00 <L_shift>
 8012ab0:	4544      	cmp	r4, r8
 8012ab2:	d950      	bls.n	8012b56 <__hexnan+0x10a>
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	f1a4 0904 	sub.w	r9, r4, #4
 8012aba:	f844 3c04 	str.w	r3, [r4, #-4]
 8012abe:	f8cd b008 	str.w	fp, [sp, #8]
 8012ac2:	464c      	mov	r4, r9
 8012ac4:	461d      	mov	r5, r3
 8012ac6:	9a03      	ldr	r2, [sp, #12]
 8012ac8:	e7d7      	b.n	8012a7a <__hexnan+0x2e>
 8012aca:	2929      	cmp	r1, #41	; 0x29
 8012acc:	d156      	bne.n	8012b7c <__hexnan+0x130>
 8012ace:	3202      	adds	r2, #2
 8012ad0:	f8ca 2000 	str.w	r2, [sl]
 8012ad4:	f1bb 0f00 	cmp.w	fp, #0
 8012ad8:	d050      	beq.n	8012b7c <__hexnan+0x130>
 8012ada:	454c      	cmp	r4, r9
 8012adc:	d206      	bcs.n	8012aec <__hexnan+0xa0>
 8012ade:	2d07      	cmp	r5, #7
 8012ae0:	dc04      	bgt.n	8012aec <__hexnan+0xa0>
 8012ae2:	462a      	mov	r2, r5
 8012ae4:	4649      	mov	r1, r9
 8012ae6:	4620      	mov	r0, r4
 8012ae8:	f7ff ff8a 	bl	8012a00 <L_shift>
 8012aec:	4544      	cmp	r4, r8
 8012aee:	d934      	bls.n	8012b5a <__hexnan+0x10e>
 8012af0:	f1a8 0204 	sub.w	r2, r8, #4
 8012af4:	4623      	mov	r3, r4
 8012af6:	f853 1b04 	ldr.w	r1, [r3], #4
 8012afa:	f842 1f04 	str.w	r1, [r2, #4]!
 8012afe:	429f      	cmp	r7, r3
 8012b00:	d2f9      	bcs.n	8012af6 <__hexnan+0xaa>
 8012b02:	1b3b      	subs	r3, r7, r4
 8012b04:	f023 0303 	bic.w	r3, r3, #3
 8012b08:	3304      	adds	r3, #4
 8012b0a:	3401      	adds	r4, #1
 8012b0c:	3e03      	subs	r6, #3
 8012b0e:	42b4      	cmp	r4, r6
 8012b10:	bf88      	it	hi
 8012b12:	2304      	movhi	r3, #4
 8012b14:	4443      	add	r3, r8
 8012b16:	2200      	movs	r2, #0
 8012b18:	f843 2b04 	str.w	r2, [r3], #4
 8012b1c:	429f      	cmp	r7, r3
 8012b1e:	d2fb      	bcs.n	8012b18 <__hexnan+0xcc>
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	b91b      	cbnz	r3, 8012b2c <__hexnan+0xe0>
 8012b24:	4547      	cmp	r7, r8
 8012b26:	d127      	bne.n	8012b78 <__hexnan+0x12c>
 8012b28:	2301      	movs	r3, #1
 8012b2a:	603b      	str	r3, [r7, #0]
 8012b2c:	2005      	movs	r0, #5
 8012b2e:	e026      	b.n	8012b7e <__hexnan+0x132>
 8012b30:	3501      	adds	r5, #1
 8012b32:	2d08      	cmp	r5, #8
 8012b34:	f10b 0b01 	add.w	fp, fp, #1
 8012b38:	dd06      	ble.n	8012b48 <__hexnan+0xfc>
 8012b3a:	4544      	cmp	r4, r8
 8012b3c:	d9c3      	bls.n	8012ac6 <__hexnan+0x7a>
 8012b3e:	2300      	movs	r3, #0
 8012b40:	f844 3c04 	str.w	r3, [r4, #-4]
 8012b44:	2501      	movs	r5, #1
 8012b46:	3c04      	subs	r4, #4
 8012b48:	6822      	ldr	r2, [r4, #0]
 8012b4a:	f000 000f 	and.w	r0, r0, #15
 8012b4e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012b52:	6022      	str	r2, [r4, #0]
 8012b54:	e7b7      	b.n	8012ac6 <__hexnan+0x7a>
 8012b56:	2508      	movs	r5, #8
 8012b58:	e7b5      	b.n	8012ac6 <__hexnan+0x7a>
 8012b5a:	9b01      	ldr	r3, [sp, #4]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d0df      	beq.n	8012b20 <__hexnan+0xd4>
 8012b60:	f04f 32ff 	mov.w	r2, #4294967295
 8012b64:	f1c3 0320 	rsb	r3, r3, #32
 8012b68:	fa22 f303 	lsr.w	r3, r2, r3
 8012b6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012b70:	401a      	ands	r2, r3
 8012b72:	f846 2c04 	str.w	r2, [r6, #-4]
 8012b76:	e7d3      	b.n	8012b20 <__hexnan+0xd4>
 8012b78:	3f04      	subs	r7, #4
 8012b7a:	e7d1      	b.n	8012b20 <__hexnan+0xd4>
 8012b7c:	2004      	movs	r0, #4
 8012b7e:	b007      	add	sp, #28
 8012b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b84 <_localeconv_r>:
 8012b84:	4800      	ldr	r0, [pc, #0]	; (8012b88 <_localeconv_r+0x4>)
 8012b86:	4770      	bx	lr
 8012b88:	20000420 	.word	0x20000420

08012b8c <_lseek_r>:
 8012b8c:	b538      	push	{r3, r4, r5, lr}
 8012b8e:	4d07      	ldr	r5, [pc, #28]	; (8012bac <_lseek_r+0x20>)
 8012b90:	4604      	mov	r4, r0
 8012b92:	4608      	mov	r0, r1
 8012b94:	4611      	mov	r1, r2
 8012b96:	2200      	movs	r2, #0
 8012b98:	602a      	str	r2, [r5, #0]
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	f7ef fefa 	bl	8002994 <_lseek>
 8012ba0:	1c43      	adds	r3, r0, #1
 8012ba2:	d102      	bne.n	8012baa <_lseek_r+0x1e>
 8012ba4:	682b      	ldr	r3, [r5, #0]
 8012ba6:	b103      	cbz	r3, 8012baa <_lseek_r+0x1e>
 8012ba8:	6023      	str	r3, [r4, #0]
 8012baa:	bd38      	pop	{r3, r4, r5, pc}
 8012bac:	20000770 	.word	0x20000770

08012bb0 <malloc>:
 8012bb0:	4b02      	ldr	r3, [pc, #8]	; (8012bbc <malloc+0xc>)
 8012bb2:	4601      	mov	r1, r0
 8012bb4:	6818      	ldr	r0, [r3, #0]
 8012bb6:	f000 bd59 	b.w	801366c <_malloc_r>
 8012bba:	bf00      	nop
 8012bbc:	200002c8 	.word	0x200002c8

08012bc0 <__ascii_mbtowc>:
 8012bc0:	b082      	sub	sp, #8
 8012bc2:	b901      	cbnz	r1, 8012bc6 <__ascii_mbtowc+0x6>
 8012bc4:	a901      	add	r1, sp, #4
 8012bc6:	b142      	cbz	r2, 8012bda <__ascii_mbtowc+0x1a>
 8012bc8:	b14b      	cbz	r3, 8012bde <__ascii_mbtowc+0x1e>
 8012bca:	7813      	ldrb	r3, [r2, #0]
 8012bcc:	600b      	str	r3, [r1, #0]
 8012bce:	7812      	ldrb	r2, [r2, #0]
 8012bd0:	1e10      	subs	r0, r2, #0
 8012bd2:	bf18      	it	ne
 8012bd4:	2001      	movne	r0, #1
 8012bd6:	b002      	add	sp, #8
 8012bd8:	4770      	bx	lr
 8012bda:	4610      	mov	r0, r2
 8012bdc:	e7fb      	b.n	8012bd6 <__ascii_mbtowc+0x16>
 8012bde:	f06f 0001 	mvn.w	r0, #1
 8012be2:	e7f8      	b.n	8012bd6 <__ascii_mbtowc+0x16>

08012be4 <_Balloc>:
 8012be4:	b570      	push	{r4, r5, r6, lr}
 8012be6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012be8:	4604      	mov	r4, r0
 8012bea:	460d      	mov	r5, r1
 8012bec:	b976      	cbnz	r6, 8012c0c <_Balloc+0x28>
 8012bee:	2010      	movs	r0, #16
 8012bf0:	f7ff ffde 	bl	8012bb0 <malloc>
 8012bf4:	4602      	mov	r2, r0
 8012bf6:	6260      	str	r0, [r4, #36]	; 0x24
 8012bf8:	b920      	cbnz	r0, 8012c04 <_Balloc+0x20>
 8012bfa:	4b18      	ldr	r3, [pc, #96]	; (8012c5c <_Balloc+0x78>)
 8012bfc:	4818      	ldr	r0, [pc, #96]	; (8012c60 <_Balloc+0x7c>)
 8012bfe:	2166      	movs	r1, #102	; 0x66
 8012c00:	f001 fb46 	bl	8014290 <__assert_func>
 8012c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c08:	6006      	str	r6, [r0, #0]
 8012c0a:	60c6      	str	r6, [r0, #12]
 8012c0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012c0e:	68f3      	ldr	r3, [r6, #12]
 8012c10:	b183      	cbz	r3, 8012c34 <_Balloc+0x50>
 8012c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c14:	68db      	ldr	r3, [r3, #12]
 8012c16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012c1a:	b9b8      	cbnz	r0, 8012c4c <_Balloc+0x68>
 8012c1c:	2101      	movs	r1, #1
 8012c1e:	fa01 f605 	lsl.w	r6, r1, r5
 8012c22:	1d72      	adds	r2, r6, #5
 8012c24:	0092      	lsls	r2, r2, #2
 8012c26:	4620      	mov	r0, r4
 8012c28:	f000 fc9d 	bl	8013566 <_calloc_r>
 8012c2c:	b160      	cbz	r0, 8012c48 <_Balloc+0x64>
 8012c2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012c32:	e00e      	b.n	8012c52 <_Balloc+0x6e>
 8012c34:	2221      	movs	r2, #33	; 0x21
 8012c36:	2104      	movs	r1, #4
 8012c38:	4620      	mov	r0, r4
 8012c3a:	f000 fc94 	bl	8013566 <_calloc_r>
 8012c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c40:	60f0      	str	r0, [r6, #12]
 8012c42:	68db      	ldr	r3, [r3, #12]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d1e4      	bne.n	8012c12 <_Balloc+0x2e>
 8012c48:	2000      	movs	r0, #0
 8012c4a:	bd70      	pop	{r4, r5, r6, pc}
 8012c4c:	6802      	ldr	r2, [r0, #0]
 8012c4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012c52:	2300      	movs	r3, #0
 8012c54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012c58:	e7f7      	b.n	8012c4a <_Balloc+0x66>
 8012c5a:	bf00      	nop
 8012c5c:	080153de 	.word	0x080153de
 8012c60:	080154dc 	.word	0x080154dc

08012c64 <_Bfree>:
 8012c64:	b570      	push	{r4, r5, r6, lr}
 8012c66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012c68:	4605      	mov	r5, r0
 8012c6a:	460c      	mov	r4, r1
 8012c6c:	b976      	cbnz	r6, 8012c8c <_Bfree+0x28>
 8012c6e:	2010      	movs	r0, #16
 8012c70:	f7ff ff9e 	bl	8012bb0 <malloc>
 8012c74:	4602      	mov	r2, r0
 8012c76:	6268      	str	r0, [r5, #36]	; 0x24
 8012c78:	b920      	cbnz	r0, 8012c84 <_Bfree+0x20>
 8012c7a:	4b09      	ldr	r3, [pc, #36]	; (8012ca0 <_Bfree+0x3c>)
 8012c7c:	4809      	ldr	r0, [pc, #36]	; (8012ca4 <_Bfree+0x40>)
 8012c7e:	218a      	movs	r1, #138	; 0x8a
 8012c80:	f001 fb06 	bl	8014290 <__assert_func>
 8012c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c88:	6006      	str	r6, [r0, #0]
 8012c8a:	60c6      	str	r6, [r0, #12]
 8012c8c:	b13c      	cbz	r4, 8012c9e <_Bfree+0x3a>
 8012c8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012c90:	6862      	ldr	r2, [r4, #4]
 8012c92:	68db      	ldr	r3, [r3, #12]
 8012c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012c98:	6021      	str	r1, [r4, #0]
 8012c9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012c9e:	bd70      	pop	{r4, r5, r6, pc}
 8012ca0:	080153de 	.word	0x080153de
 8012ca4:	080154dc 	.word	0x080154dc

08012ca8 <__multadd>:
 8012ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cac:	690d      	ldr	r5, [r1, #16]
 8012cae:	4607      	mov	r7, r0
 8012cb0:	460c      	mov	r4, r1
 8012cb2:	461e      	mov	r6, r3
 8012cb4:	f101 0c14 	add.w	ip, r1, #20
 8012cb8:	2000      	movs	r0, #0
 8012cba:	f8dc 3000 	ldr.w	r3, [ip]
 8012cbe:	b299      	uxth	r1, r3
 8012cc0:	fb02 6101 	mla	r1, r2, r1, r6
 8012cc4:	0c1e      	lsrs	r6, r3, #16
 8012cc6:	0c0b      	lsrs	r3, r1, #16
 8012cc8:	fb02 3306 	mla	r3, r2, r6, r3
 8012ccc:	b289      	uxth	r1, r1
 8012cce:	3001      	adds	r0, #1
 8012cd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012cd4:	4285      	cmp	r5, r0
 8012cd6:	f84c 1b04 	str.w	r1, [ip], #4
 8012cda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012cde:	dcec      	bgt.n	8012cba <__multadd+0x12>
 8012ce0:	b30e      	cbz	r6, 8012d26 <__multadd+0x7e>
 8012ce2:	68a3      	ldr	r3, [r4, #8]
 8012ce4:	42ab      	cmp	r3, r5
 8012ce6:	dc19      	bgt.n	8012d1c <__multadd+0x74>
 8012ce8:	6861      	ldr	r1, [r4, #4]
 8012cea:	4638      	mov	r0, r7
 8012cec:	3101      	adds	r1, #1
 8012cee:	f7ff ff79 	bl	8012be4 <_Balloc>
 8012cf2:	4680      	mov	r8, r0
 8012cf4:	b928      	cbnz	r0, 8012d02 <__multadd+0x5a>
 8012cf6:	4602      	mov	r2, r0
 8012cf8:	4b0c      	ldr	r3, [pc, #48]	; (8012d2c <__multadd+0x84>)
 8012cfa:	480d      	ldr	r0, [pc, #52]	; (8012d30 <__multadd+0x88>)
 8012cfc:	21b5      	movs	r1, #181	; 0xb5
 8012cfe:	f001 fac7 	bl	8014290 <__assert_func>
 8012d02:	6922      	ldr	r2, [r4, #16]
 8012d04:	3202      	adds	r2, #2
 8012d06:	f104 010c 	add.w	r1, r4, #12
 8012d0a:	0092      	lsls	r2, r2, #2
 8012d0c:	300c      	adds	r0, #12
 8012d0e:	f7fc ff3b 	bl	800fb88 <memcpy>
 8012d12:	4621      	mov	r1, r4
 8012d14:	4638      	mov	r0, r7
 8012d16:	f7ff ffa5 	bl	8012c64 <_Bfree>
 8012d1a:	4644      	mov	r4, r8
 8012d1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012d20:	3501      	adds	r5, #1
 8012d22:	615e      	str	r6, [r3, #20]
 8012d24:	6125      	str	r5, [r4, #16]
 8012d26:	4620      	mov	r0, r4
 8012d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d2c:	08015450 	.word	0x08015450
 8012d30:	080154dc 	.word	0x080154dc

08012d34 <__s2b>:
 8012d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d38:	460c      	mov	r4, r1
 8012d3a:	4615      	mov	r5, r2
 8012d3c:	461f      	mov	r7, r3
 8012d3e:	2209      	movs	r2, #9
 8012d40:	3308      	adds	r3, #8
 8012d42:	4606      	mov	r6, r0
 8012d44:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d48:	2100      	movs	r1, #0
 8012d4a:	2201      	movs	r2, #1
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	db09      	blt.n	8012d64 <__s2b+0x30>
 8012d50:	4630      	mov	r0, r6
 8012d52:	f7ff ff47 	bl	8012be4 <_Balloc>
 8012d56:	b940      	cbnz	r0, 8012d6a <__s2b+0x36>
 8012d58:	4602      	mov	r2, r0
 8012d5a:	4b19      	ldr	r3, [pc, #100]	; (8012dc0 <__s2b+0x8c>)
 8012d5c:	4819      	ldr	r0, [pc, #100]	; (8012dc4 <__s2b+0x90>)
 8012d5e:	21ce      	movs	r1, #206	; 0xce
 8012d60:	f001 fa96 	bl	8014290 <__assert_func>
 8012d64:	0052      	lsls	r2, r2, #1
 8012d66:	3101      	adds	r1, #1
 8012d68:	e7f0      	b.n	8012d4c <__s2b+0x18>
 8012d6a:	9b08      	ldr	r3, [sp, #32]
 8012d6c:	6143      	str	r3, [r0, #20]
 8012d6e:	2d09      	cmp	r5, #9
 8012d70:	f04f 0301 	mov.w	r3, #1
 8012d74:	6103      	str	r3, [r0, #16]
 8012d76:	dd16      	ble.n	8012da6 <__s2b+0x72>
 8012d78:	f104 0909 	add.w	r9, r4, #9
 8012d7c:	46c8      	mov	r8, r9
 8012d7e:	442c      	add	r4, r5
 8012d80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012d84:	4601      	mov	r1, r0
 8012d86:	3b30      	subs	r3, #48	; 0x30
 8012d88:	220a      	movs	r2, #10
 8012d8a:	4630      	mov	r0, r6
 8012d8c:	f7ff ff8c 	bl	8012ca8 <__multadd>
 8012d90:	45a0      	cmp	r8, r4
 8012d92:	d1f5      	bne.n	8012d80 <__s2b+0x4c>
 8012d94:	f1a5 0408 	sub.w	r4, r5, #8
 8012d98:	444c      	add	r4, r9
 8012d9a:	1b2d      	subs	r5, r5, r4
 8012d9c:	1963      	adds	r3, r4, r5
 8012d9e:	42bb      	cmp	r3, r7
 8012da0:	db04      	blt.n	8012dac <__s2b+0x78>
 8012da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012da6:	340a      	adds	r4, #10
 8012da8:	2509      	movs	r5, #9
 8012daa:	e7f6      	b.n	8012d9a <__s2b+0x66>
 8012dac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012db0:	4601      	mov	r1, r0
 8012db2:	3b30      	subs	r3, #48	; 0x30
 8012db4:	220a      	movs	r2, #10
 8012db6:	4630      	mov	r0, r6
 8012db8:	f7ff ff76 	bl	8012ca8 <__multadd>
 8012dbc:	e7ee      	b.n	8012d9c <__s2b+0x68>
 8012dbe:	bf00      	nop
 8012dc0:	08015450 	.word	0x08015450
 8012dc4:	080154dc 	.word	0x080154dc

08012dc8 <__hi0bits>:
 8012dc8:	0c03      	lsrs	r3, r0, #16
 8012dca:	041b      	lsls	r3, r3, #16
 8012dcc:	b9d3      	cbnz	r3, 8012e04 <__hi0bits+0x3c>
 8012dce:	0400      	lsls	r0, r0, #16
 8012dd0:	2310      	movs	r3, #16
 8012dd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012dd6:	bf04      	itt	eq
 8012dd8:	0200      	lsleq	r0, r0, #8
 8012dda:	3308      	addeq	r3, #8
 8012ddc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012de0:	bf04      	itt	eq
 8012de2:	0100      	lsleq	r0, r0, #4
 8012de4:	3304      	addeq	r3, #4
 8012de6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012dea:	bf04      	itt	eq
 8012dec:	0080      	lsleq	r0, r0, #2
 8012dee:	3302      	addeq	r3, #2
 8012df0:	2800      	cmp	r0, #0
 8012df2:	db05      	blt.n	8012e00 <__hi0bits+0x38>
 8012df4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012df8:	f103 0301 	add.w	r3, r3, #1
 8012dfc:	bf08      	it	eq
 8012dfe:	2320      	moveq	r3, #32
 8012e00:	4618      	mov	r0, r3
 8012e02:	4770      	bx	lr
 8012e04:	2300      	movs	r3, #0
 8012e06:	e7e4      	b.n	8012dd2 <__hi0bits+0xa>

08012e08 <__lo0bits>:
 8012e08:	6803      	ldr	r3, [r0, #0]
 8012e0a:	f013 0207 	ands.w	r2, r3, #7
 8012e0e:	4601      	mov	r1, r0
 8012e10:	d00b      	beq.n	8012e2a <__lo0bits+0x22>
 8012e12:	07da      	lsls	r2, r3, #31
 8012e14:	d423      	bmi.n	8012e5e <__lo0bits+0x56>
 8012e16:	0798      	lsls	r0, r3, #30
 8012e18:	bf49      	itett	mi
 8012e1a:	085b      	lsrmi	r3, r3, #1
 8012e1c:	089b      	lsrpl	r3, r3, #2
 8012e1e:	2001      	movmi	r0, #1
 8012e20:	600b      	strmi	r3, [r1, #0]
 8012e22:	bf5c      	itt	pl
 8012e24:	600b      	strpl	r3, [r1, #0]
 8012e26:	2002      	movpl	r0, #2
 8012e28:	4770      	bx	lr
 8012e2a:	b298      	uxth	r0, r3
 8012e2c:	b9a8      	cbnz	r0, 8012e5a <__lo0bits+0x52>
 8012e2e:	0c1b      	lsrs	r3, r3, #16
 8012e30:	2010      	movs	r0, #16
 8012e32:	b2da      	uxtb	r2, r3
 8012e34:	b90a      	cbnz	r2, 8012e3a <__lo0bits+0x32>
 8012e36:	3008      	adds	r0, #8
 8012e38:	0a1b      	lsrs	r3, r3, #8
 8012e3a:	071a      	lsls	r2, r3, #28
 8012e3c:	bf04      	itt	eq
 8012e3e:	091b      	lsreq	r3, r3, #4
 8012e40:	3004      	addeq	r0, #4
 8012e42:	079a      	lsls	r2, r3, #30
 8012e44:	bf04      	itt	eq
 8012e46:	089b      	lsreq	r3, r3, #2
 8012e48:	3002      	addeq	r0, #2
 8012e4a:	07da      	lsls	r2, r3, #31
 8012e4c:	d403      	bmi.n	8012e56 <__lo0bits+0x4e>
 8012e4e:	085b      	lsrs	r3, r3, #1
 8012e50:	f100 0001 	add.w	r0, r0, #1
 8012e54:	d005      	beq.n	8012e62 <__lo0bits+0x5a>
 8012e56:	600b      	str	r3, [r1, #0]
 8012e58:	4770      	bx	lr
 8012e5a:	4610      	mov	r0, r2
 8012e5c:	e7e9      	b.n	8012e32 <__lo0bits+0x2a>
 8012e5e:	2000      	movs	r0, #0
 8012e60:	4770      	bx	lr
 8012e62:	2020      	movs	r0, #32
 8012e64:	4770      	bx	lr
	...

08012e68 <__i2b>:
 8012e68:	b510      	push	{r4, lr}
 8012e6a:	460c      	mov	r4, r1
 8012e6c:	2101      	movs	r1, #1
 8012e6e:	f7ff feb9 	bl	8012be4 <_Balloc>
 8012e72:	4602      	mov	r2, r0
 8012e74:	b928      	cbnz	r0, 8012e82 <__i2b+0x1a>
 8012e76:	4b05      	ldr	r3, [pc, #20]	; (8012e8c <__i2b+0x24>)
 8012e78:	4805      	ldr	r0, [pc, #20]	; (8012e90 <__i2b+0x28>)
 8012e7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012e7e:	f001 fa07 	bl	8014290 <__assert_func>
 8012e82:	2301      	movs	r3, #1
 8012e84:	6144      	str	r4, [r0, #20]
 8012e86:	6103      	str	r3, [r0, #16]
 8012e88:	bd10      	pop	{r4, pc}
 8012e8a:	bf00      	nop
 8012e8c:	08015450 	.word	0x08015450
 8012e90:	080154dc 	.word	0x080154dc

08012e94 <__multiply>:
 8012e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e98:	4691      	mov	r9, r2
 8012e9a:	690a      	ldr	r2, [r1, #16]
 8012e9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	bfb8      	it	lt
 8012ea4:	460b      	movlt	r3, r1
 8012ea6:	460c      	mov	r4, r1
 8012ea8:	bfbc      	itt	lt
 8012eaa:	464c      	movlt	r4, r9
 8012eac:	4699      	movlt	r9, r3
 8012eae:	6927      	ldr	r7, [r4, #16]
 8012eb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012eb4:	68a3      	ldr	r3, [r4, #8]
 8012eb6:	6861      	ldr	r1, [r4, #4]
 8012eb8:	eb07 060a 	add.w	r6, r7, sl
 8012ebc:	42b3      	cmp	r3, r6
 8012ebe:	b085      	sub	sp, #20
 8012ec0:	bfb8      	it	lt
 8012ec2:	3101      	addlt	r1, #1
 8012ec4:	f7ff fe8e 	bl	8012be4 <_Balloc>
 8012ec8:	b930      	cbnz	r0, 8012ed8 <__multiply+0x44>
 8012eca:	4602      	mov	r2, r0
 8012ecc:	4b44      	ldr	r3, [pc, #272]	; (8012fe0 <__multiply+0x14c>)
 8012ece:	4845      	ldr	r0, [pc, #276]	; (8012fe4 <__multiply+0x150>)
 8012ed0:	f240 115d 	movw	r1, #349	; 0x15d
 8012ed4:	f001 f9dc 	bl	8014290 <__assert_func>
 8012ed8:	f100 0514 	add.w	r5, r0, #20
 8012edc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012ee0:	462b      	mov	r3, r5
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	4543      	cmp	r3, r8
 8012ee6:	d321      	bcc.n	8012f2c <__multiply+0x98>
 8012ee8:	f104 0314 	add.w	r3, r4, #20
 8012eec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012ef0:	f109 0314 	add.w	r3, r9, #20
 8012ef4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012ef8:	9202      	str	r2, [sp, #8]
 8012efa:	1b3a      	subs	r2, r7, r4
 8012efc:	3a15      	subs	r2, #21
 8012efe:	f022 0203 	bic.w	r2, r2, #3
 8012f02:	3204      	adds	r2, #4
 8012f04:	f104 0115 	add.w	r1, r4, #21
 8012f08:	428f      	cmp	r7, r1
 8012f0a:	bf38      	it	cc
 8012f0c:	2204      	movcc	r2, #4
 8012f0e:	9201      	str	r2, [sp, #4]
 8012f10:	9a02      	ldr	r2, [sp, #8]
 8012f12:	9303      	str	r3, [sp, #12]
 8012f14:	429a      	cmp	r2, r3
 8012f16:	d80c      	bhi.n	8012f32 <__multiply+0x9e>
 8012f18:	2e00      	cmp	r6, #0
 8012f1a:	dd03      	ble.n	8012f24 <__multiply+0x90>
 8012f1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d05a      	beq.n	8012fda <__multiply+0x146>
 8012f24:	6106      	str	r6, [r0, #16]
 8012f26:	b005      	add	sp, #20
 8012f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f2c:	f843 2b04 	str.w	r2, [r3], #4
 8012f30:	e7d8      	b.n	8012ee4 <__multiply+0x50>
 8012f32:	f8b3 a000 	ldrh.w	sl, [r3]
 8012f36:	f1ba 0f00 	cmp.w	sl, #0
 8012f3a:	d024      	beq.n	8012f86 <__multiply+0xf2>
 8012f3c:	f104 0e14 	add.w	lr, r4, #20
 8012f40:	46a9      	mov	r9, r5
 8012f42:	f04f 0c00 	mov.w	ip, #0
 8012f46:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012f4a:	f8d9 1000 	ldr.w	r1, [r9]
 8012f4e:	fa1f fb82 	uxth.w	fp, r2
 8012f52:	b289      	uxth	r1, r1
 8012f54:	fb0a 110b 	mla	r1, sl, fp, r1
 8012f58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012f5c:	f8d9 2000 	ldr.w	r2, [r9]
 8012f60:	4461      	add	r1, ip
 8012f62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012f66:	fb0a c20b 	mla	r2, sl, fp, ip
 8012f6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012f6e:	b289      	uxth	r1, r1
 8012f70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012f74:	4577      	cmp	r7, lr
 8012f76:	f849 1b04 	str.w	r1, [r9], #4
 8012f7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012f7e:	d8e2      	bhi.n	8012f46 <__multiply+0xb2>
 8012f80:	9a01      	ldr	r2, [sp, #4]
 8012f82:	f845 c002 	str.w	ip, [r5, r2]
 8012f86:	9a03      	ldr	r2, [sp, #12]
 8012f88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012f8c:	3304      	adds	r3, #4
 8012f8e:	f1b9 0f00 	cmp.w	r9, #0
 8012f92:	d020      	beq.n	8012fd6 <__multiply+0x142>
 8012f94:	6829      	ldr	r1, [r5, #0]
 8012f96:	f104 0c14 	add.w	ip, r4, #20
 8012f9a:	46ae      	mov	lr, r5
 8012f9c:	f04f 0a00 	mov.w	sl, #0
 8012fa0:	f8bc b000 	ldrh.w	fp, [ip]
 8012fa4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012fa8:	fb09 220b 	mla	r2, r9, fp, r2
 8012fac:	4492      	add	sl, r2
 8012fae:	b289      	uxth	r1, r1
 8012fb0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012fb4:	f84e 1b04 	str.w	r1, [lr], #4
 8012fb8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012fbc:	f8be 1000 	ldrh.w	r1, [lr]
 8012fc0:	0c12      	lsrs	r2, r2, #16
 8012fc2:	fb09 1102 	mla	r1, r9, r2, r1
 8012fc6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012fca:	4567      	cmp	r7, ip
 8012fcc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012fd0:	d8e6      	bhi.n	8012fa0 <__multiply+0x10c>
 8012fd2:	9a01      	ldr	r2, [sp, #4]
 8012fd4:	50a9      	str	r1, [r5, r2]
 8012fd6:	3504      	adds	r5, #4
 8012fd8:	e79a      	b.n	8012f10 <__multiply+0x7c>
 8012fda:	3e01      	subs	r6, #1
 8012fdc:	e79c      	b.n	8012f18 <__multiply+0x84>
 8012fde:	bf00      	nop
 8012fe0:	08015450 	.word	0x08015450
 8012fe4:	080154dc 	.word	0x080154dc

08012fe8 <__pow5mult>:
 8012fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fec:	4615      	mov	r5, r2
 8012fee:	f012 0203 	ands.w	r2, r2, #3
 8012ff2:	4606      	mov	r6, r0
 8012ff4:	460f      	mov	r7, r1
 8012ff6:	d007      	beq.n	8013008 <__pow5mult+0x20>
 8012ff8:	4c25      	ldr	r4, [pc, #148]	; (8013090 <__pow5mult+0xa8>)
 8012ffa:	3a01      	subs	r2, #1
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013002:	f7ff fe51 	bl	8012ca8 <__multadd>
 8013006:	4607      	mov	r7, r0
 8013008:	10ad      	asrs	r5, r5, #2
 801300a:	d03d      	beq.n	8013088 <__pow5mult+0xa0>
 801300c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801300e:	b97c      	cbnz	r4, 8013030 <__pow5mult+0x48>
 8013010:	2010      	movs	r0, #16
 8013012:	f7ff fdcd 	bl	8012bb0 <malloc>
 8013016:	4602      	mov	r2, r0
 8013018:	6270      	str	r0, [r6, #36]	; 0x24
 801301a:	b928      	cbnz	r0, 8013028 <__pow5mult+0x40>
 801301c:	4b1d      	ldr	r3, [pc, #116]	; (8013094 <__pow5mult+0xac>)
 801301e:	481e      	ldr	r0, [pc, #120]	; (8013098 <__pow5mult+0xb0>)
 8013020:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013024:	f001 f934 	bl	8014290 <__assert_func>
 8013028:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801302c:	6004      	str	r4, [r0, #0]
 801302e:	60c4      	str	r4, [r0, #12]
 8013030:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013034:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013038:	b94c      	cbnz	r4, 801304e <__pow5mult+0x66>
 801303a:	f240 2171 	movw	r1, #625	; 0x271
 801303e:	4630      	mov	r0, r6
 8013040:	f7ff ff12 	bl	8012e68 <__i2b>
 8013044:	2300      	movs	r3, #0
 8013046:	f8c8 0008 	str.w	r0, [r8, #8]
 801304a:	4604      	mov	r4, r0
 801304c:	6003      	str	r3, [r0, #0]
 801304e:	f04f 0900 	mov.w	r9, #0
 8013052:	07eb      	lsls	r3, r5, #31
 8013054:	d50a      	bpl.n	801306c <__pow5mult+0x84>
 8013056:	4639      	mov	r1, r7
 8013058:	4622      	mov	r2, r4
 801305a:	4630      	mov	r0, r6
 801305c:	f7ff ff1a 	bl	8012e94 <__multiply>
 8013060:	4639      	mov	r1, r7
 8013062:	4680      	mov	r8, r0
 8013064:	4630      	mov	r0, r6
 8013066:	f7ff fdfd 	bl	8012c64 <_Bfree>
 801306a:	4647      	mov	r7, r8
 801306c:	106d      	asrs	r5, r5, #1
 801306e:	d00b      	beq.n	8013088 <__pow5mult+0xa0>
 8013070:	6820      	ldr	r0, [r4, #0]
 8013072:	b938      	cbnz	r0, 8013084 <__pow5mult+0x9c>
 8013074:	4622      	mov	r2, r4
 8013076:	4621      	mov	r1, r4
 8013078:	4630      	mov	r0, r6
 801307a:	f7ff ff0b 	bl	8012e94 <__multiply>
 801307e:	6020      	str	r0, [r4, #0]
 8013080:	f8c0 9000 	str.w	r9, [r0]
 8013084:	4604      	mov	r4, r0
 8013086:	e7e4      	b.n	8013052 <__pow5mult+0x6a>
 8013088:	4638      	mov	r0, r7
 801308a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801308e:	bf00      	nop
 8013090:	08015628 	.word	0x08015628
 8013094:	080153de 	.word	0x080153de
 8013098:	080154dc 	.word	0x080154dc

0801309c <__lshift>:
 801309c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130a0:	460c      	mov	r4, r1
 80130a2:	6849      	ldr	r1, [r1, #4]
 80130a4:	6923      	ldr	r3, [r4, #16]
 80130a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80130aa:	68a3      	ldr	r3, [r4, #8]
 80130ac:	4607      	mov	r7, r0
 80130ae:	4691      	mov	r9, r2
 80130b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80130b4:	f108 0601 	add.w	r6, r8, #1
 80130b8:	42b3      	cmp	r3, r6
 80130ba:	db0b      	blt.n	80130d4 <__lshift+0x38>
 80130bc:	4638      	mov	r0, r7
 80130be:	f7ff fd91 	bl	8012be4 <_Balloc>
 80130c2:	4605      	mov	r5, r0
 80130c4:	b948      	cbnz	r0, 80130da <__lshift+0x3e>
 80130c6:	4602      	mov	r2, r0
 80130c8:	4b2a      	ldr	r3, [pc, #168]	; (8013174 <__lshift+0xd8>)
 80130ca:	482b      	ldr	r0, [pc, #172]	; (8013178 <__lshift+0xdc>)
 80130cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80130d0:	f001 f8de 	bl	8014290 <__assert_func>
 80130d4:	3101      	adds	r1, #1
 80130d6:	005b      	lsls	r3, r3, #1
 80130d8:	e7ee      	b.n	80130b8 <__lshift+0x1c>
 80130da:	2300      	movs	r3, #0
 80130dc:	f100 0114 	add.w	r1, r0, #20
 80130e0:	f100 0210 	add.w	r2, r0, #16
 80130e4:	4618      	mov	r0, r3
 80130e6:	4553      	cmp	r3, sl
 80130e8:	db37      	blt.n	801315a <__lshift+0xbe>
 80130ea:	6920      	ldr	r0, [r4, #16]
 80130ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80130f0:	f104 0314 	add.w	r3, r4, #20
 80130f4:	f019 091f 	ands.w	r9, r9, #31
 80130f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80130fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013100:	d02f      	beq.n	8013162 <__lshift+0xc6>
 8013102:	f1c9 0e20 	rsb	lr, r9, #32
 8013106:	468a      	mov	sl, r1
 8013108:	f04f 0c00 	mov.w	ip, #0
 801310c:	681a      	ldr	r2, [r3, #0]
 801310e:	fa02 f209 	lsl.w	r2, r2, r9
 8013112:	ea42 020c 	orr.w	r2, r2, ip
 8013116:	f84a 2b04 	str.w	r2, [sl], #4
 801311a:	f853 2b04 	ldr.w	r2, [r3], #4
 801311e:	4298      	cmp	r0, r3
 8013120:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013124:	d8f2      	bhi.n	801310c <__lshift+0x70>
 8013126:	1b03      	subs	r3, r0, r4
 8013128:	3b15      	subs	r3, #21
 801312a:	f023 0303 	bic.w	r3, r3, #3
 801312e:	3304      	adds	r3, #4
 8013130:	f104 0215 	add.w	r2, r4, #21
 8013134:	4290      	cmp	r0, r2
 8013136:	bf38      	it	cc
 8013138:	2304      	movcc	r3, #4
 801313a:	f841 c003 	str.w	ip, [r1, r3]
 801313e:	f1bc 0f00 	cmp.w	ip, #0
 8013142:	d001      	beq.n	8013148 <__lshift+0xac>
 8013144:	f108 0602 	add.w	r6, r8, #2
 8013148:	3e01      	subs	r6, #1
 801314a:	4638      	mov	r0, r7
 801314c:	612e      	str	r6, [r5, #16]
 801314e:	4621      	mov	r1, r4
 8013150:	f7ff fd88 	bl	8012c64 <_Bfree>
 8013154:	4628      	mov	r0, r5
 8013156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801315a:	f842 0f04 	str.w	r0, [r2, #4]!
 801315e:	3301      	adds	r3, #1
 8013160:	e7c1      	b.n	80130e6 <__lshift+0x4a>
 8013162:	3904      	subs	r1, #4
 8013164:	f853 2b04 	ldr.w	r2, [r3], #4
 8013168:	f841 2f04 	str.w	r2, [r1, #4]!
 801316c:	4298      	cmp	r0, r3
 801316e:	d8f9      	bhi.n	8013164 <__lshift+0xc8>
 8013170:	e7ea      	b.n	8013148 <__lshift+0xac>
 8013172:	bf00      	nop
 8013174:	08015450 	.word	0x08015450
 8013178:	080154dc 	.word	0x080154dc

0801317c <__mcmp>:
 801317c:	b530      	push	{r4, r5, lr}
 801317e:	6902      	ldr	r2, [r0, #16]
 8013180:	690c      	ldr	r4, [r1, #16]
 8013182:	1b12      	subs	r2, r2, r4
 8013184:	d10e      	bne.n	80131a4 <__mcmp+0x28>
 8013186:	f100 0314 	add.w	r3, r0, #20
 801318a:	3114      	adds	r1, #20
 801318c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013190:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013194:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013198:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801319c:	42a5      	cmp	r5, r4
 801319e:	d003      	beq.n	80131a8 <__mcmp+0x2c>
 80131a0:	d305      	bcc.n	80131ae <__mcmp+0x32>
 80131a2:	2201      	movs	r2, #1
 80131a4:	4610      	mov	r0, r2
 80131a6:	bd30      	pop	{r4, r5, pc}
 80131a8:	4283      	cmp	r3, r0
 80131aa:	d3f3      	bcc.n	8013194 <__mcmp+0x18>
 80131ac:	e7fa      	b.n	80131a4 <__mcmp+0x28>
 80131ae:	f04f 32ff 	mov.w	r2, #4294967295
 80131b2:	e7f7      	b.n	80131a4 <__mcmp+0x28>

080131b4 <__mdiff>:
 80131b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131b8:	460c      	mov	r4, r1
 80131ba:	4606      	mov	r6, r0
 80131bc:	4611      	mov	r1, r2
 80131be:	4620      	mov	r0, r4
 80131c0:	4690      	mov	r8, r2
 80131c2:	f7ff ffdb 	bl	801317c <__mcmp>
 80131c6:	1e05      	subs	r5, r0, #0
 80131c8:	d110      	bne.n	80131ec <__mdiff+0x38>
 80131ca:	4629      	mov	r1, r5
 80131cc:	4630      	mov	r0, r6
 80131ce:	f7ff fd09 	bl	8012be4 <_Balloc>
 80131d2:	b930      	cbnz	r0, 80131e2 <__mdiff+0x2e>
 80131d4:	4b3a      	ldr	r3, [pc, #232]	; (80132c0 <__mdiff+0x10c>)
 80131d6:	4602      	mov	r2, r0
 80131d8:	f240 2132 	movw	r1, #562	; 0x232
 80131dc:	4839      	ldr	r0, [pc, #228]	; (80132c4 <__mdiff+0x110>)
 80131de:	f001 f857 	bl	8014290 <__assert_func>
 80131e2:	2301      	movs	r3, #1
 80131e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80131e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ec:	bfa4      	itt	ge
 80131ee:	4643      	movge	r3, r8
 80131f0:	46a0      	movge	r8, r4
 80131f2:	4630      	mov	r0, r6
 80131f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80131f8:	bfa6      	itte	ge
 80131fa:	461c      	movge	r4, r3
 80131fc:	2500      	movge	r5, #0
 80131fe:	2501      	movlt	r5, #1
 8013200:	f7ff fcf0 	bl	8012be4 <_Balloc>
 8013204:	b920      	cbnz	r0, 8013210 <__mdiff+0x5c>
 8013206:	4b2e      	ldr	r3, [pc, #184]	; (80132c0 <__mdiff+0x10c>)
 8013208:	4602      	mov	r2, r0
 801320a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801320e:	e7e5      	b.n	80131dc <__mdiff+0x28>
 8013210:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013214:	6926      	ldr	r6, [r4, #16]
 8013216:	60c5      	str	r5, [r0, #12]
 8013218:	f104 0914 	add.w	r9, r4, #20
 801321c:	f108 0514 	add.w	r5, r8, #20
 8013220:	f100 0e14 	add.w	lr, r0, #20
 8013224:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013228:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801322c:	f108 0210 	add.w	r2, r8, #16
 8013230:	46f2      	mov	sl, lr
 8013232:	2100      	movs	r1, #0
 8013234:	f859 3b04 	ldr.w	r3, [r9], #4
 8013238:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801323c:	fa1f f883 	uxth.w	r8, r3
 8013240:	fa11 f18b 	uxtah	r1, r1, fp
 8013244:	0c1b      	lsrs	r3, r3, #16
 8013246:	eba1 0808 	sub.w	r8, r1, r8
 801324a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801324e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013252:	fa1f f888 	uxth.w	r8, r8
 8013256:	1419      	asrs	r1, r3, #16
 8013258:	454e      	cmp	r6, r9
 801325a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801325e:	f84a 3b04 	str.w	r3, [sl], #4
 8013262:	d8e7      	bhi.n	8013234 <__mdiff+0x80>
 8013264:	1b33      	subs	r3, r6, r4
 8013266:	3b15      	subs	r3, #21
 8013268:	f023 0303 	bic.w	r3, r3, #3
 801326c:	3304      	adds	r3, #4
 801326e:	3415      	adds	r4, #21
 8013270:	42a6      	cmp	r6, r4
 8013272:	bf38      	it	cc
 8013274:	2304      	movcc	r3, #4
 8013276:	441d      	add	r5, r3
 8013278:	4473      	add	r3, lr
 801327a:	469e      	mov	lr, r3
 801327c:	462e      	mov	r6, r5
 801327e:	4566      	cmp	r6, ip
 8013280:	d30e      	bcc.n	80132a0 <__mdiff+0xec>
 8013282:	f10c 0203 	add.w	r2, ip, #3
 8013286:	1b52      	subs	r2, r2, r5
 8013288:	f022 0203 	bic.w	r2, r2, #3
 801328c:	3d03      	subs	r5, #3
 801328e:	45ac      	cmp	ip, r5
 8013290:	bf38      	it	cc
 8013292:	2200      	movcc	r2, #0
 8013294:	441a      	add	r2, r3
 8013296:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801329a:	b17b      	cbz	r3, 80132bc <__mdiff+0x108>
 801329c:	6107      	str	r7, [r0, #16]
 801329e:	e7a3      	b.n	80131e8 <__mdiff+0x34>
 80132a0:	f856 8b04 	ldr.w	r8, [r6], #4
 80132a4:	fa11 f288 	uxtah	r2, r1, r8
 80132a8:	1414      	asrs	r4, r2, #16
 80132aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80132ae:	b292      	uxth	r2, r2
 80132b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80132b4:	f84e 2b04 	str.w	r2, [lr], #4
 80132b8:	1421      	asrs	r1, r4, #16
 80132ba:	e7e0      	b.n	801327e <__mdiff+0xca>
 80132bc:	3f01      	subs	r7, #1
 80132be:	e7ea      	b.n	8013296 <__mdiff+0xe2>
 80132c0:	08015450 	.word	0x08015450
 80132c4:	080154dc 	.word	0x080154dc

080132c8 <__ulp>:
 80132c8:	b082      	sub	sp, #8
 80132ca:	ed8d 0b00 	vstr	d0, [sp]
 80132ce:	9b01      	ldr	r3, [sp, #4]
 80132d0:	4912      	ldr	r1, [pc, #72]	; (801331c <__ulp+0x54>)
 80132d2:	4019      	ands	r1, r3
 80132d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80132d8:	2900      	cmp	r1, #0
 80132da:	dd05      	ble.n	80132e8 <__ulp+0x20>
 80132dc:	2200      	movs	r2, #0
 80132de:	460b      	mov	r3, r1
 80132e0:	ec43 2b10 	vmov	d0, r2, r3
 80132e4:	b002      	add	sp, #8
 80132e6:	4770      	bx	lr
 80132e8:	4249      	negs	r1, r1
 80132ea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80132ee:	ea4f 5021 	mov.w	r0, r1, asr #20
 80132f2:	f04f 0200 	mov.w	r2, #0
 80132f6:	f04f 0300 	mov.w	r3, #0
 80132fa:	da04      	bge.n	8013306 <__ulp+0x3e>
 80132fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013300:	fa41 f300 	asr.w	r3, r1, r0
 8013304:	e7ec      	b.n	80132e0 <__ulp+0x18>
 8013306:	f1a0 0114 	sub.w	r1, r0, #20
 801330a:	291e      	cmp	r1, #30
 801330c:	bfda      	itte	le
 801330e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013312:	fa20 f101 	lsrle.w	r1, r0, r1
 8013316:	2101      	movgt	r1, #1
 8013318:	460a      	mov	r2, r1
 801331a:	e7e1      	b.n	80132e0 <__ulp+0x18>
 801331c:	7ff00000 	.word	0x7ff00000

08013320 <__b2d>:
 8013320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013322:	6905      	ldr	r5, [r0, #16]
 8013324:	f100 0714 	add.w	r7, r0, #20
 8013328:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801332c:	1f2e      	subs	r6, r5, #4
 801332e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013332:	4620      	mov	r0, r4
 8013334:	f7ff fd48 	bl	8012dc8 <__hi0bits>
 8013338:	f1c0 0320 	rsb	r3, r0, #32
 801333c:	280a      	cmp	r0, #10
 801333e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80133bc <__b2d+0x9c>
 8013342:	600b      	str	r3, [r1, #0]
 8013344:	dc14      	bgt.n	8013370 <__b2d+0x50>
 8013346:	f1c0 0e0b 	rsb	lr, r0, #11
 801334a:	fa24 f10e 	lsr.w	r1, r4, lr
 801334e:	42b7      	cmp	r7, r6
 8013350:	ea41 030c 	orr.w	r3, r1, ip
 8013354:	bf34      	ite	cc
 8013356:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801335a:	2100      	movcs	r1, #0
 801335c:	3015      	adds	r0, #21
 801335e:	fa04 f000 	lsl.w	r0, r4, r0
 8013362:	fa21 f10e 	lsr.w	r1, r1, lr
 8013366:	ea40 0201 	orr.w	r2, r0, r1
 801336a:	ec43 2b10 	vmov	d0, r2, r3
 801336e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013370:	42b7      	cmp	r7, r6
 8013372:	bf3a      	itte	cc
 8013374:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013378:	f1a5 0608 	subcc.w	r6, r5, #8
 801337c:	2100      	movcs	r1, #0
 801337e:	380b      	subs	r0, #11
 8013380:	d017      	beq.n	80133b2 <__b2d+0x92>
 8013382:	f1c0 0c20 	rsb	ip, r0, #32
 8013386:	fa04 f500 	lsl.w	r5, r4, r0
 801338a:	42be      	cmp	r6, r7
 801338c:	fa21 f40c 	lsr.w	r4, r1, ip
 8013390:	ea45 0504 	orr.w	r5, r5, r4
 8013394:	bf8c      	ite	hi
 8013396:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801339a:	2400      	movls	r4, #0
 801339c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80133a0:	fa01 f000 	lsl.w	r0, r1, r0
 80133a4:	fa24 f40c 	lsr.w	r4, r4, ip
 80133a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80133ac:	ea40 0204 	orr.w	r2, r0, r4
 80133b0:	e7db      	b.n	801336a <__b2d+0x4a>
 80133b2:	ea44 030c 	orr.w	r3, r4, ip
 80133b6:	460a      	mov	r2, r1
 80133b8:	e7d7      	b.n	801336a <__b2d+0x4a>
 80133ba:	bf00      	nop
 80133bc:	3ff00000 	.word	0x3ff00000

080133c0 <__d2b>:
 80133c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80133c4:	4689      	mov	r9, r1
 80133c6:	2101      	movs	r1, #1
 80133c8:	ec57 6b10 	vmov	r6, r7, d0
 80133cc:	4690      	mov	r8, r2
 80133ce:	f7ff fc09 	bl	8012be4 <_Balloc>
 80133d2:	4604      	mov	r4, r0
 80133d4:	b930      	cbnz	r0, 80133e4 <__d2b+0x24>
 80133d6:	4602      	mov	r2, r0
 80133d8:	4b25      	ldr	r3, [pc, #148]	; (8013470 <__d2b+0xb0>)
 80133da:	4826      	ldr	r0, [pc, #152]	; (8013474 <__d2b+0xb4>)
 80133dc:	f240 310a 	movw	r1, #778	; 0x30a
 80133e0:	f000 ff56 	bl	8014290 <__assert_func>
 80133e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80133e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80133ec:	bb35      	cbnz	r5, 801343c <__d2b+0x7c>
 80133ee:	2e00      	cmp	r6, #0
 80133f0:	9301      	str	r3, [sp, #4]
 80133f2:	d028      	beq.n	8013446 <__d2b+0x86>
 80133f4:	4668      	mov	r0, sp
 80133f6:	9600      	str	r6, [sp, #0]
 80133f8:	f7ff fd06 	bl	8012e08 <__lo0bits>
 80133fc:	9900      	ldr	r1, [sp, #0]
 80133fe:	b300      	cbz	r0, 8013442 <__d2b+0x82>
 8013400:	9a01      	ldr	r2, [sp, #4]
 8013402:	f1c0 0320 	rsb	r3, r0, #32
 8013406:	fa02 f303 	lsl.w	r3, r2, r3
 801340a:	430b      	orrs	r3, r1
 801340c:	40c2      	lsrs	r2, r0
 801340e:	6163      	str	r3, [r4, #20]
 8013410:	9201      	str	r2, [sp, #4]
 8013412:	9b01      	ldr	r3, [sp, #4]
 8013414:	61a3      	str	r3, [r4, #24]
 8013416:	2b00      	cmp	r3, #0
 8013418:	bf14      	ite	ne
 801341a:	2202      	movne	r2, #2
 801341c:	2201      	moveq	r2, #1
 801341e:	6122      	str	r2, [r4, #16]
 8013420:	b1d5      	cbz	r5, 8013458 <__d2b+0x98>
 8013422:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013426:	4405      	add	r5, r0
 8013428:	f8c9 5000 	str.w	r5, [r9]
 801342c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013430:	f8c8 0000 	str.w	r0, [r8]
 8013434:	4620      	mov	r0, r4
 8013436:	b003      	add	sp, #12
 8013438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801343c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013440:	e7d5      	b.n	80133ee <__d2b+0x2e>
 8013442:	6161      	str	r1, [r4, #20]
 8013444:	e7e5      	b.n	8013412 <__d2b+0x52>
 8013446:	a801      	add	r0, sp, #4
 8013448:	f7ff fcde 	bl	8012e08 <__lo0bits>
 801344c:	9b01      	ldr	r3, [sp, #4]
 801344e:	6163      	str	r3, [r4, #20]
 8013450:	2201      	movs	r2, #1
 8013452:	6122      	str	r2, [r4, #16]
 8013454:	3020      	adds	r0, #32
 8013456:	e7e3      	b.n	8013420 <__d2b+0x60>
 8013458:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801345c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013460:	f8c9 0000 	str.w	r0, [r9]
 8013464:	6918      	ldr	r0, [r3, #16]
 8013466:	f7ff fcaf 	bl	8012dc8 <__hi0bits>
 801346a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801346e:	e7df      	b.n	8013430 <__d2b+0x70>
 8013470:	08015450 	.word	0x08015450
 8013474:	080154dc 	.word	0x080154dc

08013478 <__ratio>:
 8013478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801347c:	4688      	mov	r8, r1
 801347e:	4669      	mov	r1, sp
 8013480:	4681      	mov	r9, r0
 8013482:	f7ff ff4d 	bl	8013320 <__b2d>
 8013486:	a901      	add	r1, sp, #4
 8013488:	4640      	mov	r0, r8
 801348a:	ec55 4b10 	vmov	r4, r5, d0
 801348e:	f7ff ff47 	bl	8013320 <__b2d>
 8013492:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013496:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801349a:	eba3 0c02 	sub.w	ip, r3, r2
 801349e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80134a2:	1a9b      	subs	r3, r3, r2
 80134a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80134a8:	ec51 0b10 	vmov	r0, r1, d0
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	bfd6      	itet	le
 80134b0:	460a      	movle	r2, r1
 80134b2:	462a      	movgt	r2, r5
 80134b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80134b8:	468b      	mov	fp, r1
 80134ba:	462f      	mov	r7, r5
 80134bc:	bfd4      	ite	le
 80134be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80134c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80134c6:	4620      	mov	r0, r4
 80134c8:	ee10 2a10 	vmov	r2, s0
 80134cc:	465b      	mov	r3, fp
 80134ce:	4639      	mov	r1, r7
 80134d0:	f7ed f9dc 	bl	800088c <__aeabi_ddiv>
 80134d4:	ec41 0b10 	vmov	d0, r0, r1
 80134d8:	b003      	add	sp, #12
 80134da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080134de <__copybits>:
 80134de:	3901      	subs	r1, #1
 80134e0:	b570      	push	{r4, r5, r6, lr}
 80134e2:	1149      	asrs	r1, r1, #5
 80134e4:	6914      	ldr	r4, [r2, #16]
 80134e6:	3101      	adds	r1, #1
 80134e8:	f102 0314 	add.w	r3, r2, #20
 80134ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80134f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80134f4:	1f05      	subs	r5, r0, #4
 80134f6:	42a3      	cmp	r3, r4
 80134f8:	d30c      	bcc.n	8013514 <__copybits+0x36>
 80134fa:	1aa3      	subs	r3, r4, r2
 80134fc:	3b11      	subs	r3, #17
 80134fe:	f023 0303 	bic.w	r3, r3, #3
 8013502:	3211      	adds	r2, #17
 8013504:	42a2      	cmp	r2, r4
 8013506:	bf88      	it	hi
 8013508:	2300      	movhi	r3, #0
 801350a:	4418      	add	r0, r3
 801350c:	2300      	movs	r3, #0
 801350e:	4288      	cmp	r0, r1
 8013510:	d305      	bcc.n	801351e <__copybits+0x40>
 8013512:	bd70      	pop	{r4, r5, r6, pc}
 8013514:	f853 6b04 	ldr.w	r6, [r3], #4
 8013518:	f845 6f04 	str.w	r6, [r5, #4]!
 801351c:	e7eb      	b.n	80134f6 <__copybits+0x18>
 801351e:	f840 3b04 	str.w	r3, [r0], #4
 8013522:	e7f4      	b.n	801350e <__copybits+0x30>

08013524 <__any_on>:
 8013524:	f100 0214 	add.w	r2, r0, #20
 8013528:	6900      	ldr	r0, [r0, #16]
 801352a:	114b      	asrs	r3, r1, #5
 801352c:	4298      	cmp	r0, r3
 801352e:	b510      	push	{r4, lr}
 8013530:	db11      	blt.n	8013556 <__any_on+0x32>
 8013532:	dd0a      	ble.n	801354a <__any_on+0x26>
 8013534:	f011 011f 	ands.w	r1, r1, #31
 8013538:	d007      	beq.n	801354a <__any_on+0x26>
 801353a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801353e:	fa24 f001 	lsr.w	r0, r4, r1
 8013542:	fa00 f101 	lsl.w	r1, r0, r1
 8013546:	428c      	cmp	r4, r1
 8013548:	d10b      	bne.n	8013562 <__any_on+0x3e>
 801354a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801354e:	4293      	cmp	r3, r2
 8013550:	d803      	bhi.n	801355a <__any_on+0x36>
 8013552:	2000      	movs	r0, #0
 8013554:	bd10      	pop	{r4, pc}
 8013556:	4603      	mov	r3, r0
 8013558:	e7f7      	b.n	801354a <__any_on+0x26>
 801355a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801355e:	2900      	cmp	r1, #0
 8013560:	d0f5      	beq.n	801354e <__any_on+0x2a>
 8013562:	2001      	movs	r0, #1
 8013564:	e7f6      	b.n	8013554 <__any_on+0x30>

08013566 <_calloc_r>:
 8013566:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013568:	fba1 2402 	umull	r2, r4, r1, r2
 801356c:	b94c      	cbnz	r4, 8013582 <_calloc_r+0x1c>
 801356e:	4611      	mov	r1, r2
 8013570:	9201      	str	r2, [sp, #4]
 8013572:	f000 f87b 	bl	801366c <_malloc_r>
 8013576:	9a01      	ldr	r2, [sp, #4]
 8013578:	4605      	mov	r5, r0
 801357a:	b930      	cbnz	r0, 801358a <_calloc_r+0x24>
 801357c:	4628      	mov	r0, r5
 801357e:	b003      	add	sp, #12
 8013580:	bd30      	pop	{r4, r5, pc}
 8013582:	220c      	movs	r2, #12
 8013584:	6002      	str	r2, [r0, #0]
 8013586:	2500      	movs	r5, #0
 8013588:	e7f8      	b.n	801357c <_calloc_r+0x16>
 801358a:	4621      	mov	r1, r4
 801358c:	f7fc fb0a 	bl	800fba4 <memset>
 8013590:	e7f4      	b.n	801357c <_calloc_r+0x16>
	...

08013594 <_free_r>:
 8013594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013596:	2900      	cmp	r1, #0
 8013598:	d044      	beq.n	8013624 <_free_r+0x90>
 801359a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801359e:	9001      	str	r0, [sp, #4]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	f1a1 0404 	sub.w	r4, r1, #4
 80135a6:	bfb8      	it	lt
 80135a8:	18e4      	addlt	r4, r4, r3
 80135aa:	f001 f875 	bl	8014698 <__malloc_lock>
 80135ae:	4a1e      	ldr	r2, [pc, #120]	; (8013628 <_free_r+0x94>)
 80135b0:	9801      	ldr	r0, [sp, #4]
 80135b2:	6813      	ldr	r3, [r2, #0]
 80135b4:	b933      	cbnz	r3, 80135c4 <_free_r+0x30>
 80135b6:	6063      	str	r3, [r4, #4]
 80135b8:	6014      	str	r4, [r2, #0]
 80135ba:	b003      	add	sp, #12
 80135bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135c0:	f001 b870 	b.w	80146a4 <__malloc_unlock>
 80135c4:	42a3      	cmp	r3, r4
 80135c6:	d908      	bls.n	80135da <_free_r+0x46>
 80135c8:	6825      	ldr	r5, [r4, #0]
 80135ca:	1961      	adds	r1, r4, r5
 80135cc:	428b      	cmp	r3, r1
 80135ce:	bf01      	itttt	eq
 80135d0:	6819      	ldreq	r1, [r3, #0]
 80135d2:	685b      	ldreq	r3, [r3, #4]
 80135d4:	1949      	addeq	r1, r1, r5
 80135d6:	6021      	streq	r1, [r4, #0]
 80135d8:	e7ed      	b.n	80135b6 <_free_r+0x22>
 80135da:	461a      	mov	r2, r3
 80135dc:	685b      	ldr	r3, [r3, #4]
 80135de:	b10b      	cbz	r3, 80135e4 <_free_r+0x50>
 80135e0:	42a3      	cmp	r3, r4
 80135e2:	d9fa      	bls.n	80135da <_free_r+0x46>
 80135e4:	6811      	ldr	r1, [r2, #0]
 80135e6:	1855      	adds	r5, r2, r1
 80135e8:	42a5      	cmp	r5, r4
 80135ea:	d10b      	bne.n	8013604 <_free_r+0x70>
 80135ec:	6824      	ldr	r4, [r4, #0]
 80135ee:	4421      	add	r1, r4
 80135f0:	1854      	adds	r4, r2, r1
 80135f2:	42a3      	cmp	r3, r4
 80135f4:	6011      	str	r1, [r2, #0]
 80135f6:	d1e0      	bne.n	80135ba <_free_r+0x26>
 80135f8:	681c      	ldr	r4, [r3, #0]
 80135fa:	685b      	ldr	r3, [r3, #4]
 80135fc:	6053      	str	r3, [r2, #4]
 80135fe:	4421      	add	r1, r4
 8013600:	6011      	str	r1, [r2, #0]
 8013602:	e7da      	b.n	80135ba <_free_r+0x26>
 8013604:	d902      	bls.n	801360c <_free_r+0x78>
 8013606:	230c      	movs	r3, #12
 8013608:	6003      	str	r3, [r0, #0]
 801360a:	e7d6      	b.n	80135ba <_free_r+0x26>
 801360c:	6825      	ldr	r5, [r4, #0]
 801360e:	1961      	adds	r1, r4, r5
 8013610:	428b      	cmp	r3, r1
 8013612:	bf04      	itt	eq
 8013614:	6819      	ldreq	r1, [r3, #0]
 8013616:	685b      	ldreq	r3, [r3, #4]
 8013618:	6063      	str	r3, [r4, #4]
 801361a:	bf04      	itt	eq
 801361c:	1949      	addeq	r1, r1, r5
 801361e:	6021      	streq	r1, [r4, #0]
 8013620:	6054      	str	r4, [r2, #4]
 8013622:	e7ca      	b.n	80135ba <_free_r+0x26>
 8013624:	b003      	add	sp, #12
 8013626:	bd30      	pop	{r4, r5, pc}
 8013628:	20000768 	.word	0x20000768

0801362c <sbrk_aligned>:
 801362c:	b570      	push	{r4, r5, r6, lr}
 801362e:	4e0e      	ldr	r6, [pc, #56]	; (8013668 <sbrk_aligned+0x3c>)
 8013630:	460c      	mov	r4, r1
 8013632:	6831      	ldr	r1, [r6, #0]
 8013634:	4605      	mov	r5, r0
 8013636:	b911      	cbnz	r1, 801363e <sbrk_aligned+0x12>
 8013638:	f000 fd26 	bl	8014088 <_sbrk_r>
 801363c:	6030      	str	r0, [r6, #0]
 801363e:	4621      	mov	r1, r4
 8013640:	4628      	mov	r0, r5
 8013642:	f000 fd21 	bl	8014088 <_sbrk_r>
 8013646:	1c43      	adds	r3, r0, #1
 8013648:	d00a      	beq.n	8013660 <sbrk_aligned+0x34>
 801364a:	1cc4      	adds	r4, r0, #3
 801364c:	f024 0403 	bic.w	r4, r4, #3
 8013650:	42a0      	cmp	r0, r4
 8013652:	d007      	beq.n	8013664 <sbrk_aligned+0x38>
 8013654:	1a21      	subs	r1, r4, r0
 8013656:	4628      	mov	r0, r5
 8013658:	f000 fd16 	bl	8014088 <_sbrk_r>
 801365c:	3001      	adds	r0, #1
 801365e:	d101      	bne.n	8013664 <sbrk_aligned+0x38>
 8013660:	f04f 34ff 	mov.w	r4, #4294967295
 8013664:	4620      	mov	r0, r4
 8013666:	bd70      	pop	{r4, r5, r6, pc}
 8013668:	2000076c 	.word	0x2000076c

0801366c <_malloc_r>:
 801366c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013670:	1ccd      	adds	r5, r1, #3
 8013672:	f025 0503 	bic.w	r5, r5, #3
 8013676:	3508      	adds	r5, #8
 8013678:	2d0c      	cmp	r5, #12
 801367a:	bf38      	it	cc
 801367c:	250c      	movcc	r5, #12
 801367e:	2d00      	cmp	r5, #0
 8013680:	4607      	mov	r7, r0
 8013682:	db01      	blt.n	8013688 <_malloc_r+0x1c>
 8013684:	42a9      	cmp	r1, r5
 8013686:	d905      	bls.n	8013694 <_malloc_r+0x28>
 8013688:	230c      	movs	r3, #12
 801368a:	603b      	str	r3, [r7, #0]
 801368c:	2600      	movs	r6, #0
 801368e:	4630      	mov	r0, r6
 8013690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013694:	4e2e      	ldr	r6, [pc, #184]	; (8013750 <_malloc_r+0xe4>)
 8013696:	f000 ffff 	bl	8014698 <__malloc_lock>
 801369a:	6833      	ldr	r3, [r6, #0]
 801369c:	461c      	mov	r4, r3
 801369e:	bb34      	cbnz	r4, 80136ee <_malloc_r+0x82>
 80136a0:	4629      	mov	r1, r5
 80136a2:	4638      	mov	r0, r7
 80136a4:	f7ff ffc2 	bl	801362c <sbrk_aligned>
 80136a8:	1c43      	adds	r3, r0, #1
 80136aa:	4604      	mov	r4, r0
 80136ac:	d14d      	bne.n	801374a <_malloc_r+0xde>
 80136ae:	6834      	ldr	r4, [r6, #0]
 80136b0:	4626      	mov	r6, r4
 80136b2:	2e00      	cmp	r6, #0
 80136b4:	d140      	bne.n	8013738 <_malloc_r+0xcc>
 80136b6:	6823      	ldr	r3, [r4, #0]
 80136b8:	4631      	mov	r1, r6
 80136ba:	4638      	mov	r0, r7
 80136bc:	eb04 0803 	add.w	r8, r4, r3
 80136c0:	f000 fce2 	bl	8014088 <_sbrk_r>
 80136c4:	4580      	cmp	r8, r0
 80136c6:	d13a      	bne.n	801373e <_malloc_r+0xd2>
 80136c8:	6821      	ldr	r1, [r4, #0]
 80136ca:	3503      	adds	r5, #3
 80136cc:	1a6d      	subs	r5, r5, r1
 80136ce:	f025 0503 	bic.w	r5, r5, #3
 80136d2:	3508      	adds	r5, #8
 80136d4:	2d0c      	cmp	r5, #12
 80136d6:	bf38      	it	cc
 80136d8:	250c      	movcc	r5, #12
 80136da:	4629      	mov	r1, r5
 80136dc:	4638      	mov	r0, r7
 80136de:	f7ff ffa5 	bl	801362c <sbrk_aligned>
 80136e2:	3001      	adds	r0, #1
 80136e4:	d02b      	beq.n	801373e <_malloc_r+0xd2>
 80136e6:	6823      	ldr	r3, [r4, #0]
 80136e8:	442b      	add	r3, r5
 80136ea:	6023      	str	r3, [r4, #0]
 80136ec:	e00e      	b.n	801370c <_malloc_r+0xa0>
 80136ee:	6822      	ldr	r2, [r4, #0]
 80136f0:	1b52      	subs	r2, r2, r5
 80136f2:	d41e      	bmi.n	8013732 <_malloc_r+0xc6>
 80136f4:	2a0b      	cmp	r2, #11
 80136f6:	d916      	bls.n	8013726 <_malloc_r+0xba>
 80136f8:	1961      	adds	r1, r4, r5
 80136fa:	42a3      	cmp	r3, r4
 80136fc:	6025      	str	r5, [r4, #0]
 80136fe:	bf18      	it	ne
 8013700:	6059      	strne	r1, [r3, #4]
 8013702:	6863      	ldr	r3, [r4, #4]
 8013704:	bf08      	it	eq
 8013706:	6031      	streq	r1, [r6, #0]
 8013708:	5162      	str	r2, [r4, r5]
 801370a:	604b      	str	r3, [r1, #4]
 801370c:	4638      	mov	r0, r7
 801370e:	f104 060b 	add.w	r6, r4, #11
 8013712:	f000 ffc7 	bl	80146a4 <__malloc_unlock>
 8013716:	f026 0607 	bic.w	r6, r6, #7
 801371a:	1d23      	adds	r3, r4, #4
 801371c:	1af2      	subs	r2, r6, r3
 801371e:	d0b6      	beq.n	801368e <_malloc_r+0x22>
 8013720:	1b9b      	subs	r3, r3, r6
 8013722:	50a3      	str	r3, [r4, r2]
 8013724:	e7b3      	b.n	801368e <_malloc_r+0x22>
 8013726:	6862      	ldr	r2, [r4, #4]
 8013728:	42a3      	cmp	r3, r4
 801372a:	bf0c      	ite	eq
 801372c:	6032      	streq	r2, [r6, #0]
 801372e:	605a      	strne	r2, [r3, #4]
 8013730:	e7ec      	b.n	801370c <_malloc_r+0xa0>
 8013732:	4623      	mov	r3, r4
 8013734:	6864      	ldr	r4, [r4, #4]
 8013736:	e7b2      	b.n	801369e <_malloc_r+0x32>
 8013738:	4634      	mov	r4, r6
 801373a:	6876      	ldr	r6, [r6, #4]
 801373c:	e7b9      	b.n	80136b2 <_malloc_r+0x46>
 801373e:	230c      	movs	r3, #12
 8013740:	603b      	str	r3, [r7, #0]
 8013742:	4638      	mov	r0, r7
 8013744:	f000 ffae 	bl	80146a4 <__malloc_unlock>
 8013748:	e7a1      	b.n	801368e <_malloc_r+0x22>
 801374a:	6025      	str	r5, [r4, #0]
 801374c:	e7de      	b.n	801370c <_malloc_r+0xa0>
 801374e:	bf00      	nop
 8013750:	20000768 	.word	0x20000768

08013754 <__ssputs_r>:
 8013754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013758:	688e      	ldr	r6, [r1, #8]
 801375a:	429e      	cmp	r6, r3
 801375c:	4682      	mov	sl, r0
 801375e:	460c      	mov	r4, r1
 8013760:	4690      	mov	r8, r2
 8013762:	461f      	mov	r7, r3
 8013764:	d838      	bhi.n	80137d8 <__ssputs_r+0x84>
 8013766:	898a      	ldrh	r2, [r1, #12]
 8013768:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801376c:	d032      	beq.n	80137d4 <__ssputs_r+0x80>
 801376e:	6825      	ldr	r5, [r4, #0]
 8013770:	6909      	ldr	r1, [r1, #16]
 8013772:	eba5 0901 	sub.w	r9, r5, r1
 8013776:	6965      	ldr	r5, [r4, #20]
 8013778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801377c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013780:	3301      	adds	r3, #1
 8013782:	444b      	add	r3, r9
 8013784:	106d      	asrs	r5, r5, #1
 8013786:	429d      	cmp	r5, r3
 8013788:	bf38      	it	cc
 801378a:	461d      	movcc	r5, r3
 801378c:	0553      	lsls	r3, r2, #21
 801378e:	d531      	bpl.n	80137f4 <__ssputs_r+0xa0>
 8013790:	4629      	mov	r1, r5
 8013792:	f7ff ff6b 	bl	801366c <_malloc_r>
 8013796:	4606      	mov	r6, r0
 8013798:	b950      	cbnz	r0, 80137b0 <__ssputs_r+0x5c>
 801379a:	230c      	movs	r3, #12
 801379c:	f8ca 3000 	str.w	r3, [sl]
 80137a0:	89a3      	ldrh	r3, [r4, #12]
 80137a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137a6:	81a3      	strh	r3, [r4, #12]
 80137a8:	f04f 30ff 	mov.w	r0, #4294967295
 80137ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137b0:	6921      	ldr	r1, [r4, #16]
 80137b2:	464a      	mov	r2, r9
 80137b4:	f7fc f9e8 	bl	800fb88 <memcpy>
 80137b8:	89a3      	ldrh	r3, [r4, #12]
 80137ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80137be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137c2:	81a3      	strh	r3, [r4, #12]
 80137c4:	6126      	str	r6, [r4, #16]
 80137c6:	6165      	str	r5, [r4, #20]
 80137c8:	444e      	add	r6, r9
 80137ca:	eba5 0509 	sub.w	r5, r5, r9
 80137ce:	6026      	str	r6, [r4, #0]
 80137d0:	60a5      	str	r5, [r4, #8]
 80137d2:	463e      	mov	r6, r7
 80137d4:	42be      	cmp	r6, r7
 80137d6:	d900      	bls.n	80137da <__ssputs_r+0x86>
 80137d8:	463e      	mov	r6, r7
 80137da:	6820      	ldr	r0, [r4, #0]
 80137dc:	4632      	mov	r2, r6
 80137de:	4641      	mov	r1, r8
 80137e0:	f000 ff40 	bl	8014664 <memmove>
 80137e4:	68a3      	ldr	r3, [r4, #8]
 80137e6:	1b9b      	subs	r3, r3, r6
 80137e8:	60a3      	str	r3, [r4, #8]
 80137ea:	6823      	ldr	r3, [r4, #0]
 80137ec:	4433      	add	r3, r6
 80137ee:	6023      	str	r3, [r4, #0]
 80137f0:	2000      	movs	r0, #0
 80137f2:	e7db      	b.n	80137ac <__ssputs_r+0x58>
 80137f4:	462a      	mov	r2, r5
 80137f6:	f000 ff5b 	bl	80146b0 <_realloc_r>
 80137fa:	4606      	mov	r6, r0
 80137fc:	2800      	cmp	r0, #0
 80137fe:	d1e1      	bne.n	80137c4 <__ssputs_r+0x70>
 8013800:	6921      	ldr	r1, [r4, #16]
 8013802:	4650      	mov	r0, sl
 8013804:	f7ff fec6 	bl	8013594 <_free_r>
 8013808:	e7c7      	b.n	801379a <__ssputs_r+0x46>
	...

0801380c <_svfiprintf_r>:
 801380c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013810:	4698      	mov	r8, r3
 8013812:	898b      	ldrh	r3, [r1, #12]
 8013814:	061b      	lsls	r3, r3, #24
 8013816:	b09d      	sub	sp, #116	; 0x74
 8013818:	4607      	mov	r7, r0
 801381a:	460d      	mov	r5, r1
 801381c:	4614      	mov	r4, r2
 801381e:	d50e      	bpl.n	801383e <_svfiprintf_r+0x32>
 8013820:	690b      	ldr	r3, [r1, #16]
 8013822:	b963      	cbnz	r3, 801383e <_svfiprintf_r+0x32>
 8013824:	2140      	movs	r1, #64	; 0x40
 8013826:	f7ff ff21 	bl	801366c <_malloc_r>
 801382a:	6028      	str	r0, [r5, #0]
 801382c:	6128      	str	r0, [r5, #16]
 801382e:	b920      	cbnz	r0, 801383a <_svfiprintf_r+0x2e>
 8013830:	230c      	movs	r3, #12
 8013832:	603b      	str	r3, [r7, #0]
 8013834:	f04f 30ff 	mov.w	r0, #4294967295
 8013838:	e0d1      	b.n	80139de <_svfiprintf_r+0x1d2>
 801383a:	2340      	movs	r3, #64	; 0x40
 801383c:	616b      	str	r3, [r5, #20]
 801383e:	2300      	movs	r3, #0
 8013840:	9309      	str	r3, [sp, #36]	; 0x24
 8013842:	2320      	movs	r3, #32
 8013844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013848:	f8cd 800c 	str.w	r8, [sp, #12]
 801384c:	2330      	movs	r3, #48	; 0x30
 801384e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80139f8 <_svfiprintf_r+0x1ec>
 8013852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013856:	f04f 0901 	mov.w	r9, #1
 801385a:	4623      	mov	r3, r4
 801385c:	469a      	mov	sl, r3
 801385e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013862:	b10a      	cbz	r2, 8013868 <_svfiprintf_r+0x5c>
 8013864:	2a25      	cmp	r2, #37	; 0x25
 8013866:	d1f9      	bne.n	801385c <_svfiprintf_r+0x50>
 8013868:	ebba 0b04 	subs.w	fp, sl, r4
 801386c:	d00b      	beq.n	8013886 <_svfiprintf_r+0x7a>
 801386e:	465b      	mov	r3, fp
 8013870:	4622      	mov	r2, r4
 8013872:	4629      	mov	r1, r5
 8013874:	4638      	mov	r0, r7
 8013876:	f7ff ff6d 	bl	8013754 <__ssputs_r>
 801387a:	3001      	adds	r0, #1
 801387c:	f000 80aa 	beq.w	80139d4 <_svfiprintf_r+0x1c8>
 8013880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013882:	445a      	add	r2, fp
 8013884:	9209      	str	r2, [sp, #36]	; 0x24
 8013886:	f89a 3000 	ldrb.w	r3, [sl]
 801388a:	2b00      	cmp	r3, #0
 801388c:	f000 80a2 	beq.w	80139d4 <_svfiprintf_r+0x1c8>
 8013890:	2300      	movs	r3, #0
 8013892:	f04f 32ff 	mov.w	r2, #4294967295
 8013896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801389a:	f10a 0a01 	add.w	sl, sl, #1
 801389e:	9304      	str	r3, [sp, #16]
 80138a0:	9307      	str	r3, [sp, #28]
 80138a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80138a6:	931a      	str	r3, [sp, #104]	; 0x68
 80138a8:	4654      	mov	r4, sl
 80138aa:	2205      	movs	r2, #5
 80138ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138b0:	4851      	ldr	r0, [pc, #324]	; (80139f8 <_svfiprintf_r+0x1ec>)
 80138b2:	f7ec fcb5 	bl	8000220 <memchr>
 80138b6:	9a04      	ldr	r2, [sp, #16]
 80138b8:	b9d8      	cbnz	r0, 80138f2 <_svfiprintf_r+0xe6>
 80138ba:	06d0      	lsls	r0, r2, #27
 80138bc:	bf44      	itt	mi
 80138be:	2320      	movmi	r3, #32
 80138c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80138c4:	0711      	lsls	r1, r2, #28
 80138c6:	bf44      	itt	mi
 80138c8:	232b      	movmi	r3, #43	; 0x2b
 80138ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80138ce:	f89a 3000 	ldrb.w	r3, [sl]
 80138d2:	2b2a      	cmp	r3, #42	; 0x2a
 80138d4:	d015      	beq.n	8013902 <_svfiprintf_r+0xf6>
 80138d6:	9a07      	ldr	r2, [sp, #28]
 80138d8:	4654      	mov	r4, sl
 80138da:	2000      	movs	r0, #0
 80138dc:	f04f 0c0a 	mov.w	ip, #10
 80138e0:	4621      	mov	r1, r4
 80138e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80138e6:	3b30      	subs	r3, #48	; 0x30
 80138e8:	2b09      	cmp	r3, #9
 80138ea:	d94e      	bls.n	801398a <_svfiprintf_r+0x17e>
 80138ec:	b1b0      	cbz	r0, 801391c <_svfiprintf_r+0x110>
 80138ee:	9207      	str	r2, [sp, #28]
 80138f0:	e014      	b.n	801391c <_svfiprintf_r+0x110>
 80138f2:	eba0 0308 	sub.w	r3, r0, r8
 80138f6:	fa09 f303 	lsl.w	r3, r9, r3
 80138fa:	4313      	orrs	r3, r2
 80138fc:	9304      	str	r3, [sp, #16]
 80138fe:	46a2      	mov	sl, r4
 8013900:	e7d2      	b.n	80138a8 <_svfiprintf_r+0x9c>
 8013902:	9b03      	ldr	r3, [sp, #12]
 8013904:	1d19      	adds	r1, r3, #4
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	9103      	str	r1, [sp, #12]
 801390a:	2b00      	cmp	r3, #0
 801390c:	bfbb      	ittet	lt
 801390e:	425b      	neglt	r3, r3
 8013910:	f042 0202 	orrlt.w	r2, r2, #2
 8013914:	9307      	strge	r3, [sp, #28]
 8013916:	9307      	strlt	r3, [sp, #28]
 8013918:	bfb8      	it	lt
 801391a:	9204      	strlt	r2, [sp, #16]
 801391c:	7823      	ldrb	r3, [r4, #0]
 801391e:	2b2e      	cmp	r3, #46	; 0x2e
 8013920:	d10c      	bne.n	801393c <_svfiprintf_r+0x130>
 8013922:	7863      	ldrb	r3, [r4, #1]
 8013924:	2b2a      	cmp	r3, #42	; 0x2a
 8013926:	d135      	bne.n	8013994 <_svfiprintf_r+0x188>
 8013928:	9b03      	ldr	r3, [sp, #12]
 801392a:	1d1a      	adds	r2, r3, #4
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	9203      	str	r2, [sp, #12]
 8013930:	2b00      	cmp	r3, #0
 8013932:	bfb8      	it	lt
 8013934:	f04f 33ff 	movlt.w	r3, #4294967295
 8013938:	3402      	adds	r4, #2
 801393a:	9305      	str	r3, [sp, #20]
 801393c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013a08 <_svfiprintf_r+0x1fc>
 8013940:	7821      	ldrb	r1, [r4, #0]
 8013942:	2203      	movs	r2, #3
 8013944:	4650      	mov	r0, sl
 8013946:	f7ec fc6b 	bl	8000220 <memchr>
 801394a:	b140      	cbz	r0, 801395e <_svfiprintf_r+0x152>
 801394c:	2340      	movs	r3, #64	; 0x40
 801394e:	eba0 000a 	sub.w	r0, r0, sl
 8013952:	fa03 f000 	lsl.w	r0, r3, r0
 8013956:	9b04      	ldr	r3, [sp, #16]
 8013958:	4303      	orrs	r3, r0
 801395a:	3401      	adds	r4, #1
 801395c:	9304      	str	r3, [sp, #16]
 801395e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013962:	4826      	ldr	r0, [pc, #152]	; (80139fc <_svfiprintf_r+0x1f0>)
 8013964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013968:	2206      	movs	r2, #6
 801396a:	f7ec fc59 	bl	8000220 <memchr>
 801396e:	2800      	cmp	r0, #0
 8013970:	d038      	beq.n	80139e4 <_svfiprintf_r+0x1d8>
 8013972:	4b23      	ldr	r3, [pc, #140]	; (8013a00 <_svfiprintf_r+0x1f4>)
 8013974:	bb1b      	cbnz	r3, 80139be <_svfiprintf_r+0x1b2>
 8013976:	9b03      	ldr	r3, [sp, #12]
 8013978:	3307      	adds	r3, #7
 801397a:	f023 0307 	bic.w	r3, r3, #7
 801397e:	3308      	adds	r3, #8
 8013980:	9303      	str	r3, [sp, #12]
 8013982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013984:	4433      	add	r3, r6
 8013986:	9309      	str	r3, [sp, #36]	; 0x24
 8013988:	e767      	b.n	801385a <_svfiprintf_r+0x4e>
 801398a:	fb0c 3202 	mla	r2, ip, r2, r3
 801398e:	460c      	mov	r4, r1
 8013990:	2001      	movs	r0, #1
 8013992:	e7a5      	b.n	80138e0 <_svfiprintf_r+0xd4>
 8013994:	2300      	movs	r3, #0
 8013996:	3401      	adds	r4, #1
 8013998:	9305      	str	r3, [sp, #20]
 801399a:	4619      	mov	r1, r3
 801399c:	f04f 0c0a 	mov.w	ip, #10
 80139a0:	4620      	mov	r0, r4
 80139a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80139a6:	3a30      	subs	r2, #48	; 0x30
 80139a8:	2a09      	cmp	r2, #9
 80139aa:	d903      	bls.n	80139b4 <_svfiprintf_r+0x1a8>
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d0c5      	beq.n	801393c <_svfiprintf_r+0x130>
 80139b0:	9105      	str	r1, [sp, #20]
 80139b2:	e7c3      	b.n	801393c <_svfiprintf_r+0x130>
 80139b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80139b8:	4604      	mov	r4, r0
 80139ba:	2301      	movs	r3, #1
 80139bc:	e7f0      	b.n	80139a0 <_svfiprintf_r+0x194>
 80139be:	ab03      	add	r3, sp, #12
 80139c0:	9300      	str	r3, [sp, #0]
 80139c2:	462a      	mov	r2, r5
 80139c4:	4b0f      	ldr	r3, [pc, #60]	; (8013a04 <_svfiprintf_r+0x1f8>)
 80139c6:	a904      	add	r1, sp, #16
 80139c8:	4638      	mov	r0, r7
 80139ca:	f7fc f993 	bl	800fcf4 <_printf_float>
 80139ce:	1c42      	adds	r2, r0, #1
 80139d0:	4606      	mov	r6, r0
 80139d2:	d1d6      	bne.n	8013982 <_svfiprintf_r+0x176>
 80139d4:	89ab      	ldrh	r3, [r5, #12]
 80139d6:	065b      	lsls	r3, r3, #25
 80139d8:	f53f af2c 	bmi.w	8013834 <_svfiprintf_r+0x28>
 80139dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139de:	b01d      	add	sp, #116	; 0x74
 80139e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139e4:	ab03      	add	r3, sp, #12
 80139e6:	9300      	str	r3, [sp, #0]
 80139e8:	462a      	mov	r2, r5
 80139ea:	4b06      	ldr	r3, [pc, #24]	; (8013a04 <_svfiprintf_r+0x1f8>)
 80139ec:	a904      	add	r1, sp, #16
 80139ee:	4638      	mov	r0, r7
 80139f0:	f7fc fc24 	bl	801023c <_printf_i>
 80139f4:	e7eb      	b.n	80139ce <_svfiprintf_r+0x1c2>
 80139f6:	bf00      	nop
 80139f8:	08015634 	.word	0x08015634
 80139fc:	0801563e 	.word	0x0801563e
 8013a00:	0800fcf5 	.word	0x0800fcf5
 8013a04:	08013755 	.word	0x08013755
 8013a08:	0801563a 	.word	0x0801563a

08013a0c <_sungetc_r>:
 8013a0c:	b538      	push	{r3, r4, r5, lr}
 8013a0e:	1c4b      	adds	r3, r1, #1
 8013a10:	4614      	mov	r4, r2
 8013a12:	d103      	bne.n	8013a1c <_sungetc_r+0x10>
 8013a14:	f04f 35ff 	mov.w	r5, #4294967295
 8013a18:	4628      	mov	r0, r5
 8013a1a:	bd38      	pop	{r3, r4, r5, pc}
 8013a1c:	8993      	ldrh	r3, [r2, #12]
 8013a1e:	f023 0320 	bic.w	r3, r3, #32
 8013a22:	8193      	strh	r3, [r2, #12]
 8013a24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013a26:	6852      	ldr	r2, [r2, #4]
 8013a28:	b2cd      	uxtb	r5, r1
 8013a2a:	b18b      	cbz	r3, 8013a50 <_sungetc_r+0x44>
 8013a2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013a2e:	4293      	cmp	r3, r2
 8013a30:	dd08      	ble.n	8013a44 <_sungetc_r+0x38>
 8013a32:	6823      	ldr	r3, [r4, #0]
 8013a34:	1e5a      	subs	r2, r3, #1
 8013a36:	6022      	str	r2, [r4, #0]
 8013a38:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013a3c:	6863      	ldr	r3, [r4, #4]
 8013a3e:	3301      	adds	r3, #1
 8013a40:	6063      	str	r3, [r4, #4]
 8013a42:	e7e9      	b.n	8013a18 <_sungetc_r+0xc>
 8013a44:	4621      	mov	r1, r4
 8013a46:	f000 fbdb 	bl	8014200 <__submore>
 8013a4a:	2800      	cmp	r0, #0
 8013a4c:	d0f1      	beq.n	8013a32 <_sungetc_r+0x26>
 8013a4e:	e7e1      	b.n	8013a14 <_sungetc_r+0x8>
 8013a50:	6921      	ldr	r1, [r4, #16]
 8013a52:	6823      	ldr	r3, [r4, #0]
 8013a54:	b151      	cbz	r1, 8013a6c <_sungetc_r+0x60>
 8013a56:	4299      	cmp	r1, r3
 8013a58:	d208      	bcs.n	8013a6c <_sungetc_r+0x60>
 8013a5a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013a5e:	42a9      	cmp	r1, r5
 8013a60:	d104      	bne.n	8013a6c <_sungetc_r+0x60>
 8013a62:	3b01      	subs	r3, #1
 8013a64:	3201      	adds	r2, #1
 8013a66:	6023      	str	r3, [r4, #0]
 8013a68:	6062      	str	r2, [r4, #4]
 8013a6a:	e7d5      	b.n	8013a18 <_sungetc_r+0xc>
 8013a6c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a74:	6363      	str	r3, [r4, #52]	; 0x34
 8013a76:	2303      	movs	r3, #3
 8013a78:	63a3      	str	r3, [r4, #56]	; 0x38
 8013a7a:	4623      	mov	r3, r4
 8013a7c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013a80:	6023      	str	r3, [r4, #0]
 8013a82:	2301      	movs	r3, #1
 8013a84:	e7dc      	b.n	8013a40 <_sungetc_r+0x34>

08013a86 <__ssrefill_r>:
 8013a86:	b510      	push	{r4, lr}
 8013a88:	460c      	mov	r4, r1
 8013a8a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013a8c:	b169      	cbz	r1, 8013aaa <__ssrefill_r+0x24>
 8013a8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a92:	4299      	cmp	r1, r3
 8013a94:	d001      	beq.n	8013a9a <__ssrefill_r+0x14>
 8013a96:	f7ff fd7d 	bl	8013594 <_free_r>
 8013a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013a9c:	6063      	str	r3, [r4, #4]
 8013a9e:	2000      	movs	r0, #0
 8013aa0:	6360      	str	r0, [r4, #52]	; 0x34
 8013aa2:	b113      	cbz	r3, 8013aaa <__ssrefill_r+0x24>
 8013aa4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013aa6:	6023      	str	r3, [r4, #0]
 8013aa8:	bd10      	pop	{r4, pc}
 8013aaa:	6923      	ldr	r3, [r4, #16]
 8013aac:	6023      	str	r3, [r4, #0]
 8013aae:	2300      	movs	r3, #0
 8013ab0:	6063      	str	r3, [r4, #4]
 8013ab2:	89a3      	ldrh	r3, [r4, #12]
 8013ab4:	f043 0320 	orr.w	r3, r3, #32
 8013ab8:	81a3      	strh	r3, [r4, #12]
 8013aba:	f04f 30ff 	mov.w	r0, #4294967295
 8013abe:	e7f3      	b.n	8013aa8 <__ssrefill_r+0x22>

08013ac0 <__ssvfiscanf_r>:
 8013ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ac4:	460c      	mov	r4, r1
 8013ac6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013aca:	2100      	movs	r1, #0
 8013acc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8013ad0:	49a6      	ldr	r1, [pc, #664]	; (8013d6c <__ssvfiscanf_r+0x2ac>)
 8013ad2:	91a0      	str	r1, [sp, #640]	; 0x280
 8013ad4:	f10d 0804 	add.w	r8, sp, #4
 8013ad8:	49a5      	ldr	r1, [pc, #660]	; (8013d70 <__ssvfiscanf_r+0x2b0>)
 8013ada:	4fa6      	ldr	r7, [pc, #664]	; (8013d74 <__ssvfiscanf_r+0x2b4>)
 8013adc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8013d78 <__ssvfiscanf_r+0x2b8>
 8013ae0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013ae4:	4606      	mov	r6, r0
 8013ae6:	91a1      	str	r1, [sp, #644]	; 0x284
 8013ae8:	9300      	str	r3, [sp, #0]
 8013aea:	7813      	ldrb	r3, [r2, #0]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	f000 815a 	beq.w	8013da6 <__ssvfiscanf_r+0x2e6>
 8013af2:	5dd9      	ldrb	r1, [r3, r7]
 8013af4:	f011 0108 	ands.w	r1, r1, #8
 8013af8:	f102 0501 	add.w	r5, r2, #1
 8013afc:	d019      	beq.n	8013b32 <__ssvfiscanf_r+0x72>
 8013afe:	6863      	ldr	r3, [r4, #4]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	dd0f      	ble.n	8013b24 <__ssvfiscanf_r+0x64>
 8013b04:	6823      	ldr	r3, [r4, #0]
 8013b06:	781a      	ldrb	r2, [r3, #0]
 8013b08:	5cba      	ldrb	r2, [r7, r2]
 8013b0a:	0712      	lsls	r2, r2, #28
 8013b0c:	d401      	bmi.n	8013b12 <__ssvfiscanf_r+0x52>
 8013b0e:	462a      	mov	r2, r5
 8013b10:	e7eb      	b.n	8013aea <__ssvfiscanf_r+0x2a>
 8013b12:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013b14:	3201      	adds	r2, #1
 8013b16:	9245      	str	r2, [sp, #276]	; 0x114
 8013b18:	6862      	ldr	r2, [r4, #4]
 8013b1a:	3301      	adds	r3, #1
 8013b1c:	3a01      	subs	r2, #1
 8013b1e:	6062      	str	r2, [r4, #4]
 8013b20:	6023      	str	r3, [r4, #0]
 8013b22:	e7ec      	b.n	8013afe <__ssvfiscanf_r+0x3e>
 8013b24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013b26:	4621      	mov	r1, r4
 8013b28:	4630      	mov	r0, r6
 8013b2a:	4798      	blx	r3
 8013b2c:	2800      	cmp	r0, #0
 8013b2e:	d0e9      	beq.n	8013b04 <__ssvfiscanf_r+0x44>
 8013b30:	e7ed      	b.n	8013b0e <__ssvfiscanf_r+0x4e>
 8013b32:	2b25      	cmp	r3, #37	; 0x25
 8013b34:	d012      	beq.n	8013b5c <__ssvfiscanf_r+0x9c>
 8013b36:	469a      	mov	sl, r3
 8013b38:	6863      	ldr	r3, [r4, #4]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	f340 8091 	ble.w	8013c62 <__ssvfiscanf_r+0x1a2>
 8013b40:	6822      	ldr	r2, [r4, #0]
 8013b42:	7813      	ldrb	r3, [r2, #0]
 8013b44:	4553      	cmp	r3, sl
 8013b46:	f040 812e 	bne.w	8013da6 <__ssvfiscanf_r+0x2e6>
 8013b4a:	6863      	ldr	r3, [r4, #4]
 8013b4c:	3b01      	subs	r3, #1
 8013b4e:	6063      	str	r3, [r4, #4]
 8013b50:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8013b52:	3201      	adds	r2, #1
 8013b54:	3301      	adds	r3, #1
 8013b56:	6022      	str	r2, [r4, #0]
 8013b58:	9345      	str	r3, [sp, #276]	; 0x114
 8013b5a:	e7d8      	b.n	8013b0e <__ssvfiscanf_r+0x4e>
 8013b5c:	9141      	str	r1, [sp, #260]	; 0x104
 8013b5e:	9143      	str	r1, [sp, #268]	; 0x10c
 8013b60:	7853      	ldrb	r3, [r2, #1]
 8013b62:	2b2a      	cmp	r3, #42	; 0x2a
 8013b64:	bf02      	ittt	eq
 8013b66:	2310      	moveq	r3, #16
 8013b68:	1c95      	addeq	r5, r2, #2
 8013b6a:	9341      	streq	r3, [sp, #260]	; 0x104
 8013b6c:	220a      	movs	r2, #10
 8013b6e:	46aa      	mov	sl, r5
 8013b70:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8013b74:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013b78:	2b09      	cmp	r3, #9
 8013b7a:	d91d      	bls.n	8013bb8 <__ssvfiscanf_r+0xf8>
 8013b7c:	487e      	ldr	r0, [pc, #504]	; (8013d78 <__ssvfiscanf_r+0x2b8>)
 8013b7e:	2203      	movs	r2, #3
 8013b80:	f7ec fb4e 	bl	8000220 <memchr>
 8013b84:	b140      	cbz	r0, 8013b98 <__ssvfiscanf_r+0xd8>
 8013b86:	2301      	movs	r3, #1
 8013b88:	eba0 0009 	sub.w	r0, r0, r9
 8013b8c:	fa03 f000 	lsl.w	r0, r3, r0
 8013b90:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013b92:	4318      	orrs	r0, r3
 8013b94:	9041      	str	r0, [sp, #260]	; 0x104
 8013b96:	4655      	mov	r5, sl
 8013b98:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013b9c:	2b78      	cmp	r3, #120	; 0x78
 8013b9e:	d806      	bhi.n	8013bae <__ssvfiscanf_r+0xee>
 8013ba0:	2b57      	cmp	r3, #87	; 0x57
 8013ba2:	d810      	bhi.n	8013bc6 <__ssvfiscanf_r+0x106>
 8013ba4:	2b25      	cmp	r3, #37	; 0x25
 8013ba6:	d0c6      	beq.n	8013b36 <__ssvfiscanf_r+0x76>
 8013ba8:	d856      	bhi.n	8013c58 <__ssvfiscanf_r+0x198>
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d064      	beq.n	8013c78 <__ssvfiscanf_r+0x1b8>
 8013bae:	2303      	movs	r3, #3
 8013bb0:	9347      	str	r3, [sp, #284]	; 0x11c
 8013bb2:	230a      	movs	r3, #10
 8013bb4:	9342      	str	r3, [sp, #264]	; 0x108
 8013bb6:	e071      	b.n	8013c9c <__ssvfiscanf_r+0x1dc>
 8013bb8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013bba:	fb02 1103 	mla	r1, r2, r3, r1
 8013bbe:	3930      	subs	r1, #48	; 0x30
 8013bc0:	9143      	str	r1, [sp, #268]	; 0x10c
 8013bc2:	4655      	mov	r5, sl
 8013bc4:	e7d3      	b.n	8013b6e <__ssvfiscanf_r+0xae>
 8013bc6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013bca:	2a20      	cmp	r2, #32
 8013bcc:	d8ef      	bhi.n	8013bae <__ssvfiscanf_r+0xee>
 8013bce:	a101      	add	r1, pc, #4	; (adr r1, 8013bd4 <__ssvfiscanf_r+0x114>)
 8013bd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013bd4:	08013c87 	.word	0x08013c87
 8013bd8:	08013baf 	.word	0x08013baf
 8013bdc:	08013baf 	.word	0x08013baf
 8013be0:	08013ce5 	.word	0x08013ce5
 8013be4:	08013baf 	.word	0x08013baf
 8013be8:	08013baf 	.word	0x08013baf
 8013bec:	08013baf 	.word	0x08013baf
 8013bf0:	08013baf 	.word	0x08013baf
 8013bf4:	08013baf 	.word	0x08013baf
 8013bf8:	08013baf 	.word	0x08013baf
 8013bfc:	08013baf 	.word	0x08013baf
 8013c00:	08013cfb 	.word	0x08013cfb
 8013c04:	08013cd1 	.word	0x08013cd1
 8013c08:	08013c5f 	.word	0x08013c5f
 8013c0c:	08013c5f 	.word	0x08013c5f
 8013c10:	08013c5f 	.word	0x08013c5f
 8013c14:	08013baf 	.word	0x08013baf
 8013c18:	08013cd5 	.word	0x08013cd5
 8013c1c:	08013baf 	.word	0x08013baf
 8013c20:	08013baf 	.word	0x08013baf
 8013c24:	08013baf 	.word	0x08013baf
 8013c28:	08013baf 	.word	0x08013baf
 8013c2c:	08013d0b 	.word	0x08013d0b
 8013c30:	08013cdd 	.word	0x08013cdd
 8013c34:	08013c7f 	.word	0x08013c7f
 8013c38:	08013baf 	.word	0x08013baf
 8013c3c:	08013baf 	.word	0x08013baf
 8013c40:	08013d07 	.word	0x08013d07
 8013c44:	08013baf 	.word	0x08013baf
 8013c48:	08013cd1 	.word	0x08013cd1
 8013c4c:	08013baf 	.word	0x08013baf
 8013c50:	08013baf 	.word	0x08013baf
 8013c54:	08013c87 	.word	0x08013c87
 8013c58:	3b45      	subs	r3, #69	; 0x45
 8013c5a:	2b02      	cmp	r3, #2
 8013c5c:	d8a7      	bhi.n	8013bae <__ssvfiscanf_r+0xee>
 8013c5e:	2305      	movs	r3, #5
 8013c60:	e01b      	b.n	8013c9a <__ssvfiscanf_r+0x1da>
 8013c62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013c64:	4621      	mov	r1, r4
 8013c66:	4630      	mov	r0, r6
 8013c68:	4798      	blx	r3
 8013c6a:	2800      	cmp	r0, #0
 8013c6c:	f43f af68 	beq.w	8013b40 <__ssvfiscanf_r+0x80>
 8013c70:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013c72:	2800      	cmp	r0, #0
 8013c74:	f040 808d 	bne.w	8013d92 <__ssvfiscanf_r+0x2d2>
 8013c78:	f04f 30ff 	mov.w	r0, #4294967295
 8013c7c:	e08f      	b.n	8013d9e <__ssvfiscanf_r+0x2de>
 8013c7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013c80:	f042 0220 	orr.w	r2, r2, #32
 8013c84:	9241      	str	r2, [sp, #260]	; 0x104
 8013c86:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013c8c:	9241      	str	r2, [sp, #260]	; 0x104
 8013c8e:	2210      	movs	r2, #16
 8013c90:	2b6f      	cmp	r3, #111	; 0x6f
 8013c92:	9242      	str	r2, [sp, #264]	; 0x108
 8013c94:	bf34      	ite	cc
 8013c96:	2303      	movcc	r3, #3
 8013c98:	2304      	movcs	r3, #4
 8013c9a:	9347      	str	r3, [sp, #284]	; 0x11c
 8013c9c:	6863      	ldr	r3, [r4, #4]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	dd42      	ble.n	8013d28 <__ssvfiscanf_r+0x268>
 8013ca2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013ca4:	0659      	lsls	r1, r3, #25
 8013ca6:	d404      	bmi.n	8013cb2 <__ssvfiscanf_r+0x1f2>
 8013ca8:	6823      	ldr	r3, [r4, #0]
 8013caa:	781a      	ldrb	r2, [r3, #0]
 8013cac:	5cba      	ldrb	r2, [r7, r2]
 8013cae:	0712      	lsls	r2, r2, #28
 8013cb0:	d441      	bmi.n	8013d36 <__ssvfiscanf_r+0x276>
 8013cb2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013cb4:	2b02      	cmp	r3, #2
 8013cb6:	dc50      	bgt.n	8013d5a <__ssvfiscanf_r+0x29a>
 8013cb8:	466b      	mov	r3, sp
 8013cba:	4622      	mov	r2, r4
 8013cbc:	a941      	add	r1, sp, #260	; 0x104
 8013cbe:	4630      	mov	r0, r6
 8013cc0:	f000 f876 	bl	8013db0 <_scanf_chars>
 8013cc4:	2801      	cmp	r0, #1
 8013cc6:	d06e      	beq.n	8013da6 <__ssvfiscanf_r+0x2e6>
 8013cc8:	2802      	cmp	r0, #2
 8013cca:	f47f af20 	bne.w	8013b0e <__ssvfiscanf_r+0x4e>
 8013cce:	e7cf      	b.n	8013c70 <__ssvfiscanf_r+0x1b0>
 8013cd0:	220a      	movs	r2, #10
 8013cd2:	e7dd      	b.n	8013c90 <__ssvfiscanf_r+0x1d0>
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	9342      	str	r3, [sp, #264]	; 0x108
 8013cd8:	2303      	movs	r3, #3
 8013cda:	e7de      	b.n	8013c9a <__ssvfiscanf_r+0x1da>
 8013cdc:	2308      	movs	r3, #8
 8013cde:	9342      	str	r3, [sp, #264]	; 0x108
 8013ce0:	2304      	movs	r3, #4
 8013ce2:	e7da      	b.n	8013c9a <__ssvfiscanf_r+0x1da>
 8013ce4:	4629      	mov	r1, r5
 8013ce6:	4640      	mov	r0, r8
 8013ce8:	f000 f9de 	bl	80140a8 <__sccl>
 8013cec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cf2:	9341      	str	r3, [sp, #260]	; 0x104
 8013cf4:	4605      	mov	r5, r0
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	e7cf      	b.n	8013c9a <__ssvfiscanf_r+0x1da>
 8013cfa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d00:	9341      	str	r3, [sp, #260]	; 0x104
 8013d02:	2300      	movs	r3, #0
 8013d04:	e7c9      	b.n	8013c9a <__ssvfiscanf_r+0x1da>
 8013d06:	2302      	movs	r3, #2
 8013d08:	e7c7      	b.n	8013c9a <__ssvfiscanf_r+0x1da>
 8013d0a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013d0c:	06c3      	lsls	r3, r0, #27
 8013d0e:	f53f aefe 	bmi.w	8013b0e <__ssvfiscanf_r+0x4e>
 8013d12:	9b00      	ldr	r3, [sp, #0]
 8013d14:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013d16:	1d19      	adds	r1, r3, #4
 8013d18:	9100      	str	r1, [sp, #0]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	f010 0f01 	tst.w	r0, #1
 8013d20:	bf14      	ite	ne
 8013d22:	801a      	strhne	r2, [r3, #0]
 8013d24:	601a      	streq	r2, [r3, #0]
 8013d26:	e6f2      	b.n	8013b0e <__ssvfiscanf_r+0x4e>
 8013d28:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013d2a:	4621      	mov	r1, r4
 8013d2c:	4630      	mov	r0, r6
 8013d2e:	4798      	blx	r3
 8013d30:	2800      	cmp	r0, #0
 8013d32:	d0b6      	beq.n	8013ca2 <__ssvfiscanf_r+0x1e2>
 8013d34:	e79c      	b.n	8013c70 <__ssvfiscanf_r+0x1b0>
 8013d36:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013d38:	3201      	adds	r2, #1
 8013d3a:	9245      	str	r2, [sp, #276]	; 0x114
 8013d3c:	6862      	ldr	r2, [r4, #4]
 8013d3e:	3a01      	subs	r2, #1
 8013d40:	2a00      	cmp	r2, #0
 8013d42:	6062      	str	r2, [r4, #4]
 8013d44:	dd02      	ble.n	8013d4c <__ssvfiscanf_r+0x28c>
 8013d46:	3301      	adds	r3, #1
 8013d48:	6023      	str	r3, [r4, #0]
 8013d4a:	e7ad      	b.n	8013ca8 <__ssvfiscanf_r+0x1e8>
 8013d4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013d4e:	4621      	mov	r1, r4
 8013d50:	4630      	mov	r0, r6
 8013d52:	4798      	blx	r3
 8013d54:	2800      	cmp	r0, #0
 8013d56:	d0a7      	beq.n	8013ca8 <__ssvfiscanf_r+0x1e8>
 8013d58:	e78a      	b.n	8013c70 <__ssvfiscanf_r+0x1b0>
 8013d5a:	2b04      	cmp	r3, #4
 8013d5c:	dc0e      	bgt.n	8013d7c <__ssvfiscanf_r+0x2bc>
 8013d5e:	466b      	mov	r3, sp
 8013d60:	4622      	mov	r2, r4
 8013d62:	a941      	add	r1, sp, #260	; 0x104
 8013d64:	4630      	mov	r0, r6
 8013d66:	f000 f87d 	bl	8013e64 <_scanf_i>
 8013d6a:	e7ab      	b.n	8013cc4 <__ssvfiscanf_r+0x204>
 8013d6c:	08013a0d 	.word	0x08013a0d
 8013d70:	08013a87 	.word	0x08013a87
 8013d74:	080152d1 	.word	0x080152d1
 8013d78:	0801563a 	.word	0x0801563a
 8013d7c:	4b0b      	ldr	r3, [pc, #44]	; (8013dac <__ssvfiscanf_r+0x2ec>)
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	f43f aec5 	beq.w	8013b0e <__ssvfiscanf_r+0x4e>
 8013d84:	466b      	mov	r3, sp
 8013d86:	4622      	mov	r2, r4
 8013d88:	a941      	add	r1, sp, #260	; 0x104
 8013d8a:	4630      	mov	r0, r6
 8013d8c:	f7fc fb7c 	bl	8010488 <_scanf_float>
 8013d90:	e798      	b.n	8013cc4 <__ssvfiscanf_r+0x204>
 8013d92:	89a3      	ldrh	r3, [r4, #12]
 8013d94:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013d98:	bf18      	it	ne
 8013d9a:	f04f 30ff 	movne.w	r0, #4294967295
 8013d9e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8013da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013da6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013da8:	e7f9      	b.n	8013d9e <__ssvfiscanf_r+0x2de>
 8013daa:	bf00      	nop
 8013dac:	08010489 	.word	0x08010489

08013db0 <_scanf_chars>:
 8013db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013db4:	4615      	mov	r5, r2
 8013db6:	688a      	ldr	r2, [r1, #8]
 8013db8:	4680      	mov	r8, r0
 8013dba:	460c      	mov	r4, r1
 8013dbc:	b932      	cbnz	r2, 8013dcc <_scanf_chars+0x1c>
 8013dbe:	698a      	ldr	r2, [r1, #24]
 8013dc0:	2a00      	cmp	r2, #0
 8013dc2:	bf0c      	ite	eq
 8013dc4:	2201      	moveq	r2, #1
 8013dc6:	f04f 32ff 	movne.w	r2, #4294967295
 8013dca:	608a      	str	r2, [r1, #8]
 8013dcc:	6822      	ldr	r2, [r4, #0]
 8013dce:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8013e60 <_scanf_chars+0xb0>
 8013dd2:	06d1      	lsls	r1, r2, #27
 8013dd4:	bf5f      	itttt	pl
 8013dd6:	681a      	ldrpl	r2, [r3, #0]
 8013dd8:	1d11      	addpl	r1, r2, #4
 8013dda:	6019      	strpl	r1, [r3, #0]
 8013ddc:	6816      	ldrpl	r6, [r2, #0]
 8013dde:	2700      	movs	r7, #0
 8013de0:	69a0      	ldr	r0, [r4, #24]
 8013de2:	b188      	cbz	r0, 8013e08 <_scanf_chars+0x58>
 8013de4:	2801      	cmp	r0, #1
 8013de6:	d107      	bne.n	8013df8 <_scanf_chars+0x48>
 8013de8:	682a      	ldr	r2, [r5, #0]
 8013dea:	7811      	ldrb	r1, [r2, #0]
 8013dec:	6962      	ldr	r2, [r4, #20]
 8013dee:	5c52      	ldrb	r2, [r2, r1]
 8013df0:	b952      	cbnz	r2, 8013e08 <_scanf_chars+0x58>
 8013df2:	2f00      	cmp	r7, #0
 8013df4:	d031      	beq.n	8013e5a <_scanf_chars+0xaa>
 8013df6:	e022      	b.n	8013e3e <_scanf_chars+0x8e>
 8013df8:	2802      	cmp	r0, #2
 8013dfa:	d120      	bne.n	8013e3e <_scanf_chars+0x8e>
 8013dfc:	682b      	ldr	r3, [r5, #0]
 8013dfe:	781b      	ldrb	r3, [r3, #0]
 8013e00:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013e04:	071b      	lsls	r3, r3, #28
 8013e06:	d41a      	bmi.n	8013e3e <_scanf_chars+0x8e>
 8013e08:	6823      	ldr	r3, [r4, #0]
 8013e0a:	06da      	lsls	r2, r3, #27
 8013e0c:	bf5e      	ittt	pl
 8013e0e:	682b      	ldrpl	r3, [r5, #0]
 8013e10:	781b      	ldrbpl	r3, [r3, #0]
 8013e12:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013e16:	682a      	ldr	r2, [r5, #0]
 8013e18:	686b      	ldr	r3, [r5, #4]
 8013e1a:	3201      	adds	r2, #1
 8013e1c:	602a      	str	r2, [r5, #0]
 8013e1e:	68a2      	ldr	r2, [r4, #8]
 8013e20:	3b01      	subs	r3, #1
 8013e22:	3a01      	subs	r2, #1
 8013e24:	606b      	str	r3, [r5, #4]
 8013e26:	3701      	adds	r7, #1
 8013e28:	60a2      	str	r2, [r4, #8]
 8013e2a:	b142      	cbz	r2, 8013e3e <_scanf_chars+0x8e>
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	dcd7      	bgt.n	8013de0 <_scanf_chars+0x30>
 8013e30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013e34:	4629      	mov	r1, r5
 8013e36:	4640      	mov	r0, r8
 8013e38:	4798      	blx	r3
 8013e3a:	2800      	cmp	r0, #0
 8013e3c:	d0d0      	beq.n	8013de0 <_scanf_chars+0x30>
 8013e3e:	6823      	ldr	r3, [r4, #0]
 8013e40:	f013 0310 	ands.w	r3, r3, #16
 8013e44:	d105      	bne.n	8013e52 <_scanf_chars+0xa2>
 8013e46:	68e2      	ldr	r2, [r4, #12]
 8013e48:	3201      	adds	r2, #1
 8013e4a:	60e2      	str	r2, [r4, #12]
 8013e4c:	69a2      	ldr	r2, [r4, #24]
 8013e4e:	b102      	cbz	r2, 8013e52 <_scanf_chars+0xa2>
 8013e50:	7033      	strb	r3, [r6, #0]
 8013e52:	6923      	ldr	r3, [r4, #16]
 8013e54:	443b      	add	r3, r7
 8013e56:	6123      	str	r3, [r4, #16]
 8013e58:	2000      	movs	r0, #0
 8013e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e5e:	bf00      	nop
 8013e60:	080152d1 	.word	0x080152d1

08013e64 <_scanf_i>:
 8013e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e68:	4698      	mov	r8, r3
 8013e6a:	4b76      	ldr	r3, [pc, #472]	; (8014044 <_scanf_i+0x1e0>)
 8013e6c:	460c      	mov	r4, r1
 8013e6e:	4682      	mov	sl, r0
 8013e70:	4616      	mov	r6, r2
 8013e72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013e76:	b087      	sub	sp, #28
 8013e78:	ab03      	add	r3, sp, #12
 8013e7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013e7e:	4b72      	ldr	r3, [pc, #456]	; (8014048 <_scanf_i+0x1e4>)
 8013e80:	69a1      	ldr	r1, [r4, #24]
 8013e82:	4a72      	ldr	r2, [pc, #456]	; (801404c <_scanf_i+0x1e8>)
 8013e84:	2903      	cmp	r1, #3
 8013e86:	bf18      	it	ne
 8013e88:	461a      	movne	r2, r3
 8013e8a:	68a3      	ldr	r3, [r4, #8]
 8013e8c:	9201      	str	r2, [sp, #4]
 8013e8e:	1e5a      	subs	r2, r3, #1
 8013e90:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013e94:	bf88      	it	hi
 8013e96:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013e9a:	4627      	mov	r7, r4
 8013e9c:	bf82      	ittt	hi
 8013e9e:	eb03 0905 	addhi.w	r9, r3, r5
 8013ea2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013ea6:	60a3      	strhi	r3, [r4, #8]
 8013ea8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013eac:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013eb0:	bf98      	it	ls
 8013eb2:	f04f 0900 	movls.w	r9, #0
 8013eb6:	6023      	str	r3, [r4, #0]
 8013eb8:	463d      	mov	r5, r7
 8013eba:	f04f 0b00 	mov.w	fp, #0
 8013ebe:	6831      	ldr	r1, [r6, #0]
 8013ec0:	ab03      	add	r3, sp, #12
 8013ec2:	7809      	ldrb	r1, [r1, #0]
 8013ec4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013ec8:	2202      	movs	r2, #2
 8013eca:	f7ec f9a9 	bl	8000220 <memchr>
 8013ece:	b328      	cbz	r0, 8013f1c <_scanf_i+0xb8>
 8013ed0:	f1bb 0f01 	cmp.w	fp, #1
 8013ed4:	d159      	bne.n	8013f8a <_scanf_i+0x126>
 8013ed6:	6862      	ldr	r2, [r4, #4]
 8013ed8:	b92a      	cbnz	r2, 8013ee6 <_scanf_i+0x82>
 8013eda:	6822      	ldr	r2, [r4, #0]
 8013edc:	2308      	movs	r3, #8
 8013ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013ee2:	6063      	str	r3, [r4, #4]
 8013ee4:	6022      	str	r2, [r4, #0]
 8013ee6:	6822      	ldr	r2, [r4, #0]
 8013ee8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013eec:	6022      	str	r2, [r4, #0]
 8013eee:	68a2      	ldr	r2, [r4, #8]
 8013ef0:	1e51      	subs	r1, r2, #1
 8013ef2:	60a1      	str	r1, [r4, #8]
 8013ef4:	b192      	cbz	r2, 8013f1c <_scanf_i+0xb8>
 8013ef6:	6832      	ldr	r2, [r6, #0]
 8013ef8:	1c51      	adds	r1, r2, #1
 8013efa:	6031      	str	r1, [r6, #0]
 8013efc:	7812      	ldrb	r2, [r2, #0]
 8013efe:	f805 2b01 	strb.w	r2, [r5], #1
 8013f02:	6872      	ldr	r2, [r6, #4]
 8013f04:	3a01      	subs	r2, #1
 8013f06:	2a00      	cmp	r2, #0
 8013f08:	6072      	str	r2, [r6, #4]
 8013f0a:	dc07      	bgt.n	8013f1c <_scanf_i+0xb8>
 8013f0c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013f10:	4631      	mov	r1, r6
 8013f12:	4650      	mov	r0, sl
 8013f14:	4790      	blx	r2
 8013f16:	2800      	cmp	r0, #0
 8013f18:	f040 8085 	bne.w	8014026 <_scanf_i+0x1c2>
 8013f1c:	f10b 0b01 	add.w	fp, fp, #1
 8013f20:	f1bb 0f03 	cmp.w	fp, #3
 8013f24:	d1cb      	bne.n	8013ebe <_scanf_i+0x5a>
 8013f26:	6863      	ldr	r3, [r4, #4]
 8013f28:	b90b      	cbnz	r3, 8013f2e <_scanf_i+0xca>
 8013f2a:	230a      	movs	r3, #10
 8013f2c:	6063      	str	r3, [r4, #4]
 8013f2e:	6863      	ldr	r3, [r4, #4]
 8013f30:	4947      	ldr	r1, [pc, #284]	; (8014050 <_scanf_i+0x1ec>)
 8013f32:	6960      	ldr	r0, [r4, #20]
 8013f34:	1ac9      	subs	r1, r1, r3
 8013f36:	f000 f8b7 	bl	80140a8 <__sccl>
 8013f3a:	f04f 0b00 	mov.w	fp, #0
 8013f3e:	68a3      	ldr	r3, [r4, #8]
 8013f40:	6822      	ldr	r2, [r4, #0]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d03d      	beq.n	8013fc2 <_scanf_i+0x15e>
 8013f46:	6831      	ldr	r1, [r6, #0]
 8013f48:	6960      	ldr	r0, [r4, #20]
 8013f4a:	f891 c000 	ldrb.w	ip, [r1]
 8013f4e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013f52:	2800      	cmp	r0, #0
 8013f54:	d035      	beq.n	8013fc2 <_scanf_i+0x15e>
 8013f56:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013f5a:	d124      	bne.n	8013fa6 <_scanf_i+0x142>
 8013f5c:	0510      	lsls	r0, r2, #20
 8013f5e:	d522      	bpl.n	8013fa6 <_scanf_i+0x142>
 8013f60:	f10b 0b01 	add.w	fp, fp, #1
 8013f64:	f1b9 0f00 	cmp.w	r9, #0
 8013f68:	d003      	beq.n	8013f72 <_scanf_i+0x10e>
 8013f6a:	3301      	adds	r3, #1
 8013f6c:	f109 39ff 	add.w	r9, r9, #4294967295
 8013f70:	60a3      	str	r3, [r4, #8]
 8013f72:	6873      	ldr	r3, [r6, #4]
 8013f74:	3b01      	subs	r3, #1
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	6073      	str	r3, [r6, #4]
 8013f7a:	dd1b      	ble.n	8013fb4 <_scanf_i+0x150>
 8013f7c:	6833      	ldr	r3, [r6, #0]
 8013f7e:	3301      	adds	r3, #1
 8013f80:	6033      	str	r3, [r6, #0]
 8013f82:	68a3      	ldr	r3, [r4, #8]
 8013f84:	3b01      	subs	r3, #1
 8013f86:	60a3      	str	r3, [r4, #8]
 8013f88:	e7d9      	b.n	8013f3e <_scanf_i+0xda>
 8013f8a:	f1bb 0f02 	cmp.w	fp, #2
 8013f8e:	d1ae      	bne.n	8013eee <_scanf_i+0x8a>
 8013f90:	6822      	ldr	r2, [r4, #0]
 8013f92:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013f96:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013f9a:	d1bf      	bne.n	8013f1c <_scanf_i+0xb8>
 8013f9c:	2310      	movs	r3, #16
 8013f9e:	6063      	str	r3, [r4, #4]
 8013fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013fa4:	e7a2      	b.n	8013eec <_scanf_i+0x88>
 8013fa6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013faa:	6022      	str	r2, [r4, #0]
 8013fac:	780b      	ldrb	r3, [r1, #0]
 8013fae:	f805 3b01 	strb.w	r3, [r5], #1
 8013fb2:	e7de      	b.n	8013f72 <_scanf_i+0x10e>
 8013fb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013fb8:	4631      	mov	r1, r6
 8013fba:	4650      	mov	r0, sl
 8013fbc:	4798      	blx	r3
 8013fbe:	2800      	cmp	r0, #0
 8013fc0:	d0df      	beq.n	8013f82 <_scanf_i+0x11e>
 8013fc2:	6823      	ldr	r3, [r4, #0]
 8013fc4:	05db      	lsls	r3, r3, #23
 8013fc6:	d50d      	bpl.n	8013fe4 <_scanf_i+0x180>
 8013fc8:	42bd      	cmp	r5, r7
 8013fca:	d909      	bls.n	8013fe0 <_scanf_i+0x17c>
 8013fcc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013fd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013fd4:	4632      	mov	r2, r6
 8013fd6:	4650      	mov	r0, sl
 8013fd8:	4798      	blx	r3
 8013fda:	f105 39ff 	add.w	r9, r5, #4294967295
 8013fde:	464d      	mov	r5, r9
 8013fe0:	42bd      	cmp	r5, r7
 8013fe2:	d02d      	beq.n	8014040 <_scanf_i+0x1dc>
 8013fe4:	6822      	ldr	r2, [r4, #0]
 8013fe6:	f012 0210 	ands.w	r2, r2, #16
 8013fea:	d113      	bne.n	8014014 <_scanf_i+0x1b0>
 8013fec:	702a      	strb	r2, [r5, #0]
 8013fee:	6863      	ldr	r3, [r4, #4]
 8013ff0:	9e01      	ldr	r6, [sp, #4]
 8013ff2:	4639      	mov	r1, r7
 8013ff4:	4650      	mov	r0, sl
 8013ff6:	47b0      	blx	r6
 8013ff8:	6821      	ldr	r1, [r4, #0]
 8013ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8013ffe:	f011 0f20 	tst.w	r1, #32
 8014002:	d013      	beq.n	801402c <_scanf_i+0x1c8>
 8014004:	1d1a      	adds	r2, r3, #4
 8014006:	f8c8 2000 	str.w	r2, [r8]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	6018      	str	r0, [r3, #0]
 801400e:	68e3      	ldr	r3, [r4, #12]
 8014010:	3301      	adds	r3, #1
 8014012:	60e3      	str	r3, [r4, #12]
 8014014:	1bed      	subs	r5, r5, r7
 8014016:	44ab      	add	fp, r5
 8014018:	6925      	ldr	r5, [r4, #16]
 801401a:	445d      	add	r5, fp
 801401c:	6125      	str	r5, [r4, #16]
 801401e:	2000      	movs	r0, #0
 8014020:	b007      	add	sp, #28
 8014022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014026:	f04f 0b00 	mov.w	fp, #0
 801402a:	e7ca      	b.n	8013fc2 <_scanf_i+0x15e>
 801402c:	1d1a      	adds	r2, r3, #4
 801402e:	f8c8 2000 	str.w	r2, [r8]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	f011 0f01 	tst.w	r1, #1
 8014038:	bf14      	ite	ne
 801403a:	8018      	strhne	r0, [r3, #0]
 801403c:	6018      	streq	r0, [r3, #0]
 801403e:	e7e6      	b.n	801400e <_scanf_i+0x1aa>
 8014040:	2001      	movs	r0, #1
 8014042:	e7ed      	b.n	8014020 <_scanf_i+0x1bc>
 8014044:	08015220 	.word	0x08015220
 8014048:	080141fd 	.word	0x080141fd
 801404c:	08011765 	.word	0x08011765
 8014050:	0801565e 	.word	0x0801565e

08014054 <_read_r>:
 8014054:	b538      	push	{r3, r4, r5, lr}
 8014056:	4d07      	ldr	r5, [pc, #28]	; (8014074 <_read_r+0x20>)
 8014058:	4604      	mov	r4, r0
 801405a:	4608      	mov	r0, r1
 801405c:	4611      	mov	r1, r2
 801405e:	2200      	movs	r2, #0
 8014060:	602a      	str	r2, [r5, #0]
 8014062:	461a      	mov	r2, r3
 8014064:	f7ee fc36 	bl	80028d4 <_read>
 8014068:	1c43      	adds	r3, r0, #1
 801406a:	d102      	bne.n	8014072 <_read_r+0x1e>
 801406c:	682b      	ldr	r3, [r5, #0]
 801406e:	b103      	cbz	r3, 8014072 <_read_r+0x1e>
 8014070:	6023      	str	r3, [r4, #0]
 8014072:	bd38      	pop	{r3, r4, r5, pc}
 8014074:	20000770 	.word	0x20000770

08014078 <nan>:
 8014078:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014080 <nan+0x8>
 801407c:	4770      	bx	lr
 801407e:	bf00      	nop
 8014080:	00000000 	.word	0x00000000
 8014084:	7ff80000 	.word	0x7ff80000

08014088 <_sbrk_r>:
 8014088:	b538      	push	{r3, r4, r5, lr}
 801408a:	4d06      	ldr	r5, [pc, #24]	; (80140a4 <_sbrk_r+0x1c>)
 801408c:	2300      	movs	r3, #0
 801408e:	4604      	mov	r4, r0
 8014090:	4608      	mov	r0, r1
 8014092:	602b      	str	r3, [r5, #0]
 8014094:	f7ee fc8c 	bl	80029b0 <_sbrk>
 8014098:	1c43      	adds	r3, r0, #1
 801409a:	d102      	bne.n	80140a2 <_sbrk_r+0x1a>
 801409c:	682b      	ldr	r3, [r5, #0]
 801409e:	b103      	cbz	r3, 80140a2 <_sbrk_r+0x1a>
 80140a0:	6023      	str	r3, [r4, #0]
 80140a2:	bd38      	pop	{r3, r4, r5, pc}
 80140a4:	20000770 	.word	0x20000770

080140a8 <__sccl>:
 80140a8:	b570      	push	{r4, r5, r6, lr}
 80140aa:	780b      	ldrb	r3, [r1, #0]
 80140ac:	4604      	mov	r4, r0
 80140ae:	2b5e      	cmp	r3, #94	; 0x5e
 80140b0:	bf0b      	itete	eq
 80140b2:	784b      	ldrbeq	r3, [r1, #1]
 80140b4:	1c48      	addne	r0, r1, #1
 80140b6:	1c88      	addeq	r0, r1, #2
 80140b8:	2200      	movne	r2, #0
 80140ba:	bf08      	it	eq
 80140bc:	2201      	moveq	r2, #1
 80140be:	1e61      	subs	r1, r4, #1
 80140c0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80140c4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80140c8:	42a9      	cmp	r1, r5
 80140ca:	d1fb      	bne.n	80140c4 <__sccl+0x1c>
 80140cc:	b90b      	cbnz	r3, 80140d2 <__sccl+0x2a>
 80140ce:	3801      	subs	r0, #1
 80140d0:	bd70      	pop	{r4, r5, r6, pc}
 80140d2:	f082 0201 	eor.w	r2, r2, #1
 80140d6:	54e2      	strb	r2, [r4, r3]
 80140d8:	4605      	mov	r5, r0
 80140da:	4628      	mov	r0, r5
 80140dc:	f810 1b01 	ldrb.w	r1, [r0], #1
 80140e0:	292d      	cmp	r1, #45	; 0x2d
 80140e2:	d006      	beq.n	80140f2 <__sccl+0x4a>
 80140e4:	295d      	cmp	r1, #93	; 0x5d
 80140e6:	d0f3      	beq.n	80140d0 <__sccl+0x28>
 80140e8:	b909      	cbnz	r1, 80140ee <__sccl+0x46>
 80140ea:	4628      	mov	r0, r5
 80140ec:	e7f0      	b.n	80140d0 <__sccl+0x28>
 80140ee:	460b      	mov	r3, r1
 80140f0:	e7f1      	b.n	80140d6 <__sccl+0x2e>
 80140f2:	786e      	ldrb	r6, [r5, #1]
 80140f4:	2e5d      	cmp	r6, #93	; 0x5d
 80140f6:	d0fa      	beq.n	80140ee <__sccl+0x46>
 80140f8:	42b3      	cmp	r3, r6
 80140fa:	dcf8      	bgt.n	80140ee <__sccl+0x46>
 80140fc:	3502      	adds	r5, #2
 80140fe:	4619      	mov	r1, r3
 8014100:	3101      	adds	r1, #1
 8014102:	428e      	cmp	r6, r1
 8014104:	5462      	strb	r2, [r4, r1]
 8014106:	dcfb      	bgt.n	8014100 <__sccl+0x58>
 8014108:	1af1      	subs	r1, r6, r3
 801410a:	3901      	subs	r1, #1
 801410c:	1c58      	adds	r0, r3, #1
 801410e:	42b3      	cmp	r3, r6
 8014110:	bfa8      	it	ge
 8014112:	2100      	movge	r1, #0
 8014114:	1843      	adds	r3, r0, r1
 8014116:	e7e0      	b.n	80140da <__sccl+0x32>

08014118 <_strtoul_l.constprop.0>:
 8014118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801411c:	4f36      	ldr	r7, [pc, #216]	; (80141f8 <_strtoul_l.constprop.0+0xe0>)
 801411e:	4686      	mov	lr, r0
 8014120:	460d      	mov	r5, r1
 8014122:	4628      	mov	r0, r5
 8014124:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014128:	5de6      	ldrb	r6, [r4, r7]
 801412a:	f016 0608 	ands.w	r6, r6, #8
 801412e:	d1f8      	bne.n	8014122 <_strtoul_l.constprop.0+0xa>
 8014130:	2c2d      	cmp	r4, #45	; 0x2d
 8014132:	d12f      	bne.n	8014194 <_strtoul_l.constprop.0+0x7c>
 8014134:	782c      	ldrb	r4, [r5, #0]
 8014136:	2601      	movs	r6, #1
 8014138:	1c85      	adds	r5, r0, #2
 801413a:	2b00      	cmp	r3, #0
 801413c:	d057      	beq.n	80141ee <_strtoul_l.constprop.0+0xd6>
 801413e:	2b10      	cmp	r3, #16
 8014140:	d109      	bne.n	8014156 <_strtoul_l.constprop.0+0x3e>
 8014142:	2c30      	cmp	r4, #48	; 0x30
 8014144:	d107      	bne.n	8014156 <_strtoul_l.constprop.0+0x3e>
 8014146:	7828      	ldrb	r0, [r5, #0]
 8014148:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801414c:	2858      	cmp	r0, #88	; 0x58
 801414e:	d149      	bne.n	80141e4 <_strtoul_l.constprop.0+0xcc>
 8014150:	786c      	ldrb	r4, [r5, #1]
 8014152:	2310      	movs	r3, #16
 8014154:	3502      	adds	r5, #2
 8014156:	f04f 38ff 	mov.w	r8, #4294967295
 801415a:	2700      	movs	r7, #0
 801415c:	fbb8 f8f3 	udiv	r8, r8, r3
 8014160:	fb03 f908 	mul.w	r9, r3, r8
 8014164:	ea6f 0909 	mvn.w	r9, r9
 8014168:	4638      	mov	r0, r7
 801416a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801416e:	f1bc 0f09 	cmp.w	ip, #9
 8014172:	d814      	bhi.n	801419e <_strtoul_l.constprop.0+0x86>
 8014174:	4664      	mov	r4, ip
 8014176:	42a3      	cmp	r3, r4
 8014178:	dd22      	ble.n	80141c0 <_strtoul_l.constprop.0+0xa8>
 801417a:	2f00      	cmp	r7, #0
 801417c:	db1d      	blt.n	80141ba <_strtoul_l.constprop.0+0xa2>
 801417e:	4580      	cmp	r8, r0
 8014180:	d31b      	bcc.n	80141ba <_strtoul_l.constprop.0+0xa2>
 8014182:	d101      	bne.n	8014188 <_strtoul_l.constprop.0+0x70>
 8014184:	45a1      	cmp	r9, r4
 8014186:	db18      	blt.n	80141ba <_strtoul_l.constprop.0+0xa2>
 8014188:	fb00 4003 	mla	r0, r0, r3, r4
 801418c:	2701      	movs	r7, #1
 801418e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014192:	e7ea      	b.n	801416a <_strtoul_l.constprop.0+0x52>
 8014194:	2c2b      	cmp	r4, #43	; 0x2b
 8014196:	bf04      	itt	eq
 8014198:	782c      	ldrbeq	r4, [r5, #0]
 801419a:	1c85      	addeq	r5, r0, #2
 801419c:	e7cd      	b.n	801413a <_strtoul_l.constprop.0+0x22>
 801419e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80141a2:	f1bc 0f19 	cmp.w	ip, #25
 80141a6:	d801      	bhi.n	80141ac <_strtoul_l.constprop.0+0x94>
 80141a8:	3c37      	subs	r4, #55	; 0x37
 80141aa:	e7e4      	b.n	8014176 <_strtoul_l.constprop.0+0x5e>
 80141ac:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80141b0:	f1bc 0f19 	cmp.w	ip, #25
 80141b4:	d804      	bhi.n	80141c0 <_strtoul_l.constprop.0+0xa8>
 80141b6:	3c57      	subs	r4, #87	; 0x57
 80141b8:	e7dd      	b.n	8014176 <_strtoul_l.constprop.0+0x5e>
 80141ba:	f04f 37ff 	mov.w	r7, #4294967295
 80141be:	e7e6      	b.n	801418e <_strtoul_l.constprop.0+0x76>
 80141c0:	2f00      	cmp	r7, #0
 80141c2:	da07      	bge.n	80141d4 <_strtoul_l.constprop.0+0xbc>
 80141c4:	2322      	movs	r3, #34	; 0x22
 80141c6:	f8ce 3000 	str.w	r3, [lr]
 80141ca:	f04f 30ff 	mov.w	r0, #4294967295
 80141ce:	b932      	cbnz	r2, 80141de <_strtoul_l.constprop.0+0xc6>
 80141d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141d4:	b106      	cbz	r6, 80141d8 <_strtoul_l.constprop.0+0xc0>
 80141d6:	4240      	negs	r0, r0
 80141d8:	2a00      	cmp	r2, #0
 80141da:	d0f9      	beq.n	80141d0 <_strtoul_l.constprop.0+0xb8>
 80141dc:	b107      	cbz	r7, 80141e0 <_strtoul_l.constprop.0+0xc8>
 80141de:	1e69      	subs	r1, r5, #1
 80141e0:	6011      	str	r1, [r2, #0]
 80141e2:	e7f5      	b.n	80141d0 <_strtoul_l.constprop.0+0xb8>
 80141e4:	2430      	movs	r4, #48	; 0x30
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d1b5      	bne.n	8014156 <_strtoul_l.constprop.0+0x3e>
 80141ea:	2308      	movs	r3, #8
 80141ec:	e7b3      	b.n	8014156 <_strtoul_l.constprop.0+0x3e>
 80141ee:	2c30      	cmp	r4, #48	; 0x30
 80141f0:	d0a9      	beq.n	8014146 <_strtoul_l.constprop.0+0x2e>
 80141f2:	230a      	movs	r3, #10
 80141f4:	e7af      	b.n	8014156 <_strtoul_l.constprop.0+0x3e>
 80141f6:	bf00      	nop
 80141f8:	080152d1 	.word	0x080152d1

080141fc <_strtoul_r>:
 80141fc:	f7ff bf8c 	b.w	8014118 <_strtoul_l.constprop.0>

08014200 <__submore>:
 8014200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014204:	460c      	mov	r4, r1
 8014206:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801420c:	4299      	cmp	r1, r3
 801420e:	d11d      	bne.n	801424c <__submore+0x4c>
 8014210:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014214:	f7ff fa2a 	bl	801366c <_malloc_r>
 8014218:	b918      	cbnz	r0, 8014222 <__submore+0x22>
 801421a:	f04f 30ff 	mov.w	r0, #4294967295
 801421e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014226:	63a3      	str	r3, [r4, #56]	; 0x38
 8014228:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801422c:	6360      	str	r0, [r4, #52]	; 0x34
 801422e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8014232:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014236:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801423a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801423e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014242:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014246:	6020      	str	r0, [r4, #0]
 8014248:	2000      	movs	r0, #0
 801424a:	e7e8      	b.n	801421e <__submore+0x1e>
 801424c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801424e:	0077      	lsls	r7, r6, #1
 8014250:	463a      	mov	r2, r7
 8014252:	f000 fa2d 	bl	80146b0 <_realloc_r>
 8014256:	4605      	mov	r5, r0
 8014258:	2800      	cmp	r0, #0
 801425a:	d0de      	beq.n	801421a <__submore+0x1a>
 801425c:	eb00 0806 	add.w	r8, r0, r6
 8014260:	4601      	mov	r1, r0
 8014262:	4632      	mov	r2, r6
 8014264:	4640      	mov	r0, r8
 8014266:	f7fb fc8f 	bl	800fb88 <memcpy>
 801426a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801426e:	f8c4 8000 	str.w	r8, [r4]
 8014272:	e7e9      	b.n	8014248 <__submore+0x48>

08014274 <__ascii_wctomb>:
 8014274:	b149      	cbz	r1, 801428a <__ascii_wctomb+0x16>
 8014276:	2aff      	cmp	r2, #255	; 0xff
 8014278:	bf85      	ittet	hi
 801427a:	238a      	movhi	r3, #138	; 0x8a
 801427c:	6003      	strhi	r3, [r0, #0]
 801427e:	700a      	strbls	r2, [r1, #0]
 8014280:	f04f 30ff 	movhi.w	r0, #4294967295
 8014284:	bf98      	it	ls
 8014286:	2001      	movls	r0, #1
 8014288:	4770      	bx	lr
 801428a:	4608      	mov	r0, r1
 801428c:	4770      	bx	lr
	...

08014290 <__assert_func>:
 8014290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014292:	4614      	mov	r4, r2
 8014294:	461a      	mov	r2, r3
 8014296:	4b09      	ldr	r3, [pc, #36]	; (80142bc <__assert_func+0x2c>)
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	4605      	mov	r5, r0
 801429c:	68d8      	ldr	r0, [r3, #12]
 801429e:	b14c      	cbz	r4, 80142b4 <__assert_func+0x24>
 80142a0:	4b07      	ldr	r3, [pc, #28]	; (80142c0 <__assert_func+0x30>)
 80142a2:	9100      	str	r1, [sp, #0]
 80142a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80142a8:	4906      	ldr	r1, [pc, #24]	; (80142c4 <__assert_func+0x34>)
 80142aa:	462b      	mov	r3, r5
 80142ac:	f000 f9a6 	bl	80145fc <fiprintf>
 80142b0:	f000 fc46 	bl	8014b40 <abort>
 80142b4:	4b04      	ldr	r3, [pc, #16]	; (80142c8 <__assert_func+0x38>)
 80142b6:	461c      	mov	r4, r3
 80142b8:	e7f3      	b.n	80142a2 <__assert_func+0x12>
 80142ba:	bf00      	nop
 80142bc:	200002c8 	.word	0x200002c8
 80142c0:	08015660 	.word	0x08015660
 80142c4:	0801566d 	.word	0x0801566d
 80142c8:	0801569b 	.word	0x0801569b

080142cc <__sflush_r>:
 80142cc:	898a      	ldrh	r2, [r1, #12]
 80142ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142d2:	4605      	mov	r5, r0
 80142d4:	0710      	lsls	r0, r2, #28
 80142d6:	460c      	mov	r4, r1
 80142d8:	d458      	bmi.n	801438c <__sflush_r+0xc0>
 80142da:	684b      	ldr	r3, [r1, #4]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	dc05      	bgt.n	80142ec <__sflush_r+0x20>
 80142e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	dc02      	bgt.n	80142ec <__sflush_r+0x20>
 80142e6:	2000      	movs	r0, #0
 80142e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80142ee:	2e00      	cmp	r6, #0
 80142f0:	d0f9      	beq.n	80142e6 <__sflush_r+0x1a>
 80142f2:	2300      	movs	r3, #0
 80142f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80142f8:	682f      	ldr	r7, [r5, #0]
 80142fa:	602b      	str	r3, [r5, #0]
 80142fc:	d032      	beq.n	8014364 <__sflush_r+0x98>
 80142fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014300:	89a3      	ldrh	r3, [r4, #12]
 8014302:	075a      	lsls	r2, r3, #29
 8014304:	d505      	bpl.n	8014312 <__sflush_r+0x46>
 8014306:	6863      	ldr	r3, [r4, #4]
 8014308:	1ac0      	subs	r0, r0, r3
 801430a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801430c:	b10b      	cbz	r3, 8014312 <__sflush_r+0x46>
 801430e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014310:	1ac0      	subs	r0, r0, r3
 8014312:	2300      	movs	r3, #0
 8014314:	4602      	mov	r2, r0
 8014316:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014318:	6a21      	ldr	r1, [r4, #32]
 801431a:	4628      	mov	r0, r5
 801431c:	47b0      	blx	r6
 801431e:	1c43      	adds	r3, r0, #1
 8014320:	89a3      	ldrh	r3, [r4, #12]
 8014322:	d106      	bne.n	8014332 <__sflush_r+0x66>
 8014324:	6829      	ldr	r1, [r5, #0]
 8014326:	291d      	cmp	r1, #29
 8014328:	d82c      	bhi.n	8014384 <__sflush_r+0xb8>
 801432a:	4a2a      	ldr	r2, [pc, #168]	; (80143d4 <__sflush_r+0x108>)
 801432c:	40ca      	lsrs	r2, r1
 801432e:	07d6      	lsls	r6, r2, #31
 8014330:	d528      	bpl.n	8014384 <__sflush_r+0xb8>
 8014332:	2200      	movs	r2, #0
 8014334:	6062      	str	r2, [r4, #4]
 8014336:	04d9      	lsls	r1, r3, #19
 8014338:	6922      	ldr	r2, [r4, #16]
 801433a:	6022      	str	r2, [r4, #0]
 801433c:	d504      	bpl.n	8014348 <__sflush_r+0x7c>
 801433e:	1c42      	adds	r2, r0, #1
 8014340:	d101      	bne.n	8014346 <__sflush_r+0x7a>
 8014342:	682b      	ldr	r3, [r5, #0]
 8014344:	b903      	cbnz	r3, 8014348 <__sflush_r+0x7c>
 8014346:	6560      	str	r0, [r4, #84]	; 0x54
 8014348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801434a:	602f      	str	r7, [r5, #0]
 801434c:	2900      	cmp	r1, #0
 801434e:	d0ca      	beq.n	80142e6 <__sflush_r+0x1a>
 8014350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014354:	4299      	cmp	r1, r3
 8014356:	d002      	beq.n	801435e <__sflush_r+0x92>
 8014358:	4628      	mov	r0, r5
 801435a:	f7ff f91b 	bl	8013594 <_free_r>
 801435e:	2000      	movs	r0, #0
 8014360:	6360      	str	r0, [r4, #52]	; 0x34
 8014362:	e7c1      	b.n	80142e8 <__sflush_r+0x1c>
 8014364:	6a21      	ldr	r1, [r4, #32]
 8014366:	2301      	movs	r3, #1
 8014368:	4628      	mov	r0, r5
 801436a:	47b0      	blx	r6
 801436c:	1c41      	adds	r1, r0, #1
 801436e:	d1c7      	bne.n	8014300 <__sflush_r+0x34>
 8014370:	682b      	ldr	r3, [r5, #0]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d0c4      	beq.n	8014300 <__sflush_r+0x34>
 8014376:	2b1d      	cmp	r3, #29
 8014378:	d001      	beq.n	801437e <__sflush_r+0xb2>
 801437a:	2b16      	cmp	r3, #22
 801437c:	d101      	bne.n	8014382 <__sflush_r+0xb6>
 801437e:	602f      	str	r7, [r5, #0]
 8014380:	e7b1      	b.n	80142e6 <__sflush_r+0x1a>
 8014382:	89a3      	ldrh	r3, [r4, #12]
 8014384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014388:	81a3      	strh	r3, [r4, #12]
 801438a:	e7ad      	b.n	80142e8 <__sflush_r+0x1c>
 801438c:	690f      	ldr	r7, [r1, #16]
 801438e:	2f00      	cmp	r7, #0
 8014390:	d0a9      	beq.n	80142e6 <__sflush_r+0x1a>
 8014392:	0793      	lsls	r3, r2, #30
 8014394:	680e      	ldr	r6, [r1, #0]
 8014396:	bf08      	it	eq
 8014398:	694b      	ldreq	r3, [r1, #20]
 801439a:	600f      	str	r7, [r1, #0]
 801439c:	bf18      	it	ne
 801439e:	2300      	movne	r3, #0
 80143a0:	eba6 0807 	sub.w	r8, r6, r7
 80143a4:	608b      	str	r3, [r1, #8]
 80143a6:	f1b8 0f00 	cmp.w	r8, #0
 80143aa:	dd9c      	ble.n	80142e6 <__sflush_r+0x1a>
 80143ac:	6a21      	ldr	r1, [r4, #32]
 80143ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80143b0:	4643      	mov	r3, r8
 80143b2:	463a      	mov	r2, r7
 80143b4:	4628      	mov	r0, r5
 80143b6:	47b0      	blx	r6
 80143b8:	2800      	cmp	r0, #0
 80143ba:	dc06      	bgt.n	80143ca <__sflush_r+0xfe>
 80143bc:	89a3      	ldrh	r3, [r4, #12]
 80143be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143c2:	81a3      	strh	r3, [r4, #12]
 80143c4:	f04f 30ff 	mov.w	r0, #4294967295
 80143c8:	e78e      	b.n	80142e8 <__sflush_r+0x1c>
 80143ca:	4407      	add	r7, r0
 80143cc:	eba8 0800 	sub.w	r8, r8, r0
 80143d0:	e7e9      	b.n	80143a6 <__sflush_r+0xda>
 80143d2:	bf00      	nop
 80143d4:	20400001 	.word	0x20400001

080143d8 <_fflush_r>:
 80143d8:	b538      	push	{r3, r4, r5, lr}
 80143da:	690b      	ldr	r3, [r1, #16]
 80143dc:	4605      	mov	r5, r0
 80143de:	460c      	mov	r4, r1
 80143e0:	b913      	cbnz	r3, 80143e8 <_fflush_r+0x10>
 80143e2:	2500      	movs	r5, #0
 80143e4:	4628      	mov	r0, r5
 80143e6:	bd38      	pop	{r3, r4, r5, pc}
 80143e8:	b118      	cbz	r0, 80143f2 <_fflush_r+0x1a>
 80143ea:	6983      	ldr	r3, [r0, #24]
 80143ec:	b90b      	cbnz	r3, 80143f2 <_fflush_r+0x1a>
 80143ee:	f000 f887 	bl	8014500 <__sinit>
 80143f2:	4b14      	ldr	r3, [pc, #80]	; (8014444 <_fflush_r+0x6c>)
 80143f4:	429c      	cmp	r4, r3
 80143f6:	d11b      	bne.n	8014430 <_fflush_r+0x58>
 80143f8:	686c      	ldr	r4, [r5, #4]
 80143fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d0ef      	beq.n	80143e2 <_fflush_r+0xa>
 8014402:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014404:	07d0      	lsls	r0, r2, #31
 8014406:	d404      	bmi.n	8014412 <_fflush_r+0x3a>
 8014408:	0599      	lsls	r1, r3, #22
 801440a:	d402      	bmi.n	8014412 <_fflush_r+0x3a>
 801440c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801440e:	f000 f927 	bl	8014660 <__retarget_lock_acquire_recursive>
 8014412:	4628      	mov	r0, r5
 8014414:	4621      	mov	r1, r4
 8014416:	f7ff ff59 	bl	80142cc <__sflush_r>
 801441a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801441c:	07da      	lsls	r2, r3, #31
 801441e:	4605      	mov	r5, r0
 8014420:	d4e0      	bmi.n	80143e4 <_fflush_r+0xc>
 8014422:	89a3      	ldrh	r3, [r4, #12]
 8014424:	059b      	lsls	r3, r3, #22
 8014426:	d4dd      	bmi.n	80143e4 <_fflush_r+0xc>
 8014428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801442a:	f000 f91a 	bl	8014662 <__retarget_lock_release_recursive>
 801442e:	e7d9      	b.n	80143e4 <_fflush_r+0xc>
 8014430:	4b05      	ldr	r3, [pc, #20]	; (8014448 <_fflush_r+0x70>)
 8014432:	429c      	cmp	r4, r3
 8014434:	d101      	bne.n	801443a <_fflush_r+0x62>
 8014436:	68ac      	ldr	r4, [r5, #8]
 8014438:	e7df      	b.n	80143fa <_fflush_r+0x22>
 801443a:	4b04      	ldr	r3, [pc, #16]	; (801444c <_fflush_r+0x74>)
 801443c:	429c      	cmp	r4, r3
 801443e:	bf08      	it	eq
 8014440:	68ec      	ldreq	r4, [r5, #12]
 8014442:	e7da      	b.n	80143fa <_fflush_r+0x22>
 8014444:	080156bc 	.word	0x080156bc
 8014448:	080156dc 	.word	0x080156dc
 801444c:	0801569c 	.word	0x0801569c

08014450 <std>:
 8014450:	2300      	movs	r3, #0
 8014452:	b510      	push	{r4, lr}
 8014454:	4604      	mov	r4, r0
 8014456:	e9c0 3300 	strd	r3, r3, [r0]
 801445a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801445e:	6083      	str	r3, [r0, #8]
 8014460:	8181      	strh	r1, [r0, #12]
 8014462:	6643      	str	r3, [r0, #100]	; 0x64
 8014464:	81c2      	strh	r2, [r0, #14]
 8014466:	6183      	str	r3, [r0, #24]
 8014468:	4619      	mov	r1, r3
 801446a:	2208      	movs	r2, #8
 801446c:	305c      	adds	r0, #92	; 0x5c
 801446e:	f7fb fb99 	bl	800fba4 <memset>
 8014472:	4b05      	ldr	r3, [pc, #20]	; (8014488 <std+0x38>)
 8014474:	6263      	str	r3, [r4, #36]	; 0x24
 8014476:	4b05      	ldr	r3, [pc, #20]	; (801448c <std+0x3c>)
 8014478:	62a3      	str	r3, [r4, #40]	; 0x28
 801447a:	4b05      	ldr	r3, [pc, #20]	; (8014490 <std+0x40>)
 801447c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801447e:	4b05      	ldr	r3, [pc, #20]	; (8014494 <std+0x44>)
 8014480:	6224      	str	r4, [r4, #32]
 8014482:	6323      	str	r3, [r4, #48]	; 0x30
 8014484:	bd10      	pop	{r4, pc}
 8014486:	bf00      	nop
 8014488:	0801094d 	.word	0x0801094d
 801448c:	08010973 	.word	0x08010973
 8014490:	080109ab 	.word	0x080109ab
 8014494:	080109cf 	.word	0x080109cf

08014498 <_cleanup_r>:
 8014498:	4901      	ldr	r1, [pc, #4]	; (80144a0 <_cleanup_r+0x8>)
 801449a:	f000 b8c1 	b.w	8014620 <_fwalk_reent>
 801449e:	bf00      	nop
 80144a0:	080143d9 	.word	0x080143d9

080144a4 <__sfmoreglue>:
 80144a4:	b570      	push	{r4, r5, r6, lr}
 80144a6:	2268      	movs	r2, #104	; 0x68
 80144a8:	1e4d      	subs	r5, r1, #1
 80144aa:	4355      	muls	r5, r2
 80144ac:	460e      	mov	r6, r1
 80144ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80144b2:	f7ff f8db 	bl	801366c <_malloc_r>
 80144b6:	4604      	mov	r4, r0
 80144b8:	b140      	cbz	r0, 80144cc <__sfmoreglue+0x28>
 80144ba:	2100      	movs	r1, #0
 80144bc:	e9c0 1600 	strd	r1, r6, [r0]
 80144c0:	300c      	adds	r0, #12
 80144c2:	60a0      	str	r0, [r4, #8]
 80144c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80144c8:	f7fb fb6c 	bl	800fba4 <memset>
 80144cc:	4620      	mov	r0, r4
 80144ce:	bd70      	pop	{r4, r5, r6, pc}

080144d0 <__sfp_lock_acquire>:
 80144d0:	4801      	ldr	r0, [pc, #4]	; (80144d8 <__sfp_lock_acquire+0x8>)
 80144d2:	f000 b8c5 	b.w	8014660 <__retarget_lock_acquire_recursive>
 80144d6:	bf00      	nop
 80144d8:	20000775 	.word	0x20000775

080144dc <__sfp_lock_release>:
 80144dc:	4801      	ldr	r0, [pc, #4]	; (80144e4 <__sfp_lock_release+0x8>)
 80144de:	f000 b8c0 	b.w	8014662 <__retarget_lock_release_recursive>
 80144e2:	bf00      	nop
 80144e4:	20000775 	.word	0x20000775

080144e8 <__sinit_lock_acquire>:
 80144e8:	4801      	ldr	r0, [pc, #4]	; (80144f0 <__sinit_lock_acquire+0x8>)
 80144ea:	f000 b8b9 	b.w	8014660 <__retarget_lock_acquire_recursive>
 80144ee:	bf00      	nop
 80144f0:	20000776 	.word	0x20000776

080144f4 <__sinit_lock_release>:
 80144f4:	4801      	ldr	r0, [pc, #4]	; (80144fc <__sinit_lock_release+0x8>)
 80144f6:	f000 b8b4 	b.w	8014662 <__retarget_lock_release_recursive>
 80144fa:	bf00      	nop
 80144fc:	20000776 	.word	0x20000776

08014500 <__sinit>:
 8014500:	b510      	push	{r4, lr}
 8014502:	4604      	mov	r4, r0
 8014504:	f7ff fff0 	bl	80144e8 <__sinit_lock_acquire>
 8014508:	69a3      	ldr	r3, [r4, #24]
 801450a:	b11b      	cbz	r3, 8014514 <__sinit+0x14>
 801450c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014510:	f7ff bff0 	b.w	80144f4 <__sinit_lock_release>
 8014514:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014518:	6523      	str	r3, [r4, #80]	; 0x50
 801451a:	4b13      	ldr	r3, [pc, #76]	; (8014568 <__sinit+0x68>)
 801451c:	4a13      	ldr	r2, [pc, #76]	; (801456c <__sinit+0x6c>)
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	62a2      	str	r2, [r4, #40]	; 0x28
 8014522:	42a3      	cmp	r3, r4
 8014524:	bf04      	itt	eq
 8014526:	2301      	moveq	r3, #1
 8014528:	61a3      	streq	r3, [r4, #24]
 801452a:	4620      	mov	r0, r4
 801452c:	f000 f820 	bl	8014570 <__sfp>
 8014530:	6060      	str	r0, [r4, #4]
 8014532:	4620      	mov	r0, r4
 8014534:	f000 f81c 	bl	8014570 <__sfp>
 8014538:	60a0      	str	r0, [r4, #8]
 801453a:	4620      	mov	r0, r4
 801453c:	f000 f818 	bl	8014570 <__sfp>
 8014540:	2200      	movs	r2, #0
 8014542:	60e0      	str	r0, [r4, #12]
 8014544:	2104      	movs	r1, #4
 8014546:	6860      	ldr	r0, [r4, #4]
 8014548:	f7ff ff82 	bl	8014450 <std>
 801454c:	68a0      	ldr	r0, [r4, #8]
 801454e:	2201      	movs	r2, #1
 8014550:	2109      	movs	r1, #9
 8014552:	f7ff ff7d 	bl	8014450 <std>
 8014556:	68e0      	ldr	r0, [r4, #12]
 8014558:	2202      	movs	r2, #2
 801455a:	2112      	movs	r1, #18
 801455c:	f7ff ff78 	bl	8014450 <std>
 8014560:	2301      	movs	r3, #1
 8014562:	61a3      	str	r3, [r4, #24]
 8014564:	e7d2      	b.n	801450c <__sinit+0xc>
 8014566:	bf00      	nop
 8014568:	08015244 	.word	0x08015244
 801456c:	08014499 	.word	0x08014499

08014570 <__sfp>:
 8014570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014572:	4607      	mov	r7, r0
 8014574:	f7ff ffac 	bl	80144d0 <__sfp_lock_acquire>
 8014578:	4b1e      	ldr	r3, [pc, #120]	; (80145f4 <__sfp+0x84>)
 801457a:	681e      	ldr	r6, [r3, #0]
 801457c:	69b3      	ldr	r3, [r6, #24]
 801457e:	b913      	cbnz	r3, 8014586 <__sfp+0x16>
 8014580:	4630      	mov	r0, r6
 8014582:	f7ff ffbd 	bl	8014500 <__sinit>
 8014586:	3648      	adds	r6, #72	; 0x48
 8014588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801458c:	3b01      	subs	r3, #1
 801458e:	d503      	bpl.n	8014598 <__sfp+0x28>
 8014590:	6833      	ldr	r3, [r6, #0]
 8014592:	b30b      	cbz	r3, 80145d8 <__sfp+0x68>
 8014594:	6836      	ldr	r6, [r6, #0]
 8014596:	e7f7      	b.n	8014588 <__sfp+0x18>
 8014598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801459c:	b9d5      	cbnz	r5, 80145d4 <__sfp+0x64>
 801459e:	4b16      	ldr	r3, [pc, #88]	; (80145f8 <__sfp+0x88>)
 80145a0:	60e3      	str	r3, [r4, #12]
 80145a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80145a6:	6665      	str	r5, [r4, #100]	; 0x64
 80145a8:	f000 f859 	bl	801465e <__retarget_lock_init_recursive>
 80145ac:	f7ff ff96 	bl	80144dc <__sfp_lock_release>
 80145b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80145b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80145b8:	6025      	str	r5, [r4, #0]
 80145ba:	61a5      	str	r5, [r4, #24]
 80145bc:	2208      	movs	r2, #8
 80145be:	4629      	mov	r1, r5
 80145c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80145c4:	f7fb faee 	bl	800fba4 <memset>
 80145c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80145cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80145d0:	4620      	mov	r0, r4
 80145d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145d4:	3468      	adds	r4, #104	; 0x68
 80145d6:	e7d9      	b.n	801458c <__sfp+0x1c>
 80145d8:	2104      	movs	r1, #4
 80145da:	4638      	mov	r0, r7
 80145dc:	f7ff ff62 	bl	80144a4 <__sfmoreglue>
 80145e0:	4604      	mov	r4, r0
 80145e2:	6030      	str	r0, [r6, #0]
 80145e4:	2800      	cmp	r0, #0
 80145e6:	d1d5      	bne.n	8014594 <__sfp+0x24>
 80145e8:	f7ff ff78 	bl	80144dc <__sfp_lock_release>
 80145ec:	230c      	movs	r3, #12
 80145ee:	603b      	str	r3, [r7, #0]
 80145f0:	e7ee      	b.n	80145d0 <__sfp+0x60>
 80145f2:	bf00      	nop
 80145f4:	08015244 	.word	0x08015244
 80145f8:	ffff0001 	.word	0xffff0001

080145fc <fiprintf>:
 80145fc:	b40e      	push	{r1, r2, r3}
 80145fe:	b503      	push	{r0, r1, lr}
 8014600:	4601      	mov	r1, r0
 8014602:	ab03      	add	r3, sp, #12
 8014604:	4805      	ldr	r0, [pc, #20]	; (801461c <fiprintf+0x20>)
 8014606:	f853 2b04 	ldr.w	r2, [r3], #4
 801460a:	6800      	ldr	r0, [r0, #0]
 801460c:	9301      	str	r3, [sp, #4]
 801460e:	f000 f8a7 	bl	8014760 <_vfiprintf_r>
 8014612:	b002      	add	sp, #8
 8014614:	f85d eb04 	ldr.w	lr, [sp], #4
 8014618:	b003      	add	sp, #12
 801461a:	4770      	bx	lr
 801461c:	200002c8 	.word	0x200002c8

08014620 <_fwalk_reent>:
 8014620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014624:	4606      	mov	r6, r0
 8014626:	4688      	mov	r8, r1
 8014628:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801462c:	2700      	movs	r7, #0
 801462e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014632:	f1b9 0901 	subs.w	r9, r9, #1
 8014636:	d505      	bpl.n	8014644 <_fwalk_reent+0x24>
 8014638:	6824      	ldr	r4, [r4, #0]
 801463a:	2c00      	cmp	r4, #0
 801463c:	d1f7      	bne.n	801462e <_fwalk_reent+0xe>
 801463e:	4638      	mov	r0, r7
 8014640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014644:	89ab      	ldrh	r3, [r5, #12]
 8014646:	2b01      	cmp	r3, #1
 8014648:	d907      	bls.n	801465a <_fwalk_reent+0x3a>
 801464a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801464e:	3301      	adds	r3, #1
 8014650:	d003      	beq.n	801465a <_fwalk_reent+0x3a>
 8014652:	4629      	mov	r1, r5
 8014654:	4630      	mov	r0, r6
 8014656:	47c0      	blx	r8
 8014658:	4307      	orrs	r7, r0
 801465a:	3568      	adds	r5, #104	; 0x68
 801465c:	e7e9      	b.n	8014632 <_fwalk_reent+0x12>

0801465e <__retarget_lock_init_recursive>:
 801465e:	4770      	bx	lr

08014660 <__retarget_lock_acquire_recursive>:
 8014660:	4770      	bx	lr

08014662 <__retarget_lock_release_recursive>:
 8014662:	4770      	bx	lr

08014664 <memmove>:
 8014664:	4288      	cmp	r0, r1
 8014666:	b510      	push	{r4, lr}
 8014668:	eb01 0402 	add.w	r4, r1, r2
 801466c:	d902      	bls.n	8014674 <memmove+0x10>
 801466e:	4284      	cmp	r4, r0
 8014670:	4623      	mov	r3, r4
 8014672:	d807      	bhi.n	8014684 <memmove+0x20>
 8014674:	1e43      	subs	r3, r0, #1
 8014676:	42a1      	cmp	r1, r4
 8014678:	d008      	beq.n	801468c <memmove+0x28>
 801467a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801467e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014682:	e7f8      	b.n	8014676 <memmove+0x12>
 8014684:	4402      	add	r2, r0
 8014686:	4601      	mov	r1, r0
 8014688:	428a      	cmp	r2, r1
 801468a:	d100      	bne.n	801468e <memmove+0x2a>
 801468c:	bd10      	pop	{r4, pc}
 801468e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014696:	e7f7      	b.n	8014688 <memmove+0x24>

08014698 <__malloc_lock>:
 8014698:	4801      	ldr	r0, [pc, #4]	; (80146a0 <__malloc_lock+0x8>)
 801469a:	f7ff bfe1 	b.w	8014660 <__retarget_lock_acquire_recursive>
 801469e:	bf00      	nop
 80146a0:	20000774 	.word	0x20000774

080146a4 <__malloc_unlock>:
 80146a4:	4801      	ldr	r0, [pc, #4]	; (80146ac <__malloc_unlock+0x8>)
 80146a6:	f7ff bfdc 	b.w	8014662 <__retarget_lock_release_recursive>
 80146aa:	bf00      	nop
 80146ac:	20000774 	.word	0x20000774

080146b0 <_realloc_r>:
 80146b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146b4:	4680      	mov	r8, r0
 80146b6:	4614      	mov	r4, r2
 80146b8:	460e      	mov	r6, r1
 80146ba:	b921      	cbnz	r1, 80146c6 <_realloc_r+0x16>
 80146bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146c0:	4611      	mov	r1, r2
 80146c2:	f7fe bfd3 	b.w	801366c <_malloc_r>
 80146c6:	b92a      	cbnz	r2, 80146d4 <_realloc_r+0x24>
 80146c8:	f7fe ff64 	bl	8013594 <_free_r>
 80146cc:	4625      	mov	r5, r4
 80146ce:	4628      	mov	r0, r5
 80146d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146d4:	f000 faa0 	bl	8014c18 <_malloc_usable_size_r>
 80146d8:	4284      	cmp	r4, r0
 80146da:	4607      	mov	r7, r0
 80146dc:	d802      	bhi.n	80146e4 <_realloc_r+0x34>
 80146de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80146e2:	d812      	bhi.n	801470a <_realloc_r+0x5a>
 80146e4:	4621      	mov	r1, r4
 80146e6:	4640      	mov	r0, r8
 80146e8:	f7fe ffc0 	bl	801366c <_malloc_r>
 80146ec:	4605      	mov	r5, r0
 80146ee:	2800      	cmp	r0, #0
 80146f0:	d0ed      	beq.n	80146ce <_realloc_r+0x1e>
 80146f2:	42bc      	cmp	r4, r7
 80146f4:	4622      	mov	r2, r4
 80146f6:	4631      	mov	r1, r6
 80146f8:	bf28      	it	cs
 80146fa:	463a      	movcs	r2, r7
 80146fc:	f7fb fa44 	bl	800fb88 <memcpy>
 8014700:	4631      	mov	r1, r6
 8014702:	4640      	mov	r0, r8
 8014704:	f7fe ff46 	bl	8013594 <_free_r>
 8014708:	e7e1      	b.n	80146ce <_realloc_r+0x1e>
 801470a:	4635      	mov	r5, r6
 801470c:	e7df      	b.n	80146ce <_realloc_r+0x1e>

0801470e <__sfputc_r>:
 801470e:	6893      	ldr	r3, [r2, #8]
 8014710:	3b01      	subs	r3, #1
 8014712:	2b00      	cmp	r3, #0
 8014714:	b410      	push	{r4}
 8014716:	6093      	str	r3, [r2, #8]
 8014718:	da08      	bge.n	801472c <__sfputc_r+0x1e>
 801471a:	6994      	ldr	r4, [r2, #24]
 801471c:	42a3      	cmp	r3, r4
 801471e:	db01      	blt.n	8014724 <__sfputc_r+0x16>
 8014720:	290a      	cmp	r1, #10
 8014722:	d103      	bne.n	801472c <__sfputc_r+0x1e>
 8014724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014728:	f000 b94a 	b.w	80149c0 <__swbuf_r>
 801472c:	6813      	ldr	r3, [r2, #0]
 801472e:	1c58      	adds	r0, r3, #1
 8014730:	6010      	str	r0, [r2, #0]
 8014732:	7019      	strb	r1, [r3, #0]
 8014734:	4608      	mov	r0, r1
 8014736:	f85d 4b04 	ldr.w	r4, [sp], #4
 801473a:	4770      	bx	lr

0801473c <__sfputs_r>:
 801473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801473e:	4606      	mov	r6, r0
 8014740:	460f      	mov	r7, r1
 8014742:	4614      	mov	r4, r2
 8014744:	18d5      	adds	r5, r2, r3
 8014746:	42ac      	cmp	r4, r5
 8014748:	d101      	bne.n	801474e <__sfputs_r+0x12>
 801474a:	2000      	movs	r0, #0
 801474c:	e007      	b.n	801475e <__sfputs_r+0x22>
 801474e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014752:	463a      	mov	r2, r7
 8014754:	4630      	mov	r0, r6
 8014756:	f7ff ffda 	bl	801470e <__sfputc_r>
 801475a:	1c43      	adds	r3, r0, #1
 801475c:	d1f3      	bne.n	8014746 <__sfputs_r+0xa>
 801475e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014760 <_vfiprintf_r>:
 8014760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014764:	460d      	mov	r5, r1
 8014766:	b09d      	sub	sp, #116	; 0x74
 8014768:	4614      	mov	r4, r2
 801476a:	4698      	mov	r8, r3
 801476c:	4606      	mov	r6, r0
 801476e:	b118      	cbz	r0, 8014778 <_vfiprintf_r+0x18>
 8014770:	6983      	ldr	r3, [r0, #24]
 8014772:	b90b      	cbnz	r3, 8014778 <_vfiprintf_r+0x18>
 8014774:	f7ff fec4 	bl	8014500 <__sinit>
 8014778:	4b89      	ldr	r3, [pc, #548]	; (80149a0 <_vfiprintf_r+0x240>)
 801477a:	429d      	cmp	r5, r3
 801477c:	d11b      	bne.n	80147b6 <_vfiprintf_r+0x56>
 801477e:	6875      	ldr	r5, [r6, #4]
 8014780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014782:	07d9      	lsls	r1, r3, #31
 8014784:	d405      	bmi.n	8014792 <_vfiprintf_r+0x32>
 8014786:	89ab      	ldrh	r3, [r5, #12]
 8014788:	059a      	lsls	r2, r3, #22
 801478a:	d402      	bmi.n	8014792 <_vfiprintf_r+0x32>
 801478c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801478e:	f7ff ff67 	bl	8014660 <__retarget_lock_acquire_recursive>
 8014792:	89ab      	ldrh	r3, [r5, #12]
 8014794:	071b      	lsls	r3, r3, #28
 8014796:	d501      	bpl.n	801479c <_vfiprintf_r+0x3c>
 8014798:	692b      	ldr	r3, [r5, #16]
 801479a:	b9eb      	cbnz	r3, 80147d8 <_vfiprintf_r+0x78>
 801479c:	4629      	mov	r1, r5
 801479e:	4630      	mov	r0, r6
 80147a0:	f000 f960 	bl	8014a64 <__swsetup_r>
 80147a4:	b1c0      	cbz	r0, 80147d8 <_vfiprintf_r+0x78>
 80147a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80147a8:	07dc      	lsls	r4, r3, #31
 80147aa:	d50e      	bpl.n	80147ca <_vfiprintf_r+0x6a>
 80147ac:	f04f 30ff 	mov.w	r0, #4294967295
 80147b0:	b01d      	add	sp, #116	; 0x74
 80147b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147b6:	4b7b      	ldr	r3, [pc, #492]	; (80149a4 <_vfiprintf_r+0x244>)
 80147b8:	429d      	cmp	r5, r3
 80147ba:	d101      	bne.n	80147c0 <_vfiprintf_r+0x60>
 80147bc:	68b5      	ldr	r5, [r6, #8]
 80147be:	e7df      	b.n	8014780 <_vfiprintf_r+0x20>
 80147c0:	4b79      	ldr	r3, [pc, #484]	; (80149a8 <_vfiprintf_r+0x248>)
 80147c2:	429d      	cmp	r5, r3
 80147c4:	bf08      	it	eq
 80147c6:	68f5      	ldreq	r5, [r6, #12]
 80147c8:	e7da      	b.n	8014780 <_vfiprintf_r+0x20>
 80147ca:	89ab      	ldrh	r3, [r5, #12]
 80147cc:	0598      	lsls	r0, r3, #22
 80147ce:	d4ed      	bmi.n	80147ac <_vfiprintf_r+0x4c>
 80147d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80147d2:	f7ff ff46 	bl	8014662 <__retarget_lock_release_recursive>
 80147d6:	e7e9      	b.n	80147ac <_vfiprintf_r+0x4c>
 80147d8:	2300      	movs	r3, #0
 80147da:	9309      	str	r3, [sp, #36]	; 0x24
 80147dc:	2320      	movs	r3, #32
 80147de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80147e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80147e6:	2330      	movs	r3, #48	; 0x30
 80147e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80149ac <_vfiprintf_r+0x24c>
 80147ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80147f0:	f04f 0901 	mov.w	r9, #1
 80147f4:	4623      	mov	r3, r4
 80147f6:	469a      	mov	sl, r3
 80147f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80147fc:	b10a      	cbz	r2, 8014802 <_vfiprintf_r+0xa2>
 80147fe:	2a25      	cmp	r2, #37	; 0x25
 8014800:	d1f9      	bne.n	80147f6 <_vfiprintf_r+0x96>
 8014802:	ebba 0b04 	subs.w	fp, sl, r4
 8014806:	d00b      	beq.n	8014820 <_vfiprintf_r+0xc0>
 8014808:	465b      	mov	r3, fp
 801480a:	4622      	mov	r2, r4
 801480c:	4629      	mov	r1, r5
 801480e:	4630      	mov	r0, r6
 8014810:	f7ff ff94 	bl	801473c <__sfputs_r>
 8014814:	3001      	adds	r0, #1
 8014816:	f000 80aa 	beq.w	801496e <_vfiprintf_r+0x20e>
 801481a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801481c:	445a      	add	r2, fp
 801481e:	9209      	str	r2, [sp, #36]	; 0x24
 8014820:	f89a 3000 	ldrb.w	r3, [sl]
 8014824:	2b00      	cmp	r3, #0
 8014826:	f000 80a2 	beq.w	801496e <_vfiprintf_r+0x20e>
 801482a:	2300      	movs	r3, #0
 801482c:	f04f 32ff 	mov.w	r2, #4294967295
 8014830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014834:	f10a 0a01 	add.w	sl, sl, #1
 8014838:	9304      	str	r3, [sp, #16]
 801483a:	9307      	str	r3, [sp, #28]
 801483c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014840:	931a      	str	r3, [sp, #104]	; 0x68
 8014842:	4654      	mov	r4, sl
 8014844:	2205      	movs	r2, #5
 8014846:	f814 1b01 	ldrb.w	r1, [r4], #1
 801484a:	4858      	ldr	r0, [pc, #352]	; (80149ac <_vfiprintf_r+0x24c>)
 801484c:	f7eb fce8 	bl	8000220 <memchr>
 8014850:	9a04      	ldr	r2, [sp, #16]
 8014852:	b9d8      	cbnz	r0, 801488c <_vfiprintf_r+0x12c>
 8014854:	06d1      	lsls	r1, r2, #27
 8014856:	bf44      	itt	mi
 8014858:	2320      	movmi	r3, #32
 801485a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801485e:	0713      	lsls	r3, r2, #28
 8014860:	bf44      	itt	mi
 8014862:	232b      	movmi	r3, #43	; 0x2b
 8014864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014868:	f89a 3000 	ldrb.w	r3, [sl]
 801486c:	2b2a      	cmp	r3, #42	; 0x2a
 801486e:	d015      	beq.n	801489c <_vfiprintf_r+0x13c>
 8014870:	9a07      	ldr	r2, [sp, #28]
 8014872:	4654      	mov	r4, sl
 8014874:	2000      	movs	r0, #0
 8014876:	f04f 0c0a 	mov.w	ip, #10
 801487a:	4621      	mov	r1, r4
 801487c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014880:	3b30      	subs	r3, #48	; 0x30
 8014882:	2b09      	cmp	r3, #9
 8014884:	d94e      	bls.n	8014924 <_vfiprintf_r+0x1c4>
 8014886:	b1b0      	cbz	r0, 80148b6 <_vfiprintf_r+0x156>
 8014888:	9207      	str	r2, [sp, #28]
 801488a:	e014      	b.n	80148b6 <_vfiprintf_r+0x156>
 801488c:	eba0 0308 	sub.w	r3, r0, r8
 8014890:	fa09 f303 	lsl.w	r3, r9, r3
 8014894:	4313      	orrs	r3, r2
 8014896:	9304      	str	r3, [sp, #16]
 8014898:	46a2      	mov	sl, r4
 801489a:	e7d2      	b.n	8014842 <_vfiprintf_r+0xe2>
 801489c:	9b03      	ldr	r3, [sp, #12]
 801489e:	1d19      	adds	r1, r3, #4
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	9103      	str	r1, [sp, #12]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	bfbb      	ittet	lt
 80148a8:	425b      	neglt	r3, r3
 80148aa:	f042 0202 	orrlt.w	r2, r2, #2
 80148ae:	9307      	strge	r3, [sp, #28]
 80148b0:	9307      	strlt	r3, [sp, #28]
 80148b2:	bfb8      	it	lt
 80148b4:	9204      	strlt	r2, [sp, #16]
 80148b6:	7823      	ldrb	r3, [r4, #0]
 80148b8:	2b2e      	cmp	r3, #46	; 0x2e
 80148ba:	d10c      	bne.n	80148d6 <_vfiprintf_r+0x176>
 80148bc:	7863      	ldrb	r3, [r4, #1]
 80148be:	2b2a      	cmp	r3, #42	; 0x2a
 80148c0:	d135      	bne.n	801492e <_vfiprintf_r+0x1ce>
 80148c2:	9b03      	ldr	r3, [sp, #12]
 80148c4:	1d1a      	adds	r2, r3, #4
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	9203      	str	r2, [sp, #12]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	bfb8      	it	lt
 80148ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80148d2:	3402      	adds	r4, #2
 80148d4:	9305      	str	r3, [sp, #20]
 80148d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80149bc <_vfiprintf_r+0x25c>
 80148da:	7821      	ldrb	r1, [r4, #0]
 80148dc:	2203      	movs	r2, #3
 80148de:	4650      	mov	r0, sl
 80148e0:	f7eb fc9e 	bl	8000220 <memchr>
 80148e4:	b140      	cbz	r0, 80148f8 <_vfiprintf_r+0x198>
 80148e6:	2340      	movs	r3, #64	; 0x40
 80148e8:	eba0 000a 	sub.w	r0, r0, sl
 80148ec:	fa03 f000 	lsl.w	r0, r3, r0
 80148f0:	9b04      	ldr	r3, [sp, #16]
 80148f2:	4303      	orrs	r3, r0
 80148f4:	3401      	adds	r4, #1
 80148f6:	9304      	str	r3, [sp, #16]
 80148f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148fc:	482c      	ldr	r0, [pc, #176]	; (80149b0 <_vfiprintf_r+0x250>)
 80148fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014902:	2206      	movs	r2, #6
 8014904:	f7eb fc8c 	bl	8000220 <memchr>
 8014908:	2800      	cmp	r0, #0
 801490a:	d03f      	beq.n	801498c <_vfiprintf_r+0x22c>
 801490c:	4b29      	ldr	r3, [pc, #164]	; (80149b4 <_vfiprintf_r+0x254>)
 801490e:	bb1b      	cbnz	r3, 8014958 <_vfiprintf_r+0x1f8>
 8014910:	9b03      	ldr	r3, [sp, #12]
 8014912:	3307      	adds	r3, #7
 8014914:	f023 0307 	bic.w	r3, r3, #7
 8014918:	3308      	adds	r3, #8
 801491a:	9303      	str	r3, [sp, #12]
 801491c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801491e:	443b      	add	r3, r7
 8014920:	9309      	str	r3, [sp, #36]	; 0x24
 8014922:	e767      	b.n	80147f4 <_vfiprintf_r+0x94>
 8014924:	fb0c 3202 	mla	r2, ip, r2, r3
 8014928:	460c      	mov	r4, r1
 801492a:	2001      	movs	r0, #1
 801492c:	e7a5      	b.n	801487a <_vfiprintf_r+0x11a>
 801492e:	2300      	movs	r3, #0
 8014930:	3401      	adds	r4, #1
 8014932:	9305      	str	r3, [sp, #20]
 8014934:	4619      	mov	r1, r3
 8014936:	f04f 0c0a 	mov.w	ip, #10
 801493a:	4620      	mov	r0, r4
 801493c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014940:	3a30      	subs	r2, #48	; 0x30
 8014942:	2a09      	cmp	r2, #9
 8014944:	d903      	bls.n	801494e <_vfiprintf_r+0x1ee>
 8014946:	2b00      	cmp	r3, #0
 8014948:	d0c5      	beq.n	80148d6 <_vfiprintf_r+0x176>
 801494a:	9105      	str	r1, [sp, #20]
 801494c:	e7c3      	b.n	80148d6 <_vfiprintf_r+0x176>
 801494e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014952:	4604      	mov	r4, r0
 8014954:	2301      	movs	r3, #1
 8014956:	e7f0      	b.n	801493a <_vfiprintf_r+0x1da>
 8014958:	ab03      	add	r3, sp, #12
 801495a:	9300      	str	r3, [sp, #0]
 801495c:	462a      	mov	r2, r5
 801495e:	4b16      	ldr	r3, [pc, #88]	; (80149b8 <_vfiprintf_r+0x258>)
 8014960:	a904      	add	r1, sp, #16
 8014962:	4630      	mov	r0, r6
 8014964:	f7fb f9c6 	bl	800fcf4 <_printf_float>
 8014968:	4607      	mov	r7, r0
 801496a:	1c78      	adds	r0, r7, #1
 801496c:	d1d6      	bne.n	801491c <_vfiprintf_r+0x1bc>
 801496e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014970:	07d9      	lsls	r1, r3, #31
 8014972:	d405      	bmi.n	8014980 <_vfiprintf_r+0x220>
 8014974:	89ab      	ldrh	r3, [r5, #12]
 8014976:	059a      	lsls	r2, r3, #22
 8014978:	d402      	bmi.n	8014980 <_vfiprintf_r+0x220>
 801497a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801497c:	f7ff fe71 	bl	8014662 <__retarget_lock_release_recursive>
 8014980:	89ab      	ldrh	r3, [r5, #12]
 8014982:	065b      	lsls	r3, r3, #25
 8014984:	f53f af12 	bmi.w	80147ac <_vfiprintf_r+0x4c>
 8014988:	9809      	ldr	r0, [sp, #36]	; 0x24
 801498a:	e711      	b.n	80147b0 <_vfiprintf_r+0x50>
 801498c:	ab03      	add	r3, sp, #12
 801498e:	9300      	str	r3, [sp, #0]
 8014990:	462a      	mov	r2, r5
 8014992:	4b09      	ldr	r3, [pc, #36]	; (80149b8 <_vfiprintf_r+0x258>)
 8014994:	a904      	add	r1, sp, #16
 8014996:	4630      	mov	r0, r6
 8014998:	f7fb fc50 	bl	801023c <_printf_i>
 801499c:	e7e4      	b.n	8014968 <_vfiprintf_r+0x208>
 801499e:	bf00      	nop
 80149a0:	080156bc 	.word	0x080156bc
 80149a4:	080156dc 	.word	0x080156dc
 80149a8:	0801569c 	.word	0x0801569c
 80149ac:	08015634 	.word	0x08015634
 80149b0:	0801563e 	.word	0x0801563e
 80149b4:	0800fcf5 	.word	0x0800fcf5
 80149b8:	0801473d 	.word	0x0801473d
 80149bc:	0801563a 	.word	0x0801563a

080149c0 <__swbuf_r>:
 80149c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149c2:	460e      	mov	r6, r1
 80149c4:	4614      	mov	r4, r2
 80149c6:	4605      	mov	r5, r0
 80149c8:	b118      	cbz	r0, 80149d2 <__swbuf_r+0x12>
 80149ca:	6983      	ldr	r3, [r0, #24]
 80149cc:	b90b      	cbnz	r3, 80149d2 <__swbuf_r+0x12>
 80149ce:	f7ff fd97 	bl	8014500 <__sinit>
 80149d2:	4b21      	ldr	r3, [pc, #132]	; (8014a58 <__swbuf_r+0x98>)
 80149d4:	429c      	cmp	r4, r3
 80149d6:	d12b      	bne.n	8014a30 <__swbuf_r+0x70>
 80149d8:	686c      	ldr	r4, [r5, #4]
 80149da:	69a3      	ldr	r3, [r4, #24]
 80149dc:	60a3      	str	r3, [r4, #8]
 80149de:	89a3      	ldrh	r3, [r4, #12]
 80149e0:	071a      	lsls	r2, r3, #28
 80149e2:	d52f      	bpl.n	8014a44 <__swbuf_r+0x84>
 80149e4:	6923      	ldr	r3, [r4, #16]
 80149e6:	b36b      	cbz	r3, 8014a44 <__swbuf_r+0x84>
 80149e8:	6923      	ldr	r3, [r4, #16]
 80149ea:	6820      	ldr	r0, [r4, #0]
 80149ec:	1ac0      	subs	r0, r0, r3
 80149ee:	6963      	ldr	r3, [r4, #20]
 80149f0:	b2f6      	uxtb	r6, r6
 80149f2:	4283      	cmp	r3, r0
 80149f4:	4637      	mov	r7, r6
 80149f6:	dc04      	bgt.n	8014a02 <__swbuf_r+0x42>
 80149f8:	4621      	mov	r1, r4
 80149fa:	4628      	mov	r0, r5
 80149fc:	f7ff fcec 	bl	80143d8 <_fflush_r>
 8014a00:	bb30      	cbnz	r0, 8014a50 <__swbuf_r+0x90>
 8014a02:	68a3      	ldr	r3, [r4, #8]
 8014a04:	3b01      	subs	r3, #1
 8014a06:	60a3      	str	r3, [r4, #8]
 8014a08:	6823      	ldr	r3, [r4, #0]
 8014a0a:	1c5a      	adds	r2, r3, #1
 8014a0c:	6022      	str	r2, [r4, #0]
 8014a0e:	701e      	strb	r6, [r3, #0]
 8014a10:	6963      	ldr	r3, [r4, #20]
 8014a12:	3001      	adds	r0, #1
 8014a14:	4283      	cmp	r3, r0
 8014a16:	d004      	beq.n	8014a22 <__swbuf_r+0x62>
 8014a18:	89a3      	ldrh	r3, [r4, #12]
 8014a1a:	07db      	lsls	r3, r3, #31
 8014a1c:	d506      	bpl.n	8014a2c <__swbuf_r+0x6c>
 8014a1e:	2e0a      	cmp	r6, #10
 8014a20:	d104      	bne.n	8014a2c <__swbuf_r+0x6c>
 8014a22:	4621      	mov	r1, r4
 8014a24:	4628      	mov	r0, r5
 8014a26:	f7ff fcd7 	bl	80143d8 <_fflush_r>
 8014a2a:	b988      	cbnz	r0, 8014a50 <__swbuf_r+0x90>
 8014a2c:	4638      	mov	r0, r7
 8014a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a30:	4b0a      	ldr	r3, [pc, #40]	; (8014a5c <__swbuf_r+0x9c>)
 8014a32:	429c      	cmp	r4, r3
 8014a34:	d101      	bne.n	8014a3a <__swbuf_r+0x7a>
 8014a36:	68ac      	ldr	r4, [r5, #8]
 8014a38:	e7cf      	b.n	80149da <__swbuf_r+0x1a>
 8014a3a:	4b09      	ldr	r3, [pc, #36]	; (8014a60 <__swbuf_r+0xa0>)
 8014a3c:	429c      	cmp	r4, r3
 8014a3e:	bf08      	it	eq
 8014a40:	68ec      	ldreq	r4, [r5, #12]
 8014a42:	e7ca      	b.n	80149da <__swbuf_r+0x1a>
 8014a44:	4621      	mov	r1, r4
 8014a46:	4628      	mov	r0, r5
 8014a48:	f000 f80c 	bl	8014a64 <__swsetup_r>
 8014a4c:	2800      	cmp	r0, #0
 8014a4e:	d0cb      	beq.n	80149e8 <__swbuf_r+0x28>
 8014a50:	f04f 37ff 	mov.w	r7, #4294967295
 8014a54:	e7ea      	b.n	8014a2c <__swbuf_r+0x6c>
 8014a56:	bf00      	nop
 8014a58:	080156bc 	.word	0x080156bc
 8014a5c:	080156dc 	.word	0x080156dc
 8014a60:	0801569c 	.word	0x0801569c

08014a64 <__swsetup_r>:
 8014a64:	4b32      	ldr	r3, [pc, #200]	; (8014b30 <__swsetup_r+0xcc>)
 8014a66:	b570      	push	{r4, r5, r6, lr}
 8014a68:	681d      	ldr	r5, [r3, #0]
 8014a6a:	4606      	mov	r6, r0
 8014a6c:	460c      	mov	r4, r1
 8014a6e:	b125      	cbz	r5, 8014a7a <__swsetup_r+0x16>
 8014a70:	69ab      	ldr	r3, [r5, #24]
 8014a72:	b913      	cbnz	r3, 8014a7a <__swsetup_r+0x16>
 8014a74:	4628      	mov	r0, r5
 8014a76:	f7ff fd43 	bl	8014500 <__sinit>
 8014a7a:	4b2e      	ldr	r3, [pc, #184]	; (8014b34 <__swsetup_r+0xd0>)
 8014a7c:	429c      	cmp	r4, r3
 8014a7e:	d10f      	bne.n	8014aa0 <__swsetup_r+0x3c>
 8014a80:	686c      	ldr	r4, [r5, #4]
 8014a82:	89a3      	ldrh	r3, [r4, #12]
 8014a84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014a88:	0719      	lsls	r1, r3, #28
 8014a8a:	d42c      	bmi.n	8014ae6 <__swsetup_r+0x82>
 8014a8c:	06dd      	lsls	r5, r3, #27
 8014a8e:	d411      	bmi.n	8014ab4 <__swsetup_r+0x50>
 8014a90:	2309      	movs	r3, #9
 8014a92:	6033      	str	r3, [r6, #0]
 8014a94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014a98:	81a3      	strh	r3, [r4, #12]
 8014a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8014a9e:	e03e      	b.n	8014b1e <__swsetup_r+0xba>
 8014aa0:	4b25      	ldr	r3, [pc, #148]	; (8014b38 <__swsetup_r+0xd4>)
 8014aa2:	429c      	cmp	r4, r3
 8014aa4:	d101      	bne.n	8014aaa <__swsetup_r+0x46>
 8014aa6:	68ac      	ldr	r4, [r5, #8]
 8014aa8:	e7eb      	b.n	8014a82 <__swsetup_r+0x1e>
 8014aaa:	4b24      	ldr	r3, [pc, #144]	; (8014b3c <__swsetup_r+0xd8>)
 8014aac:	429c      	cmp	r4, r3
 8014aae:	bf08      	it	eq
 8014ab0:	68ec      	ldreq	r4, [r5, #12]
 8014ab2:	e7e6      	b.n	8014a82 <__swsetup_r+0x1e>
 8014ab4:	0758      	lsls	r0, r3, #29
 8014ab6:	d512      	bpl.n	8014ade <__swsetup_r+0x7a>
 8014ab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014aba:	b141      	cbz	r1, 8014ace <__swsetup_r+0x6a>
 8014abc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ac0:	4299      	cmp	r1, r3
 8014ac2:	d002      	beq.n	8014aca <__swsetup_r+0x66>
 8014ac4:	4630      	mov	r0, r6
 8014ac6:	f7fe fd65 	bl	8013594 <_free_r>
 8014aca:	2300      	movs	r3, #0
 8014acc:	6363      	str	r3, [r4, #52]	; 0x34
 8014ace:	89a3      	ldrh	r3, [r4, #12]
 8014ad0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014ad4:	81a3      	strh	r3, [r4, #12]
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	6063      	str	r3, [r4, #4]
 8014ada:	6923      	ldr	r3, [r4, #16]
 8014adc:	6023      	str	r3, [r4, #0]
 8014ade:	89a3      	ldrh	r3, [r4, #12]
 8014ae0:	f043 0308 	orr.w	r3, r3, #8
 8014ae4:	81a3      	strh	r3, [r4, #12]
 8014ae6:	6923      	ldr	r3, [r4, #16]
 8014ae8:	b94b      	cbnz	r3, 8014afe <__swsetup_r+0x9a>
 8014aea:	89a3      	ldrh	r3, [r4, #12]
 8014aec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014af4:	d003      	beq.n	8014afe <__swsetup_r+0x9a>
 8014af6:	4621      	mov	r1, r4
 8014af8:	4630      	mov	r0, r6
 8014afa:	f000 f84d 	bl	8014b98 <__smakebuf_r>
 8014afe:	89a0      	ldrh	r0, [r4, #12]
 8014b00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b04:	f010 0301 	ands.w	r3, r0, #1
 8014b08:	d00a      	beq.n	8014b20 <__swsetup_r+0xbc>
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	60a3      	str	r3, [r4, #8]
 8014b0e:	6963      	ldr	r3, [r4, #20]
 8014b10:	425b      	negs	r3, r3
 8014b12:	61a3      	str	r3, [r4, #24]
 8014b14:	6923      	ldr	r3, [r4, #16]
 8014b16:	b943      	cbnz	r3, 8014b2a <__swsetup_r+0xc6>
 8014b18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014b1c:	d1ba      	bne.n	8014a94 <__swsetup_r+0x30>
 8014b1e:	bd70      	pop	{r4, r5, r6, pc}
 8014b20:	0781      	lsls	r1, r0, #30
 8014b22:	bf58      	it	pl
 8014b24:	6963      	ldrpl	r3, [r4, #20]
 8014b26:	60a3      	str	r3, [r4, #8]
 8014b28:	e7f4      	b.n	8014b14 <__swsetup_r+0xb0>
 8014b2a:	2000      	movs	r0, #0
 8014b2c:	e7f7      	b.n	8014b1e <__swsetup_r+0xba>
 8014b2e:	bf00      	nop
 8014b30:	200002c8 	.word	0x200002c8
 8014b34:	080156bc 	.word	0x080156bc
 8014b38:	080156dc 	.word	0x080156dc
 8014b3c:	0801569c 	.word	0x0801569c

08014b40 <abort>:
 8014b40:	b508      	push	{r3, lr}
 8014b42:	2006      	movs	r0, #6
 8014b44:	f000 f898 	bl	8014c78 <raise>
 8014b48:	2001      	movs	r0, #1
 8014b4a:	f7ed feb9 	bl	80028c0 <_exit>

08014b4e <__swhatbuf_r>:
 8014b4e:	b570      	push	{r4, r5, r6, lr}
 8014b50:	460e      	mov	r6, r1
 8014b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b56:	2900      	cmp	r1, #0
 8014b58:	b096      	sub	sp, #88	; 0x58
 8014b5a:	4614      	mov	r4, r2
 8014b5c:	461d      	mov	r5, r3
 8014b5e:	da08      	bge.n	8014b72 <__swhatbuf_r+0x24>
 8014b60:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014b64:	2200      	movs	r2, #0
 8014b66:	602a      	str	r2, [r5, #0]
 8014b68:	061a      	lsls	r2, r3, #24
 8014b6a:	d410      	bmi.n	8014b8e <__swhatbuf_r+0x40>
 8014b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014b70:	e00e      	b.n	8014b90 <__swhatbuf_r+0x42>
 8014b72:	466a      	mov	r2, sp
 8014b74:	f000 f89c 	bl	8014cb0 <_fstat_r>
 8014b78:	2800      	cmp	r0, #0
 8014b7a:	dbf1      	blt.n	8014b60 <__swhatbuf_r+0x12>
 8014b7c:	9a01      	ldr	r2, [sp, #4]
 8014b7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014b82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014b86:	425a      	negs	r2, r3
 8014b88:	415a      	adcs	r2, r3
 8014b8a:	602a      	str	r2, [r5, #0]
 8014b8c:	e7ee      	b.n	8014b6c <__swhatbuf_r+0x1e>
 8014b8e:	2340      	movs	r3, #64	; 0x40
 8014b90:	2000      	movs	r0, #0
 8014b92:	6023      	str	r3, [r4, #0]
 8014b94:	b016      	add	sp, #88	; 0x58
 8014b96:	bd70      	pop	{r4, r5, r6, pc}

08014b98 <__smakebuf_r>:
 8014b98:	898b      	ldrh	r3, [r1, #12]
 8014b9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014b9c:	079d      	lsls	r5, r3, #30
 8014b9e:	4606      	mov	r6, r0
 8014ba0:	460c      	mov	r4, r1
 8014ba2:	d507      	bpl.n	8014bb4 <__smakebuf_r+0x1c>
 8014ba4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014ba8:	6023      	str	r3, [r4, #0]
 8014baa:	6123      	str	r3, [r4, #16]
 8014bac:	2301      	movs	r3, #1
 8014bae:	6163      	str	r3, [r4, #20]
 8014bb0:	b002      	add	sp, #8
 8014bb2:	bd70      	pop	{r4, r5, r6, pc}
 8014bb4:	ab01      	add	r3, sp, #4
 8014bb6:	466a      	mov	r2, sp
 8014bb8:	f7ff ffc9 	bl	8014b4e <__swhatbuf_r>
 8014bbc:	9900      	ldr	r1, [sp, #0]
 8014bbe:	4605      	mov	r5, r0
 8014bc0:	4630      	mov	r0, r6
 8014bc2:	f7fe fd53 	bl	801366c <_malloc_r>
 8014bc6:	b948      	cbnz	r0, 8014bdc <__smakebuf_r+0x44>
 8014bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bcc:	059a      	lsls	r2, r3, #22
 8014bce:	d4ef      	bmi.n	8014bb0 <__smakebuf_r+0x18>
 8014bd0:	f023 0303 	bic.w	r3, r3, #3
 8014bd4:	f043 0302 	orr.w	r3, r3, #2
 8014bd8:	81a3      	strh	r3, [r4, #12]
 8014bda:	e7e3      	b.n	8014ba4 <__smakebuf_r+0xc>
 8014bdc:	4b0d      	ldr	r3, [pc, #52]	; (8014c14 <__smakebuf_r+0x7c>)
 8014bde:	62b3      	str	r3, [r6, #40]	; 0x28
 8014be0:	89a3      	ldrh	r3, [r4, #12]
 8014be2:	6020      	str	r0, [r4, #0]
 8014be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014be8:	81a3      	strh	r3, [r4, #12]
 8014bea:	9b00      	ldr	r3, [sp, #0]
 8014bec:	6163      	str	r3, [r4, #20]
 8014bee:	9b01      	ldr	r3, [sp, #4]
 8014bf0:	6120      	str	r0, [r4, #16]
 8014bf2:	b15b      	cbz	r3, 8014c0c <__smakebuf_r+0x74>
 8014bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014bf8:	4630      	mov	r0, r6
 8014bfa:	f000 f86b 	bl	8014cd4 <_isatty_r>
 8014bfe:	b128      	cbz	r0, 8014c0c <__smakebuf_r+0x74>
 8014c00:	89a3      	ldrh	r3, [r4, #12]
 8014c02:	f023 0303 	bic.w	r3, r3, #3
 8014c06:	f043 0301 	orr.w	r3, r3, #1
 8014c0a:	81a3      	strh	r3, [r4, #12]
 8014c0c:	89a0      	ldrh	r0, [r4, #12]
 8014c0e:	4305      	orrs	r5, r0
 8014c10:	81a5      	strh	r5, [r4, #12]
 8014c12:	e7cd      	b.n	8014bb0 <__smakebuf_r+0x18>
 8014c14:	08014499 	.word	0x08014499

08014c18 <_malloc_usable_size_r>:
 8014c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c1c:	1f18      	subs	r0, r3, #4
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	bfbc      	itt	lt
 8014c22:	580b      	ldrlt	r3, [r1, r0]
 8014c24:	18c0      	addlt	r0, r0, r3
 8014c26:	4770      	bx	lr

08014c28 <_raise_r>:
 8014c28:	291f      	cmp	r1, #31
 8014c2a:	b538      	push	{r3, r4, r5, lr}
 8014c2c:	4604      	mov	r4, r0
 8014c2e:	460d      	mov	r5, r1
 8014c30:	d904      	bls.n	8014c3c <_raise_r+0x14>
 8014c32:	2316      	movs	r3, #22
 8014c34:	6003      	str	r3, [r0, #0]
 8014c36:	f04f 30ff 	mov.w	r0, #4294967295
 8014c3a:	bd38      	pop	{r3, r4, r5, pc}
 8014c3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014c3e:	b112      	cbz	r2, 8014c46 <_raise_r+0x1e>
 8014c40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c44:	b94b      	cbnz	r3, 8014c5a <_raise_r+0x32>
 8014c46:	4620      	mov	r0, r4
 8014c48:	f000 f830 	bl	8014cac <_getpid_r>
 8014c4c:	462a      	mov	r2, r5
 8014c4e:	4601      	mov	r1, r0
 8014c50:	4620      	mov	r0, r4
 8014c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c56:	f000 b817 	b.w	8014c88 <_kill_r>
 8014c5a:	2b01      	cmp	r3, #1
 8014c5c:	d00a      	beq.n	8014c74 <_raise_r+0x4c>
 8014c5e:	1c59      	adds	r1, r3, #1
 8014c60:	d103      	bne.n	8014c6a <_raise_r+0x42>
 8014c62:	2316      	movs	r3, #22
 8014c64:	6003      	str	r3, [r0, #0]
 8014c66:	2001      	movs	r0, #1
 8014c68:	e7e7      	b.n	8014c3a <_raise_r+0x12>
 8014c6a:	2400      	movs	r4, #0
 8014c6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014c70:	4628      	mov	r0, r5
 8014c72:	4798      	blx	r3
 8014c74:	2000      	movs	r0, #0
 8014c76:	e7e0      	b.n	8014c3a <_raise_r+0x12>

08014c78 <raise>:
 8014c78:	4b02      	ldr	r3, [pc, #8]	; (8014c84 <raise+0xc>)
 8014c7a:	4601      	mov	r1, r0
 8014c7c:	6818      	ldr	r0, [r3, #0]
 8014c7e:	f7ff bfd3 	b.w	8014c28 <_raise_r>
 8014c82:	bf00      	nop
 8014c84:	200002c8 	.word	0x200002c8

08014c88 <_kill_r>:
 8014c88:	b538      	push	{r3, r4, r5, lr}
 8014c8a:	4d07      	ldr	r5, [pc, #28]	; (8014ca8 <_kill_r+0x20>)
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	4604      	mov	r4, r0
 8014c90:	4608      	mov	r0, r1
 8014c92:	4611      	mov	r1, r2
 8014c94:	602b      	str	r3, [r5, #0]
 8014c96:	f7ed fe03 	bl	80028a0 <_kill>
 8014c9a:	1c43      	adds	r3, r0, #1
 8014c9c:	d102      	bne.n	8014ca4 <_kill_r+0x1c>
 8014c9e:	682b      	ldr	r3, [r5, #0]
 8014ca0:	b103      	cbz	r3, 8014ca4 <_kill_r+0x1c>
 8014ca2:	6023      	str	r3, [r4, #0]
 8014ca4:	bd38      	pop	{r3, r4, r5, pc}
 8014ca6:	bf00      	nop
 8014ca8:	20000770 	.word	0x20000770

08014cac <_getpid_r>:
 8014cac:	f7ed bdf0 	b.w	8002890 <_getpid>

08014cb0 <_fstat_r>:
 8014cb0:	b538      	push	{r3, r4, r5, lr}
 8014cb2:	4d07      	ldr	r5, [pc, #28]	; (8014cd0 <_fstat_r+0x20>)
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	4604      	mov	r4, r0
 8014cb8:	4608      	mov	r0, r1
 8014cba:	4611      	mov	r1, r2
 8014cbc:	602b      	str	r3, [r5, #0]
 8014cbe:	f7ed fe4e 	bl	800295e <_fstat>
 8014cc2:	1c43      	adds	r3, r0, #1
 8014cc4:	d102      	bne.n	8014ccc <_fstat_r+0x1c>
 8014cc6:	682b      	ldr	r3, [r5, #0]
 8014cc8:	b103      	cbz	r3, 8014ccc <_fstat_r+0x1c>
 8014cca:	6023      	str	r3, [r4, #0]
 8014ccc:	bd38      	pop	{r3, r4, r5, pc}
 8014cce:	bf00      	nop
 8014cd0:	20000770 	.word	0x20000770

08014cd4 <_isatty_r>:
 8014cd4:	b538      	push	{r3, r4, r5, lr}
 8014cd6:	4d06      	ldr	r5, [pc, #24]	; (8014cf0 <_isatty_r+0x1c>)
 8014cd8:	2300      	movs	r3, #0
 8014cda:	4604      	mov	r4, r0
 8014cdc:	4608      	mov	r0, r1
 8014cde:	602b      	str	r3, [r5, #0]
 8014ce0:	f7ed fe4d 	bl	800297e <_isatty>
 8014ce4:	1c43      	adds	r3, r0, #1
 8014ce6:	d102      	bne.n	8014cee <_isatty_r+0x1a>
 8014ce8:	682b      	ldr	r3, [r5, #0]
 8014cea:	b103      	cbz	r3, 8014cee <_isatty_r+0x1a>
 8014cec:	6023      	str	r3, [r4, #0]
 8014cee:	bd38      	pop	{r3, r4, r5, pc}
 8014cf0:	20000770 	.word	0x20000770

08014cf4 <_init>:
 8014cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cf6:	bf00      	nop
 8014cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cfa:	bc08      	pop	{r3}
 8014cfc:	469e      	mov	lr, r3
 8014cfe:	4770      	bx	lr

08014d00 <_fini>:
 8014d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d02:	bf00      	nop
 8014d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d06:	bc08      	pop	{r3}
 8014d08:	469e      	mov	lr, r3
 8014d0a:	4770      	bx	lr
