
TACTS_testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015b1c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba8  08015cf0  08015cf0  00025cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016898  08016898  000305b4  2**0
                  CONTENTS
  4 .ARM          00000008  08016898  08016898  00026898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080168a0  080168a0  000305b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080168a0  080168a0  000268a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080168a4  080168a4  000268a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b4  20000000  080168a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b0dc  200005b4  08016e5c  000305b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b690  08016e5c  0003b690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000305b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021889  00000000  00000000  000305e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cc9  00000000  00000000  00051e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  00055b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001648  00000000  00000000  00057328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b98  00000000  00000000  00058970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022a1e  00000000  00000000  00082508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa170  00000000  00000000  000a4f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019f096  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fcc  00000000  00000000  0019f0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200005b4 	.word	0x200005b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015cd4 	.word	0x08015cd4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200005b8 	.word	0x200005b8
 800020c:	08015cd4 	.word	0x08015cd4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b51      	ldr	r3, [pc, #324]	; (80011b4 <MX_GPIO_Init+0x15c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <MX_GPIO_Init+0x15c>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b4e      	ldr	r3, [pc, #312]	; (80011b4 <MX_GPIO_Init+0x15c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <MX_GPIO_Init+0x15c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a4a      	ldr	r2, [pc, #296]	; (80011b4 <MX_GPIO_Init+0x15c>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <MX_GPIO_Init+0x15c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800109e:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a44      	ldr	r2, [pc, #272]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a3e      	ldr	r2, [pc, #248]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a38      	ldr	r2, [pc, #224]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2110      	movs	r1, #16
 80010ea:	4833      	ldr	r0, [pc, #204]	; (80011b8 <MX_GPIO_Init+0x160>)
 80010ec:	f002 fe74 	bl	8003dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	210f      	movs	r1, #15
 80010f4:	4831      	ldr	r0, [pc, #196]	; (80011bc <MX_GPIO_Init+0x164>)
 80010f6:	f002 fe6f 	bl	8003dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	21c0      	movs	r1, #192	; 0xc0
 80010fe:	4830      	ldr	r0, [pc, #192]	; (80011c0 <MX_GPIO_Init+0x168>)
 8001100:	f002 fe6a 	bl	8003dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001104:	2310      	movs	r3, #16
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4827      	ldr	r0, [pc, #156]	; (80011b8 <MX_GPIO_Init+0x160>)
 800111c:	f002 facc 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001120:	230f      	movs	r3, #15
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4821      	ldr	r0, [pc, #132]	; (80011bc <MX_GPIO_Init+0x164>)
 8001138:	f002 fabe 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800113c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001142:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001148:	2301      	movs	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	481c      	ldr	r0, [pc, #112]	; (80011c4 <MX_GPIO_Init+0x16c>)
 8001154:	f002 fab0 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001158:	23c0      	movs	r3, #192	; 0xc0
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	4814      	ldr	r0, [pc, #80]	; (80011c0 <MX_GPIO_Init+0x168>)
 8001170:	f002 faa2 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001174:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <MX_GPIO_Init+0x160>)
 800118a:	f002 fa95 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800118e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001194:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119a:	2301      	movs	r3, #1
 800119c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_GPIO_Init+0x160>)
 80011a6:	f002 fa87 	bl	80036b8 <HAL_GPIO_Init>

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40022000 	.word	0x40022000
 80011c0:	40021800 	.word	0x40021800
 80011c4:	40020000 	.word	0x40020000

080011c8 <HX711_Init>:
float loadcell_slope = -1/1600.00f; // Convert the raw data to weight (replace the calibration factor with your own)
float loadcell_bias = 10002;


void HX711_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2102      	movs	r1, #2
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <HX711_Init+0x14>)
 80011d2:	f002 fe01 	bl	8003dd8 <HAL_GPIO_WritePin>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40022000 	.word	0x40022000

080011e0 <Read_HX711>:

int32_t Read_HX711(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  int32_t data = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]

  // Wait until the DT pin goes low
  while (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET);
 80011ea:	bf00      	nop
 80011ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f0:	4820      	ldr	r0, [pc, #128]	; (8001274 <Read_HX711+0x94>)
 80011f2:	f002 fdd1 	bl	8003d98 <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d0f7      	beq.n	80011ec <Read_HX711+0xc>

  // Read the 24-bit data
  for (int i = 0; i < 24; i++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	e020      	b.n	8001244 <Read_HX711+0x64>
  {
    // Generate a clock pulse on SCK pin
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2102      	movs	r1, #2
 8001206:	481c      	ldr	r0, [pc, #112]	; (8001278 <Read_HX711+0x98>)
 8001208:	f002 fde6 	bl	8003dd8 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f000 f867 	bl	80012e0 <DelayMicroseconds>
    data = (data << 1);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET)
 8001218:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121c:	4815      	ldr	r0, [pc, #84]	; (8001274 <Read_HX711+0x94>)
 800121e:	f002 fdbb 	bl	8003d98 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b01      	cmp	r3, #1
 8001226:	d102      	bne.n	800122e <Read_HX711+0x4e>
    {
      data++;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3301      	adds	r3, #1
 800122c:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	2102      	movs	r1, #2
 8001232:	4811      	ldr	r0, [pc, #68]	; (8001278 <Read_HX711+0x98>)
 8001234:	f002 fdd0 	bl	8003dd8 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 8001238:	2001      	movs	r0, #1
 800123a:	f000 f851 	bl	80012e0 <DelayMicroseconds>
  for (int i = 0; i < 24; i++)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2b17      	cmp	r3, #23
 8001248:	dddb      	ble.n	8001202 <Read_HX711+0x22>
  }

  // Generate an additional 25th pulse to set the HX711 back to idle mode
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	2102      	movs	r1, #2
 800124e:	480a      	ldr	r0, [pc, #40]	; (8001278 <Read_HX711+0x98>)
 8001250:	f002 fdc2 	bl	8003dd8 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f000 f843 	bl	80012e0 <DelayMicroseconds>
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2102      	movs	r1, #2
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <Read_HX711+0x98>)
 8001260:	f002 fdba 	bl	8003dd8 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 8001264:	2001      	movs	r0, #1
 8001266:	f000 f83b 	bl	80012e0 <DelayMicroseconds>


  // Return the 24-bit data
  return data;
 800126a:	687b      	ldr	r3, [r7, #4]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40020400 	.word	0x40020400
 8001278:	40022000 	.word	0x40022000

0800127c <UART_SendWeight_g>:

void UART_SendWeight_g(float rawData,float loadcell_slope,float loadcell_bias)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	; 0x38
 8001280:	af00      	add	r7, sp, #0
 8001282:	ed87 0a03 	vstr	s0, [r7, #12]
 8001286:	edc7 0a02 	vstr	s1, [r7, #8]
 800128a:	ed87 1a01 	vstr	s2, [r7, #4]
  float weight = loadcell_slope * rawData  + loadcell_bias;
 800128e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001292:	edd7 7a03 	vldr	s15, [r7, #12]
 8001296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129a:	ed97 7a01 	vldr	s14, [r7, #4]
 800129e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  char buffer[32];
  int data = sprintf(buffer, "%.2f", weight);
 80012a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80012a8:	f7ff f97e 	bl	80005a8 <__aeabi_f2d>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	f107 0010 	add.w	r0, r7, #16
 80012b4:	4908      	ldr	r1, [pc, #32]	; (80012d8 <UART_SendWeight_g+0x5c>)
 80012b6:	f00f fb47 	bl	8010948 <siprintf>
 80012ba:	6338      	str	r0, [r7, #48]	; 0x30
  // Send the buffer content via UART
#if 0
  int len = sprintf(buffer, "Weight(g):");
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
#endif
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, data, 1000);
 80012bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012be:	b29a      	uxth	r2, r3
 80012c0:	f107 0110 	add.w	r1, r7, #16
 80012c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c8:	4804      	ldr	r0, [pc, #16]	; (80012dc <UART_SendWeight_g+0x60>)
 80012ca:	f008 fa27 	bl	800971c <HAL_UART_Transmit>
}
 80012ce:	bf00      	nop
 80012d0:	3738      	adds	r7, #56	; 0x38
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	08015cf0 	.word	0x08015cf0
 80012dc:	2000b5b4 	.word	0x2000b5b4

080012e0 <DelayMicroseconds>:

  // Send the buffer content via UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
}
void DelayMicroseconds(uint32_t microseconds)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t ticks = microseconds;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	60fb      	str	r3, [r7, #12]
  while (ticks--)
 80012ec:	e000      	b.n	80012f0 <DelayMicroseconds+0x10>
  {
    __NOP();
 80012ee:	bf00      	nop
  while (ticks--)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1e5a      	subs	r2, r3, #1
 80012f4:	60fa      	str	r2, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f9      	bne.n	80012ee <DelayMicroseconds+0xe>
  }
}
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <MX_I2C1_Init+0x74>)
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <MX_I2C1_Init+0x78>)
 8001310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <MX_I2C1_Init+0x74>)
 8001314:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <MX_I2C1_Init+0x7c>)
 8001316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <MX_I2C1_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <MX_I2C1_Init+0x74>)
 8001320:	2201      	movs	r2, #1
 8001322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <MX_I2C1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <MX_I2C1_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_I2C1_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_I2C1_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_I2C1_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001342:	480e      	ldr	r0, [pc, #56]	; (800137c <MX_I2C1_Init+0x74>)
 8001344:	f002 fd98 	bl	8003e78 <HAL_I2C_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800134e:	f001 f9eb 	bl	8002728 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001352:	2100      	movs	r1, #0
 8001354:	4809      	ldr	r0, [pc, #36]	; (800137c <MX_I2C1_Init+0x74>)
 8001356:	f004 f8c5 	bl	80054e4 <HAL_I2CEx_ConfigAnalogFilter>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001360:	f001 f9e2 	bl	8002728 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001364:	2100      	movs	r1, #0
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_I2C1_Init+0x74>)
 8001368:	f004 f932 	bl	80055d0 <HAL_I2CEx_ConfigDigitalFilter>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001372:	f001 f9d9 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200005d0 	.word	0x200005d0
 8001380:	40005400 	.word	0x40005400
 8001384:	6000030d 	.word	0x6000030d

08001388 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b0aa      	sub	sp, #168	; 0xa8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	2284      	movs	r2, #132	; 0x84
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00e fc45 	bl	800fc38 <memset>
  if(i2cHandle->Instance==I2C1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a22      	ldr	r2, [pc, #136]	; (800143c <HAL_I2C_MspInit+0xb4>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d13c      	bne.n	8001432 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013be:	2300      	movs	r3, #0
 80013c0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	4618      	mov	r0, r3
 80013c8:	f004 ffc2 	bl	8006350 <HAL_RCCEx_PeriphCLKConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013d2:	f001 f9a9 	bl	8002728 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <HAL_I2C_MspInit+0xb8>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a19      	ldr	r2, [pc, #100]	; (8001440 <HAL_I2C_MspInit+0xb8>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_I2C_MspInit+0xb8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f6:	2312      	movs	r3, #18
 80013f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001408:	2304      	movs	r3, #4
 800140a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001412:	4619      	mov	r1, r3
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <HAL_I2C_MspInit+0xbc>)
 8001416:	f002 f94f 	bl	80036b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_I2C_MspInit+0xb8>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_I2C_MspInit+0xb8>)
 8001420:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_I2C_MspInit+0xb8>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001432:	bf00      	nop
 8001434:	37a8      	adds	r7, #168	; 0xa8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40005400 	.word	0x40005400
 8001440:	40023800 	.word	0x40023800
 8001444:	40020400 	.word	0x40020400

08001448 <Kalman_Init>:
 */


#include "kalman.h"

void Kalman_Init(KalmanFilter *kf, float Q, float R, float P, float initial_value) {
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6178      	str	r0, [r7, #20]
 8001450:	ed87 0a04 	vstr	s0, [r7, #16]
 8001454:	edc7 0a03 	vstr	s1, [r7, #12]
 8001458:	ed87 1a02 	vstr	s2, [r7, #8]
 800145c:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->Q = Q;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	601a      	str	r2, [r3, #0]
    kf->R = R;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	605a      	str	r2, [r3, #4]
    kf->P = P;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	609a      	str	r2, [r3, #8]
    kf->X = initial_value;
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	60da      	str	r2, [r3, #12]
}
 8001478:	bf00      	nop
 800147a:	371c      	adds	r7, #28
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <Kalman_Estimate>:

float Kalman_Estimate(KalmanFilter *kf, float measurement) {
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	ed87 0a00 	vstr	s0, [r7]
    // Prediction step: Update the error covariance 'P'
    // This is adding process noise to our uncertainty in the estimated state.
    kf->P = kf->P + kf->Q;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	ed93 7a02 	vldr	s14, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update step: Compute the Kalman Gain 'K'
    // Kalman Gain balances the ratio between the prediction and the new measurement
    kf->K = kf->P / (kf->P + kf->R);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	edc3 7a04 	vstr	s15, [r3, #16]

    // Update step: Update the state estimate 'X'
    // Here we adjust our state estimate based on the new measurement,
    // scaling the "innovation" by the Kalman Gain
    kf->X = kf->X + kf->K * (measurement - kf->X);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	edd3 6a04 	vldr	s13, [r3, #16]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80014d8:	ed97 6a00 	vldr	s12, [r7]
 80014dc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80014e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update step: Update the error covariance 'P'
    // We've used our observation, so we adjust our uncertainty accordingly
    kf->P = (1 - kf->K) * kf->P;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80014f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	edc3 7a02 	vstr	s15, [r3, #8]

    // Return the updated state estimate
    return kf->X;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	ee07 3a90 	vmov	s15, r3
}
 8001514:	eeb0 0a67 	vmov.f32	s0, s15
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <ProcessCommand>:
/* USER CODE BEGIN 0 */



void ProcessCommand(uint8_t *commandBuffer)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

    char *command = strtok((char*)commandBuffer, " "); // 명령어 분리
 800152c:	494a      	ldr	r1, [pc, #296]	; (8001658 <ProcessCommand+0x134>)
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f010 f8ce 	bl	80116d0 <strtok>
 8001534:	60f8      	str	r0, [r7, #12]

    // 'strtok'는 다음 호출 때 NULL을 사용하여 이전 문자열에서 계속 토큰을 추출
    char *argument = strtok(NULL, " "); // 인자 분리
 8001536:	4948      	ldr	r1, [pc, #288]	; (8001658 <ProcessCommand+0x134>)
 8001538:	2000      	movs	r0, #0
 800153a:	f010 f8c9 	bl	80116d0 <strtok>
 800153e:	60b8      	str	r0, [r7, #8]

    if (strcmp((char*)command, "echo") == 0) {
 8001540:	4946      	ldr	r1, [pc, #280]	; (800165c <ProcessCommand+0x138>)
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7fe fe64 	bl	8000210 <strcmp>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10b      	bne.n	8001566 <ProcessCommand+0x42>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "echo\n"), 100);
 800154e:	4944      	ldr	r1, [pc, #272]	; (8001660 <ProcessCommand+0x13c>)
 8001550:	4844      	ldr	r0, [pc, #272]	; (8001664 <ProcessCommand+0x140>)
 8001552:	f00f f9f9 	bl	8010948 <siprintf>
 8001556:	4603      	mov	r3, r0
 8001558:	b29a      	uxth	r2, r3
 800155a:	2364      	movs	r3, #100	; 0x64
 800155c:	4941      	ldr	r1, [pc, #260]	; (8001664 <ProcessCommand+0x140>)
 800155e:	4842      	ldr	r0, [pc, #264]	; (8001668 <ProcessCommand+0x144>)
 8001560:	f008 f8dc 	bl	800971c <HAL_UART_Transmit>
    }else if (strcmp((char*)command, "4") == 0) {
    	CalibrationCommand();
    }else{
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);
    }
}
 8001564:	e074      	b.n	8001650 <ProcessCommand+0x12c>
    }else if (strcmp((char*)command, "rev") == 0) {
 8001566:	4941      	ldr	r1, [pc, #260]	; (800166c <ProcessCommand+0x148>)
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7fe fe51 	bl	8000210 <strcmp>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d106      	bne.n	8001582 <ProcessCommand+0x5e>
		if (argument != NULL) {
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d06a      	beq.n	8001650 <ProcessCommand+0x12c>
			RevCommand(argument);
 800157a:	68b8      	ldr	r0, [r7, #8]
 800157c:	f000 f88c 	bl	8001698 <RevCommand>
}
 8001580:	e066      	b.n	8001650 <ProcessCommand+0x12c>
    }else if (strcmp((char*)command, "lin") == 0) {
 8001582:	493b      	ldr	r1, [pc, #236]	; (8001670 <ProcessCommand+0x14c>)
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f7fe fe43 	bl	8000210 <strcmp>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d103      	bne.n	8001598 <ProcessCommand+0x74>
    	LinCommand(argument);
 8001590:	68b8      	ldr	r0, [r7, #8]
 8001592:	f000 f8cd 	bl	8001730 <LinCommand>
}
 8001596:	e05b      	b.n	8001650 <ProcessCommand+0x12c>
    }else if (strcmp((char*)command, "servo") == 0) {
 8001598:	4936      	ldr	r1, [pc, #216]	; (8001674 <ProcessCommand+0x150>)
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f7fe fe38 	bl	8000210 <strcmp>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d103      	bne.n	80015ae <ProcessCommand+0x8a>
    	ServoCommand(argument);
 80015a6:	68b8      	ldr	r0, [r7, #8]
 80015a8:	f000 f910 	bl	80017cc <ServoCommand>
}
 80015ac:	e050      	b.n	8001650 <ProcessCommand+0x12c>
    }else if (strcmp((char*)command, "sensor") == 0) {
 80015ae:	4932      	ldr	r1, [pc, #200]	; (8001678 <ProcessCommand+0x154>)
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f7fe fe2d 	bl	8000210 <strcmp>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <ProcessCommand+0x9e>
    	SensorCommand();
 80015bc:	f000 f96a 	bl	8001894 <SensorCommand>
}
 80015c0:	e046      	b.n	8001650 <ProcessCommand+0x12c>
    }else if (strcmp((char*)command, "cali") == 0) {
 80015c2:	492e      	ldr	r1, [pc, #184]	; (800167c <ProcessCommand+0x158>)
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f7fe fe23 	bl	8000210 <strcmp>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <ProcessCommand+0xb2>
    	CalibrationCommand();
 80015d0:	f000 fbec 	bl	8001dac <CalibrationCommand>
}
 80015d4:	e03c      	b.n	8001650 <ProcessCommand+0x12c>
    }else if (strcmp((char*)command, "ini") == 0) {
 80015d6:	492a      	ldr	r1, [pc, #168]	; (8001680 <ProcessCommand+0x15c>)
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7fe fe19 	bl	8000210 <strcmp>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <ProcessCommand+0xc6>
    	InitializaionCalibrationCommand();
 80015e4:	f000 faa2 	bl	8001b2c <InitializaionCalibrationCommand>
}
 80015e8:	e032      	b.n	8001650 <ProcessCommand+0x12c>
    }else if (strcmp((char*)command, "preset") == 0) {
 80015ea:	4926      	ldr	r1, [pc, #152]	; (8001684 <ProcessCommand+0x160>)
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f7fe fe0f 	bl	8000210 <strcmp>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <ProcessCommand+0xda>
    	PresetCommand();
 80015f8:	f000 fd26 	bl	8002048 <PresetCommand>
}
 80015fc:	e028      	b.n	8001650 <ProcessCommand+0x12c>
    }else if (strcmp((char*)command, "2") == 0) {
 80015fe:	4922      	ldr	r1, [pc, #136]	; (8001688 <ProcessCommand+0x164>)
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7fe fe05 	bl	8000210 <strcmp>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <ProcessCommand+0xee>
    	CalibrationCommand();
 800160c:	f000 fbce 	bl	8001dac <CalibrationCommand>
}
 8001610:	e01e      	b.n	8001650 <ProcessCommand+0x12c>
    }else if (strcmp((char*)command, "3") == 0) {
 8001612:	491e      	ldr	r1, [pc, #120]	; (800168c <ProcessCommand+0x168>)
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7fe fdfb 	bl	8000210 <strcmp>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <ProcessCommand+0x102>
    	CalibrationCommand();
 8001620:	f000 fbc4 	bl	8001dac <CalibrationCommand>
}
 8001624:	e014      	b.n	8001650 <ProcessCommand+0x12c>
    }else if (strcmp((char*)command, "4") == 0) {
 8001626:	491a      	ldr	r1, [pc, #104]	; (8001690 <ProcessCommand+0x16c>)
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7fe fdf1 	bl	8000210 <strcmp>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <ProcessCommand+0x116>
    	CalibrationCommand();
 8001634:	f000 fbba 	bl	8001dac <CalibrationCommand>
}
 8001638:	e00a      	b.n	8001650 <ProcessCommand+0x12c>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);
 800163a:	4916      	ldr	r1, [pc, #88]	; (8001694 <ProcessCommand+0x170>)
 800163c:	4809      	ldr	r0, [pc, #36]	; (8001664 <ProcessCommand+0x140>)
 800163e:	f00f f983 	bl	8010948 <siprintf>
 8001642:	4603      	mov	r3, r0
 8001644:	b29a      	uxth	r2, r3
 8001646:	2364      	movs	r3, #100	; 0x64
 8001648:	4906      	ldr	r1, [pc, #24]	; (8001664 <ProcessCommand+0x140>)
 800164a:	4807      	ldr	r0, [pc, #28]	; (8001668 <ProcessCommand+0x144>)
 800164c:	f008 f866 	bl	800971c <HAL_UART_Transmit>
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	08015d0c 	.word	0x08015d0c
 800165c:	08015d10 	.word	0x08015d10
 8001660:	08015d18 	.word	0x08015d18
 8001664:	2000b530 	.word	0x2000b530
 8001668:	2000b5b4 	.word	0x2000b5b4
 800166c:	08015d20 	.word	0x08015d20
 8001670:	08015d24 	.word	0x08015d24
 8001674:	08015d28 	.word	0x08015d28
 8001678:	08015d30 	.word	0x08015d30
 800167c:	08015d38 	.word	0x08015d38
 8001680:	08015d40 	.word	0x08015d40
 8001684:	08015d44 	.word	0x08015d44
 8001688:	08015d4c 	.word	0x08015d4c
 800168c:	08015d50 	.word	0x08015d50
 8001690:	08015d54 	.word	0x08015d54
 8001694:	08015d58 	.word	0x08015d58

08001698 <RevCommand>:

void RevCommand(char *arg){
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
    int step_rev_angle;
    if(sscanf(arg, "%d", &step_rev_angle) == 1){
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	461a      	mov	r2, r3
 80016a6:	491c      	ldr	r1, [pc, #112]	; (8001718 <RevCommand+0x80>)
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f00f f96d 	bl	8010988 <siscanf>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d11e      	bne.n	80016f2 <RevCommand+0x5a>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg rev Still moving \n\r",step_rev_angle), 100);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	461a      	mov	r2, r3
 80016b8:	4918      	ldr	r1, [pc, #96]	; (800171c <RevCommand+0x84>)
 80016ba:	4819      	ldr	r0, [pc, #100]	; (8001720 <RevCommand+0x88>)
 80016bc:	f00f f944 	bl	8010948 <siprintf>
 80016c0:	4603      	mov	r3, r0
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	2364      	movs	r3, #100	; 0x64
 80016c6:	4916      	ldr	r1, [pc, #88]	; (8001720 <RevCommand+0x88>)
 80016c8:	4816      	ldr	r0, [pc, #88]	; (8001724 <RevCommand+0x8c>)
 80016ca:	f008 f827 	bl	800971c <HAL_UART_Transmit>
        stepRev(step_rev_angle);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f001 f839 	bl	8002748 <stepRev>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg rev End \n\r",step_rev_angle), 100);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	461a      	mov	r2, r3
 80016da:	4913      	ldr	r1, [pc, #76]	; (8001728 <RevCommand+0x90>)
 80016dc:	4810      	ldr	r0, [pc, #64]	; (8001720 <RevCommand+0x88>)
 80016de:	f00f f933 	bl	8010948 <siprintf>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	2364      	movs	r3, #100	; 0x64
 80016e8:	490d      	ldr	r1, [pc, #52]	; (8001720 <RevCommand+0x88>)
 80016ea:	480e      	ldr	r0, [pc, #56]	; (8001724 <RevCommand+0x8c>)
 80016ec:	f008 f816 	bl	800971c <HAL_UART_Transmit>
 80016f0:	e00a      	b.n	8001708 <RevCommand+0x70>
    }else{
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 80016f2:	490e      	ldr	r1, [pc, #56]	; (800172c <RevCommand+0x94>)
 80016f4:	480a      	ldr	r0, [pc, #40]	; (8001720 <RevCommand+0x88>)
 80016f6:	f00f f927 	bl	8010948 <siprintf>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	2364      	movs	r3, #100	; 0x64
 8001700:	4907      	ldr	r1, [pc, #28]	; (8001720 <RevCommand+0x88>)
 8001702:	4808      	ldr	r0, [pc, #32]	; (8001724 <RevCommand+0x8c>)
 8001704:	f008 f80a 	bl	800971c <HAL_UART_Transmit>
    }

    HAL_Delay(1000); // Delay for 1 second
 8001708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800170c:	f001 fdd0 	bl	80032b0 <HAL_Delay>
}
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	08015d78 	.word	0x08015d78
 800171c:	08015d7c 	.word	0x08015d7c
 8001720:	2000b530 	.word	0x2000b530
 8001724:	2000b5b4 	.word	0x2000b5b4
 8001728:	08015d98 	.word	0x08015d98
 800172c:	08015dac 	.word	0x08015dac

08001730 <LinCommand>:

void LinCommand(char *arg){
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
    int step_lin_dist = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
    if (sscanf(arg, "%d", &step_lin_dist) == 1) {
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	461a      	mov	r2, r3
 8001742:	491c      	ldr	r1, [pc, #112]	; (80017b4 <LinCommand+0x84>)
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f00f f91f 	bl	8010988 <siscanf>
 800174a:	4603      	mov	r3, r0
 800174c:	2b01      	cmp	r3, #1
 800174e:	d11e      	bne.n	800178e <LinCommand+0x5e>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin Still moving \n\r",step_lin_dist), 100);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	461a      	mov	r2, r3
 8001754:	4918      	ldr	r1, [pc, #96]	; (80017b8 <LinCommand+0x88>)
 8001756:	4819      	ldr	r0, [pc, #100]	; (80017bc <LinCommand+0x8c>)
 8001758:	f00f f8f6 	bl	8010948 <siprintf>
 800175c:	4603      	mov	r3, r0
 800175e:	b29a      	uxth	r2, r3
 8001760:	2364      	movs	r3, #100	; 0x64
 8001762:	4916      	ldr	r1, [pc, #88]	; (80017bc <LinCommand+0x8c>)
 8001764:	4816      	ldr	r0, [pc, #88]	; (80017c0 <LinCommand+0x90>)
 8001766:	f007 ffd9 	bl	800971c <HAL_UART_Transmit>
        stepLin(step_lin_dist);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4618      	mov	r0, r3
 800176e:	f001 f855 	bl	800281c <stepLin>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin End\n\r", step_lin_dist), 100);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	461a      	mov	r2, r3
 8001776:	4913      	ldr	r1, [pc, #76]	; (80017c4 <LinCommand+0x94>)
 8001778:	4810      	ldr	r0, [pc, #64]	; (80017bc <LinCommand+0x8c>)
 800177a:	f00f f8e5 	bl	8010948 <siprintf>
 800177e:	4603      	mov	r3, r0
 8001780:	b29a      	uxth	r2, r3
 8001782:	2364      	movs	r3, #100	; 0x64
 8001784:	490d      	ldr	r1, [pc, #52]	; (80017bc <LinCommand+0x8c>)
 8001786:	480e      	ldr	r0, [pc, #56]	; (80017c0 <LinCommand+0x90>)
 8001788:	f007 ffc8 	bl	800971c <HAL_UART_Transmit>
 800178c:	e00a      	b.n	80017a4 <LinCommand+0x74>
    } else {
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 800178e:	490e      	ldr	r1, [pc, #56]	; (80017c8 <LinCommand+0x98>)
 8001790:	480a      	ldr	r0, [pc, #40]	; (80017bc <LinCommand+0x8c>)
 8001792:	f00f f8d9 	bl	8010948 <siprintf>
 8001796:	4603      	mov	r3, r0
 8001798:	b29a      	uxth	r2, r3
 800179a:	2364      	movs	r3, #100	; 0x64
 800179c:	4907      	ldr	r1, [pc, #28]	; (80017bc <LinCommand+0x8c>)
 800179e:	4808      	ldr	r0, [pc, #32]	; (80017c0 <LinCommand+0x90>)
 80017a0:	f007 ffbc 	bl	800971c <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 80017a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017a8:	f001 fd82 	bl	80032b0 <HAL_Delay>
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	08015d78 	.word	0x08015d78
 80017b8:	08015dbc 	.word	0x08015dbc
 80017bc:	2000b530 	.word	0x2000b530
 80017c0:	2000b5b4 	.word	0x2000b5b4
 80017c4:	08015dd8 	.word	0x08015dd8
 80017c8:	08015dac 	.word	0x08015dac

080017cc <ServoCommand>:

void ServoCommand(char *arg){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
    float servo_angle_val = 0;
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
    if(sscanf(arg, "%f", &servo_angle_val) == 1) {
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	461a      	mov	r2, r3
 80017e0:	4925      	ldr	r1, [pc, #148]	; (8001878 <ServoCommand+0xac>)
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f00f f8d0 	bl	8010988 <siscanf>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d135      	bne.n	800185a <ServoCommand+0x8e>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo Still moving \n\r", servo_angle_val), 100);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fed9 	bl	80005a8 <__aeabi_f2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4920      	ldr	r1, [pc, #128]	; (800187c <ServoCommand+0xb0>)
 80017fc:	4820      	ldr	r0, [pc, #128]	; (8001880 <ServoCommand+0xb4>)
 80017fe:	f00f f8a3 	bl	8010948 <siprintf>
 8001802:	4603      	mov	r3, r0
 8001804:	b29a      	uxth	r2, r3
 8001806:	2364      	movs	r3, #100	; 0x64
 8001808:	491d      	ldr	r1, [pc, #116]	; (8001880 <ServoCommand+0xb4>)
 800180a:	481e      	ldr	r0, [pc, #120]	; (8001884 <ServoCommand+0xb8>)
 800180c:	f007 ff86 	bl	800971c <HAL_UART_Transmit>
    	servo_angle(&htim2, TIM_CHANNEL_1, servo_angle_val);
 8001810:	edd7 7a03 	vldr	s15, [r7, #12]
 8001814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001818:	ee17 2a90 	vmov	r2, s15
 800181c:	2100      	movs	r1, #0
 800181e:	481a      	ldr	r0, [pc, #104]	; (8001888 <ServoCommand+0xbc>)
 8001820:	f001 f896 	bl	8002950 <servo_angle>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo End \n\r", servo_angle_val), 100);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe febe 	bl	80005a8 <__aeabi_f2d>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4916      	ldr	r1, [pc, #88]	; (800188c <ServoCommand+0xc0>)
 8001832:	4813      	ldr	r0, [pc, #76]	; (8001880 <ServoCommand+0xb4>)
 8001834:	f00f f888 	bl	8010948 <siprintf>
 8001838:	4603      	mov	r3, r0
 800183a:	b29a      	uxth	r2, r3
 800183c:	2364      	movs	r3, #100	; 0x64
 800183e:	4910      	ldr	r1, [pc, #64]	; (8001880 <ServoCommand+0xb4>)
 8001840:	4810      	ldr	r0, [pc, #64]	; (8001884 <ServoCommand+0xb8>)
 8001842:	f007 ff6b 	bl	800971c <HAL_UART_Transmit>
        HAL_Delay(2000); // Delay for 2 seconds
 8001846:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800184a:	f001 fd31 	bl	80032b0 <HAL_Delay>
        servo_angle(&htim2, TIM_CHANNEL_1, 0); // return to servo origin
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	480d      	ldr	r0, [pc, #52]	; (8001888 <ServoCommand+0xbc>)
 8001854:	f001 f87c 	bl	8002950 <servo_angle>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
    }
}
 8001858:	e00a      	b.n	8001870 <ServoCommand+0xa4>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 800185a:	490d      	ldr	r1, [pc, #52]	; (8001890 <ServoCommand+0xc4>)
 800185c:	4808      	ldr	r0, [pc, #32]	; (8001880 <ServoCommand+0xb4>)
 800185e:	f00f f873 	bl	8010948 <siprintf>
 8001862:	4603      	mov	r3, r0
 8001864:	b29a      	uxth	r2, r3
 8001866:	2364      	movs	r3, #100	; 0x64
 8001868:	4905      	ldr	r1, [pc, #20]	; (8001880 <ServoCommand+0xb4>)
 800186a:	4806      	ldr	r0, [pc, #24]	; (8001884 <ServoCommand+0xb8>)
 800186c:	f007 ff56 	bl	800971c <HAL_UART_Transmit>
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	08015de8 	.word	0x08015de8
 800187c:	08015dec 	.word	0x08015dec
 8001880:	2000b530 	.word	0x2000b530
 8001884:	2000b5b4 	.word	0x2000b5b4
 8001888:	2000b498 	.word	0x2000b498
 800188c:	08015e08 	.word	0x08015e08
 8001890:	08015dac 	.word	0x08015dac

08001894 <SensorCommand>:


void SensorCommand(){
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	; 0x30
 8001898:	af02      	add	r7, sp, #8

	uint32_t start_section_time, end_section_time,elapsed_section_time;
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 800189a:	498d      	ldr	r1, [pc, #564]	; (8001ad0 <SensorCommand+0x23c>)
 800189c:	488d      	ldr	r0, [pc, #564]	; (8001ad4 <SensorCommand+0x240>)
 800189e:	f00f f853 	bl	8010948 <siprintf>
 80018a2:	4603      	mov	r3, r0
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	2364      	movs	r3, #100	; 0x64
 80018a8:	498a      	ldr	r1, [pc, #552]	; (8001ad4 <SensorCommand+0x240>)
 80018aa:	488b      	ldr	r0, [pc, #556]	; (8001ad8 <SensorCommand+0x244>)
 80018ac:	f007 ff36 	bl	800971c <HAL_UART_Transmit>

    start_time = HAL_GetTick();
 80018b0:	f001 fcf2 	bl	8003298 <HAL_GetTick>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a89      	ldr	r2, [pc, #548]	; (8001adc <SensorCommand+0x248>)
 80018b8:	6013      	str	r3, [r2, #0]
    for(int count =0; count < NUM_READINGS; count++){
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	e0fa      	b.n	8001ab6 <SensorCommand+0x222>
  	  start_section_time = HAL_GetTick();
 80018c0:	f001 fcea 	bl	8003298 <HAL_GetTick>
 80018c4:	61b8      	str	r0, [r7, #24]

  	  /// Read the VL53l0x data ///
  	 for (int i = 0; i < NUM_SENSOR; i++) {
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
 80018ca:	e0ab      	b.n	8001a24 <SensorCommand+0x190>
		uint8_t q = i / 12;
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	4a84      	ldr	r2, [pc, #528]	; (8001ae0 <SensorCommand+0x24c>)
 80018d0:	fb82 1203 	smull	r1, r2, r2, r3
 80018d4:	1052      	asrs	r2, r2, #1
 80018d6:	17db      	asrs	r3, r3, #31
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	71fb      	strb	r3, [r7, #7]
		uint8_t r = i % 12;
 80018dc:	6a3a      	ldr	r2, [r7, #32]
 80018de:	4b80      	ldr	r3, [pc, #512]	; (8001ae0 <SensorCommand+0x24c>)
 80018e0:	fb83 1302 	smull	r1, r3, r3, r2
 80018e4:	1059      	asrs	r1, r3, #1
 80018e6:	17d3      	asrs	r3, r2, #31
 80018e8:	1ac9      	subs	r1, r1, r3
 80018ea:	460b      	mov	r3, r1
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	440b      	add	r3, r1
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	1ad1      	subs	r1, r2, r3
 80018f4:	460b      	mov	r3, r1
 80018f6:	71bb      	strb	r3, [r7, #6]
		uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	79ba      	ldrb	r2, [r7, #6]
 8001900:	2a07      	cmp	r2, #7
 8001902:	bf8c      	ite	hi
 8001904:	2201      	movhi	r2, #1
 8001906:	2200      	movls	r2, #0
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	4413      	add	r3, r2
 800190c:	717b      	strb	r3, [r7, #5]
		uint8_t channel = (r >= 8) ? r - 8 : r;
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	2b07      	cmp	r3, #7
 8001912:	d903      	bls.n	800191c <SensorCommand+0x88>
 8001914:	79bb      	ldrb	r3, [r7, #6]
 8001916:	3b08      	subs	r3, #8
 8001918:	b2db      	uxtb	r3, r3
 800191a:	e000      	b.n	800191e <SensorCommand+0x8a>
 800191c:	79bb      	ldrb	r3, [r7, #6]
 800191e:	713b      	strb	r3, [r7, #4]

		//Reset device except active
		for (int j = 0; j < sizeof(tca_addr); ++j) {
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
 8001924:	e015      	b.n	8001952 <SensorCommand+0xbe>
			   if (j != active_device) {
 8001926:	797b      	ldrb	r3, [r7, #5]
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	429a      	cmp	r2, r3
 800192c:	d00e      	beq.n	800194c <SensorCommand+0xb8>
				   HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 800192e:	4a6d      	ldr	r2, [pc, #436]	; (8001ae4 <SensorCommand+0x250>)
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	4413      	add	r3, r2
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b29b      	uxth	r3, r3
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	b299      	uxth	r1, r3
 800193c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2301      	movs	r3, #1
 8001944:	4a68      	ldr	r2, [pc, #416]	; (8001ae8 <SensorCommand+0x254>)
 8001946:	4869      	ldr	r0, [pc, #420]	; (8001aec <SensorCommand+0x258>)
 8001948:	f002 fbb8 	bl	80040bc <HAL_I2C_Master_Transmit>
		for (int j = 0; j < sizeof(tca_addr); ++j) {
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	3301      	adds	r3, #1
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	2b05      	cmp	r3, #5
 8001956:	d9e6      	bls.n	8001926 <SensorCommand+0x92>
			   }
		   }

		// set channel of active device
		HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 8001958:	797b      	ldrb	r3, [r7, #5]
 800195a:	4a62      	ldr	r2, [pc, #392]	; (8001ae4 <SensorCommand+0x250>)
 800195c:	5cd3      	ldrb	r3, [r2, r3]
 800195e:	b29b      	uxth	r3, r3
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	b299      	uxth	r1, r3
 8001964:	793b      	ldrb	r3, [r7, #4]
 8001966:	4a62      	ldr	r2, [pc, #392]	; (8001af0 <SensorCommand+0x25c>)
 8001968:	441a      	add	r2, r3
 800196a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2301      	movs	r3, #1
 8001972:	485e      	ldr	r0, [pc, #376]	; (8001aec <SensorCommand+0x258>)
 8001974:	f002 fba2 	bl	80040bc <HAL_I2C_Master_Transmit>
		  Dev = &vl53l0x_s[i];
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800197e:	fb02 f303 	mul.w	r3, r2, r3
 8001982:	4a5c      	ldr	r2, [pc, #368]	; (8001af4 <SensorCommand+0x260>)
 8001984:	4413      	add	r3, r2
 8001986:	4a5c      	ldr	r2, [pc, #368]	; (8001af8 <SensorCommand+0x264>)
 8001988:	6013      	str	r3, [r2, #0]
		  VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 800198a:	4b5b      	ldr	r3, [pc, #364]	; (8001af8 <SensorCommand+0x264>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	495b      	ldr	r1, [pc, #364]	; (8001afc <SensorCommand+0x268>)
 8001990:	4618      	mov	r0, r3
 8001992:	f00a fda8 	bl	800c4e6 <VL53L0X_PerformContinuousRangingMeasurement>

		  if (RangingData.RangeStatus == 0) {
 8001996:	4b59      	ldr	r3, [pc, #356]	; (8001afc <SensorCommand+0x268>)
 8001998:	7e1b      	ldrb	r3, [r3, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d13f      	bne.n	8001a1e <SensorCommand+0x18a>
			  if (RangingData.RangeMilliMeter < 80) {
 800199e:	4b57      	ldr	r3, [pc, #348]	; (8001afc <SensorCommand+0x268>)
 80019a0:	891b      	ldrh	r3, [r3, #8]
 80019a2:	2b4f      	cmp	r3, #79	; 0x4f
 80019a4:	d83b      	bhi.n	8001a1e <SensorCommand+0x18a>
				  float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 80019a6:	6a3a      	ldr	r2, [r7, #32]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4a53      	ldr	r2, [pc, #332]	; (8001b00 <SensorCommand+0x26c>)
 80019b2:	4413      	add	r3, r2
 80019b4:	4a51      	ldr	r2, [pc, #324]	; (8001afc <SensorCommand+0x268>)
 80019b6:	8912      	ldrh	r2, [r2, #8]
 80019b8:	ee07 2a90 	vmov	s15, r2
 80019bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c0:	eeb0 0a67 	vmov.f32	s0, s15
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fd5d 	bl	8001484 <Kalman_Estimate>
 80019ca:	ed87 0a00 	vstr	s0, [r7]
				  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue), 500);
 80019ce:	6838      	ldr	r0, [r7, #0]
 80019d0:	f7fe fdea 	bl	80005a8 <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	494a      	ldr	r1, [pc, #296]	; (8001b04 <SensorCommand+0x270>)
 80019da:	483e      	ldr	r0, [pc, #248]	; (8001ad4 <SensorCommand+0x240>)
 80019dc:	f00e ffb4 	bl	8010948 <siprintf>
 80019e0:	4603      	mov	r3, r0
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019e8:	493a      	ldr	r1, [pc, #232]	; (8001ad4 <SensorCommand+0x240>)
 80019ea:	483b      	ldr	r0, [pc, #236]	; (8001ad8 <SensorCommand+0x244>)
 80019ec:	f007 fe96 	bl	800971c <HAL_UART_Transmit>
                  sensorValues[i][readingCount[i]] = filteredValue; // 값을 저장
 80019f0:	4a45      	ldr	r2, [pc, #276]	; (8001b08 <SensorCommand+0x274>)
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f8:	4944      	ldr	r1, [pc, #272]	; (8001b0c <SensorCommand+0x278>)
 80019fa:	6a3a      	ldr	r2, [r7, #32]
 80019fc:	20c8      	movs	r0, #200	; 0xc8
 80019fe:	fb00 f202 	mul.w	r2, r0, r2
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	601a      	str	r2, [r3, #0]
                  readingCount[i]++;
 8001a0c:	4a3e      	ldr	r2, [pc, #248]	; (8001b08 <SensorCommand+0x274>)
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	493c      	ldr	r1, [pc, #240]	; (8001b08 <SensorCommand+0x274>)
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  	 for (int i = 0; i < NUM_SENSOR; i++) {
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	3301      	adds	r3, #1
 8001a22:	623b      	str	r3, [r7, #32]
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	2b23      	cmp	r3, #35	; 0x23
 8001a28:	f77f af50 	ble.w	80018cc <SensorCommand+0x38>
			  }
		  }

	  }

	  end_section_time = HAL_GetTick();
 8001a2c:	f001 fc34 	bl	8003298 <HAL_GetTick>
 8001a30:	6178      	str	r0, [r7, #20]
	  elapsed_section_time = end_section_time - start_section_time;
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	613b      	str	r3, [r7, #16]
	  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ms ", elapsed_section_time), 100);
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4934      	ldr	r1, [pc, #208]	; (8001b10 <SensorCommand+0x27c>)
 8001a3e:	4825      	ldr	r0, [pc, #148]	; (8001ad4 <SensorCommand+0x240>)
 8001a40:	f00e ff82 	bl	8010948 <siprintf>
 8001a44:	4603      	mov	r3, r0
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	2364      	movs	r3, #100	; 0x64
 8001a4a:	4922      	ldr	r1, [pc, #136]	; (8001ad4 <SensorCommand+0x240>)
 8001a4c:	4822      	ldr	r0, [pc, #136]	; (8001ad8 <SensorCommand+0x244>)
 8001a4e:	f007 fe65 	bl	800971c <HAL_UART_Transmit>


	  /// End of Reading and Filtering Vl53l0x data ///

	  /// Read the raw data from HX711 ///
	  rawData = Read_HX711();
 8001a52:	f7ff fbc5 	bl	80011e0 <Read_HX711>
 8001a56:	ee07 0a90 	vmov	s15, r0
 8001a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a5e:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <SensorCommand+0x280>)
 8001a60:	edc3 7a00 	vstr	s15, [r3]
	  float loadcell_slope = -1/1600.00f; // Convert the raw data to weight (replace the calibration factor with your own)
 8001a64:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <SensorCommand+0x284>)
 8001a66:	60fb      	str	r3, [r7, #12]
	  float loadcell_bias = 10002;
 8001a68:	4b2c      	ldr	r3, [pc, #176]	; (8001b1c <SensorCommand+0x288>)
 8001a6a:	60bb      	str	r3, [r7, #8]
	  UART_SendWeight_g(rawData,loadcell_slope,loadcell_bias); // Send the weight data over UART
 8001a6c:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <SensorCommand+0x280>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	ed97 1a02 	vldr	s2, [r7, #8]
 8001a76:	edd7 0a03 	vldr	s1, [r7, #12]
 8001a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7e:	f7ff fbfd 	bl	800127c <UART_SendWeight_g>
	  /// End of Reading HX711 data ///

	  end_time = HAL_GetTick(); // 종료 ?���??? 측정
 8001a82:	f001 fc09 	bl	8003298 <HAL_GetTick>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4a25      	ldr	r2, [pc, #148]	; (8001b20 <SensorCommand+0x28c>)
 8001a8a:	6013      	str	r3, [r2, #0]
	  time_diff = end_time - start_time; // ?���??? 차이 계산
 8001a8c:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <SensorCommand+0x28c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <SensorCommand+0x248>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	4a23      	ldr	r2, [pc, #140]	; (8001b24 <SensorCommand+0x290>)
 8001a98:	6013      	str	r3, [r2, #0]

	  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8001a9a:	4923      	ldr	r1, [pc, #140]	; (8001b28 <SensorCommand+0x294>)
 8001a9c:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <SensorCommand+0x240>)
 8001a9e:	f00e ff53 	bl	8010948 <siprintf>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	2364      	movs	r3, #100	; 0x64
 8001aa8:	490a      	ldr	r1, [pc, #40]	; (8001ad4 <SensorCommand+0x240>)
 8001aaa:	480b      	ldr	r0, [pc, #44]	; (8001ad8 <SensorCommand+0x244>)
 8001aac:	f007 fe36 	bl	800971c <HAL_UART_Transmit>
    for(int count =0; count < NUM_READINGS; count++){
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	2bc7      	cmp	r3, #199	; 0xc7
 8001aba:	f77f af01 	ble.w	80018c0 <SensorCommand+0x2c>
    }
    TransmitStats();
 8001abe:	f000 fcd7 	bl	8002470 <TransmitStats>
    ResetSensorData();
 8001ac2:	f000 fd23 	bl	800250c <ResetSensorData>

}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	; 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	08015e1c 	.word	0x08015e1c
 8001ad4:	2000b530 	.word	0x2000b530
 8001ad8:	2000b5b4 	.word	0x2000b5b4
 8001adc:	2000b48c 	.word	0x2000b48c
 8001ae0:	2aaaaaab 	.word	0x2aaaaaab
 8001ae4:	20000104 	.word	0x20000104
 8001ae8:	2000b1b0 	.word	0x2000b1b0
 8001aec:	200005d0 	.word	0x200005d0
 8001af0:	200000fc 	.word	0x200000fc
 8001af4:	2000796c 	.word	0x2000796c
 8001af8:	2000b1ac 	.word	0x2000b1ac
 8001afc:	20000624 	.word	0x20000624
 8001b00:	2000b1b4 	.word	0x2000b1b4
 8001b04:	08015e2c 	.word	0x08015e2c
 8001b08:	200077e0 	.word	0x200077e0
 8001b0c:	20000640 	.word	0x20000640
 8001b10:	08015e34 	.word	0x08015e34
 8001b14:	2000b484 	.word	0x2000b484
 8001b18:	ba23d70a 	.word	0xba23d70a
 8001b1c:	461c4800 	.word	0x461c4800
 8001b20:	2000b490 	.word	0x2000b490
 8001b24:	2000b488 	.word	0x2000b488
 8001b28:	08015e3c 	.word	0x08015e3c

08001b2c <InitializaionCalibrationCommand>:
		 stepLin(-8); // moving horizontal
  	 }
}

void InitializaionCalibrationCommand()
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af02      	add	r7, sp, #8

    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	e011      	b.n	8001b5c <InitializaionCalibrationCommand+0x30>
        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8001b38:	4a89      	ldr	r2, [pc, #548]	; (8001d60 <InitializaionCalibrationCommand+0x234>)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	b299      	uxth	r1, r3
 8001b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	4a85      	ldr	r2, [pc, #532]	; (8001d64 <InitializaionCalibrationCommand+0x238>)
 8001b50:	4885      	ldr	r0, [pc, #532]	; (8001d68 <InitializaionCalibrationCommand+0x23c>)
 8001b52:	f002 fab3 	bl	80040bc <HAL_I2C_Master_Transmit>
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b05      	cmp	r3, #5
 8001b60:	d9ea      	bls.n	8001b38 <InitializaionCalibrationCommand+0xc>
    }

  	for (int i = 0; i < NUM_SENSOR; i++) {
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	e0f1      	b.n	8001d4c <InitializaionCalibrationCommand+0x220>

  	    uint8_t q = i / 12;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4a80      	ldr	r2, [pc, #512]	; (8001d6c <InitializaionCalibrationCommand+0x240>)
 8001b6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b70:	1052      	asrs	r2, r2, #1
 8001b72:	17db      	asrs	r3, r3, #31
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	70fb      	strb	r3, [r7, #3]
  	    uint8_t r = i % 12;
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	4b7c      	ldr	r3, [pc, #496]	; (8001d6c <InitializaionCalibrationCommand+0x240>)
 8001b7c:	fb83 1302 	smull	r1, r3, r3, r2
 8001b80:	1059      	asrs	r1, r3, #1
 8001b82:	17d3      	asrs	r3, r2, #31
 8001b84:	1ac9      	subs	r1, r1, r3
 8001b86:	460b      	mov	r3, r1
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	440b      	add	r3, r1
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	1ad1      	subs	r1, r2, r3
 8001b90:	460b      	mov	r3, r1
 8001b92:	70bb      	strb	r3, [r7, #2]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	78ba      	ldrb	r2, [r7, #2]
 8001b9c:	2a07      	cmp	r2, #7
 8001b9e:	bf8c      	ite	hi
 8001ba0:	2201      	movhi	r2, #1
 8001ba2:	2200      	movls	r2, #0
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	707b      	strb	r3, [r7, #1]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8001baa:	78bb      	ldrb	r3, [r7, #2]
 8001bac:	2b07      	cmp	r3, #7
 8001bae:	d903      	bls.n	8001bb8 <InitializaionCalibrationCommand+0x8c>
 8001bb0:	78bb      	ldrb	r3, [r7, #2]
 8001bb2:	3b08      	subs	r3, #8
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	e000      	b.n	8001bba <InitializaionCalibrationCommand+0x8e>
 8001bb8:	78bb      	ldrb	r3, [r7, #2]
 8001bba:	703b      	strb	r3, [r7, #0]

  	    //Reset device except active
  	    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	e015      	b.n	8001bee <InitializaionCalibrationCommand+0xc2>
  	           if (j != active_device) {
 8001bc2:	787b      	ldrb	r3, [r7, #1]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d00e      	beq.n	8001be8 <InitializaionCalibrationCommand+0xbc>
  	               HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8001bca:	4a65      	ldr	r2, [pc, #404]	; (8001d60 <InitializaionCalibrationCommand+0x234>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	b299      	uxth	r1, r3
 8001bd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	2301      	movs	r3, #1
 8001be0:	4a60      	ldr	r2, [pc, #384]	; (8001d64 <InitializaionCalibrationCommand+0x238>)
 8001be2:	4861      	ldr	r0, [pc, #388]	; (8001d68 <InitializaionCalibrationCommand+0x23c>)
 8001be4:	f002 fa6a 	bl	80040bc <HAL_I2C_Master_Transmit>
  	    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3301      	adds	r3, #1
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d9e6      	bls.n	8001bc2 <InitializaionCalibrationCommand+0x96>
  	           }
  	       }

  	    // set channel of active device
  	    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 8001bf4:	787b      	ldrb	r3, [r7, #1]
 8001bf6:	4a5a      	ldr	r2, [pc, #360]	; (8001d60 <InitializaionCalibrationCommand+0x234>)
 8001bf8:	5cd3      	ldrb	r3, [r2, r3]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	b299      	uxth	r1, r3
 8001c00:	783b      	ldrb	r3, [r7, #0]
 8001c02:	4a5b      	ldr	r2, [pc, #364]	; (8001d70 <InitializaionCalibrationCommand+0x244>)
 8001c04:	441a      	add	r2, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	4856      	ldr	r0, [pc, #344]	; (8001d68 <InitializaionCalibrationCommand+0x23c>)
 8001c10:	f002 fa54 	bl	80040bc <HAL_I2C_Master_Transmit>


  		Dev = &vl53l0x_s[i];
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001c1a:	fb02 f303 	mul.w	r3, r2, r3
 8001c1e:	4a55      	ldr	r2, [pc, #340]	; (8001d74 <InitializaionCalibrationCommand+0x248>)
 8001c20:	4413      	add	r3, r2
 8001c22:	4a55      	ldr	r2, [pc, #340]	; (8001d78 <InitializaionCalibrationCommand+0x24c>)
 8001c24:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 8001c26:	4b54      	ldr	r3, [pc, #336]	; (8001d78 <InitializaionCalibrationCommand+0x24c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a4f      	ldr	r2, [pc, #316]	; (8001d68 <InitializaionCalibrationCommand+0x23c>)
 8001c2c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 8001c30:	4b51      	ldr	r3, [pc, #324]	; (8001d78 <InitializaionCalibrationCommand+0x24c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2252      	movs	r2, #82	; 0x52
 8001c36:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 8001c3a:	4b4f      	ldr	r3, [pc, #316]	; (8001d78 <InitializaionCalibrationCommand+0x24c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f009 fa8e 	bl	800b160 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 8001c44:	4b4c      	ldr	r3, [pc, #304]	; (8001d78 <InitializaionCalibrationCommand+0x24c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f008 ffa3 	bl	800ab94 <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 8001c4e:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <InitializaionCalibrationCommand+0x24c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f009 f902 	bl	800ae5c <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8001c58:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <InitializaionCalibrationCommand+0x24c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f009 fb1c 	bl	800b29c <VL53L0X_SetDeviceMode>
  		VL53L0X_PerformRefCalibration( Dev, &VhvSettings[i], &PhaseCal[i]);
 8001c64:	4b44      	ldr	r3, [pc, #272]	; (8001d78 <InitializaionCalibrationCommand+0x24c>)
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4a44      	ldr	r2, [pc, #272]	; (8001d7c <InitializaionCalibrationCommand+0x250>)
 8001c6c:	1899      	adds	r1, r3, r2
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	4a43      	ldr	r2, [pc, #268]	; (8001d80 <InitializaionCalibrationCommand+0x254>)
 8001c72:	4413      	add	r3, r2
 8001c74:	461a      	mov	r2, r3
 8001c76:	f009 ff93 	bl	800bba0 <VL53L0X_PerformRefCalibration>
  		VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount[i], &isApertureSpads[i]);
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <InitializaionCalibrationCommand+0x24c>)
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4a40      	ldr	r2, [pc, #256]	; (8001d84 <InitializaionCalibrationCommand+0x258>)
 8001c84:	1899      	adds	r1, r3, r2
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	4a3f      	ldr	r2, [pc, #252]	; (8001d88 <InitializaionCalibrationCommand+0x25c>)
 8001c8a:	4413      	add	r3, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	f00a fc15 	bl	800c4bc <VL53L0X_PerformRefSpadManagement>
  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8001c92:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <InitializaionCalibrationCommand+0x24c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f009 fd7a 	bl	800b794 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8001ca0:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <InitializaionCalibrationCommand+0x24c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f009 fd73 	bl	800b794 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8001cae:	4b32      	ldr	r3, [pc, #200]	; (8001d78 <InitializaionCalibrationCommand+0x24c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f641 1299 	movw	r2, #6553	; 0x1999
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f009 fe1b 	bl	800b8f4 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8001cbe:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <InitializaionCalibrationCommand+0x24c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f009 fe13 	bl	800b8f4 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 8001cce:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <InitializaionCalibrationCommand+0x24c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f009 fb3e 	bl	800b358 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001cdc:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <InitializaionCalibrationCommand+0x24c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2212      	movs	r2, #18
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f009 fb5d 	bl	800b3a4 <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001cea:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <InitializaionCalibrationCommand+0x24c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	220e      	movs	r2, #14
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f009 fb56 	bl	800b3a4 <VL53L0X_SetVcselPulsePeriod>


  		// KalmanFilter initializer BEGIN //
          Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기값
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <InitializaionCalibrationCommand+0x260>)
 8001d04:	4413      	add	r3, r2
 8001d06:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <InitializaionCalibrationCommand+0x264>)
 8001d08:	edd2 7a00 	vldr	s15, [r2]
 8001d0c:	4a21      	ldr	r2, [pc, #132]	; (8001d94 <InitializaionCalibrationCommand+0x268>)
 8001d0e:	ed92 7a00 	vldr	s14, [r2]
 8001d12:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <InitializaionCalibrationCommand+0x26c>)
 8001d14:	edd2 6a00 	vldr	s13, [r2]
 8001d18:	eddf 1a20 	vldr	s3, [pc, #128]	; 8001d9c <InitializaionCalibrationCommand+0x270>
 8001d1c:	eeb0 1a66 	vmov.f32	s2, s13
 8001d20:	eef0 0a47 	vmov.f32	s1, s14
 8001d24:	eeb0 0a67 	vmov.f32	s0, s15
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fb8d 	bl	8001448 <Kalman_Init>
  		// KalmanFilter initializer END //
  		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d complete \n\r",i), 100);
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	491b      	ldr	r1, [pc, #108]	; (8001da0 <InitializaionCalibrationCommand+0x274>)
 8001d32:	481c      	ldr	r0, [pc, #112]	; (8001da4 <InitializaionCalibrationCommand+0x278>)
 8001d34:	f00e fe08 	bl	8010948 <siprintf>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	2364      	movs	r3, #100	; 0x64
 8001d3e:	4919      	ldr	r1, [pc, #100]	; (8001da4 <InitializaionCalibrationCommand+0x278>)
 8001d40:	4819      	ldr	r0, [pc, #100]	; (8001da8 <InitializaionCalibrationCommand+0x27c>)
 8001d42:	f007 fceb 	bl	800971c <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b23      	cmp	r3, #35	; 0x23
 8001d50:	f77f af0a 	ble.w	8001b68 <InitializaionCalibrationCommand+0x3c>
  	}

}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000104 	.word	0x20000104
 8001d64:	2000b1b0 	.word	0x2000b1b0
 8001d68:	200005d0 	.word	0x200005d0
 8001d6c:	2aaaaaab 	.word	0x2aaaaaab
 8001d70:	200000fc 	.word	0x200000fc
 8001d74:	2000796c 	.word	0x2000796c
 8001d78:	2000b1ac 	.word	0x2000b1ac
 8001d7c:	20007924 	.word	0x20007924
 8001d80:	20007948 	.word	0x20007948
 8001d84:	20007870 	.word	0x20007870
 8001d88:	20007900 	.word	0x20007900
 8001d8c:	2000b1b4 	.word	0x2000b1b4
 8001d90:	2000010c 	.word	0x2000010c
 8001d94:	20000110 	.word	0x20000110
 8001d98:	20000114 	.word	0x20000114
 8001d9c:	00000000 	.word	0x00000000
 8001da0:	08015e70 	.word	0x08015e70
 8001da4:	2000b530 	.word	0x2000b530
 8001da8:	2000b5b4 	.word	0x2000b5b4

08001dac <CalibrationCommand>:

void CalibrationCommand() {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8001db2:	af00      	add	r7, sp, #0
    // refSpadCount 배열 출력
    char buffer[1024]; // 충분한 크기의 버퍼를 확보합니다. 필요에 따라 크기 조정이 필요할 수 있습니다.
    uint8_t messageLength = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    uint8_t NUM = NUM_SENSOR;
 8001dba:	2324      	movs	r3, #36	; 0x24
 8001dbc:	f887 3403 	strb.w	r3, [r7, #1027]	; 0x403

    messageLength = sprintf(buffer, "uint32_t refSpadCount[%d] = { ",NUM);
 8001dc0:	f897 2403 	ldrb.w	r2, [r7, #1027]	; 0x403
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	4992      	ldr	r1, [pc, #584]	; (8002010 <CalibrationCommand+0x264>)
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00e fdbd 	bl	8010948 <siprintf>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    for(int i = 0; i < NUM_SENSOR; i++) {
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8001dda:	e01e      	b.n	8001e1a <CalibrationCommand+0x6e>
        messageLength += sprintf(buffer + messageLength, "%lu%s", refSpadCount[i], (i < NUM_SENSOR - 1) ? ", " : " ");
 8001ddc:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001de0:	463a      	mov	r2, r7
 8001de2:	18d0      	adds	r0, r2, r3
 8001de4:	4a8b      	ldr	r2, [pc, #556]	; (8002014 <CalibrationCommand+0x268>)
 8001de6:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001dea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dee:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001df2:	2b22      	cmp	r3, #34	; 0x22
 8001df4:	dc01      	bgt.n	8001dfa <CalibrationCommand+0x4e>
 8001df6:	4b88      	ldr	r3, [pc, #544]	; (8002018 <CalibrationCommand+0x26c>)
 8001df8:	e000      	b.n	8001dfc <CalibrationCommand+0x50>
 8001dfa:	4b88      	ldr	r3, [pc, #544]	; (800201c <CalibrationCommand+0x270>)
 8001dfc:	4988      	ldr	r1, [pc, #544]	; (8002020 <CalibrationCommand+0x274>)
 8001dfe:	f00e fda3 	bl	8010948 <siprintf>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    for(int i = 0; i < NUM_SENSOR; i++) {
 8001e10:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001e14:	3301      	adds	r3, #1
 8001e16:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8001e1a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001e1e:	2b23      	cmp	r3, #35	; 0x23
 8001e20:	dddc      	ble.n	8001ddc <CalibrationCommand+0x30>
    }
    messageLength += sprintf(buffer + messageLength, "};\n");
 8001e22:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001e26:	463a      	mov	r2, r7
 8001e28:	4413      	add	r3, r2
 8001e2a:	497e      	ldr	r1, [pc, #504]	; (8002024 <CalibrationCommand+0x278>)
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f00e fd8b 	bl	8010948 <siprintf>
 8001e32:	4603      	mov	r3, r0
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, messageLength, 100);
 8001e40:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4639      	mov	r1, r7
 8001e48:	2364      	movs	r3, #100	; 0x64
 8001e4a:	4877      	ldr	r0, [pc, #476]	; (8002028 <CalibrationCommand+0x27c>)
 8001e4c:	f007 fc66 	bl	800971c <HAL_UART_Transmit>

    // isApertureSpads 배열 출력
    messageLength = sprintf(buffer, "uint8_t isApertureSpads[%d] = { ",NUM);
 8001e50:	f897 2403 	ldrb.w	r2, [r7, #1027]	; 0x403
 8001e54:	463b      	mov	r3, r7
 8001e56:	4975      	ldr	r1, [pc, #468]	; (800202c <CalibrationCommand+0x280>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f00e fd75 	bl	8010948 <siprintf>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    for(int i = 0; i < NUM_SENSOR; i++) {
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001e6a:	e01f      	b.n	8001eac <CalibrationCommand+0x100>
        messageLength += sprintf(buffer + messageLength, "%d%s", isApertureSpads[i], (i < NUM_SENSOR - 1) ? ", " : " ");
 8001e6c:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001e70:	463a      	mov	r2, r7
 8001e72:	18d0      	adds	r0, r2, r3
 8001e74:	4a6e      	ldr	r2, [pc, #440]	; (8002030 <CalibrationCommand+0x284>)
 8001e76:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001e7a:	4413      	add	r3, r2
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001e84:	2b22      	cmp	r3, #34	; 0x22
 8001e86:	dc01      	bgt.n	8001e8c <CalibrationCommand+0xe0>
 8001e88:	4b63      	ldr	r3, [pc, #396]	; (8002018 <CalibrationCommand+0x26c>)
 8001e8a:	e000      	b.n	8001e8e <CalibrationCommand+0xe2>
 8001e8c:	4b63      	ldr	r3, [pc, #396]	; (800201c <CalibrationCommand+0x270>)
 8001e8e:	4969      	ldr	r1, [pc, #420]	; (8002034 <CalibrationCommand+0x288>)
 8001e90:	f00e fd5a 	bl	8010948 <siprintf>
 8001e94:	4603      	mov	r3, r0
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    for(int i = 0; i < NUM_SENSOR; i++) {
 8001ea2:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001eac:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001eb0:	2b23      	cmp	r3, #35	; 0x23
 8001eb2:	dddb      	ble.n	8001e6c <CalibrationCommand+0xc0>
    }
    messageLength += sprintf(buffer + messageLength, "};\n");
 8001eb4:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001eb8:	463a      	mov	r2, r7
 8001eba:	4413      	add	r3, r2
 8001ebc:	4959      	ldr	r1, [pc, #356]	; (8002024 <CalibrationCommand+0x278>)
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f00e fd42 	bl	8010948 <siprintf>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001ecc:	4413      	add	r3, r2
 8001ece:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, messageLength, 100);
 8001ed2:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	4639      	mov	r1, r7
 8001eda:	2364      	movs	r3, #100	; 0x64
 8001edc:	4852      	ldr	r0, [pc, #328]	; (8002028 <CalibrationCommand+0x27c>)
 8001ede:	f007 fc1d 	bl	800971c <HAL_UART_Transmit>

    // VhvSettings 배열 출력
    messageLength = sprintf(buffer, "uint8_t VhvSettings[%d] = { ",NUM);
 8001ee2:	f897 2403 	ldrb.w	r2, [r7, #1027]	; 0x403
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	4953      	ldr	r1, [pc, #332]	; (8002038 <CalibrationCommand+0x28c>)
 8001eea:	4618      	mov	r0, r3
 8001eec:	f00e fd2c 	bl	8010948 <siprintf>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    for(int i = 0; i < NUM_SENSOR; i++) {
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8001efc:	e01f      	b.n	8001f3e <CalibrationCommand+0x192>
        messageLength += sprintf(buffer + messageLength, "%d%s", VhvSettings[i], (i < NUM_SENSOR - 1) ? ", " : " ");
 8001efe:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001f02:	463a      	mov	r2, r7
 8001f04:	18d0      	adds	r0, r2, r3
 8001f06:	4a4d      	ldr	r2, [pc, #308]	; (800203c <CalibrationCommand+0x290>)
 8001f08:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8001f0c:	4413      	add	r3, r2
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8001f16:	2b22      	cmp	r3, #34	; 0x22
 8001f18:	dc01      	bgt.n	8001f1e <CalibrationCommand+0x172>
 8001f1a:	4b3f      	ldr	r3, [pc, #252]	; (8002018 <CalibrationCommand+0x26c>)
 8001f1c:	e000      	b.n	8001f20 <CalibrationCommand+0x174>
 8001f1e:	4b3f      	ldr	r3, [pc, #252]	; (800201c <CalibrationCommand+0x270>)
 8001f20:	4944      	ldr	r1, [pc, #272]	; (8002034 <CalibrationCommand+0x288>)
 8001f22:	f00e fd11 	bl	8010948 <siprintf>
 8001f26:	4603      	mov	r3, r0
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001f2e:	4413      	add	r3, r2
 8001f30:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    for(int i = 0; i < NUM_SENSOR; i++) {
 8001f34:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8001f38:	3301      	adds	r3, #1
 8001f3a:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8001f3e:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8001f42:	2b23      	cmp	r3, #35	; 0x23
 8001f44:	dddb      	ble.n	8001efe <CalibrationCommand+0x152>
    }
    messageLength += sprintf(buffer + messageLength, "};\n");
 8001f46:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001f4a:	463a      	mov	r2, r7
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4935      	ldr	r1, [pc, #212]	; (8002024 <CalibrationCommand+0x278>)
 8001f50:	4618      	mov	r0, r3
 8001f52:	f00e fcf9 	bl	8010948 <siprintf>
 8001f56:	4603      	mov	r3, r0
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001f5e:	4413      	add	r3, r2
 8001f60:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, messageLength, 100);
 8001f64:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	4639      	mov	r1, r7
 8001f6c:	2364      	movs	r3, #100	; 0x64
 8001f6e:	482e      	ldr	r0, [pc, #184]	; (8002028 <CalibrationCommand+0x27c>)
 8001f70:	f007 fbd4 	bl	800971c <HAL_UART_Transmit>

    // PhaseCal 배열 출력
    messageLength = sprintf(buffer, "uint8_t PhaseCal[%d] = { ",NUM);
 8001f74:	f897 2403 	ldrb.w	r2, [r7, #1027]	; 0x403
 8001f78:	463b      	mov	r3, r7
 8001f7a:	4931      	ldr	r1, [pc, #196]	; (8002040 <CalibrationCommand+0x294>)
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00e fce3 	bl	8010948 <siprintf>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    for(int i = 0; i < NUM_SENSOR; i++) {
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8001f8e:	e01f      	b.n	8001fd0 <CalibrationCommand+0x224>
        messageLength += sprintf(buffer + messageLength, "%d%s", PhaseCal[i], (i < NUM_SENSOR - 1) ? ", " : " ");
 8001f90:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001f94:	463a      	mov	r2, r7
 8001f96:	18d0      	adds	r0, r2, r3
 8001f98:	4a2a      	ldr	r2, [pc, #168]	; (8002044 <CalibrationCommand+0x298>)
 8001f9a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001f9e:	4413      	add	r3, r2
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001fa8:	2b22      	cmp	r3, #34	; 0x22
 8001faa:	dc01      	bgt.n	8001fb0 <CalibrationCommand+0x204>
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <CalibrationCommand+0x26c>)
 8001fae:	e000      	b.n	8001fb2 <CalibrationCommand+0x206>
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <CalibrationCommand+0x270>)
 8001fb2:	4920      	ldr	r1, [pc, #128]	; (8002034 <CalibrationCommand+0x288>)
 8001fb4:	f00e fcc8 	bl	8010948 <siprintf>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    for(int i = 0; i < NUM_SENSOR; i++) {
 8001fc6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001fca:	3301      	adds	r3, #1
 8001fcc:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8001fd0:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001fd4:	2b23      	cmp	r3, #35	; 0x23
 8001fd6:	dddb      	ble.n	8001f90 <CalibrationCommand+0x1e4>
    }
    messageLength += sprintf(buffer + messageLength, "};\n");
 8001fd8:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001fdc:	463a      	mov	r2, r7
 8001fde:	4413      	add	r3, r2
 8001fe0:	4910      	ldr	r1, [pc, #64]	; (8002024 <CalibrationCommand+0x278>)
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f00e fcb0 	bl	8010948 <siprintf>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, messageLength, 100);
 8001ff6:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	4639      	mov	r1, r7
 8001ffe:	2364      	movs	r3, #100	; 0x64
 8002000:	4809      	ldr	r0, [pc, #36]	; (8002028 <CalibrationCommand+0x27c>)
 8002002:	f007 fb8b 	bl	800971c <HAL_UART_Transmit>
}
 8002006:	bf00      	nop
 8002008:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	08015e80 	.word	0x08015e80
 8002014:	20007870 	.word	0x20007870
 8002018:	08015ea0 	.word	0x08015ea0
 800201c:	08015d0c 	.word	0x08015d0c
 8002020:	08015ea4 	.word	0x08015ea4
 8002024:	08015eac 	.word	0x08015eac
 8002028:	2000b5b4 	.word	0x2000b5b4
 800202c:	08015eb0 	.word	0x08015eb0
 8002030:	20007900 	.word	0x20007900
 8002034:	08015ed4 	.word	0x08015ed4
 8002038:	08015edc 	.word	0x08015edc
 800203c:	20007924 	.word	0x20007924
 8002040:	08015efc 	.word	0x08015efc
 8002044:	20007948 	.word	0x20007948

08002048 <PresetCommand>:
void AvgStdCommand() {
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Using Preset\n\r"), 100);
}
void PresetCommand(){
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af02      	add	r7, sp, #8
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	e011      	b.n	8002078 <PresetCommand+0x30>
        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8002054:	4a9a      	ldr	r2, [pc, #616]	; (80022c0 <PresetCommand+0x278>)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4413      	add	r3, r2
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b29b      	uxth	r3, r3
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	b299      	uxth	r1, r3
 8002062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	2301      	movs	r3, #1
 800206a:	4a96      	ldr	r2, [pc, #600]	; (80022c4 <PresetCommand+0x27c>)
 800206c:	4896      	ldr	r0, [pc, #600]	; (80022c8 <PresetCommand+0x280>)
 800206e:	f002 f825 	bl	80040bc <HAL_I2C_Master_Transmit>
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3301      	adds	r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b05      	cmp	r3, #5
 800207c:	d9ea      	bls.n	8002054 <PresetCommand+0xc>
    }

  	for (int i = 0; i < NUM_SENSOR; i++) {
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	e114      	b.n	80022ae <PresetCommand+0x266>

  	    uint8_t q = i / 12;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4a91      	ldr	r2, [pc, #580]	; (80022cc <PresetCommand+0x284>)
 8002088:	fb82 1203 	smull	r1, r2, r2, r3
 800208c:	1052      	asrs	r2, r2, #1
 800208e:	17db      	asrs	r3, r3, #31
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	70fb      	strb	r3, [r7, #3]
  	    uint8_t r = i % 12;
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	4b8d      	ldr	r3, [pc, #564]	; (80022cc <PresetCommand+0x284>)
 8002098:	fb83 1302 	smull	r1, r3, r3, r2
 800209c:	1059      	asrs	r1, r3, #1
 800209e:	17d3      	asrs	r3, r2, #31
 80020a0:	1ac9      	subs	r1, r1, r3
 80020a2:	460b      	mov	r3, r1
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	440b      	add	r3, r1
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	1ad1      	subs	r1, r2, r3
 80020ac:	460b      	mov	r3, r1
 80020ae:	70bb      	strb	r3, [r7, #2]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	78ba      	ldrb	r2, [r7, #2]
 80020b8:	2a07      	cmp	r2, #7
 80020ba:	bf8c      	ite	hi
 80020bc:	2201      	movhi	r2, #1
 80020be:	2200      	movls	r2, #0
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	4413      	add	r3, r2
 80020c4:	707b      	strb	r3, [r7, #1]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 80020c6:	78bb      	ldrb	r3, [r7, #2]
 80020c8:	2b07      	cmp	r3, #7
 80020ca:	d903      	bls.n	80020d4 <PresetCommand+0x8c>
 80020cc:	78bb      	ldrb	r3, [r7, #2]
 80020ce:	3b08      	subs	r3, #8
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	e000      	b.n	80020d6 <PresetCommand+0x8e>
 80020d4:	78bb      	ldrb	r3, [r7, #2]
 80020d6:	703b      	strb	r3, [r7, #0]

  	    //Reset device except active
  	    for (int j = 0; j < sizeof(tca_addr); ++j) {
 80020d8:	2300      	movs	r3, #0
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	e015      	b.n	800210a <PresetCommand+0xc2>
  	           if (j != active_device) {
 80020de:	787b      	ldrb	r3, [r7, #1]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d00e      	beq.n	8002104 <PresetCommand+0xbc>
  	               HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 80020e6:	4a76      	ldr	r2, [pc, #472]	; (80022c0 <PresetCommand+0x278>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	b299      	uxth	r1, r3
 80020f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2301      	movs	r3, #1
 80020fc:	4a71      	ldr	r2, [pc, #452]	; (80022c4 <PresetCommand+0x27c>)
 80020fe:	4872      	ldr	r0, [pc, #456]	; (80022c8 <PresetCommand+0x280>)
 8002100:	f001 ffdc 	bl	80040bc <HAL_I2C_Master_Transmit>
  	    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3301      	adds	r3, #1
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b05      	cmp	r3, #5
 800210e:	d9e6      	bls.n	80020de <PresetCommand+0x96>
  	           }
  	       }

  	    // set channel of active device
  	    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 8002110:	787b      	ldrb	r3, [r7, #1]
 8002112:	4a6b      	ldr	r2, [pc, #428]	; (80022c0 <PresetCommand+0x278>)
 8002114:	5cd3      	ldrb	r3, [r2, r3]
 8002116:	b29b      	uxth	r3, r3
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	b299      	uxth	r1, r3
 800211c:	783b      	ldrb	r3, [r7, #0]
 800211e:	4a6c      	ldr	r2, [pc, #432]	; (80022d0 <PresetCommand+0x288>)
 8002120:	441a      	add	r2, r3
 8002122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	2301      	movs	r3, #1
 800212a:	4867      	ldr	r0, [pc, #412]	; (80022c8 <PresetCommand+0x280>)
 800212c:	f001 ffc6 	bl	80040bc <HAL_I2C_Master_Transmit>





  		Dev = &vl53l0x_s[i];
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002136:	fb02 f303 	mul.w	r3, r2, r3
 800213a:	4a66      	ldr	r2, [pc, #408]	; (80022d4 <PresetCommand+0x28c>)
 800213c:	4413      	add	r3, r2
 800213e:	4a66      	ldr	r2, [pc, #408]	; (80022d8 <PresetCommand+0x290>)
 8002140:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 8002142:	4b65      	ldr	r3, [pc, #404]	; (80022d8 <PresetCommand+0x290>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a60      	ldr	r2, [pc, #384]	; (80022c8 <PresetCommand+0x280>)
 8002148:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 800214c:	4b62      	ldr	r3, [pc, #392]	; (80022d8 <PresetCommand+0x290>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2252      	movs	r2, #82	; 0x52
 8002152:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 8002156:	4b60      	ldr	r3, [pc, #384]	; (80022d8 <PresetCommand+0x290>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f009 f800 	bl	800b160 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 8002160:	4b5d      	ldr	r3, [pc, #372]	; (80022d8 <PresetCommand+0x290>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f008 fd15 	bl	800ab94 <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 800216a:	4b5b      	ldr	r3, [pc, #364]	; (80022d8 <PresetCommand+0x290>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f008 fe74 	bl	800ae5c <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8002174:	4b58      	ldr	r3, [pc, #352]	; (80022d8 <PresetCommand+0x290>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2101      	movs	r1, #1
 800217a:	4618      	mov	r0, r3
 800217c:	f009 f88e 	bl	800b29c <VL53L0X_SetDeviceMode>
  		VL53L0X_PerformRefCalibration( Dev, &VhvSettings[i], &PhaseCal[i]);
 8002180:	4b55      	ldr	r3, [pc, #340]	; (80022d8 <PresetCommand+0x290>)
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4a55      	ldr	r2, [pc, #340]	; (80022dc <PresetCommand+0x294>)
 8002188:	1899      	adds	r1, r3, r2
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4a54      	ldr	r2, [pc, #336]	; (80022e0 <PresetCommand+0x298>)
 800218e:	4413      	add	r3, r2
 8002190:	461a      	mov	r2, r3
 8002192:	f009 fd05 	bl	800bba0 <VL53L0X_PerformRefCalibration>
  		VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount[i], &isApertureSpads[i]);
 8002196:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <PresetCommand+0x290>)
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4a51      	ldr	r2, [pc, #324]	; (80022e4 <PresetCommand+0x29c>)
 80021a0:	1899      	adds	r1, r3, r2
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4a50      	ldr	r2, [pc, #320]	; (80022e8 <PresetCommand+0x2a0>)
 80021a6:	4413      	add	r3, r2
 80021a8:	461a      	mov	r2, r3
 80021aa:	f00a f987 	bl	800c4bc <VL53L0X_PerformRefSpadManagement>
  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80021ae:	4b4a      	ldr	r3, [pc, #296]	; (80022d8 <PresetCommand+0x290>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2201      	movs	r2, #1
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f009 faec 	bl	800b794 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80021bc:	4b46      	ldr	r3, [pc, #280]	; (80022d8 <PresetCommand+0x290>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2201      	movs	r2, #1
 80021c2:	2101      	movs	r1, #1
 80021c4:	4618      	mov	r0, r3
 80021c6:	f009 fae5 	bl	800b794 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80021ca:	4b43      	ldr	r3, [pc, #268]	; (80022d8 <PresetCommand+0x290>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f641 1299 	movw	r2, #6553	; 0x1999
 80021d2:	2101      	movs	r1, #1
 80021d4:	4618      	mov	r0, r3
 80021d6:	f009 fb8d 	bl	800b8f4 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80021da:	4b3f      	ldr	r3, [pc, #252]	; (80022d8 <PresetCommand+0x290>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f009 fb85 	bl	800b8f4 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 80021ea:	4b3b      	ldr	r3, [pc, #236]	; (80022d8 <PresetCommand+0x290>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80021f2:	4618      	mov	r0, r3
 80021f4:	f009 f8b0 	bl	800b358 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80021f8:	4b37      	ldr	r3, [pc, #220]	; (80022d8 <PresetCommand+0x290>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2212      	movs	r2, #18
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f009 f8cf 	bl	800b3a4 <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8002206:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <PresetCommand+0x290>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	220e      	movs	r2, #14
 800220c:	2101      	movs	r1, #1
 800220e:	4618      	mov	r0, r3
 8002210:	f009 f8c8 	bl	800b3a4 <VL53L0X_SetVcselPulsePeriod>

		refSpadCount[i] = refSpadCountPre[i];
 8002214:	4a35      	ldr	r2, [pc, #212]	; (80022ec <PresetCommand+0x2a4>)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800221c:	4931      	ldr	r1, [pc, #196]	; (80022e4 <PresetCommand+0x29c>)
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		isApertureSpads[i] = isApertureSpadsPre[i];
 8002224:	4a32      	ldr	r2, [pc, #200]	; (80022f0 <PresetCommand+0x2a8>)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	4413      	add	r3, r2
 800222a:	7819      	ldrb	r1, [r3, #0]
 800222c:	4a2e      	ldr	r2, [pc, #184]	; (80022e8 <PresetCommand+0x2a0>)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	4413      	add	r3, r2
 8002232:	460a      	mov	r2, r1
 8002234:	701a      	strb	r2, [r3, #0]
		VhvSettings[i] =  VhvSettingsPre[i];
 8002236:	4a2f      	ldr	r2, [pc, #188]	; (80022f4 <PresetCommand+0x2ac>)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4413      	add	r3, r2
 800223c:	7819      	ldrb	r1, [r3, #0]
 800223e:	4a27      	ldr	r2, [pc, #156]	; (80022dc <PresetCommand+0x294>)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4413      	add	r3, r2
 8002244:	460a      	mov	r2, r1
 8002246:	701a      	strb	r2, [r3, #0]
		PhaseCal[i] = PhaseCalPre[i];
 8002248:	4a2b      	ldr	r2, [pc, #172]	; (80022f8 <PresetCommand+0x2b0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	4413      	add	r3, r2
 800224e:	7819      	ldrb	r1, [r3, #0]
 8002250:	4a23      	ldr	r2, [pc, #140]	; (80022e0 <PresetCommand+0x298>)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	4413      	add	r3, r2
 8002256:	460a      	mov	r2, r1
 8002258:	701a      	strb	r2, [r3, #0]


  		// KalmanFilter initializer BEGIN //
          Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기값
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4a25      	ldr	r2, [pc, #148]	; (80022fc <PresetCommand+0x2b4>)
 8002266:	4413      	add	r3, r2
 8002268:	4a25      	ldr	r2, [pc, #148]	; (8002300 <PresetCommand+0x2b8>)
 800226a:	edd2 7a00 	vldr	s15, [r2]
 800226e:	4a25      	ldr	r2, [pc, #148]	; (8002304 <PresetCommand+0x2bc>)
 8002270:	ed92 7a00 	vldr	s14, [r2]
 8002274:	4a24      	ldr	r2, [pc, #144]	; (8002308 <PresetCommand+0x2c0>)
 8002276:	edd2 6a00 	vldr	s13, [r2]
 800227a:	eddf 1a24 	vldr	s3, [pc, #144]	; 800230c <PresetCommand+0x2c4>
 800227e:	eeb0 1a66 	vmov.f32	s2, s13
 8002282:	eef0 0a47 	vmov.f32	s1, s14
 8002286:	eeb0 0a67 	vmov.f32	s0, s15
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f8dc 	bl	8001448 <Kalman_Init>
  		// KalmanFilter initializer END //
  		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d complete \n\r",i), 100);
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	491f      	ldr	r1, [pc, #124]	; (8002310 <PresetCommand+0x2c8>)
 8002294:	481f      	ldr	r0, [pc, #124]	; (8002314 <PresetCommand+0x2cc>)
 8002296:	f00e fb57 	bl	8010948 <siprintf>
 800229a:	4603      	mov	r3, r0
 800229c:	b29a      	uxth	r2, r3
 800229e:	2364      	movs	r3, #100	; 0x64
 80022a0:	491c      	ldr	r1, [pc, #112]	; (8002314 <PresetCommand+0x2cc>)
 80022a2:	481d      	ldr	r0, [pc, #116]	; (8002318 <PresetCommand+0x2d0>)
 80022a4:	f007 fa3a 	bl	800971c <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	3301      	adds	r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b23      	cmp	r3, #35	; 0x23
 80022b2:	f77f aee7 	ble.w	8002084 <PresetCommand+0x3c>
  	}
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000104 	.word	0x20000104
 80022c4:	2000b1b0 	.word	0x2000b1b0
 80022c8:	200005d0 	.word	0x200005d0
 80022cc:	2aaaaaab 	.word	0x2aaaaaab
 80022d0:	200000fc 	.word	0x200000fc
 80022d4:	2000796c 	.word	0x2000796c
 80022d8:	2000b1ac 	.word	0x2000b1ac
 80022dc:	20007924 	.word	0x20007924
 80022e0:	20007948 	.word	0x20007948
 80022e4:	20007870 	.word	0x20007870
 80022e8:	20007900 	.word	0x20007900
 80022ec:	20000000 	.word	0x20000000
 80022f0:	20000090 	.word	0x20000090
 80022f4:	200000b4 	.word	0x200000b4
 80022f8:	200000d8 	.word	0x200000d8
 80022fc:	2000b1b4 	.word	0x2000b1b4
 8002300:	2000010c 	.word	0x2000010c
 8002304:	20000110 	.word	0x20000110
 8002308:	20000114 	.word	0x20000114
 800230c:	00000000 	.word	0x00000000
 8002310:	08015e70 	.word	0x08015e70
 8002314:	2000b530 	.word	0x2000b530
 8002318:	2000b5b4 	.word	0x2000b5b4
 800231c:	00000000 	.word	0x00000000

08002320 <CalculateStats>:


void CalculateStats(int sensorIndex) {
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
    float sum = 0;
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
    float mean = 0;
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
    float stdDevSum = 0;
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
    int count = readingCount[sensorIndex];
 800233a:	4a49      	ldr	r2, [pc, #292]	; (8002460 <CalculateStats+0x140>)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	60bb      	str	r3, [r7, #8]

    // 평균 계산
    for (int i = 0; i < count; i++) {
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	e013      	b.n	8002372 <CalculateStats+0x52>
        sum += sensorValues[sensorIndex][i];
 800234a:	4946      	ldr	r1, [pc, #280]	; (8002464 <CalculateStats+0x144>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	22c8      	movs	r2, #200	; 0xc8
 8002350:	fb03 f202 	mul.w	r2, r3, r2
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	edd3 7a00 	vldr	s15, [r3]
 8002360:	ed97 7a07 	vldr	s14, [r7, #28]
 8002364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002368:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int i = 0; i < count; i++) {
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	3301      	adds	r3, #1
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	429a      	cmp	r2, r3
 8002378:	dbe7      	blt.n	800234a <CalculateStats+0x2a>
    }
    mean = sum / count;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	ee07 3a90 	vmov	s15, r3
 8002380:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002384:	edd7 6a07 	vldr	s13, [r7, #28]
 8002388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800238c:	edc7 7a03 	vstr	s15, [r7, #12]
    sensorAverages[sensorIndex] = mean;
 8002390:	4a35      	ldr	r2, [pc, #212]	; (8002468 <CalculateStats+0x148>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	601a      	str	r2, [r3, #0]

    // 표준편차 계산
    for (int i = 0; i < count; i++) {
 800239c:	2300      	movs	r3, #0
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	e030      	b.n	8002404 <CalculateStats+0xe4>
        stdDevSum += pow(sensorValues[sensorIndex][i] - mean, 2);
 80023a2:	4930      	ldr	r1, [pc, #192]	; (8002464 <CalculateStats+0x144>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	22c8      	movs	r2, #200	; 0xc8
 80023a8:	fb03 f202 	mul.w	r2, r3, r2
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	ed93 7a00 	vldr	s14, [r3]
 80023b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80023bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c0:	ee17 0a90 	vmov	r0, s15
 80023c4:	f7fe f8f0 	bl	80005a8 <__aeabi_f2d>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8002458 <CalculateStats+0x138>
 80023d0:	ec43 2b10 	vmov	d0, r2, r3
 80023d4:	f012 fd38 	bl	8014e48 <pow>
 80023d8:	ec55 4b10 	vmov	r4, r5, d0
 80023dc:	69b8      	ldr	r0, [r7, #24]
 80023de:	f7fe f8e3 	bl	80005a8 <__aeabi_f2d>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4620      	mov	r0, r4
 80023e8:	4629      	mov	r1, r5
 80023ea:	f7fd ff7f 	bl	80002ec <__adddf3>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4610      	mov	r0, r2
 80023f4:	4619      	mov	r1, r3
 80023f6:	f7fe fc27 	bl	8000c48 <__aeabi_d2f>
 80023fa:	4603      	mov	r3, r0
 80023fc:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < count; i++) {
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	3301      	adds	r3, #1
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	429a      	cmp	r2, r3
 800240a:	dbca      	blt.n	80023a2 <CalculateStats+0x82>
    }
    sensorStdDevs[sensorIndex] = sqrt(stdDevSum / count);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002416:	ed97 7a06 	vldr	s14, [r7, #24]
 800241a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800241e:	ee16 0a90 	vmov	r0, s13
 8002422:	f7fe f8c1 	bl	80005a8 <__aeabi_f2d>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	ec43 2b10 	vmov	d0, r2, r3
 800242e:	f012 fd7b 	bl	8014f28 <sqrt>
 8002432:	ec53 2b10 	vmov	r2, r3, d0
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	f7fe fc05 	bl	8000c48 <__aeabi_d2f>
 800243e:	4602      	mov	r2, r0
 8002440:	490a      	ldr	r1, [pc, #40]	; (800246c <CalculateStats+0x14c>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	601a      	str	r2, [r3, #0]
}
 800244a:	bf00      	nop
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bdb0      	pop	{r4, r5, r7, pc}
 8002452:	bf00      	nop
 8002454:	f3af 8000 	nop.w
 8002458:	00000000 	.word	0x00000000
 800245c:	40000000 	.word	0x40000000
 8002460:	200077e0 	.word	0x200077e0
 8002464:	20000640 	.word	0x20000640
 8002468:	200076c0 	.word	0x200076c0
 800246c:	20007750 	.word	0x20007750

08002470 <TransmitStats>:

// 평균과 표준편차를 UART로 전송하는 함수
void TransmitStats() {
 8002470:	b5b0      	push	{r4, r5, r7, lr}
 8002472:	b0a6      	sub	sp, #152	; 0x98
 8002474:	af04      	add	r7, sp, #16
    char msg[128];
    for (int i = 0; i < NUM_SENSOR; i++) {
 8002476:	2300      	movs	r3, #0
 8002478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800247c:	e034      	b.n	80024e8 <TransmitStats+0x78>
        CalculateStats(i); // 통계 계산
 800247e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002482:	f7ff ff4d 	bl	8002320 <CalculateStats>
        sprintf(msg, "Sensor %d - Avg: %.2f, StdDev: %.2f\r\n", i, sensorAverages[i], sensorStdDevs[i]);
 8002486:	4a1d      	ldr	r2, [pc, #116]	; (80024fc <TransmitStats+0x8c>)
 8002488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe f888 	bl	80005a8 <__aeabi_f2d>
 8002498:	4604      	mov	r4, r0
 800249a:	460d      	mov	r5, r1
 800249c:	4a18      	ldr	r2, [pc, #96]	; (8002500 <TransmitStats+0x90>)
 800249e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe f87d 	bl	80005a8 <__aeabi_f2d>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	1d38      	adds	r0, r7, #4
 80024b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80024b8:	e9cd 4500 	strd	r4, r5, [sp]
 80024bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80024c0:	4910      	ldr	r1, [pc, #64]	; (8002504 <TransmitStats+0x94>)
 80024c2:	f00e fa41 	bl	8010948 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fd feab 	bl	8000224 <strlen>
 80024ce:	4603      	mov	r3, r0
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	1d39      	adds	r1, r7, #4
 80024d4:	f04f 33ff 	mov.w	r3, #4294967295
 80024d8:	480b      	ldr	r0, [pc, #44]	; (8002508 <TransmitStats+0x98>)
 80024da:	f007 f91f 	bl	800971c <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 80024de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024e2:	3301      	adds	r3, #1
 80024e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024ec:	2b23      	cmp	r3, #35	; 0x23
 80024ee:	ddc6      	ble.n	800247e <TransmitStats+0xe>
    }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3788      	adds	r7, #136	; 0x88
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bdb0      	pop	{r4, r5, r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200076c0 	.word	0x200076c0
 8002500:	20007750 	.word	0x20007750
 8002504:	08015f28 	.word	0x08015f28
 8002508:	2000b5b4 	.word	0x2000b5b4

0800250c <ResetSensorData>:

void ResetSensorData() {
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
    // 모든 센서 값과 읽기 횟수를 0으로 설정
    for (int i = 0; i < NUM_SENSOR; i++) {
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	e014      	b.n	8002542 <ResetSensorData+0x36>
        memset(sensorValues[i], 0, sizeof(sensorValues[i]));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	4a0c      	ldr	r2, [pc, #48]	; (8002554 <ResetSensorData+0x48>)
 8002524:	4413      	add	r3, r2
 8002526:	f44f 7248 	mov.w	r2, #800	; 0x320
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f00d fb83 	bl	800fc38 <memset>
        readingCount[i] = 0;
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <ResetSensorData+0x4c>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2100      	movs	r1, #0
 8002538:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_SENSOR; i++) {
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3301      	adds	r3, #1
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b23      	cmp	r3, #35	; 0x23
 8002546:	dde7      	ble.n	8002518 <ResetSensorData+0xc>
    }
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000640 	.word	0x20000640
 8002558:	200077e0 	.word	0x200077e0

0800255c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002560:	f000 fe49 	bl	80031f6 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002564:	f000 f836 	bl	80025d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002568:	f7fe fd76 	bl	8001058 <MX_GPIO_Init>
  MX_I2C1_Init();
 800256c:	f7fe fecc 	bl	8001308 <MX_I2C1_Init>
  MX_TIM7_Init();
 8002570:	f000 fc0e 	bl	8002d90 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002574:	f000 fcaa 	bl	8002ecc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002578:	f000 fb94 	bl	8002ca4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800257c:	f000 f898 	bl	80026b0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8002580:	2100      	movs	r1, #0
 8002582:	480f      	ldr	r0, [pc, #60]	; (80025c0 <main+0x64>)
 8002584:	f005 f912 	bl	80077ac <HAL_TIM_PWM_Start>

  // Initialize the HX711
  HX711_Init();
 8002588:	f7fe fe1e 	bl	80011c8 <HX711_Init>

  /* UART interrupt initialization */
  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "JH TACTS test\n\r"), 100);
 800258c:	490d      	ldr	r1, [pc, #52]	; (80025c4 <main+0x68>)
 800258e:	480e      	ldr	r0, [pc, #56]	; (80025c8 <main+0x6c>)
 8002590:	f00e f9da 	bl	8010948 <siprintf>
 8002594:	4603      	mov	r3, r0
 8002596:	b29a      	uxth	r2, r3
 8002598:	2364      	movs	r3, #100	; 0x64
 800259a:	490b      	ldr	r1, [pc, #44]	; (80025c8 <main+0x6c>)
 800259c:	480b      	ldr	r0, [pc, #44]	; (80025cc <main+0x70>)
 800259e:	f007 f8bd 	bl	800971c <HAL_UART_Transmit>
  startMsg();
 80025a2:	f000 fd7b 	bl	800309c <startMsg>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 80025a6:	2241      	movs	r2, #65	; 0x41
 80025a8:	4909      	ldr	r1, [pc, #36]	; (80025d0 <main+0x74>)
 80025aa:	4808      	ldr	r0, [pc, #32]	; (80025cc <main+0x70>)
 80025ac:	f000 fd40 	bl	8003030 <ReceiveUartMessage>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f7      	bne.n	80025a6 <main+0x4a>
	  {
	      ProcessCommand(rxMsg);
 80025b6:	4806      	ldr	r0, [pc, #24]	; (80025d0 <main+0x74>)
 80025b8:	f7fe ffb4 	bl	8001524 <ProcessCommand>
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 80025bc:	e7f3      	b.n	80025a6 <main+0x4a>
 80025be:	bf00      	nop
 80025c0:	2000b498 	.word	0x2000b498
 80025c4:	08015f50 	.word	0x08015f50
 80025c8:	2000b530 	.word	0x2000b530
 80025cc:	2000b5b4 	.word	0x2000b5b4
 80025d0:	2000b570 	.word	0x2000b570

080025d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b094      	sub	sp, #80	; 0x50
 80025d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025da:	f107 0320 	add.w	r3, r7, #32
 80025de:	2230      	movs	r2, #48	; 0x30
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f00d fb28 	bl	800fc38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025e8:	f107 030c 	add.w	r3, r7, #12
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f8:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <SystemClock_Config+0xd4>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	4a2a      	ldr	r2, [pc, #168]	; (80026a8 <SystemClock_Config+0xd4>)
 80025fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002602:	6413      	str	r3, [r2, #64]	; 0x40
 8002604:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <SystemClock_Config+0xd4>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002610:	4b26      	ldr	r3, [pc, #152]	; (80026ac <SystemClock_Config+0xd8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a25      	ldr	r2, [pc, #148]	; (80026ac <SystemClock_Config+0xd8>)
 8002616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b23      	ldr	r3, [pc, #140]	; (80026ac <SystemClock_Config+0xd8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002628:	2301      	movs	r3, #1
 800262a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800262c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002632:	2302      	movs	r3, #2
 8002634:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002636:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800263c:	2319      	movs	r3, #25
 800263e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002640:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002644:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002646:	2302      	movs	r3, #2
 8002648:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800264a:	2302      	movs	r3, #2
 800264c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800264e:	f107 0320 	add.w	r3, r7, #32
 8002652:	4618      	mov	r0, r3
 8002654:	f003 f880 	bl	8005758 <HAL_RCC_OscConfig>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800265e:	f000 f863 	bl	8002728 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002662:	f003 f829 	bl	80056b8 <HAL_PWREx_EnableOverDrive>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800266c:	f000 f85c 	bl	8002728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002670:	230f      	movs	r3, #15
 8002672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002674:	2302      	movs	r3, #2
 8002676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800267c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002688:	f107 030c 	add.w	r3, r7, #12
 800268c:	2107      	movs	r1, #7
 800268e:	4618      	mov	r0, r3
 8002690:	f003 fbbc 	bl	8005e0c <HAL_RCC_ClockConfig>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800269a:	f000 f845 	bl	8002728 <Error_Handler>
  }
}
 800269e:	bf00      	nop
 80026a0:	3750      	adds	r7, #80	; 0x50
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40007000 	.word	0x40007000

080026b0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026b4:	2200      	movs	r2, #0
 80026b6:	2100      	movs	r1, #0
 80026b8:	2025      	movs	r0, #37	; 0x25
 80026ba:	f000 ff0d 	bl	80034d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026be:	2025      	movs	r0, #37	; 0x25
 80026c0:	f000 ff36 	bl	8003530 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80026c4:	2200      	movs	r2, #0
 80026c6:	2100      	movs	r1, #0
 80026c8:	2020      	movs	r0, #32
 80026ca:	f000 ff05 	bl	80034d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80026ce:	2020      	movs	r0, #32
 80026d0:	f000 ff2e 	bl	8003530 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80026d4:	2200      	movs	r2, #0
 80026d6:	2100      	movs	r1, #0
 80026d8:	201f      	movs	r0, #31
 80026da:	f000 fefd 	bl	80034d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80026de:	201f      	movs	r0, #31
 80026e0:	f000 ff26 	bl	8003530 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80026e4:	2200      	movs	r2, #0
 80026e6:	2100      	movs	r1, #0
 80026e8:	2028      	movs	r0, #40	; 0x28
 80026ea:	f000 fef5 	bl	80034d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026ee:	2028      	movs	r0, #40	; 0x28
 80026f0:	f000 ff1e 	bl	8003530 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80026f4:	2200      	movs	r2, #0
 80026f6:	2100      	movs	r1, #0
 80026f8:	2017      	movs	r0, #23
 80026fa:	f000 feed 	bl	80034d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80026fe:	2017      	movs	r0, #23
 8002700:	f000 ff16 	bl	8003530 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002704:	2200      	movs	r2, #0
 8002706:	2100      	movs	r1, #0
 8002708:	2037      	movs	r0, #55	; 0x37
 800270a:	f000 fee5 	bl	80034d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800270e:	2037      	movs	r0, #55	; 0x37
 8002710:	f000 ff0e 	bl	8003530 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002714:	2200      	movs	r2, #0
 8002716:	2100      	movs	r1, #0
 8002718:	201c      	movs	r0, #28
 800271a:	f000 fedd 	bl	80034d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800271e:	201c      	movs	r0, #28
 8002720:	f000 ff06 	bl	8003530 <HAL_NVIC_EnableIRQ>
}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}

08002728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800272c:	b672      	cpsid	i
}
 800272e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002730:	e7fe      	b.n	8002730 <Error_Handler+0x8>

08002732 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <stepRev>:
#include "tim.h"

#define PULSE 200
#define GEAR 139

void stepRev(int ANG) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 8002750:	2200      	movs	r2, #0
 8002752:	2140      	movs	r1, #64	; 0x40
 8002754:	482e      	ldr	r0, [pc, #184]	; (8002810 <stepRev+0xc8>)
 8002756:	f001 fb3f 	bl	8003dd8 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d04e      	beq.n	80027fe <stepRev+0xb6>
    int direction = (ANG > 0) ? 1 : -1;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	dd01      	ble.n	800276a <stepRev+0x22>
 8002766:	2301      	movs	r3, #1
 8002768:	e001      	b.n	800276e <stepRev+0x26>
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
 800276e:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	fb02 f303 	mul.w	r3, r2, r3
 8002778:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b01      	cmp	r3, #1
 800277e:	bf0c      	ite	eq
 8002780:	2301      	moveq	r3, #1
 8002782:	2300      	movne	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	2180      	movs	r1, #128	; 0x80
 800278a:	4821      	ldr	r0, [pc, #132]	; (8002810 <stepRev+0xc8>)
 800278c:	f001 fb24 	bl	8003dd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8002790:	2200      	movs	r2, #0
 8002792:	2140      	movs	r1, #64	; 0x40
 8002794:	481e      	ldr	r0, [pc, #120]	; (8002810 <stepRev+0xc8>)
 8002796:	f001 fb1f 	bl	8003dd8 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * GEAR * ANG / 360.0;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f646 4298 	movw	r2, #27800	; 0x6c98
 80027a0:	fb02 f303 	mul.w	r3, r2, r3
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd feed 	bl	8000584 <__aeabi_i2d>
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	4b19      	ldr	r3, [pc, #100]	; (8002814 <stepRev+0xcc>)
 80027b0:	f7fe f87c 	bl	80008ac <__aeabi_ddiv>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	f7fe fa24 	bl	8000c08 <__aeabi_d2uiz>
 80027c0:	4603      	mov	r3, r0
 80027c2:	60fb      	str	r3, [r7, #12]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 80027c4:	2301      	movs	r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < steps; i++) {
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	e012      	b.n	80027f4 <stepRev+0xac>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 80027ce:	2201      	movs	r2, #1
 80027d0:	2110      	movs	r1, #16
 80027d2:	4811      	ldr	r0, [pc, #68]	; (8002818 <stepRev+0xd0>)
 80027d4:	f001 fb00 	bl	8003dd8 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 80027d8:	68b8      	ldr	r0, [r7, #8]
 80027da:	f000 fd69 	bl	80032b0 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 80027de:	2200      	movs	r2, #0
 80027e0:	2110      	movs	r1, #16
 80027e2:	480d      	ldr	r0, [pc, #52]	; (8002818 <stepRev+0xd0>)
 80027e4:	f001 faf8 	bl	8003dd8 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 80027e8:	68b8      	ldr	r0, [r7, #8]
 80027ea:	f000 fd61 	bl	80032b0 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3301      	adds	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d8e8      	bhi.n	80027ce <stepRev+0x86>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 80027fc:	e004      	b.n	8002808 <stepRev+0xc0>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 80027fe:	2200      	movs	r2, #0
 8002800:	2140      	movs	r1, #64	; 0x40
 8002802:	4803      	ldr	r0, [pc, #12]	; (8002810 <stepRev+0xc8>)
 8002804:	f001 fae8 	bl	8003dd8 <HAL_GPIO_WritePin>
}
 8002808:	bf00      	nop
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40021800 	.word	0x40021800
 8002814:	40768000 	.word	0x40768000
 8002818:	40020400 	.word	0x40020400

0800281c <stepLin>:

void stepLin(int DIST) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D8 PI2 GPIOI GPIO_PIN_2
	// DIR D7 PI3 GPIOI GPIO_PIN_3

	float ANG = DIST * 360.0 / 8; // 1 rev -> 8 mm
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7fd fead 	bl	8000584 <__aeabi_i2d>
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	4b44      	ldr	r3, [pc, #272]	; (8002940 <stepLin+0x124>)
 8002830:	f7fd ff12 	bl	8000658 <__aeabi_dmul>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4610      	mov	r0, r2
 800283a:	4619      	mov	r1, r3
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	4b40      	ldr	r3, [pc, #256]	; (8002944 <stepLin+0x128>)
 8002842:	f7fe f833 	bl	80008ac <__aeabi_ddiv>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4610      	mov	r0, r2
 800284c:	4619      	mov	r1, r3
 800284e:	f7fe f9fb 	bl	8000c48 <__aeabi_d2f>
 8002852:	4603      	mov	r3, r0
 8002854:	61bb      	str	r3, [r7, #24]


  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8002856:	2201      	movs	r2, #1
 8002858:	2101      	movs	r1, #1
 800285a:	483b      	ldr	r0, [pc, #236]	; (8002948 <stepLin+0x12c>)
 800285c:	f001 fabc 	bl	8003dd8 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8002860:	edd7 7a06 	vldr	s15, [r7, #24]
 8002864:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286c:	d05a      	beq.n	8002924 <stepLin+0x108>
    int direction = (ANG > 0) ? 1 : -1;
 800286e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002872:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287a:	dd01      	ble.n	8002880 <stepLin+0x64>
 800287c:	2301      	movs	r3, #1
 800287e:	e001      	b.n	8002884 <stepLin+0x68>
 8002880:	f04f 33ff 	mov.w	r3, #4294967295
 8002884:	617b      	str	r3, [r7, #20]
    ANG *= direction;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	ee07 3a90 	vmov	s15, r3
 800288c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002890:	ed97 7a06 	vldr	s14, [r7, #24]
 8002894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002898:	edc7 7a06 	vstr	s15, [r7, #24]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	bf0c      	ite	eq
 80028a2:	2301      	moveq	r3, #1
 80028a4:	2300      	movne	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	2108      	movs	r1, #8
 80028ac:	4826      	ldr	r0, [pc, #152]	; (8002948 <stepLin+0x12c>)
 80028ae:	f001 fa93 	bl	8003dd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 80028b2:	2200      	movs	r2, #0
 80028b4:	2101      	movs	r1, #1
 80028b6:	4824      	ldr	r0, [pc, #144]	; (8002948 <stepLin+0x12c>)
 80028b8:	f001 fa8e 	bl	8003dd8 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 80028bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80028c0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800294c <stepLin+0x130>
 80028c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c8:	ee17 0a90 	vmov	r0, s15
 80028cc:	f7fd fe6c 	bl	80005a8 <__aeabi_f2d>
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <stepLin+0x124>)
 80028d6:	f7fd ffe9 	bl	80008ac <__aeabi_ddiv>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f7fe f991 	bl	8000c08 <__aeabi_d2uiz>
 80028e6:	4603      	mov	r3, r0
 80028e8:	613b      	str	r3, [r7, #16]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 80028ea:	2301      	movs	r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
 80028f2:	e012      	b.n	800291a <stepLin+0xfe>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET); // CLK
 80028f4:	2201      	movs	r2, #1
 80028f6:	2104      	movs	r1, #4
 80028f8:	4813      	ldr	r0, [pc, #76]	; (8002948 <stepLin+0x12c>)
 80028fa:	f001 fa6d 	bl	8003dd8 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fcd6 	bl	80032b0 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET); // CLK
 8002904:	2200      	movs	r2, #0
 8002906:	2104      	movs	r1, #4
 8002908:	480f      	ldr	r0, [pc, #60]	; (8002948 <stepLin+0x12c>)
 800290a:	f001 fa65 	bl	8003dd8 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fcce 	bl	80032b0 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	3301      	adds	r3, #1
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	429a      	cmp	r2, r3
 8002920:	d8e8      	bhi.n	80028f4 <stepLin+0xd8>
 8002922:	e004      	b.n	800292e <stepLin+0x112>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8002924:	2200      	movs	r2, #0
 8002926:	2101      	movs	r1, #1
 8002928:	4807      	ldr	r0, [pc, #28]	; (8002948 <stepLin+0x12c>)
 800292a:	f001 fa55 	bl	8003dd8 <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 800292e:	2201      	movs	r2, #1
 8002930:	2101      	movs	r1, #1
 8002932:	4805      	ldr	r0, [pc, #20]	; (8002948 <stepLin+0x12c>)
 8002934:	f001 fa50 	bl	8003dd8 <HAL_GPIO_WritePin>

}
 8002938:	bf00      	nop
 800293a:	3720      	adds	r7, #32
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40768000 	.word	0x40768000
 8002944:	40200000 	.word	0x40200000
 8002948:	40022000 	.word	0x40022000
 800294c:	43480000 	.word	0x43480000

08002950 <servo_angle>:

void servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, int step) {
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]

	// 1 step is 0.8 mm
    if (step > 17)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b11      	cmp	r3, #17
 8002960:	dd01      	ble.n	8002966 <servo_angle+0x16>
    	step = 17; // 최대 각도 제한
 8002962:	2311      	movs	r3, #17
 8002964:	607b      	str	r3, [r7, #4]

    int pulse_width = 21-step; // 듀티 사이클 계산 (0도에서 180도까지)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f1c3 0315 	rsb	r3, r3, #21
 800296c:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d104      	bne.n	800297e <servo_angle+0x2e>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800297c:	e023      	b.n	80029c6 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b04      	cmp	r3, #4
 8002982:	d104      	bne.n	800298e <servo_angle+0x3e>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800298c:	e01b      	b.n	80029c6 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b08      	cmp	r3, #8
 8002992:	d104      	bne.n	800299e <servo_angle+0x4e>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800299c:	e013      	b.n	80029c6 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b0c      	cmp	r3, #12
 80029a2:	d104      	bne.n	80029ae <servo_angle+0x5e>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80029ac:	e00b      	b.n	80029c6 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b10      	cmp	r3, #16
 80029b2:	d104      	bne.n	80029be <servo_angle+0x6e>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	6593      	str	r3, [r2, #88]	; 0x58
}
 80029bc:	e003      	b.n	80029c6 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80029c6:	bf00      	nop
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_MspInit+0x44>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <HAL_MspInit+0x44>)
 80029e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
 80029e6:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_MspInit+0x44>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f2:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_MspInit+0x44>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <HAL_MspInit+0x44>)
 80029f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029fc:	6453      	str	r3, [r2, #68]	; 0x44
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_MspInit+0x44>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800

08002a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a20:	e7fe      	b.n	8002a20 <NMI_Handler+0x4>

08002a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a26:	e7fe      	b.n	8002a26 <HardFault_Handler+0x4>

08002a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a2c:	e7fe      	b.n	8002a2c <MemManage_Handler+0x4>

08002a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a32:	e7fe      	b.n	8002a32 <BusFault_Handler+0x4>

08002a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a38:	e7fe      	b.n	8002a38 <UsageFault_Handler+0x4>

08002a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a68:	f000 fc02 	bl	8003270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002a74:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a78:	f001 f9da 	bl	8003e30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a84:	4802      	ldr	r0, [pc, #8]	; (8002a90 <TIM2_IRQHandler+0x10>)
 8002a86:	f005 f85b 	bl	8007b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	2000b498 	.word	0x2000b498

08002a94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002a98:	4802      	ldr	r0, [pc, #8]	; (8002aa4 <I2C1_EV_IRQHandler+0x10>)
 8002a9a:	f001 fcf9 	bl	8004490 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200005d0 	.word	0x200005d0

08002aa8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002aac:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <I2C1_ER_IRQHandler+0x10>)
 8002aae:	f001 fd09 	bl	80044c4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200005d0 	.word	0x200005d0

08002abc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ac0:	4802      	ldr	r0, [pc, #8]	; (8002acc <USART1_IRQHandler+0x10>)
 8002ac2:	f006 ff73 	bl	80099ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	2000b5b4 	.word	0x2000b5b4

08002ad0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002ad4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002ad8:	f001 f9aa 	bl	8003e30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002adc:	bf00      	nop
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ae4:	4802      	ldr	r0, [pc, #8]	; (8002af0 <TIM7_IRQHandler+0x10>)
 8002ae6:	f005 f82b 	bl	8007b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	2000b4e4 	.word	0x2000b4e4

08002af4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return 1;
 8002af8:	2301      	movs	r3, #1
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <_kill>:

int _kill(int pid, int sig)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b0e:	f00d f85b 	bl	800fbc8 <__errno>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2216      	movs	r2, #22
 8002b16:	601a      	str	r2, [r3, #0]
  return -1;
 8002b18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_exit>:

void _exit (int status)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ffe7 	bl	8002b04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b36:	e7fe      	b.n	8002b36 <_exit+0x12>

08002b38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	e00a      	b.n	8002b60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b4a:	f3af 8000 	nop.w
 8002b4e:	4601      	mov	r1, r0
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	60ba      	str	r2, [r7, #8]
 8002b56:	b2ca      	uxtb	r2, r1
 8002b58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	dbf0      	blt.n	8002b4a <_read+0x12>
  }

  return len;
 8002b68:	687b      	ldr	r3, [r7, #4]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b086      	sub	sp, #24
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	e009      	b.n	8002b98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	60ba      	str	r2, [r7, #8]
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3301      	adds	r3, #1
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	dbf1      	blt.n	8002b84 <_write+0x12>
  }
  return len;
 8002ba0:	687b      	ldr	r3, [r7, #4]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <_close>:

int _close(int file)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bd2:	605a      	str	r2, [r3, #4]
  return 0;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <_isatty>:

int _isatty(int file)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bea:	2301      	movs	r3, #1
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c1c:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <_sbrk+0x5c>)
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <_sbrk+0x60>)
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c28:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <_sbrk+0x64>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c30:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <_sbrk+0x64>)
 8002c32:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <_sbrk+0x68>)
 8002c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <_sbrk+0x64>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d207      	bcs.n	8002c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c44:	f00c ffc0 	bl	800fbc8 <__errno>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	220c      	movs	r2, #12
 8002c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c52:	e009      	b.n	8002c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <_sbrk+0x64>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <_sbrk+0x64>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <_sbrk+0x64>)
 8002c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c66:	68fb      	ldr	r3, [r7, #12]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20050000 	.word	0x20050000
 8002c74:	00000400 	.word	0x00000400
 8002c78:	2000b494 	.word	0x2000b494
 8002c7c:	2000b690 	.word	0x2000b690

08002c80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <SystemInit+0x20>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <SystemInit+0x20>)
 8002c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08e      	sub	sp, #56	; 0x38
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cc4:	463b      	mov	r3, r7
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	609a      	str	r2, [r3, #8]
 8002cce:	60da      	str	r2, [r3, #12]
 8002cd0:	611a      	str	r2, [r3, #16]
 8002cd2:	615a      	str	r2, [r3, #20]
 8002cd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cd6:	4b2d      	ldr	r3, [pc, #180]	; (8002d8c <MX_TIM2_Init+0xe8>)
 8002cd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <MX_TIM2_Init+0xe8>)
 8002ce0:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002ce4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce6:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <MX_TIM2_Init+0xe8>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8002cec:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <MX_TIM2_Init+0xe8>)
 8002cee:	2231      	movs	r2, #49	; 0x31
 8002cf0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf2:	4b26      	ldr	r3, [pc, #152]	; (8002d8c <MX_TIM2_Init+0xe8>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cf8:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <MX_TIM2_Init+0xe8>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cfe:	4823      	ldr	r0, [pc, #140]	; (8002d8c <MX_TIM2_Init+0xe8>)
 8002d00:	f004 fb0a 	bl	8007318 <HAL_TIM_Base_Init>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002d0a:	f7ff fd0d 	bl	8002728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d18:	4619      	mov	r1, r3
 8002d1a:	481c      	ldr	r0, [pc, #112]	; (8002d8c <MX_TIM2_Init+0xe8>)
 8002d1c:	f005 fa98 	bl	8008250 <HAL_TIM_ConfigClockSource>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002d26:	f7ff fcff 	bl	8002728 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d2a:	4818      	ldr	r0, [pc, #96]	; (8002d8c <MX_TIM2_Init+0xe8>)
 8002d2c:	f004 fc14 	bl	8007558 <HAL_TIM_PWM_Init>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002d36:	f7ff fcf7 	bl	8002728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d42:	f107 031c 	add.w	r3, r7, #28
 8002d46:	4619      	mov	r1, r3
 8002d48:	4810      	ldr	r0, [pc, #64]	; (8002d8c <MX_TIM2_Init+0xe8>)
 8002d4a:	f006 fab1 	bl	80092b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002d54:	f7ff fce8 	bl	8002728 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d58:	2360      	movs	r3, #96	; 0x60
 8002d5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d68:	463b      	mov	r3, r7
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4807      	ldr	r0, [pc, #28]	; (8002d8c <MX_TIM2_Init+0xe8>)
 8002d70:	f005 f806 	bl	8007d80 <HAL_TIM_PWM_ConfigChannel>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002d7a:	f7ff fcd5 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d7e:	4803      	ldr	r0, [pc, #12]	; (8002d8c <MX_TIM2_Init+0xe8>)
 8002d80:	f000 f86e 	bl	8002e60 <HAL_TIM_MspPostInit>

}
 8002d84:	bf00      	nop
 8002d86:	3738      	adds	r7, #56	; 0x38
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	2000b498 	.word	0x2000b498

08002d90 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002da0:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <MX_TIM7_Init+0x64>)
 8002da2:	4a15      	ldr	r2, [pc, #84]	; (8002df8 <MX_TIM7_Init+0x68>)
 8002da4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 8002da6:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <MX_TIM7_Init+0x64>)
 8002da8:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002dac:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <MX_TIM7_Init+0x64>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50-1;
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <MX_TIM7_Init+0x64>)
 8002db6:	2231      	movs	r2, #49	; 0x31
 8002db8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <MX_TIM7_Init+0x64>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002dc0:	480c      	ldr	r0, [pc, #48]	; (8002df4 <MX_TIM7_Init+0x64>)
 8002dc2:	f004 faa9 	bl	8007318 <HAL_TIM_Base_Init>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002dcc:	f7ff fcac 	bl	8002728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002dd8:	1d3b      	adds	r3, r7, #4
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4805      	ldr	r0, [pc, #20]	; (8002df4 <MX_TIM7_Init+0x64>)
 8002dde:	f006 fa67 	bl	80092b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002de8:	f7ff fc9e 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	2000b4e4 	.word	0x2000b4e4
 8002df8:	40001400 	.word	0x40001400

08002dfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0c:	d10c      	bne.n	8002e28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e0e:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <HAL_TIM_Base_MspInit+0x5c>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a11      	ldr	r2, [pc, #68]	; (8002e58 <HAL_TIM_Base_MspInit+0x5c>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <HAL_TIM_Base_MspInit+0x5c>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002e26:	e010      	b.n	8002e4a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <HAL_TIM_Base_MspInit+0x60>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d10b      	bne.n	8002e4a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_TIM_Base_MspInit+0x5c>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	4a08      	ldr	r2, [pc, #32]	; (8002e58 <HAL_TIM_Base_MspInit+0x5c>)
 8002e38:	f043 0320 	orr.w	r3, r3, #32
 8002e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_TIM_Base_MspInit+0x5c>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40001400 	.word	0x40001400

08002e60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 030c 	add.w	r3, r7, #12
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e80:	d11c      	bne.n	8002ebc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_TIM_MspPostInit+0x64>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a0f      	ldr	r2, [pc, #60]	; (8002ec4 <HAL_TIM_MspPostInit+0x64>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_TIM_MspPostInit+0x64>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eac:	2301      	movs	r3, #1
 8002eae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb0:	f107 030c 	add.w	r3, r7, #12
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4804      	ldr	r0, [pc, #16]	; (8002ec8 <HAL_TIM_MspPostInit+0x68>)
 8002eb8:	f000 fbfe 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ebc:	bf00      	nop
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40020000 	.word	0x40020000

08002ecc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ed0:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <MX_USART1_UART_Init+0x58>)
 8002ed2:	4a15      	ldr	r2, [pc, #84]	; (8002f28 <MX_USART1_UART_Init+0x5c>)
 8002ed4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <MX_USART1_UART_Init+0x58>)
 8002ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002edc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <MX_USART1_UART_Init+0x58>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <MX_USART1_UART_Init+0x58>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <MX_USART1_UART_Init+0x58>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <MX_USART1_UART_Init+0x58>)
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <MX_USART1_UART_Init+0x58>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <MX_USART1_UART_Init+0x58>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <MX_USART1_UART_Init+0x58>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <MX_USART1_UART_Init+0x58>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f0e:	4805      	ldr	r0, [pc, #20]	; (8002f24 <MX_USART1_UART_Init+0x58>)
 8002f10:	f006 fb44 	bl	800959c <HAL_UART_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002f1a:	f7ff fc05 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	2000b5b4 	.word	0x2000b5b4
 8002f28:	40011000 	.word	0x40011000

08002f2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b0ac      	sub	sp, #176	; 0xb0
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f44:	f107 0318 	add.w	r3, r7, #24
 8002f48:	2284      	movs	r2, #132	; 0x84
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f00c fe73 	bl	800fc38 <memset>
  if(uartHandle->Instance==USART1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a32      	ldr	r2, [pc, #200]	; (8003020 <HAL_UART_MspInit+0xf4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d15c      	bne.n	8003016 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f5c:	2340      	movs	r3, #64	; 0x40
 8002f5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f60:	2300      	movs	r3, #0
 8002f62:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f64:	f107 0318 	add.w	r3, r7, #24
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f003 f9f1 	bl	8006350 <HAL_RCCEx_PeriphCLKConfig>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f74:	f7ff fbd8 	bl	8002728 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f78:	4b2a      	ldr	r3, [pc, #168]	; (8003024 <HAL_UART_MspInit+0xf8>)
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7c:	4a29      	ldr	r2, [pc, #164]	; (8003024 <HAL_UART_MspInit+0xf8>)
 8002f7e:	f043 0310 	orr.w	r3, r3, #16
 8002f82:	6453      	str	r3, [r2, #68]	; 0x44
 8002f84:	4b27      	ldr	r3, [pc, #156]	; (8003024 <HAL_UART_MspInit+0xf8>)
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f90:	4b24      	ldr	r3, [pc, #144]	; (8003024 <HAL_UART_MspInit+0xf8>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	4a23      	ldr	r2, [pc, #140]	; (8003024 <HAL_UART_MspInit+0xf8>)
 8002f96:	f043 0302 	orr.w	r3, r3, #2
 8002f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9c:	4b21      	ldr	r3, [pc, #132]	; (8003024 <HAL_UART_MspInit+0xf8>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa8:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <HAL_UART_MspInit+0xf8>)
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	4a1d      	ldr	r2, [pc, #116]	; (8003024 <HAL_UART_MspInit+0xf8>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb4:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <HAL_UART_MspInit+0xf8>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fd8:	2307      	movs	r3, #7
 8002fda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4810      	ldr	r0, [pc, #64]	; (8003028 <HAL_UART_MspInit+0xfc>)
 8002fe6:	f000 fb67 	bl	80036b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffe:	2303      	movs	r3, #3
 8003000:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003004:	2307      	movs	r3, #7
 8003006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800300e:	4619      	mov	r1, r3
 8003010:	4806      	ldr	r0, [pc, #24]	; (800302c <HAL_UART_MspInit+0x100>)
 8003012:	f000 fb51 	bl	80036b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003016:	bf00      	nop
 8003018:	37b0      	adds	r7, #176	; 0xb0
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40011000 	.word	0x40011000
 8003024:	40023800 	.word	0x40023800
 8003028:	40020400 	.word	0x40020400
 800302c:	40020000 	.word	0x40020000

08003030 <ReceiveUartMessage>:
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef ReceiveUartMessage(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t size)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	80fb      	strh	r3, [r7, #6]
    uint8_t receivedByte;
    uint16_t rxBufferIndex = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	82fb      	strh	r3, [r7, #22]
    while(1)
    {
        if(HAL_UART_Receive(huart, &receivedByte, 1, 1000) == HAL_OK)
 8003042:	f107 0115 	add.w	r1, r7, #21
 8003046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800304a:	2201      	movs	r2, #1
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f006 fbe8 	bl	8009822 <HAL_UART_Receive>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f4      	bne.n	8003042 <ReceiveUartMessage+0x12>
        {
            if(receivedByte == '\n') // 종료 문자 감지
 8003058:	7d7b      	ldrb	r3, [r7, #21]
 800305a:	2b0a      	cmp	r3, #10
 800305c:	d106      	bne.n	800306c <ReceiveUartMessage+0x3c>
            {
                buffer[rxBufferIndex] = '\0'; // 문자열의 끝을 표시
 800305e:	8afb      	ldrh	r3, [r7, #22]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	4413      	add	r3, r2
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
                return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e012      	b.n	8003092 <ReceiveUartMessage+0x62>
            }
            else
            {
                buffer[rxBufferIndex] = receivedByte; // 문자 저장
 800306c:	8afb      	ldrh	r3, [r7, #22]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	4413      	add	r3, r2
 8003072:	7d7a      	ldrb	r2, [r7, #21]
 8003074:	701a      	strb	r2, [r3, #0]
                rxBufferIndex++;
 8003076:	8afb      	ldrh	r3, [r7, #22]
 8003078:	3301      	adds	r3, #1
 800307a:	82fb      	strh	r3, [r7, #22]
                if(rxBufferIndex >= size) // 버퍼 초과 방지
 800307c:	8afa      	ldrh	r2, [r7, #22]
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	429a      	cmp	r2, r3
 8003082:	d3de      	bcc.n	8003042 <ReceiveUartMessage+0x12>
                {
                    buffer[rxBufferIndex - 1] = '\0'; // 문자열의 끝을 표시
 8003084:	8afb      	ldrh	r3, [r7, #22]
 8003086:	3b01      	subs	r3, #1
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	4413      	add	r3, r2
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
                    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <startMsg>:

void startMsg(){
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80030a0:	4937      	ldr	r1, [pc, #220]	; (8003180 <startMsg+0xe4>)
 80030a2:	4838      	ldr	r0, [pc, #224]	; (8003184 <startMsg+0xe8>)
 80030a4:	f00d fc50 	bl	8010948 <siprintf>
 80030a8:	4603      	mov	r3, r0
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	2364      	movs	r3, #100	; 0x64
 80030ae:	4935      	ldr	r1, [pc, #212]	; (8003184 <startMsg+0xe8>)
 80030b0:	4835      	ldr	r0, [pc, #212]	; (8003188 <startMsg+0xec>)
 80030b2:	f006 fb33 	bl	800971c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80030b6:	4932      	ldr	r1, [pc, #200]	; (8003180 <startMsg+0xe4>)
 80030b8:	4832      	ldr	r0, [pc, #200]	; (8003184 <startMsg+0xe8>)
 80030ba:	f00d fc45 	bl	8010948 <siprintf>
 80030be:	4603      	mov	r3, r0
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	2364      	movs	r3, #100	; 0x64
 80030c4:	492f      	ldr	r1, [pc, #188]	; (8003184 <startMsg+0xe8>)
 80030c6:	4830      	ldr	r0, [pc, #192]	; (8003188 <startMsg+0xec>)
 80030c8:	f006 fb28 	bl	800971c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----- Auto Data Logging Device for TACTS made by JaeHyeong----\n"), 100);
 80030cc:	492f      	ldr	r1, [pc, #188]	; (800318c <startMsg+0xf0>)
 80030ce:	482d      	ldr	r0, [pc, #180]	; (8003184 <startMsg+0xe8>)
 80030d0:	f00d fc3a 	bl	8010948 <siprintf>
 80030d4:	4603      	mov	r3, r0
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	2364      	movs	r3, #100	; 0x64
 80030da:	492a      	ldr	r1, [pc, #168]	; (8003184 <startMsg+0xe8>)
 80030dc:	482a      	ldr	r0, [pc, #168]	; (8003188 <startMsg+0xec>)
 80030de:	f006 fb1d 	bl	800971c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------rev XX : Rotaing Revolution Motor (Deg)------------\n"), 100);
 80030e2:	492b      	ldr	r1, [pc, #172]	; (8003190 <startMsg+0xf4>)
 80030e4:	4827      	ldr	r0, [pc, #156]	; (8003184 <startMsg+0xe8>)
 80030e6:	f00d fc2f 	bl	8010948 <siprintf>
 80030ea:	4603      	mov	r3, r0
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	2364      	movs	r3, #100	; 0x64
 80030f0:	4924      	ldr	r1, [pc, #144]	; (8003184 <startMsg+0xe8>)
 80030f2:	4825      	ldr	r0, [pc, #148]	; (8003188 <startMsg+0xec>)
 80030f4:	f006 fb12 	bl	800971c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------lin XX : Moving Linear Motor (mm)------------------\n"), 100);
 80030f8:	4926      	ldr	r1, [pc, #152]	; (8003194 <startMsg+0xf8>)
 80030fa:	4822      	ldr	r0, [pc, #136]	; (8003184 <startMsg+0xe8>)
 80030fc:	f00d fc24 	bl	8010948 <siprintf>
 8003100:	4603      	mov	r3, r0
 8003102:	b29a      	uxth	r2, r3
 8003104:	2364      	movs	r3, #100	; 0x64
 8003106:	491f      	ldr	r1, [pc, #124]	; (8003184 <startMsg+0xe8>)
 8003108:	481f      	ldr	r0, [pc, #124]	; (8003188 <startMsg+0xec>)
 800310a:	f006 fb07 	bl	800971c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------servo XX : Poking XX * 0.8 (mm)--------------------\n"), 100);
 800310e:	4922      	ldr	r1, [pc, #136]	; (8003198 <startMsg+0xfc>)
 8003110:	481c      	ldr	r0, [pc, #112]	; (8003184 <startMsg+0xe8>)
 8003112:	f00d fc19 	bl	8010948 <siprintf>
 8003116:	4603      	mov	r3, r0
 8003118:	b29a      	uxth	r2, r3
 800311a:	2364      	movs	r3, #100	; 0x64
 800311c:	4919      	ldr	r1, [pc, #100]	; (8003184 <startMsg+0xe8>)
 800311e:	481a      	ldr	r0, [pc, #104]	; (8003188 <startMsg+0xec>)
 8003120:	f006 fafc 	bl	800971c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------auto : Poking point and data logging---------------\n"), 100);
 8003124:	491d      	ldr	r1, [pc, #116]	; (800319c <startMsg+0x100>)
 8003126:	4817      	ldr	r0, [pc, #92]	; (8003184 <startMsg+0xe8>)
 8003128:	f00d fc0e 	bl	8010948 <siprintf>
 800312c:	4603      	mov	r3, r0
 800312e:	b29a      	uxth	r2, r3
 8003130:	2364      	movs	r3, #100	; 0x64
 8003132:	4914      	ldr	r1, [pc, #80]	; (8003184 <startMsg+0xe8>)
 8003134:	4814      	ldr	r0, [pc, #80]	; (8003188 <startMsg+0xec>)
 8003136:	f006 faf1 	bl	800971c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-------------------------testbed_axial------------------------\n"), 100);
 800313a:	4919      	ldr	r1, [pc, #100]	; (80031a0 <startMsg+0x104>)
 800313c:	4811      	ldr	r0, [pc, #68]	; (8003184 <startMsg+0xe8>)
 800313e:	f00d fc03 	bl	8010948 <siprintf>
 8003142:	4603      	mov	r3, r0
 8003144:	b29a      	uxth	r2, r3
 8003146:	2364      	movs	r3, #100	; 0x64
 8003148:	490e      	ldr	r1, [pc, #56]	; (8003184 <startMsg+0xe8>)
 800314a:	480f      	ldr	r0, [pc, #60]	; (8003188 <startMsg+0xec>)
 800314c:	f006 fae6 	bl	800971c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8003150:	490b      	ldr	r1, [pc, #44]	; (8003180 <startMsg+0xe4>)
 8003152:	480c      	ldr	r0, [pc, #48]	; (8003184 <startMsg+0xe8>)
 8003154:	f00d fbf8 	bl	8010948 <siprintf>
 8003158:	4603      	mov	r3, r0
 800315a:	b29a      	uxth	r2, r3
 800315c:	2364      	movs	r3, #100	; 0x64
 800315e:	4909      	ldr	r1, [pc, #36]	; (8003184 <startMsg+0xe8>)
 8003160:	4809      	ldr	r0, [pc, #36]	; (8003188 <startMsg+0xec>)
 8003162:	f006 fadb 	bl	800971c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8003166:	4906      	ldr	r1, [pc, #24]	; (8003180 <startMsg+0xe4>)
 8003168:	4806      	ldr	r0, [pc, #24]	; (8003184 <startMsg+0xe8>)
 800316a:	f00d fbed 	bl	8010948 <siprintf>
 800316e:	4603      	mov	r3, r0
 8003170:	b29a      	uxth	r2, r3
 8003172:	2364      	movs	r3, #100	; 0x64
 8003174:	4903      	ldr	r1, [pc, #12]	; (8003184 <startMsg+0xe8>)
 8003176:	4804      	ldr	r0, [pc, #16]	; (8003188 <startMsg+0xec>)
 8003178:	f006 fad0 	bl	800971c <HAL_UART_Transmit>
}
 800317c:	bf00      	nop
 800317e:	bd80      	pop	{r7, pc}
 8003180:	08015f60 	.word	0x08015f60
 8003184:	2000b530 	.word	0x2000b530
 8003188:	2000b5b4 	.word	0x2000b5b4
 800318c:	08015fa0 	.word	0x08015fa0
 8003190:	08015fe0 	.word	0x08015fe0
 8003194:	08016020 	.word	0x08016020
 8003198:	08016060 	.word	0x08016060
 800319c:	080160a0 	.word	0x080160a0
 80031a0:	080160e0 	.word	0x080160e0

080031a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 80031a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031a8:	480d      	ldr	r0, [pc, #52]	; (80031e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031aa:	490e      	ldr	r1, [pc, #56]	; (80031e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031ac:	4a0e      	ldr	r2, [pc, #56]	; (80031e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b0:	e002      	b.n	80031b8 <LoopCopyDataInit>

080031b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031b6:	3304      	adds	r3, #4

080031b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031bc:	d3f9      	bcc.n	80031b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031be:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031c0:	4c0b      	ldr	r4, [pc, #44]	; (80031f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c4:	e001      	b.n	80031ca <LoopFillZerobss>

080031c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031c8:	3204      	adds	r2, #4

080031ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031cc:	d3fb      	bcc.n	80031c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031ce:	f7ff fd57 	bl	8002c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031d2:	f00c fcff 	bl	800fbd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031d6:	f7ff f9c1 	bl	800255c <main>
  bx  lr    
 80031da:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 80031dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80031e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e4:	200005b4 	.word	0x200005b4
  ldr r2, =_sidata
 80031e8:	080168a8 	.word	0x080168a8
  ldr r2, =_sbss
 80031ec:	200005b4 	.word	0x200005b4
  ldr r4, =_ebss
 80031f0:	2000b690 	.word	0x2000b690

080031f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031f4:	e7fe      	b.n	80031f4 <ADC_IRQHandler>

080031f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031fa:	2003      	movs	r0, #3
 80031fc:	f000 f94c 	bl	8003498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003200:	200f      	movs	r0, #15
 8003202:	f000 f805 	bl	8003210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003206:	f7ff fbe5 	bl	80029d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003218:	4b12      	ldr	r3, [pc, #72]	; (8003264 <HAL_InitTick+0x54>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_InitTick+0x58>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	4619      	mov	r1, r3
 8003222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003226:	fbb3 f3f1 	udiv	r3, r3, r1
 800322a:	fbb2 f3f3 	udiv	r3, r2, r3
 800322e:	4618      	mov	r0, r3
 8003230:	f000 f996 	bl	8003560 <HAL_SYSTICK_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e00e      	b.n	800325c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b0f      	cmp	r3, #15
 8003242:	d80a      	bhi.n	800325a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003244:	2200      	movs	r2, #0
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	f000 f944 	bl	80034d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003250:	4a06      	ldr	r2, [pc, #24]	; (800326c <HAL_InitTick+0x5c>)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	e000      	b.n	800325c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
}
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20000118 	.word	0x20000118
 8003268:	20000120 	.word	0x20000120
 800326c:	2000011c 	.word	0x2000011c

08003270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_IncTick+0x20>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_IncTick+0x24>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4413      	add	r3, r2
 8003280:	4a04      	ldr	r2, [pc, #16]	; (8003294 <HAL_IncTick+0x24>)
 8003282:	6013      	str	r3, [r2, #0]
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20000120 	.word	0x20000120
 8003294:	2000b63c 	.word	0x2000b63c

08003298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return uwTick;
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_GetTick+0x14>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	2000b63c 	.word	0x2000b63c

080032b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032b8:	f7ff ffee 	bl	8003298 <HAL_GetTick>
 80032bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d005      	beq.n	80032d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <HAL_Delay+0x44>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032d6:	bf00      	nop
 80032d8:	f7ff ffde 	bl	8003298 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d8f7      	bhi.n	80032d8 <HAL_Delay+0x28>
  {
  }
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000120 	.word	0x20000120

080032f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <__NVIC_SetPriorityGrouping+0x40>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003314:	4013      	ands	r3, r2
 8003316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <__NVIC_SetPriorityGrouping+0x44>)
 8003322:	4313      	orrs	r3, r2
 8003324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003326:	4a04      	ldr	r2, [pc, #16]	; (8003338 <__NVIC_SetPriorityGrouping+0x40>)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	60d3      	str	r3, [r2, #12]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000ed00 	.word	0xe000ed00
 800333c:	05fa0000 	.word	0x05fa0000

08003340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <__NVIC_GetPriorityGrouping+0x18>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	0a1b      	lsrs	r3, r3, #8
 800334a:	f003 0307 	and.w	r3, r3, #7
}
 800334e:	4618      	mov	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	2b00      	cmp	r3, #0
 800336c:	db0b      	blt.n	8003386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	f003 021f 	and.w	r2, r3, #31
 8003374:	4907      	ldr	r1, [pc, #28]	; (8003394 <__NVIC_EnableIRQ+0x38>)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	2001      	movs	r0, #1
 800337e:	fa00 f202 	lsl.w	r2, r0, r2
 8003382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	e000e100 	.word	0xe000e100

08003398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	6039      	str	r1, [r7, #0]
 80033a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	db0a      	blt.n	80033c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	490c      	ldr	r1, [pc, #48]	; (80033e4 <__NVIC_SetPriority+0x4c>)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	0112      	lsls	r2, r2, #4
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	440b      	add	r3, r1
 80033bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c0:	e00a      	b.n	80033d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4908      	ldr	r1, [pc, #32]	; (80033e8 <__NVIC_SetPriority+0x50>)
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	3b04      	subs	r3, #4
 80033d0:	0112      	lsls	r2, r2, #4
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	440b      	add	r3, r1
 80033d6:	761a      	strb	r2, [r3, #24]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000e100 	.word	0xe000e100
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	; 0x24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f1c3 0307 	rsb	r3, r3, #7
 8003406:	2b04      	cmp	r3, #4
 8003408:	bf28      	it	cs
 800340a:	2304      	movcs	r3, #4
 800340c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3304      	adds	r3, #4
 8003412:	2b06      	cmp	r3, #6
 8003414:	d902      	bls.n	800341c <NVIC_EncodePriority+0x30>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3b03      	subs	r3, #3
 800341a:	e000      	b.n	800341e <NVIC_EncodePriority+0x32>
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003420:	f04f 32ff 	mov.w	r2, #4294967295
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43da      	mvns	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	401a      	ands	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003434:	f04f 31ff 	mov.w	r1, #4294967295
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fa01 f303 	lsl.w	r3, r1, r3
 800343e:	43d9      	mvns	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003444:	4313      	orrs	r3, r2
         );
}
 8003446:	4618      	mov	r0, r3
 8003448:	3724      	adds	r7, #36	; 0x24
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3b01      	subs	r3, #1
 8003460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003464:	d301      	bcc.n	800346a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003466:	2301      	movs	r3, #1
 8003468:	e00f      	b.n	800348a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346a:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <SysTick_Config+0x40>)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3b01      	subs	r3, #1
 8003470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003472:	210f      	movs	r1, #15
 8003474:	f04f 30ff 	mov.w	r0, #4294967295
 8003478:	f7ff ff8e 	bl	8003398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <SysTick_Config+0x40>)
 800347e:	2200      	movs	r2, #0
 8003480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003482:	4b04      	ldr	r3, [pc, #16]	; (8003494 <SysTick_Config+0x40>)
 8003484:	2207      	movs	r2, #7
 8003486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	e000e010 	.word	0xe000e010

08003498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b07      	cmp	r3, #7
 80034a4:	d00f      	beq.n	80034c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b06      	cmp	r3, #6
 80034aa:	d00c      	beq.n	80034c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d009      	beq.n	80034c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d006      	beq.n	80034c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d003      	beq.n	80034c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80034be:	2191      	movs	r1, #145	; 0x91
 80034c0:	4804      	ldr	r0, [pc, #16]	; (80034d4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80034c2:	f7ff f936 	bl	8002732 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff ff16 	bl	80032f8 <__NVIC_SetPriorityGrouping>
}
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	08016120 	.word	0x08016120

080034d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b0f      	cmp	r3, #15
 80034ee:	d903      	bls.n	80034f8 <HAL_NVIC_SetPriority+0x20>
 80034f0:	21a9      	movs	r1, #169	; 0xa9
 80034f2:	480e      	ldr	r0, [pc, #56]	; (800352c <HAL_NVIC_SetPriority+0x54>)
 80034f4:	f7ff f91d 	bl	8002732 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b0f      	cmp	r3, #15
 80034fc:	d903      	bls.n	8003506 <HAL_NVIC_SetPriority+0x2e>
 80034fe:	21aa      	movs	r1, #170	; 0xaa
 8003500:	480a      	ldr	r0, [pc, #40]	; (800352c <HAL_NVIC_SetPriority+0x54>)
 8003502:	f7ff f916 	bl	8002732 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003506:	f7ff ff1b 	bl	8003340 <__NVIC_GetPriorityGrouping>
 800350a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	6978      	ldr	r0, [r7, #20]
 8003512:	f7ff ff6b 	bl	80033ec <NVIC_EncodePriority>
 8003516:	4602      	mov	r2, r0
 8003518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff ff3a 	bl	8003398 <__NVIC_SetPriority>
}
 8003524:	bf00      	nop
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	08016120 	.word	0x08016120

08003530 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	2b00      	cmp	r3, #0
 8003540:	da03      	bge.n	800354a <HAL_NVIC_EnableIRQ+0x1a>
 8003542:	21bd      	movs	r1, #189	; 0xbd
 8003544:	4805      	ldr	r0, [pc, #20]	; (800355c <HAL_NVIC_EnableIRQ+0x2c>)
 8003546:	f7ff f8f4 	bl	8002732 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff ff04 	bl	800335c <__NVIC_EnableIRQ>
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	08016120 	.word	0x08016120

08003560 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff73 	bl	8003454 <SysTick_Config>
 800356e:	4603      	mov	r3, r0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003586:	f7ff fe87 	bl	8003298 <HAL_GetTick>
 800358a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d008      	beq.n	80035aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2280      	movs	r2, #128	; 0x80
 800359c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e052      	b.n	8003650 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0216 	bic.w	r2, r2, #22
 80035b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d103      	bne.n	80035da <HAL_DMA_Abort+0x62>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0208 	bic.w	r2, r2, #8
 80035e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0201 	bic.w	r2, r2, #1
 80035f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035fa:	e013      	b.n	8003624 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035fc:	f7ff fe4c 	bl	8003298 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b05      	cmp	r3, #5
 8003608:	d90c      	bls.n	8003624 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2220      	movs	r2, #32
 800360e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2203      	movs	r2, #3
 8003614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e015      	b.n	8003650 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e4      	bne.n	80035fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003636:	223f      	movs	r2, #63	; 0x3f
 8003638:	409a      	lsls	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d004      	beq.n	8003676 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2280      	movs	r2, #128	; 0x80
 8003670:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e00c      	b.n	8003690 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2205      	movs	r2, #5
 800367a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036aa:	b2db      	uxtb	r3, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036ca:	2300      	movs	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a3a      	ldr	r2, [pc, #232]	; (80037c0 <HAL_GPIO_Init+0x108>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d02b      	beq.n	8003732 <HAL_GPIO_Init+0x7a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a39      	ldr	r2, [pc, #228]	; (80037c4 <HAL_GPIO_Init+0x10c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d027      	beq.n	8003732 <HAL_GPIO_Init+0x7a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a38      	ldr	r2, [pc, #224]	; (80037c8 <HAL_GPIO_Init+0x110>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d023      	beq.n	8003732 <HAL_GPIO_Init+0x7a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a37      	ldr	r2, [pc, #220]	; (80037cc <HAL_GPIO_Init+0x114>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01f      	beq.n	8003732 <HAL_GPIO_Init+0x7a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a36      	ldr	r2, [pc, #216]	; (80037d0 <HAL_GPIO_Init+0x118>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d01b      	beq.n	8003732 <HAL_GPIO_Init+0x7a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a35      	ldr	r2, [pc, #212]	; (80037d4 <HAL_GPIO_Init+0x11c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d017      	beq.n	8003732 <HAL_GPIO_Init+0x7a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a34      	ldr	r2, [pc, #208]	; (80037d8 <HAL_GPIO_Init+0x120>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d013      	beq.n	8003732 <HAL_GPIO_Init+0x7a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a33      	ldr	r2, [pc, #204]	; (80037dc <HAL_GPIO_Init+0x124>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00f      	beq.n	8003732 <HAL_GPIO_Init+0x7a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a32      	ldr	r2, [pc, #200]	; (80037e0 <HAL_GPIO_Init+0x128>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00b      	beq.n	8003732 <HAL_GPIO_Init+0x7a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a31      	ldr	r2, [pc, #196]	; (80037e4 <HAL_GPIO_Init+0x12c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d007      	beq.n	8003732 <HAL_GPIO_Init+0x7a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a30      	ldr	r2, [pc, #192]	; (80037e8 <HAL_GPIO_Init+0x130>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_Init+0x7a>
 800372a:	21aa      	movs	r1, #170	; 0xaa
 800372c:	482f      	ldr	r0, [pc, #188]	; (80037ec <HAL_GPIO_Init+0x134>)
 800372e:	f7ff f800 	bl	8002732 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d103      	bne.n	8003744 <HAL_GPIO_Init+0x8c>
 800373c:	21ab      	movs	r1, #171	; 0xab
 800373e:	482b      	ldr	r0, [pc, #172]	; (80037ec <HAL_GPIO_Init+0x134>)
 8003740:	f7fe fff7 	bl	8002732 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d035      	beq.n	80037b8 <HAL_GPIO_Init+0x100>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d031      	beq.n	80037b8 <HAL_GPIO_Init+0x100>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b11      	cmp	r3, #17
 800375a:	d02d      	beq.n	80037b8 <HAL_GPIO_Init+0x100>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b02      	cmp	r3, #2
 8003762:	d029      	beq.n	80037b8 <HAL_GPIO_Init+0x100>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b12      	cmp	r3, #18
 800376a:	d025      	beq.n	80037b8 <HAL_GPIO_Init+0x100>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003774:	d020      	beq.n	80037b8 <HAL_GPIO_Init+0x100>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800377e:	d01b      	beq.n	80037b8 <HAL_GPIO_Init+0x100>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003788:	d016      	beq.n	80037b8 <HAL_GPIO_Init+0x100>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003792:	d011      	beq.n	80037b8 <HAL_GPIO_Init+0x100>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800379c:	d00c      	beq.n	80037b8 <HAL_GPIO_Init+0x100>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80037a6:	d007      	beq.n	80037b8 <HAL_GPIO_Init+0x100>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d003      	beq.n	80037b8 <HAL_GPIO_Init+0x100>
 80037b0:	21ac      	movs	r1, #172	; 0xac
 80037b2:	480e      	ldr	r0, [pc, #56]	; (80037ec <HAL_GPIO_Init+0x134>)
 80037b4:	f7fe ffbd 	bl	8002732 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	e2c7      	b.n	8003d4e <HAL_GPIO_Init+0x696>
 80037be:	bf00      	nop
 80037c0:	40020000 	.word	0x40020000
 80037c4:	40020400 	.word	0x40020400
 80037c8:	40020800 	.word	0x40020800
 80037cc:	40020c00 	.word	0x40020c00
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40021400 	.word	0x40021400
 80037d8:	40021800 	.word	0x40021800
 80037dc:	40021c00 	.word	0x40021c00
 80037e0:	40022000 	.word	0x40022000
 80037e4:	40022400 	.word	0x40022400
 80037e8:	40022800 	.word	0x40022800
 80037ec:	0801615c 	.word	0x0801615c
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80037f0:	2201      	movs	r2, #1
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	429a      	cmp	r2, r3
 800380a:	f040 829d 	bne.w	8003d48 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b01      	cmp	r3, #1
 8003818:	d005      	beq.n	8003826 <HAL_GPIO_Init+0x16e>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d144      	bne.n	80038b0 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00f      	beq.n	800384e <HAL_GPIO_Init+0x196>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d00b      	beq.n	800384e <HAL_GPIO_Init+0x196>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d007      	beq.n	800384e <HAL_GPIO_Init+0x196>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2b03      	cmp	r3, #3
 8003844:	d003      	beq.n	800384e <HAL_GPIO_Init+0x196>
 8003846:	21bd      	movs	r1, #189	; 0xbd
 8003848:	4831      	ldr	r0, [pc, #196]	; (8003910 <HAL_GPIO_Init+0x258>)
 800384a:	f7fe ff72 	bl	8002732 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	2203      	movs	r2, #3
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003884:	2201      	movs	r2, #1
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	f003 0201 	and.w	r2, r3, #1
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d02b      	beq.n	8003914 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00b      	beq.n	80038dc <HAL_GPIO_Init+0x224>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d007      	beq.n	80038dc <HAL_GPIO_Init+0x224>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x224>
 80038d4:	21ce      	movs	r1, #206	; 0xce
 80038d6:	480e      	ldr	r0, [pc, #56]	; (8003910 <HAL_GPIO_Init+0x258>)
 80038d8:	f7fe ff2b 	bl	8002732 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	2203      	movs	r2, #3
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	60da      	str	r2, [r3, #12]
 800390c:	e002      	b.n	8003914 <HAL_GPIO_Init+0x25c>
 800390e:	bf00      	nop
 8003910:	0801615c 	.word	0x0801615c
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	2b02      	cmp	r3, #2
 800391e:	f040 8134 	bne.w	8003b8a <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 810b 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b01      	cmp	r3, #1
 8003932:	f000 8106 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 8101 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80fc 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 80f7 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	2b01      	cmp	r3, #1
 800395a:	f000 80f2 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b02      	cmp	r3, #2
 8003964:	f000 80ed 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2b02      	cmp	r3, #2
 800396e:	f000 80e8 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b02      	cmp	r3, #2
 8003978:	f000 80e3 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b03      	cmp	r3, #3
 8003982:	f000 80de 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b03      	cmp	r3, #3
 800398c:	f000 80d9 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	2b03      	cmp	r3, #3
 8003996:	f000 80d4 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b03      	cmp	r3, #3
 80039a0:	f000 80cf 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	f000 80ca 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	f000 80c5 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	f000 80c0 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	f000 80bb 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	f000 80b6 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b04      	cmp	r3, #4
 80039dc:	f000 80b1 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	f000 80ac 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	f000 80a7 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b05      	cmp	r3, #5
 80039fa:	f000 80a2 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b05      	cmp	r3, #5
 8003a04:	f000 809d 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	f000 8098 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b05      	cmp	r3, #5
 8003a18:	f000 8093 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b05      	cmp	r3, #5
 8003a22:	f000 808e 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b06      	cmp	r3, #6
 8003a2c:	f000 8089 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	2b06      	cmp	r3, #6
 8003a36:	f000 8084 	beq.w	8003b42 <HAL_GPIO_Init+0x48a>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b07      	cmp	r3, #7
 8003a40:	d07f      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b07      	cmp	r3, #7
 8003a48:	d07b      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b07      	cmp	r3, #7
 8003a50:	d077      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b07      	cmp	r3, #7
 8003a58:	d073      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b07      	cmp	r3, #7
 8003a60:	d06f      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	2b07      	cmp	r3, #7
 8003a68:	d06b      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b07      	cmp	r3, #7
 8003a70:	d067      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d063      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d05f      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d05b      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d057      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d053      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d04f      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d04b      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b09      	cmp	r3, #9
 8003ab0:	d047      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b09      	cmp	r3, #9
 8003ab8:	d043      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b09      	cmp	r3, #9
 8003ac0:	d03f      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b09      	cmp	r3, #9
 8003ac8:	d03b      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b09      	cmp	r3, #9
 8003ad0:	d037      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b09      	cmp	r3, #9
 8003ad8:	d033      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b09      	cmp	r3, #9
 8003ae0:	d02f      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b0a      	cmp	r3, #10
 8003ae8:	d02b      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b0a      	cmp	r3, #10
 8003af0:	d027      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b0a      	cmp	r3, #10
 8003af8:	d023      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b0a      	cmp	r3, #10
 8003b00:	d01f      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b0b      	cmp	r3, #11
 8003b08:	d01b      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b0c      	cmp	r3, #12
 8003b10:	d017      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b0c      	cmp	r3, #12
 8003b18:	d013      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b0c      	cmp	r3, #12
 8003b20:	d00f      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b0f      	cmp	r3, #15
 8003b28:	d00b      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b0d      	cmp	r3, #13
 8003b30:	d007      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b0e      	cmp	r3, #14
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_Init+0x48a>
 8003b3a:	21db      	movs	r1, #219	; 0xdb
 8003b3c:	4888      	ldr	r0, [pc, #544]	; (8003d60 <HAL_GPIO_Init+0x6a8>)
 8003b3e:	f7fe fdf8 	bl	8002732 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	08da      	lsrs	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3208      	adds	r2, #8
 8003b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	220f      	movs	r2, #15
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4013      	ands	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	08da      	lsrs	r2, r3, #3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3208      	adds	r2, #8
 8003b84:	69b9      	ldr	r1, [r7, #24]
 8003b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	2203      	movs	r2, #3
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 0203 	and.w	r2, r3, #3
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80be 	beq.w	8003d48 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bcc:	4b65      	ldr	r3, [pc, #404]	; (8003d64 <HAL_GPIO_Init+0x6ac>)
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	4a64      	ldr	r2, [pc, #400]	; (8003d64 <HAL_GPIO_Init+0x6ac>)
 8003bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bd6:	6453      	str	r3, [r2, #68]	; 0x44
 8003bd8:	4b62      	ldr	r3, [pc, #392]	; (8003d64 <HAL_GPIO_Init+0x6ac>)
 8003bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003be4:	4a60      	ldr	r2, [pc, #384]	; (8003d68 <HAL_GPIO_Init+0x6b0>)
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	089b      	lsrs	r3, r3, #2
 8003bea:	3302      	adds	r3, #2
 8003bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	220f      	movs	r2, #15
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a58      	ldr	r2, [pc, #352]	; (8003d6c <HAL_GPIO_Init+0x6b4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d037      	beq.n	8003c80 <HAL_GPIO_Init+0x5c8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a57      	ldr	r2, [pc, #348]	; (8003d70 <HAL_GPIO_Init+0x6b8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d031      	beq.n	8003c7c <HAL_GPIO_Init+0x5c4>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a56      	ldr	r2, [pc, #344]	; (8003d74 <HAL_GPIO_Init+0x6bc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d02b      	beq.n	8003c78 <HAL_GPIO_Init+0x5c0>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a55      	ldr	r2, [pc, #340]	; (8003d78 <HAL_GPIO_Init+0x6c0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d025      	beq.n	8003c74 <HAL_GPIO_Init+0x5bc>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a54      	ldr	r2, [pc, #336]	; (8003d7c <HAL_GPIO_Init+0x6c4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d01f      	beq.n	8003c70 <HAL_GPIO_Init+0x5b8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a53      	ldr	r2, [pc, #332]	; (8003d80 <HAL_GPIO_Init+0x6c8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d019      	beq.n	8003c6c <HAL_GPIO_Init+0x5b4>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a52      	ldr	r2, [pc, #328]	; (8003d84 <HAL_GPIO_Init+0x6cc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d013      	beq.n	8003c68 <HAL_GPIO_Init+0x5b0>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a51      	ldr	r2, [pc, #324]	; (8003d88 <HAL_GPIO_Init+0x6d0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00d      	beq.n	8003c64 <HAL_GPIO_Init+0x5ac>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a50      	ldr	r2, [pc, #320]	; (8003d8c <HAL_GPIO_Init+0x6d4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d007      	beq.n	8003c60 <HAL_GPIO_Init+0x5a8>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a4f      	ldr	r2, [pc, #316]	; (8003d90 <HAL_GPIO_Init+0x6d8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d101      	bne.n	8003c5c <HAL_GPIO_Init+0x5a4>
 8003c58:	2309      	movs	r3, #9
 8003c5a:	e012      	b.n	8003c82 <HAL_GPIO_Init+0x5ca>
 8003c5c:	230a      	movs	r3, #10
 8003c5e:	e010      	b.n	8003c82 <HAL_GPIO_Init+0x5ca>
 8003c60:	2308      	movs	r3, #8
 8003c62:	e00e      	b.n	8003c82 <HAL_GPIO_Init+0x5ca>
 8003c64:	2307      	movs	r3, #7
 8003c66:	e00c      	b.n	8003c82 <HAL_GPIO_Init+0x5ca>
 8003c68:	2306      	movs	r3, #6
 8003c6a:	e00a      	b.n	8003c82 <HAL_GPIO_Init+0x5ca>
 8003c6c:	2305      	movs	r3, #5
 8003c6e:	e008      	b.n	8003c82 <HAL_GPIO_Init+0x5ca>
 8003c70:	2304      	movs	r3, #4
 8003c72:	e006      	b.n	8003c82 <HAL_GPIO_Init+0x5ca>
 8003c74:	2303      	movs	r3, #3
 8003c76:	e004      	b.n	8003c82 <HAL_GPIO_Init+0x5ca>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e002      	b.n	8003c82 <HAL_GPIO_Init+0x5ca>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <HAL_GPIO_Init+0x5ca>
 8003c80:	2300      	movs	r3, #0
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	f002 0203 	and.w	r2, r2, #3
 8003c88:	0092      	lsls	r2, r2, #2
 8003c8a:	4093      	lsls	r3, r2
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c92:	4935      	ldr	r1, [pc, #212]	; (8003d68 <HAL_GPIO_Init+0x6b0>)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	089b      	lsrs	r3, r3, #2
 8003c98:	3302      	adds	r3, #2
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ca0:	4b3c      	ldr	r3, [pc, #240]	; (8003d94 <HAL_GPIO_Init+0x6dc>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cc4:	4a33      	ldr	r2, [pc, #204]	; (8003d94 <HAL_GPIO_Init+0x6dc>)
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cca:	4b32      	ldr	r3, [pc, #200]	; (8003d94 <HAL_GPIO_Init+0x6dc>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cee:	4a29      	ldr	r2, [pc, #164]	; (8003d94 <HAL_GPIO_Init+0x6dc>)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cf4:	4b27      	ldr	r3, [pc, #156]	; (8003d94 <HAL_GPIO_Init+0x6dc>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d18:	4a1e      	ldr	r2, [pc, #120]	; (8003d94 <HAL_GPIO_Init+0x6dc>)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <HAL_GPIO_Init+0x6dc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	43db      	mvns	r3, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d42:	4a14      	ldr	r2, [pc, #80]	; (8003d94 <HAL_GPIO_Init+0x6dc>)
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	2b0f      	cmp	r3, #15
 8003d52:	f67f ad4d 	bls.w	80037f0 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8003d56:	bf00      	nop
 8003d58:	bf00      	nop
 8003d5a:	3720      	adds	r7, #32
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	0801615c 	.word	0x0801615c
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40013800 	.word	0x40013800
 8003d6c:	40020000 	.word	0x40020000
 8003d70:	40020400 	.word	0x40020400
 8003d74:	40020800 	.word	0x40020800
 8003d78:	40020c00 	.word	0x40020c00
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	40021400 	.word	0x40021400
 8003d84:	40021800 	.word	0x40021800
 8003d88:	40021c00 	.word	0x40021c00
 8003d8c:	40022000 	.word	0x40022000
 8003d90:	40022400 	.word	0x40022400
 8003d94:	40013c00 	.word	0x40013c00

08003d98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003da4:	887b      	ldrh	r3, [r7, #2]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d104      	bne.n	8003db4 <HAL_GPIO_ReadPin+0x1c>
 8003daa:	f240 1177 	movw	r1, #375	; 0x177
 8003dae:	4809      	ldr	r0, [pc, #36]	; (8003dd4 <HAL_GPIO_ReadPin+0x3c>)
 8003db0:	f7fe fcbf 	bl	8002732 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	887b      	ldrh	r3, [r7, #2]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
 8003dc4:	e001      	b.n	8003dca <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	0801615c 	.word	0x0801615c

08003dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	807b      	strh	r3, [r7, #2]
 8003de4:	4613      	mov	r3, r2
 8003de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003de8:	887b      	ldrh	r3, [r7, #2]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d104      	bne.n	8003df8 <HAL_GPIO_WritePin+0x20>
 8003dee:	f240 1197 	movw	r1, #407	; 0x197
 8003df2:	480e      	ldr	r0, [pc, #56]	; (8003e2c <HAL_GPIO_WritePin+0x54>)
 8003df4:	f7fe fc9d 	bl	8002732 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003df8:	787b      	ldrb	r3, [r7, #1]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <HAL_GPIO_WritePin+0x36>
 8003dfe:	787b      	ldrb	r3, [r7, #1]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d004      	beq.n	8003e0e <HAL_GPIO_WritePin+0x36>
 8003e04:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8003e08:	4808      	ldr	r0, [pc, #32]	; (8003e2c <HAL_GPIO_WritePin+0x54>)
 8003e0a:	f7fe fc92 	bl	8002732 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003e0e:	787b      	ldrb	r3, [r7, #1]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e14:	887a      	ldrh	r2, [r7, #2]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003e1a:	e003      	b.n	8003e24 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003e1c:	887b      	ldrh	r3, [r7, #2]
 8003e1e:	041a      	lsls	r2, r3, #16
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	619a      	str	r2, [r3, #24]
}
 8003e24:	bf00      	nop
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	0801615c 	.word	0x0801615c

08003e30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e3a:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d006      	beq.n	8003e54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e46:	4a05      	ldr	r2, [pc, #20]	; (8003e5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e48:	88fb      	ldrh	r3, [r7, #6]
 8003e4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f806 	bl	8003e60 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e54:	bf00      	nop
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40013c00 	.word	0x40013c00

08003e60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e107      	b.n	800409a <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a85      	ldr	r2, [pc, #532]	; (80040a4 <HAL_I2C_Init+0x22c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d013      	beq.n	8003ebc <HAL_I2C_Init+0x44>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a83      	ldr	r2, [pc, #524]	; (80040a8 <HAL_I2C_Init+0x230>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00e      	beq.n	8003ebc <HAL_I2C_Init+0x44>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a82      	ldr	r2, [pc, #520]	; (80040ac <HAL_I2C_Init+0x234>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d009      	beq.n	8003ebc <HAL_I2C_Init+0x44>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a80      	ldr	r2, [pc, #512]	; (80040b0 <HAL_I2C_Init+0x238>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d004      	beq.n	8003ebc <HAL_I2C_Init+0x44>
 8003eb2:	f240 2119 	movw	r1, #537	; 0x219
 8003eb6:	487f      	ldr	r0, [pc, #508]	; (80040b4 <HAL_I2C_Init+0x23c>)
 8003eb8:	f7fe fc3b 	bl	8002732 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec4:	d304      	bcc.n	8003ed0 <HAL_I2C_Init+0x58>
 8003ec6:	f240 211a 	movw	r1, #538	; 0x21a
 8003eca:	487a      	ldr	r0, [pc, #488]	; (80040b4 <HAL_I2C_Init+0x23c>)
 8003ecc:	f7fe fc31 	bl	8002732 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d008      	beq.n	8003eea <HAL_I2C_Init+0x72>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d004      	beq.n	8003eea <HAL_I2C_Init+0x72>
 8003ee0:	f240 211b 	movw	r1, #539	; 0x21b
 8003ee4:	4873      	ldr	r0, [pc, #460]	; (80040b4 <HAL_I2C_Init+0x23c>)
 8003ee6:	f7fe fc24 	bl	8002732 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <HAL_I2C_Init+0x8e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003efa:	d004      	beq.n	8003f06 <HAL_I2C_Init+0x8e>
 8003efc:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8003f00:	486c      	ldr	r0, [pc, #432]	; (80040b4 <HAL_I2C_Init+0x23c>)
 8003f02:	f7fe fc16 	bl	8002732 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	2bff      	cmp	r3, #255	; 0xff
 8003f0c:	d904      	bls.n	8003f18 <HAL_I2C_Init+0xa0>
 8003f0e:	f240 211d 	movw	r1, #541	; 0x21d
 8003f12:	4868      	ldr	r0, [pc, #416]	; (80040b4 <HAL_I2C_Init+0x23c>)
 8003f14:	f7fe fc0d 	bl	8002732 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d020      	beq.n	8003f62 <HAL_I2C_Init+0xea>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d01c      	beq.n	8003f62 <HAL_I2C_Init+0xea>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d018      	beq.n	8003f62 <HAL_I2C_Init+0xea>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d014      	beq.n	8003f62 <HAL_I2C_Init+0xea>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d010      	beq.n	8003f62 <HAL_I2C_Init+0xea>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	2b05      	cmp	r3, #5
 8003f46:	d00c      	beq.n	8003f62 <HAL_I2C_Init+0xea>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2b06      	cmp	r3, #6
 8003f4e:	d008      	beq.n	8003f62 <HAL_I2C_Init+0xea>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2b07      	cmp	r3, #7
 8003f56:	d004      	beq.n	8003f62 <HAL_I2C_Init+0xea>
 8003f58:	f240 211e 	movw	r1, #542	; 0x21e
 8003f5c:	4855      	ldr	r0, [pc, #340]	; (80040b4 <HAL_I2C_Init+0x23c>)
 8003f5e:	f7fe fbe8 	bl	8002732 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <HAL_I2C_Init+0x106>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f72:	d004      	beq.n	8003f7e <HAL_I2C_Init+0x106>
 8003f74:	f240 211f 	movw	r1, #543	; 0x21f
 8003f78:	484e      	ldr	r0, [pc, #312]	; (80040b4 <HAL_I2C_Init+0x23c>)
 8003f7a:	f7fe fbda 	bl	8002732 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d009      	beq.n	8003f9a <HAL_I2C_Init+0x122>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f8e:	d004      	beq.n	8003f9a <HAL_I2C_Init+0x122>
 8003f90:	f44f 7108 	mov.w	r1, #544	; 0x220
 8003f94:	4847      	ldr	r0, [pc, #284]	; (80040b4 <HAL_I2C_Init+0x23c>)
 8003f96:	f7fe fbcc 	bl	8002732 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd f9ea 	bl	8001388 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2224      	movs	r2, #36	; 0x24
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fe8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d107      	bne.n	8004002 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	e006      	b.n	8004010 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800400e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d104      	bne.n	8004022 <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004020:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6859      	ldr	r1, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <HAL_I2C_Init+0x240>)
 800402e:	430b      	orrs	r3, r1
 8004030:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004040:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69d9      	ldr	r1, [r3, #28]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1a      	ldr	r2, [r3, #32]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40005400 	.word	0x40005400
 80040a8:	40005800 	.word	0x40005800
 80040ac:	40005c00 	.word	0x40005c00
 80040b0:	40006000 	.word	0x40006000
 80040b4:	08016198 	.word	0x08016198
 80040b8:	02008000 	.word	0x02008000

080040bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	461a      	mov	r2, r3
 80040c8:	460b      	mov	r3, r1
 80040ca:	817b      	strh	r3, [r7, #10]
 80040cc:	4613      	mov	r3, r2
 80040ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b20      	cmp	r3, #32
 80040da:	f040 80da 	bne.w	8004292 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_I2C_Master_Transmit+0x30>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e0d3      	b.n	8004294 <HAL_I2C_Master_Transmit+0x1d8>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040f4:	f7ff f8d0 	bl	8003298 <HAL_GetTick>
 80040f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	2319      	movs	r3, #25
 8004100:	2201      	movs	r2, #1
 8004102:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fefb 	bl	8004f02 <I2C_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e0be      	b.n	8004294 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2221      	movs	r2, #33	; 0x21
 800411a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2210      	movs	r2, #16
 8004122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	893a      	ldrh	r2, [r7, #8]
 8004136:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	2bff      	cmp	r3, #255	; 0xff
 8004146:	d90e      	bls.n	8004166 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	22ff      	movs	r2, #255	; 0xff
 800414c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004152:	b2da      	uxtb	r2, r3
 8004154:	8979      	ldrh	r1, [r7, #10]
 8004156:	4b51      	ldr	r3, [pc, #324]	; (800429c <HAL_I2C_Master_Transmit+0x1e0>)
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f001 f8e6 	bl	8005330 <I2C_TransferConfig>
 8004164:	e06c      	b.n	8004240 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004174:	b2da      	uxtb	r2, r3
 8004176:	8979      	ldrh	r1, [r7, #10]
 8004178:	4b48      	ldr	r3, [pc, #288]	; (800429c <HAL_I2C_Master_Transmit+0x1e0>)
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f001 f8d5 	bl	8005330 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004186:	e05b      	b.n	8004240 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	6a39      	ldr	r1, [r7, #32]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fef8 	bl	8004f82 <I2C_WaitOnTXISFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e07b      	b.n	8004294 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	781a      	ldrb	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d034      	beq.n	8004240 <HAL_I2C_Master_Transmit+0x184>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d130      	bne.n	8004240 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	2200      	movs	r2, #0
 80041e6:	2180      	movs	r1, #128	; 0x80
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fe8a 	bl	8004f02 <I2C_WaitOnFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e04d      	b.n	8004294 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2bff      	cmp	r3, #255	; 0xff
 8004200:	d90e      	bls.n	8004220 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	22ff      	movs	r2, #255	; 0xff
 8004206:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420c:	b2da      	uxtb	r2, r3
 800420e:	8979      	ldrh	r1, [r7, #10]
 8004210:	2300      	movs	r3, #0
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f001 f889 	bl	8005330 <I2C_TransferConfig>
 800421e:	e00f      	b.n	8004240 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422e:	b2da      	uxtb	r2, r3
 8004230:	8979      	ldrh	r1, [r7, #10]
 8004232:	2300      	movs	r3, #0
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f001 f878 	bl	8005330 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d19e      	bne.n	8004188 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	6a39      	ldr	r1, [r7, #32]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fed7 	bl	8005002 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e01a      	b.n	8004294 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2220      	movs	r2, #32
 8004264:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6859      	ldr	r1, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <HAL_I2C_Master_Transmit+0x1e4>)
 8004272:	400b      	ands	r3, r1
 8004274:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	e000      	b.n	8004294 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004292:	2302      	movs	r3, #2
  }
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	80002000 	.word	0x80002000
 80042a0:	fe00e800 	.word	0xfe00e800

080042a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	461a      	mov	r2, r3
 80042b0:	460b      	mov	r3, r1
 80042b2:	817b      	strh	r3, [r7, #10]
 80042b4:	4613      	mov	r3, r2
 80042b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	f040 80db 	bne.w	800447c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_I2C_Master_Receive+0x30>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e0d4      	b.n	800447e <HAL_I2C_Master_Receive+0x1da>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042dc:	f7fe ffdc 	bl	8003298 <HAL_GetTick>
 80042e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	2319      	movs	r3, #25
 80042e8:	2201      	movs	r2, #1
 80042ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 fe07 	bl	8004f02 <I2C_WaitOnFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e0bf      	b.n	800447e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2222      	movs	r2, #34	; 0x22
 8004302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2210      	movs	r2, #16
 800430a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	893a      	ldrh	r2, [r7, #8]
 800431e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	2bff      	cmp	r3, #255	; 0xff
 800432e:	d90e      	bls.n	800434e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	22ff      	movs	r2, #255	; 0xff
 8004334:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	b2da      	uxtb	r2, r3
 800433c:	8979      	ldrh	r1, [r7, #10]
 800433e:	4b52      	ldr	r3, [pc, #328]	; (8004488 <HAL_I2C_Master_Receive+0x1e4>)
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fff2 	bl	8005330 <I2C_TransferConfig>
 800434c:	e06d      	b.n	800442a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435c:	b2da      	uxtb	r2, r3
 800435e:	8979      	ldrh	r1, [r7, #10]
 8004360:	4b49      	ldr	r3, [pc, #292]	; (8004488 <HAL_I2C_Master_Receive+0x1e4>)
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 ffe1 	bl	8005330 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800436e:	e05c      	b.n	800442a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	6a39      	ldr	r1, [r7, #32]
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fe81 	bl	800507c <I2C_WaitOnRXNEFlagUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e07c      	b.n	800447e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d034      	beq.n	800442a <HAL_I2C_Master_Receive+0x186>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d130      	bne.n	800442a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	2200      	movs	r2, #0
 80043d0:	2180      	movs	r1, #128	; 0x80
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fd95 	bl	8004f02 <I2C_WaitOnFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e04d      	b.n	800447e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2bff      	cmp	r3, #255	; 0xff
 80043ea:	d90e      	bls.n	800440a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	22ff      	movs	r2, #255	; 0xff
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	8979      	ldrh	r1, [r7, #10]
 80043fa:	2300      	movs	r3, #0
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 ff94 	bl	8005330 <I2C_TransferConfig>
 8004408:	e00f      	b.n	800442a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004418:	b2da      	uxtb	r2, r3
 800441a:	8979      	ldrh	r1, [r7, #10]
 800441c:	2300      	movs	r3, #0
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 ff83 	bl	8005330 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d19d      	bne.n	8004370 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	6a39      	ldr	r1, [r7, #32]
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 fde2 	bl	8005002 <I2C_WaitOnSTOPFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e01a      	b.n	800447e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2220      	movs	r2, #32
 800444e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6859      	ldr	r1, [r3, #4]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4b0c      	ldr	r3, [pc, #48]	; (800448c <HAL_I2C_Master_Receive+0x1e8>)
 800445c:	400b      	ands	r3, r1
 800445e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	e000      	b.n	800447e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800447c:	2302      	movs	r3, #2
  }
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	80002400 	.word	0x80002400
 800448c:	fe00e800 	.word	0xfe00e800

08004490 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	68f9      	ldr	r1, [r7, #12]
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	4798      	blx	r3
  }
}
 80044bc:	bf00      	nop
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d010      	beq.n	800450a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	09db      	lsrs	r3, r3, #7
 80044ec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f8:	f043 0201 	orr.w	r2, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004508:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	0a9b      	lsrs	r3, r3, #10
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d010      	beq.n	8004538 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	09db      	lsrs	r3, r3, #7
 800451a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004526:	f043 0208 	orr.w	r2, r3, #8
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004536:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	0a5b      	lsrs	r3, r3, #9
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d010      	beq.n	8004566 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	09db      	lsrs	r3, r3, #7
 8004548:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004554:	f043 0202 	orr.w	r2, r3, #2
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004564:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 030b 	and.w	r3, r3, #11
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fb89 	bl	8004c90 <I2C_ITError>
  }
}
 800457e:	bf00      	nop
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	70fb      	strb	r3, [r7, #3]
 80045ba:	4613      	mov	r3, r2
 80045bc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b086      	sub	sp, #24
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <I2C_Slave_ISR_IT+0x24>
 8004626:	2302      	movs	r3, #2
 8004628:	e0ec      	b.n	8004804 <I2C_Slave_ISR_IT+0x1fe>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800464a:	6939      	ldr	r1, [r7, #16]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f9bf 	bl	80049d0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	091b      	lsrs	r3, r3, #4
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d04d      	beq.n	80046fa <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004666:	2b00      	cmp	r3, #0
 8004668:	d047      	beq.n	80046fa <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d128      	bne.n	80046c6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b28      	cmp	r3, #40	; 0x28
 800467e:	d108      	bne.n	8004692 <I2C_Slave_ISR_IT+0x8c>
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004686:	d104      	bne.n	8004692 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004688:	6939      	ldr	r1, [r7, #16]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 faaa 	bl	8004be4 <I2C_ITListenCplt>
 8004690:	e032      	b.n	80046f8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b29      	cmp	r3, #41	; 0x29
 800469c:	d10e      	bne.n	80046bc <I2C_Slave_ISR_IT+0xb6>
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046a4:	d00a      	beq.n	80046bc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2210      	movs	r2, #16
 80046ac:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 fbe5 	bl	8004e7e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f92d 	bl	8004914 <I2C_ITSlaveSeqCplt>
 80046ba:	e01d      	b.n	80046f8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2210      	movs	r2, #16
 80046c2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80046c4:	e096      	b.n	80047f4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2210      	movs	r2, #16
 80046cc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	f043 0204 	orr.w	r2, r3, #4
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d004      	beq.n	80046ea <I2C_Slave_ISR_IT+0xe4>
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046e6:	f040 8085 	bne.w	80047f4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	4619      	mov	r1, r3
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 facd 	bl	8004c90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80046f6:	e07d      	b.n	80047f4 <I2C_Slave_ISR_IT+0x1ee>
 80046f8:	e07c      	b.n	80047f4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	089b      	lsrs	r3, r3, #2
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d030      	beq.n	8004768 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	089b      	lsrs	r3, r3, #2
 800470a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800470e:	2b00      	cmp	r3, #0
 8004710:	d02a      	beq.n	8004768 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d018      	beq.n	800474e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d14f      	bne.n	80047f8 <I2C_Slave_ISR_IT+0x1f2>
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800475e:	d04b      	beq.n	80047f8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f8d7 	bl	8004914 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004766:	e047      	b.n	80047f8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	08db      	lsrs	r3, r3, #3
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	08db      	lsrs	r3, r3, #3
 8004778:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800477c:	2b00      	cmp	r3, #0
 800477e:	d004      	beq.n	800478a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004780:	6939      	ldr	r1, [r7, #16]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f842 	bl	800480c <I2C_ITAddrCplt>
 8004788:	e037      	b.n	80047fa <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	085b      	lsrs	r3, r3, #1
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d031      	beq.n	80047fa <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d02b      	beq.n	80047fa <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d018      	beq.n	80047de <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	781a      	ldrb	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28
 80047dc:	e00d      	b.n	80047fa <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047e4:	d002      	beq.n	80047ec <I2C_Slave_ISR_IT+0x1e6>
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d106      	bne.n	80047fa <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f891 	bl	8004914 <I2C_ITSlaveSeqCplt>
 80047f2:	e002      	b.n	80047fa <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80047f4:	bf00      	nop
 80047f6:	e000      	b.n	80047fa <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80047f8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800481c:	b2db      	uxtb	r3, r3
 800481e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004822:	2b28      	cmp	r3, #40	; 0x28
 8004824:	d16a      	bne.n	80048fc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	0c1b      	lsrs	r3, r3, #16
 800483e:	b29b      	uxth	r3, r3
 8004840:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004844:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	b29b      	uxth	r3, r3
 800484e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004852:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	b29b      	uxth	r3, r3
 800485c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004860:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d138      	bne.n	80048dc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800486a:	897b      	ldrh	r3, [r7, #10]
 800486c:	09db      	lsrs	r3, r3, #7
 800486e:	b29a      	uxth	r2, r3
 8004870:	89bb      	ldrh	r3, [r7, #12]
 8004872:	4053      	eors	r3, r2
 8004874:	b29b      	uxth	r3, r3
 8004876:	f003 0306 	and.w	r3, r3, #6
 800487a:	2b00      	cmp	r3, #0
 800487c:	d11c      	bne.n	80048b8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800487e:	897b      	ldrh	r3, [r7, #10]
 8004880:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004890:	2b02      	cmp	r3, #2
 8004892:	d13b      	bne.n	800490c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2208      	movs	r2, #8
 80048a0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048aa:	89ba      	ldrh	r2, [r7, #12]
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	4619      	mov	r1, r3
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff fe7c 	bl	80045ae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80048b6:	e029      	b.n	800490c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80048b8:	893b      	ldrh	r3, [r7, #8]
 80048ba:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80048bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fdb1 	bl	8005428 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048ce:	89ba      	ldrh	r2, [r7, #12]
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff fe6a 	bl	80045ae <HAL_I2C_AddrCallback>
}
 80048da:	e017      	b.n	800490c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80048dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fda1 	bl	8005428 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048ee:	89ba      	ldrh	r2, [r7, #12]
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff fe5a 	bl	80045ae <HAL_I2C_AddrCallback>
}
 80048fa:	e007      	b.n	800490c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2208      	movs	r2, #8
 8004902:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	0b9b      	lsrs	r3, r3, #14
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	e00d      	b.n	8004966 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	0bdb      	lsrs	r3, r3, #15
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004964:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b29      	cmp	r3, #41	; 0x29
 8004970:	d112      	bne.n	8004998 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2228      	movs	r2, #40	; 0x28
 8004976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2221      	movs	r2, #33	; 0x21
 800497e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004980:	2101      	movs	r1, #1
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fd50 	bl	8005428 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff fdf8 	bl	8004586 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004996:	e017      	b.n	80049c8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b2a      	cmp	r3, #42	; 0x2a
 80049a2:	d111      	bne.n	80049c8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2228      	movs	r2, #40	; 0x28
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2222      	movs	r2, #34	; 0x22
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80049b2:	2102      	movs	r1, #2
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fd37 	bl	8005428 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff fde9 	bl	800459a <HAL_I2C_SlaveRxCpltCallback>
}
 80049c8:	bf00      	nop
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ec:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2220      	movs	r2, #32
 80049f4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	2b21      	cmp	r3, #33	; 0x21
 80049fa:	d002      	beq.n	8004a02 <I2C_ITSlaveCplt+0x32>
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b29      	cmp	r3, #41	; 0x29
 8004a00:	d108      	bne.n	8004a14 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004a02:	f248 0101 	movw	r1, #32769	; 0x8001
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fd0e 	bl	8005428 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2221      	movs	r2, #33	; 0x21
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
 8004a12:	e00d      	b.n	8004a30 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b22      	cmp	r3, #34	; 0x22
 8004a18:	d002      	beq.n	8004a20 <I2C_ITSlaveCplt+0x50>
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a1e:	d107      	bne.n	8004a30 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004a20:	f248 0102 	movw	r1, #32770	; 0x8002
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 fcff 	bl	8005428 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2222      	movs	r2, #34	; 0x22
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a3e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6859      	ldr	r1, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4b64      	ldr	r3, [pc, #400]	; (8004bdc <I2C_ITSlaveCplt+0x20c>)
 8004a4c:	400b      	ands	r3, r1
 8004a4e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fa14 	bl	8004e7e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	0b9b      	lsrs	r3, r3, #14
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d013      	beq.n	8004a8a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a70:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d020      	beq.n	8004abc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a88:	e018      	b.n	8004abc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	0bdb      	lsrs	r3, r3, #15
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d012      	beq.n	8004abc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aa4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d006      	beq.n	8004abc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	089b      	lsrs	r3, r3, #2
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d020      	beq.n	8004b0a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f023 0304 	bic.w	r3, r3, #4
 8004ace:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00c      	beq.n	8004b0a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b18:	f043 0204 	orr.w	r2, r3, #4
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d010      	beq.n	8004b58 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f8a7 	bl	8004c90 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b28      	cmp	r3, #40	; 0x28
 8004b4c:	d141      	bne.n	8004bd2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b4e:	6979      	ldr	r1, [r7, #20]
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f847 	bl	8004be4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b56:	e03c      	b.n	8004bd2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b60:	d014      	beq.n	8004b8c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff fed6 	bl	8004914 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a1d      	ldr	r2, [pc, #116]	; (8004be0 <I2C_ITSlaveCplt+0x210>)
 8004b6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff fd20 	bl	80045ca <HAL_I2C_ListenCpltCallback>
}
 8004b8a:	e022      	b.n	8004bd2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b22      	cmp	r3, #34	; 0x22
 8004b96:	d10e      	bne.n	8004bb6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff fcf3 	bl	800459a <HAL_I2C_SlaveRxCpltCallback>
}
 8004bb4:	e00d      	b.n	8004bd2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff fcda 	bl	8004586 <HAL_I2C_SlaveTxCpltCallback>
}
 8004bd2:	bf00      	nop
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	fe00e800 	.word	0xfe00e800
 8004be0:	ffff0000 	.word	0xffff0000

08004be4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a26      	ldr	r2, [pc, #152]	; (8004c8c <I2C_ITListenCplt+0xa8>)
 8004bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	089b      	lsrs	r3, r3, #2
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d022      	beq.n	8004c62 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d012      	beq.n	8004c62 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5a:	f043 0204 	orr.w	r2, r3, #4
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c62:	f248 0103 	movw	r1, #32771	; 0x8003
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fbde 	bl	8005428 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2210      	movs	r2, #16
 8004c72:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff fca4 	bl	80045ca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004c82:	bf00      	nop
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	ffff0000 	.word	0xffff0000

08004c90 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a5d      	ldr	r2, [pc, #372]	; (8004e24 <I2C_ITError+0x194>)
 8004cae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	2b28      	cmp	r3, #40	; 0x28
 8004cc6:	d005      	beq.n	8004cd4 <I2C_ITError+0x44>
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	2b29      	cmp	r3, #41	; 0x29
 8004ccc:	d002      	beq.n	8004cd4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
 8004cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8004cd2:	d10b      	bne.n	8004cec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004cd4:	2103      	movs	r1, #3
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fba6 	bl	8005428 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2228      	movs	r2, #40	; 0x28
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a50      	ldr	r2, [pc, #320]	; (8004e28 <I2C_ITError+0x198>)
 8004ce8:	635a      	str	r2, [r3, #52]	; 0x34
 8004cea:	e011      	b.n	8004d10 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004cec:	f248 0103 	movw	r1, #32771	; 0x8003
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fb99 	bl	8005428 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b60      	cmp	r3, #96	; 0x60
 8004d00:	d003      	beq.n	8004d0a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d039      	beq.n	8004d92 <I2C_ITError+0x102>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b11      	cmp	r3, #17
 8004d22:	d002      	beq.n	8004d2a <I2C_ITError+0x9a>
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b21      	cmp	r3, #33	; 0x21
 8004d28:	d133      	bne.n	8004d92 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d38:	d107      	bne.n	8004d4a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d48:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe fca4 	bl	800369c <HAL_DMA_GetState>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d017      	beq.n	8004d8a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	4a33      	ldr	r2, [pc, #204]	; (8004e2c <I2C_ITError+0x19c>)
 8004d60:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fe fc72 	bl	8003658 <HAL_DMA_Abort_IT>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d04d      	beq.n	8004e16 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d84:	4610      	mov	r0, r2
 8004d86:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d88:	e045      	b.n	8004e16 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f850 	bl	8004e30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d90:	e041      	b.n	8004e16 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d039      	beq.n	8004e0e <I2C_ITError+0x17e>
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b12      	cmp	r3, #18
 8004d9e:	d002      	beq.n	8004da6 <I2C_ITError+0x116>
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b22      	cmp	r3, #34	; 0x22
 8004da4:	d133      	bne.n	8004e0e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db4:	d107      	bne.n	8004dc6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dc4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe fc66 	bl	800369c <HAL_DMA_GetState>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d017      	beq.n	8004e06 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dda:	4a14      	ldr	r2, [pc, #80]	; (8004e2c <I2C_ITError+0x19c>)
 8004ddc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe fc34 	bl	8003658 <HAL_DMA_Abort_IT>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d011      	beq.n	8004e1a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e00:	4610      	mov	r0, r2
 8004e02:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e04:	e009      	b.n	8004e1a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f812 	bl	8004e30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e0c:	e005      	b.n	8004e1a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f80e 	bl	8004e30 <I2C_TreatErrorCallback>
  }
}
 8004e14:	e002      	b.n	8004e1c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e16:	bf00      	nop
 8004e18:	e000      	b.n	8004e1c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e1a:	bf00      	nop
}
 8004e1c:	bf00      	nop
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	ffff0000 	.word	0xffff0000
 8004e28:	08004607 	.word	0x08004607
 8004e2c:	08004ec7 	.word	0x08004ec7

08004e30 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b60      	cmp	r3, #96	; 0x60
 8004e42:	d10e      	bne.n	8004e62 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff fbc9 	bl	80045f2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e60:	e009      	b.n	8004e76 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff fbb4 	bl	80045de <HAL_I2C_ErrorCallback>
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d103      	bne.n	8004e9c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d007      	beq.n	8004eba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0201 	orr.w	r2, r2, #1
 8004eb8:	619a      	str	r2, [r3, #24]
  }
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f7ff ff9b 	bl	8004e30 <I2C_TreatErrorCallback>
}
 8004efa:	bf00      	nop
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	60f8      	str	r0, [r7, #12]
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f12:	e022      	b.n	8004f5a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1a:	d01e      	beq.n	8004f5a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1c:	f7fe f9bc 	bl	8003298 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d302      	bcc.n	8004f32 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d113      	bne.n	8004f5a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f36:	f043 0220 	orr.w	r2, r3, #32
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e00f      	b.n	8004f7a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4013      	ands	r3, r2
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	bf0c      	ite	eq
 8004f6a:	2301      	moveq	r3, #1
 8004f6c:	2300      	movne	r3, #0
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d0cd      	beq.n	8004f14 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f8e:	e02c      	b.n	8004fea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	68b9      	ldr	r1, [r7, #8]
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f8eb 	bl	8005170 <I2C_IsErrorOccurred>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e02a      	b.n	8004ffa <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004faa:	d01e      	beq.n	8004fea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fac:	f7fe f974 	bl	8003298 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d302      	bcc.n	8004fc2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d113      	bne.n	8004fea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc6:	f043 0220 	orr.w	r2, r3, #32
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e007      	b.n	8004ffa <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d1cb      	bne.n	8004f90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800500e:	e028      	b.n	8005062 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f8ab 	bl	8005170 <I2C_IsErrorOccurred>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e026      	b.n	8005072 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005024:	f7fe f938 	bl	8003298 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	429a      	cmp	r2, r3
 8005032:	d302      	bcc.n	800503a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d113      	bne.n	8005062 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503e:	f043 0220 	orr.w	r2, r3, #32
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e007      	b.n	8005072 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	2b20      	cmp	r3, #32
 800506e:	d1cf      	bne.n	8005010 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005088:	e064      	b.n	8005154 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 f86e 	bl	8005170 <I2C_IsErrorOccurred>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e062      	b.n	8005164 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	f003 0320 	and.w	r3, r3, #32
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d138      	bne.n	800511e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d105      	bne.n	80050c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	e04e      	b.n	8005164 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	f003 0310 	and.w	r3, r3, #16
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d107      	bne.n	80050e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2210      	movs	r2, #16
 80050da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2204      	movs	r2, #4
 80050e0:	645a      	str	r2, [r3, #68]	; 0x44
 80050e2:	e002      	b.n	80050ea <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2220      	movs	r2, #32
 80050f0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6859      	ldr	r1, [r3, #4]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	4b1b      	ldr	r3, [pc, #108]	; (800516c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80050fe:	400b      	ands	r3, r1
 8005100:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e022      	b.n	8005164 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511e:	f7fe f8bb 	bl	8003298 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	429a      	cmp	r2, r3
 800512c:	d302      	bcc.n	8005134 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10f      	bne.n	8005154 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005138:	f043 0220 	orr.w	r2, r3, #32
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e007      	b.n	8005164 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	2b04      	cmp	r3, #4
 8005160:	d193      	bne.n	800508a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	fe00e800 	.word	0xfe00e800

08005170 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08a      	sub	sp, #40	; 0x28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b00      	cmp	r3, #0
 800519a:	d068      	beq.n	800526e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2210      	movs	r2, #16
 80051a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051a4:	e049      	b.n	800523a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ac:	d045      	beq.n	800523a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051ae:	f7fe f873 	bl	8003298 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d302      	bcc.n	80051c4 <I2C_IsErrorOccurred+0x54>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d13a      	bne.n	800523a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e6:	d121      	bne.n	800522c <I2C_IsErrorOccurred+0xbc>
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051ee:	d01d      	beq.n	800522c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d01a      	beq.n	800522c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005204:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005206:	f7fe f847 	bl	8003298 <HAL_GetTick>
 800520a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800520c:	e00e      	b.n	800522c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800520e:	f7fe f843 	bl	8003298 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b19      	cmp	r3, #25
 800521a:	d907      	bls.n	800522c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	f043 0320 	orr.w	r3, r3, #32
 8005222:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800522a:	e006      	b.n	800523a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	f003 0320 	and.w	r3, r3, #32
 8005236:	2b20      	cmp	r3, #32
 8005238:	d1e9      	bne.n	800520e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b20      	cmp	r3, #32
 8005246:	d003      	beq.n	8005250 <I2C_IsErrorOccurred+0xe0>
 8005248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0aa      	beq.n	80051a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2220      	movs	r2, #32
 800525e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	f043 0304 	orr.w	r3, r3, #4
 8005266:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00b      	beq.n	8005298 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005290:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00b      	beq.n	80052ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	f043 0308 	orr.w	r3, r3, #8
 80052a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00b      	beq.n	80052dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	f043 0302 	orr.w	r3, r3, #2
 80052ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80052dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01c      	beq.n	800531e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f7ff fdca 	bl	8004e7e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6859      	ldr	r1, [r3, #4]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4b0d      	ldr	r3, [pc, #52]	; (800532c <I2C_IsErrorOccurred+0x1bc>)
 80052f6:	400b      	ands	r3, r1
 80052f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	431a      	orrs	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800531e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005322:	4618      	mov	r0, r3
 8005324:	3728      	adds	r7, #40	; 0x28
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	fe00e800 	.word	0xfe00e800

08005330 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	607b      	str	r3, [r7, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	817b      	strh	r3, [r7, #10]
 800533e:	4613      	mov	r3, r2
 8005340:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a2f      	ldr	r2, [pc, #188]	; (8005404 <I2C_TransferConfig+0xd4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d013      	beq.n	8005374 <I2C_TransferConfig+0x44>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a2d      	ldr	r2, [pc, #180]	; (8005408 <I2C_TransferConfig+0xd8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00e      	beq.n	8005374 <I2C_TransferConfig+0x44>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a2c      	ldr	r2, [pc, #176]	; (800540c <I2C_TransferConfig+0xdc>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d009      	beq.n	8005374 <I2C_TransferConfig+0x44>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a2a      	ldr	r2, [pc, #168]	; (8005410 <I2C_TransferConfig+0xe0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d004      	beq.n	8005374 <I2C_TransferConfig+0x44>
 800536a:	f641 3147 	movw	r1, #6983	; 0x1b47
 800536e:	4829      	ldr	r0, [pc, #164]	; (8005414 <I2C_TransferConfig+0xe4>)
 8005370:	f7fd f9df 	bl	8002732 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800537a:	d00b      	beq.n	8005394 <I2C_TransferConfig+0x64>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005382:	d007      	beq.n	8005394 <I2C_TransferConfig+0x64>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d004      	beq.n	8005394 <I2C_TransferConfig+0x64>
 800538a:	f641 3148 	movw	r1, #6984	; 0x1b48
 800538e:	4821      	ldr	r0, [pc, #132]	; (8005414 <I2C_TransferConfig+0xe4>)
 8005390:	f7fd f9cf 	bl	8002732 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	4a20      	ldr	r2, [pc, #128]	; (8005418 <I2C_TransferConfig+0xe8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00f      	beq.n	80053bc <I2C_TransferConfig+0x8c>
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	4a1f      	ldr	r2, [pc, #124]	; (800541c <I2C_TransferConfig+0xec>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00b      	beq.n	80053bc <I2C_TransferConfig+0x8c>
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	4a1e      	ldr	r2, [pc, #120]	; (8005420 <I2C_TransferConfig+0xf0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d007      	beq.n	80053bc <I2C_TransferConfig+0x8c>
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d004      	beq.n	80053bc <I2C_TransferConfig+0x8c>
 80053b2:	f641 3149 	movw	r1, #6985	; 0x1b49
 80053b6:	4817      	ldr	r0, [pc, #92]	; (8005414 <I2C_TransferConfig+0xe4>)
 80053b8:	f7fd f9bb 	bl	8002732 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053bc:	897b      	ldrh	r3, [r7, #10]
 80053be:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053c2:	7a7b      	ldrb	r3, [r7, #9]
 80053c4:	041b      	lsls	r3, r3, #16
 80053c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053ca:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053d8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	0d5b      	lsrs	r3, r3, #21
 80053e4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80053e8:	4b0e      	ldr	r3, [pc, #56]	; (8005424 <I2C_TransferConfig+0xf4>)
 80053ea:	430b      	orrs	r3, r1
 80053ec:	43db      	mvns	r3, r3
 80053ee:	ea02 0103 	and.w	r1, r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80053fc:	bf00      	nop
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40005400 	.word	0x40005400
 8005408:	40005800 	.word	0x40005800
 800540c:	40005c00 	.word	0x40005c00
 8005410:	40006000 	.word	0x40006000
 8005414:	08016198 	.word	0x08016198
 8005418:	80004000 	.word	0x80004000
 800541c:	80002400 	.word	0x80002400
 8005420:	80002000 	.word	0x80002000
 8005424:	03ff63ff 	.word	0x03ff63ff

08005428 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005438:	887b      	ldrh	r3, [r7, #2]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00f      	beq.n	8005462 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005448:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005456:	2b28      	cmp	r3, #40	; 0x28
 8005458:	d003      	beq.n	8005462 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005460:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005462:	887b      	ldrh	r3, [r7, #2]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00f      	beq.n	800548c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005472:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800547a:	b2db      	uxtb	r3, r3
 800547c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005480:	2b28      	cmp	r3, #40	; 0x28
 8005482:	d003      	beq.n	800548c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800548a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800548c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005490:	2b00      	cmp	r3, #0
 8005492:	da03      	bge.n	800549c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800549a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800549c:	887b      	ldrh	r3, [r7, #2]
 800549e:	2b10      	cmp	r3, #16
 80054a0:	d103      	bne.n	80054aa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80054a8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80054aa:	887b      	ldrh	r3, [r7, #2]
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d103      	bne.n	80054b8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f043 0320 	orr.w	r3, r3, #32
 80054b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80054b8:	887b      	ldrh	r3, [r7, #2]
 80054ba:	2b40      	cmp	r3, #64	; 0x40
 80054bc:	d103      	bne.n	80054c6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054c4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6819      	ldr	r1, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	43da      	mvns	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	400a      	ands	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]
}
 80054d8:	bf00      	nop
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a32      	ldr	r2, [pc, #200]	; (80055bc <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d012      	beq.n	800551e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a30      	ldr	r2, [pc, #192]	; (80055c0 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00d      	beq.n	800551e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a2f      	ldr	r2, [pc, #188]	; (80055c4 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d008      	beq.n	800551e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a2d      	ldr	r2, [pc, #180]	; (80055c8 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d003      	beq.n	800551e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005516:	215e      	movs	r1, #94	; 0x5e
 8005518:	482c      	ldr	r0, [pc, #176]	; (80055cc <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800551a:	f7fd f90a 	bl	8002732 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d007      	beq.n	8005534 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552a:	d003      	beq.n	8005534 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800552c:	215f      	movs	r1, #95	; 0x5f
 800552e:	4827      	ldr	r0, [pc, #156]	; (80055cc <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8005530:	f7fd f8ff 	bl	8002732 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b20      	cmp	r3, #32
 800553e:	d138      	bne.n	80055b2 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005546:	2b01      	cmp	r3, #1
 8005548:	d101      	bne.n	800554e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 800554a:	2302      	movs	r3, #2
 800554c:	e032      	b.n	80055b4 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2224      	movs	r2, #36	; 0x24
 800555a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0201 	bic.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800557c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6819      	ldr	r1, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f042 0201 	orr.w	r2, r2, #1
 800559c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e000      	b.n	80055b4 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80055b2:	2302      	movs	r3, #2
  }
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40005400 	.word	0x40005400
 80055c0:	40005800 	.word	0x40005800
 80055c4:	40005c00 	.word	0x40005c00
 80055c8:	40006000 	.word	0x40006000
 80055cc:	080161d0 	.word	0x080161d0

080055d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a31      	ldr	r2, [pc, #196]	; (80056a4 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d012      	beq.n	800560a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a2f      	ldr	r2, [pc, #188]	; (80056a8 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00d      	beq.n	800560a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a2e      	ldr	r2, [pc, #184]	; (80056ac <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d008      	beq.n	800560a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a2c      	ldr	r2, [pc, #176]	; (80056b0 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d003      	beq.n	800560a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005602:	218c      	movs	r1, #140	; 0x8c
 8005604:	482b      	ldr	r0, [pc, #172]	; (80056b4 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8005606:	f7fd f894 	bl	8002732 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b0f      	cmp	r3, #15
 800560e:	d903      	bls.n	8005618 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8005610:	218d      	movs	r1, #141	; 0x8d
 8005612:	4828      	ldr	r0, [pc, #160]	; (80056b4 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8005614:	f7fd f88d 	bl	8002732 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b20      	cmp	r3, #32
 8005622:	d139      	bne.n	8005698 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 800562e:	2302      	movs	r3, #2
 8005630:	e033      	b.n	800569a <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2224      	movs	r2, #36	; 0x24
 800563e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0201 	bic.w	r2, r2, #1
 8005650:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005660:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	021b      	lsls	r3, r3, #8
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	e000      	b.n	800569a <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005698:	2302      	movs	r3, #2
  }
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40005400 	.word	0x40005400
 80056a8:	40005800 	.word	0x40005800
 80056ac:	40005c00 	.word	0x40005c00
 80056b0:	40006000 	.word	0x40006000
 80056b4:	080161d0 	.word	0x080161d0

080056b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80056c2:	4b23      	ldr	r3, [pc, #140]	; (8005750 <HAL_PWREx_EnableOverDrive+0x98>)
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	4a22      	ldr	r2, [pc, #136]	; (8005750 <HAL_PWREx_EnableOverDrive+0x98>)
 80056c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056cc:	6413      	str	r3, [r2, #64]	; 0x40
 80056ce:	4b20      	ldr	r3, [pc, #128]	; (8005750 <HAL_PWREx_EnableOverDrive+0x98>)
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80056da:	4b1e      	ldr	r3, [pc, #120]	; (8005754 <HAL_PWREx_EnableOverDrive+0x9c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1d      	ldr	r2, [pc, #116]	; (8005754 <HAL_PWREx_EnableOverDrive+0x9c>)
 80056e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056e6:	f7fd fdd7 	bl	8003298 <HAL_GetTick>
 80056ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80056ec:	e009      	b.n	8005702 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80056ee:	f7fd fdd3 	bl	8003298 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056fc:	d901      	bls.n	8005702 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e022      	b.n	8005748 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005702:	4b14      	ldr	r3, [pc, #80]	; (8005754 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800570a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570e:	d1ee      	bne.n	80056ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005710:	4b10      	ldr	r3, [pc, #64]	; (8005754 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a0f      	ldr	r2, [pc, #60]	; (8005754 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800571a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800571c:	f7fd fdbc 	bl	8003298 <HAL_GetTick>
 8005720:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005722:	e009      	b.n	8005738 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005724:	f7fd fdb8 	bl	8003298 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005732:	d901      	bls.n	8005738 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e007      	b.n	8005748 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005738:	4b06      	ldr	r3, [pc, #24]	; (8005754 <HAL_PWREx_EnableOverDrive+0x9c>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005740:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005744:	d1ee      	bne.n	8005724 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40023800 	.word	0x40023800
 8005754:	40007000 	.word	0x40007000

08005758 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005760:	2300      	movs	r3, #0
 8005762:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e345      	b.n	8005dfa <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b0f      	cmp	r3, #15
 8005774:	d904      	bls.n	8005780 <HAL_RCC_OscConfig+0x28>
 8005776:	f240 1163 	movw	r1, #355	; 0x163
 800577a:	4892      	ldr	r0, [pc, #584]	; (80059c4 <HAL_RCC_OscConfig+0x26c>)
 800577c:	f7fc ffd9 	bl	8002732 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 809a 	beq.w	80058c2 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00e      	beq.n	80057b4 <HAL_RCC_OscConfig+0x5c>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800579e:	d009      	beq.n	80057b4 <HAL_RCC_OscConfig+0x5c>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057a8:	d004      	beq.n	80057b4 <HAL_RCC_OscConfig+0x5c>
 80057aa:	f240 1169 	movw	r1, #361	; 0x169
 80057ae:	4885      	ldr	r0, [pc, #532]	; (80059c4 <HAL_RCC_OscConfig+0x26c>)
 80057b0:	f7fc ffbf 	bl	8002732 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057b4:	4b84      	ldr	r3, [pc, #528]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 030c 	and.w	r3, r3, #12
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d00c      	beq.n	80057da <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057c0:	4b81      	ldr	r3, [pc, #516]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 030c 	and.w	r3, r3, #12
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d112      	bne.n	80057f2 <HAL_RCC_OscConfig+0x9a>
 80057cc:	4b7e      	ldr	r3, [pc, #504]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057d8:	d10b      	bne.n	80057f2 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057da:	4b7b      	ldr	r3, [pc, #492]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d06c      	beq.n	80058c0 <HAL_RCC_OscConfig+0x168>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d168      	bne.n	80058c0 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e303      	b.n	8005dfa <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fa:	d106      	bne.n	800580a <HAL_RCC_OscConfig+0xb2>
 80057fc:	4b72      	ldr	r3, [pc, #456]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a71      	ldr	r2, [pc, #452]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 8005802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	e02e      	b.n	8005868 <HAL_RCC_OscConfig+0x110>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10c      	bne.n	800582c <HAL_RCC_OscConfig+0xd4>
 8005812:	4b6d      	ldr	r3, [pc, #436]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a6c      	ldr	r2, [pc, #432]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 8005818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	4b6a      	ldr	r3, [pc, #424]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a69      	ldr	r2, [pc, #420]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 8005824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	e01d      	b.n	8005868 <HAL_RCC_OscConfig+0x110>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005834:	d10c      	bne.n	8005850 <HAL_RCC_OscConfig+0xf8>
 8005836:	4b64      	ldr	r3, [pc, #400]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a63      	ldr	r2, [pc, #396]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 800583c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	4b61      	ldr	r3, [pc, #388]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a60      	ldr	r2, [pc, #384]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 8005848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	e00b      	b.n	8005868 <HAL_RCC_OscConfig+0x110>
 8005850:	4b5d      	ldr	r3, [pc, #372]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a5c      	ldr	r2, [pc, #368]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 8005856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	4b5a      	ldr	r3, [pc, #360]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a59      	ldr	r2, [pc, #356]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 8005862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d013      	beq.n	8005898 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fd fd12 	bl	8003298 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005878:	f7fd fd0e 	bl	8003298 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b64      	cmp	r3, #100	; 0x64
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e2b7      	b.n	8005dfa <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800588a:	4b4f      	ldr	r3, [pc, #316]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0f0      	beq.n	8005878 <HAL_RCC_OscConfig+0x120>
 8005896:	e014      	b.n	80058c2 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005898:	f7fd fcfe 	bl	8003298 <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a0:	f7fd fcfa 	bl	8003298 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b64      	cmp	r3, #100	; 0x64
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e2a3      	b.n	8005dfa <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058b2:	4b45      	ldr	r3, [pc, #276]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f0      	bne.n	80058a0 <HAL_RCC_OscConfig+0x148>
 80058be:	e000      	b.n	80058c2 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 8084 	beq.w	80059d8 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <HAL_RCC_OscConfig+0x192>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d004      	beq.n	80058ea <HAL_RCC_OscConfig+0x192>
 80058e0:	f240 119b 	movw	r1, #411	; 0x19b
 80058e4:	4837      	ldr	r0, [pc, #220]	; (80059c4 <HAL_RCC_OscConfig+0x26c>)
 80058e6:	f7fc ff24 	bl	8002732 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b1f      	cmp	r3, #31
 80058f0:	d904      	bls.n	80058fc <HAL_RCC_OscConfig+0x1a4>
 80058f2:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80058f6:	4833      	ldr	r0, [pc, #204]	; (80059c4 <HAL_RCC_OscConfig+0x26c>)
 80058f8:	f7fc ff1b 	bl	8002732 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058fc:	4b32      	ldr	r3, [pc, #200]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f003 030c 	and.w	r3, r3, #12
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00b      	beq.n	8005920 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005908:	4b2f      	ldr	r3, [pc, #188]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f003 030c 	and.w	r3, r3, #12
 8005910:	2b08      	cmp	r3, #8
 8005912:	d11c      	bne.n	800594e <HAL_RCC_OscConfig+0x1f6>
 8005914:	4b2c      	ldr	r3, [pc, #176]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d116      	bne.n	800594e <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005920:	4b29      	ldr	r3, [pc, #164]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <HAL_RCC_OscConfig+0x1e0>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d001      	beq.n	8005938 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e260      	b.n	8005dfa <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005938:	4b23      	ldr	r3, [pc, #140]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	4920      	ldr	r1, [pc, #128]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 8005948:	4313      	orrs	r3, r2
 800594a:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800594c:	e044      	b.n	80059d8 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d023      	beq.n	800599e <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005956:	4b1c      	ldr	r3, [pc, #112]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1b      	ldr	r2, [pc, #108]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005962:	f7fd fc99 	bl	8003298 <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800596a:	f7fd fc95 	bl	8003298 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e23e      	b.n	8005dfa <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597c:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f0      	beq.n	800596a <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005988:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	490c      	ldr	r1, [pc, #48]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 8005998:	4313      	orrs	r3, r2
 800599a:	600b      	str	r3, [r1, #0]
 800599c:	e01c      	b.n	80059d8 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800599e:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a09      	ldr	r2, [pc, #36]	; (80059c8 <HAL_RCC_OscConfig+0x270>)
 80059a4:	f023 0301 	bic.w	r3, r3, #1
 80059a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059aa:	f7fd fc75 	bl	8003298 <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059b0:	e00c      	b.n	80059cc <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059b2:	f7fd fc71 	bl	8003298 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d905      	bls.n	80059cc <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e21a      	b.n	8005dfa <HAL_RCC_OscConfig+0x6a2>
 80059c4:	0801620c 	.word	0x0801620c
 80059c8:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059cc:	4b7e      	ldr	r3, [pc, #504]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1ec      	bne.n	80059b2 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d043      	beq.n	8005a6c <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d008      	beq.n	80059fe <HAL_RCC_OscConfig+0x2a6>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d004      	beq.n	80059fe <HAL_RCC_OscConfig+0x2a6>
 80059f4:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80059f8:	4874      	ldr	r0, [pc, #464]	; (8005bcc <HAL_RCC_OscConfig+0x474>)
 80059fa:	f7fc fe9a 	bl	8002732 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d019      	beq.n	8005a3a <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a06:	4b70      	ldr	r3, [pc, #448]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a0a:	4a6f      	ldr	r2, [pc, #444]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a0c:	f043 0301 	orr.w	r3, r3, #1
 8005a10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a12:	f7fd fc41 	bl	8003298 <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a18:	e008      	b.n	8005a2c <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a1a:	f7fd fc3d 	bl	8003298 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d901      	bls.n	8005a2c <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e1e6      	b.n	8005dfa <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a2c:	4b66      	ldr	r3, [pc, #408]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0f0      	beq.n	8005a1a <HAL_RCC_OscConfig+0x2c2>
 8005a38:	e018      	b.n	8005a6c <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a3a:	4b63      	ldr	r3, [pc, #396]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a3e:	4a62      	ldr	r2, [pc, #392]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a40:	f023 0301 	bic.w	r3, r3, #1
 8005a44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a46:	f7fd fc27 	bl	8003298 <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a4e:	f7fd fc23 	bl	8003298 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e1cc      	b.n	8005dfa <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a60:	4b59      	ldr	r3, [pc, #356]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1f0      	bne.n	8005a4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 80bc 	beq.w	8005bf2 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00c      	beq.n	8005a9c <HAL_RCC_OscConfig+0x344>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d008      	beq.n	8005a9c <HAL_RCC_OscConfig+0x344>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b05      	cmp	r3, #5
 8005a90:	d004      	beq.n	8005a9c <HAL_RCC_OscConfig+0x344>
 8005a92:	f240 2106 	movw	r1, #518	; 0x206
 8005a96:	484d      	ldr	r0, [pc, #308]	; (8005bcc <HAL_RCC_OscConfig+0x474>)
 8005a98:	f7fc fe4b 	bl	8002732 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a9c:	4b4a      	ldr	r3, [pc, #296]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10d      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aa8:	4b47      	ldr	r3, [pc, #284]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aac:	4a46      	ldr	r2, [pc, #280]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8005ab4:	4b44      	ldr	r3, [pc, #272]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005abc:	60bb      	str	r3, [r7, #8]
 8005abe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ac4:	4b42      	ldr	r3, [pc, #264]	; (8005bd0 <HAL_RCC_OscConfig+0x478>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d118      	bne.n	8005b02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005ad0:	4b3f      	ldr	r3, [pc, #252]	; (8005bd0 <HAL_RCC_OscConfig+0x478>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a3e      	ldr	r2, [pc, #248]	; (8005bd0 <HAL_RCC_OscConfig+0x478>)
 8005ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ada:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005adc:	f7fd fbdc 	bl	8003298 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ae4:	f7fd fbd8 	bl	8003298 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b64      	cmp	r3, #100	; 0x64
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e181      	b.n	8005dfa <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005af6:	4b36      	ldr	r3, [pc, #216]	; (8005bd0 <HAL_RCC_OscConfig+0x478>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0f0      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d106      	bne.n	8005b18 <HAL_RCC_OscConfig+0x3c0>
 8005b0a:	4b2f      	ldr	r3, [pc, #188]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0e:	4a2e      	ldr	r2, [pc, #184]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b10:	f043 0301 	orr.w	r3, r3, #1
 8005b14:	6713      	str	r3, [r2, #112]	; 0x70
 8005b16:	e02d      	b.n	8005b74 <HAL_RCC_OscConfig+0x41c>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10c      	bne.n	8005b3a <HAL_RCC_OscConfig+0x3e2>
 8005b20:	4b29      	ldr	r3, [pc, #164]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b24:	4a28      	ldr	r2, [pc, #160]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b26:	f023 0301 	bic.w	r3, r3, #1
 8005b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b2c:	4b26      	ldr	r3, [pc, #152]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b30:	4a25      	ldr	r2, [pc, #148]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b32:	f023 0304 	bic.w	r3, r3, #4
 8005b36:	6713      	str	r3, [r2, #112]	; 0x70
 8005b38:	e01c      	b.n	8005b74 <HAL_RCC_OscConfig+0x41c>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	2b05      	cmp	r3, #5
 8005b40:	d10c      	bne.n	8005b5c <HAL_RCC_OscConfig+0x404>
 8005b42:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b46:	4a20      	ldr	r2, [pc, #128]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b48:	f043 0304 	orr.w	r3, r3, #4
 8005b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b4e:	4b1e      	ldr	r3, [pc, #120]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b52:	4a1d      	ldr	r2, [pc, #116]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b54:	f043 0301 	orr.w	r3, r3, #1
 8005b58:	6713      	str	r3, [r2, #112]	; 0x70
 8005b5a:	e00b      	b.n	8005b74 <HAL_RCC_OscConfig+0x41c>
 8005b5c:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b60:	4a19      	ldr	r2, [pc, #100]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b62:	f023 0301 	bic.w	r3, r3, #1
 8005b66:	6713      	str	r3, [r2, #112]	; 0x70
 8005b68:	4b17      	ldr	r3, [pc, #92]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6c:	4a16      	ldr	r2, [pc, #88]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b6e:	f023 0304 	bic.w	r3, r3, #4
 8005b72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d015      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7c:	f7fd fb8c 	bl	8003298 <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b82:	e00a      	b.n	8005b9a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b84:	f7fd fb88 	bl	8003298 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e12f      	b.n	8005dfa <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b9a:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0ee      	beq.n	8005b84 <HAL_RCC_OscConfig+0x42c>
 8005ba6:	e01b      	b.n	8005be0 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba8:	f7fd fb76 	bl	8003298 <HAL_GetTick>
 8005bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bae:	e011      	b.n	8005bd4 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb0:	f7fd fb72 	bl	8003298 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d908      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e119      	b.n	8005dfa <HAL_RCC_OscConfig+0x6a2>
 8005bc6:	bf00      	nop
 8005bc8:	40023800 	.word	0x40023800
 8005bcc:	0801620c 	.word	0x0801620c
 8005bd0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bd4:	4b8b      	ldr	r3, [pc, #556]	; (8005e04 <HAL_RCC_OscConfig+0x6ac>)
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e7      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005be0:	7dfb      	ldrb	r3, [r7, #23]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d105      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005be6:	4b87      	ldr	r3, [pc, #540]	; (8005e04 <HAL_RCC_OscConfig+0x6ac>)
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	4a86      	ldr	r2, [pc, #536]	; (8005e04 <HAL_RCC_OscConfig+0x6ac>)
 8005bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bf0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00c      	beq.n	8005c14 <HAL_RCC_OscConfig+0x4bc>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d008      	beq.n	8005c14 <HAL_RCC_OscConfig+0x4bc>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d004      	beq.n	8005c14 <HAL_RCC_OscConfig+0x4bc>
 8005c0a:	f240 214a 	movw	r1, #586	; 0x24a
 8005c0e:	487e      	ldr	r0, [pc, #504]	; (8005e08 <HAL_RCC_OscConfig+0x6b0>)
 8005c10:	f7fc fd8f 	bl	8002732 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 80ed 	beq.w	8005df8 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c1e:	4b79      	ldr	r3, [pc, #484]	; (8005e04 <HAL_RCC_OscConfig+0x6ac>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 030c 	and.w	r3, r3, #12
 8005c26:	2b08      	cmp	r3, #8
 8005c28:	f000 80b4 	beq.w	8005d94 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	f040 8095 	bne.w	8005d60 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d009      	beq.n	8005c52 <HAL_RCC_OscConfig+0x4fa>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c46:	d004      	beq.n	8005c52 <HAL_RCC_OscConfig+0x4fa>
 8005c48:	f240 2153 	movw	r1, #595	; 0x253
 8005c4c:	486e      	ldr	r0, [pc, #440]	; (8005e08 <HAL_RCC_OscConfig+0x6b0>)
 8005c4e:	f7fc fd70 	bl	8002732 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d903      	bls.n	8005c62 <HAL_RCC_OscConfig+0x50a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	2b3f      	cmp	r3, #63	; 0x3f
 8005c60:	d904      	bls.n	8005c6c <HAL_RCC_OscConfig+0x514>
 8005c62:	f44f 7115 	mov.w	r1, #596	; 0x254
 8005c66:	4868      	ldr	r0, [pc, #416]	; (8005e08 <HAL_RCC_OscConfig+0x6b0>)
 8005c68:	f7fc fd63 	bl	8002732 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	2b31      	cmp	r3, #49	; 0x31
 8005c72:	d904      	bls.n	8005c7e <HAL_RCC_OscConfig+0x526>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005c7c:	d904      	bls.n	8005c88 <HAL_RCC_OscConfig+0x530>
 8005c7e:	f240 2155 	movw	r1, #597	; 0x255
 8005c82:	4861      	ldr	r0, [pc, #388]	; (8005e08 <HAL_RCC_OscConfig+0x6b0>)
 8005c84:	f7fc fd55 	bl	8002732 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d010      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x55a>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	2b04      	cmp	r3, #4
 8005c96:	d00c      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x55a>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	2b06      	cmp	r3, #6
 8005c9e:	d008      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x55a>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d004      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x55a>
 8005ca8:	f240 2156 	movw	r1, #598	; 0x256
 8005cac:	4856      	ldr	r0, [pc, #344]	; (8005e08 <HAL_RCC_OscConfig+0x6b0>)
 8005cae:	f7fc fd40 	bl	8002732 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d903      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x56a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	2b0f      	cmp	r3, #15
 8005cc0:	d904      	bls.n	8005ccc <HAL_RCC_OscConfig+0x574>
 8005cc2:	f240 2157 	movw	r1, #599	; 0x257
 8005cc6:	4850      	ldr	r0, [pc, #320]	; (8005e08 <HAL_RCC_OscConfig+0x6b0>)
 8005cc8:	f7fc fd33 	bl	8002732 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ccc:	4b4d      	ldr	r3, [pc, #308]	; (8005e04 <HAL_RCC_OscConfig+0x6ac>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a4c      	ldr	r2, [pc, #304]	; (8005e04 <HAL_RCC_OscConfig+0x6ac>)
 8005cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd8:	f7fd fade 	bl	8003298 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce0:	f7fd fada 	bl	8003298 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e083      	b.n	8005dfa <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cf2:	4b44      	ldr	r3, [pc, #272]	; (8005e04 <HAL_RCC_OscConfig+0x6ac>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f0      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	69da      	ldr	r2, [r3, #28]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	019b      	lsls	r3, r3, #6
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d14:	085b      	lsrs	r3, r3, #1
 8005d16:	3b01      	subs	r3, #1
 8005d18:	041b      	lsls	r3, r3, #16
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	061b      	lsls	r3, r3, #24
 8005d22:	4313      	orrs	r3, r2
 8005d24:	4a37      	ldr	r2, [pc, #220]	; (8005e04 <HAL_RCC_OscConfig+0x6ac>)
 8005d26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d2a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d2c:	4b35      	ldr	r3, [pc, #212]	; (8005e04 <HAL_RCC_OscConfig+0x6ac>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a34      	ldr	r2, [pc, #208]	; (8005e04 <HAL_RCC_OscConfig+0x6ac>)
 8005d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d38:	f7fd faae 	bl	8003298 <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d40:	f7fd faaa 	bl	8003298 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e053      	b.n	8005dfa <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d52:	4b2c      	ldr	r3, [pc, #176]	; (8005e04 <HAL_RCC_OscConfig+0x6ac>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d0f0      	beq.n	8005d40 <HAL_RCC_OscConfig+0x5e8>
 8005d5e:	e04b      	b.n	8005df8 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d60:	4b28      	ldr	r3, [pc, #160]	; (8005e04 <HAL_RCC_OscConfig+0x6ac>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a27      	ldr	r2, [pc, #156]	; (8005e04 <HAL_RCC_OscConfig+0x6ac>)
 8005d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6c:	f7fd fa94 	bl	8003298 <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d74:	f7fd fa90 	bl	8003298 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e039      	b.n	8005dfa <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d86:	4b1f      	ldr	r3, [pc, #124]	; (8005e04 <HAL_RCC_OscConfig+0x6ac>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1f0      	bne.n	8005d74 <HAL_RCC_OscConfig+0x61c>
 8005d92:	e031      	b.n	8005df8 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005d94:	4b1b      	ldr	r3, [pc, #108]	; (8005e04 <HAL_RCC_OscConfig+0x6ac>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d028      	beq.n	8005df4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d121      	bne.n	8005df4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d11a      	bne.n	8005df4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d111      	bne.n	8005df4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dda:	085b      	lsrs	r3, r3, #1
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d107      	bne.n	8005df4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d001      	beq.n	8005df8 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40023800 	.word	0x40023800
 8005e08:	0801620c 	.word	0x0801620c

08005e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e18c      	b.n	800613e <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x28>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b0f      	cmp	r3, #15
 8005e32:	d904      	bls.n	8005e3e <HAL_RCC_ClockConfig+0x32>
 8005e34:	f240 21dd 	movw	r1, #733	; 0x2dd
 8005e38:	4887      	ldr	r0, [pc, #540]	; (8006058 <HAL_RCC_ClockConfig+0x24c>)
 8005e3a:	f7fc fc7a 	bl	8002732 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d031      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x9c>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d02e      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x9c>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d02b      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x9c>
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d028      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x9c>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d025      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x9c>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b05      	cmp	r3, #5
 8005e60:	d022      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x9c>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b06      	cmp	r3, #6
 8005e66:	d01f      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x9c>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2b07      	cmp	r3, #7
 8005e6c:	d01c      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x9c>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d019      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x9c>
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b09      	cmp	r3, #9
 8005e78:	d016      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x9c>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b0a      	cmp	r3, #10
 8005e7e:	d013      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x9c>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b0b      	cmp	r3, #11
 8005e84:	d010      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x9c>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b0c      	cmp	r3, #12
 8005e8a:	d00d      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x9c>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b0d      	cmp	r3, #13
 8005e90:	d00a      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x9c>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b0e      	cmp	r3, #14
 8005e96:	d007      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x9c>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b0f      	cmp	r3, #15
 8005e9c:	d004      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x9c>
 8005e9e:	f240 21de 	movw	r1, #734	; 0x2de
 8005ea2:	486d      	ldr	r0, [pc, #436]	; (8006058 <HAL_RCC_ClockConfig+0x24c>)
 8005ea4:	f7fc fc45 	bl	8002732 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ea8:	4b6c      	ldr	r3, [pc, #432]	; (800605c <HAL_RCC_ClockConfig+0x250>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d910      	bls.n	8005ed8 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eb6:	4b69      	ldr	r3, [pc, #420]	; (800605c <HAL_RCC_ClockConfig+0x250>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f023 020f 	bic.w	r2, r3, #15
 8005ebe:	4967      	ldr	r1, [pc, #412]	; (800605c <HAL_RCC_ClockConfig+0x250>)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ec6:	4b65      	ldr	r3, [pc, #404]	; (800605c <HAL_RCC_ClockConfig+0x250>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d001      	beq.n	8005ed8 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e132      	b.n	800613e <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d049      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d005      	beq.n	8005efc <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ef0:	4b5b      	ldr	r3, [pc, #364]	; (8006060 <HAL_RCC_ClockConfig+0x254>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	4a5a      	ldr	r2, [pc, #360]	; (8006060 <HAL_RCC_ClockConfig+0x254>)
 8005ef6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005efa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0308 	and.w	r3, r3, #8
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d005      	beq.n	8005f14 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f08:	4b55      	ldr	r3, [pc, #340]	; (8006060 <HAL_RCC_ClockConfig+0x254>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	4a54      	ldr	r2, [pc, #336]	; (8006060 <HAL_RCC_ClockConfig+0x254>)
 8005f0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d024      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x15a>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	2b80      	cmp	r3, #128	; 0x80
 8005f22:	d020      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x15a>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	2b90      	cmp	r3, #144	; 0x90
 8005f2a:	d01c      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x15a>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	2ba0      	cmp	r3, #160	; 0xa0
 8005f32:	d018      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x15a>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2bb0      	cmp	r3, #176	; 0xb0
 8005f3a:	d014      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x15a>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	2bc0      	cmp	r3, #192	; 0xc0
 8005f42:	d010      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x15a>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	2bd0      	cmp	r3, #208	; 0xd0
 8005f4a:	d00c      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x15a>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	2be0      	cmp	r3, #224	; 0xe0
 8005f52:	d008      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x15a>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	2bf0      	cmp	r3, #240	; 0xf0
 8005f5a:	d004      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x15a>
 8005f5c:	f240 3102 	movw	r1, #770	; 0x302
 8005f60:	483d      	ldr	r0, [pc, #244]	; (8006058 <HAL_RCC_ClockConfig+0x24c>)
 8005f62:	f7fc fbe6 	bl	8002732 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f66:	4b3e      	ldr	r3, [pc, #248]	; (8006060 <HAL_RCC_ClockConfig+0x254>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	493b      	ldr	r1, [pc, #236]	; (8006060 <HAL_RCC_ClockConfig+0x254>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d051      	beq.n	8006028 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00c      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0x19a>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d008      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0x19a>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d004      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0x19a>
 8005f9c:	f240 3109 	movw	r1, #777	; 0x309
 8005fa0:	482d      	ldr	r0, [pc, #180]	; (8006058 <HAL_RCC_ClockConfig+0x24c>)
 8005fa2:	f7fc fbc6 	bl	8002732 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d107      	bne.n	8005fbe <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fae:	4b2c      	ldr	r3, [pc, #176]	; (8006060 <HAL_RCC_ClockConfig+0x254>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d115      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e0bf      	b.n	800613e <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d107      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fc6:	4b26      	ldr	r3, [pc, #152]	; (8006060 <HAL_RCC_ClockConfig+0x254>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d109      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e0b3      	b.n	800613e <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd6:	4b22      	ldr	r3, [pc, #136]	; (8006060 <HAL_RCC_ClockConfig+0x254>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e0ab      	b.n	800613e <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fe6:	4b1e      	ldr	r3, [pc, #120]	; (8006060 <HAL_RCC_ClockConfig+0x254>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f023 0203 	bic.w	r2, r3, #3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	491b      	ldr	r1, [pc, #108]	; (8006060 <HAL_RCC_ClockConfig+0x254>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ff8:	f7fd f94e 	bl	8003298 <HAL_GetTick>
 8005ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ffe:	e00a      	b.n	8006016 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006000:	f7fd f94a 	bl	8003298 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	f241 3288 	movw	r2, #5000	; 0x1388
 800600e:	4293      	cmp	r3, r2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e093      	b.n	800613e <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006016:	4b12      	ldr	r3, [pc, #72]	; (8006060 <HAL_RCC_ClockConfig+0x254>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 020c 	and.w	r2, r3, #12
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	429a      	cmp	r2, r3
 8006026:	d1eb      	bne.n	8006000 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006028:	4b0c      	ldr	r3, [pc, #48]	; (800605c <HAL_RCC_ClockConfig+0x250>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 030f 	and.w	r3, r3, #15
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	429a      	cmp	r2, r3
 8006034:	d216      	bcs.n	8006064 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006036:	4b09      	ldr	r3, [pc, #36]	; (800605c <HAL_RCC_ClockConfig+0x250>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f023 020f 	bic.w	r2, r3, #15
 800603e:	4907      	ldr	r1, [pc, #28]	; (800605c <HAL_RCC_ClockConfig+0x250>)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	4313      	orrs	r3, r2
 8006044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <HAL_RCC_ClockConfig+0x250>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d007      	beq.n	8006064 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e072      	b.n	800613e <HAL_RCC_ClockConfig+0x332>
 8006058:	0801620c 	.word	0x0801620c
 800605c:	40023c00 	.word	0x40023c00
 8006060:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d025      	beq.n	80060bc <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d018      	beq.n	80060aa <HAL_RCC_ClockConfig+0x29e>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006080:	d013      	beq.n	80060aa <HAL_RCC_ClockConfig+0x29e>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800608a:	d00e      	beq.n	80060aa <HAL_RCC_ClockConfig+0x29e>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006094:	d009      	beq.n	80060aa <HAL_RCC_ClockConfig+0x29e>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800609e:	d004      	beq.n	80060aa <HAL_RCC_ClockConfig+0x29e>
 80060a0:	f240 3146 	movw	r1, #838	; 0x346
 80060a4:	4828      	ldr	r0, [pc, #160]	; (8006148 <HAL_RCC_ClockConfig+0x33c>)
 80060a6:	f7fc fb44 	bl	8002732 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060aa:	4b28      	ldr	r3, [pc, #160]	; (800614c <HAL_RCC_ClockConfig+0x340>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	4925      	ldr	r1, [pc, #148]	; (800614c <HAL_RCC_ClockConfig+0x340>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d026      	beq.n	8006116 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d018      	beq.n	8006102 <HAL_RCC_ClockConfig+0x2f6>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d8:	d013      	beq.n	8006102 <HAL_RCC_ClockConfig+0x2f6>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80060e2:	d00e      	beq.n	8006102 <HAL_RCC_ClockConfig+0x2f6>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80060ec:	d009      	beq.n	8006102 <HAL_RCC_ClockConfig+0x2f6>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80060f6:	d004      	beq.n	8006102 <HAL_RCC_ClockConfig+0x2f6>
 80060f8:	f240 314d 	movw	r1, #845	; 0x34d
 80060fc:	4812      	ldr	r0, [pc, #72]	; (8006148 <HAL_RCC_ClockConfig+0x33c>)
 80060fe:	f7fc fb18 	bl	8002732 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006102:	4b12      	ldr	r3, [pc, #72]	; (800614c <HAL_RCC_ClockConfig+0x340>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	490e      	ldr	r1, [pc, #56]	; (800614c <HAL_RCC_ClockConfig+0x340>)
 8006112:	4313      	orrs	r3, r2
 8006114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006116:	f000 f821 	bl	800615c <HAL_RCC_GetSysClockFreq>
 800611a:	4602      	mov	r2, r0
 800611c:	4b0b      	ldr	r3, [pc, #44]	; (800614c <HAL_RCC_ClockConfig+0x340>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	091b      	lsrs	r3, r3, #4
 8006122:	f003 030f 	and.w	r3, r3, #15
 8006126:	490a      	ldr	r1, [pc, #40]	; (8006150 <HAL_RCC_ClockConfig+0x344>)
 8006128:	5ccb      	ldrb	r3, [r1, r3]
 800612a:	fa22 f303 	lsr.w	r3, r2, r3
 800612e:	4a09      	ldr	r2, [pc, #36]	; (8006154 <HAL_RCC_ClockConfig+0x348>)
 8006130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006132:	4b09      	ldr	r3, [pc, #36]	; (8006158 <HAL_RCC_ClockConfig+0x34c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f7fd f86a 	bl	8003210 <HAL_InitTick>

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	0801620c 	.word	0x0801620c
 800614c:	40023800 	.word	0x40023800
 8006150:	0801633c 	.word	0x0801633c
 8006154:	20000118 	.word	0x20000118
 8006158:	2000011c 	.word	0x2000011c

0800615c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800615c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006160:	b090      	sub	sp, #64	; 0x40
 8006162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006164:	2300      	movs	r3, #0
 8006166:	637b      	str	r3, [r7, #52]	; 0x34
 8006168:	2300      	movs	r3, #0
 800616a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800616c:	2300      	movs	r3, #0
 800616e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8006170:	2300      	movs	r3, #0
 8006172:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006174:	4b59      	ldr	r3, [pc, #356]	; (80062dc <HAL_RCC_GetSysClockFreq+0x180>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 030c 	and.w	r3, r3, #12
 800617c:	2b08      	cmp	r3, #8
 800617e:	d00d      	beq.n	800619c <HAL_RCC_GetSysClockFreq+0x40>
 8006180:	2b08      	cmp	r3, #8
 8006182:	f200 80a1 	bhi.w	80062c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <HAL_RCC_GetSysClockFreq+0x34>
 800618a:	2b04      	cmp	r3, #4
 800618c:	d003      	beq.n	8006196 <HAL_RCC_GetSysClockFreq+0x3a>
 800618e:	e09b      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006190:	4b53      	ldr	r3, [pc, #332]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006192:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006194:	e09b      	b.n	80062ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006196:	4b53      	ldr	r3, [pc, #332]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006198:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800619a:	e098      	b.n	80062ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800619c:	4b4f      	ldr	r3, [pc, #316]	; (80062dc <HAL_RCC_GetSysClockFreq+0x180>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80061a6:	4b4d      	ldr	r3, [pc, #308]	; (80062dc <HAL_RCC_GetSysClockFreq+0x180>)
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d028      	beq.n	8006204 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061b2:	4b4a      	ldr	r3, [pc, #296]	; (80062dc <HAL_RCC_GetSysClockFreq+0x180>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	099b      	lsrs	r3, r3, #6
 80061b8:	2200      	movs	r2, #0
 80061ba:	623b      	str	r3, [r7, #32]
 80061bc:	627a      	str	r2, [r7, #36]	; 0x24
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80061c4:	2100      	movs	r1, #0
 80061c6:	4b47      	ldr	r3, [pc, #284]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80061c8:	fb03 f201 	mul.w	r2, r3, r1
 80061cc:	2300      	movs	r3, #0
 80061ce:	fb00 f303 	mul.w	r3, r0, r3
 80061d2:	4413      	add	r3, r2
 80061d4:	4a43      	ldr	r2, [pc, #268]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80061d6:	fba0 1202 	umull	r1, r2, r0, r2
 80061da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061dc:	460a      	mov	r2, r1
 80061de:	62ba      	str	r2, [r7, #40]	; 0x28
 80061e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061e2:	4413      	add	r3, r2
 80061e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e8:	2200      	movs	r2, #0
 80061ea:	61bb      	str	r3, [r7, #24]
 80061ec:	61fa      	str	r2, [r7, #28]
 80061ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80061f6:	f7fa fd77 	bl	8000ce8 <__aeabi_uldivmod>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	4613      	mov	r3, r2
 8006200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006202:	e053      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006204:	4b35      	ldr	r3, [pc, #212]	; (80062dc <HAL_RCC_GetSysClockFreq+0x180>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	099b      	lsrs	r3, r3, #6
 800620a:	2200      	movs	r2, #0
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	617a      	str	r2, [r7, #20]
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006216:	f04f 0b00 	mov.w	fp, #0
 800621a:	4652      	mov	r2, sl
 800621c:	465b      	mov	r3, fp
 800621e:	f04f 0000 	mov.w	r0, #0
 8006222:	f04f 0100 	mov.w	r1, #0
 8006226:	0159      	lsls	r1, r3, #5
 8006228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800622c:	0150      	lsls	r0, r2, #5
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	ebb2 080a 	subs.w	r8, r2, sl
 8006236:	eb63 090b 	sbc.w	r9, r3, fp
 800623a:	f04f 0200 	mov.w	r2, #0
 800623e:	f04f 0300 	mov.w	r3, #0
 8006242:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006246:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800624a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800624e:	ebb2 0408 	subs.w	r4, r2, r8
 8006252:	eb63 0509 	sbc.w	r5, r3, r9
 8006256:	f04f 0200 	mov.w	r2, #0
 800625a:	f04f 0300 	mov.w	r3, #0
 800625e:	00eb      	lsls	r3, r5, #3
 8006260:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006264:	00e2      	lsls	r2, r4, #3
 8006266:	4614      	mov	r4, r2
 8006268:	461d      	mov	r5, r3
 800626a:	eb14 030a 	adds.w	r3, r4, sl
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	eb45 030b 	adc.w	r3, r5, fp
 8006274:	607b      	str	r3, [r7, #4]
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	f04f 0300 	mov.w	r3, #0
 800627e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006282:	4629      	mov	r1, r5
 8006284:	028b      	lsls	r3, r1, #10
 8006286:	4621      	mov	r1, r4
 8006288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800628c:	4621      	mov	r1, r4
 800628e:	028a      	lsls	r2, r1, #10
 8006290:	4610      	mov	r0, r2
 8006292:	4619      	mov	r1, r3
 8006294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006296:	2200      	movs	r2, #0
 8006298:	60bb      	str	r3, [r7, #8]
 800629a:	60fa      	str	r2, [r7, #12]
 800629c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062a0:	f7fa fd22 	bl	8000ce8 <__aeabi_uldivmod>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4613      	mov	r3, r2
 80062aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80062ac:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <HAL_RCC_GetSysClockFreq+0x180>)
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	0c1b      	lsrs	r3, r3, #16
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	3301      	adds	r3, #1
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80062bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80062c6:	e002      	b.n	80062ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062c8:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80062ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80062cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3740      	adds	r7, #64	; 0x40
 80062d4:	46bd      	mov	sp, r7
 80062d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062da:	bf00      	nop
 80062dc:	40023800 	.word	0x40023800
 80062e0:	00f42400 	.word	0x00f42400
 80062e4:	017d7840 	.word	0x017d7840

080062e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062ec:	4b03      	ldr	r3, [pc, #12]	; (80062fc <HAL_RCC_GetHCLKFreq+0x14>)
 80062ee:	681b      	ldr	r3, [r3, #0]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	20000118 	.word	0x20000118

08006300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006304:	f7ff fff0 	bl	80062e8 <HAL_RCC_GetHCLKFreq>
 8006308:	4602      	mov	r2, r0
 800630a:	4b05      	ldr	r3, [pc, #20]	; (8006320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	0a9b      	lsrs	r3, r3, #10
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	4903      	ldr	r1, [pc, #12]	; (8006324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006316:	5ccb      	ldrb	r3, [r1, r3]
 8006318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800631c:	4618      	mov	r0, r3
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40023800 	.word	0x40023800
 8006324:	0801634c 	.word	0x0801634c

08006328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800632c:	f7ff ffdc 	bl	80062e8 <HAL_RCC_GetHCLKFreq>
 8006330:	4602      	mov	r2, r0
 8006332:	4b05      	ldr	r3, [pc, #20]	; (8006348 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	0b5b      	lsrs	r3, r3, #13
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	4903      	ldr	r1, [pc, #12]	; (800634c <HAL_RCC_GetPCLK2Freq+0x24>)
 800633e:	5ccb      	ldrb	r3, [r1, r3]
 8006340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006344:	4618      	mov	r0, r3
 8006346:	bd80      	pop	{r7, pc}
 8006348:	40023800 	.word	0x40023800
 800634c:	0801634c 	.word	0x0801634c

08006350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006360:	2300      	movs	r3, #0
 8006362:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006364:	2300      	movs	r3, #0
 8006366:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006368:	2300      	movs	r3, #0
 800636a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	f040 8089 	bne.w	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	2b00      	cmp	r3, #0
 8006384:	f040 8082 	bne.w	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0310 	and.w	r3, r3, #16
 8006390:	2b00      	cmp	r3, #0
 8006392:	d17b      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639c:	2b00      	cmp	r3, #0
 800639e:	d175      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d16f      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d169      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d163      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d15d      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d157      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d151      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d14b      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d145      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d13f      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d139      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d133      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d12d      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d127      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d121      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d11b      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d115      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10f      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d109      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0320 	and.w	r3, r3, #32
 8006480:	2b00      	cmp	r3, #0
 8006482:	d103      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006484:	2172      	movs	r1, #114	; 0x72
 8006486:	4895      	ldr	r0, [pc, #596]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006488:	f7fc f953 	bl	8002732 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01f      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649c:	2b00      	cmp	r3, #0
 800649e:	d008      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064a8:	d003      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80064aa:	2178      	movs	r1, #120	; 0x78
 80064ac:	488b      	ldr	r0, [pc, #556]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80064ae:	f7fc f940 	bl	8002732 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80064b2:	4b8b      	ldr	r3, [pc, #556]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	4a8a      	ldr	r2, [pc, #552]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80064b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80064bc:	6093      	str	r3, [r2, #8]
 80064be:	4b88      	ldr	r3, [pc, #544]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c6:	4986      	ldr	r1, [pc, #536]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 80064d4:	2301      	movs	r3, #1
 80064d6:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d029      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00d      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064f4:	d008      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064fe:	d003      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006500:	2188      	movs	r1, #136	; 0x88
 8006502:	4876      	ldr	r0, [pc, #472]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006504:	f7fc f915 	bl	8002732 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006508:	4b75      	ldr	r3, [pc, #468]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800650a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800650e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006516:	4972      	ldr	r1, [pc, #456]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006518:	4313      	orrs	r3, r2
 800651a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006526:	d101      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8006528:	2301      	movs	r3, #1
 800652a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8006534:	2301      	movs	r3, #1
 8006536:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d029      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00d      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006554:	d008      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800655e:	d003      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006560:	219c      	movs	r1, #156	; 0x9c
 8006562:	485e      	ldr	r0, [pc, #376]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006564:	f7fc f8e5 	bl	8002732 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006568:	4b5d      	ldr	r3, [pc, #372]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800656a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800656e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	495a      	ldr	r1, [pc, #360]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006578:	4313      	orrs	r3, r2
 800657a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006586:	d101      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8006588:	2301      	movs	r3, #1
 800658a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8006594:	2301      	movs	r3, #1
 8006596:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 80065a4:	2301      	movs	r3, #1
 80065a6:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0320 	and.w	r3, r3, #32
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 8186 	beq.w	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065be:	f000 80e4 	beq.w	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ca:	f000 80de 	beq.w	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d2:	4a44      	ldr	r2, [pc, #272]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	f000 80d8 	beq.w	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065de:	4a42      	ldr	r2, [pc, #264]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	f000 80d2 	beq.w	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ea:	4a40      	ldr	r2, [pc, #256]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	f000 80cc 	beq.w	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f6:	4a3e      	ldr	r2, [pc, #248]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	f000 80c6 	beq.w	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006602:	4a3c      	ldr	r2, [pc, #240]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8006604:	4293      	cmp	r3, r2
 8006606:	f000 80c0 	beq.w	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660e:	4a3a      	ldr	r2, [pc, #232]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8006610:	4293      	cmp	r3, r2
 8006612:	f000 80ba 	beq.w	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	4a38      	ldr	r2, [pc, #224]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800661c:	4293      	cmp	r3, r2
 800661e:	f000 80b4 	beq.w	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006626:	4a36      	ldr	r2, [pc, #216]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	f000 80ae 	beq.w	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006632:	4a34      	ldr	r2, [pc, #208]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	f000 80a8 	beq.w	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663e:	4a32      	ldr	r2, [pc, #200]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	f000 80a2 	beq.w	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664a:	4a30      	ldr	r2, [pc, #192]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800664c:	4293      	cmp	r3, r2
 800664e:	f000 809c 	beq.w	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006656:	4a2e      	ldr	r2, [pc, #184]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	f000 8096 	beq.w	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006662:	4a2c      	ldr	r2, [pc, #176]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8006664:	4293      	cmp	r3, r2
 8006666:	f000 8090 	beq.w	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666e:	4a2a      	ldr	r2, [pc, #168]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8006670:	4293      	cmp	r3, r2
 8006672:	f000 808a 	beq.w	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667a:	4a28      	ldr	r2, [pc, #160]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800667c:	4293      	cmp	r3, r2
 800667e:	f000 8084 	beq.w	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006686:	4a26      	ldr	r2, [pc, #152]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d07e      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006690:	4a24      	ldr	r2, [pc, #144]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d079      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	4a23      	ldr	r2, [pc, #140]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d074      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	4a21      	ldr	r2, [pc, #132]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d06f      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ae:	4a20      	ldr	r2, [pc, #128]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d06a      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b8:	4a1e      	ldr	r2, [pc, #120]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d065      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	4a1d      	ldr	r2, [pc, #116]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d060      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	4a1b      	ldr	r2, [pc, #108]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d05b      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	4a1a      	ldr	r2, [pc, #104]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	e033      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80066dc:	08016244 	.word	0x08016244
 80066e0:	40023800 	.word	0x40023800
 80066e4:	00020300 	.word	0x00020300
 80066e8:	00030300 	.word	0x00030300
 80066ec:	00040300 	.word	0x00040300
 80066f0:	00050300 	.word	0x00050300
 80066f4:	00060300 	.word	0x00060300
 80066f8:	00070300 	.word	0x00070300
 80066fc:	00080300 	.word	0x00080300
 8006700:	00090300 	.word	0x00090300
 8006704:	000a0300 	.word	0x000a0300
 8006708:	000b0300 	.word	0x000b0300
 800670c:	000c0300 	.word	0x000c0300
 8006710:	000d0300 	.word	0x000d0300
 8006714:	000e0300 	.word	0x000e0300
 8006718:	000f0300 	.word	0x000f0300
 800671c:	00100300 	.word	0x00100300
 8006720:	00110300 	.word	0x00110300
 8006724:	00120300 	.word	0x00120300
 8006728:	00130300 	.word	0x00130300
 800672c:	00140300 	.word	0x00140300
 8006730:	00150300 	.word	0x00150300
 8006734:	00160300 	.word	0x00160300
 8006738:	00170300 	.word	0x00170300
 800673c:	00180300 	.word	0x00180300
 8006740:	00190300 	.word	0x00190300
 8006744:	d021      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	4a4c      	ldr	r2, [pc, #304]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d01c      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006754:	4a4a      	ldr	r2, [pc, #296]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d017      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	4a49      	ldr	r2, [pc, #292]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d012      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006768:	4a47      	ldr	r2, [pc, #284]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d00d      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006772:	4a46      	ldr	r2, [pc, #280]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d008      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677c:	4a44      	ldr	r2, [pc, #272]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d003      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006782:	21b7      	movs	r1, #183	; 0xb7
 8006784:	4843      	ldr	r0, [pc, #268]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8006786:	f7fb ffd4 	bl	8002732 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800678a:	4b43      	ldr	r3, [pc, #268]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	4a42      	ldr	r2, [pc, #264]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006794:	6413      	str	r3, [r2, #64]	; 0x40
 8006796:	4b40      	ldr	r3, [pc, #256]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800679e:	60bb      	str	r3, [r7, #8]
 80067a0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80067a2:	4b3e      	ldr	r3, [pc, #248]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a3d      	ldr	r2, [pc, #244]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80067a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ae:	f7fc fd73 	bl	8003298 <HAL_GetTick>
 80067b2:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80067b4:	e009      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067b6:	f7fc fd6f 	bl	8003298 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b64      	cmp	r3, #100	; 0x64
 80067c2:	d902      	bls.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	f000 bd9f 	b.w	8007308 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80067ca:	4b34      	ldr	r3, [pc, #208]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0ef      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067d6:	4b30      	ldr	r3, [pc, #192]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80067d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d036      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d02f      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067f4:	4b28      	ldr	r3, [pc, #160]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80067f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067fe:	4b26      	ldr	r3, [pc, #152]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006802:	4a25      	ldr	r2, [pc, #148]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006808:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800680a:	4b23      	ldr	r3, [pc, #140]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800680c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680e:	4a22      	ldr	r2, [pc, #136]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006814:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006816:	4a20      	ldr	r2, [pc, #128]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800681c:	4b1e      	ldr	r3, [pc, #120]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800681e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	2b01      	cmp	r3, #1
 8006826:	d115      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006828:	f7fc fd36 	bl	8003298 <HAL_GetTick>
 800682c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800682e:	e00b      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006830:	f7fc fd32 	bl	8003298 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	f241 3288 	movw	r2, #5000	; 0x1388
 800683e:	4293      	cmp	r3, r2
 8006840:	d902      	bls.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	f000 bd60 	b.w	8007308 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006848:	4b13      	ldr	r3, [pc, #76]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800684a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0ed      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800685c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006860:	d120      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8006862:	4b0d      	ldr	r3, [pc, #52]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800686e:	4b0c      	ldr	r3, [pc, #48]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006870:	400b      	ands	r3, r1
 8006872:	4909      	ldr	r1, [pc, #36]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006874:	4313      	orrs	r3, r2
 8006876:	608b      	str	r3, [r1, #8]
 8006878:	e01a      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x560>
 800687a:	bf00      	nop
 800687c:	001a0300 	.word	0x001a0300
 8006880:	001b0300 	.word	0x001b0300
 8006884:	001c0300 	.word	0x001c0300
 8006888:	001d0300 	.word	0x001d0300
 800688c:	001e0300 	.word	0x001e0300
 8006890:	001f0300 	.word	0x001f0300
 8006894:	08016244 	.word	0x08016244
 8006898:	40023800 	.word	0x40023800
 800689c:	40007000 	.word	0x40007000
 80068a0:	0ffffcff 	.word	0x0ffffcff
 80068a4:	4b9a      	ldr	r3, [pc, #616]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	4a99      	ldr	r2, [pc, #612]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80068aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80068ae:	6093      	str	r3, [r2, #8]
 80068b0:	4b97      	ldr	r3, [pc, #604]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80068b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068bc:	4994      	ldr	r1, [pc, #592]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0310 	and.w	r3, r3, #16
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01d      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d008      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068de:	d003      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80068e0:	21f1      	movs	r1, #241	; 0xf1
 80068e2:	488c      	ldr	r0, [pc, #560]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80068e4:	f7fb ff25 	bl	8002732 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068e8:	4b89      	ldr	r3, [pc, #548]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80068ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ee:	4a88      	ldr	r2, [pc, #544]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80068f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80068f8:	4b85      	ldr	r3, [pc, #532]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80068fa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006902:	4983      	ldr	r1, [pc, #524]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006904:	4313      	orrs	r3, r2
 8006906:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d01c      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00d      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006926:	d008      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800692c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006930:	d003      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006932:	21fb      	movs	r1, #251	; 0xfb
 8006934:	4877      	ldr	r0, [pc, #476]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006936:	f7fb fefc 	bl	8002732 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800693a:	4b75      	ldr	r3, [pc, #468]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800693c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006940:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006948:	4971      	ldr	r1, [pc, #452]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800694a:	4313      	orrs	r3, r2
 800694c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01d      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00e      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006968:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800696c:	d009      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x632>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006972:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006976:	d004      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006978:	f240 1105 	movw	r1, #261	; 0x105
 800697c:	4865      	ldr	r0, [pc, #404]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800697e:	f7fb fed8 	bl	8002732 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006982:	4b63      	ldr	r3, [pc, #396]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006988:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006990:	495f      	ldr	r1, [pc, #380]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006992:	4313      	orrs	r3, r2
 8006994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d01d      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00e      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069b4:	d009      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069be:	d004      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80069c0:	f240 110f 	movw	r1, #271	; 0x10f
 80069c4:	4853      	ldr	r0, [pc, #332]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80069c6:	f7fb feb4 	bl	8002732 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069ca:	4b51      	ldr	r3, [pc, #324]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80069cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069d8:	494d      	ldr	r1, [pc, #308]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01d      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00e      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069fc:	d009      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a06:	d004      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006a08:	f240 1119 	movw	r1, #281	; 0x119
 8006a0c:	4841      	ldr	r0, [pc, #260]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006a0e:	f7fb fe90 	bl	8002732 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a12:	4b3f      	ldr	r3, [pc, #252]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a20:	493b      	ldr	r1, [pc, #236]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01f      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d010      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d00c      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d008      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d004      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006a54:	f240 1123 	movw	r1, #291	; 0x123
 8006a58:	482e      	ldr	r0, [pc, #184]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006a5a:	f7fb fe6a 	bl	8002732 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a5e:	4b2c      	ldr	r3, [pc, #176]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a64:	f023 0203 	bic.w	r2, r3, #3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6c:	4928      	ldr	r1, [pc, #160]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d01f      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d010      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	d00c      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a94:	2b0c      	cmp	r3, #12
 8006a96:	d008      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d004      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006aa0:	f240 112d 	movw	r1, #301	; 0x12d
 8006aa4:	481b      	ldr	r0, [pc, #108]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006aa6:	f7fb fe44 	bl	8002732 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006aaa:	4b19      	ldr	r3, [pc, #100]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab0:	f023 020c 	bic.w	r2, r3, #12
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ab8:	4915      	ldr	r1, [pc, #84]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d025      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d010      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad8:	2b10      	cmp	r3, #16
 8006ada:	d00c      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae0:	2b30      	cmp	r3, #48	; 0x30
 8006ae2:	d008      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae8:	2b20      	cmp	r3, #32
 8006aea:	d004      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006aec:	f240 1137 	movw	r1, #311	; 0x137
 8006af0:	4808      	ldr	r0, [pc, #32]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006af2:	f7fb fe1e 	bl	8002732 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006af6:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006afc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b04:	4902      	ldr	r1, [pc, #8]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006b0c:	e004      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8006b0e:	bf00      	nop
 8006b10:	40023800 	.word	0x40023800
 8006b14:	08016244 	.word	0x08016244
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d01f      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d010      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b30:	2b40      	cmp	r3, #64	; 0x40
 8006b32:	d00c      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b38:	2bc0      	cmp	r3, #192	; 0xc0
 8006b3a:	d008      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b40:	2b80      	cmp	r3, #128	; 0x80
 8006b42:	d004      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006b44:	f240 1141 	movw	r1, #321	; 0x141
 8006b48:	48a0      	ldr	r0, [pc, #640]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006b4a:	f7fb fdf2 	bl	8002732 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b4e:	4ba0      	ldr	r3, [pc, #640]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b54:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5c:	499c      	ldr	r1, [pc, #624]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d022      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d013      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b80:	d00e      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b8a:	d009      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b94:	d004      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006b96:	f240 114b 	movw	r1, #331	; 0x14b
 8006b9a:	488c      	ldr	r0, [pc, #560]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006b9c:	f7fb fdc9 	bl	8002732 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006ba0:	4b8b      	ldr	r3, [pc, #556]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bae:	4988      	ldr	r1, [pc, #544]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d022      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d013      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bd2:	d00e      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bdc:	d009      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be6:	d004      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006be8:	f240 1155 	movw	r1, #341	; 0x155
 8006bec:	4877      	ldr	r0, [pc, #476]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006bee:	f7fb fda0 	bl	8002732 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006bf2:	4b77      	ldr	r3, [pc, #476]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c00:	4973      	ldr	r1, [pc, #460]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d022      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d013      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c24:	d00e      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c2e:	d009      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c38:	d004      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006c3a:	f240 115f 	movw	r1, #351	; 0x15f
 8006c3e:	4863      	ldr	r0, [pc, #396]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006c40:	f7fb fd77 	bl	8002732 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006c44:	4b62      	ldr	r3, [pc, #392]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c52:	495f      	ldr	r1, [pc, #380]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d022      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d013      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c76:	d00e      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c80:	d009      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c8a:	d004      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006c8c:	f240 1169 	movw	r1, #361	; 0x169
 8006c90:	484e      	ldr	r0, [pc, #312]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006c92:	f7fb fd4e 	bl	8002732 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006c96:	4b4e      	ldr	r3, [pc, #312]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca4:	494a      	ldr	r1, [pc, #296]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d018      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cc0:	d008      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d004      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006cca:	f240 1173 	movw	r1, #371	; 0x173
 8006cce:	483f      	ldr	r0, [pc, #252]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006cd0:	f7fb fd2f 	bl	8002732 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006cd4:	4b3e      	ldr	r3, [pc, #248]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ce2:	493b      	ldr	r1, [pc, #236]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d01f      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cfe:	d008      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d004      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8006d08:	f240 117d 	movw	r1, #381	; 0x17d
 8006d0c:	482f      	ldr	r0, [pc, #188]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006d0e:	f7fb fd10 	bl	8002732 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006d12:	4b2f      	ldr	r3, [pc, #188]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d18:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d20:	492b      	ldr	r1, [pc, #172]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d30:	d101      	bne.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 8006d32:	2301      	movs	r3, #1
 8006d34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 8006d42:	2301      	movs	r3, #1
 8006d44:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d022      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d013      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d62:	d00e      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d6c:	d009      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d76:	d004      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006d78:	f240 1195 	movw	r1, #405	; 0x195
 8006d7c:	4813      	ldr	r0, [pc, #76]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006d7e:	f7fb fcd8 	bl	8002732 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d82:	4b13      	ldr	r3, [pc, #76]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d90:	490f      	ldr	r1, [pc, #60]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d020      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006daa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dae:	d009      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d004      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006dba:	f240 119f 	movw	r1, #415	; 0x19f
 8006dbe:	4803      	ldr	r0, [pc, #12]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006dc0:	f7fb fcb7 	bl	8002732 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006dc4:	4b02      	ldr	r3, [pc, #8]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dca:	e003      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8006dcc:	08016244 	.word	0x08016244
 8006dd0:	40023800 	.word	0x40023800
 8006dd4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dde:	4910      	ldr	r1, [pc, #64]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d006      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 8155 	beq.w	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006dfa:	4b09      	ldr	r3, [pc, #36]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a08      	ldr	r2, [pc, #32]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8006e00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e06:	f7fc fa47 	bl	8003298 <HAL_GetTick>
 8006e0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e0c:	e00a      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e0e:	f7fc fa43 	bl	8003298 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b64      	cmp	r3, #100	; 0x64
 8006e1a:	d903      	bls.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e273      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8006e20:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e24:	4b9a      	ldr	r3, [pc, #616]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1ee      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2b31      	cmp	r3, #49	; 0x31
 8006e36:	d904      	bls.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006e40:	d904      	bls.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8006e42:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8006e46:	4893      	ldr	r0, [pc, #588]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006e48:	f7fb fc73 	bl	8002732 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d02e      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d12a      	bne.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d903      	bls.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	2b07      	cmp	r3, #7
 8006e6e:	d904      	bls.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006e70:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8006e74:	4887      	ldr	r0, [pc, #540]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006e76:	f7fb fc5c 	bl	8002732 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006e7a:	4b85      	ldr	r3, [pc, #532]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e80:	0c1b      	lsrs	r3, r3, #16
 8006e82:	f003 0303 	and.w	r3, r3, #3
 8006e86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006e88:	4b81      	ldr	r3, [pc, #516]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e8e:	0e1b      	lsrs	r3, r3, #24
 8006e90:	f003 030f 	and.w	r3, r3, #15
 8006e94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	019a      	lsls	r2, r3, #6
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	041b      	lsls	r3, r3, #16
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	061b      	lsls	r3, r3, #24
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	071b      	lsls	r3, r3, #28
 8006eae:	4978      	ldr	r1, [pc, #480]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d004      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eca:	d00a      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d048      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ee0:	d143      	bne.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d903      	bls.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	2b0f      	cmp	r3, #15
 8006ef0:	d904      	bls.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006ef2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8006ef6:	4867      	ldr	r0, [pc, #412]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006ef8:	f7fb fc1b 	bl	8002732 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	d904      	bls.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8006f0c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8006f10:	4860      	ldr	r0, [pc, #384]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006f12:	f7fb fc0e 	bl	8002732 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006f16:	4b5e      	ldr	r3, [pc, #376]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f1c:	0c1b      	lsrs	r3, r3, #16
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f24:	4b5a      	ldr	r3, [pc, #360]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f2a:	0f1b      	lsrs	r3, r3, #28
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	019a      	lsls	r2, r3, #6
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	041b      	lsls	r3, r3, #16
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	061b      	lsls	r3, r3, #24
 8006f44:	431a      	orrs	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	071b      	lsls	r3, r3, #28
 8006f4a:	4951      	ldr	r1, [pc, #324]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f52:	4b4f      	ldr	r3, [pc, #316]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f58:	f023 021f 	bic.w	r2, r3, #31
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	3b01      	subs	r3, #1
 8006f62:	494b      	ldr	r1, [pc, #300]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d032      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d010      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d00c      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d008      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d004      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006f96:	f240 2105 	movw	r1, #517	; 0x205
 8006f9a:	483e      	ldr	r0, [pc, #248]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006f9c:	f7fb fbc9 	bl	8002732 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006fa0:	4b3b      	ldr	r3, [pc, #236]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fa6:	0e1b      	lsrs	r3, r3, #24
 8006fa8:	f003 030f 	and.w	r3, r3, #15
 8006fac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006fae:	4b38      	ldr	r3, [pc, #224]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fb4:	0f1b      	lsrs	r3, r3, #28
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	019a      	lsls	r2, r3, #6
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	041b      	lsls	r3, r3, #16
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	061b      	lsls	r3, r3, #24
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	071b      	lsls	r3, r3, #28
 8006fd4:	492e      	ldr	r1, [pc, #184]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d040      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d010      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d00c      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d008      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	2b03      	cmp	r3, #3
 8007006:	d004      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007008:	f44f 7105 	mov.w	r1, #532	; 0x214
 800700c:	4821      	ldr	r0, [pc, #132]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800700e:	f7fb fb90 	bl	8002732 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d903      	bls.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	2b07      	cmp	r3, #7
 8007020:	d904      	bls.n	800702c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007022:	f240 2115 	movw	r1, #533	; 0x215
 8007026:	481b      	ldr	r0, [pc, #108]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007028:	f7fb fb83 	bl	8002732 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d903      	bls.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	2b0f      	cmp	r3, #15
 800703a:	d904      	bls.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 800703c:	f240 2116 	movw	r1, #534	; 0x216
 8007040:	4814      	ldr	r0, [pc, #80]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007042:	f7fb fb76 	bl	8002732 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	019a      	lsls	r2, r3, #6
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	041b      	lsls	r3, r3, #16
 8007052:	431a      	orrs	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	061b      	lsls	r3, r3, #24
 800705a:	431a      	orrs	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	071b      	lsls	r3, r3, #28
 8007062:	490b      	ldr	r1, [pc, #44]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007064:	4313      	orrs	r3, r2
 8007066:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800706a:	4b09      	ldr	r3, [pc, #36]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a08      	ldr	r2, [pc, #32]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007070:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007074:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007076:	f7fc f90f 	bl	8003298 <HAL_GetTick>
 800707a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800707c:	e00c      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800707e:	f7fc f90b 	bl	8003298 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b64      	cmp	r3, #100	; 0x64
 800708a:	d905      	bls.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e13b      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8007090:	40023800 	.word	0x40023800
 8007094:	08016244 	.word	0x08016244
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007098:	4b9d      	ldr	r3, [pc, #628]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0ec      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	f040 812d 	bne.w	8007306 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80070ac:	4b98      	ldr	r3, [pc, #608]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a97      	ldr	r2, [pc, #604]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80070b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070b8:	f7fc f8ee 	bl	8003298 <HAL_GetTick>
 80070bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070be:	e008      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80070c0:	f7fc f8ea 	bl	8003298 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b64      	cmp	r3, #100	; 0x64
 80070cc:	d901      	bls.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e11a      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070d2:	4b8f      	ldr	r3, [pc, #572]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070de:	d0ef      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	2b31      	cmp	r3, #49	; 0x31
 80070e6:	d904      	bls.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80070f0:	d904      	bls.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80070f2:	f44f 7111 	mov.w	r1, #580	; 0x244
 80070f6:	4887      	ldr	r0, [pc, #540]	; (8007314 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80070f8:	f7fb fb1b 	bl	8002732 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710c:	2b00      	cmp	r3, #0
 800710e:	d009      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007118:	2b00      	cmp	r3, #0
 800711a:	d048      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007120:	2b00      	cmp	r3, #0
 8007122:	d144      	bne.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d903      	bls.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	2b0f      	cmp	r3, #15
 8007132:	d904      	bls.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8007134:	f240 214b 	movw	r1, #587	; 0x24b
 8007138:	4876      	ldr	r0, [pc, #472]	; (8007314 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800713a:	f7fb fafa 	bl	8002732 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714a:	2b20      	cmp	r3, #32
 800714c:	d904      	bls.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 800714e:	f240 214d 	movw	r1, #589	; 0x24d
 8007152:	4870      	ldr	r0, [pc, #448]	; (8007314 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007154:	f7fb faed 	bl	8002732 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007158:	4b6d      	ldr	r3, [pc, #436]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800715a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800715e:	0c1b      	lsrs	r3, r3, #16
 8007160:	f003 0303 	and.w	r3, r3, #3
 8007164:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007166:	4b6a      	ldr	r3, [pc, #424]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800716c:	0f1b      	lsrs	r3, r3, #28
 800716e:	f003 0307 	and.w	r3, r3, #7
 8007172:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	019a      	lsls	r2, r3, #6
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	041b      	lsls	r3, r3, #16
 800717e:	431a      	orrs	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	061b      	lsls	r3, r3, #24
 8007186:	431a      	orrs	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	071b      	lsls	r3, r3, #28
 800718c:	4960      	ldr	r1, [pc, #384]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800718e:	4313      	orrs	r3, r2
 8007190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007194:	4b5e      	ldr	r3, [pc, #376]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800719a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a2:	3b01      	subs	r3, #1
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	495a      	ldr	r1, [pc, #360]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d037      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0xeda>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071c2:	d132      	bne.n	800722a <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d010      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d00c      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d008      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a1b      	ldr	r3, [r3, #32]
 80071e0:	2b03      	cmp	r3, #3
 80071e2:	d004      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80071e4:	f44f 7118 	mov.w	r1, #608	; 0x260
 80071e8:	484a      	ldr	r0, [pc, #296]	; (8007314 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80071ea:	f7fb faa2 	bl	8002732 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80071ee:	4b48      	ldr	r3, [pc, #288]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80071f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f4:	0e1b      	lsrs	r3, r3, #24
 80071f6:	f003 030f 	and.w	r3, r3, #15
 80071fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071fc:	4b44      	ldr	r3, [pc, #272]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80071fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007202:	0f1b      	lsrs	r3, r3, #28
 8007204:	f003 0307 	and.w	r3, r3, #7
 8007208:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	019a      	lsls	r2, r3, #6
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	041b      	lsls	r3, r3, #16
 8007216:	431a      	orrs	r2, r3
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	061b      	lsls	r3, r3, #24
 800721c:	431a      	orrs	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	071b      	lsls	r3, r3, #28
 8007222:	493b      	ldr	r1, [pc, #236]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007224:	4313      	orrs	r3, r2
 8007226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0308 	and.w	r3, r3, #8
 8007232:	2b00      	cmp	r3, #0
 8007234:	d04d      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d903      	bls.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	2b07      	cmp	r3, #7
 8007244:	d904      	bls.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8007246:	f240 216f 	movw	r1, #623	; 0x26f
 800724a:	4832      	ldr	r0, [pc, #200]	; (8007314 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800724c:	f7fb fa71 	bl	8002732 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	2b00      	cmp	r3, #0
 8007256:	d013      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007260:	d00e      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800726a:	d009      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007270:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007274:	d004      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8007276:	f44f 711c 	mov.w	r1, #624	; 0x270
 800727a:	4826      	ldr	r0, [pc, #152]	; (8007314 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800727c:	f7fb fa59 	bl	8002732 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007280:	4b23      	ldr	r3, [pc, #140]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007286:	0e1b      	lsrs	r3, r3, #24
 8007288:	f003 030f 	and.w	r3, r3, #15
 800728c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800728e:	4b20      	ldr	r3, [pc, #128]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007294:	0c1b      	lsrs	r3, r3, #16
 8007296:	f003 0303 	and.w	r3, r3, #3
 800729a:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	019a      	lsls	r2, r3, #6
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	041b      	lsls	r3, r3, #16
 80072a6:	431a      	orrs	r2, r3
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	061b      	lsls	r3, r3, #24
 80072ac:	431a      	orrs	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	071b      	lsls	r3, r3, #28
 80072b4:	4916      	ldr	r1, [pc, #88]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80072bc:	4b14      	ldr	r3, [pc, #80]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80072be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ca:	4911      	ldr	r1, [pc, #68]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80072d2:	4b0f      	ldr	r3, [pc, #60]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a0e      	ldr	r2, [pc, #56]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80072d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072de:	f7fb ffdb 	bl	8003298 <HAL_GetTick>
 80072e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80072e4:	e008      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80072e6:	f7fb ffd7 	bl	8003298 <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b64      	cmp	r3, #100	; 0x64
 80072f2:	d901      	bls.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e007      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80072f8:	4b05      	ldr	r3, [pc, #20]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007304:	d1ef      	bne.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	40023800 	.word	0x40023800
 8007314:	08016244 	.word	0x08016244

08007318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e0f5      	b.n	8007516 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a7c      	ldr	r2, [pc, #496]	; (8007520 <HAL_TIM_Base_Init+0x208>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d045      	beq.n	80073c0 <HAL_TIM_Base_Init+0xa8>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800733c:	d040      	beq.n	80073c0 <HAL_TIM_Base_Init+0xa8>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a78      	ldr	r2, [pc, #480]	; (8007524 <HAL_TIM_Base_Init+0x20c>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d03b      	beq.n	80073c0 <HAL_TIM_Base_Init+0xa8>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a76      	ldr	r2, [pc, #472]	; (8007528 <HAL_TIM_Base_Init+0x210>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d036      	beq.n	80073c0 <HAL_TIM_Base_Init+0xa8>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a75      	ldr	r2, [pc, #468]	; (800752c <HAL_TIM_Base_Init+0x214>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d031      	beq.n	80073c0 <HAL_TIM_Base_Init+0xa8>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a73      	ldr	r2, [pc, #460]	; (8007530 <HAL_TIM_Base_Init+0x218>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d02c      	beq.n	80073c0 <HAL_TIM_Base_Init+0xa8>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a72      	ldr	r2, [pc, #456]	; (8007534 <HAL_TIM_Base_Init+0x21c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d027      	beq.n	80073c0 <HAL_TIM_Base_Init+0xa8>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a70      	ldr	r2, [pc, #448]	; (8007538 <HAL_TIM_Base_Init+0x220>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d022      	beq.n	80073c0 <HAL_TIM_Base_Init+0xa8>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a6f      	ldr	r2, [pc, #444]	; (800753c <HAL_TIM_Base_Init+0x224>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d01d      	beq.n	80073c0 <HAL_TIM_Base_Init+0xa8>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a6d      	ldr	r2, [pc, #436]	; (8007540 <HAL_TIM_Base_Init+0x228>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d018      	beq.n	80073c0 <HAL_TIM_Base_Init+0xa8>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a6c      	ldr	r2, [pc, #432]	; (8007544 <HAL_TIM_Base_Init+0x22c>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d013      	beq.n	80073c0 <HAL_TIM_Base_Init+0xa8>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a6a      	ldr	r2, [pc, #424]	; (8007548 <HAL_TIM_Base_Init+0x230>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d00e      	beq.n	80073c0 <HAL_TIM_Base_Init+0xa8>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a69      	ldr	r2, [pc, #420]	; (800754c <HAL_TIM_Base_Init+0x234>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d009      	beq.n	80073c0 <HAL_TIM_Base_Init+0xa8>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a67      	ldr	r2, [pc, #412]	; (8007550 <HAL_TIM_Base_Init+0x238>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d004      	beq.n	80073c0 <HAL_TIM_Base_Init+0xa8>
 80073b6:	f44f 718b 	mov.w	r1, #278	; 0x116
 80073ba:	4866      	ldr	r0, [pc, #408]	; (8007554 <HAL_TIM_Base_Init+0x23c>)
 80073bc:	f7fb f9b9 	bl	8002732 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d014      	beq.n	80073f2 <HAL_TIM_Base_Init+0xda>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	2b10      	cmp	r3, #16
 80073ce:	d010      	beq.n	80073f2 <HAL_TIM_Base_Init+0xda>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	2b20      	cmp	r3, #32
 80073d6:	d00c      	beq.n	80073f2 <HAL_TIM_Base_Init+0xda>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	2b40      	cmp	r3, #64	; 0x40
 80073de:	d008      	beq.n	80073f2 <HAL_TIM_Base_Init+0xda>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	2b60      	cmp	r3, #96	; 0x60
 80073e6:	d004      	beq.n	80073f2 <HAL_TIM_Base_Init+0xda>
 80073e8:	f240 1117 	movw	r1, #279	; 0x117
 80073ec:	4859      	ldr	r0, [pc, #356]	; (8007554 <HAL_TIM_Base_Init+0x23c>)
 80073ee:	f7fb f9a0 	bl	8002732 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00e      	beq.n	8007418 <HAL_TIM_Base_Init+0x100>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007402:	d009      	beq.n	8007418 <HAL_TIM_Base_Init+0x100>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800740c:	d004      	beq.n	8007418 <HAL_TIM_Base_Init+0x100>
 800740e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8007412:	4850      	ldr	r0, [pc, #320]	; (8007554 <HAL_TIM_Base_Init+0x23c>)
 8007414:	f7fb f98d 	bl	8002732 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007420:	d004      	beq.n	800742c <HAL_TIM_Base_Init+0x114>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a41      	ldr	r2, [pc, #260]	; (800752c <HAL_TIM_Base_Init+0x214>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d107      	bne.n	800743c <HAL_TIM_Base_Init+0x124>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	2b00      	cmp	r3, #0
 8007432:	bf14      	ite	ne
 8007434:	2301      	movne	r3, #1
 8007436:	2300      	moveq	r3, #0
 8007438:	b2db      	uxtb	r3, r3
 800743a:	e00e      	b.n	800745a <HAL_TIM_Base_Init+0x142>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d006      	beq.n	8007452 <HAL_TIM_Base_Init+0x13a>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800744c:	d201      	bcs.n	8007452 <HAL_TIM_Base_Init+0x13a>
 800744e:	2301      	movs	r3, #1
 8007450:	e000      	b.n	8007454 <HAL_TIM_Base_Init+0x13c>
 8007452:	2300      	movs	r3, #0
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d104      	bne.n	8007468 <HAL_TIM_Base_Init+0x150>
 800745e:	f240 1119 	movw	r1, #281	; 0x119
 8007462:	483c      	ldr	r0, [pc, #240]	; (8007554 <HAL_TIM_Base_Init+0x23c>)
 8007464:	f7fb f965 	bl	8002732 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d008      	beq.n	8007482 <HAL_TIM_Base_Init+0x16a>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	2b80      	cmp	r3, #128	; 0x80
 8007476:	d004      	beq.n	8007482 <HAL_TIM_Base_Init+0x16a>
 8007478:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800747c:	4835      	ldr	r0, [pc, #212]	; (8007554 <HAL_TIM_Base_Init+0x23c>)
 800747e:	f7fb f958 	bl	8002732 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d106      	bne.n	800749c <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7fb fcb0 	bl	8002dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	3304      	adds	r3, #4
 80074ac:	4619      	mov	r1, r3
 80074ae:	4610      	mov	r0, r2
 80074b0:	f001 fa52 	bl	8008958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	40010000 	.word	0x40010000
 8007524:	40000400 	.word	0x40000400
 8007528:	40000800 	.word	0x40000800
 800752c:	40000c00 	.word	0x40000c00
 8007530:	40001000 	.word	0x40001000
 8007534:	40001400 	.word	0x40001400
 8007538:	40010400 	.word	0x40010400
 800753c:	40014000 	.word	0x40014000
 8007540:	40014400 	.word	0x40014400
 8007544:	40014800 	.word	0x40014800
 8007548:	40001800 	.word	0x40001800
 800754c:	40001c00 	.word	0x40001c00
 8007550:	40002000 	.word	0x40002000
 8007554:	08016280 	.word	0x08016280

08007558 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e0f5      	b.n	8007756 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a7c      	ldr	r2, [pc, #496]	; (8007760 <HAL_TIM_PWM_Init+0x208>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d045      	beq.n	8007600 <HAL_TIM_PWM_Init+0xa8>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757c:	d040      	beq.n	8007600 <HAL_TIM_PWM_Init+0xa8>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a78      	ldr	r2, [pc, #480]	; (8007764 <HAL_TIM_PWM_Init+0x20c>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d03b      	beq.n	8007600 <HAL_TIM_PWM_Init+0xa8>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a76      	ldr	r2, [pc, #472]	; (8007768 <HAL_TIM_PWM_Init+0x210>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d036      	beq.n	8007600 <HAL_TIM_PWM_Init+0xa8>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a75      	ldr	r2, [pc, #468]	; (800776c <HAL_TIM_PWM_Init+0x214>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d031      	beq.n	8007600 <HAL_TIM_PWM_Init+0xa8>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a73      	ldr	r2, [pc, #460]	; (8007770 <HAL_TIM_PWM_Init+0x218>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d02c      	beq.n	8007600 <HAL_TIM_PWM_Init+0xa8>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a72      	ldr	r2, [pc, #456]	; (8007774 <HAL_TIM_PWM_Init+0x21c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d027      	beq.n	8007600 <HAL_TIM_PWM_Init+0xa8>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a70      	ldr	r2, [pc, #448]	; (8007778 <HAL_TIM_PWM_Init+0x220>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d022      	beq.n	8007600 <HAL_TIM_PWM_Init+0xa8>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a6f      	ldr	r2, [pc, #444]	; (800777c <HAL_TIM_PWM_Init+0x224>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d01d      	beq.n	8007600 <HAL_TIM_PWM_Init+0xa8>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a6d      	ldr	r2, [pc, #436]	; (8007780 <HAL_TIM_PWM_Init+0x228>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d018      	beq.n	8007600 <HAL_TIM_PWM_Init+0xa8>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a6c      	ldr	r2, [pc, #432]	; (8007784 <HAL_TIM_PWM_Init+0x22c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d013      	beq.n	8007600 <HAL_TIM_PWM_Init+0xa8>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a6a      	ldr	r2, [pc, #424]	; (8007788 <HAL_TIM_PWM_Init+0x230>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d00e      	beq.n	8007600 <HAL_TIM_PWM_Init+0xa8>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a69      	ldr	r2, [pc, #420]	; (800778c <HAL_TIM_PWM_Init+0x234>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d009      	beq.n	8007600 <HAL_TIM_PWM_Init+0xa8>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a67      	ldr	r2, [pc, #412]	; (8007790 <HAL_TIM_PWM_Init+0x238>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d004      	beq.n	8007600 <HAL_TIM_PWM_Init+0xa8>
 80075f6:	f240 5133 	movw	r1, #1331	; 0x533
 80075fa:	4866      	ldr	r0, [pc, #408]	; (8007794 <HAL_TIM_PWM_Init+0x23c>)
 80075fc:	f7fb f899 	bl	8002732 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d014      	beq.n	8007632 <HAL_TIM_PWM_Init+0xda>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	2b10      	cmp	r3, #16
 800760e:	d010      	beq.n	8007632 <HAL_TIM_PWM_Init+0xda>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	2b20      	cmp	r3, #32
 8007616:	d00c      	beq.n	8007632 <HAL_TIM_PWM_Init+0xda>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	2b40      	cmp	r3, #64	; 0x40
 800761e:	d008      	beq.n	8007632 <HAL_TIM_PWM_Init+0xda>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	2b60      	cmp	r3, #96	; 0x60
 8007626:	d004      	beq.n	8007632 <HAL_TIM_PWM_Init+0xda>
 8007628:	f240 5134 	movw	r1, #1332	; 0x534
 800762c:	4859      	ldr	r0, [pc, #356]	; (8007794 <HAL_TIM_PWM_Init+0x23c>)
 800762e:	f7fb f880 	bl	8002732 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00e      	beq.n	8007658 <HAL_TIM_PWM_Init+0x100>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007642:	d009      	beq.n	8007658 <HAL_TIM_PWM_Init+0x100>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800764c:	d004      	beq.n	8007658 <HAL_TIM_PWM_Init+0x100>
 800764e:	f240 5135 	movw	r1, #1333	; 0x535
 8007652:	4850      	ldr	r0, [pc, #320]	; (8007794 <HAL_TIM_PWM_Init+0x23c>)
 8007654:	f7fb f86d 	bl	8002732 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007660:	d004      	beq.n	800766c <HAL_TIM_PWM_Init+0x114>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a41      	ldr	r2, [pc, #260]	; (800776c <HAL_TIM_PWM_Init+0x214>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d107      	bne.n	800767c <HAL_TIM_PWM_Init+0x124>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	bf14      	ite	ne
 8007674:	2301      	movne	r3, #1
 8007676:	2300      	moveq	r3, #0
 8007678:	b2db      	uxtb	r3, r3
 800767a:	e00e      	b.n	800769a <HAL_TIM_PWM_Init+0x142>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d006      	beq.n	8007692 <HAL_TIM_PWM_Init+0x13a>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800768c:	d201      	bcs.n	8007692 <HAL_TIM_PWM_Init+0x13a>
 800768e:	2301      	movs	r3, #1
 8007690:	e000      	b.n	8007694 <HAL_TIM_PWM_Init+0x13c>
 8007692:	2300      	movs	r3, #0
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d104      	bne.n	80076a8 <HAL_TIM_PWM_Init+0x150>
 800769e:	f240 5136 	movw	r1, #1334	; 0x536
 80076a2:	483c      	ldr	r0, [pc, #240]	; (8007794 <HAL_TIM_PWM_Init+0x23c>)
 80076a4:	f7fb f845 	bl	8002732 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d008      	beq.n	80076c2 <HAL_TIM_PWM_Init+0x16a>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	2b80      	cmp	r3, #128	; 0x80
 80076b6:	d004      	beq.n	80076c2 <HAL_TIM_PWM_Init+0x16a>
 80076b8:	f240 5137 	movw	r1, #1335	; 0x537
 80076bc:	4835      	ldr	r0, [pc, #212]	; (8007794 <HAL_TIM_PWM_Init+0x23c>)
 80076be:	f7fb f838 	bl	8002732 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d106      	bne.n	80076dc <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f85e 	bl	8007798 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2202      	movs	r2, #2
 80076e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3304      	adds	r3, #4
 80076ec:	4619      	mov	r1, r3
 80076ee:	4610      	mov	r0, r2
 80076f0:	f001 f932 	bl	8008958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	40010000 	.word	0x40010000
 8007764:	40000400 	.word	0x40000400
 8007768:	40000800 	.word	0x40000800
 800776c:	40000c00 	.word	0x40000c00
 8007770:	40001000 	.word	0x40001000
 8007774:	40001400 	.word	0x40001400
 8007778:	40010400 	.word	0x40010400
 800777c:	40014000 	.word	0x40014000
 8007780:	40014400 	.word	0x40014400
 8007784:	40014800 	.word	0x40014800
 8007788:	40001800 	.word	0x40001800
 800778c:	40001c00 	.word	0x40001c00
 8007790:	40002000 	.word	0x40002000
 8007794:	08016280 	.word	0x08016280

08007798 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a89      	ldr	r2, [pc, #548]	; (80079e0 <HAL_TIM_PWM_Start+0x234>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d117      	bne.n	80077f0 <HAL_TIM_PWM_Start+0x44>
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 80ae 	beq.w	8007924 <HAL_TIM_PWM_Start+0x178>
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2b04      	cmp	r3, #4
 80077cc:	f000 80aa 	beq.w	8007924 <HAL_TIM_PWM_Start+0x178>
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2b08      	cmp	r3, #8
 80077d4:	f000 80a6 	beq.w	8007924 <HAL_TIM_PWM_Start+0x178>
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2b0c      	cmp	r3, #12
 80077dc:	f000 80a2 	beq.w	8007924 <HAL_TIM_PWM_Start+0x178>
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	2b10      	cmp	r3, #16
 80077e4:	f000 809e 	beq.w	8007924 <HAL_TIM_PWM_Start+0x178>
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2b14      	cmp	r3, #20
 80077ec:	f000 809a 	beq.w	8007924 <HAL_TIM_PWM_Start+0x178>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f8:	d10f      	bne.n	800781a <HAL_TIM_PWM_Start+0x6e>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 8091 	beq.w	8007924 <HAL_TIM_PWM_Start+0x178>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b04      	cmp	r3, #4
 8007806:	f000 808d 	beq.w	8007924 <HAL_TIM_PWM_Start+0x178>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b08      	cmp	r3, #8
 800780e:	f000 8089 	beq.w	8007924 <HAL_TIM_PWM_Start+0x178>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b0c      	cmp	r3, #12
 8007816:	f000 8085 	beq.w	8007924 <HAL_TIM_PWM_Start+0x178>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a71      	ldr	r2, [pc, #452]	; (80079e4 <HAL_TIM_PWM_Start+0x238>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d10b      	bne.n	800783c <HAL_TIM_PWM_Start+0x90>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d07c      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b04      	cmp	r3, #4
 800782e:	d079      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	2b08      	cmp	r3, #8
 8007834:	d076      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b0c      	cmp	r3, #12
 800783a:	d073      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a69      	ldr	r2, [pc, #420]	; (80079e8 <HAL_TIM_PWM_Start+0x23c>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d10b      	bne.n	800785e <HAL_TIM_PWM_Start+0xb2>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d06b      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b04      	cmp	r3, #4
 8007850:	d068      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b08      	cmp	r3, #8
 8007856:	d065      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2b0c      	cmp	r3, #12
 800785c:	d062      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a62      	ldr	r2, [pc, #392]	; (80079ec <HAL_TIM_PWM_Start+0x240>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d10b      	bne.n	8007880 <HAL_TIM_PWM_Start+0xd4>
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d05a      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2b04      	cmp	r3, #4
 8007872:	d057      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2b08      	cmp	r3, #8
 8007878:	d054      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b0c      	cmp	r3, #12
 800787e:	d051      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a5a      	ldr	r2, [pc, #360]	; (80079f0 <HAL_TIM_PWM_Start+0x244>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d111      	bne.n	80078ae <HAL_TIM_PWM_Start+0x102>
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d049      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2b04      	cmp	r3, #4
 8007894:	d046      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b08      	cmp	r3, #8
 800789a:	d043      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2b0c      	cmp	r3, #12
 80078a0:	d040      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b10      	cmp	r3, #16
 80078a6:	d03d      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b14      	cmp	r3, #20
 80078ac:	d03a      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a50      	ldr	r2, [pc, #320]	; (80079f4 <HAL_TIM_PWM_Start+0x248>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d105      	bne.n	80078c4 <HAL_TIM_PWM_Start+0x118>
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d032      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2b04      	cmp	r3, #4
 80078c2:	d02f      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a4b      	ldr	r2, [pc, #300]	; (80079f8 <HAL_TIM_PWM_Start+0x24c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d102      	bne.n	80078d4 <HAL_TIM_PWM_Start+0x128>
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d027      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a48      	ldr	r2, [pc, #288]	; (80079fc <HAL_TIM_PWM_Start+0x250>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d102      	bne.n	80078e4 <HAL_TIM_PWM_Start+0x138>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d01f      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a45      	ldr	r2, [pc, #276]	; (8007a00 <HAL_TIM_PWM_Start+0x254>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d105      	bne.n	80078fa <HAL_TIM_PWM_Start+0x14e>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d017      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d014      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a41      	ldr	r2, [pc, #260]	; (8007a04 <HAL_TIM_PWM_Start+0x258>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d102      	bne.n	800790a <HAL_TIM_PWM_Start+0x15e>
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00c      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a3e      	ldr	r2, [pc, #248]	; (8007a08 <HAL_TIM_PWM_Start+0x25c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d102      	bne.n	800791a <HAL_TIM_PWM_Start+0x16e>
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d004      	beq.n	8007924 <HAL_TIM_PWM_Start+0x178>
 800791a:	f240 51bc 	movw	r1, #1468	; 0x5bc
 800791e:	483b      	ldr	r0, [pc, #236]	; (8007a0c <HAL_TIM_PWM_Start+0x260>)
 8007920:	f7fa ff07 	bl	8002732 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <HAL_TIM_PWM_Start+0x192>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b01      	cmp	r3, #1
 8007934:	bf14      	ite	ne
 8007936:	2301      	movne	r3, #1
 8007938:	2300      	moveq	r3, #0
 800793a:	b2db      	uxtb	r3, r3
 800793c:	e03c      	b.n	80079b8 <HAL_TIM_PWM_Start+0x20c>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b04      	cmp	r3, #4
 8007942:	d109      	bne.n	8007958 <HAL_TIM_PWM_Start+0x1ac>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b01      	cmp	r3, #1
 800794e:	bf14      	ite	ne
 8007950:	2301      	movne	r3, #1
 8007952:	2300      	moveq	r3, #0
 8007954:	b2db      	uxtb	r3, r3
 8007956:	e02f      	b.n	80079b8 <HAL_TIM_PWM_Start+0x20c>
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b08      	cmp	r3, #8
 800795c:	d109      	bne.n	8007972 <HAL_TIM_PWM_Start+0x1c6>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b01      	cmp	r3, #1
 8007968:	bf14      	ite	ne
 800796a:	2301      	movne	r3, #1
 800796c:	2300      	moveq	r3, #0
 800796e:	b2db      	uxtb	r3, r3
 8007970:	e022      	b.n	80079b8 <HAL_TIM_PWM_Start+0x20c>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b0c      	cmp	r3, #12
 8007976:	d109      	bne.n	800798c <HAL_TIM_PWM_Start+0x1e0>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b01      	cmp	r3, #1
 8007982:	bf14      	ite	ne
 8007984:	2301      	movne	r3, #1
 8007986:	2300      	moveq	r3, #0
 8007988:	b2db      	uxtb	r3, r3
 800798a:	e015      	b.n	80079b8 <HAL_TIM_PWM_Start+0x20c>
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b10      	cmp	r3, #16
 8007990:	d109      	bne.n	80079a6 <HAL_TIM_PWM_Start+0x1fa>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b01      	cmp	r3, #1
 800799c:	bf14      	ite	ne
 800799e:	2301      	movne	r3, #1
 80079a0:	2300      	moveq	r3, #0
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	e008      	b.n	80079b8 <HAL_TIM_PWM_Start+0x20c>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	bf14      	ite	ne
 80079b2:	2301      	movne	r3, #1
 80079b4:	2300      	moveq	r3, #0
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e0aa      	b.n	8007b16 <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d104      	bne.n	80079d0 <HAL_TIM_PWM_Start+0x224>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2202      	movs	r2, #2
 80079ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079ce:	e03b      	b.n	8007a48 <HAL_TIM_PWM_Start+0x29c>
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d11c      	bne.n	8007a10 <HAL_TIM_PWM_Start+0x264>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2202      	movs	r2, #2
 80079da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079de:	e033      	b.n	8007a48 <HAL_TIM_PWM_Start+0x29c>
 80079e0:	40010000 	.word	0x40010000
 80079e4:	40000400 	.word	0x40000400
 80079e8:	40000800 	.word	0x40000800
 80079ec:	40000c00 	.word	0x40000c00
 80079f0:	40010400 	.word	0x40010400
 80079f4:	40014000 	.word	0x40014000
 80079f8:	40014400 	.word	0x40014400
 80079fc:	40014800 	.word	0x40014800
 8007a00:	40001800 	.word	0x40001800
 8007a04:	40001c00 	.word	0x40001c00
 8007a08:	40002000 	.word	0x40002000
 8007a0c:	08016280 	.word	0x08016280
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b08      	cmp	r3, #8
 8007a14:	d104      	bne.n	8007a20 <HAL_TIM_PWM_Start+0x274>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2202      	movs	r2, #2
 8007a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a1e:	e013      	b.n	8007a48 <HAL_TIM_PWM_Start+0x29c>
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b0c      	cmp	r3, #12
 8007a24:	d104      	bne.n	8007a30 <HAL_TIM_PWM_Start+0x284>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2202      	movs	r2, #2
 8007a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a2e:	e00b      	b.n	8007a48 <HAL_TIM_PWM_Start+0x29c>
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b10      	cmp	r3, #16
 8007a34:	d104      	bne.n	8007a40 <HAL_TIM_PWM_Start+0x294>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2202      	movs	r2, #2
 8007a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a3e:	e003      	b.n	8007a48 <HAL_TIM_PWM_Start+0x29c>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f001 fba3 	bl	800919c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a31      	ldr	r2, [pc, #196]	; (8007b20 <HAL_TIM_PWM_Start+0x374>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d004      	beq.n	8007a6a <HAL_TIM_PWM_Start+0x2be>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a2f      	ldr	r2, [pc, #188]	; (8007b24 <HAL_TIM_PWM_Start+0x378>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d101      	bne.n	8007a6e <HAL_TIM_PWM_Start+0x2c2>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <HAL_TIM_PWM_Start+0x2c4>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d007      	beq.n	8007a84 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a25      	ldr	r2, [pc, #148]	; (8007b20 <HAL_TIM_PWM_Start+0x374>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d022      	beq.n	8007ad4 <HAL_TIM_PWM_Start+0x328>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a96:	d01d      	beq.n	8007ad4 <HAL_TIM_PWM_Start+0x328>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a22      	ldr	r2, [pc, #136]	; (8007b28 <HAL_TIM_PWM_Start+0x37c>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d018      	beq.n	8007ad4 <HAL_TIM_PWM_Start+0x328>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a21      	ldr	r2, [pc, #132]	; (8007b2c <HAL_TIM_PWM_Start+0x380>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d013      	beq.n	8007ad4 <HAL_TIM_PWM_Start+0x328>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a1f      	ldr	r2, [pc, #124]	; (8007b30 <HAL_TIM_PWM_Start+0x384>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d00e      	beq.n	8007ad4 <HAL_TIM_PWM_Start+0x328>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a1a      	ldr	r2, [pc, #104]	; (8007b24 <HAL_TIM_PWM_Start+0x378>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d009      	beq.n	8007ad4 <HAL_TIM_PWM_Start+0x328>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a1b      	ldr	r2, [pc, #108]	; (8007b34 <HAL_TIM_PWM_Start+0x388>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d004      	beq.n	8007ad4 <HAL_TIM_PWM_Start+0x328>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a1a      	ldr	r2, [pc, #104]	; (8007b38 <HAL_TIM_PWM_Start+0x38c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d115      	bne.n	8007b00 <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689a      	ldr	r2, [r3, #8]
 8007ada:	4b18      	ldr	r3, [pc, #96]	; (8007b3c <HAL_TIM_PWM_Start+0x390>)
 8007adc:	4013      	ands	r3, r2
 8007ade:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2b06      	cmp	r3, #6
 8007ae4:	d015      	beq.n	8007b12 <HAL_TIM_PWM_Start+0x366>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aec:	d011      	beq.n	8007b12 <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f042 0201 	orr.w	r2, r2, #1
 8007afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007afe:	e008      	b.n	8007b12 <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f042 0201 	orr.w	r2, r2, #1
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	e000      	b.n	8007b14 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	40010000 	.word	0x40010000
 8007b24:	40010400 	.word	0x40010400
 8007b28:	40000400 	.word	0x40000400
 8007b2c:	40000800 	.word	0x40000800
 8007b30:	40000c00 	.word	0x40000c00
 8007b34:	40014000 	.word	0x40014000
 8007b38:	40001800 	.word	0x40001800
 8007b3c:	00010007 	.word	0x00010007

08007b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f003 0302 	and.w	r3, r3, #2
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d122      	bne.n	8007b9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f003 0302 	and.w	r3, r3, #2
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d11b      	bne.n	8007b9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f06f 0202 	mvn.w	r2, #2
 8007b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	f003 0303 	and.w	r3, r3, #3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 feca 	bl	800891c <HAL_TIM_IC_CaptureCallback>
 8007b88:	e005      	b.n	8007b96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 febc 	bl	8008908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fecd 	bl	8008930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f003 0304 	and.w	r3, r3, #4
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d122      	bne.n	8007bf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	2b04      	cmp	r3, #4
 8007bb6:	d11b      	bne.n	8007bf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f06f 0204 	mvn.w	r2, #4
 8007bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fea0 	bl	800891c <HAL_TIM_IC_CaptureCallback>
 8007bdc:	e005      	b.n	8007bea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fe92 	bl	8008908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fea3 	bl	8008930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f003 0308 	and.w	r3, r3, #8
 8007bfa:	2b08      	cmp	r3, #8
 8007bfc:	d122      	bne.n	8007c44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f003 0308 	and.w	r3, r3, #8
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d11b      	bne.n	8007c44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f06f 0208 	mvn.w	r2, #8
 8007c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2204      	movs	r2, #4
 8007c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fe76 	bl	800891c <HAL_TIM_IC_CaptureCallback>
 8007c30:	e005      	b.n	8007c3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fe68 	bl	8008908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fe79 	bl	8008930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	f003 0310 	and.w	r3, r3, #16
 8007c4e:	2b10      	cmp	r3, #16
 8007c50:	d122      	bne.n	8007c98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	f003 0310 	and.w	r3, r3, #16
 8007c5c:	2b10      	cmp	r3, #16
 8007c5e:	d11b      	bne.n	8007c98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f06f 0210 	mvn.w	r2, #16
 8007c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fe4c 	bl	800891c <HAL_TIM_IC_CaptureCallback>
 8007c84:	e005      	b.n	8007c92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fe3e 	bl	8008908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fe4f 	bl	8008930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d10e      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d107      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f06f 0201 	mvn.w	r2, #1
 8007cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fe18 	bl	80088f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cce:	2b80      	cmp	r3, #128	; 0x80
 8007cd0:	d10e      	bne.n	8007cf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cdc:	2b80      	cmp	r3, #128	; 0x80
 8007cde:	d107      	bne.n	8007cf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f001 fc42 	bl	8009574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cfe:	d10e      	bne.n	8007d1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d0a:	2b80      	cmp	r3, #128	; 0x80
 8007d0c:	d107      	bne.n	8007d1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 fc35 	bl	8009588 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d28:	2b40      	cmp	r3, #64	; 0x40
 8007d2a:	d10e      	bne.n	8007d4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d36:	2b40      	cmp	r3, #64	; 0x40
 8007d38:	d107      	bne.n	8007d4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fdfd 	bl	8008944 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	f003 0320 	and.w	r3, r3, #32
 8007d54:	2b20      	cmp	r3, #32
 8007d56:	d10e      	bne.n	8007d76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	f003 0320 	and.w	r3, r3, #32
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	d107      	bne.n	8007d76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f06f 0220 	mvn.w	r2, #32
 8007d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 fbf5 	bl	8009560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d76:	bf00      	nop
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
	...

08007d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d016      	beq.n	8007dc4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	d013      	beq.n	8007dc4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b08      	cmp	r3, #8
 8007da0:	d010      	beq.n	8007dc4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b0c      	cmp	r3, #12
 8007da6:	d00d      	beq.n	8007dc4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b10      	cmp	r3, #16
 8007dac:	d00a      	beq.n	8007dc4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b14      	cmp	r3, #20
 8007db2:	d007      	beq.n	8007dc4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b3c      	cmp	r3, #60	; 0x3c
 8007db8:	d004      	beq.n	8007dc4 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007dba:	f241 01af 	movw	r1, #4271	; 0x10af
 8007dbe:	4895      	ldr	r0, [pc, #596]	; (8008014 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007dc0:	f7fa fcb7 	bl	8002732 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b60      	cmp	r3, #96	; 0x60
 8007dca:	d01c      	beq.n	8007e06 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b70      	cmp	r3, #112	; 0x70
 8007dd2:	d018      	beq.n	8007e06 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a8f      	ldr	r2, [pc, #572]	; (8008018 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d013      	beq.n	8007e06 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a8e      	ldr	r2, [pc, #568]	; (800801c <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d00e      	beq.n	8007e06 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a8c      	ldr	r2, [pc, #560]	; (8008020 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d009      	beq.n	8007e06 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a8b      	ldr	r2, [pc, #556]	; (8008024 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d004      	beq.n	8007e06 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007dfc:	f241 01b0 	movw	r1, #4272	; 0x10b0
 8007e00:	4884      	ldr	r0, [pc, #528]	; (8008014 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007e02:	f7fa fc96 	bl	8002732 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d008      	beq.n	8007e20 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d004      	beq.n	8007e20 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007e16:	f241 01b1 	movw	r1, #4273	; 0x10b1
 8007e1a:	487e      	ldr	r0, [pc, #504]	; (8008014 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007e1c:	f7fa fc89 	bl	8002732 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d008      	beq.n	8007e3a <HAL_TIM_PWM_ConfigChannel+0xba>
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	2b04      	cmp	r3, #4
 8007e2e:	d004      	beq.n	8007e3a <HAL_TIM_PWM_ConfigChannel+0xba>
 8007e30:	f241 01b2 	movw	r1, #4274	; 0x10b2
 8007e34:	4877      	ldr	r0, [pc, #476]	; (8008014 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007e36:	f7fa fc7c 	bl	8002732 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d101      	bne.n	8007e48 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8007e44:	2302      	movs	r3, #2
 8007e46:	e1f3      	b.n	8008230 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b14      	cmp	r3, #20
 8007e54:	f200 81e4 	bhi.w	8008220 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8007e58:	a201      	add	r2, pc, #4	; (adr r2, 8007e60 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8007e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5e:	bf00      	nop
 8007e60:	08007eb5 	.word	0x08007eb5
 8007e64:	08008221 	.word	0x08008221
 8007e68:	08008221 	.word	0x08008221
 8007e6c:	08008221 	.word	0x08008221
 8007e70:	08007f77 	.word	0x08007f77
 8007e74:	08008221 	.word	0x08008221
 8007e78:	08008221 	.word	0x08008221
 8007e7c:	08008221 	.word	0x08008221
 8007e80:	08008055 	.word	0x08008055
 8007e84:	08008221 	.word	0x08008221
 8007e88:	08008221 	.word	0x08008221
 8007e8c:	08008221 	.word	0x08008221
 8007e90:	080080db 	.word	0x080080db
 8007e94:	08008221 	.word	0x08008221
 8007e98:	08008221 	.word	0x08008221
 8007e9c:	08008221 	.word	0x08008221
 8007ea0:	08008163 	.word	0x08008163
 8007ea4:	08008221 	.word	0x08008221
 8007ea8:	08008221 	.word	0x08008221
 8007eac:	08008221 	.word	0x08008221
 8007eb0:	080081c1 	.word	0x080081c1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a5b      	ldr	r2, [pc, #364]	; (8008028 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d03b      	beq.n	8007f36 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec6:	d036      	beq.n	8007f36 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a57      	ldr	r2, [pc, #348]	; (800802c <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d031      	beq.n	8007f36 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a56      	ldr	r2, [pc, #344]	; (8008030 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d02c      	beq.n	8007f36 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a54      	ldr	r2, [pc, #336]	; (8008034 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d027      	beq.n	8007f36 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a53      	ldr	r2, [pc, #332]	; (8008038 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d022      	beq.n	8007f36 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a51      	ldr	r2, [pc, #324]	; (800803c <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d01d      	beq.n	8007f36 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a50      	ldr	r2, [pc, #320]	; (8008040 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d018      	beq.n	8007f36 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a4e      	ldr	r2, [pc, #312]	; (8008044 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d013      	beq.n	8007f36 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a4d      	ldr	r2, [pc, #308]	; (8008048 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d00e      	beq.n	8007f36 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a4b      	ldr	r2, [pc, #300]	; (800804c <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d009      	beq.n	8007f36 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a4a      	ldr	r2, [pc, #296]	; (8008050 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d004      	beq.n	8007f36 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007f2c:	f241 01bc 	movw	r1, #4284	; 0x10bc
 8007f30:	4838      	ldr	r0, [pc, #224]	; (8008014 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007f32:	f7fa fbfe 	bl	8002732 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68b9      	ldr	r1, [r7, #8]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 fdab 	bl	8008a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	699a      	ldr	r2, [r3, #24]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f042 0208 	orr.w	r2, r2, #8
 8007f50:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	699a      	ldr	r2, [r3, #24]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 0204 	bic.w	r2, r2, #4
 8007f60:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6999      	ldr	r1, [r3, #24]
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	691a      	ldr	r2, [r3, #16]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	619a      	str	r2, [r3, #24]
      break;
 8007f74:	e157      	b.n	8008226 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a2b      	ldr	r2, [pc, #172]	; (8008028 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d027      	beq.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f88:	d022      	beq.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a27      	ldr	r2, [pc, #156]	; (800802c <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d01d      	beq.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a25      	ldr	r2, [pc, #148]	; (8008030 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d018      	beq.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a24      	ldr	r2, [pc, #144]	; (8008034 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d013      	beq.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a22      	ldr	r2, [pc, #136]	; (8008038 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00e      	beq.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a21      	ldr	r2, [pc, #132]	; (800803c <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d009      	beq.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a21      	ldr	r2, [pc, #132]	; (8008048 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d004      	beq.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007fc6:	f241 01cd 	movw	r1, #4301	; 0x10cd
 8007fca:	4812      	ldr	r0, [pc, #72]	; (8008014 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007fcc:	f7fa fbb1 	bl	8002732 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68b9      	ldr	r1, [r7, #8]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 fdfa 	bl	8008bd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	699a      	ldr	r2, [r3, #24]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	699a      	ldr	r2, [r3, #24]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6999      	ldr	r1, [r3, #24]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	021a      	lsls	r2, r3, #8
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	619a      	str	r2, [r3, #24]
      break;
 8008010:	e109      	b.n	8008226 <HAL_TIM_PWM_ConfigChannel+0x4a6>
 8008012:	bf00      	nop
 8008014:	08016280 	.word	0x08016280
 8008018:	00010040 	.word	0x00010040
 800801c:	00010050 	.word	0x00010050
 8008020:	00010060 	.word	0x00010060
 8008024:	00010070 	.word	0x00010070
 8008028:	40010000 	.word	0x40010000
 800802c:	40000400 	.word	0x40000400
 8008030:	40000800 	.word	0x40000800
 8008034:	40000c00 	.word	0x40000c00
 8008038:	40010400 	.word	0x40010400
 800803c:	40014000 	.word	0x40014000
 8008040:	40014400 	.word	0x40014400
 8008044:	40014800 	.word	0x40014800
 8008048:	40001800 	.word	0x40001800
 800804c:	40001c00 	.word	0x40001c00
 8008050:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a77      	ldr	r2, [pc, #476]	; (8008238 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d01d      	beq.n	800809a <HAL_TIM_PWM_ConfigChannel+0x31a>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008066:	d018      	beq.n	800809a <HAL_TIM_PWM_ConfigChannel+0x31a>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a73      	ldr	r2, [pc, #460]	; (800823c <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d013      	beq.n	800809a <HAL_TIM_PWM_ConfigChannel+0x31a>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a72      	ldr	r2, [pc, #456]	; (8008240 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d00e      	beq.n	800809a <HAL_TIM_PWM_ConfigChannel+0x31a>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a70      	ldr	r2, [pc, #448]	; (8008244 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d009      	beq.n	800809a <HAL_TIM_PWM_ConfigChannel+0x31a>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a6f      	ldr	r2, [pc, #444]	; (8008248 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d004      	beq.n	800809a <HAL_TIM_PWM_ConfigChannel+0x31a>
 8008090:	f241 01de 	movw	r1, #4318	; 0x10de
 8008094:	486d      	ldr	r0, [pc, #436]	; (800824c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8008096:	f7fa fb4c 	bl	8002732 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68b9      	ldr	r1, [r7, #8]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 fe35 	bl	8008d10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	69da      	ldr	r2, [r3, #28]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f042 0208 	orr.w	r2, r2, #8
 80080b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	69da      	ldr	r2, [r3, #28]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f022 0204 	bic.w	r2, r2, #4
 80080c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	69d9      	ldr	r1, [r3, #28]
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	691a      	ldr	r2, [r3, #16]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	430a      	orrs	r2, r1
 80080d6:	61da      	str	r2, [r3, #28]
      break;
 80080d8:	e0a5      	b.n	8008226 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a56      	ldr	r2, [pc, #344]	; (8008238 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d01d      	beq.n	8008120 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ec:	d018      	beq.n	8008120 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a52      	ldr	r2, [pc, #328]	; (800823c <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d013      	beq.n	8008120 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a50      	ldr	r2, [pc, #320]	; (8008240 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d00e      	beq.n	8008120 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a4f      	ldr	r2, [pc, #316]	; (8008244 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d009      	beq.n	8008120 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a4d      	ldr	r2, [pc, #308]	; (8008248 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d004      	beq.n	8008120 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008116:	f241 01ef 	movw	r1, #4335	; 0x10ef
 800811a:	484c      	ldr	r0, [pc, #304]	; (800824c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800811c:	f7fa fb09 	bl	8002732 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68b9      	ldr	r1, [r7, #8]
 8008126:	4618      	mov	r0, r3
 8008128:	f000 fe92 	bl	8008e50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	69da      	ldr	r2, [r3, #28]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800813a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	69da      	ldr	r2, [r3, #28]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800814a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	69d9      	ldr	r1, [r3, #28]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	021a      	lsls	r2, r3, #8
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	61da      	str	r2, [r3, #28]
      break;
 8008160:	e061      	b.n	8008226 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a34      	ldr	r2, [pc, #208]	; (8008238 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d009      	beq.n	8008180 <HAL_TIM_PWM_ConfigChannel+0x400>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a35      	ldr	r2, [pc, #212]	; (8008248 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d004      	beq.n	8008180 <HAL_TIM_PWM_ConfigChannel+0x400>
 8008176:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800817a:	4834      	ldr	r0, [pc, #208]	; (800824c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800817c:	f7fa fad9 	bl	8002732 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fec8 	bl	8008f1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f042 0208 	orr.w	r2, r2, #8
 800819a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0204 	bic.w	r2, r2, #4
 80081aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	691a      	ldr	r2, [r3, #16]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80081be:	e032      	b.n	8008226 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a1c      	ldr	r2, [pc, #112]	; (8008238 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d009      	beq.n	80081de <HAL_TIM_PWM_ConfigChannel+0x45e>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a1e      	ldr	r2, [pc, #120]	; (8008248 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d004      	beq.n	80081de <HAL_TIM_PWM_ConfigChannel+0x45e>
 80081d4:	f241 1111 	movw	r1, #4369	; 0x1111
 80081d8:	481c      	ldr	r0, [pc, #112]	; (800824c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80081da:	f7fa faaa 	bl	8002732 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68b9      	ldr	r1, [r7, #8]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 feeb 	bl	8008fc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008208:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	021a      	lsls	r2, r3, #8
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800821e:	e002      	b.n	8008226 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	75fb      	strb	r3, [r7, #23]
      break;
 8008224:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800822e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	40010000 	.word	0x40010000
 800823c:	40000400 	.word	0x40000400
 8008240:	40000800 	.word	0x40000800
 8008244:	40000c00 	.word	0x40000c00
 8008248:	40010400 	.word	0x40010400
 800824c:	08016280 	.word	0x08016280

08008250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008264:	2b01      	cmp	r3, #1
 8008266:	d101      	bne.n	800826c <HAL_TIM_ConfigClockSource+0x1c>
 8008268:	2302      	movs	r3, #2
 800826a:	e332      	b.n	80088d2 <HAL_TIM_ConfigClockSource+0x682>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2202      	movs	r2, #2
 8008278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008284:	d029      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x8a>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b70      	cmp	r3, #112	; 0x70
 800828c:	d025      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x8a>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008296:	d020      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x8a>
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b40      	cmp	r3, #64	; 0x40
 800829e:	d01c      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x8a>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b50      	cmp	r3, #80	; 0x50
 80082a6:	d018      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x8a>
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b60      	cmp	r3, #96	; 0x60
 80082ae:	d014      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x8a>
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d010      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x8a>
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b10      	cmp	r3, #16
 80082be:	d00c      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x8a>
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b20      	cmp	r3, #32
 80082c6:	d008      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x8a>
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b30      	cmp	r3, #48	; 0x30
 80082ce:	d004      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x8a>
 80082d0:	f241 514c 	movw	r1, #5452	; 0x154c
 80082d4:	4893      	ldr	r0, [pc, #588]	; (8008524 <HAL_TIM_ConfigClockSource+0x2d4>)
 80082d6:	f7fa fa2c 	bl	8002732 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	4b90      	ldr	r3, [pc, #576]	; (8008528 <HAL_TIM_ConfigClockSource+0x2d8>)
 80082e6:	4013      	ands	r3, r2
 80082e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082f0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008302:	f000 812d 	beq.w	8008560 <HAL_TIM_ConfigClockSource+0x310>
 8008306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800830a:	f200 82d5 	bhi.w	80088b8 <HAL_TIM_ConfigClockSource+0x668>
 800830e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008312:	d02e      	beq.n	8008372 <HAL_TIM_ConfigClockSource+0x122>
 8008314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008318:	f200 82ce 	bhi.w	80088b8 <HAL_TIM_ConfigClockSource+0x668>
 800831c:	2b70      	cmp	r3, #112	; 0x70
 800831e:	f000 8082 	beq.w	8008426 <HAL_TIM_ConfigClockSource+0x1d6>
 8008322:	2b70      	cmp	r3, #112	; 0x70
 8008324:	f200 82c8 	bhi.w	80088b8 <HAL_TIM_ConfigClockSource+0x668>
 8008328:	2b60      	cmp	r3, #96	; 0x60
 800832a:	f000 81e0 	beq.w	80086ee <HAL_TIM_ConfigClockSource+0x49e>
 800832e:	2b60      	cmp	r3, #96	; 0x60
 8008330:	f200 82c2 	bhi.w	80088b8 <HAL_TIM_ConfigClockSource+0x668>
 8008334:	2b50      	cmp	r3, #80	; 0x50
 8008336:	f000 8184 	beq.w	8008642 <HAL_TIM_ConfigClockSource+0x3f2>
 800833a:	2b50      	cmp	r3, #80	; 0x50
 800833c:	f200 82bc 	bhi.w	80088b8 <HAL_TIM_ConfigClockSource+0x668>
 8008340:	2b40      	cmp	r3, #64	; 0x40
 8008342:	f000 8237 	beq.w	80087b4 <HAL_TIM_ConfigClockSource+0x564>
 8008346:	2b40      	cmp	r3, #64	; 0x40
 8008348:	f200 82b6 	bhi.w	80088b8 <HAL_TIM_ConfigClockSource+0x668>
 800834c:	2b30      	cmp	r3, #48	; 0x30
 800834e:	f000 8287 	beq.w	8008860 <HAL_TIM_ConfigClockSource+0x610>
 8008352:	2b30      	cmp	r3, #48	; 0x30
 8008354:	f200 82b0 	bhi.w	80088b8 <HAL_TIM_ConfigClockSource+0x668>
 8008358:	2b20      	cmp	r3, #32
 800835a:	f000 8281 	beq.w	8008860 <HAL_TIM_ConfigClockSource+0x610>
 800835e:	2b20      	cmp	r3, #32
 8008360:	f200 82aa 	bhi.w	80088b8 <HAL_TIM_ConfigClockSource+0x668>
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 827b 	beq.w	8008860 <HAL_TIM_ConfigClockSource+0x610>
 800836a:	2b10      	cmp	r3, #16
 800836c:	f000 8278 	beq.w	8008860 <HAL_TIM_ConfigClockSource+0x610>
 8008370:	e2a2      	b.n	80088b8 <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a6d      	ldr	r2, [pc, #436]	; (800852c <HAL_TIM_ConfigClockSource+0x2dc>)
 8008378:	4293      	cmp	r3, r2
 800837a:	f000 82a0 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x66e>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008386:	f000 829a 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x66e>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a68      	ldr	r2, [pc, #416]	; (8008530 <HAL_TIM_ConfigClockSource+0x2e0>)
 8008390:	4293      	cmp	r3, r2
 8008392:	f000 8294 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x66e>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a66      	ldr	r2, [pc, #408]	; (8008534 <HAL_TIM_ConfigClockSource+0x2e4>)
 800839c:	4293      	cmp	r3, r2
 800839e:	f000 828e 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x66e>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a64      	ldr	r2, [pc, #400]	; (8008538 <HAL_TIM_ConfigClockSource+0x2e8>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	f000 8288 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x66e>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a62      	ldr	r2, [pc, #392]	; (800853c <HAL_TIM_ConfigClockSource+0x2ec>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	f000 8282 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x66e>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a60      	ldr	r2, [pc, #384]	; (8008540 <HAL_TIM_ConfigClockSource+0x2f0>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	f000 827c 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x66e>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a5e      	ldr	r2, [pc, #376]	; (8008544 <HAL_TIM_ConfigClockSource+0x2f4>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	f000 8276 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x66e>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a5c      	ldr	r2, [pc, #368]	; (8008548 <HAL_TIM_ConfigClockSource+0x2f8>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	f000 8270 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x66e>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a5a      	ldr	r2, [pc, #360]	; (800854c <HAL_TIM_ConfigClockSource+0x2fc>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	f000 826a 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x66e>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a58      	ldr	r2, [pc, #352]	; (8008550 <HAL_TIM_ConfigClockSource+0x300>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	f000 8264 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x66e>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a56      	ldr	r2, [pc, #344]	; (8008554 <HAL_TIM_ConfigClockSource+0x304>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	f000 825e 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x66e>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a54      	ldr	r2, [pc, #336]	; (8008558 <HAL_TIM_ConfigClockSource+0x308>)
 8008408:	4293      	cmp	r3, r2
 800840a:	f000 8258 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x66e>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a52      	ldr	r2, [pc, #328]	; (800855c <HAL_TIM_ConfigClockSource+0x30c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	f000 8252 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x66e>
 800841a:	f241 5158 	movw	r1, #5464	; 0x1558
 800841e:	4841      	ldr	r0, [pc, #260]	; (8008524 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008420:	f7fa f987 	bl	8002732 <assert_failed>
      break;
 8008424:	e24b      	b.n	80088be <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a40      	ldr	r2, [pc, #256]	; (800852c <HAL_TIM_ConfigClockSource+0x2dc>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d027      	beq.n	8008480 <HAL_TIM_ConfigClockSource+0x230>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008438:	d022      	beq.n	8008480 <HAL_TIM_ConfigClockSource+0x230>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a3c      	ldr	r2, [pc, #240]	; (8008530 <HAL_TIM_ConfigClockSource+0x2e0>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d01d      	beq.n	8008480 <HAL_TIM_ConfigClockSource+0x230>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a3a      	ldr	r2, [pc, #232]	; (8008534 <HAL_TIM_ConfigClockSource+0x2e4>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d018      	beq.n	8008480 <HAL_TIM_ConfigClockSource+0x230>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a39      	ldr	r2, [pc, #228]	; (8008538 <HAL_TIM_ConfigClockSource+0x2e8>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d013      	beq.n	8008480 <HAL_TIM_ConfigClockSource+0x230>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a39      	ldr	r2, [pc, #228]	; (8008544 <HAL_TIM_ConfigClockSource+0x2f4>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d00e      	beq.n	8008480 <HAL_TIM_ConfigClockSource+0x230>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a38      	ldr	r2, [pc, #224]	; (8008548 <HAL_TIM_ConfigClockSource+0x2f8>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d009      	beq.n	8008480 <HAL_TIM_ConfigClockSource+0x230>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a38      	ldr	r2, [pc, #224]	; (8008554 <HAL_TIM_ConfigClockSource+0x304>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d004      	beq.n	8008480 <HAL_TIM_ConfigClockSource+0x230>
 8008476:	f241 515f 	movw	r1, #5471	; 0x155f
 800847a:	482a      	ldr	r0, [pc, #168]	; (8008524 <HAL_TIM_ConfigClockSource+0x2d4>)
 800847c:	f7fa f959 	bl	8002732 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d013      	beq.n	80084b0 <HAL_TIM_ConfigClockSource+0x260>
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008490:	d00e      	beq.n	80084b0 <HAL_TIM_ConfigClockSource+0x260>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800849a:	d009      	beq.n	80084b0 <HAL_TIM_ConfigClockSource+0x260>
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084a4:	d004      	beq.n	80084b0 <HAL_TIM_ConfigClockSource+0x260>
 80084a6:	f241 5162 	movw	r1, #5474	; 0x1562
 80084aa:	481e      	ldr	r0, [pc, #120]	; (8008524 <HAL_TIM_ConfigClockSource+0x2d4>)
 80084ac:	f7fa f941 	bl	8002732 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084b8:	d014      	beq.n	80084e4 <HAL_TIM_ConfigClockSource+0x294>
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d010      	beq.n	80084e4 <HAL_TIM_ConfigClockSource+0x294>
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00c      	beq.n	80084e4 <HAL_TIM_ConfigClockSource+0x294>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d008      	beq.n	80084e4 <HAL_TIM_ConfigClockSource+0x294>
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	2b0a      	cmp	r3, #10
 80084d8:	d004      	beq.n	80084e4 <HAL_TIM_ConfigClockSource+0x294>
 80084da:	f241 5163 	movw	r1, #5475	; 0x1563
 80084de:	4811      	ldr	r0, [pc, #68]	; (8008524 <HAL_TIM_ConfigClockSource+0x2d4>)
 80084e0:	f7fa f927 	bl	8002732 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	2b0f      	cmp	r3, #15
 80084ea:	d904      	bls.n	80084f6 <HAL_TIM_ConfigClockSource+0x2a6>
 80084ec:	f241 5164 	movw	r1, #5476	; 0x1564
 80084f0:	480c      	ldr	r0, [pc, #48]	; (8008524 <HAL_TIM_ConfigClockSource+0x2d4>)
 80084f2:	f7fa f91e 	bl	8002732 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6818      	ldr	r0, [r3, #0]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	6899      	ldr	r1, [r3, #8]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f000 fe29 	bl	800915c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008518:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	609a      	str	r2, [r3, #8]
      break;
 8008522:	e1cd      	b.n	80088c0 <HAL_TIM_ConfigClockSource+0x670>
 8008524:	08016280 	.word	0x08016280
 8008528:	fffeff88 	.word	0xfffeff88
 800852c:	40010000 	.word	0x40010000
 8008530:	40000400 	.word	0x40000400
 8008534:	40000800 	.word	0x40000800
 8008538:	40000c00 	.word	0x40000c00
 800853c:	40001000 	.word	0x40001000
 8008540:	40001400 	.word	0x40001400
 8008544:	40010400 	.word	0x40010400
 8008548:	40014000 	.word	0x40014000
 800854c:	40014400 	.word	0x40014400
 8008550:	40014800 	.word	0x40014800
 8008554:	40001800 	.word	0x40001800
 8008558:	40001c00 	.word	0x40001c00
 800855c:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a8d      	ldr	r2, [pc, #564]	; (800879c <HAL_TIM_ConfigClockSource+0x54c>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d01d      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x356>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008572:	d018      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x356>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a89      	ldr	r2, [pc, #548]	; (80087a0 <HAL_TIM_ConfigClockSource+0x550>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d013      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x356>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a88      	ldr	r2, [pc, #544]	; (80087a4 <HAL_TIM_ConfigClockSource+0x554>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d00e      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x356>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a86      	ldr	r2, [pc, #536]	; (80087a8 <HAL_TIM_ConfigClockSource+0x558>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d009      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x356>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a85      	ldr	r2, [pc, #532]	; (80087ac <HAL_TIM_ConfigClockSource+0x55c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d004      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x356>
 800859c:	f241 5177 	movw	r1, #5495	; 0x1577
 80085a0:	4883      	ldr	r0, [pc, #524]	; (80087b0 <HAL_TIM_ConfigClockSource+0x560>)
 80085a2:	f7fa f8c6 	bl	8002732 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d013      	beq.n	80085d6 <HAL_TIM_ConfigClockSource+0x386>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085b6:	d00e      	beq.n	80085d6 <HAL_TIM_ConfigClockSource+0x386>
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085c0:	d009      	beq.n	80085d6 <HAL_TIM_ConfigClockSource+0x386>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085ca:	d004      	beq.n	80085d6 <HAL_TIM_ConfigClockSource+0x386>
 80085cc:	f241 517a 	movw	r1, #5498	; 0x157a
 80085d0:	4877      	ldr	r0, [pc, #476]	; (80087b0 <HAL_TIM_ConfigClockSource+0x560>)
 80085d2:	f7fa f8ae 	bl	8002732 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085de:	d014      	beq.n	800860a <HAL_TIM_ConfigClockSource+0x3ba>
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d010      	beq.n	800860a <HAL_TIM_ConfigClockSource+0x3ba>
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00c      	beq.n	800860a <HAL_TIM_ConfigClockSource+0x3ba>
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d008      	beq.n	800860a <HAL_TIM_ConfigClockSource+0x3ba>
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	2b0a      	cmp	r3, #10
 80085fe:	d004      	beq.n	800860a <HAL_TIM_ConfigClockSource+0x3ba>
 8008600:	f241 517b 	movw	r1, #5499	; 0x157b
 8008604:	486a      	ldr	r0, [pc, #424]	; (80087b0 <HAL_TIM_ConfigClockSource+0x560>)
 8008606:	f7fa f894 	bl	8002732 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	2b0f      	cmp	r3, #15
 8008610:	d904      	bls.n	800861c <HAL_TIM_ConfigClockSource+0x3cc>
 8008612:	f241 517c 	movw	r1, #5500	; 0x157c
 8008616:	4866      	ldr	r0, [pc, #408]	; (80087b0 <HAL_TIM_ConfigClockSource+0x560>)
 8008618:	f7fa f88b 	bl	8002732 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6818      	ldr	r0, [r3, #0]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	6899      	ldr	r1, [r3, #8]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f000 fd96 	bl	800915c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689a      	ldr	r2, [r3, #8]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800863e:	609a      	str	r2, [r3, #8]
      break;
 8008640:	e13e      	b.n	80088c0 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a55      	ldr	r2, [pc, #340]	; (800879c <HAL_TIM_ConfigClockSource+0x54c>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d01d      	beq.n	8008688 <HAL_TIM_ConfigClockSource+0x438>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008654:	d018      	beq.n	8008688 <HAL_TIM_ConfigClockSource+0x438>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a51      	ldr	r2, [pc, #324]	; (80087a0 <HAL_TIM_ConfigClockSource+0x550>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d013      	beq.n	8008688 <HAL_TIM_ConfigClockSource+0x438>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a4f      	ldr	r2, [pc, #316]	; (80087a4 <HAL_TIM_ConfigClockSource+0x554>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d00e      	beq.n	8008688 <HAL_TIM_ConfigClockSource+0x438>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a4e      	ldr	r2, [pc, #312]	; (80087a8 <HAL_TIM_ConfigClockSource+0x558>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d009      	beq.n	8008688 <HAL_TIM_ConfigClockSource+0x438>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a4c      	ldr	r2, [pc, #304]	; (80087ac <HAL_TIM_ConfigClockSource+0x55c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d004      	beq.n	8008688 <HAL_TIM_ConfigClockSource+0x438>
 800867e:	f241 518b 	movw	r1, #5515	; 0x158b
 8008682:	484b      	ldr	r0, [pc, #300]	; (80087b0 <HAL_TIM_ConfigClockSource+0x560>)
 8008684:	f7fa f855 	bl	8002732 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008690:	d014      	beq.n	80086bc <HAL_TIM_ConfigClockSource+0x46c>
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d010      	beq.n	80086bc <HAL_TIM_ConfigClockSource+0x46c>
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00c      	beq.n	80086bc <HAL_TIM_ConfigClockSource+0x46c>
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d008      	beq.n	80086bc <HAL_TIM_ConfigClockSource+0x46c>
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	2b0a      	cmp	r3, #10
 80086b0:	d004      	beq.n	80086bc <HAL_TIM_ConfigClockSource+0x46c>
 80086b2:	f241 518e 	movw	r1, #5518	; 0x158e
 80086b6:	483e      	ldr	r0, [pc, #248]	; (80087b0 <HAL_TIM_ConfigClockSource+0x560>)
 80086b8:	f7fa f83b 	bl	8002732 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	2b0f      	cmp	r3, #15
 80086c2:	d904      	bls.n	80086ce <HAL_TIM_ConfigClockSource+0x47e>
 80086c4:	f241 518f 	movw	r1, #5519	; 0x158f
 80086c8:	4839      	ldr	r0, [pc, #228]	; (80087b0 <HAL_TIM_ConfigClockSource+0x560>)
 80086ca:	f7fa f832 	bl	8002732 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6818      	ldr	r0, [r3, #0]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	6859      	ldr	r1, [r3, #4]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	461a      	mov	r2, r3
 80086dc:	f000 fcc4 	bl	8009068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2150      	movs	r1, #80	; 0x50
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 fd1d 	bl	8009126 <TIM_ITRx_SetConfig>
      break;
 80086ec:	e0e8      	b.n	80088c0 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a2a      	ldr	r2, [pc, #168]	; (800879c <HAL_TIM_ConfigClockSource+0x54c>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d01d      	beq.n	8008734 <HAL_TIM_ConfigClockSource+0x4e4>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008700:	d018      	beq.n	8008734 <HAL_TIM_ConfigClockSource+0x4e4>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a26      	ldr	r2, [pc, #152]	; (80087a0 <HAL_TIM_ConfigClockSource+0x550>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d013      	beq.n	8008734 <HAL_TIM_ConfigClockSource+0x4e4>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a24      	ldr	r2, [pc, #144]	; (80087a4 <HAL_TIM_ConfigClockSource+0x554>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d00e      	beq.n	8008734 <HAL_TIM_ConfigClockSource+0x4e4>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a23      	ldr	r2, [pc, #140]	; (80087a8 <HAL_TIM_ConfigClockSource+0x558>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d009      	beq.n	8008734 <HAL_TIM_ConfigClockSource+0x4e4>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a21      	ldr	r2, [pc, #132]	; (80087ac <HAL_TIM_ConfigClockSource+0x55c>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d004      	beq.n	8008734 <HAL_TIM_ConfigClockSource+0x4e4>
 800872a:	f241 519b 	movw	r1, #5531	; 0x159b
 800872e:	4820      	ldr	r0, [pc, #128]	; (80087b0 <HAL_TIM_ConfigClockSource+0x560>)
 8008730:	f7f9 ffff 	bl	8002732 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800873c:	d014      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x518>
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d010      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x518>
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00c      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x518>
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	2b02      	cmp	r3, #2
 8008754:	d008      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x518>
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	2b0a      	cmp	r3, #10
 800875c:	d004      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x518>
 800875e:	f241 519e 	movw	r1, #5534	; 0x159e
 8008762:	4813      	ldr	r0, [pc, #76]	; (80087b0 <HAL_TIM_ConfigClockSource+0x560>)
 8008764:	f7f9 ffe5 	bl	8002732 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	2b0f      	cmp	r3, #15
 800876e:	d904      	bls.n	800877a <HAL_TIM_ConfigClockSource+0x52a>
 8008770:	f241 519f 	movw	r1, #5535	; 0x159f
 8008774:	480e      	ldr	r0, [pc, #56]	; (80087b0 <HAL_TIM_ConfigClockSource+0x560>)
 8008776:	f7f9 ffdc 	bl	8002732 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6818      	ldr	r0, [r3, #0]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	6859      	ldr	r1, [r3, #4]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	461a      	mov	r2, r3
 8008788:	f000 fc9d 	bl	80090c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2160      	movs	r1, #96	; 0x60
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fcc7 	bl	8009126 <TIM_ITRx_SetConfig>
      break;
 8008798:	e092      	b.n	80088c0 <HAL_TIM_ConfigClockSource+0x670>
 800879a:	bf00      	nop
 800879c:	40010000 	.word	0x40010000
 80087a0:	40000400 	.word	0x40000400
 80087a4:	40000800 	.word	0x40000800
 80087a8:	40000c00 	.word	0x40000c00
 80087ac:	40010400 	.word	0x40010400
 80087b0:	08016280 	.word	0x08016280
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a48      	ldr	r2, [pc, #288]	; (80088dc <HAL_TIM_ConfigClockSource+0x68c>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d01d      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x5aa>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c6:	d018      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x5aa>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a44      	ldr	r2, [pc, #272]	; (80088e0 <HAL_TIM_ConfigClockSource+0x690>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d013      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x5aa>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a43      	ldr	r2, [pc, #268]	; (80088e4 <HAL_TIM_ConfigClockSource+0x694>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d00e      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x5aa>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a41      	ldr	r2, [pc, #260]	; (80088e8 <HAL_TIM_ConfigClockSource+0x698>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d009      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x5aa>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a40      	ldr	r2, [pc, #256]	; (80088ec <HAL_TIM_ConfigClockSource+0x69c>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d004      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x5aa>
 80087f0:	f241 51ab 	movw	r1, #5547	; 0x15ab
 80087f4:	483e      	ldr	r0, [pc, #248]	; (80088f0 <HAL_TIM_ConfigClockSource+0x6a0>)
 80087f6:	f7f9 ff9c 	bl	8002732 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008802:	d014      	beq.n	800882e <HAL_TIM_ConfigClockSource+0x5de>
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d010      	beq.n	800882e <HAL_TIM_ConfigClockSource+0x5de>
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00c      	beq.n	800882e <HAL_TIM_ConfigClockSource+0x5de>
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	2b02      	cmp	r3, #2
 800881a:	d008      	beq.n	800882e <HAL_TIM_ConfigClockSource+0x5de>
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	2b0a      	cmp	r3, #10
 8008822:	d004      	beq.n	800882e <HAL_TIM_ConfigClockSource+0x5de>
 8008824:	f241 51ae 	movw	r1, #5550	; 0x15ae
 8008828:	4831      	ldr	r0, [pc, #196]	; (80088f0 <HAL_TIM_ConfigClockSource+0x6a0>)
 800882a:	f7f9 ff82 	bl	8002732 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	2b0f      	cmp	r3, #15
 8008834:	d904      	bls.n	8008840 <HAL_TIM_ConfigClockSource+0x5f0>
 8008836:	f241 51af 	movw	r1, #5551	; 0x15af
 800883a:	482d      	ldr	r0, [pc, #180]	; (80088f0 <HAL_TIM_ConfigClockSource+0x6a0>)
 800883c:	f7f9 ff79 	bl	8002732 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6818      	ldr	r0, [r3, #0]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	6859      	ldr	r1, [r3, #4]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	461a      	mov	r2, r3
 800884e:	f000 fc0b 	bl	8009068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2140      	movs	r1, #64	; 0x40
 8008858:	4618      	mov	r0, r3
 800885a:	f000 fc64 	bl	8009126 <TIM_ITRx_SetConfig>
      break;
 800885e:	e02f      	b.n	80088c0 <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a1d      	ldr	r2, [pc, #116]	; (80088dc <HAL_TIM_ConfigClockSource+0x68c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d01d      	beq.n	80088a6 <HAL_TIM_ConfigClockSource+0x656>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008872:	d018      	beq.n	80088a6 <HAL_TIM_ConfigClockSource+0x656>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a19      	ldr	r2, [pc, #100]	; (80088e0 <HAL_TIM_ConfigClockSource+0x690>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d013      	beq.n	80088a6 <HAL_TIM_ConfigClockSource+0x656>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a18      	ldr	r2, [pc, #96]	; (80088e4 <HAL_TIM_ConfigClockSource+0x694>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d00e      	beq.n	80088a6 <HAL_TIM_ConfigClockSource+0x656>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a16      	ldr	r2, [pc, #88]	; (80088e8 <HAL_TIM_ConfigClockSource+0x698>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d009      	beq.n	80088a6 <HAL_TIM_ConfigClockSource+0x656>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a15      	ldr	r2, [pc, #84]	; (80088ec <HAL_TIM_ConfigClockSource+0x69c>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d004      	beq.n	80088a6 <HAL_TIM_ConfigClockSource+0x656>
 800889c:	f241 51be 	movw	r1, #5566	; 0x15be
 80088a0:	4813      	ldr	r0, [pc, #76]	; (80088f0 <HAL_TIM_ConfigClockSource+0x6a0>)
 80088a2:	f7f9 ff46 	bl	8002732 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4619      	mov	r1, r3
 80088b0:	4610      	mov	r0, r2
 80088b2:	f000 fc38 	bl	8009126 <TIM_ITRx_SetConfig>
      break;
 80088b6:	e003      	b.n	80088c0 <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	73fb      	strb	r3, [r7, #15]
      break;
 80088bc:	e000      	b.n	80088c0 <HAL_TIM_ConfigClockSource+0x670>
      break;
 80088be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	40010000 	.word	0x40010000
 80088e0:	40000400 	.word	0x40000400
 80088e4:	40000800 	.word	0x40000800
 80088e8:	40000c00 	.word	0x40000c00
 80088ec:	40010400 	.word	0x40010400
 80088f0:	08016280 	.word	0x08016280

080088f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a40      	ldr	r2, [pc, #256]	; (8008a6c <TIM_Base_SetConfig+0x114>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d013      	beq.n	8008998 <TIM_Base_SetConfig+0x40>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008976:	d00f      	beq.n	8008998 <TIM_Base_SetConfig+0x40>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a3d      	ldr	r2, [pc, #244]	; (8008a70 <TIM_Base_SetConfig+0x118>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d00b      	beq.n	8008998 <TIM_Base_SetConfig+0x40>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a3c      	ldr	r2, [pc, #240]	; (8008a74 <TIM_Base_SetConfig+0x11c>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d007      	beq.n	8008998 <TIM_Base_SetConfig+0x40>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a3b      	ldr	r2, [pc, #236]	; (8008a78 <TIM_Base_SetConfig+0x120>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d003      	beq.n	8008998 <TIM_Base_SetConfig+0x40>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a3a      	ldr	r2, [pc, #232]	; (8008a7c <TIM_Base_SetConfig+0x124>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d108      	bne.n	80089aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800899e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a2f      	ldr	r2, [pc, #188]	; (8008a6c <TIM_Base_SetConfig+0x114>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d02b      	beq.n	8008a0a <TIM_Base_SetConfig+0xb2>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089b8:	d027      	beq.n	8008a0a <TIM_Base_SetConfig+0xb2>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a2c      	ldr	r2, [pc, #176]	; (8008a70 <TIM_Base_SetConfig+0x118>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d023      	beq.n	8008a0a <TIM_Base_SetConfig+0xb2>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a2b      	ldr	r2, [pc, #172]	; (8008a74 <TIM_Base_SetConfig+0x11c>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d01f      	beq.n	8008a0a <TIM_Base_SetConfig+0xb2>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a2a      	ldr	r2, [pc, #168]	; (8008a78 <TIM_Base_SetConfig+0x120>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d01b      	beq.n	8008a0a <TIM_Base_SetConfig+0xb2>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a29      	ldr	r2, [pc, #164]	; (8008a7c <TIM_Base_SetConfig+0x124>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d017      	beq.n	8008a0a <TIM_Base_SetConfig+0xb2>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a28      	ldr	r2, [pc, #160]	; (8008a80 <TIM_Base_SetConfig+0x128>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d013      	beq.n	8008a0a <TIM_Base_SetConfig+0xb2>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a27      	ldr	r2, [pc, #156]	; (8008a84 <TIM_Base_SetConfig+0x12c>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d00f      	beq.n	8008a0a <TIM_Base_SetConfig+0xb2>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a26      	ldr	r2, [pc, #152]	; (8008a88 <TIM_Base_SetConfig+0x130>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d00b      	beq.n	8008a0a <TIM_Base_SetConfig+0xb2>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a25      	ldr	r2, [pc, #148]	; (8008a8c <TIM_Base_SetConfig+0x134>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d007      	beq.n	8008a0a <TIM_Base_SetConfig+0xb2>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a24      	ldr	r2, [pc, #144]	; (8008a90 <TIM_Base_SetConfig+0x138>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d003      	beq.n	8008a0a <TIM_Base_SetConfig+0xb2>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a23      	ldr	r2, [pc, #140]	; (8008a94 <TIM_Base_SetConfig+0x13c>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d108      	bne.n	8008a1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	689a      	ldr	r2, [r3, #8]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a0a      	ldr	r2, [pc, #40]	; (8008a6c <TIM_Base_SetConfig+0x114>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d003      	beq.n	8008a50 <TIM_Base_SetConfig+0xf8>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a0c      	ldr	r2, [pc, #48]	; (8008a7c <TIM_Base_SetConfig+0x124>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d103      	bne.n	8008a58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	691a      	ldr	r2, [r3, #16]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	615a      	str	r2, [r3, #20]
}
 8008a5e:	bf00      	nop
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	40010000 	.word	0x40010000
 8008a70:	40000400 	.word	0x40000400
 8008a74:	40000800 	.word	0x40000800
 8008a78:	40000c00 	.word	0x40000c00
 8008a7c:	40010400 	.word	0x40010400
 8008a80:	40014000 	.word	0x40014000
 8008a84:	40014400 	.word	0x40014400
 8008a88:	40014800 	.word	0x40014800
 8008a8c:	40001800 	.word	0x40001800
 8008a90:	40001c00 	.word	0x40001c00
 8008a94:	40002000 	.word	0x40002000

08008a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	f023 0201 	bic.w	r2, r3, #1
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	4b3f      	ldr	r3, [pc, #252]	; (8008bc0 <TIM_OC1_SetConfig+0x128>)
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 0303 	bic.w	r3, r3, #3
 8008ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f023 0302 	bic.w	r3, r3, #2
 8008ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a35      	ldr	r2, [pc, #212]	; (8008bc4 <TIM_OC1_SetConfig+0x12c>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d003      	beq.n	8008afc <TIM_OC1_SetConfig+0x64>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a34      	ldr	r2, [pc, #208]	; (8008bc8 <TIM_OC1_SetConfig+0x130>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d119      	bne.n	8008b30 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d008      	beq.n	8008b16 <TIM_OC1_SetConfig+0x7e>
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	2b08      	cmp	r3, #8
 8008b0a:	d004      	beq.n	8008b16 <TIM_OC1_SetConfig+0x7e>
 8008b0c:	f641 3167 	movw	r1, #7015	; 0x1b67
 8008b10:	482e      	ldr	r0, [pc, #184]	; (8008bcc <TIM_OC1_SetConfig+0x134>)
 8008b12:	f7f9 fe0e 	bl	8002732 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f023 0308 	bic.w	r3, r3, #8
 8008b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	f023 0304 	bic.w	r3, r3, #4
 8008b2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a24      	ldr	r2, [pc, #144]	; (8008bc4 <TIM_OC1_SetConfig+0x12c>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d003      	beq.n	8008b40 <TIM_OC1_SetConfig+0xa8>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a23      	ldr	r2, [pc, #140]	; (8008bc8 <TIM_OC1_SetConfig+0x130>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d12d      	bne.n	8008b9c <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b48:	d008      	beq.n	8008b5c <TIM_OC1_SetConfig+0xc4>
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d004      	beq.n	8008b5c <TIM_OC1_SetConfig+0xc4>
 8008b52:	f641 3174 	movw	r1, #7028	; 0x1b74
 8008b56:	481d      	ldr	r0, [pc, #116]	; (8008bcc <TIM_OC1_SetConfig+0x134>)
 8008b58:	f7f9 fdeb 	bl	8002732 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	695b      	ldr	r3, [r3, #20]
 8008b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b64:	d008      	beq.n	8008b78 <TIM_OC1_SetConfig+0xe0>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d004      	beq.n	8008b78 <TIM_OC1_SetConfig+0xe0>
 8008b6e:	f641 3175 	movw	r1, #7029	; 0x1b75
 8008b72:	4816      	ldr	r0, [pc, #88]	; (8008bcc <TIM_OC1_SetConfig+0x134>)
 8008b74:	f7f9 fddd 	bl	8002732 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	697a      	ldr	r2, [r7, #20]
 8008bb4:	621a      	str	r2, [r3, #32]
}
 8008bb6:	bf00      	nop
 8008bb8:	3718      	adds	r7, #24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	fffeff8f 	.word	0xfffeff8f
 8008bc4:	40010000 	.word	0x40010000
 8008bc8:	40010400 	.word	0x40010400
 8008bcc:	08016280 	.word	0x08016280

08008bd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	f023 0210 	bic.w	r2, r3, #16
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	4b41      	ldr	r3, [pc, #260]	; (8008d00 <TIM_OC2_SetConfig+0x130>)
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	021b      	lsls	r3, r3, #8
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f023 0320 	bic.w	r3, r3, #32
 8008c1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	011b      	lsls	r3, r3, #4
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a36      	ldr	r2, [pc, #216]	; (8008d04 <TIM_OC2_SetConfig+0x134>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d003      	beq.n	8008c38 <TIM_OC2_SetConfig+0x68>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a35      	ldr	r2, [pc, #212]	; (8008d08 <TIM_OC2_SetConfig+0x138>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d11a      	bne.n	8008c6e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d008      	beq.n	8008c52 <TIM_OC2_SetConfig+0x82>
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	2b08      	cmp	r3, #8
 8008c46:	d004      	beq.n	8008c52 <TIM_OC2_SetConfig+0x82>
 8008c48:	f641 31b2 	movw	r1, #7090	; 0x1bb2
 8008c4c:	482f      	ldr	r0, [pc, #188]	; (8008d0c <TIM_OC2_SetConfig+0x13c>)
 8008c4e:	f7f9 fd70 	bl	8002732 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	011b      	lsls	r3, r3, #4
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c6c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a24      	ldr	r2, [pc, #144]	; (8008d04 <TIM_OC2_SetConfig+0x134>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d003      	beq.n	8008c7e <TIM_OC2_SetConfig+0xae>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a23      	ldr	r2, [pc, #140]	; (8008d08 <TIM_OC2_SetConfig+0x138>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d12f      	bne.n	8008cde <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c86:	d008      	beq.n	8008c9a <TIM_OC2_SetConfig+0xca>
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d004      	beq.n	8008c9a <TIM_OC2_SetConfig+0xca>
 8008c90:	f44f 51de 	mov.w	r1, #7104	; 0x1bc0
 8008c94:	481d      	ldr	r0, [pc, #116]	; (8008d0c <TIM_OC2_SetConfig+0x13c>)
 8008c96:	f7f9 fd4c 	bl	8002732 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ca2:	d008      	beq.n	8008cb6 <TIM_OC2_SetConfig+0xe6>
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d004      	beq.n	8008cb6 <TIM_OC2_SetConfig+0xe6>
 8008cac:	f641 31c1 	movw	r1, #7105	; 0x1bc1
 8008cb0:	4816      	ldr	r0, [pc, #88]	; (8008d0c <TIM_OC2_SetConfig+0x13c>)
 8008cb2:	f7f9 fd3e 	bl	8002732 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	693a      	ldr	r2, [r7, #16]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	621a      	str	r2, [r3, #32]
}
 8008cf8:	bf00      	nop
 8008cfa:	3718      	adds	r7, #24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	feff8fff 	.word	0xfeff8fff
 8008d04:	40010000 	.word	0x40010000
 8008d08:	40010400 	.word	0x40010400
 8008d0c:	08016280 	.word	0x08016280

08008d10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	69db      	ldr	r3, [r3, #28]
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	4b41      	ldr	r3, [pc, #260]	; (8008e40 <TIM_OC3_SetConfig+0x130>)
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f023 0303 	bic.w	r3, r3, #3
 8008d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	021b      	lsls	r3, r3, #8
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a36      	ldr	r2, [pc, #216]	; (8008e44 <TIM_OC3_SetConfig+0x134>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d003      	beq.n	8008d76 <TIM_OC3_SetConfig+0x66>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a35      	ldr	r2, [pc, #212]	; (8008e48 <TIM_OC3_SetConfig+0x138>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d11a      	bne.n	8008dac <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d008      	beq.n	8008d90 <TIM_OC3_SetConfig+0x80>
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	2b08      	cmp	r3, #8
 8008d84:	d004      	beq.n	8008d90 <TIM_OC3_SetConfig+0x80>
 8008d86:	f641 31fd 	movw	r1, #7165	; 0x1bfd
 8008d8a:	4830      	ldr	r0, [pc, #192]	; (8008e4c <TIM_OC3_SetConfig+0x13c>)
 8008d8c:	f7f9 fcd1 	bl	8002732 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	021b      	lsls	r3, r3, #8
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008daa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a25      	ldr	r2, [pc, #148]	; (8008e44 <TIM_OC3_SetConfig+0x134>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d003      	beq.n	8008dbc <TIM_OC3_SetConfig+0xac>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a24      	ldr	r2, [pc, #144]	; (8008e48 <TIM_OC3_SetConfig+0x138>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d12f      	bne.n	8008e1c <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dc4:	d008      	beq.n	8008dd8 <TIM_OC3_SetConfig+0xc8>
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d004      	beq.n	8008dd8 <TIM_OC3_SetConfig+0xc8>
 8008dce:	f641 410a 	movw	r1, #7178	; 0x1c0a
 8008dd2:	481e      	ldr	r0, [pc, #120]	; (8008e4c <TIM_OC3_SetConfig+0x13c>)
 8008dd4:	f7f9 fcad 	bl	8002732 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	695b      	ldr	r3, [r3, #20]
 8008ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008de0:	d008      	beq.n	8008df4 <TIM_OC3_SetConfig+0xe4>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	695b      	ldr	r3, [r3, #20]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d004      	beq.n	8008df4 <TIM_OC3_SetConfig+0xe4>
 8008dea:	f641 410b 	movw	r1, #7179	; 0x1c0b
 8008dee:	4817      	ldr	r0, [pc, #92]	; (8008e4c <TIM_OC3_SetConfig+0x13c>)
 8008df0:	f7f9 fc9f 	bl	8002732 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	011b      	lsls	r3, r3, #4
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	011b      	lsls	r3, r3, #4
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	621a      	str	r2, [r3, #32]
}
 8008e36:	bf00      	nop
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	fffeff8f 	.word	0xfffeff8f
 8008e44:	40010000 	.word	0x40010000
 8008e48:	40010400 	.word	0x40010400
 8008e4c:	08016280 	.word	0x08016280

08008e50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a1b      	ldr	r3, [r3, #32]
 8008e6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	4b24      	ldr	r3, [pc, #144]	; (8008f0c <TIM_OC4_SetConfig+0xbc>)
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	021b      	lsls	r3, r3, #8
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	031b      	lsls	r3, r3, #12
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a19      	ldr	r2, [pc, #100]	; (8008f10 <TIM_OC4_SetConfig+0xc0>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d003      	beq.n	8008eb8 <TIM_OC4_SetConfig+0x68>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a18      	ldr	r2, [pc, #96]	; (8008f14 <TIM_OC4_SetConfig+0xc4>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d117      	bne.n	8008ee8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	695b      	ldr	r3, [r3, #20]
 8008ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ec0:	d008      	beq.n	8008ed4 <TIM_OC4_SetConfig+0x84>
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d004      	beq.n	8008ed4 <TIM_OC4_SetConfig+0x84>
 8008eca:	f641 4149 	movw	r1, #7241	; 0x1c49
 8008ece:	4812      	ldr	r0, [pc, #72]	; (8008f18 <TIM_OC4_SetConfig+0xc8>)
 8008ed0:	f7f9 fc2f 	bl	8002732 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	019b      	lsls	r3, r3, #6
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	685a      	ldr	r2, [r3, #4]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	621a      	str	r2, [r3, #32]
}
 8008f02:	bf00      	nop
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	feff8fff 	.word	0xfeff8fff
 8008f10:	40010000 	.word	0x40010000
 8008f14:	40010400 	.word	0x40010400
 8008f18:	08016280 	.word	0x08016280

08008f1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b087      	sub	sp, #28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	4b1b      	ldr	r3, [pc, #108]	; (8008fb4 <TIM_OC5_SetConfig+0x98>)
 8008f48:	4013      	ands	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008f5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	041b      	lsls	r3, r3, #16
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a12      	ldr	r2, [pc, #72]	; (8008fb8 <TIM_OC5_SetConfig+0x9c>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d003      	beq.n	8008f7a <TIM_OC5_SetConfig+0x5e>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a11      	ldr	r2, [pc, #68]	; (8008fbc <TIM_OC5_SetConfig+0xa0>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d109      	bne.n	8008f8e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	021b      	lsls	r3, r3, #8
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	621a      	str	r2, [r3, #32]
}
 8008fa8:	bf00      	nop
 8008faa:	371c      	adds	r7, #28
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	fffeff8f 	.word	0xfffeff8f
 8008fb8:	40010000 	.word	0x40010000
 8008fbc:	40010400 	.word	0x40010400

08008fc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a1b      	ldr	r3, [r3, #32]
 8008fce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	4b1c      	ldr	r3, [pc, #112]	; (800905c <TIM_OC6_SetConfig+0x9c>)
 8008fec:	4013      	ands	r3, r2
 8008fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	021b      	lsls	r3, r3, #8
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	051b      	lsls	r3, r3, #20
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	4313      	orrs	r3, r2
 800900e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a13      	ldr	r2, [pc, #76]	; (8009060 <TIM_OC6_SetConfig+0xa0>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d003      	beq.n	8009020 <TIM_OC6_SetConfig+0x60>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a12      	ldr	r2, [pc, #72]	; (8009064 <TIM_OC6_SetConfig+0xa4>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d109      	bne.n	8009034 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009026:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	695b      	ldr	r3, [r3, #20]
 800902c:	029b      	lsls	r3, r3, #10
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	4313      	orrs	r3, r2
 8009032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	621a      	str	r2, [r3, #32]
}
 800904e:	bf00      	nop
 8009050:	371c      	adds	r7, #28
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	feff8fff 	.word	0xfeff8fff
 8009060:	40010000 	.word	0x40010000
 8009064:	40010400 	.word	0x40010400

08009068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009068:	b480      	push	{r7}
 800906a:	b087      	sub	sp, #28
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6a1b      	ldr	r3, [r3, #32]
 8009078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	f023 0201 	bic.w	r2, r3, #1
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	011b      	lsls	r3, r3, #4
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	4313      	orrs	r3, r2
 800909c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f023 030a 	bic.w	r3, r3, #10
 80090a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	621a      	str	r2, [r3, #32]
}
 80090ba:	bf00      	nop
 80090bc:	371c      	adds	r7, #28
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b087      	sub	sp, #28
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	60f8      	str	r0, [r7, #12]
 80090ce:	60b9      	str	r1, [r7, #8]
 80090d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	f023 0210 	bic.w	r2, r3, #16
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	031b      	lsls	r3, r3, #12
 80090f6:	697a      	ldr	r2, [r7, #20]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009102:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	011b      	lsls	r3, r3, #4
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	4313      	orrs	r3, r2
 800910c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	621a      	str	r2, [r3, #32]
}
 800911a:	bf00      	nop
 800911c:	371c      	adds	r7, #28
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009126:	b480      	push	{r7}
 8009128:	b085      	sub	sp, #20
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800913c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	4313      	orrs	r3, r2
 8009144:	f043 0307 	orr.w	r3, r3, #7
 8009148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	609a      	str	r2, [r3, #8]
}
 8009150:	bf00      	nop
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800915c:	b480      	push	{r7}
 800915e:	b087      	sub	sp, #28
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
 8009168:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009176:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	021a      	lsls	r2, r3, #8
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	431a      	orrs	r2, r3
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	4313      	orrs	r3, r2
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	4313      	orrs	r3, r2
 8009188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	609a      	str	r2, [r3, #8]
}
 8009190:	bf00      	nop
 8009192:	371c      	adds	r7, #28
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b086      	sub	sp, #24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4a35      	ldr	r2, [pc, #212]	; (8009280 <TIM_CCxChannelCmd+0xe4>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d030      	beq.n	8009212 <TIM_CCxChannelCmd+0x76>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091b6:	d02c      	beq.n	8009212 <TIM_CCxChannelCmd+0x76>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	4a32      	ldr	r2, [pc, #200]	; (8009284 <TIM_CCxChannelCmd+0xe8>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d028      	beq.n	8009212 <TIM_CCxChannelCmd+0x76>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	4a31      	ldr	r2, [pc, #196]	; (8009288 <TIM_CCxChannelCmd+0xec>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d024      	beq.n	8009212 <TIM_CCxChannelCmd+0x76>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	4a30      	ldr	r2, [pc, #192]	; (800928c <TIM_CCxChannelCmd+0xf0>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d020      	beq.n	8009212 <TIM_CCxChannelCmd+0x76>
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	4a2f      	ldr	r2, [pc, #188]	; (8009290 <TIM_CCxChannelCmd+0xf4>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d01c      	beq.n	8009212 <TIM_CCxChannelCmd+0x76>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4a2e      	ldr	r2, [pc, #184]	; (8009294 <TIM_CCxChannelCmd+0xf8>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d018      	beq.n	8009212 <TIM_CCxChannelCmd+0x76>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	4a2d      	ldr	r2, [pc, #180]	; (8009298 <TIM_CCxChannelCmd+0xfc>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d014      	beq.n	8009212 <TIM_CCxChannelCmd+0x76>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	4a2c      	ldr	r2, [pc, #176]	; (800929c <TIM_CCxChannelCmd+0x100>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d010      	beq.n	8009212 <TIM_CCxChannelCmd+0x76>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4a2b      	ldr	r2, [pc, #172]	; (80092a0 <TIM_CCxChannelCmd+0x104>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d00c      	beq.n	8009212 <TIM_CCxChannelCmd+0x76>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4a2a      	ldr	r2, [pc, #168]	; (80092a4 <TIM_CCxChannelCmd+0x108>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d008      	beq.n	8009212 <TIM_CCxChannelCmd+0x76>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4a29      	ldr	r2, [pc, #164]	; (80092a8 <TIM_CCxChannelCmd+0x10c>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d004      	beq.n	8009212 <TIM_CCxChannelCmd+0x76>
 8009208:	f641 61a1 	movw	r1, #7841	; 0x1ea1
 800920c:	4827      	ldr	r0, [pc, #156]	; (80092ac <TIM_CCxChannelCmd+0x110>)
 800920e:	f7f9 fa90 	bl	8002732 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d016      	beq.n	8009246 <TIM_CCxChannelCmd+0xaa>
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	2b04      	cmp	r3, #4
 800921c:	d013      	beq.n	8009246 <TIM_CCxChannelCmd+0xaa>
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2b08      	cmp	r3, #8
 8009222:	d010      	beq.n	8009246 <TIM_CCxChannelCmd+0xaa>
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	2b0c      	cmp	r3, #12
 8009228:	d00d      	beq.n	8009246 <TIM_CCxChannelCmd+0xaa>
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b10      	cmp	r3, #16
 800922e:	d00a      	beq.n	8009246 <TIM_CCxChannelCmd+0xaa>
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2b14      	cmp	r3, #20
 8009234:	d007      	beq.n	8009246 <TIM_CCxChannelCmd+0xaa>
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2b3c      	cmp	r3, #60	; 0x3c
 800923a:	d004      	beq.n	8009246 <TIM_CCxChannelCmd+0xaa>
 800923c:	f641 61a2 	movw	r1, #7842	; 0x1ea2
 8009240:	481a      	ldr	r0, [pc, #104]	; (80092ac <TIM_CCxChannelCmd+0x110>)
 8009242:	f7f9 fa76 	bl	8002732 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	f003 031f 	and.w	r3, r3, #31
 800924c:	2201      	movs	r2, #1
 800924e:	fa02 f303 	lsl.w	r3, r2, r3
 8009252:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6a1a      	ldr	r2, [r3, #32]
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	43db      	mvns	r3, r3
 800925c:	401a      	ands	r2, r3
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6a1a      	ldr	r2, [r3, #32]
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	f003 031f 	and.w	r3, r3, #31
 800926c:	6879      	ldr	r1, [r7, #4]
 800926e:	fa01 f303 	lsl.w	r3, r1, r3
 8009272:	431a      	orrs	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	621a      	str	r2, [r3, #32]
}
 8009278:	bf00      	nop
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	40010000 	.word	0x40010000
 8009284:	40000400 	.word	0x40000400
 8009288:	40000800 	.word	0x40000800
 800928c:	40000c00 	.word	0x40000c00
 8009290:	40010400 	.word	0x40010400
 8009294:	40014000 	.word	0x40014000
 8009298:	40014400 	.word	0x40014400
 800929c:	40014800 	.word	0x40014800
 80092a0:	40001800 	.word	0x40001800
 80092a4:	40001c00 	.word	0x40001c00
 80092a8:	40002000 	.word	0x40002000
 80092ac:	08016280 	.word	0x08016280

080092b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a32      	ldr	r2, [pc, #200]	; (8009388 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d027      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092cc:	d022      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a2e      	ldr	r2, [pc, #184]	; (800938c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d01d      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a2c      	ldr	r2, [pc, #176]	; (8009390 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d018      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a2b      	ldr	r2, [pc, #172]	; (8009394 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d013      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a29      	ldr	r2, [pc, #164]	; (8009398 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d00e      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a28      	ldr	r2, [pc, #160]	; (800939c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d009      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a26      	ldr	r2, [pc, #152]	; (80093a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d004      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800930a:	f240 71b6 	movw	r1, #1974	; 0x7b6
 800930e:	4825      	ldr	r0, [pc, #148]	; (80093a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009310:	f7f9 fa0f 	bl	8002732 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d020      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b10      	cmp	r3, #16
 8009322:	d01c      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b20      	cmp	r3, #32
 800932a:	d018      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b30      	cmp	r3, #48	; 0x30
 8009332:	d014      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b40      	cmp	r3, #64	; 0x40
 800933a:	d010      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b50      	cmp	r3, #80	; 0x50
 8009342:	d00c      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b60      	cmp	r3, #96	; 0x60
 800934a:	d008      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b70      	cmp	r3, #112	; 0x70
 8009352:	d004      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009354:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8009358:	4812      	ldr	r0, [pc, #72]	; (80093a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800935a:	f7f9 f9ea 	bl	8002732 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	2b80      	cmp	r3, #128	; 0x80
 8009364:	d008      	beq.n	8009378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d004      	beq.n	8009378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800936e:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8009372:	480c      	ldr	r0, [pc, #48]	; (80093a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009374:	f7f9 f9dd 	bl	8002732 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800937e:	2b01      	cmp	r3, #1
 8009380:	d112      	bne.n	80093a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8009382:	2302      	movs	r3, #2
 8009384:	e0d7      	b.n	8009536 <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8009386:	bf00      	nop
 8009388:	40010000 	.word	0x40010000
 800938c:	40000400 	.word	0x40000400
 8009390:	40000800 	.word	0x40000800
 8009394:	40000c00 	.word	0x40000c00
 8009398:	40001000 	.word	0x40001000
 800939c:	40001400 	.word	0x40001400
 80093a0:	40010400 	.word	0x40010400
 80093a4:	080162b8 	.word	0x080162b8
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2202      	movs	r2, #2
 80093b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a5c      	ldr	r2, [pc, #368]	; (8009540 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d004      	beq.n	80093dc <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a5b      	ldr	r2, [pc, #364]	; (8009544 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d161      	bne.n	80094a0 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d054      	beq.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093ec:	d04f      	beq.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093f6:	d04a      	beq.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009400:	d045      	beq.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800940a:	d040      	beq.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009414:	d03b      	beq.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800941e:	d036      	beq.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009428:	d031      	beq.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8009432:	d02c      	beq.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800943c:	d027      	beq.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8009446:	d022      	beq.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009450:	d01d      	beq.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 800945a:	d018      	beq.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009464:	d013      	beq.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 800946e:	d00e      	beq.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8009478:	d009      	beq.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8009482:	d004      	beq.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009484:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8009488:	482f      	ldr	r0, [pc, #188]	; (8009548 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800948a:	f7f9 f952 	bl	8002732 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009494:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	4313      	orrs	r3, r2
 800949e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a20      	ldr	r2, [pc, #128]	; (8009540 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d022      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094cc:	d01d      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a1e      	ldr	r2, [pc, #120]	; (800954c <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d018      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a1c      	ldr	r2, [pc, #112]	; (8009550 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d013      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a1b      	ldr	r2, [pc, #108]	; (8009554 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d00e      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a14      	ldr	r2, [pc, #80]	; (8009544 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d009      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a17      	ldr	r2, [pc, #92]	; (8009558 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d004      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a15      	ldr	r2, [pc, #84]	; (800955c <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d10c      	bne.n	8009524 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	4313      	orrs	r3, r2
 800951a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	40010000 	.word	0x40010000
 8009544:	40010400 	.word	0x40010400
 8009548:	080162b8 	.word	0x080162b8
 800954c:	40000400 	.word	0x40000400
 8009550:	40000800 	.word	0x40000800
 8009554:	40000c00 	.word	0x40000c00
 8009558:	40014000 	.word	0x40014000
 800955c:	40001800 	.word	0x40001800

08009560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e09f      	b.n	80096ee <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d02d      	beq.n	8009612 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a4f      	ldr	r2, [pc, #316]	; (80096f8 <HAL_UART_Init+0x15c>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d055      	beq.n	800966c <HAL_UART_Init+0xd0>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a4d      	ldr	r2, [pc, #308]	; (80096fc <HAL_UART_Init+0x160>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d050      	beq.n	800966c <HAL_UART_Init+0xd0>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a4c      	ldr	r2, [pc, #304]	; (8009700 <HAL_UART_Init+0x164>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d04b      	beq.n	800966c <HAL_UART_Init+0xd0>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a4a      	ldr	r2, [pc, #296]	; (8009704 <HAL_UART_Init+0x168>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d046      	beq.n	800966c <HAL_UART_Init+0xd0>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a49      	ldr	r2, [pc, #292]	; (8009708 <HAL_UART_Init+0x16c>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d041      	beq.n	800966c <HAL_UART_Init+0xd0>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a47      	ldr	r2, [pc, #284]	; (800970c <HAL_UART_Init+0x170>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d03c      	beq.n	800966c <HAL_UART_Init+0xd0>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a46      	ldr	r2, [pc, #280]	; (8009710 <HAL_UART_Init+0x174>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d037      	beq.n	800966c <HAL_UART_Init+0xd0>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a44      	ldr	r2, [pc, #272]	; (8009714 <HAL_UART_Init+0x178>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d032      	beq.n	800966c <HAL_UART_Init+0xd0>
 8009606:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800960a:	4843      	ldr	r0, [pc, #268]	; (8009718 <HAL_UART_Init+0x17c>)
 800960c:	f7f9 f891 	bl	8002732 <assert_failed>
 8009610:	e02c      	b.n	800966c <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a38      	ldr	r2, [pc, #224]	; (80096f8 <HAL_UART_Init+0x15c>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d027      	beq.n	800966c <HAL_UART_Init+0xd0>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a36      	ldr	r2, [pc, #216]	; (80096fc <HAL_UART_Init+0x160>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d022      	beq.n	800966c <HAL_UART_Init+0xd0>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a35      	ldr	r2, [pc, #212]	; (8009700 <HAL_UART_Init+0x164>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d01d      	beq.n	800966c <HAL_UART_Init+0xd0>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a33      	ldr	r2, [pc, #204]	; (8009704 <HAL_UART_Init+0x168>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d018      	beq.n	800966c <HAL_UART_Init+0xd0>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a32      	ldr	r2, [pc, #200]	; (8009708 <HAL_UART_Init+0x16c>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d013      	beq.n	800966c <HAL_UART_Init+0xd0>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a30      	ldr	r2, [pc, #192]	; (800970c <HAL_UART_Init+0x170>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d00e      	beq.n	800966c <HAL_UART_Init+0xd0>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a2f      	ldr	r2, [pc, #188]	; (8009710 <HAL_UART_Init+0x174>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d009      	beq.n	800966c <HAL_UART_Init+0xd0>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a2d      	ldr	r2, [pc, #180]	; (8009714 <HAL_UART_Init+0x178>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d004      	beq.n	800966c <HAL_UART_Init+0xd0>
 8009662:	f240 1131 	movw	r1, #305	; 0x131
 8009666:	482c      	ldr	r0, [pc, #176]	; (8009718 <HAL_UART_Init+0x17c>)
 8009668:	f7f9 f863 	bl	8002732 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009670:	2b00      	cmp	r3, #0
 8009672:	d106      	bne.n	8009682 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7f9 fc55 	bl	8002f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2224      	movs	r2, #36	; 0x24
 8009686:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f022 0201 	bic.w	r2, r2, #1
 8009696:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fc79 	bl	8009f90 <UART_SetConfig>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d101      	bne.n	80096a8 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e022      	b.n	80096ee <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 ff63 	bl	800a57c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	689a      	ldr	r2, [r3, #8]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f042 0201 	orr.w	r2, r2, #1
 80096e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f001 f8a0 	bl	800a82c <UART_CheckIdleState>
 80096ec:	4603      	mov	r3, r0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	40011000 	.word	0x40011000
 80096fc:	40004400 	.word	0x40004400
 8009700:	40004800 	.word	0x40004800
 8009704:	40004c00 	.word	0x40004c00
 8009708:	40005000 	.word	0x40005000
 800970c:	40011400 	.word	0x40011400
 8009710:	40007800 	.word	0x40007800
 8009714:	40007c00 	.word	0x40007c00
 8009718:	080162f4 	.word	0x080162f4

0800971c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b08a      	sub	sp, #40	; 0x28
 8009720:	af02      	add	r7, sp, #8
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	603b      	str	r3, [r7, #0]
 8009728:	4613      	mov	r3, r2
 800972a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009730:	2b20      	cmp	r3, #32
 8009732:	d171      	bne.n	8009818 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d002      	beq.n	8009740 <HAL_UART_Transmit+0x24>
 800973a:	88fb      	ldrh	r3, [r7, #6]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e06a      	b.n	800981a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2221      	movs	r2, #33	; 0x21
 8009750:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009752:	f7f9 fda1 	bl	8003298 <HAL_GetTick>
 8009756:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	88fa      	ldrh	r2, [r7, #6]
 800975c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	88fa      	ldrh	r2, [r7, #6]
 8009764:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009770:	d108      	bne.n	8009784 <HAL_UART_Transmit+0x68>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d104      	bne.n	8009784 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800977a:	2300      	movs	r3, #0
 800977c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	61bb      	str	r3, [r7, #24]
 8009782:	e003      	b.n	800978c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009788:	2300      	movs	r3, #0
 800978a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800978c:	e02c      	b.n	80097e8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	2200      	movs	r2, #0
 8009796:	2180      	movs	r1, #128	; 0x80
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f001 f87e 	bl	800a89a <UART_WaitOnFlagUntilTimeout>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d001      	beq.n	80097a8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80097a4:	2303      	movs	r3, #3
 80097a6:	e038      	b.n	800981a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10b      	bne.n	80097c6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	881b      	ldrh	r3, [r3, #0]
 80097b2:	461a      	mov	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	3302      	adds	r3, #2
 80097c2:	61bb      	str	r3, [r7, #24]
 80097c4:	e007      	b.n	80097d6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	781a      	ldrb	r2, [r3, #0]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	3301      	adds	r3, #1
 80097d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80097dc:	b29b      	uxth	r3, r3
 80097de:	3b01      	subs	r3, #1
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1cc      	bne.n	800978e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	2200      	movs	r2, #0
 80097fc:	2140      	movs	r1, #64	; 0x40
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f001 f84b 	bl	800a89a <UART_WaitOnFlagUntilTimeout>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800980a:	2303      	movs	r3, #3
 800980c:	e005      	b.n	800981a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2220      	movs	r2, #32
 8009812:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	e000      	b.n	800981a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009818:	2302      	movs	r3, #2
  }
}
 800981a:	4618      	mov	r0, r3
 800981c:	3720      	adds	r7, #32
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b08a      	sub	sp, #40	; 0x28
 8009826:	af02      	add	r7, sp, #8
 8009828:	60f8      	str	r0, [r7, #12]
 800982a:	60b9      	str	r1, [r7, #8]
 800982c:	603b      	str	r3, [r7, #0]
 800982e:	4613      	mov	r3, r2
 8009830:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009838:	2b20      	cmp	r3, #32
 800983a:	f040 80b1 	bne.w	80099a0 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d002      	beq.n	800984a <HAL_UART_Receive+0x28>
 8009844:	88fb      	ldrh	r3, [r7, #6]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d101      	bne.n	800984e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e0a9      	b.n	80099a2 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2222      	movs	r2, #34	; 0x22
 800985a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009864:	f7f9 fd18 	bl	8003298 <HAL_GetTick>
 8009868:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	88fa      	ldrh	r2, [r7, #6]
 800986e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	88fa      	ldrh	r2, [r7, #6]
 8009876:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009882:	d10e      	bne.n	80098a2 <HAL_UART_Receive+0x80>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d105      	bne.n	8009898 <HAL_UART_Receive+0x76>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009892:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009896:	e02d      	b.n	80098f4 <HAL_UART_Receive+0xd2>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	22ff      	movs	r2, #255	; 0xff
 800989c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80098a0:	e028      	b.n	80098f4 <HAL_UART_Receive+0xd2>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10d      	bne.n	80098c6 <HAL_UART_Receive+0xa4>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d104      	bne.n	80098bc <HAL_UART_Receive+0x9a>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	22ff      	movs	r2, #255	; 0xff
 80098b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80098ba:	e01b      	b.n	80098f4 <HAL_UART_Receive+0xd2>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	227f      	movs	r2, #127	; 0x7f
 80098c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80098c4:	e016      	b.n	80098f4 <HAL_UART_Receive+0xd2>
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098ce:	d10d      	bne.n	80098ec <HAL_UART_Receive+0xca>
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d104      	bne.n	80098e2 <HAL_UART_Receive+0xc0>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	227f      	movs	r2, #127	; 0x7f
 80098dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80098e0:	e008      	b.n	80098f4 <HAL_UART_Receive+0xd2>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	223f      	movs	r2, #63	; 0x3f
 80098e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80098ea:	e003      	b.n	80098f4 <HAL_UART_Receive+0xd2>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098fa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009904:	d108      	bne.n	8009918 <HAL_UART_Receive+0xf6>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d104      	bne.n	8009918 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800990e:	2300      	movs	r3, #0
 8009910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	61bb      	str	r3, [r7, #24]
 8009916:	e003      	b.n	8009920 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800991c:	2300      	movs	r3, #0
 800991e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009920:	e032      	b.n	8009988 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	2200      	movs	r2, #0
 800992a:	2120      	movs	r1, #32
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f000 ffb4 	bl	800a89a <UART_WaitOnFlagUntilTimeout>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d001      	beq.n	800993c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8009938:	2303      	movs	r3, #3
 800993a:	e032      	b.n	80099a2 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10c      	bne.n	800995c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009948:	b29a      	uxth	r2, r3
 800994a:	8a7b      	ldrh	r3, [r7, #18]
 800994c:	4013      	ands	r3, r2
 800994e:	b29a      	uxth	r2, r3
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	3302      	adds	r3, #2
 8009958:	61bb      	str	r3, [r7, #24]
 800995a:	e00c      	b.n	8009976 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009962:	b2da      	uxtb	r2, r3
 8009964:	8a7b      	ldrh	r3, [r7, #18]
 8009966:	b2db      	uxtb	r3, r3
 8009968:	4013      	ands	r3, r2
 800996a:	b2da      	uxtb	r2, r3
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	3301      	adds	r3, #1
 8009974:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800997c:	b29b      	uxth	r3, r3
 800997e:	3b01      	subs	r3, #1
 8009980:	b29a      	uxth	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800998e:	b29b      	uxth	r3, r3
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1c6      	bne.n	8009922 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2220      	movs	r2, #32
 8009998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	e000      	b.n	80099a2 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80099a0:	2302      	movs	r3, #2
  }
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3720      	adds	r7, #32
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b0ba      	sub	sp, #232	; 0xe8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	69db      	ldr	r3, [r3, #28]
 80099ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80099d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80099d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80099da:	4013      	ands	r3, r2
 80099dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80099e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d115      	bne.n	8009a14 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80099e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ec:	f003 0320 	and.w	r3, r3, #32
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00f      	beq.n	8009a14 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80099f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099f8:	f003 0320 	and.w	r3, r3, #32
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d009      	beq.n	8009a14 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 8297 	beq.w	8009f38 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	4798      	blx	r3
      }
      return;
 8009a12:	e291      	b.n	8009f38 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f000 8117 	beq.w	8009c4c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d106      	bne.n	8009a38 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009a2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009a2e:	4b85      	ldr	r3, [pc, #532]	; (8009c44 <HAL_UART_IRQHandler+0x298>)
 8009a30:	4013      	ands	r3, r2
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 810a 	beq.w	8009c4c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a3c:	f003 0301 	and.w	r3, r3, #1
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d011      	beq.n	8009a68 <HAL_UART_IRQHandler+0xbc>
 8009a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00b      	beq.n	8009a68 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2201      	movs	r2, #1
 8009a56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a5e:	f043 0201 	orr.w	r2, r3, #1
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a6c:	f003 0302 	and.w	r3, r3, #2
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d011      	beq.n	8009a98 <HAL_UART_IRQHandler+0xec>
 8009a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a78:	f003 0301 	and.w	r3, r3, #1
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00b      	beq.n	8009a98 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2202      	movs	r2, #2
 8009a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a8e:	f043 0204 	orr.w	r2, r3, #4
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a9c:	f003 0304 	and.w	r3, r3, #4
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d011      	beq.n	8009ac8 <HAL_UART_IRQHandler+0x11c>
 8009aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009aa8:	f003 0301 	and.w	r3, r3, #1
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00b      	beq.n	8009ac8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2204      	movs	r2, #4
 8009ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009abe:	f043 0202 	orr.w	r2, r3, #2
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009acc:	f003 0308 	and.w	r3, r3, #8
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d017      	beq.n	8009b04 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ad8:	f003 0320 	and.w	r3, r3, #32
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d105      	bne.n	8009aec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ae4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00b      	beq.n	8009b04 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2208      	movs	r2, #8
 8009af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009afa:	f043 0208 	orr.w	r2, r3, #8
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d012      	beq.n	8009b36 <HAL_UART_IRQHandler+0x18a>
 8009b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00c      	beq.n	8009b36 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b2c:	f043 0220 	orr.w	r2, r3, #32
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 81fd 	beq.w	8009f3c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b46:	f003 0320 	and.w	r3, r3, #32
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00d      	beq.n	8009b6a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b52:	f003 0320 	and.w	r3, r3, #32
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d007      	beq.n	8009b6a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d003      	beq.n	8009b6a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b7e:	2b40      	cmp	r3, #64	; 0x40
 8009b80:	d005      	beq.n	8009b8e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d04f      	beq.n	8009c2e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 ff49 	bl	800aa26 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b9e:	2b40      	cmp	r3, #64	; 0x40
 8009ba0:	d141      	bne.n	8009c26 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3308      	adds	r3, #8
 8009ba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009bb0:	e853 3f00 	ldrex	r3, [r3]
 8009bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3308      	adds	r3, #8
 8009bca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009bce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009bda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009bde:	e841 2300 	strex	r3, r2, [r1]
 8009be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1d9      	bne.n	8009ba2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d013      	beq.n	8009c1e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bfa:	4a13      	ldr	r2, [pc, #76]	; (8009c48 <HAL_UART_IRQHandler+0x29c>)
 8009bfc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7f9 fd28 	bl	8003658 <HAL_DMA_Abort_IT>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d017      	beq.n	8009c3e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009c18:	4610      	mov	r0, r2
 8009c1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c1c:	e00f      	b.n	8009c3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f9a0 	bl	8009f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c24:	e00b      	b.n	8009c3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f99c 	bl	8009f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c2c:	e007      	b.n	8009c3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f998 	bl	8009f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009c3c:	e17e      	b.n	8009f3c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c3e:	bf00      	nop
    return;
 8009c40:	e17c      	b.n	8009f3c <HAL_UART_IRQHandler+0x590>
 8009c42:	bf00      	nop
 8009c44:	04000120 	.word	0x04000120
 8009c48:	0800aaef 	.word	0x0800aaef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	f040 814c 	bne.w	8009eee <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c5a:	f003 0310 	and.w	r3, r3, #16
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 8145 	beq.w	8009eee <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c68:	f003 0310 	and.w	r3, r3, #16
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f000 813e 	beq.w	8009eee <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2210      	movs	r2, #16
 8009c78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c84:	2b40      	cmp	r3, #64	; 0x40
 8009c86:	f040 80b6 	bne.w	8009df6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f000 8150 	beq.w	8009f40 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009caa:	429a      	cmp	r2, r3
 8009cac:	f080 8148 	bcs.w	8009f40 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cbe:	69db      	ldr	r3, [r3, #28]
 8009cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cc4:	f000 8086 	beq.w	8009dd4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cd4:	e853 3f00 	ldrex	r3, [r3]
 8009cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	461a      	mov	r2, r3
 8009cee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009cf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009cf6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009cfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009d02:	e841 2300 	strex	r3, r2, [r1]
 8009d06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1da      	bne.n	8009cc8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	3308      	adds	r3, #8
 8009d18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d1c:	e853 3f00 	ldrex	r3, [r3]
 8009d20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d24:	f023 0301 	bic.w	r3, r3, #1
 8009d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	3308      	adds	r3, #8
 8009d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d42:	e841 2300 	strex	r3, r2, [r1]
 8009d46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1e1      	bne.n	8009d12 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	3308      	adds	r3, #8
 8009d54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d58:	e853 3f00 	ldrex	r3, [r3]
 8009d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	3308      	adds	r3, #8
 8009d6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d7a:	e841 2300 	strex	r3, r2, [r1]
 8009d7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e3      	bne.n	8009d4e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2220      	movs	r2, #32
 8009d8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d9c:	e853 3f00 	ldrex	r3, [r3]
 8009da0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009da4:	f023 0310 	bic.w	r3, r3, #16
 8009da8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	461a      	mov	r2, r3
 8009db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009db6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009db8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009dbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009dbe:	e841 2300 	strex	r3, r2, [r1]
 8009dc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1e4      	bne.n	8009d94 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7f9 fbd2 	bl	8003578 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f8c2 	bl	8009f78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009df4:	e0a4      	b.n	8009f40 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 8096 	beq.w	8009f44 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f000 8091 	beq.w	8009f44 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2a:	e853 3f00 	ldrex	r3, [r3]
 8009e2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	461a      	mov	r2, r3
 8009e40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e44:	647b      	str	r3, [r7, #68]	; 0x44
 8009e46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e4c:	e841 2300 	strex	r3, r2, [r1]
 8009e50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1e4      	bne.n	8009e22 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3308      	adds	r3, #8
 8009e5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	e853 3f00 	ldrex	r3, [r3]
 8009e66:	623b      	str	r3, [r7, #32]
   return(result);
 8009e68:	6a3b      	ldr	r3, [r7, #32]
 8009e6a:	f023 0301 	bic.w	r3, r3, #1
 8009e6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3308      	adds	r3, #8
 8009e78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009e7c:	633a      	str	r2, [r7, #48]	; 0x30
 8009e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e84:	e841 2300 	strex	r3, r2, [r1]
 8009e88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1e3      	bne.n	8009e58 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2220      	movs	r2, #32
 8009e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	e853 3f00 	ldrex	r3, [r3]
 8009eb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f023 0310 	bic.w	r3, r3, #16
 8009eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ec6:	61fb      	str	r3, [r7, #28]
 8009ec8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eca:	69b9      	ldr	r1, [r7, #24]
 8009ecc:	69fa      	ldr	r2, [r7, #28]
 8009ece:	e841 2300 	strex	r3, r2, [r1]
 8009ed2:	617b      	str	r3, [r7, #20]
   return(result);
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1e4      	bne.n	8009ea4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2202      	movs	r2, #2
 8009ede:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ee0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f846 	bl	8009f78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009eec:	e02a      	b.n	8009f44 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00e      	beq.n	8009f18 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d008      	beq.n	8009f18 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d01c      	beq.n	8009f48 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	4798      	blx	r3
    }
    return;
 8009f16:	e017      	b.n	8009f48 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d012      	beq.n	8009f4a <HAL_UART_IRQHandler+0x59e>
 8009f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00c      	beq.n	8009f4a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fdf2 	bl	800ab1a <UART_EndTransmit_IT>
    return;
 8009f36:	e008      	b.n	8009f4a <HAL_UART_IRQHandler+0x59e>
      return;
 8009f38:	bf00      	nop
 8009f3a:	e006      	b.n	8009f4a <HAL_UART_IRQHandler+0x59e>
    return;
 8009f3c:	bf00      	nop
 8009f3e:	e004      	b.n	8009f4a <HAL_UART_IRQHandler+0x59e>
      return;
 8009f40:	bf00      	nop
 8009f42:	e002      	b.n	8009f4a <HAL_UART_IRQHandler+0x59e>
      return;
 8009f44:	bf00      	nop
 8009f46:	e000      	b.n	8009f4a <HAL_UART_IRQHandler+0x59e>
    return;
 8009f48:	bf00      	nop
  }

}
 8009f4a:	37e8      	adds	r7, #232	; 0xe8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	460b      	mov	r3, r1
 8009f82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b088      	sub	sp, #32
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	4aa0      	ldr	r2, [pc, #640]	; (800a224 <UART_SetConfig+0x294>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d904      	bls.n	8009fb0 <UART_SetConfig+0x20>
 8009fa6:	f640 315d 	movw	r1, #2909	; 0xb5d
 8009faa:	489f      	ldr	r0, [pc, #636]	; (800a228 <UART_SetConfig+0x298>)
 8009fac:	f7f8 fbc1 	bl	8002732 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fb8:	d00d      	beq.n	8009fd6 <UART_SetConfig+0x46>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d009      	beq.n	8009fd6 <UART_SetConfig+0x46>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fca:	d004      	beq.n	8009fd6 <UART_SetConfig+0x46>
 8009fcc:	f640 315e 	movw	r1, #2910	; 0xb5e
 8009fd0:	4895      	ldr	r0, [pc, #596]	; (800a228 <UART_SetConfig+0x298>)
 8009fd2:	f7f8 fbae 	bl	8002732 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fde:	d012      	beq.n	800a006 <UART_SetConfig+0x76>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00e      	beq.n	800a006 <UART_SetConfig+0x76>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ff0:	d009      	beq.n	800a006 <UART_SetConfig+0x76>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ffa:	d004      	beq.n	800a006 <UART_SetConfig+0x76>
 8009ffc:	f640 315f 	movw	r1, #2911	; 0xb5f
 800a000:	4889      	ldr	r0, [pc, #548]	; (800a228 <UART_SetConfig+0x298>)
 800a002:	f7f8 fb96 	bl	8002732 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d009      	beq.n	800a022 <UART_SetConfig+0x92>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a016:	d004      	beq.n	800a022 <UART_SetConfig+0x92>
 800a018:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 800a01c:	4882      	ldr	r0, [pc, #520]	; (800a228 <UART_SetConfig+0x298>)
 800a01e:	f7f8 fb88 	bl	8002732 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00e      	beq.n	800a048 <UART_SetConfig+0xb8>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a032:	d009      	beq.n	800a048 <UART_SetConfig+0xb8>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a03c:	d004      	beq.n	800a048 <UART_SetConfig+0xb8>
 800a03e:	f640 3162 	movw	r1, #2914	; 0xb62
 800a042:	4879      	ldr	r0, [pc, #484]	; (800a228 <UART_SetConfig+0x298>)
 800a044:	f7f8 fb75 	bl	8002732 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	695b      	ldr	r3, [r3, #20]
 800a04c:	f023 030c 	bic.w	r3, r3, #12
 800a050:	2b00      	cmp	r3, #0
 800a052:	d103      	bne.n	800a05c <UART_SetConfig+0xcc>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d104      	bne.n	800a066 <UART_SetConfig+0xd6>
 800a05c:	f640 3163 	movw	r1, #2915	; 0xb63
 800a060:	4871      	ldr	r0, [pc, #452]	; (800a228 <UART_SetConfig+0x298>)
 800a062:	f7f8 fb66 	bl	8002732 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d013      	beq.n	800a096 <UART_SetConfig+0x106>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	699b      	ldr	r3, [r3, #24]
 800a072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a076:	d00e      	beq.n	800a096 <UART_SetConfig+0x106>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	699b      	ldr	r3, [r3, #24]
 800a07c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a080:	d009      	beq.n	800a096 <UART_SetConfig+0x106>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a08a:	d004      	beq.n	800a096 <UART_SetConfig+0x106>
 800a08c:	f640 3164 	movw	r1, #2916	; 0xb64
 800a090:	4865      	ldr	r0, [pc, #404]	; (800a228 <UART_SetConfig+0x298>)
 800a092:	f7f8 fb4e 	bl	8002732 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d009      	beq.n	800a0b2 <UART_SetConfig+0x122>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	69db      	ldr	r3, [r3, #28]
 800a0a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0a6:	d004      	beq.n	800a0b2 <UART_SetConfig+0x122>
 800a0a8:	f640 3165 	movw	r1, #2917	; 0xb65
 800a0ac:	485e      	ldr	r0, [pc, #376]	; (800a228 <UART_SetConfig+0x298>)
 800a0ae:	f7f8 fb40 	bl	8002732 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	689a      	ldr	r2, [r3, #8]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	695b      	ldr	r3, [r3, #20]
 800a0c0:	431a      	orrs	r2, r3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	69db      	ldr	r3, [r3, #28]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	4b56      	ldr	r3, [pc, #344]	; (800a22c <UART_SetConfig+0x29c>)
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	6812      	ldr	r2, [r2, #0]
 800a0d8:	6979      	ldr	r1, [r7, #20]
 800a0da:	430b      	orrs	r3, r1
 800a0dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68da      	ldr	r2, [r3, #12]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	430a      	orrs	r2, r1
 800a0f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a1b      	ldr	r3, [r3, #32]
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	4313      	orrs	r3, r2
 800a102:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	430a      	orrs	r2, r1
 800a116:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a44      	ldr	r2, [pc, #272]	; (800a230 <UART_SetConfig+0x2a0>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d121      	bne.n	800a166 <UART_SetConfig+0x1d6>
 800a122:	4b44      	ldr	r3, [pc, #272]	; (800a234 <UART_SetConfig+0x2a4>)
 800a124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a128:	f003 0303 	and.w	r3, r3, #3
 800a12c:	2b03      	cmp	r3, #3
 800a12e:	d817      	bhi.n	800a160 <UART_SetConfig+0x1d0>
 800a130:	a201      	add	r2, pc, #4	; (adr r2, 800a138 <UART_SetConfig+0x1a8>)
 800a132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a136:	bf00      	nop
 800a138:	0800a149 	.word	0x0800a149
 800a13c:	0800a155 	.word	0x0800a155
 800a140:	0800a14f 	.word	0x0800a14f
 800a144:	0800a15b 	.word	0x0800a15b
 800a148:	2301      	movs	r3, #1
 800a14a:	77fb      	strb	r3, [r7, #31]
 800a14c:	e14c      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a14e:	2302      	movs	r3, #2
 800a150:	77fb      	strb	r3, [r7, #31]
 800a152:	e149      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a154:	2304      	movs	r3, #4
 800a156:	77fb      	strb	r3, [r7, #31]
 800a158:	e146      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a15a:	2308      	movs	r3, #8
 800a15c:	77fb      	strb	r3, [r7, #31]
 800a15e:	e143      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a160:	2310      	movs	r3, #16
 800a162:	77fb      	strb	r3, [r7, #31]
 800a164:	e140      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a33      	ldr	r2, [pc, #204]	; (800a238 <UART_SetConfig+0x2a8>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d132      	bne.n	800a1d6 <UART_SetConfig+0x246>
 800a170:	4b30      	ldr	r3, [pc, #192]	; (800a234 <UART_SetConfig+0x2a4>)
 800a172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a176:	f003 030c 	and.w	r3, r3, #12
 800a17a:	2b0c      	cmp	r3, #12
 800a17c:	d828      	bhi.n	800a1d0 <UART_SetConfig+0x240>
 800a17e:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <UART_SetConfig+0x1f4>)
 800a180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a184:	0800a1b9 	.word	0x0800a1b9
 800a188:	0800a1d1 	.word	0x0800a1d1
 800a18c:	0800a1d1 	.word	0x0800a1d1
 800a190:	0800a1d1 	.word	0x0800a1d1
 800a194:	0800a1c5 	.word	0x0800a1c5
 800a198:	0800a1d1 	.word	0x0800a1d1
 800a19c:	0800a1d1 	.word	0x0800a1d1
 800a1a0:	0800a1d1 	.word	0x0800a1d1
 800a1a4:	0800a1bf 	.word	0x0800a1bf
 800a1a8:	0800a1d1 	.word	0x0800a1d1
 800a1ac:	0800a1d1 	.word	0x0800a1d1
 800a1b0:	0800a1d1 	.word	0x0800a1d1
 800a1b4:	0800a1cb 	.word	0x0800a1cb
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	77fb      	strb	r3, [r7, #31]
 800a1bc:	e114      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a1be:	2302      	movs	r3, #2
 800a1c0:	77fb      	strb	r3, [r7, #31]
 800a1c2:	e111      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a1c4:	2304      	movs	r3, #4
 800a1c6:	77fb      	strb	r3, [r7, #31]
 800a1c8:	e10e      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a1ca:	2308      	movs	r3, #8
 800a1cc:	77fb      	strb	r3, [r7, #31]
 800a1ce:	e10b      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a1d0:	2310      	movs	r3, #16
 800a1d2:	77fb      	strb	r3, [r7, #31]
 800a1d4:	e108      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a18      	ldr	r2, [pc, #96]	; (800a23c <UART_SetConfig+0x2ac>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d12f      	bne.n	800a240 <UART_SetConfig+0x2b0>
 800a1e0:	4b14      	ldr	r3, [pc, #80]	; (800a234 <UART_SetConfig+0x2a4>)
 800a1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a1ea:	2b30      	cmp	r3, #48	; 0x30
 800a1ec:	d013      	beq.n	800a216 <UART_SetConfig+0x286>
 800a1ee:	2b30      	cmp	r3, #48	; 0x30
 800a1f0:	d814      	bhi.n	800a21c <UART_SetConfig+0x28c>
 800a1f2:	2b20      	cmp	r3, #32
 800a1f4:	d009      	beq.n	800a20a <UART_SetConfig+0x27a>
 800a1f6:	2b20      	cmp	r3, #32
 800a1f8:	d810      	bhi.n	800a21c <UART_SetConfig+0x28c>
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d002      	beq.n	800a204 <UART_SetConfig+0x274>
 800a1fe:	2b10      	cmp	r3, #16
 800a200:	d006      	beq.n	800a210 <UART_SetConfig+0x280>
 800a202:	e00b      	b.n	800a21c <UART_SetConfig+0x28c>
 800a204:	2300      	movs	r3, #0
 800a206:	77fb      	strb	r3, [r7, #31]
 800a208:	e0ee      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a20a:	2302      	movs	r3, #2
 800a20c:	77fb      	strb	r3, [r7, #31]
 800a20e:	e0eb      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a210:	2304      	movs	r3, #4
 800a212:	77fb      	strb	r3, [r7, #31]
 800a214:	e0e8      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a216:	2308      	movs	r3, #8
 800a218:	77fb      	strb	r3, [r7, #31]
 800a21a:	e0e5      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a21c:	2310      	movs	r3, #16
 800a21e:	77fb      	strb	r3, [r7, #31]
 800a220:	e0e2      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a222:	bf00      	nop
 800a224:	019bfcc0 	.word	0x019bfcc0
 800a228:	080162f4 	.word	0x080162f4
 800a22c:	efff69f3 	.word	0xefff69f3
 800a230:	40011000 	.word	0x40011000
 800a234:	40023800 	.word	0x40023800
 800a238:	40004400 	.word	0x40004400
 800a23c:	40004800 	.word	0x40004800
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4aa5      	ldr	r2, [pc, #660]	; (800a4dc <UART_SetConfig+0x54c>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d120      	bne.n	800a28c <UART_SetConfig+0x2fc>
 800a24a:	4ba5      	ldr	r3, [pc, #660]	; (800a4e0 <UART_SetConfig+0x550>)
 800a24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a250:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a254:	2bc0      	cmp	r3, #192	; 0xc0
 800a256:	d013      	beq.n	800a280 <UART_SetConfig+0x2f0>
 800a258:	2bc0      	cmp	r3, #192	; 0xc0
 800a25a:	d814      	bhi.n	800a286 <UART_SetConfig+0x2f6>
 800a25c:	2b80      	cmp	r3, #128	; 0x80
 800a25e:	d009      	beq.n	800a274 <UART_SetConfig+0x2e4>
 800a260:	2b80      	cmp	r3, #128	; 0x80
 800a262:	d810      	bhi.n	800a286 <UART_SetConfig+0x2f6>
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <UART_SetConfig+0x2de>
 800a268:	2b40      	cmp	r3, #64	; 0x40
 800a26a:	d006      	beq.n	800a27a <UART_SetConfig+0x2ea>
 800a26c:	e00b      	b.n	800a286 <UART_SetConfig+0x2f6>
 800a26e:	2300      	movs	r3, #0
 800a270:	77fb      	strb	r3, [r7, #31]
 800a272:	e0b9      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a274:	2302      	movs	r3, #2
 800a276:	77fb      	strb	r3, [r7, #31]
 800a278:	e0b6      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a27a:	2304      	movs	r3, #4
 800a27c:	77fb      	strb	r3, [r7, #31]
 800a27e:	e0b3      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a280:	2308      	movs	r3, #8
 800a282:	77fb      	strb	r3, [r7, #31]
 800a284:	e0b0      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a286:	2310      	movs	r3, #16
 800a288:	77fb      	strb	r3, [r7, #31]
 800a28a:	e0ad      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a94      	ldr	r2, [pc, #592]	; (800a4e4 <UART_SetConfig+0x554>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d125      	bne.n	800a2e2 <UART_SetConfig+0x352>
 800a296:	4b92      	ldr	r3, [pc, #584]	; (800a4e0 <UART_SetConfig+0x550>)
 800a298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a29c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2a4:	d017      	beq.n	800a2d6 <UART_SetConfig+0x346>
 800a2a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2aa:	d817      	bhi.n	800a2dc <UART_SetConfig+0x34c>
 800a2ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2b0:	d00b      	beq.n	800a2ca <UART_SetConfig+0x33a>
 800a2b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2b6:	d811      	bhi.n	800a2dc <UART_SetConfig+0x34c>
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d003      	beq.n	800a2c4 <UART_SetConfig+0x334>
 800a2bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2c0:	d006      	beq.n	800a2d0 <UART_SetConfig+0x340>
 800a2c2:	e00b      	b.n	800a2dc <UART_SetConfig+0x34c>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	77fb      	strb	r3, [r7, #31]
 800a2c8:	e08e      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	77fb      	strb	r3, [r7, #31]
 800a2ce:	e08b      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a2d0:	2304      	movs	r3, #4
 800a2d2:	77fb      	strb	r3, [r7, #31]
 800a2d4:	e088      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a2d6:	2308      	movs	r3, #8
 800a2d8:	77fb      	strb	r3, [r7, #31]
 800a2da:	e085      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a2dc:	2310      	movs	r3, #16
 800a2de:	77fb      	strb	r3, [r7, #31]
 800a2e0:	e082      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a80      	ldr	r2, [pc, #512]	; (800a4e8 <UART_SetConfig+0x558>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d125      	bne.n	800a338 <UART_SetConfig+0x3a8>
 800a2ec:	4b7c      	ldr	r3, [pc, #496]	; (800a4e0 <UART_SetConfig+0x550>)
 800a2ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a2f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2fa:	d017      	beq.n	800a32c <UART_SetConfig+0x39c>
 800a2fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a300:	d817      	bhi.n	800a332 <UART_SetConfig+0x3a2>
 800a302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a306:	d00b      	beq.n	800a320 <UART_SetConfig+0x390>
 800a308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a30c:	d811      	bhi.n	800a332 <UART_SetConfig+0x3a2>
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <UART_SetConfig+0x38a>
 800a312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a316:	d006      	beq.n	800a326 <UART_SetConfig+0x396>
 800a318:	e00b      	b.n	800a332 <UART_SetConfig+0x3a2>
 800a31a:	2301      	movs	r3, #1
 800a31c:	77fb      	strb	r3, [r7, #31]
 800a31e:	e063      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a320:	2302      	movs	r3, #2
 800a322:	77fb      	strb	r3, [r7, #31]
 800a324:	e060      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a326:	2304      	movs	r3, #4
 800a328:	77fb      	strb	r3, [r7, #31]
 800a32a:	e05d      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a32c:	2308      	movs	r3, #8
 800a32e:	77fb      	strb	r3, [r7, #31]
 800a330:	e05a      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a332:	2310      	movs	r3, #16
 800a334:	77fb      	strb	r3, [r7, #31]
 800a336:	e057      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a6b      	ldr	r2, [pc, #428]	; (800a4ec <UART_SetConfig+0x55c>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d125      	bne.n	800a38e <UART_SetConfig+0x3fe>
 800a342:	4b67      	ldr	r3, [pc, #412]	; (800a4e0 <UART_SetConfig+0x550>)
 800a344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a348:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a34c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a350:	d017      	beq.n	800a382 <UART_SetConfig+0x3f2>
 800a352:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a356:	d817      	bhi.n	800a388 <UART_SetConfig+0x3f8>
 800a358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a35c:	d00b      	beq.n	800a376 <UART_SetConfig+0x3e6>
 800a35e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a362:	d811      	bhi.n	800a388 <UART_SetConfig+0x3f8>
 800a364:	2b00      	cmp	r3, #0
 800a366:	d003      	beq.n	800a370 <UART_SetConfig+0x3e0>
 800a368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a36c:	d006      	beq.n	800a37c <UART_SetConfig+0x3ec>
 800a36e:	e00b      	b.n	800a388 <UART_SetConfig+0x3f8>
 800a370:	2300      	movs	r3, #0
 800a372:	77fb      	strb	r3, [r7, #31]
 800a374:	e038      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a376:	2302      	movs	r3, #2
 800a378:	77fb      	strb	r3, [r7, #31]
 800a37a:	e035      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a37c:	2304      	movs	r3, #4
 800a37e:	77fb      	strb	r3, [r7, #31]
 800a380:	e032      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a382:	2308      	movs	r3, #8
 800a384:	77fb      	strb	r3, [r7, #31]
 800a386:	e02f      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a388:	2310      	movs	r3, #16
 800a38a:	77fb      	strb	r3, [r7, #31]
 800a38c:	e02c      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a57      	ldr	r2, [pc, #348]	; (800a4f0 <UART_SetConfig+0x560>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d125      	bne.n	800a3e4 <UART_SetConfig+0x454>
 800a398:	4b51      	ldr	r3, [pc, #324]	; (800a4e0 <UART_SetConfig+0x550>)
 800a39a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a39e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a3a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a3a6:	d017      	beq.n	800a3d8 <UART_SetConfig+0x448>
 800a3a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a3ac:	d817      	bhi.n	800a3de <UART_SetConfig+0x44e>
 800a3ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3b2:	d00b      	beq.n	800a3cc <UART_SetConfig+0x43c>
 800a3b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3b8:	d811      	bhi.n	800a3de <UART_SetConfig+0x44e>
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <UART_SetConfig+0x436>
 800a3be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3c2:	d006      	beq.n	800a3d2 <UART_SetConfig+0x442>
 800a3c4:	e00b      	b.n	800a3de <UART_SetConfig+0x44e>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	77fb      	strb	r3, [r7, #31]
 800a3ca:	e00d      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	77fb      	strb	r3, [r7, #31]
 800a3d0:	e00a      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a3d2:	2304      	movs	r3, #4
 800a3d4:	77fb      	strb	r3, [r7, #31]
 800a3d6:	e007      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a3d8:	2308      	movs	r3, #8
 800a3da:	77fb      	strb	r3, [r7, #31]
 800a3dc:	e004      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a3de:	2310      	movs	r3, #16
 800a3e0:	77fb      	strb	r3, [r7, #31]
 800a3e2:	e001      	b.n	800a3e8 <UART_SetConfig+0x458>
 800a3e4:	2310      	movs	r3, #16
 800a3e6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	69db      	ldr	r3, [r3, #28]
 800a3ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3f0:	d15c      	bne.n	800a4ac <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 800a3f2:	7ffb      	ldrb	r3, [r7, #31]
 800a3f4:	2b08      	cmp	r3, #8
 800a3f6:	d828      	bhi.n	800a44a <UART_SetConfig+0x4ba>
 800a3f8:	a201      	add	r2, pc, #4	; (adr r2, 800a400 <UART_SetConfig+0x470>)
 800a3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3fe:	bf00      	nop
 800a400:	0800a425 	.word	0x0800a425
 800a404:	0800a42d 	.word	0x0800a42d
 800a408:	0800a435 	.word	0x0800a435
 800a40c:	0800a44b 	.word	0x0800a44b
 800a410:	0800a43b 	.word	0x0800a43b
 800a414:	0800a44b 	.word	0x0800a44b
 800a418:	0800a44b 	.word	0x0800a44b
 800a41c:	0800a44b 	.word	0x0800a44b
 800a420:	0800a443 	.word	0x0800a443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a424:	f7fb ff6c 	bl	8006300 <HAL_RCC_GetPCLK1Freq>
 800a428:	61b8      	str	r0, [r7, #24]
        break;
 800a42a:	e013      	b.n	800a454 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a42c:	f7fb ff7c 	bl	8006328 <HAL_RCC_GetPCLK2Freq>
 800a430:	61b8      	str	r0, [r7, #24]
        break;
 800a432:	e00f      	b.n	800a454 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a434:	4b2f      	ldr	r3, [pc, #188]	; (800a4f4 <UART_SetConfig+0x564>)
 800a436:	61bb      	str	r3, [r7, #24]
        break;
 800a438:	e00c      	b.n	800a454 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a43a:	f7fb fe8f 	bl	800615c <HAL_RCC_GetSysClockFreq>
 800a43e:	61b8      	str	r0, [r7, #24]
        break;
 800a440:	e008      	b.n	800a454 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a446:	61bb      	str	r3, [r7, #24]
        break;
 800a448:	e004      	b.n	800a454 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800a44a:	2300      	movs	r3, #0
 800a44c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	77bb      	strb	r3, [r7, #30]
        break;
 800a452:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	2b00      	cmp	r3, #0
 800a458:	f000 8082 	beq.w	800a560 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	005a      	lsls	r2, r3, #1
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	085b      	lsrs	r3, r3, #1
 800a466:	441a      	add	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a470:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	2b0f      	cmp	r3, #15
 800a476:	d916      	bls.n	800a4a6 <UART_SetConfig+0x516>
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a47e:	d212      	bcs.n	800a4a6 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	b29b      	uxth	r3, r3
 800a484:	f023 030f 	bic.w	r3, r3, #15
 800a488:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	085b      	lsrs	r3, r3, #1
 800a48e:	b29b      	uxth	r3, r3
 800a490:	f003 0307 	and.w	r3, r3, #7
 800a494:	b29a      	uxth	r2, r3
 800a496:	89fb      	ldrh	r3, [r7, #14]
 800a498:	4313      	orrs	r3, r2
 800a49a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	89fa      	ldrh	r2, [r7, #14]
 800a4a2:	60da      	str	r2, [r3, #12]
 800a4a4:	e05c      	b.n	800a560 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	77bb      	strb	r3, [r7, #30]
 800a4aa:	e059      	b.n	800a560 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a4ac:	7ffb      	ldrb	r3, [r7, #31]
 800a4ae:	2b08      	cmp	r3, #8
 800a4b0:	d835      	bhi.n	800a51e <UART_SetConfig+0x58e>
 800a4b2:	a201      	add	r2, pc, #4	; (adr r2, 800a4b8 <UART_SetConfig+0x528>)
 800a4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b8:	0800a4f9 	.word	0x0800a4f9
 800a4bc:	0800a501 	.word	0x0800a501
 800a4c0:	0800a509 	.word	0x0800a509
 800a4c4:	0800a51f 	.word	0x0800a51f
 800a4c8:	0800a50f 	.word	0x0800a50f
 800a4cc:	0800a51f 	.word	0x0800a51f
 800a4d0:	0800a51f 	.word	0x0800a51f
 800a4d4:	0800a51f 	.word	0x0800a51f
 800a4d8:	0800a517 	.word	0x0800a517
 800a4dc:	40004c00 	.word	0x40004c00
 800a4e0:	40023800 	.word	0x40023800
 800a4e4:	40005000 	.word	0x40005000
 800a4e8:	40011400 	.word	0x40011400
 800a4ec:	40007800 	.word	0x40007800
 800a4f0:	40007c00 	.word	0x40007c00
 800a4f4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4f8:	f7fb ff02 	bl	8006300 <HAL_RCC_GetPCLK1Freq>
 800a4fc:	61b8      	str	r0, [r7, #24]
        break;
 800a4fe:	e013      	b.n	800a528 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a500:	f7fb ff12 	bl	8006328 <HAL_RCC_GetPCLK2Freq>
 800a504:	61b8      	str	r0, [r7, #24]
        break;
 800a506:	e00f      	b.n	800a528 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a508:	4b1b      	ldr	r3, [pc, #108]	; (800a578 <UART_SetConfig+0x5e8>)
 800a50a:	61bb      	str	r3, [r7, #24]
        break;
 800a50c:	e00c      	b.n	800a528 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a50e:	f7fb fe25 	bl	800615c <HAL_RCC_GetSysClockFreq>
 800a512:	61b8      	str	r0, [r7, #24]
        break;
 800a514:	e008      	b.n	800a528 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a51a:	61bb      	str	r3, [r7, #24]
        break;
 800a51c:	e004      	b.n	800a528 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 800a51e:	2300      	movs	r3, #0
 800a520:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	77bb      	strb	r3, [r7, #30]
        break;
 800a526:	bf00      	nop
    }

    if (pclk != 0U)
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d018      	beq.n	800a560 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	085a      	lsrs	r2, r3, #1
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	441a      	add	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a540:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	2b0f      	cmp	r3, #15
 800a546:	d909      	bls.n	800a55c <UART_SetConfig+0x5cc>
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a54e:	d205      	bcs.n	800a55c <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	b29a      	uxth	r2, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	60da      	str	r2, [r3, #12]
 800a55a:	e001      	b.n	800a560 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a56c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3720      	adds	r7, #32
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	00f42400 	.word	0x00f42400

0800a57c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a588:	2bff      	cmp	r3, #255	; 0xff
 800a58a:	d904      	bls.n	800a596 <UART_AdvFeatureConfig+0x1a>
 800a58c:	f640 31e6 	movw	r1, #3046	; 0xbe6
 800a590:	488e      	ldr	r0, [pc, #568]	; (800a7cc <UART_AdvFeatureConfig+0x250>)
 800a592:	f7f8 f8ce 	bl	8002732 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d018      	beq.n	800a5d4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d009      	beq.n	800a5be <UART_AdvFeatureConfig+0x42>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5b2:	d004      	beq.n	800a5be <UART_AdvFeatureConfig+0x42>
 800a5b4:	f640 31eb 	movw	r1, #3051	; 0xbeb
 800a5b8:	4884      	ldr	r0, [pc, #528]	; (800a7cc <UART_AdvFeatureConfig+0x250>)
 800a5ba:	f7f8 f8ba 	bl	8002732 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	430a      	orrs	r2, r1
 800a5d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d8:	f003 0302 	and.w	r3, r3, #2
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d018      	beq.n	800a612 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d009      	beq.n	800a5fc <UART_AdvFeatureConfig+0x80>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5f0:	d004      	beq.n	800a5fc <UART_AdvFeatureConfig+0x80>
 800a5f2:	f640 31f2 	movw	r1, #3058	; 0xbf2
 800a5f6:	4875      	ldr	r0, [pc, #468]	; (800a7cc <UART_AdvFeatureConfig+0x250>)
 800a5f8:	f7f8 f89b 	bl	8002732 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	430a      	orrs	r2, r1
 800a610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	f003 0304 	and.w	r3, r3, #4
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d018      	beq.n	800a650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a622:	2b00      	cmp	r3, #0
 800a624:	d009      	beq.n	800a63a <UART_AdvFeatureConfig+0xbe>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a62a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a62e:	d004      	beq.n	800a63a <UART_AdvFeatureConfig+0xbe>
 800a630:	f640 31f9 	movw	r1, #3065	; 0xbf9
 800a634:	4865      	ldr	r0, [pc, #404]	; (800a7cc <UART_AdvFeatureConfig+0x250>)
 800a636:	f7f8 f87c 	bl	8002732 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	430a      	orrs	r2, r1
 800a64e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a654:	f003 0308 	and.w	r3, r3, #8
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d018      	beq.n	800a68e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a660:	2b00      	cmp	r3, #0
 800a662:	d009      	beq.n	800a678 <UART_AdvFeatureConfig+0xfc>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a66c:	d004      	beq.n	800a678 <UART_AdvFeatureConfig+0xfc>
 800a66e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800a672:	4856      	ldr	r0, [pc, #344]	; (800a7cc <UART_AdvFeatureConfig+0x250>)
 800a674:	f7f8 f85d 	bl	8002732 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	430a      	orrs	r2, r1
 800a68c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a692:	f003 0310 	and.w	r3, r3, #16
 800a696:	2b00      	cmp	r3, #0
 800a698:	d018      	beq.n	800a6cc <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d009      	beq.n	800a6b6 <UART_AdvFeatureConfig+0x13a>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6aa:	d004      	beq.n	800a6b6 <UART_AdvFeatureConfig+0x13a>
 800a6ac:	f640 4107 	movw	r1, #3079	; 0xc07
 800a6b0:	4846      	ldr	r0, [pc, #280]	; (800a7cc <UART_AdvFeatureConfig+0x250>)
 800a6b2:	f7f8 f83e 	bl	8002732 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	430a      	orrs	r2, r1
 800a6ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d0:	f003 0320 	and.w	r3, r3, #32
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d018      	beq.n	800a70a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d009      	beq.n	800a6f4 <UART_AdvFeatureConfig+0x178>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6e8:	d004      	beq.n	800a6f4 <UART_AdvFeatureConfig+0x178>
 800a6ea:	f640 410e 	movw	r1, #3086	; 0xc0e
 800a6ee:	4837      	ldr	r0, [pc, #220]	; (800a7cc <UART_AdvFeatureConfig+0x250>)
 800a6f0:	f7f8 f81f 	bl	8002732 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	430a      	orrs	r2, r1
 800a708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a712:	2b00      	cmp	r3, #0
 800a714:	d064      	beq.n	800a7e0 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a2d      	ldr	r2, [pc, #180]	; (800a7d0 <UART_AdvFeatureConfig+0x254>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d013      	beq.n	800a748 <UART_AdvFeatureConfig+0x1cc>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a2b      	ldr	r2, [pc, #172]	; (800a7d4 <UART_AdvFeatureConfig+0x258>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d00e      	beq.n	800a748 <UART_AdvFeatureConfig+0x1cc>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a2a      	ldr	r2, [pc, #168]	; (800a7d8 <UART_AdvFeatureConfig+0x25c>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d009      	beq.n	800a748 <UART_AdvFeatureConfig+0x1cc>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a28      	ldr	r2, [pc, #160]	; (800a7dc <UART_AdvFeatureConfig+0x260>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d004      	beq.n	800a748 <UART_AdvFeatureConfig+0x1cc>
 800a73e:	f640 4115 	movw	r1, #3093	; 0xc15
 800a742:	4822      	ldr	r0, [pc, #136]	; (800a7cc <UART_AdvFeatureConfig+0x250>)
 800a744:	f7f7 fff5 	bl	8002732 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d009      	beq.n	800a764 <UART_AdvFeatureConfig+0x1e8>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a758:	d004      	beq.n	800a764 <UART_AdvFeatureConfig+0x1e8>
 800a75a:	f640 4116 	movw	r1, #3094	; 0xc16
 800a75e:	481b      	ldr	r0, [pc, #108]	; (800a7cc <UART_AdvFeatureConfig+0x250>)
 800a760:	f7f7 ffe7 	bl	8002732 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	430a      	orrs	r2, r1
 800a778:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a782:	d12d      	bne.n	800a7e0 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d013      	beq.n	800a7b4 <UART_AdvFeatureConfig+0x238>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a790:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a794:	d00e      	beq.n	800a7b4 <UART_AdvFeatureConfig+0x238>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a79a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a79e:	d009      	beq.n	800a7b4 <UART_AdvFeatureConfig+0x238>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a7a8:	d004      	beq.n	800a7b4 <UART_AdvFeatureConfig+0x238>
 800a7aa:	f640 411b 	movw	r1, #3099	; 0xc1b
 800a7ae:	4807      	ldr	r0, [pc, #28]	; (800a7cc <UART_AdvFeatureConfig+0x250>)
 800a7b0:	f7f7 ffbf 	bl	8002732 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	430a      	orrs	r2, r1
 800a7c8:	605a      	str	r2, [r3, #4]
 800a7ca:	e009      	b.n	800a7e0 <UART_AdvFeatureConfig+0x264>
 800a7cc:	080162f4 	.word	0x080162f4
 800a7d0:	40011000 	.word	0x40011000
 800a7d4:	40004400 	.word	0x40004400
 800a7d8:	40004800 	.word	0x40004800
 800a7dc:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d018      	beq.n	800a81e <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d009      	beq.n	800a808 <UART_AdvFeatureConfig+0x28c>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a7fc:	d004      	beq.n	800a808 <UART_AdvFeatureConfig+0x28c>
 800a7fe:	f640 4123 	movw	r1, #3107	; 0xc23
 800a802:	4809      	ldr	r0, [pc, #36]	; (800a828 <UART_AdvFeatureConfig+0x2ac>)
 800a804:	f7f7 ff95 	bl	8002732 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	430a      	orrs	r2, r1
 800a81c:	605a      	str	r2, [r3, #4]
  }
}
 800a81e:	bf00      	nop
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	080162f4 	.word	0x080162f4

0800a82c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af02      	add	r7, sp, #8
 800a832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a83c:	f7f8 fd2c 	bl	8003298 <HAL_GetTick>
 800a840:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0308 	and.w	r3, r3, #8
 800a84c:	2b08      	cmp	r3, #8
 800a84e:	d10e      	bne.n	800a86e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a850:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f81b 	bl	800a89a <UART_WaitOnFlagUntilTimeout>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e011      	b.n	800a892 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2220      	movs	r2, #32
 800a872:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2220      	movs	r2, #32
 800a878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3710      	adds	r7, #16
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b09c      	sub	sp, #112	; 0x70
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	60f8      	str	r0, [r7, #12]
 800a8a2:	60b9      	str	r1, [r7, #8]
 800a8a4:	603b      	str	r3, [r7, #0]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8aa:	e0a7      	b.n	800a9fc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b2:	f000 80a3 	beq.w	800a9fc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8b6:	f7f8 fcef 	bl	8003298 <HAL_GetTick>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	1ad3      	subs	r3, r2, r3
 800a8c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d302      	bcc.n	800a8cc <UART_WaitOnFlagUntilTimeout+0x32>
 800a8c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d13f      	bne.n	800a94c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8d4:	e853 3f00 	ldrex	r3, [r3]
 800a8d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a8da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a8e0:	667b      	str	r3, [r7, #100]	; 0x64
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a8f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a8f2:	e841 2300 	strex	r3, r2, [r1]
 800a8f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a8f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1e6      	bne.n	800a8cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	3308      	adds	r3, #8
 800a904:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a908:	e853 3f00 	ldrex	r3, [r3]
 800a90c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a910:	f023 0301 	bic.w	r3, r3, #1
 800a914:	663b      	str	r3, [r7, #96]	; 0x60
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3308      	adds	r3, #8
 800a91c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a91e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a920:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a922:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a926:	e841 2300 	strex	r3, r2, [r1]
 800a92a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a92c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1e5      	bne.n	800a8fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2220      	movs	r2, #32
 800a936:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2220      	movs	r2, #32
 800a93c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a948:	2303      	movs	r3, #3
 800a94a:	e068      	b.n	800aa1e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 0304 	and.w	r3, r3, #4
 800a956:	2b00      	cmp	r3, #0
 800a958:	d050      	beq.n	800a9fc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	69db      	ldr	r3, [r3, #28]
 800a960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a968:	d148      	bne.n	800a9fc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a972:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97c:	e853 3f00 	ldrex	r3, [r3]
 800a980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a984:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a988:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a992:	637b      	str	r3, [r7, #52]	; 0x34
 800a994:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a996:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a99a:	e841 2300 	strex	r3, r2, [r1]
 800a99e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1e6      	bne.n	800a974 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	3308      	adds	r3, #8
 800a9ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	e853 3f00 	ldrex	r3, [r3]
 800a9b4:	613b      	str	r3, [r7, #16]
   return(result);
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	f023 0301 	bic.w	r3, r3, #1
 800a9bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	3308      	adds	r3, #8
 800a9c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a9c6:	623a      	str	r2, [r7, #32]
 800a9c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ca:	69f9      	ldr	r1, [r7, #28]
 800a9cc:	6a3a      	ldr	r2, [r7, #32]
 800a9ce:	e841 2300 	strex	r3, r2, [r1]
 800a9d2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1e5      	bne.n	800a9a6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2220      	movs	r2, #32
 800a9de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2220      	movs	r2, #32
 800a9e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2220      	movs	r2, #32
 800a9ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	e010      	b.n	800aa1e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	69da      	ldr	r2, [r3, #28]
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	4013      	ands	r3, r2
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	bf0c      	ite	eq
 800aa0c:	2301      	moveq	r3, #1
 800aa0e:	2300      	movne	r3, #0
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	461a      	mov	r2, r3
 800aa14:	79fb      	ldrb	r3, [r7, #7]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	f43f af48 	beq.w	800a8ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3770      	adds	r7, #112	; 0x70
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b095      	sub	sp, #84	; 0x54
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa36:	e853 3f00 	ldrex	r3, [r3]
 800aa3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	461a      	mov	r2, r3
 800aa4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa4c:	643b      	str	r3, [r7, #64]	; 0x40
 800aa4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa54:	e841 2300 	strex	r3, r2, [r1]
 800aa58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1e6      	bne.n	800aa2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	3308      	adds	r3, #8
 800aa66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa68:	6a3b      	ldr	r3, [r7, #32]
 800aa6a:	e853 3f00 	ldrex	r3, [r3]
 800aa6e:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	f023 0301 	bic.w	r3, r3, #1
 800aa76:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	3308      	adds	r3, #8
 800aa7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa80:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa88:	e841 2300 	strex	r3, r2, [r1]
 800aa8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1e5      	bne.n	800aa60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d118      	bne.n	800aace <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	e853 3f00 	ldrex	r3, [r3]
 800aaa8:	60bb      	str	r3, [r7, #8]
   return(result);
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	f023 0310 	bic.w	r3, r3, #16
 800aab0:	647b      	str	r3, [r7, #68]	; 0x44
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaba:	61bb      	str	r3, [r7, #24]
 800aabc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aabe:	6979      	ldr	r1, [r7, #20]
 800aac0:	69ba      	ldr	r2, [r7, #24]
 800aac2:	e841 2300 	strex	r3, r2, [r1]
 800aac6:	613b      	str	r3, [r7, #16]
   return(result);
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1e6      	bne.n	800aa9c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2220      	movs	r2, #32
 800aad2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	669a      	str	r2, [r3, #104]	; 0x68
}
 800aae2:	bf00      	nop
 800aae4:	3754      	adds	r7, #84	; 0x54
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b084      	sub	sp, #16
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f7ff fa29 	bl	8009f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab12:	bf00      	nop
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b088      	sub	sp, #32
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	e853 3f00 	ldrex	r3, [r3]
 800ab2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab36:	61fb      	str	r3, [r7, #28]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	61bb      	str	r3, [r7, #24]
 800ab42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab44:	6979      	ldr	r1, [r7, #20]
 800ab46:	69ba      	ldr	r2, [r7, #24]
 800ab48:	e841 2300 	strex	r3, r2, [r1]
 800ab4c:	613b      	str	r3, [r7, #16]
   return(result);
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1e6      	bne.n	800ab22 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2220      	movs	r2, #32
 800ab58:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f7ff f9f5 	bl	8009f50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab66:	bf00      	nop
 800ab68:	3720      	adds	r7, #32
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b084      	sub	sp, #16
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
 800ab76:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800ab7c:	6839      	ldr	r1, [r7, #0]
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f001 fce1 	bl	800c546 <VL53L0X_get_offset_calibration_data_micro_meter>
 800ab84:	4603      	mov	r3, r0
 800ab86:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800ab88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3710      	adds	r7, #16
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800ab94:	b5b0      	push	{r4, r5, r7, lr}
 800ab96:	b096      	sub	sp, #88	; 0x58
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800aba2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d107      	bne.n	800abba <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800abaa:	2200      	movs	r2, #0
 800abac:	2188      	movs	r1, #136	; 0x88
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f004 feda 	bl	800f968 <VL53L0X_WrByte>
 800abb4:	4603      	mov	r3, r0
 800abb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800abc8:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800abd2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a9e      	ldr	r2, [pc, #632]	; (800ae54 <VL53L0X_DataInit+0x2c0>)
 800abda:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a9d      	ldr	r2, [pc, #628]	; (800ae58 <VL53L0X_DataInit+0x2c4>)
 800abe2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800abec:	f107 0310 	add.w	r3, r7, #16
 800abf0:	4619      	mov	r1, r3
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 fac2 	bl	800b17c <VL53L0X_GetDeviceParameters>
 800abf8:	4603      	mov	r3, r0
 800abfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800abfe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d112      	bne.n	800ac2c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800ac06:	2300      	movs	r3, #0
 800ac08:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f103 0410 	add.w	r4, r3, #16
 800ac14:	f107 0510 	add.w	r5, r7, #16
 800ac18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ac28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2264      	movs	r2, #100	; 0x64
 800ac30:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f44f 7261 	mov.w	r2, #900	; 0x384
 800ac3a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ac44:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800ac4e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	2180      	movs	r1, #128	; 0x80
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f004 fe82 	bl	800f968 <VL53L0X_WrByte>
 800ac64:	4603      	mov	r3, r0
 800ac66:	461a      	mov	r2, r3
 800ac68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ac72:	2201      	movs	r2, #1
 800ac74:	21ff      	movs	r1, #255	; 0xff
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f004 fe76 	bl	800f968 <VL53L0X_WrByte>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	461a      	mov	r2, r3
 800ac80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac84:	4313      	orrs	r3, r2
 800ac86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f004 fe6a 	bl	800f968 <VL53L0X_WrByte>
 800ac94:	4603      	mov	r3, r0
 800ac96:	461a      	mov	r2, r3
 800ac98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800aca2:	f107 030f 	add.w	r3, r7, #15
 800aca6:	461a      	mov	r2, r3
 800aca8:	2191      	movs	r1, #145	; 0x91
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f004 fede 	bl	800fa6c <VL53L0X_RdByte>
 800acb0:	4603      	mov	r3, r0
 800acb2:	461a      	mov	r2, r3
 800acb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acb8:	4313      	orrs	r3, r2
 800acba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800acbe:	7bfa      	ldrb	r2, [r7, #15]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800acc6:	2201      	movs	r2, #1
 800acc8:	2100      	movs	r1, #0
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f004 fe4c 	bl	800f968 <VL53L0X_WrByte>
 800acd0:	4603      	mov	r3, r0
 800acd2:	461a      	mov	r2, r3
 800acd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acd8:	4313      	orrs	r3, r2
 800acda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800acde:	2200      	movs	r2, #0
 800ace0:	21ff      	movs	r1, #255	; 0xff
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f004 fe40 	bl	800f968 <VL53L0X_WrByte>
 800ace8:	4603      	mov	r3, r0
 800acea:	461a      	mov	r2, r3
 800acec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acf0:	4313      	orrs	r3, r2
 800acf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800acf6:	2200      	movs	r2, #0
 800acf8:	2180      	movs	r1, #128	; 0x80
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f004 fe34 	bl	800f968 <VL53L0X_WrByte>
 800ad00:	4603      	mov	r3, r0
 800ad02:	461a      	mov	r2, r3
 800ad04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800ad0e:	2300      	movs	r3, #0
 800ad10:	653b      	str	r3, [r7, #80]	; 0x50
 800ad12:	e014      	b.n	800ad3e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800ad14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d114      	bne.n	800ad46 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800ad1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	2201      	movs	r2, #1
 800ad22:	4619      	mov	r1, r3
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fd35 	bl	800b794 <VL53L0X_SetLimitCheckEnable>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad32:	4313      	orrs	r3, r2
 800ad34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800ad38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	653b      	str	r3, [r7, #80]	; 0x50
 800ad3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad40:	2b05      	cmp	r3, #5
 800ad42:	dde7      	ble.n	800ad14 <VL53L0X_DataInit+0x180>
 800ad44:	e000      	b.n	800ad48 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800ad46:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800ad48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d107      	bne.n	800ad60 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800ad50:	2200      	movs	r2, #0
 800ad52:	2102      	movs	r1, #2
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fd1d 	bl	800b794 <VL53L0X_SetLimitCheckEnable>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800ad60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d107      	bne.n	800ad78 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800ad68:	2200      	movs	r2, #0
 800ad6a:	2103      	movs	r1, #3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fd11 	bl	800b794 <VL53L0X_SetLimitCheckEnable>
 800ad72:	4603      	mov	r3, r0
 800ad74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800ad78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d107      	bne.n	800ad90 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800ad80:	2200      	movs	r2, #0
 800ad82:	2104      	movs	r1, #4
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fd05 	bl	800b794 <VL53L0X_SetLimitCheckEnable>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800ad90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d107      	bne.n	800ada8 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800ad98:	2200      	movs	r2, #0
 800ad9a:	2105      	movs	r1, #5
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fcf9 	bl	800b794 <VL53L0X_SetLimitCheckEnable>
 800ada2:	4603      	mov	r3, r0
 800ada4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800ada8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800adac:	2b00      	cmp	r3, #0
 800adae:	d108      	bne.n	800adc2 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800adb0:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800adb4:	2100      	movs	r1, #0
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fd9c 	bl	800b8f4 <VL53L0X_SetLimitCheckValue>
 800adbc:	4603      	mov	r3, r0
 800adbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800adc2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d108      	bne.n	800addc <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800adca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800adce:	2101      	movs	r1, #1
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fd8f 	bl	800b8f4 <VL53L0X_SetLimitCheckValue>
 800add6:	4603      	mov	r3, r0
 800add8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800addc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d108      	bne.n	800adf6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800ade4:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800ade8:	2102      	movs	r1, #2
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 fd82 	bl	800b8f4 <VL53L0X_SetLimitCheckValue>
 800adf0:	4603      	mov	r3, r0
 800adf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800adf6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d107      	bne.n	800ae0e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800adfe:	2200      	movs	r2, #0
 800ae00:	2103      	movs	r1, #3
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 fd76 	bl	800b8f4 <VL53L0X_SetLimitCheckValue>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ae0e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10f      	bne.n	800ae36 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	22ff      	movs	r2, #255	; 0xff
 800ae1a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ae1e:	22ff      	movs	r2, #255	; 0xff
 800ae20:	2101      	movs	r1, #1
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f004 fda0 	bl	800f968 <VL53L0X_WrByte>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2201      	movs	r2, #1
 800ae32:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800ae36:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d103      	bne.n	800ae46 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800ae46:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3758      	adds	r7, #88	; 0x58
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bdb0      	pop	{r4, r5, r7, pc}
 800ae52:	bf00      	nop
 800ae54:	00016b85 	.word	0x00016b85
 800ae58:	000970a4 	.word	0x000970a4

0800ae5c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800ae5c:	b5b0      	push	{r4, r5, r7, lr}
 800ae5e:	b09e      	sub	sp, #120	; 0x78
 800ae60:	af02      	add	r7, sp, #8
 800ae62:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae64:	2300      	movs	r3, #0
 800ae66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800ae6a:	f107 031c 	add.w	r3, r7, #28
 800ae6e:	2240      	movs	r2, #64	; 0x40
 800ae70:	2100      	movs	r1, #0
 800ae72:	4618      	mov	r0, r3
 800ae74:	f004 fee0 	bl	800fc38 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800ae80:	2300      	movs	r3, #0
 800ae82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800ae86:	2300      	movs	r3, #0
 800ae88:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800ae92:	2300      	movs	r3, #0
 800ae94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800ae98:	2101      	movs	r1, #1
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f002 faa9 	bl	800d3f2 <VL53L0X_get_info_from_device>
 800aea0:	4603      	mov	r3, r0
 800aea2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800aeac:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800aeb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800aeb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d80d      	bhi.n	800aedc <VL53L0X_StaticInit+0x80>
 800aec0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d102      	bne.n	800aece <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800aec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aeca:	2b20      	cmp	r3, #32
 800aecc:	d806      	bhi.n	800aedc <VL53L0X_StaticInit+0x80>
 800aece:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d10e      	bne.n	800aef4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800aed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aed8:	2b0c      	cmp	r3, #12
 800aeda:	d90b      	bls.n	800aef4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800aedc:	f107 0218 	add.w	r2, r7, #24
 800aee0:	f107 0314 	add.w	r3, r7, #20
 800aee4:	4619      	mov	r1, r3
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f001 fd28 	bl	800c93c <VL53L0X_perform_ref_spad_management>
 800aeec:	4603      	mov	r3, r0
 800aeee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800aef2:	e009      	b.n	800af08 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800aef4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aef8:	461a      	mov	r2, r3
 800aefa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f001 ff29 	bl	800cd54 <VL53L0X_set_reference_spads>
 800af02:	4603      	mov	r3, r0
 800af04:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800af08:	4b94      	ldr	r3, [pc, #592]	; (800b15c <VL53L0X_StaticInit+0x300>)
 800af0a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800af0c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800af10:	2b00      	cmp	r3, #0
 800af12:	d10f      	bne.n	800af34 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800af1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800af1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800af22:	2b00      	cmp	r3, #0
 800af24:	d104      	bne.n	800af30 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800af2c:	66bb      	str	r3, [r7, #104]	; 0x68
 800af2e:	e001      	b.n	800af34 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800af30:	4b8a      	ldr	r3, [pc, #552]	; (800b15c <VL53L0X_StaticInit+0x300>)
 800af32:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800af34:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d106      	bne.n	800af4a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800af3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f003 fdfc 	bl	800eb3c <VL53L0X_load_tuning_settings>
 800af44:	4603      	mov	r3, r0
 800af46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800af4a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d10a      	bne.n	800af68 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800af52:	2300      	movs	r3, #0
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	2304      	movs	r3, #4
 800af58:	2200      	movs	r2, #0
 800af5a:	2100      	movs	r1, #0
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f001 f8f1 	bl	800c144 <VL53L0X_SetGpioConfig>
 800af62:	4603      	mov	r3, r0
 800af64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800af68:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d121      	bne.n	800afb4 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800af70:	2201      	movs	r2, #1
 800af72:	21ff      	movs	r1, #255	; 0xff
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f004 fcf7 	bl	800f968 <VL53L0X_WrByte>
 800af7a:	4603      	mov	r3, r0
 800af7c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800af80:	f107 031a 	add.w	r3, r7, #26
 800af84:	461a      	mov	r2, r3
 800af86:	2184      	movs	r1, #132	; 0x84
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f004 fd99 	bl	800fac0 <VL53L0X_RdWord>
 800af8e:	4603      	mov	r3, r0
 800af90:	461a      	mov	r2, r3
 800af92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800af96:	4313      	orrs	r3, r2
 800af98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800af9c:	2200      	movs	r2, #0
 800af9e:	21ff      	movs	r1, #255	; 0xff
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f004 fce1 	bl	800f968 <VL53L0X_WrByte>
 800afa6:	4603      	mov	r3, r0
 800afa8:	461a      	mov	r2, r3
 800afaa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800afae:	4313      	orrs	r3, r2
 800afb0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800afb4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d105      	bne.n	800afc8 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800afbc:	8b7b      	ldrh	r3, [r7, #26]
 800afbe:	011b      	lsls	r3, r3, #4
 800afc0:	461a      	mov	r2, r3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800afc8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d108      	bne.n	800afe2 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800afd0:	f107 031c 	add.w	r3, r7, #28
 800afd4:	4619      	mov	r1, r3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f8d0 	bl	800b17c <VL53L0X_GetDeviceParameters>
 800afdc:	4603      	mov	r3, r0
 800afde:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800afe2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d110      	bne.n	800b00c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800afea:	f107 0319 	add.w	r3, r7, #25
 800afee:	4619      	mov	r1, r3
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 f992 	bl	800b31a <VL53L0X_GetFractionEnable>
 800aff6:	4603      	mov	r3, r0
 800aff8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800affc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b000:	2b00      	cmp	r3, #0
 800b002:	d103      	bne.n	800b00c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800b004:	7e7a      	ldrb	r2, [r7, #25]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800b00c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10e      	bne.n	800b032 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f103 0410 	add.w	r4, r3, #16
 800b01a:	f107 051c 	add.w	r5, r7, #28
 800b01e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b02a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b02e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800b032:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b036:	2b00      	cmp	r3, #0
 800b038:	d111      	bne.n	800b05e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800b03a:	f107 0319 	add.w	r3, r7, #25
 800b03e:	461a      	mov	r2, r3
 800b040:	2101      	movs	r1, #1
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f004 fd12 	bl	800fa6c <VL53L0X_RdByte>
 800b048:	4603      	mov	r3, r0
 800b04a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800b04e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b052:	2b00      	cmp	r3, #0
 800b054:	d103      	bne.n	800b05e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800b056:	7e7a      	ldrb	r2, [r7, #25]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800b05e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b062:	2b00      	cmp	r3, #0
 800b064:	d107      	bne.n	800b076 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b066:	2200      	movs	r2, #0
 800b068:	2100      	movs	r1, #0
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f9ca 	bl	800b404 <VL53L0X_SetSequenceStepEnable>
 800b070:	4603      	mov	r3, r0
 800b072:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b076:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d107      	bne.n	800b08e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b07e:	2200      	movs	r2, #0
 800b080:	2102      	movs	r1, #2
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f9be 	bl	800b404 <VL53L0X_SetSequenceStepEnable>
 800b088:	4603      	mov	r3, r0
 800b08a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800b08e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b092:	2b00      	cmp	r3, #0
 800b094:	d103      	bne.n	800b09e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2203      	movs	r2, #3
 800b09a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b09e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d109      	bne.n	800b0ba <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b0a6:	f107 0313 	add.w	r3, r7, #19
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 f990 	bl	800b3d4 <VL53L0X_GetVcselPulsePeriod>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b0ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d103      	bne.n	800b0ca <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b0c2:	7cfa      	ldrb	r2, [r7, #19]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b0ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d109      	bne.n	800b0e6 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b0d2:	f107 0313 	add.w	r3, r7, #19
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	2101      	movs	r1, #1
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 f97a 	bl	800b3d4 <VL53L0X_GetVcselPulsePeriod>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b0e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d103      	bne.n	800b0f6 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b0ee:	7cfa      	ldrb	r2, [r7, #19]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b0f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d109      	bne.n	800b112 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800b0fe:	f107 030c 	add.w	r3, r7, #12
 800b102:	461a      	mov	r2, r3
 800b104:	2103      	movs	r1, #3
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f002 fef4 	bl	800def4 <get_sequence_step_timeout>
 800b10c:	4603      	mov	r3, r0
 800b10e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b112:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b116:	2b00      	cmp	r3, #0
 800b118:	d103      	bne.n	800b122 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b122:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b126:	2b00      	cmp	r3, #0
 800b128:	d109      	bne.n	800b13e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800b12a:	f107 030c 	add.w	r3, r7, #12
 800b12e:	461a      	mov	r2, r3
 800b130:	2104      	movs	r1, #4
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f002 fede 	bl	800def4 <get_sequence_step_timeout>
 800b138:	4603      	mov	r3, r0
 800b13a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b13e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b142:	2b00      	cmp	r3, #0
 800b144:	d103      	bne.n	800b14e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b14e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800b152:	4618      	mov	r0, r3
 800b154:	3770      	adds	r7, #112	; 0x70
 800b156:	46bd      	mov	sp, r7
 800b158:	bdb0      	pop	{r4, r5, r7, pc}
 800b15a:	bf00      	nop
 800b15c:	20000124 	.word	0x20000124

0800b160 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800b168:	239d      	movs	r3, #157	; 0x9d
 800b16a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800b16c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b186:	2300      	movs	r3, #0
 800b188:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f8b0 	bl	800b2f4 <VL53L0X_GetDeviceMode>
 800b194:	4603      	mov	r3, r0
 800b196:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d107      	bne.n	800b1b0 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	3308      	adds	r3, #8
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fa78 	bl	800b69c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800b1b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d102      	bne.n	800b1be <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800b1be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d107      	bne.n	800b1d6 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	3310      	adds	r3, #16
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 faae 	bl	800b72e <VL53L0X_GetXTalkCompensationRateMegaCps>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800b1d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d107      	bne.n	800b1ee <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	3314      	adds	r3, #20
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7ff fcc2 	bl	800ab6e <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800b1ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d134      	bne.n	800b260 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	60bb      	str	r3, [r7, #8]
 800b1fa:	e02a      	b.n	800b252 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b1fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d12a      	bne.n	800b25a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	b299      	uxth	r1, r3
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	3308      	adds	r3, #8
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	4413      	add	r3, r2
 800b212:	3304      	adds	r3, #4
 800b214:	461a      	mov	r2, r3
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 fbce 	bl	800b9b8 <VL53L0X_GetLimitCheckValue>
 800b21c:	4603      	mov	r3, r0
 800b21e:	461a      	mov	r2, r3
 800b220:	7bfb      	ldrb	r3, [r7, #15]
 800b222:	4313      	orrs	r3, r2
 800b224:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d117      	bne.n	800b25e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	b299      	uxth	r1, r3
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	3318      	adds	r3, #24
 800b236:	683a      	ldr	r2, [r7, #0]
 800b238:	4413      	add	r3, r2
 800b23a:	461a      	mov	r2, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 fb35 	bl	800b8ac <VL53L0X_GetLimitCheckEnable>
 800b242:	4603      	mov	r3, r0
 800b244:	461a      	mov	r2, r3
 800b246:	7bfb      	ldrb	r3, [r7, #15]
 800b248:	4313      	orrs	r3, r2
 800b24a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	3301      	adds	r3, #1
 800b250:	60bb      	str	r3, [r7, #8]
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	2b05      	cmp	r3, #5
 800b256:	ddd1      	ble.n	800b1fc <VL53L0X_GetDeviceParameters+0x80>
 800b258:	e002      	b.n	800b260 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800b25a:	bf00      	nop
 800b25c:	e000      	b.n	800b260 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800b25e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d107      	bne.n	800b278 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	333c      	adds	r3, #60	; 0x3c
 800b26c:	4619      	mov	r1, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 fc30 	bl	800bad4 <VL53L0X_GetWrapAroundCheckEnable>
 800b274:	4603      	mov	r3, r0
 800b276:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800b278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d107      	bne.n	800b290 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	3304      	adds	r3, #4
 800b284:	4619      	mov	r1, r3
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 f879 	bl	800b37e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800b28c:	4603      	mov	r3, r0
 800b28e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b290:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b085      	sub	sp, #20
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800b2ac:	78fb      	ldrb	r3, [r7, #3]
 800b2ae:	2b15      	cmp	r3, #21
 800b2b0:	bf8c      	ite	hi
 800b2b2:	2201      	movhi	r2, #1
 800b2b4:	2200      	movls	r2, #0
 800b2b6:	b2d2      	uxtb	r2, r2
 800b2b8:	2a00      	cmp	r2, #0
 800b2ba:	d10e      	bne.n	800b2da <VL53L0X_SetDeviceMode+0x3e>
 800b2bc:	2201      	movs	r2, #1
 800b2be:	409a      	lsls	r2, r3
 800b2c0:	4b0b      	ldr	r3, [pc, #44]	; (800b2f0 <VL53L0X_SetDeviceMode+0x54>)
 800b2c2:	4013      	ands	r3, r2
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	bf14      	ite	ne
 800b2c8:	2301      	movne	r3, #1
 800b2ca:	2300      	moveq	r3, #0
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d003      	beq.n	800b2da <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	78fa      	ldrb	r2, [r7, #3]
 800b2d6:	741a      	strb	r2, [r3, #16]
		break;
 800b2d8:	e001      	b.n	800b2de <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b2da:	23f8      	movs	r3, #248	; 0xf8
 800b2dc:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b2de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3714      	adds	r7, #20
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop
 800b2f0:	0030000b 	.word	0x0030000b

0800b2f4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2fe:	2300      	movs	r3, #0
 800b300:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	7c1a      	ldrb	r2, [r3, #16]
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b30a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b084      	sub	sp, #16
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b324:	2300      	movs	r3, #0
 800b326:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	2109      	movs	r1, #9
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f004 fb9d 	bl	800fa6c <VL53L0X_RdByte>
 800b332:	4603      	mov	r3, r0
 800b334:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d106      	bne.n	800b34c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	f003 0301 	and.w	r3, r3, #1
 800b346:	b2da      	uxtb	r2, r3
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b34c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b362:	2300      	movs	r3, #0
 800b364:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800b366:	6839      	ldr	r1, [r7, #0]
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f003 fa56 	bl	800e81a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800b36e:	4603      	mov	r3, r0
 800b370:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800b372:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b084      	sub	sp, #16
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
 800b386:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b388:	2300      	movs	r3, #0
 800b38a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800b38c:	6839      	ldr	r1, [r7, #0]
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f003 fb23 	bl	800e9da <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800b394:	4603      	mov	r3, r0
 800b396:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800b398:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	70fb      	strb	r3, [r7, #3]
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800b3b8:	78ba      	ldrb	r2, [r7, #2]
 800b3ba:	78fb      	ldrb	r3, [r7, #3]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f002 ff6b 	bl	800e29a <VL53L0X_set_vcsel_pulse_period>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800b3c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b086      	sub	sp, #24
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	460b      	mov	r3, r1
 800b3de:	607a      	str	r2, [r7, #4]
 800b3e0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800b3e6:	7afb      	ldrb	r3, [r7, #11]
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f003 f9dd 	bl	800e7ac <VL53L0X_get_vcsel_pulse_period>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800b3f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3718      	adds	r7, #24
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
	...

0800b404 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b086      	sub	sp, #24
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	70fb      	strb	r3, [r7, #3]
 800b410:	4613      	mov	r3, r2
 800b412:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b414:	2300      	movs	r3, #0
 800b416:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b418:	2300      	movs	r3, #0
 800b41a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800b41c:	2300      	movs	r3, #0
 800b41e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b420:	f107 030f 	add.w	r3, r7, #15
 800b424:	461a      	mov	r2, r3
 800b426:	2101      	movs	r1, #1
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f004 fb1f 	bl	800fa6c <VL53L0X_RdByte>
 800b42e:	4603      	mov	r3, r0
 800b430:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800b432:	7bfb      	ldrb	r3, [r7, #15]
 800b434:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800b436:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d15a      	bne.n	800b4f4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800b43e:	78bb      	ldrb	r3, [r7, #2]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d12b      	bne.n	800b49c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800b444:	78fb      	ldrb	r3, [r7, #3]
 800b446:	2b04      	cmp	r3, #4
 800b448:	d825      	bhi.n	800b496 <VL53L0X_SetSequenceStepEnable+0x92>
 800b44a:	a201      	add	r2, pc, #4	; (adr r2, 800b450 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800b44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b450:	0800b465 	.word	0x0800b465
 800b454:	0800b46f 	.word	0x0800b46f
 800b458:	0800b479 	.word	0x0800b479
 800b45c:	0800b483 	.word	0x0800b483
 800b460:	0800b48d 	.word	0x0800b48d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800b464:	7dbb      	ldrb	r3, [r7, #22]
 800b466:	f043 0310 	orr.w	r3, r3, #16
 800b46a:	75bb      	strb	r3, [r7, #22]
				break;
 800b46c:	e043      	b.n	800b4f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800b46e:	7dbb      	ldrb	r3, [r7, #22]
 800b470:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800b474:	75bb      	strb	r3, [r7, #22]
				break;
 800b476:	e03e      	b.n	800b4f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800b478:	7dbb      	ldrb	r3, [r7, #22]
 800b47a:	f043 0304 	orr.w	r3, r3, #4
 800b47e:	75bb      	strb	r3, [r7, #22]
				break;
 800b480:	e039      	b.n	800b4f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800b482:	7dbb      	ldrb	r3, [r7, #22]
 800b484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b488:	75bb      	strb	r3, [r7, #22]
				break;
 800b48a:	e034      	b.n	800b4f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800b48c:	7dbb      	ldrb	r3, [r7, #22]
 800b48e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b492:	75bb      	strb	r3, [r7, #22]
				break;
 800b494:	e02f      	b.n	800b4f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b496:	23fc      	movs	r3, #252	; 0xfc
 800b498:	75fb      	strb	r3, [r7, #23]
 800b49a:	e02c      	b.n	800b4f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800b49c:	78fb      	ldrb	r3, [r7, #3]
 800b49e:	2b04      	cmp	r3, #4
 800b4a0:	d825      	bhi.n	800b4ee <VL53L0X_SetSequenceStepEnable+0xea>
 800b4a2:	a201      	add	r2, pc, #4	; (adr r2, 800b4a8 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800b4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a8:	0800b4bd 	.word	0x0800b4bd
 800b4ac:	0800b4c7 	.word	0x0800b4c7
 800b4b0:	0800b4d1 	.word	0x0800b4d1
 800b4b4:	0800b4db 	.word	0x0800b4db
 800b4b8:	0800b4e5 	.word	0x0800b4e5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800b4bc:	7dbb      	ldrb	r3, [r7, #22]
 800b4be:	f023 0310 	bic.w	r3, r3, #16
 800b4c2:	75bb      	strb	r3, [r7, #22]
				break;
 800b4c4:	e017      	b.n	800b4f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800b4c6:	7dbb      	ldrb	r3, [r7, #22]
 800b4c8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800b4cc:	75bb      	strb	r3, [r7, #22]
				break;
 800b4ce:	e012      	b.n	800b4f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800b4d0:	7dbb      	ldrb	r3, [r7, #22]
 800b4d2:	f023 0304 	bic.w	r3, r3, #4
 800b4d6:	75bb      	strb	r3, [r7, #22]
				break;
 800b4d8:	e00d      	b.n	800b4f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800b4da:	7dbb      	ldrb	r3, [r7, #22]
 800b4dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4e0:	75bb      	strb	r3, [r7, #22]
				break;
 800b4e2:	e008      	b.n	800b4f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800b4e4:	7dbb      	ldrb	r3, [r7, #22]
 800b4e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4ea:	75bb      	strb	r3, [r7, #22]
				break;
 800b4ec:	e003      	b.n	800b4f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b4ee:	23fc      	movs	r3, #252	; 0xfc
 800b4f0:	75fb      	strb	r3, [r7, #23]
 800b4f2:	e000      	b.n	800b4f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800b4f4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800b4f6:	7bfb      	ldrb	r3, [r7, #15]
 800b4f8:	7dba      	ldrb	r2, [r7, #22]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d01e      	beq.n	800b53c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800b4fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d107      	bne.n	800b516 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800b506:	7dbb      	ldrb	r3, [r7, #22]
 800b508:	461a      	mov	r2, r3
 800b50a:	2101      	movs	r1, #1
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f004 fa2b 	bl	800f968 <VL53L0X_WrByte>
 800b512:	4603      	mov	r3, r0
 800b514:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800b516:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d103      	bne.n	800b526 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	7dba      	ldrb	r2, [r7, #22]
 800b522:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800b526:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d106      	bne.n	800b53c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	695b      	ldr	r3, [r3, #20]
 800b532:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800b534:	6939      	ldr	r1, [r7, #16]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7ff ff0e 	bl	800b358 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800b53c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3718      	adds	r7, #24
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800b548:	b480      	push	{r7}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	607b      	str	r3, [r7, #4]
 800b552:	460b      	mov	r3, r1
 800b554:	72fb      	strb	r3, [r7, #11]
 800b556:	4613      	mov	r3, r2
 800b558:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b55a:	2300      	movs	r3, #0
 800b55c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800b564:	7afb      	ldrb	r3, [r7, #11]
 800b566:	2b04      	cmp	r3, #4
 800b568:	d836      	bhi.n	800b5d8 <sequence_step_enabled+0x90>
 800b56a:	a201      	add	r2, pc, #4	; (adr r2, 800b570 <sequence_step_enabled+0x28>)
 800b56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b570:	0800b585 	.word	0x0800b585
 800b574:	0800b597 	.word	0x0800b597
 800b578:	0800b5a9 	.word	0x0800b5a9
 800b57c:	0800b5bb 	.word	0x0800b5bb
 800b580:	0800b5cd 	.word	0x0800b5cd
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800b584:	7abb      	ldrb	r3, [r7, #10]
 800b586:	111b      	asrs	r3, r3, #4
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	f003 0301 	and.w	r3, r3, #1
 800b58e:	b2da      	uxtb	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	701a      	strb	r2, [r3, #0]
		break;
 800b594:	e022      	b.n	800b5dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800b596:	7abb      	ldrb	r3, [r7, #10]
 800b598:	10db      	asrs	r3, r3, #3
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	f003 0301 	and.w	r3, r3, #1
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	701a      	strb	r2, [r3, #0]
		break;
 800b5a6:	e019      	b.n	800b5dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800b5a8:	7abb      	ldrb	r3, [r7, #10]
 800b5aa:	109b      	asrs	r3, r3, #2
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	f003 0301 	and.w	r3, r3, #1
 800b5b2:	b2da      	uxtb	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	701a      	strb	r2, [r3, #0]
		break;
 800b5b8:	e010      	b.n	800b5dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800b5ba:	7abb      	ldrb	r3, [r7, #10]
 800b5bc:	119b      	asrs	r3, r3, #6
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	f003 0301 	and.w	r3, r3, #1
 800b5c4:	b2da      	uxtb	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	701a      	strb	r2, [r3, #0]
		break;
 800b5ca:	e007      	b.n	800b5dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800b5cc:	7abb      	ldrb	r3, [r7, #10]
 800b5ce:	09db      	lsrs	r3, r3, #7
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	701a      	strb	r2, [r3, #0]
		break;
 800b5d6:	e001      	b.n	800b5dc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b5d8:	23fc      	movs	r3, #252	; 0xfc
 800b5da:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b5dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	371c      	adds	r7, #28
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b5fe:	f107 030e 	add.w	r3, r7, #14
 800b602:	461a      	mov	r2, r3
 800b604:	2101      	movs	r1, #1
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f004 fa30 	bl	800fa6c <VL53L0X_RdByte>
 800b60c:	4603      	mov	r3, r0
 800b60e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800b610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d107      	bne.n	800b628 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800b618:	7bba      	ldrb	r2, [r7, #14]
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2100      	movs	r1, #0
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7ff ff92 	bl	800b548 <sequence_step_enabled>
 800b624:	4603      	mov	r3, r0
 800b626:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d108      	bne.n	800b642 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800b630:	7bba      	ldrb	r2, [r7, #14]
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	3302      	adds	r3, #2
 800b636:	2101      	movs	r1, #1
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7ff ff85 	bl	800b548 <sequence_step_enabled>
 800b63e:	4603      	mov	r3, r0
 800b640:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d108      	bne.n	800b65c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800b64a:	7bba      	ldrb	r2, [r7, #14]
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	3301      	adds	r3, #1
 800b650:	2102      	movs	r1, #2
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f7ff ff78 	bl	800b548 <sequence_step_enabled>
 800b658:	4603      	mov	r3, r0
 800b65a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b65c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d108      	bne.n	800b676 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800b664:	7bba      	ldrb	r2, [r7, #14]
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	3303      	adds	r3, #3
 800b66a:	2103      	movs	r1, #3
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f7ff ff6b 	bl	800b548 <sequence_step_enabled>
 800b672:	4603      	mov	r3, r0
 800b674:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d108      	bne.n	800b690 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800b67e:	7bba      	ldrb	r2, [r7, #14]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	3304      	adds	r3, #4
 800b684:	2104      	movs	r1, #4
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7ff ff5e 	bl	800b548 <sequence_step_enabled>
 800b68c:	4603      	mov	r3, r0
 800b68e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b690:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3710      	adds	r7, #16
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800b6aa:	f107 030c 	add.w	r3, r7, #12
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	21f8      	movs	r1, #248	; 0xf8
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f004 fa04 	bl	800fac0 <VL53L0X_RdWord>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800b6bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d108      	bne.n	800b6d6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800b6c4:	f107 0308 	add.w	r3, r7, #8
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	2104      	movs	r1, #4
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f004 fa2f 	bl	800fb30 <VL53L0X_RdDWord>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b6d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10c      	bne.n	800b6f8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800b6de:	89bb      	ldrh	r3, [r7, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d005      	beq.n	800b6f0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	89ba      	ldrh	r2, [r7, #12]
 800b6e8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b6f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3710      	adds	r7, #16
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b70e:	2300      	movs	r3, #0
 800b710:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	7f1b      	ldrb	r3, [r3, #28]
 800b716:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	7bba      	ldrb	r2, [r7, #14]
 800b71c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b71e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3714      	adds	r7, #20
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr

0800b72e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b086      	sub	sp, #24
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
 800b736:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b738:	2300      	movs	r3, #0
 800b73a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800b73c:	f107 030e 	add.w	r3, r7, #14
 800b740:	461a      	mov	r2, r3
 800b742:	2120      	movs	r1, #32
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f004 f9bb 	bl	800fac0 <VL53L0X_RdWord>
 800b74a:	4603      	mov	r3, r0
 800b74c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800b74e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d118      	bne.n	800b788 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800b756:	89fb      	ldrh	r3, [r7, #14]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d109      	bne.n	800b770 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6a1b      	ldr	r3, [r3, #32]
 800b760:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	693a      	ldr	r2, [r7, #16]
 800b766:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	771a      	strb	r2, [r3, #28]
 800b76e:	e00b      	b.n	800b788 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800b770:	89fb      	ldrh	r3, [r7, #14]
 800b772:	00db      	lsls	r3, r3, #3
 800b774:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	693a      	ldr	r2, [r7, #16]
 800b77a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	693a      	ldr	r2, [r7, #16]
 800b780:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2201      	movs	r2, #1
 800b786:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b788:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3718      	adds	r7, #24
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b086      	sub	sp, #24
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	460b      	mov	r3, r1
 800b79e:	807b      	strh	r3, [r7, #2]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b7b4:	887b      	ldrh	r3, [r7, #2]
 800b7b6:	2b05      	cmp	r3, #5
 800b7b8:	d902      	bls.n	800b7c0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b7ba:	23fc      	movs	r3, #252	; 0xfc
 800b7bc:	75fb      	strb	r3, [r7, #23]
 800b7be:	e05b      	b.n	800b878 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800b7c0:	787b      	ldrb	r3, [r7, #1]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d106      	bne.n	800b7d4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	73bb      	strb	r3, [r7, #14]
 800b7d2:	e00a      	b.n	800b7ea <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b7d4:	887b      	ldrh	r3, [r7, #2]
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	330c      	adds	r3, #12
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4413      	add	r3, r2
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800b7ea:	887b      	ldrh	r3, [r7, #2]
 800b7ec:	2b05      	cmp	r3, #5
 800b7ee:	d841      	bhi.n	800b874 <VL53L0X_SetLimitCheckEnable+0xe0>
 800b7f0:	a201      	add	r2, pc, #4	; (adr r2, 800b7f8 <VL53L0X_SetLimitCheckEnable+0x64>)
 800b7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f6:	bf00      	nop
 800b7f8:	0800b811 	.word	0x0800b811
 800b7fc:	0800b81b 	.word	0x0800b81b
 800b800:	0800b831 	.word	0x0800b831
 800b804:	0800b83b 	.word	0x0800b83b
 800b808:	0800b845 	.word	0x0800b845
 800b80c:	0800b85d 	.word	0x0800b85d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	7bfa      	ldrb	r2, [r7, #15]
 800b814:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800b818:	e02e      	b.n	800b878 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800b81e:	b29b      	uxth	r3, r3
 800b820:	461a      	mov	r2, r3
 800b822:	2144      	movs	r1, #68	; 0x44
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f004 f8c3 	bl	800f9b0 <VL53L0X_WrWord>
 800b82a:	4603      	mov	r3, r0
 800b82c:	75fb      	strb	r3, [r7, #23]

			break;
 800b82e:	e023      	b.n	800b878 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	7bfa      	ldrb	r2, [r7, #15]
 800b834:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800b838:	e01e      	b.n	800b878 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	7bfa      	ldrb	r2, [r7, #15]
 800b83e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800b842:	e019      	b.n	800b878 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800b844:	7bbb      	ldrb	r3, [r7, #14]
 800b846:	005b      	lsls	r3, r3, #1
 800b848:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800b84a:	7b7b      	ldrb	r3, [r7, #13]
 800b84c:	22fe      	movs	r2, #254	; 0xfe
 800b84e:	2160      	movs	r1, #96	; 0x60
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f004 f8d7 	bl	800fa04 <VL53L0X_UpdateByte>
 800b856:	4603      	mov	r3, r0
 800b858:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800b85a:	e00d      	b.n	800b878 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800b85c:	7bbb      	ldrb	r3, [r7, #14]
 800b85e:	011b      	lsls	r3, r3, #4
 800b860:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800b862:	7b7b      	ldrb	r3, [r7, #13]
 800b864:	22ef      	movs	r2, #239	; 0xef
 800b866:	2160      	movs	r1, #96	; 0x60
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f004 f8cb 	bl	800fa04 <VL53L0X_UpdateByte>
 800b86e:	4603      	mov	r3, r0
 800b870:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800b872:	e001      	b.n	800b878 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b874:	23fc      	movs	r3, #252	; 0xfc
 800b876:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b878:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10f      	bne.n	800b8a0 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800b880:	787b      	ldrb	r3, [r7, #1]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d106      	bne.n	800b894 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b886:	887b      	ldrh	r3, [r7, #2]
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	4413      	add	r3, r2
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b892:	e005      	b.n	800b8a0 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b894:	887b      	ldrh	r3, [r7, #2]
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	4413      	add	r3, r2
 800b89a:	2201      	movs	r2, #1
 800b89c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b8a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3718      	adds	r7, #24
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b087      	sub	sp, #28
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b8be:	897b      	ldrh	r3, [r7, #10]
 800b8c0:	2b05      	cmp	r3, #5
 800b8c2:	d905      	bls.n	800b8d0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b8c4:	23fc      	movs	r3, #252	; 0xfc
 800b8c6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	701a      	strb	r2, [r3, #0]
 800b8ce:	e008      	b.n	800b8e2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b8d0:	897b      	ldrh	r3, [r7, #10]
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8da:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	7dba      	ldrb	r2, [r7, #22]
 800b8e0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b8e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	371c      	adds	r7, #28
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
	...

0800b8f4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b086      	sub	sp, #24
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	607a      	str	r2, [r7, #4]
 800b900:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b902:	2300      	movs	r3, #0
 800b904:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800b906:	897b      	ldrh	r3, [r7, #10]
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	4413      	add	r3, r2
 800b90c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b910:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800b912:	7dbb      	ldrb	r3, [r7, #22]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d107      	bne.n	800b928 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b918:	897b      	ldrh	r3, [r7, #10]
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	330c      	adds	r3, #12
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	605a      	str	r2, [r3, #4]
 800b926:	e040      	b.n	800b9aa <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800b928:	897b      	ldrh	r3, [r7, #10]
 800b92a:	2b05      	cmp	r3, #5
 800b92c:	d830      	bhi.n	800b990 <VL53L0X_SetLimitCheckValue+0x9c>
 800b92e:	a201      	add	r2, pc, #4	; (adr r2, 800b934 <VL53L0X_SetLimitCheckValue+0x40>)
 800b930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b934:	0800b94d 	.word	0x0800b94d
 800b938:	0800b955 	.word	0x0800b955
 800b93c:	0800b96b 	.word	0x0800b96b
 800b940:	0800b973 	.word	0x0800b973
 800b944:	0800b97b 	.word	0x0800b97b
 800b948:	0800b97b 	.word	0x0800b97b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800b952:	e01f      	b.n	800b994 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800b958:	b29b      	uxth	r3, r3
 800b95a:	461a      	mov	r2, r3
 800b95c:	2144      	movs	r1, #68	; 0x44
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f004 f826 	bl	800f9b0 <VL53L0X_WrWord>
 800b964:	4603      	mov	r3, r0
 800b966:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800b968:	e014      	b.n	800b994 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800b970:	e010      	b.n	800b994 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800b978:	e00c      	b.n	800b994 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800b97e:	b29b      	uxth	r3, r3
 800b980:	461a      	mov	r2, r3
 800b982:	2164      	movs	r1, #100	; 0x64
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f004 f813 	bl	800f9b0 <VL53L0X_WrWord>
 800b98a:	4603      	mov	r3, r0
 800b98c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800b98e:	e001      	b.n	800b994 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b990:	23fc      	movs	r3, #252	; 0xfc
 800b992:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b994:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d106      	bne.n	800b9aa <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b99c:	897b      	ldrh	r3, [r7, #10]
 800b99e:	68fa      	ldr	r2, [r7, #12]
 800b9a0:	330c      	adds	r3, #12
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	4413      	add	r3, r2
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b9aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3718      	adds	r7, #24
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop

0800b9b8 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b088      	sub	sp, #32
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	607a      	str	r2, [r7, #4]
 800b9c4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800b9ce:	897b      	ldrh	r3, [r7, #10]
 800b9d0:	2b05      	cmp	r3, #5
 800b9d2:	d847      	bhi.n	800ba64 <VL53L0X_GetLimitCheckValue+0xac>
 800b9d4:	a201      	add	r2, pc, #4	; (adr r2, 800b9dc <VL53L0X_GetLimitCheckValue+0x24>)
 800b9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9da:	bf00      	nop
 800b9dc:	0800b9f5 	.word	0x0800b9f5
 800b9e0:	0800ba01 	.word	0x0800ba01
 800b9e4:	0800ba27 	.word	0x0800ba27
 800b9e8:	0800ba33 	.word	0x0800ba33
 800b9ec:	0800ba3f 	.word	0x0800ba3f
 800b9f0:	0800ba3f 	.word	0x0800ba3f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9f8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	77bb      	strb	r3, [r7, #30]
		break;
 800b9fe:	e033      	b.n	800ba68 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800ba00:	f107 0316 	add.w	r3, r7, #22
 800ba04:	461a      	mov	r2, r3
 800ba06:	2144      	movs	r1, #68	; 0x44
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f004 f859 	bl	800fac0 <VL53L0X_RdWord>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800ba12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d102      	bne.n	800ba20 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800ba1a:	8afb      	ldrh	r3, [r7, #22]
 800ba1c:	025b      	lsls	r3, r3, #9
 800ba1e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800ba20:	2301      	movs	r3, #1
 800ba22:	77bb      	strb	r3, [r7, #30]
		break;
 800ba24:	e020      	b.n	800ba68 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba2a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	77bb      	strb	r3, [r7, #30]
		break;
 800ba30:	e01a      	b.n	800ba68 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba36:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	77bb      	strb	r3, [r7, #30]
		break;
 800ba3c:	e014      	b.n	800ba68 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800ba3e:	f107 0316 	add.w	r3, r7, #22
 800ba42:	461a      	mov	r2, r3
 800ba44:	2164      	movs	r1, #100	; 0x64
 800ba46:	68f8      	ldr	r0, [r7, #12]
 800ba48:	f004 f83a 	bl	800fac0 <VL53L0X_RdWord>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800ba50:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d102      	bne.n	800ba5e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800ba58:	8afb      	ldrh	r3, [r7, #22]
 800ba5a:	025b      	lsls	r3, r3, #9
 800ba5c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	77bb      	strb	r3, [r7, #30]
		break;
 800ba62:	e001      	b.n	800ba68 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba64:	23fc      	movs	r3, #252	; 0xfc
 800ba66:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ba68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d12a      	bne.n	800bac6 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800ba70:	7fbb      	ldrb	r3, [r7, #30]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d124      	bne.n	800bac0 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d110      	bne.n	800ba9e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800ba7c:	897b      	ldrh	r3, [r7, #10]
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	330c      	adds	r3, #12
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	69ba      	ldr	r2, [r7, #24]
 800ba8e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800ba90:	897b      	ldrh	r3, [r7, #10]
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	4413      	add	r3, r2
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ba9c:	e013      	b.n	800bac6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	69ba      	ldr	r2, [r7, #24]
 800baa2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800baa4:	897b      	ldrh	r3, [r7, #10]
 800baa6:	68fa      	ldr	r2, [r7, #12]
 800baa8:	330c      	adds	r3, #12
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	4413      	add	r3, r2
 800baae:	69ba      	ldr	r2, [r7, #24]
 800bab0:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800bab2:	897b      	ldrh	r3, [r7, #10]
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	4413      	add	r3, r2
 800bab8:	2201      	movs	r2, #1
 800baba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800babe:	e002      	b.n	800bac6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	69ba      	ldr	r2, [r7, #24]
 800bac4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bac6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800baca:	4618      	mov	r0, r3
 800bacc:	3720      	adds	r7, #32
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop

0800bad4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bade:	2300      	movs	r3, #0
 800bae0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800bae2:	f107 030e 	add.w	r3, r7, #14
 800bae6:	461a      	mov	r2, r3
 800bae8:	2101      	movs	r1, #1
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f003 ffbe 	bl	800fa6c <VL53L0X_RdByte>
 800baf0:	4603      	mov	r3, r0
 800baf2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800baf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10e      	bne.n	800bb1a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800bafc:	7bba      	ldrb	r2, [r7, #14]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800bb04:	7bbb      	ldrb	r3, [r7, #14]
 800bb06:	b25b      	sxtb	r3, r3
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	da03      	bge.n	800bb14 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	701a      	strb	r2, [r3, #0]
 800bb12:	e002      	b.n	800bb1a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	2200      	movs	r2, #0
 800bb18:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800bb1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d104      	bne.n	800bb2c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	781a      	ldrb	r2, [r3, #0]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bb2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b084      	sub	sp, #16
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb40:	2300      	movs	r3, #0
 800bb42:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800bb44:	f107 030e 	add.w	r3, r7, #14
 800bb48:	4619      	mov	r1, r3
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f7ff fbd2 	bl	800b2f4 <VL53L0X_GetDeviceMode>
 800bb50:	4603      	mov	r3, r0
 800bb52:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800bb54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d107      	bne.n	800bb6c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d104      	bne.n	800bb6c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 f898 	bl	800bc98 <VL53L0X_StartMeasurement>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800bb6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d104      	bne.n	800bb7e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f001 fb6f 	bl	800d258 <VL53L0X_measurement_poll_for_completion>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800bb7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d106      	bne.n	800bb94 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800bb86:	7bbb      	ldrb	r3, [r7, #14]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d103      	bne.n	800bb94 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2203      	movs	r2, #3
 800bb90:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800bb94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b086      	sub	sp, #24
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbac:	2300      	movs	r3, #0
 800bbae:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	68b9      	ldr	r1, [r7, #8]
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f001 fb11 	bl	800d1de <VL53L0X_perform_ref_calibration>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800bbc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3718      	adds	r7, #24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b086      	sub	sp, #24
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800bbe2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800bbe4:	7dbb      	ldrb	r3, [r7, #22]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d005      	beq.n	800bbf6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800bbea:	7dbb      	ldrb	r3, [r7, #22]
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	d002      	beq.n	800bbf6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800bbf0:	7dbb      	ldrb	r3, [r7, #22]
 800bbf2:	2b03      	cmp	r3, #3
 800bbf4:	d147      	bne.n	800bc86 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800bbf6:	f107 030c 	add.w	r3, r7, #12
 800bbfa:	f107 0210 	add.w	r2, r7, #16
 800bbfe:	2101      	movs	r1, #1
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 fbc3 	bl	800c38c <VL53L0X_GetInterruptThresholds>
 800bc06:	4603      	mov	r3, r0
 800bc08:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800bc10:	d803      	bhi.n	800bc1a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800bc12:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800bc14:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800bc18:	d935      	bls.n	800bc86 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800bc1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d131      	bne.n	800bc86 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800bc22:	78fb      	ldrb	r3, [r7, #3]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d006      	beq.n	800bc36 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800bc28:	491a      	ldr	r1, [pc, #104]	; (800bc94 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f002 ff86 	bl	800eb3c <VL53L0X_load_tuning_settings>
 800bc30:	4603      	mov	r3, r0
 800bc32:	75fb      	strb	r3, [r7, #23]
 800bc34:	e027      	b.n	800bc86 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800bc36:	2204      	movs	r2, #4
 800bc38:	21ff      	movs	r1, #255	; 0xff
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f003 fe94 	bl	800f968 <VL53L0X_WrByte>
 800bc40:	4603      	mov	r3, r0
 800bc42:	461a      	mov	r2, r3
 800bc44:	7dfb      	ldrb	r3, [r7, #23]
 800bc46:	4313      	orrs	r3, r2
 800bc48:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	2170      	movs	r1, #112	; 0x70
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f003 fe8a 	bl	800f968 <VL53L0X_WrByte>
 800bc54:	4603      	mov	r3, r0
 800bc56:	461a      	mov	r2, r3
 800bc58:	7dfb      	ldrb	r3, [r7, #23]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bc5e:	2200      	movs	r2, #0
 800bc60:	21ff      	movs	r1, #255	; 0xff
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f003 fe80 	bl	800f968 <VL53L0X_WrByte>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	7dfb      	ldrb	r3, [r7, #23]
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800bc72:	2200      	movs	r2, #0
 800bc74:	2180      	movs	r1, #128	; 0x80
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f003 fe76 	bl	800f968 <VL53L0X_WrByte>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	461a      	mov	r2, r3
 800bc80:	7dfb      	ldrb	r3, [r7, #23]
 800bc82:	4313      	orrs	r3, r2
 800bc84:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800bc86:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3718      	adds	r7, #24
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	20000218 	.word	0x20000218

0800bc98 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b086      	sub	sp, #24
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bca0:	2300      	movs	r3, #0
 800bca2:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800bca4:	2301      	movs	r3, #1
 800bca6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800bca8:	f107 030e 	add.w	r3, r7, #14
 800bcac:	4619      	mov	r1, r3
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f7ff fb20 	bl	800b2f4 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	2180      	movs	r1, #128	; 0x80
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f003 fe55 	bl	800f968 <VL53L0X_WrByte>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	21ff      	movs	r1, #255	; 0xff
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f003 fe4e 	bl	800f968 <VL53L0X_WrByte>
 800bccc:	4603      	mov	r3, r0
 800bcce:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f003 fe47 	bl	800f968 <VL53L0X_WrByte>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800bce4:	461a      	mov	r2, r3
 800bce6:	2191      	movs	r1, #145	; 0x91
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f003 fe3d 	bl	800f968 <VL53L0X_WrByte>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f003 fe36 	bl	800f968 <VL53L0X_WrByte>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bd00:	2200      	movs	r2, #0
 800bd02:	21ff      	movs	r1, #255	; 0xff
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f003 fe2f 	bl	800f968 <VL53L0X_WrByte>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800bd0e:	2200      	movs	r2, #0
 800bd10:	2180      	movs	r1, #128	; 0x80
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f003 fe28 	bl	800f968 <VL53L0X_WrByte>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
 800bd1e:	2b03      	cmp	r3, #3
 800bd20:	d054      	beq.n	800bdcc <VL53L0X_StartMeasurement+0x134>
 800bd22:	2b03      	cmp	r3, #3
 800bd24:	dc6c      	bgt.n	800be00 <VL53L0X_StartMeasurement+0x168>
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d002      	beq.n	800bd30 <VL53L0X_StartMeasurement+0x98>
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d034      	beq.n	800bd98 <VL53L0X_StartMeasurement+0x100>
 800bd2e:	e067      	b.n	800be00 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800bd30:	2201      	movs	r2, #1
 800bd32:	2100      	movs	r1, #0
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f003 fe17 	bl	800f968 <VL53L0X_WrByte>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800bd3e:	7bfb      	ldrb	r3, [r7, #15]
 800bd40:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800bd42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d15d      	bne.n	800be06 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d008      	beq.n	800bd66 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800bd54:	f107 030d 	add.w	r3, r7, #13
 800bd58:	461a      	mov	r2, r3
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f003 fe85 	bl	800fa6c <VL53L0X_RdByte>
 800bd62:	4603      	mov	r3, r0
 800bd64:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800bd6c:	7b7a      	ldrb	r2, [r7, #13]
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
 800bd70:	4013      	ands	r3, r2
 800bd72:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800bd74:	7bfa      	ldrb	r2, [r7, #15]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d107      	bne.n	800bd8a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800bd7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d103      	bne.n	800bd8a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bd88:	d3e1      	bcc.n	800bd4e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bd90:	d339      	bcc.n	800be06 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800bd92:	23f9      	movs	r3, #249	; 0xf9
 800bd94:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800bd96:	e036      	b.n	800be06 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800bd98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d105      	bne.n	800bdac <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800bda0:	2101      	movs	r1, #1
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f7ff ff12 	bl	800bbcc <VL53L0X_CheckAndLoadInterruptSettings>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800bdac:	2202      	movs	r2, #2
 800bdae:	2100      	movs	r1, #0
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f003 fdd9 	bl	800f968 <VL53L0X_WrByte>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800bdba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d123      	bne.n	800be0a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2204      	movs	r2, #4
 800bdc6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800bdca:	e01e      	b.n	800be0a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800bdcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d105      	bne.n	800bde0 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800bdd4:	2101      	movs	r1, #1
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f7ff fef8 	bl	800bbcc <VL53L0X_CheckAndLoadInterruptSettings>
 800bddc:	4603      	mov	r3, r0
 800bdde:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800bde0:	2204      	movs	r2, #4
 800bde2:	2100      	movs	r1, #0
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f003 fdbf 	bl	800f968 <VL53L0X_WrByte>
 800bdea:	4603      	mov	r3, r0
 800bdec:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800bdee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d10b      	bne.n	800be0e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2204      	movs	r2, #4
 800bdfa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800bdfe:	e006      	b.n	800be0e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800be00:	23f8      	movs	r3, #248	; 0xf8
 800be02:	75fb      	strb	r3, [r7, #23]
 800be04:	e004      	b.n	800be10 <VL53L0X_StartMeasurement+0x178>
		break;
 800be06:	bf00      	nop
 800be08:	e002      	b.n	800be10 <VL53L0X_StartMeasurement+0x178>
		break;
 800be0a:	bf00      	nop
 800be0c:	e000      	b.n	800be10 <VL53L0X_StartMeasurement+0x178>
		break;
 800be0e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800be10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be14:	4618      	mov	r0, r3
 800be16:	3718      	adds	r7, #24
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be26:	2300      	movs	r3, #0
 800be28:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800be30:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800be32:	7bbb      	ldrb	r3, [r7, #14]
 800be34:	2b04      	cmp	r3, #4
 800be36:	d112      	bne.n	800be5e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800be38:	f107 0308 	add.w	r3, r7, #8
 800be3c:	4619      	mov	r1, r3
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fb1a 	bl	800c478 <VL53L0X_GetInterruptMaskStatus>
 800be44:	4603      	mov	r3, r0
 800be46:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	2b04      	cmp	r3, #4
 800be4c:	d103      	bne.n	800be56 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	2201      	movs	r2, #1
 800be52:	701a      	strb	r2, [r3, #0]
 800be54:	e01c      	b.n	800be90 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	2200      	movs	r2, #0
 800be5a:	701a      	strb	r2, [r3, #0]
 800be5c:	e018      	b.n	800be90 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800be5e:	f107 030d 	add.w	r3, r7, #13
 800be62:	461a      	mov	r2, r3
 800be64:	2114      	movs	r1, #20
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f003 fe00 	bl	800fa6c <VL53L0X_RdByte>
 800be6c:	4603      	mov	r3, r0
 800be6e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800be70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d10b      	bne.n	800be90 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800be78:	7b7b      	ldrb	r3, [r7, #13]
 800be7a:	f003 0301 	and.w	r3, r3, #1
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d003      	beq.n	800be8a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	2201      	movs	r2, #1
 800be86:	701a      	strb	r2, [r3, #0]
 800be88:	e002      	b.n	800be90 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	2200      	movs	r2, #0
 800be8e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800be90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800be9c:	b5b0      	push	{r4, r5, r7, lr}
 800be9e:	b096      	sub	sp, #88	; 0x58
 800bea0:	af02      	add	r7, sp, #8
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bea6:	2300      	movs	r3, #0
 800bea8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800beac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800beb0:	230c      	movs	r3, #12
 800beb2:	2114      	movs	r1, #20
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f003 fd2b 	bl	800f910 <VL53L0X_ReadMulti>
 800beba:	4603      	mov	r3, r0
 800bebc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800bec0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f040 80d1 	bne.w	800c06c <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	2200      	movs	r2, #0
 800bece:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	2200      	movs	r2, #0
 800bed4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800bed6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800beda:	b29b      	uxth	r3, r3
 800bedc:	021b      	lsls	r3, r3, #8
 800bede:	b29a      	uxth	r2, r3
 800bee0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	4413      	add	r3, r2
 800bee8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	2200      	movs	r2, #0
 800bef0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800bef2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	021b      	lsls	r3, r3, #8
 800befa:	b29a      	uxth	r2, r3
 800befc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	4413      	add	r3, r2
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	025b      	lsls	r3, r3, #9
 800bf08:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf0e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800bf10:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	021b      	lsls	r3, r3, #8
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	4413      	add	r3, r2
 800bf22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800bf26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf2a:	025b      	lsls	r3, r3, #9
 800bf2c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800bf32:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	021b      	lsls	r3, r3, #8
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	4413      	add	r3, r2
 800bf44:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800bf4e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800bf50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bf54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800bf5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800bf66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800bf6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bf6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf70:	d046      	beq.n	800c000 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800bf72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bf74:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800bf78:	fb02 f303 	mul.w	r3, r2, r3
 800bf7c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bf80:	4a57      	ldr	r2, [pc, #348]	; (800c0e0 <VL53L0X_GetRangingMeasurementData+0x244>)
 800bf82:	fb82 1203 	smull	r1, r2, r2, r3
 800bf86:	1192      	asrs	r2, r2, #6
 800bf88:	17db      	asrs	r3, r3, #31
 800bf8a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800bf8c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a1b      	ldr	r3, [r3, #32]
 800bf94:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	7f1b      	ldrb	r3, [r3, #28]
 800bf9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800bf9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d02c      	beq.n	800c000 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800bfa6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bfa8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800bfac:	fb02 f303 	mul.w	r3, r2, r3
 800bfb0:	121a      	asrs	r2, r3, #8
					<= 0) {
 800bfb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d10d      	bne.n	800bfd4 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800bfb8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d004      	beq.n	800bfca <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800bfc0:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800bfc4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800bfc8:	e016      	b.n	800bff8 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800bfca:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800bfce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800bfd2:	e011      	b.n	800bff8 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800bfd4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bfd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfda:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800bfde:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bfe0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800bfe4:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800bfe8:	121b      	asrs	r3, r3, #8
 800bfea:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800bfec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfee:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800bff0:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800bff4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800bff8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bffc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800c000:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c004:	2b00      	cmp	r3, #0
 800c006:	d00d      	beq.n	800c024 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800c008:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c00c:	089b      	lsrs	r3, r3, #2
 800c00e:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800c014:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	019b      	lsls	r3, r3, #6
 800c01c:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	75da      	strb	r2, [r3, #23]
 800c022:	e006      	b.n	800c032 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800c02a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	2200      	movs	r2, #0
 800c030:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800c032:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c036:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800c03a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800c03e:	9301      	str	r3, [sp, #4]
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	4613      	mov	r3, r2
 800c046:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f003 fa15 	bl	800f478 <VL53L0X_get_pal_range_status>
 800c04e:	4603      	mov	r3, r0
 800c050:	461a      	mov	r2, r3
 800c052:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c056:	4313      	orrs	r3, r2
 800c058:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800c05c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c060:	2b00      	cmp	r3, #0
 800c062:	d103      	bne.n	800c06c <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800c064:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c06c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c070:	2b00      	cmp	r3, #0
 800c072:	d12f      	bne.n	800c0d4 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f107 040c 	add.w	r4, r7, #12
 800c07a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800c07e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c082:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c086:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800c08e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800c094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800c09c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800c0a2:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800c0a8:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800c0ae:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800c0b4:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800c0ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800c0c4:	f107 050c 	add.w	r5, r7, #12
 800c0c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c0ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c0d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c0d4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3750      	adds	r7, #80	; 0x50
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bdb0      	pop	{r4, r5, r7, pc}
 800c0e0:	10624dd3 	.word	0x10624dd3

0800c0e4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7ff f8d1 	bl	800b29c <VL53L0X_SetDeviceMode>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c0fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d104      	bne.n	800c110 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f7ff fd16 	bl	800bb38 <VL53L0X_PerformSingleMeasurement>
 800c10c:	4603      	mov	r3, r0
 800c10e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800c110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d105      	bne.n	800c124 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800c118:	6839      	ldr	r1, [r7, #0]
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7ff febe 	bl	800be9c <VL53L0X_GetRangingMeasurementData>
 800c120:	4603      	mov	r3, r0
 800c122:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800c124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d105      	bne.n	800c138 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c12c:	2100      	movs	r1, #0
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 f962 	bl	800c3f8 <VL53L0X_ClearInterruptMask>
 800c134:	4603      	mov	r3, r0
 800c136:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800c138:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	4608      	mov	r0, r1
 800c14e:	4611      	mov	r1, r2
 800c150:	461a      	mov	r2, r3
 800c152:	4603      	mov	r3, r0
 800c154:	70fb      	strb	r3, [r7, #3]
 800c156:	460b      	mov	r3, r1
 800c158:	70bb      	strb	r3, [r7, #2]
 800c15a:	4613      	mov	r3, r2
 800c15c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c15e:	2300      	movs	r3, #0
 800c160:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800c162:	78fb      	ldrb	r3, [r7, #3]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d002      	beq.n	800c16e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800c168:	23f6      	movs	r3, #246	; 0xf6
 800c16a:	73fb      	strb	r3, [r7, #15]
 800c16c:	e107      	b.n	800c37e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800c16e:	78bb      	ldrb	r3, [r7, #2]
 800c170:	2b14      	cmp	r3, #20
 800c172:	d110      	bne.n	800c196 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c174:	7e3b      	ldrb	r3, [r7, #24]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d102      	bne.n	800c180 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800c17a:	2310      	movs	r3, #16
 800c17c:	73bb      	strb	r3, [r7, #14]
 800c17e:	e001      	b.n	800c184 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800c180:	2301      	movs	r3, #1
 800c182:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800c184:	7bbb      	ldrb	r3, [r7, #14]
 800c186:	461a      	mov	r2, r3
 800c188:	2184      	movs	r1, #132	; 0x84
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f003 fbec 	bl	800f968 <VL53L0X_WrByte>
 800c190:	4603      	mov	r3, r0
 800c192:	73fb      	strb	r3, [r7, #15]
 800c194:	e0f3      	b.n	800c37e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800c196:	78bb      	ldrb	r3, [r7, #2]
 800c198:	2b15      	cmp	r3, #21
 800c19a:	f040 8097 	bne.w	800c2cc <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c19e:	2201      	movs	r2, #1
 800c1a0:	21ff      	movs	r1, #255	; 0xff
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f003 fbe0 	bl	800f968 <VL53L0X_WrByte>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	2100      	movs	r1, #0
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f003 fbd6 	bl	800f968 <VL53L0X_WrByte>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	461a      	mov	r2, r3
 800c1c0:	7bfb      	ldrb	r3, [r7, #15]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	21ff      	movs	r1, #255	; 0xff
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f003 fbcc 	bl	800f968 <VL53L0X_WrByte>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c1da:	2201      	movs	r2, #1
 800c1dc:	2180      	movs	r1, #128	; 0x80
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f003 fbc2 	bl	800f968 <VL53L0X_WrByte>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800c1ee:	2202      	movs	r2, #2
 800c1f0:	2185      	movs	r1, #133	; 0x85
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f003 fbb8 	bl	800f968 <VL53L0X_WrByte>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	7bfb      	ldrb	r3, [r7, #15]
 800c1fe:	4313      	orrs	r3, r2
 800c200:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800c202:	2204      	movs	r2, #4
 800c204:	21ff      	movs	r1, #255	; 0xff
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f003 fbae 	bl	800f968 <VL53L0X_WrByte>
 800c20c:	4603      	mov	r3, r0
 800c20e:	461a      	mov	r2, r3
 800c210:	7bfb      	ldrb	r3, [r7, #15]
 800c212:	4313      	orrs	r3, r2
 800c214:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800c216:	2200      	movs	r2, #0
 800c218:	21cd      	movs	r1, #205	; 0xcd
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f003 fba4 	bl	800f968 <VL53L0X_WrByte>
 800c220:	4603      	mov	r3, r0
 800c222:	461a      	mov	r2, r3
 800c224:	7bfb      	ldrb	r3, [r7, #15]
 800c226:	4313      	orrs	r3, r2
 800c228:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800c22a:	2211      	movs	r2, #17
 800c22c:	21cc      	movs	r1, #204	; 0xcc
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f003 fb9a 	bl	800f968 <VL53L0X_WrByte>
 800c234:	4603      	mov	r3, r0
 800c236:	461a      	mov	r2, r3
 800c238:	7bfb      	ldrb	r3, [r7, #15]
 800c23a:	4313      	orrs	r3, r2
 800c23c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800c23e:	2207      	movs	r2, #7
 800c240:	21ff      	movs	r1, #255	; 0xff
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f003 fb90 	bl	800f968 <VL53L0X_WrByte>
 800c248:	4603      	mov	r3, r0
 800c24a:	461a      	mov	r2, r3
 800c24c:	7bfb      	ldrb	r3, [r7, #15]
 800c24e:	4313      	orrs	r3, r2
 800c250:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800c252:	2200      	movs	r2, #0
 800c254:	21be      	movs	r1, #190	; 0xbe
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f003 fb86 	bl	800f968 <VL53L0X_WrByte>
 800c25c:	4603      	mov	r3, r0
 800c25e:	461a      	mov	r2, r3
 800c260:	7bfb      	ldrb	r3, [r7, #15]
 800c262:	4313      	orrs	r3, r2
 800c264:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800c266:	2206      	movs	r2, #6
 800c268:	21ff      	movs	r1, #255	; 0xff
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f003 fb7c 	bl	800f968 <VL53L0X_WrByte>
 800c270:	4603      	mov	r3, r0
 800c272:	461a      	mov	r2, r3
 800c274:	7bfb      	ldrb	r3, [r7, #15]
 800c276:	4313      	orrs	r3, r2
 800c278:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800c27a:	2209      	movs	r2, #9
 800c27c:	21cc      	movs	r1, #204	; 0xcc
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f003 fb72 	bl	800f968 <VL53L0X_WrByte>
 800c284:	4603      	mov	r3, r0
 800c286:	461a      	mov	r2, r3
 800c288:	7bfb      	ldrb	r3, [r7, #15]
 800c28a:	4313      	orrs	r3, r2
 800c28c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c28e:	2200      	movs	r2, #0
 800c290:	21ff      	movs	r1, #255	; 0xff
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f003 fb68 	bl	800f968 <VL53L0X_WrByte>
 800c298:	4603      	mov	r3, r0
 800c29a:	461a      	mov	r2, r3
 800c29c:	7bfb      	ldrb	r3, [r7, #15]
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	21ff      	movs	r1, #255	; 0xff
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f003 fb5e 	bl	800f968 <VL53L0X_WrByte>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	7bfb      	ldrb	r3, [r7, #15]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f003 fb54 	bl	800f968 <VL53L0X_WrByte>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	73fb      	strb	r3, [r7, #15]
 800c2ca:	e058      	b.n	800c37e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800c2cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d121      	bne.n	800c318 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800c2d4:	787b      	ldrb	r3, [r7, #1]
 800c2d6:	2b04      	cmp	r3, #4
 800c2d8:	d81b      	bhi.n	800c312 <VL53L0X_SetGpioConfig+0x1ce>
 800c2da:	a201      	add	r2, pc, #4	; (adr r2, 800c2e0 <VL53L0X_SetGpioConfig+0x19c>)
 800c2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e0:	0800c2f5 	.word	0x0800c2f5
 800c2e4:	0800c2fb 	.word	0x0800c2fb
 800c2e8:	0800c301 	.word	0x0800c301
 800c2ec:	0800c307 	.word	0x0800c307
 800c2f0:	0800c30d 	.word	0x0800c30d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	73bb      	strb	r3, [r7, #14]
				break;
 800c2f8:	e00f      	b.n	800c31a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	73bb      	strb	r3, [r7, #14]
				break;
 800c2fe:	e00c      	b.n	800c31a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800c300:	2302      	movs	r3, #2
 800c302:	73bb      	strb	r3, [r7, #14]
				break;
 800c304:	e009      	b.n	800c31a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800c306:	2303      	movs	r3, #3
 800c308:	73bb      	strb	r3, [r7, #14]
				break;
 800c30a:	e006      	b.n	800c31a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800c30c:	2304      	movs	r3, #4
 800c30e:	73bb      	strb	r3, [r7, #14]
				break;
 800c310:	e003      	b.n	800c31a <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800c312:	23f5      	movs	r3, #245	; 0xf5
 800c314:	73fb      	strb	r3, [r7, #15]
 800c316:	e000      	b.n	800c31a <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800c318:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800c31a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d107      	bne.n	800c332 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800c322:	7bbb      	ldrb	r3, [r7, #14]
 800c324:	461a      	mov	r2, r3
 800c326:	210a      	movs	r1, #10
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f003 fb1d 	bl	800f968 <VL53L0X_WrByte>
 800c32e:	4603      	mov	r3, r0
 800c330:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800c332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d10f      	bne.n	800c35a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c33a:	7e3b      	ldrb	r3, [r7, #24]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d102      	bne.n	800c346 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800c340:	2300      	movs	r3, #0
 800c342:	73bb      	strb	r3, [r7, #14]
 800c344:	e001      	b.n	800c34a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800c346:	2310      	movs	r3, #16
 800c348:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800c34a:	7bbb      	ldrb	r3, [r7, #14]
 800c34c:	22ef      	movs	r2, #239	; 0xef
 800c34e:	2184      	movs	r1, #132	; 0x84
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f003 fb57 	bl	800fa04 <VL53L0X_UpdateByte>
 800c356:	4603      	mov	r3, r0
 800c358:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800c35a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d103      	bne.n	800c36a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	787a      	ldrb	r2, [r7, #1]
 800c366:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800c36a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d105      	bne.n	800c37e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c372:	2100      	movs	r1, #0
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 f83f 	bl	800c3f8 <VL53L0X_ClearInterruptMask>
 800c37a:	4603      	mov	r3, r0
 800c37c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c37e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c382:	4618      	mov	r0, r3
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop

0800c38c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	607a      	str	r2, [r7, #4]
 800c396:	603b      	str	r3, [r7, #0]
 800c398:	460b      	mov	r3, r1
 800c39a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c39c:	2300      	movs	r3, #0
 800c39e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800c3a0:	f107 0314 	add.w	r3, r7, #20
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	210e      	movs	r1, #14
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f003 fb89 	bl	800fac0 <VL53L0X_RdWord>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c3b2:	8abb      	ldrh	r3, [r7, #20]
 800c3b4:	045b      	lsls	r3, r3, #17
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	4b0e      	ldr	r3, [pc, #56]	; (800c3f4 <VL53L0X_GetInterruptThresholds+0x68>)
 800c3ba:	4013      	ands	r3, r2
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800c3c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d10f      	bne.n	800c3e8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800c3c8:	f107 0314 	add.w	r3, r7, #20
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	210c      	movs	r1, #12
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f003 fb75 	bl	800fac0 <VL53L0X_RdWord>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c3da:	8abb      	ldrh	r3, [r7, #20]
 800c3dc:	045b      	lsls	r3, r3, #17
 800c3de:	461a      	mov	r2, r3
 800c3e0:	4b04      	ldr	r3, [pc, #16]	; (800c3f4 <VL53L0X_GetInterruptThresholds+0x68>)
 800c3e2:	4013      	ands	r3, r2
		*pThresholdHigh =
 800c3e4:	683a      	ldr	r2, [r7, #0]
 800c3e6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c3e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3718      	adds	r7, #24
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	1ffe0000 	.word	0x1ffe0000

0800c3f8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c402:	2300      	movs	r3, #0
 800c404:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800c406:	2300      	movs	r3, #0
 800c408:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800c40a:	2201      	movs	r2, #1
 800c40c:	210b      	movs	r1, #11
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f003 faaa 	bl	800f968 <VL53L0X_WrByte>
 800c414:	4603      	mov	r3, r0
 800c416:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800c418:	2200      	movs	r2, #0
 800c41a:	210b      	movs	r1, #11
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f003 faa3 	bl	800f968 <VL53L0X_WrByte>
 800c422:	4603      	mov	r3, r0
 800c424:	461a      	mov	r2, r3
 800c426:	7bfb      	ldrb	r3, [r7, #15]
 800c428:	4313      	orrs	r3, r2
 800c42a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800c42c:	f107 030d 	add.w	r3, r7, #13
 800c430:	461a      	mov	r2, r3
 800c432:	2113      	movs	r1, #19
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f003 fb19 	bl	800fa6c <VL53L0X_RdByte>
 800c43a:	4603      	mov	r3, r0
 800c43c:	461a      	mov	r2, r3
 800c43e:	7bfb      	ldrb	r3, [r7, #15]
 800c440:	4313      	orrs	r3, r2
 800c442:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800c444:	7bbb      	ldrb	r3, [r7, #14]
 800c446:	3301      	adds	r3, #1
 800c448:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800c44a:	7b7b      	ldrb	r3, [r7, #13]
 800c44c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800c450:	2b00      	cmp	r3, #0
 800c452:	d006      	beq.n	800c462 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800c454:	7bbb      	ldrb	r3, [r7, #14]
 800c456:	2b02      	cmp	r3, #2
 800c458:	d803      	bhi.n	800c462 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800c45a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d0d3      	beq.n	800c40a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800c462:	7bbb      	ldrb	r3, [r7, #14]
 800c464:	2b02      	cmp	r3, #2
 800c466:	d901      	bls.n	800c46c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800c468:	23f4      	movs	r3, #244	; 0xf4
 800c46a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800c46c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c470:	4618      	mov	r0, r3
 800c472:	3710      	adds	r7, #16
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b084      	sub	sp, #16
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c482:	2300      	movs	r3, #0
 800c484:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800c486:	f107 030e 	add.w	r3, r7, #14
 800c48a:	461a      	mov	r2, r3
 800c48c:	2113      	movs	r1, #19
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f003 faec 	bl	800fa6c <VL53L0X_RdByte>
 800c494:	4603      	mov	r3, r0
 800c496:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800c498:	7bbb      	ldrb	r3, [r7, #14]
 800c49a:	f003 0207 	and.w	r2, r3, #7
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800c4a2:	7bbb      	ldrb	r3, [r7, #14]
 800c4a4:	f003 0318 	and.w	r3, r3, #24
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d001      	beq.n	800c4b0 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800c4ac:	23fa      	movs	r3, #250	; 0xfa
 800c4ae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800c4b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b086      	sub	sp, #24
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	68b9      	ldr	r1, [r7, #8]
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	f000 fa33 	bl	800c93c <VL53L0X_perform_ref_spad_management>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800c4da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3718      	adds	r7, #24
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b084      	sub	sp, #16
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
 800c4ee:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800c4f0:	2101      	movs	r1, #1
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7fe fed2 	bl	800b29c <VL53L0X_SetDeviceMode>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800c4fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d002      	beq.n	800c50a <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800c504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c508:	e019      	b.n	800c53e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7ff fbc4 	bl	800bc98 <VL53L0X_StartMeasurement>
 800c510:	4603      	mov	r3, r0
 800c512:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800c514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d002      	beq.n	800c522 <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800c51c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c520:	e00d      	b.n	800c53e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800c522:	6839      	ldr	r1, [r7, #0]
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f7ff fcb9 	bl	800be9c <VL53L0X_GetRangingMeasurementData>
 800c52a:	4603      	mov	r3, r0
 800c52c:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800c52e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d002      	beq.n	800c53c <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800c536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c53a:	e000      	b.n	800c53e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b084      	sub	sp, #16
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
 800c54e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c550:	2300      	movs	r3, #0
 800c552:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800c554:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800c558:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800c55a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c55e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800c560:	f107 0308 	add.w	r3, r7, #8
 800c564:	461a      	mov	r2, r3
 800c566:	2128      	movs	r1, #40	; 0x28
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f003 faa9 	bl	800fac0 <VL53L0X_RdWord>
 800c56e:	4603      	mov	r3, r0
 800c570:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800c572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d11e      	bne.n	800c5b8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800c57a:	893b      	ldrh	r3, [r7, #8]
 800c57c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c580:	b29b      	uxth	r3, r3
 800c582:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800c584:	893b      	ldrh	r3, [r7, #8]
 800c586:	461a      	mov	r2, r3
 800c588:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	dd0b      	ble.n	800c5a8 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800c590:	893a      	ldrh	r2, [r7, #8]
 800c592:	897b      	ldrh	r3, [r7, #10]
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	b29b      	uxth	r3, r3
 800c598:	b21b      	sxth	r3, r3
 800c59a:	461a      	mov	r2, r3
					* 250;
 800c59c:	23fa      	movs	r3, #250	; 0xfa
 800c59e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	601a      	str	r2, [r3, #0]
 800c5a6:	e007      	b.n	800c5b8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800c5a8:	893b      	ldrh	r3, [r7, #8]
 800c5aa:	b21b      	sxth	r3, r3
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	23fa      	movs	r3, #250	; 0xfa
 800c5b0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800c5b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3710      	adds	r7, #16
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b08b      	sub	sp, #44	; 0x2c
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
 800c5d0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800c5d2:	2308      	movs	r3, #8
 800c5d4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c5e0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	69bb      	ldr	r3, [r7, #24]
 800c5e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5ea:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	69ba      	ldr	r2, [r7, #24]
 800c5f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800c5f4:	69b9      	ldr	r1, [r7, #24]
 800c5f6:	fb01 f202 	mul.w	r2, r1, r2
 800c5fa:	1a9b      	subs	r3, r3, r2
 800c5fc:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	627b      	str	r3, [r7, #36]	; 0x24
 800c602:	e030      	b.n	800c666 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800c604:	2300      	movs	r3, #0
 800c606:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60c:	4413      	add	r3, r2
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800c612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	429a      	cmp	r2, r3
 800c618:	d11e      	bne.n	800c658 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800c61a:	7ffa      	ldrb	r2, [r7, #31]
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	fa42 f303 	asr.w	r3, r2, r3
 800c622:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800c628:	e016      	b.n	800c658 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800c62a:	7ffb      	ldrb	r3, [r7, #31]
 800c62c:	f003 0301 	and.w	r3, r3, #1
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00b      	beq.n	800c64c <get_next_good_spad+0x88>
				success = 1;
 800c634:	2301      	movs	r3, #1
 800c636:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800c638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63a:	69ba      	ldr	r2, [r7, #24]
 800c63c:	fb03 f202 	mul.w	r2, r3, r2
 800c640:	6a3b      	ldr	r3, [r7, #32]
 800c642:	4413      	add	r3, r2
 800c644:	461a      	mov	r2, r3
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	601a      	str	r2, [r3, #0]
				break;
 800c64a:	e009      	b.n	800c660 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800c64c:	7ffb      	ldrb	r3, [r7, #31]
 800c64e:	085b      	lsrs	r3, r3, #1
 800c650:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800c652:	6a3b      	ldr	r3, [r7, #32]
 800c654:	3301      	adds	r3, #1
 800c656:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800c658:	6a3a      	ldr	r2, [r7, #32]
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d3e4      	bcc.n	800c62a <get_next_good_spad+0x66>
				coarseIndex++) {
 800c660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c662:	3301      	adds	r3, #1
 800c664:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800c666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d202      	bcs.n	800c674 <get_next_good_spad+0xb0>
 800c66e:	7fbb      	ldrb	r3, [r7, #30]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d0c7      	beq.n	800c604 <get_next_good_spad+0x40>
		}
	}
}
 800c674:	bf00      	nop
 800c676:	372c      	adds	r7, #44	; 0x2c
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800c688:	2301      	movs	r3, #1
 800c68a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	099b      	lsrs	r3, r3, #6
 800c690:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800c692:	4a07      	ldr	r2, [pc, #28]	; (800c6b0 <is_aperture+0x30>)
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d101      	bne.n	800c6a2 <is_aperture+0x22>
		isAperture = 0;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800c6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3714      	adds	r7, #20
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr
 800c6b0:	200003d0 	.word	0x200003d0

0800c6b4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b089      	sub	sp, #36	; 0x24
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800c6c4:	2308      	movs	r3, #8
 800c6c6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6d0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	69ba      	ldr	r2, [r7, #24]
 800c6d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800c6da:	69b9      	ldr	r1, [r7, #24]
 800c6dc:	fb01 f202 	mul.w	r2, r1, r2
 800c6e0:	1a9b      	subs	r3, r3, r2
 800c6e2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800c6e4:	697a      	ldr	r2, [r7, #20]
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d302      	bcc.n	800c6f2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c6ec:	23ce      	movs	r3, #206	; 0xce
 800c6ee:	77fb      	strb	r3, [r7, #31]
 800c6f0:	e010      	b.n	800c714 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	4413      	add	r3, r2
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	b25a      	sxtb	r2, r3
 800c6fc:	2101      	movs	r1, #1
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	fa01 f303 	lsl.w	r3, r1, r3
 800c704:	b25b      	sxtb	r3, r3
 800c706:	4313      	orrs	r3, r2
 800c708:	b259      	sxtb	r1, r3
 800c70a:	68fa      	ldr	r2, [r7, #12]
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	4413      	add	r3, r2
 800c710:	b2ca      	uxtb	r2, r1
 800c712:	701a      	strb	r2, [r3, #0]

	return status;
 800c714:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3724      	adds	r7, #36	; 0x24
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800c72e:	2306      	movs	r3, #6
 800c730:	683a      	ldr	r2, [r7, #0]
 800c732:	21b0      	movs	r1, #176	; 0xb0
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f003 f8bb 	bl	800f8b0 <VL53L0X_WriteMulti>
 800c73a:	4603      	mov	r3, r0
 800c73c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800c73e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}

0800c74a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b084      	sub	sp, #16
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
 800c752:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800c754:	2306      	movs	r3, #6
 800c756:	683a      	ldr	r2, [r7, #0]
 800c758:	21b0      	movs	r1, #176	; 0xb0
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f003 f8d8 	bl	800f910 <VL53L0X_ReadMulti>
 800c760:	4603      	mov	r3, r0
 800c762:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800c764:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3710      	adds	r7, #16
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b08c      	sub	sp, #48	; 0x30
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	607a      	str	r2, [r7, #4]
 800c77a:	603b      	str	r3, [r7, #0]
 800c77c:	460b      	mov	r3, r1
 800c77e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c780:	2300      	movs	r3, #0
 800c782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800c786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c788:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800c78a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c78c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800c78e:	2300      	movs	r3, #0
 800c790:	62bb      	str	r3, [r7, #40]	; 0x28
 800c792:	e02b      	b.n	800c7ec <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800c794:	f107 031c 	add.w	r3, r7, #28
 800c798:	6a3a      	ldr	r2, [r7, #32]
 800c79a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7ff ff11 	bl	800c5c4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7a8:	d103      	bne.n	800c7b2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c7aa:	23ce      	movs	r3, #206	; 0xce
 800c7ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800c7b0:	e020      	b.n	800c7f4 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7b8:	4413      	add	r3, r2
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7ff ff60 	bl	800c680 <is_aperture>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	7afb      	ldrb	r3, [r7, #11]
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d003      	beq.n	800c7d2 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c7ca:	23ce      	movs	r3, #206	; 0xce
 800c7cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800c7d0:	e010      	b.n	800c7f4 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800c7d6:	6a3a      	ldr	r2, [r7, #32]
 800c7d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7da:	6838      	ldr	r0, [r7, #0]
 800c7dc:	f7ff ff6a 	bl	800c6b4 <enable_spad_bit>
		currentSpad++;
 800c7e0:	6a3b      	ldr	r3, [r7, #32]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800c7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d3cf      	bcc.n	800c794 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800c7f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7f6:	6a3a      	ldr	r2, [r7, #32]
 800c7f8:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800c7fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d106      	bne.n	800c810 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800c802:	6839      	ldr	r1, [r7, #0]
 800c804:	68f8      	ldr	r0, [r7, #12]
 800c806:	f7ff ff8d 	bl	800c724 <set_ref_spad_map>
 800c80a:	4603      	mov	r3, r0
 800c80c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800c810:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c814:	2b00      	cmp	r3, #0
 800c816:	d121      	bne.n	800c85c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800c818:	f107 0314 	add.w	r3, r7, #20
 800c81c:	4619      	mov	r1, r3
 800c81e:	68f8      	ldr	r0, [r7, #12]
 800c820:	f7ff ff93 	bl	800c74a <get_ref_spad_map>
 800c824:	4603      	mov	r3, r0
 800c826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800c82a:	2300      	movs	r3, #0
 800c82c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800c82e:	e011      	b.n	800c854 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800c830:	683a      	ldr	r2, [r7, #0]
 800c832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c834:	4413      	add	r3, r2
 800c836:	781a      	ldrb	r2, [r3, #0]
 800c838:	f107 0114 	add.w	r1, r7, #20
 800c83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83e:	440b      	add	r3, r1
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	429a      	cmp	r2, r3
 800c844:	d003      	beq.n	800c84e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c846:	23ce      	movs	r3, #206	; 0xce
 800c848:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800c84c:	e006      	b.n	800c85c <enable_ref_spads+0xec>
			}
			i++;
 800c84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c850:	3301      	adds	r3, #1
 800c852:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800c854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c858:	429a      	cmp	r2, r3
 800c85a:	d3e9      	bcc.n	800c830 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800c85c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c860:	4618      	mov	r0, r3
 800c862:	3730      	adds	r7, #48	; 0x30
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b08a      	sub	sp, #40	; 0x28
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c872:	2300      	movs	r3, #0
 800c874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800c878:	2300      	movs	r3, #0
 800c87a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c884:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800c888:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d107      	bne.n	800c8a0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800c890:	22c0      	movs	r2, #192	; 0xc0
 800c892:	2101      	movs	r1, #1
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f003 f867 	bl	800f968 <VL53L0X_WrByte>
 800c89a:	4603      	mov	r3, r0
 800c89c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800c8a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d108      	bne.n	800c8ba <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800c8a8:	f107 0308 	add.w	r3, r7, #8
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7ff fc18 	bl	800c0e4 <VL53L0X_PerformSingleRangingMeasurement>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800c8ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d107      	bne.n	800c8d2 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	21ff      	movs	r1, #255	; 0xff
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f003 f84e 	bl	800f968 <VL53L0X_WrByte>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800c8d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d107      	bne.n	800c8ea <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	21b6      	movs	r1, #182	; 0xb6
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f003 f8ee 	bl	800fac0 <VL53L0X_RdWord>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800c8ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d107      	bne.n	800c902 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	21ff      	movs	r1, #255	; 0xff
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f003 f836 	bl	800f968 <VL53L0X_WrByte>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800c902:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c906:	2b00      	cmp	r3, #0
 800c908:	d112      	bne.n	800c930 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c90a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c90e:	461a      	mov	r2, r3
 800c910:	2101      	movs	r1, #1
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f003 f828 	bl	800f968 <VL53L0X_WrByte>
 800c918:	4603      	mov	r3, r0
 800c91a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800c91e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c922:	2b00      	cmp	r3, #0
 800c924:	d104      	bne.n	800c930 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c92c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800c930:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c934:	4618      	mov	r0, r3
 800c936:	3728      	adds	r7, #40	; 0x28
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800c93c:	b590      	push	{r4, r7, lr}
 800c93e:	b09d      	sub	sp, #116	; 0x74
 800c940:	af06      	add	r7, sp, #24
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c948:	2300      	movs	r3, #0
 800c94a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800c94e:	23b4      	movs	r3, #180	; 0xb4
 800c950:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800c954:	2303      	movs	r3, #3
 800c956:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800c958:	232c      	movs	r3, #44	; 0x2c
 800c95a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800c960:	2300      	movs	r3, #0
 800c962:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800c964:	2300      	movs	r3, #0
 800c966:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800c968:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800c96c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800c96e:	2300      	movs	r3, #0
 800c970:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800c972:	2300      	movs	r3, #0
 800c974:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800c976:	2306      	movs	r3, #6
 800c978:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800c982:	2300      	movs	r3, #0
 800c984:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800c988:	2300      	movs	r3, #0
 800c98a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800c990:	2300      	movs	r3, #0
 800c992:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800c994:	2300      	movs	r3, #0
 800c996:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800c9a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9a6:	e009      	b.n	800c9bc <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ac:	4413      	add	r3, r2
 800c9ae:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800c9b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d3f1      	bcc.n	800c9a8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	21ff      	movs	r1, #255	; 0xff
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	f002 ffcd 	bl	800f968 <VL53L0X_WrByte>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800c9d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d107      	bne.n	800c9ec <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800c9dc:	2200      	movs	r2, #0
 800c9de:	214f      	movs	r1, #79	; 0x4f
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	f002 ffc1 	bl	800f968 <VL53L0X_WrByte>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800c9ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d107      	bne.n	800ca04 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800c9f4:	222c      	movs	r2, #44	; 0x2c
 800c9f6:	214e      	movs	r1, #78	; 0x4e
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f002 ffb5 	bl	800f968 <VL53L0X_WrByte>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800ca04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d107      	bne.n	800ca1c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	21ff      	movs	r1, #255	; 0xff
 800ca10:	68f8      	ldr	r0, [r7, #12]
 800ca12:	f002 ffa9 	bl	800f968 <VL53L0X_WrByte>
 800ca16:	4603      	mov	r3, r0
 800ca18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800ca1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d109      	bne.n	800ca38 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800ca24:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ca28:	461a      	mov	r2, r3
 800ca2a:	21b6      	movs	r1, #182	; 0xb6
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	f002 ff9b 	bl	800f968 <VL53L0X_WrByte>
 800ca32:	4603      	mov	r3, r0
 800ca34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800ca38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d107      	bne.n	800ca50 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800ca40:	2200      	movs	r2, #0
 800ca42:	2180      	movs	r1, #128	; 0x80
 800ca44:	68f8      	ldr	r0, [r7, #12]
 800ca46:	f002 ff8f 	bl	800f968 <VL53L0X_WrByte>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800ca50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d10a      	bne.n	800ca6e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800ca58:	f107 0210 	add.w	r2, r7, #16
 800ca5c:	f107 0111 	add.w	r1, r7, #17
 800ca60:	2300      	movs	r3, #0
 800ca62:	68f8      	ldr	r0, [r7, #12]
 800ca64:	f000 fbbb 	bl	800d1de <VL53L0X_perform_ref_calibration>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800ca6e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d121      	bne.n	800caba <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800ca76:	2300      	movs	r3, #0
 800ca78:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800ca7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca7c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800ca82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca84:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800ca92:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ca96:	f107 0218 	add.w	r2, r7, #24
 800ca9a:	9204      	str	r2, [sp, #16]
 800ca9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca9e:	9203      	str	r2, [sp, #12]
 800caa0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800caa2:	9202      	str	r2, [sp, #8]
 800caa4:	9301      	str	r3, [sp, #4]
 800caa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa8:	9300      	str	r3, [sp, #0]
 800caaa:	4623      	mov	r3, r4
 800caac:	4602      	mov	r2, r0
 800caae:	68f8      	ldr	r0, [r7, #12]
 800cab0:	f7ff fe5e 	bl	800c770 <enable_ref_spads>
 800cab4:	4603      	mov	r3, r0
 800cab6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800caba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d174      	bne.n	800cbac <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800cac6:	f107 0312 	add.w	r3, r7, #18
 800caca:	4619      	mov	r1, r3
 800cacc:	68f8      	ldr	r0, [r7, #12]
 800cace:	f7ff fecb 	bl	800c868 <perform_ref_signal_measurement>
 800cad2:	4603      	mov	r3, r0
 800cad4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800cad8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d161      	bne.n	800cba4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800cae0:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800cae2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d25d      	bcs.n	800cba4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800cae8:	2300      	movs	r3, #0
 800caea:	64bb      	str	r3, [r7, #72]	; 0x48
 800caec:	e009      	b.n	800cb02 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800caf2:	4413      	add	r3, r2
 800caf4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800caf8:	2200      	movs	r2, #0
 800cafa:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800cafc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cafe:	3301      	adds	r3, #1
 800cb00:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d3f1      	bcc.n	800caee <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800cb0a:	e002      	b.n	800cb12 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800cb0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb0e:	3301      	adds	r3, #1
 800cb10:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800cb12:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800cb16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb18:	4413      	add	r3, r2
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7ff fdb0 	bl	800c680 <is_aperture>
 800cb20:	4603      	mov	r3, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d103      	bne.n	800cb2e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800cb26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d3ee      	bcc.n	800cb0c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800cb32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb34:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800cb42:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800cb46:	f107 0218 	add.w	r2, r7, #24
 800cb4a:	9204      	str	r2, [sp, #16]
 800cb4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb4e:	9203      	str	r2, [sp, #12]
 800cb50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb52:	9202      	str	r2, [sp, #8]
 800cb54:	9301      	str	r3, [sp, #4]
 800cb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	4623      	mov	r3, r4
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f7ff fe06 	bl	800c770 <enable_ref_spads>
 800cb64:	4603      	mov	r3, r0
 800cb66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800cb6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d11b      	bne.n	800cbaa <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800cb76:	f107 0312 	add.w	r3, r7, #18
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	68f8      	ldr	r0, [r7, #12]
 800cb7e:	f7ff fe73 	bl	800c868 <perform_ref_signal_measurement>
 800cb82:	4603      	mov	r3, r0
 800cb84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800cb88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d10c      	bne.n	800cbaa <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800cb90:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800cb92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d208      	bcs.n	800cbaa <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800cb98:	2301      	movs	r3, #1
 800cb9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800cb9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba0:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800cba2:	e002      	b.n	800cbaa <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cba8:	e000      	b.n	800cbac <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800cbaa:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800cbac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	f040 80af 	bne.w	800cd14 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800cbb6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800cbb8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	f240 80aa 	bls.w	800cd14 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800cbc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800cbc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc8:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800cbd0:	f107 031c 	add.w	r3, r7, #28
 800cbd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f003 f820 	bl	800fc1c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800cbdc:	8a7b      	ldrh	r3, [r7, #18]
 800cbde:	461a      	mov	r2, r3
 800cbe0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	bfb8      	it	lt
 800cbe8:	425b      	neglt	r3, r3
 800cbea:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800cbec:	2300      	movs	r3, #0
 800cbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800cbf2:	e086      	b.n	800cd02 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800cbfa:	f107 0314 	add.w	r3, r7, #20
 800cbfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc02:	f7ff fcdf 	bl	800c5c4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc0c:	d103      	bne.n	800cc16 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cc0e:	23ce      	movs	r3, #206	; 0xce
 800cc10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800cc14:	e07e      	b.n	800cd14 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800cc16:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800cc1a:	697a      	ldr	r2, [r7, #20]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7ff fd2e 	bl	800c680 <is_aperture>
 800cc24:	4603      	mov	r3, r0
 800cc26:	461a      	mov	r2, r3
 800cc28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d003      	beq.n	800cc36 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800cc34:	e06e      	b.n	800cd14 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800cc36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc38:	3301      	adds	r3, #1
 800cc3a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800cc46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7ff fd32 	bl	800c6b4 <enable_spad_bit>
 800cc50:	4603      	mov	r3, r0
 800cc52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800cc56:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d10c      	bne.n	800cc78 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800cc5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc60:	3301      	adds	r3, #1
 800cc62:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	68f8      	ldr	r0, [r7, #12]
 800cc6e:	f7ff fd59 	bl	800c724 <set_ref_spad_map>
 800cc72:	4603      	mov	r3, r0
 800cc74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800cc78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d146      	bne.n	800cd0e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800cc80:	f107 0312 	add.w	r3, r7, #18
 800cc84:	4619      	mov	r1, r3
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f7ff fdee 	bl	800c868 <perform_ref_signal_measurement>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800cc92:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d13b      	bne.n	800cd12 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800cc9a:	8a7b      	ldrh	r3, [r7, #18]
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cca0:	1ad3      	subs	r3, r2, r3
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	bfb8      	it	lt
 800cca6:	425b      	neglt	r3, r3
 800cca8:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800ccaa:	8a7b      	ldrh	r3, [r7, #18]
 800ccac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d21c      	bcs.n	800ccec <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800ccb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d914      	bls.n	800cce4 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800ccba:	f107 031c 	add.w	r3, r7, #28
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f7ff fd2f 	bl	800c724 <set_ref_spad_map>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800ccd2:	f107 011c 	add.w	r1, r7, #28
 800ccd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f002 ff9f 	bl	800fc1c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800ccde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cce0:	3b01      	subs	r3, #1
 800cce2:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800cce4:	2301      	movs	r3, #1
 800cce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccea:	e00a      	b.n	800cd02 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800ccec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccee:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800ccf6:	f107 031c 	add.w	r3, r7, #28
 800ccfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f002 ff8d 	bl	800fc1c <memcpy>
		while (!complete) {
 800cd02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	f43f af74 	beq.w	800cbf4 <VL53L0X_perform_ref_spad_management+0x2b8>
 800cd0c:	e002      	b.n	800cd14 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800cd0e:	bf00      	nop
 800cd10:	e000      	b.n	800cd14 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800cd12:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cd14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d115      	bne.n	800cd48 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd20:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800cd28:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	b2da      	uxtb	r2, r3
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	781a      	ldrb	r2, [r3, #0]
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800cd48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	375c      	adds	r7, #92	; 0x5c
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd90      	pop	{r4, r7, pc}

0800cd54 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800cd54:	b590      	push	{r4, r7, lr}
 800cd56:	b093      	sub	sp, #76	; 0x4c
 800cd58:	af06      	add	r7, sp, #24
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	4613      	mov	r3, r2
 800cd60:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd62:	2300      	movs	r3, #0
 800cd64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800cd6c:	23b4      	movs	r3, #180	; 0xb4
 800cd6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800cd72:	2306      	movs	r3, #6
 800cd74:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800cd76:	232c      	movs	r3, #44	; 0x2c
 800cd78:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	21ff      	movs	r1, #255	; 0xff
 800cd7e:	68f8      	ldr	r0, [r7, #12]
 800cd80:	f002 fdf2 	bl	800f968 <VL53L0X_WrByte>
 800cd84:	4603      	mov	r3, r0
 800cd86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800cd8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d107      	bne.n	800cda2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800cd92:	2200      	movs	r2, #0
 800cd94:	214f      	movs	r1, #79	; 0x4f
 800cd96:	68f8      	ldr	r0, [r7, #12]
 800cd98:	f002 fde6 	bl	800f968 <VL53L0X_WrByte>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800cda2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d107      	bne.n	800cdba <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800cdaa:	222c      	movs	r2, #44	; 0x2c
 800cdac:	214e      	movs	r1, #78	; 0x4e
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f002 fdda 	bl	800f968 <VL53L0X_WrByte>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800cdba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d107      	bne.n	800cdd2 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	21ff      	movs	r1, #255	; 0xff
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f002 fdce 	bl	800f968 <VL53L0X_WrByte>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800cdd2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d109      	bne.n	800cdee <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800cdda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cdde:	461a      	mov	r2, r3
 800cde0:	21b6      	movs	r1, #182	; 0xb6
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f002 fdc0 	bl	800f968 <VL53L0X_WrByte>
 800cde8:	4603      	mov	r3, r0
 800cdea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800cdee:	2300      	movs	r3, #0
 800cdf0:	627b      	str	r3, [r7, #36]	; 0x24
 800cdf2:	e009      	b.n	800ce08 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf8:	4413      	add	r3, r2
 800cdfa:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800cdfe:	2200      	movs	r2, #0
 800ce00:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800ce02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce04:	3301      	adds	r3, #1
 800ce06:	627b      	str	r3, [r7, #36]	; 0x24
 800ce08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d3f1      	bcc.n	800cdf4 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800ce10:	79fb      	ldrb	r3, [r7, #7]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d011      	beq.n	800ce3a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800ce16:	e002      	b.n	800ce1e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800ce18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800ce1e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800ce22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce24:	4413      	add	r3, r2
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7ff fc2a 	bl	800c680 <is_aperture>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d103      	bne.n	800ce3a <VL53L0X_set_reference_spads+0xe6>
 800ce32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d3ee      	bcc.n	800ce18 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800ce46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce4a:	79f9      	ldrb	r1, [r7, #7]
 800ce4c:	f107 0214 	add.w	r2, r7, #20
 800ce50:	9204      	str	r2, [sp, #16]
 800ce52:	68ba      	ldr	r2, [r7, #8]
 800ce54:	9203      	str	r2, [sp, #12]
 800ce56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce58:	9202      	str	r2, [sp, #8]
 800ce5a:	9301      	str	r3, [sp, #4]
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	4623      	mov	r3, r4
 800ce62:	4602      	mov	r2, r0
 800ce64:	68f8      	ldr	r0, [r7, #12]
 800ce66:	f7ff fc83 	bl	800c770 <enable_ref_spads>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800ce70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d10c      	bne.n	800ce92 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	b2da      	uxtb	r2, r3
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	79fa      	ldrb	r2, [r7, #7]
 800ce8e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800ce92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3734      	adds	r7, #52	; 0x34
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd90      	pop	{r4, r7, pc}

0800ce9e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b084      	sub	sp, #16
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
 800cea6:	460b      	mov	r3, r1
 800cea8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800ceae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10a      	bne.n	800cecc <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800ceb6:	78fb      	ldrb	r3, [r7, #3]
 800ceb8:	f043 0301 	orr.w	r3, r3, #1
 800cebc:	b2db      	uxtb	r3, r3
 800cebe:	461a      	mov	r2, r3
 800cec0:	2100      	movs	r1, #0
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f002 fd50 	bl	800f968 <VL53L0X_WrByte>
 800cec8:	4603      	mov	r3, r0
 800ceca:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800cecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d104      	bne.n	800cede <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 f9bf 	bl	800d258 <VL53L0X_measurement_poll_for_completion>
 800ceda:	4603      	mov	r3, r0
 800cedc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800cede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d105      	bne.n	800cef2 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800cee6:	2100      	movs	r1, #0
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7ff fa85 	bl	800c3f8 <VL53L0X_ClearInterruptMask>
 800ceee:	4603      	mov	r3, r0
 800cef0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800cef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d106      	bne.n	800cf08 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800cefa:	2200      	movs	r2, #0
 800cefc:	2100      	movs	r1, #0
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f002 fd32 	bl	800f968 <VL53L0X_WrByte>
 800cf04:	4603      	mov	r3, r0
 800cf06:	73fb      	strb	r3, [r7, #15]

	return Status;
 800cf08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3710      	adds	r7, #16
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	4608      	mov	r0, r1
 800cf1e:	4611      	mov	r1, r2
 800cf20:	461a      	mov	r2, r3
 800cf22:	4603      	mov	r3, r0
 800cf24:	70fb      	strb	r3, [r7, #3]
 800cf26:	460b      	mov	r3, r1
 800cf28:	70bb      	strb	r3, [r7, #2]
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800cf32:	2300      	movs	r3, #0
 800cf34:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cf36:	2201      	movs	r2, #1
 800cf38:	21ff      	movs	r1, #255	; 0xff
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f002 fd14 	bl	800f968 <VL53L0X_WrByte>
 800cf40:	4603      	mov	r3, r0
 800cf42:	461a      	mov	r2, r3
 800cf44:	7bfb      	ldrb	r3, [r7, #15]
 800cf46:	4313      	orrs	r3, r2
 800cf48:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f002 fd0a 	bl	800f968 <VL53L0X_WrByte>
 800cf54:	4603      	mov	r3, r0
 800cf56:	461a      	mov	r2, r3
 800cf58:	7bfb      	ldrb	r3, [r7, #15]
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cf5e:	2200      	movs	r2, #0
 800cf60:	21ff      	movs	r1, #255	; 0xff
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f002 fd00 	bl	800f968 <VL53L0X_WrByte>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800cf72:	78fb      	ldrb	r3, [r7, #3]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d01e      	beq.n	800cfb6 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800cf78:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d009      	beq.n	800cf94 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800cf80:	69ba      	ldr	r2, [r7, #24]
 800cf82:	21cb      	movs	r1, #203	; 0xcb
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f002 fd71 	bl	800fa6c <VL53L0X_RdByte>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	7bfb      	ldrb	r3, [r7, #15]
 800cf90:	4313      	orrs	r3, r2
 800cf92:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800cf94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d02a      	beq.n	800cff2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800cf9c:	f107 030e 	add.w	r3, r7, #14
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	21ee      	movs	r1, #238	; 0xee
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f002 fd61 	bl	800fa6c <VL53L0X_RdByte>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	461a      	mov	r2, r3
 800cfae:	7bfb      	ldrb	r3, [r7, #15]
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	73fb      	strb	r3, [r7, #15]
 800cfb4:	e01d      	b.n	800cff2 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800cfb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d00a      	beq.n	800cfd4 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800cfbe:	78bb      	ldrb	r3, [r7, #2]
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	21cb      	movs	r1, #203	; 0xcb
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f002 fccf 	bl	800f968 <VL53L0X_WrByte>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	461a      	mov	r2, r3
 800cfce:	7bfb      	ldrb	r3, [r7, #15]
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800cfd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d00a      	beq.n	800cff2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800cfdc:	787b      	ldrb	r3, [r7, #1]
 800cfde:	2280      	movs	r2, #128	; 0x80
 800cfe0:	21ee      	movs	r1, #238	; 0xee
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f002 fd0e 	bl	800fa04 <VL53L0X_UpdateByte>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	461a      	mov	r2, r3
 800cfec:	7bfb      	ldrb	r3, [r7, #15]
 800cfee:	4313      	orrs	r3, r2
 800cff0:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cff2:	2201      	movs	r2, #1
 800cff4:	21ff      	movs	r1, #255	; 0xff
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f002 fcb6 	bl	800f968 <VL53L0X_WrByte>
 800cffc:	4603      	mov	r3, r0
 800cffe:	461a      	mov	r2, r3
 800d000:	7bfb      	ldrb	r3, [r7, #15]
 800d002:	4313      	orrs	r3, r2
 800d004:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800d006:	2201      	movs	r2, #1
 800d008:	2100      	movs	r1, #0
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f002 fcac 	bl	800f968 <VL53L0X_WrByte>
 800d010:	4603      	mov	r3, r0
 800d012:	461a      	mov	r2, r3
 800d014:	7bfb      	ldrb	r3, [r7, #15]
 800d016:	4313      	orrs	r3, r2
 800d018:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d01a:	2200      	movs	r2, #0
 800d01c:	21ff      	movs	r1, #255	; 0xff
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f002 fca2 	bl	800f968 <VL53L0X_WrByte>
 800d024:	4603      	mov	r3, r0
 800d026:	461a      	mov	r2, r3
 800d028:	7bfb      	ldrb	r3, [r7, #15]
 800d02a:	4313      	orrs	r3, r2
 800d02c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800d02e:	7bbb      	ldrb	r3, [r7, #14]
 800d030:	f023 0310 	bic.w	r3, r3, #16
 800d034:	b2da      	uxtb	r2, r3
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	701a      	strb	r2, [r3, #0]

	return Status;
 800d03a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d046:	b580      	push	{r7, lr}
 800d048:	b08a      	sub	sp, #40	; 0x28
 800d04a:	af04      	add	r7, sp, #16
 800d04c:	60f8      	str	r0, [r7, #12]
 800d04e:	60b9      	str	r1, [r7, #8]
 800d050:	4611      	mov	r1, r2
 800d052:	461a      	mov	r2, r3
 800d054:	460b      	mov	r3, r1
 800d056:	71fb      	strb	r3, [r7, #7]
 800d058:	4613      	mov	r3, r2
 800d05a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d05c:	2300      	movs	r3, #0
 800d05e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d060:	2300      	movs	r3, #0
 800d062:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d064:	2300      	movs	r3, #0
 800d066:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d068:	2300      	movs	r3, #0
 800d06a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800d06c:	2300      	movs	r3, #0
 800d06e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d070:	79bb      	ldrb	r3, [r7, #6]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d003      	beq.n	800d07e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d07c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800d07e:	2201      	movs	r2, #1
 800d080:	2101      	movs	r1, #1
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f002 fc70 	bl	800f968 <VL53L0X_WrByte>
 800d088:	4603      	mov	r3, r0
 800d08a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800d08c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d105      	bne.n	800d0a0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800d094:	2140      	movs	r1, #64	; 0x40
 800d096:	68f8      	ldr	r0, [r7, #12]
 800d098:	f7ff ff01 	bl	800ce9e <VL53L0X_perform_single_ref_calibration>
 800d09c:	4603      	mov	r3, r0
 800d09e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d0a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d115      	bne.n	800d0d4 <VL53L0X_perform_vhv_calibration+0x8e>
 800d0a8:	79fb      	ldrb	r3, [r7, #7]
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d112      	bne.n	800d0d4 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d0ae:	7d39      	ldrb	r1, [r7, #20]
 800d0b0:	7d7a      	ldrb	r2, [r7, #21]
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	9303      	str	r3, [sp, #12]
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	9302      	str	r3, [sp, #8]
 800d0ba:	f107 0313 	add.w	r3, r7, #19
 800d0be:	9301      	str	r3, [sp, #4]
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	9300      	str	r3, [sp, #0]
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	2101      	movs	r1, #1
 800d0c8:	68f8      	ldr	r0, [r7, #12]
 800d0ca:	f7ff ff23 	bl	800cf14 <VL53L0X_ref_calibration_io>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	75fb      	strb	r3, [r7, #23]
 800d0d2:	e002      	b.n	800d0da <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d0da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d112      	bne.n	800d108 <VL53L0X_perform_vhv_calibration+0xc2>
 800d0e2:	79bb      	ldrb	r3, [r7, #6]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d00f      	beq.n	800d108 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d0e8:	7dbb      	ldrb	r3, [r7, #22]
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	2101      	movs	r1, #1
 800d0ee:	68f8      	ldr	r0, [r7, #12]
 800d0f0:	f002 fc3a 	bl	800f968 <VL53L0X_WrByte>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d0f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d103      	bne.n	800d108 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	7dba      	ldrb	r2, [r7, #22]
 800d104:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d108:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3718      	adds	r7, #24
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b08a      	sub	sp, #40	; 0x28
 800d118:	af04      	add	r7, sp, #16
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	4611      	mov	r1, r2
 800d120:	461a      	mov	r2, r3
 800d122:	460b      	mov	r3, r1
 800d124:	71fb      	strb	r3, [r7, #7]
 800d126:	4613      	mov	r3, r2
 800d128:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d12a:	2300      	movs	r3, #0
 800d12c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d12e:	2300      	movs	r3, #0
 800d130:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d132:	2300      	movs	r3, #0
 800d134:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d136:	2300      	movs	r3, #0
 800d138:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d13a:	79bb      	ldrb	r3, [r7, #6]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d003      	beq.n	800d148 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d146:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800d148:	2202      	movs	r2, #2
 800d14a:	2101      	movs	r1, #1
 800d14c:	68f8      	ldr	r0, [r7, #12]
 800d14e:	f002 fc0b 	bl	800f968 <VL53L0X_WrByte>
 800d152:	4603      	mov	r3, r0
 800d154:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800d156:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d105      	bne.n	800d16a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800d15e:	2100      	movs	r1, #0
 800d160:	68f8      	ldr	r0, [r7, #12]
 800d162:	f7ff fe9c 	bl	800ce9e <VL53L0X_perform_single_ref_calibration>
 800d166:	4603      	mov	r3, r0
 800d168:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d16a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d115      	bne.n	800d19e <VL53L0X_perform_phase_calibration+0x8a>
 800d172:	79fb      	ldrb	r3, [r7, #7]
 800d174:	2b01      	cmp	r3, #1
 800d176:	d112      	bne.n	800d19e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d178:	7d39      	ldrb	r1, [r7, #20]
 800d17a:	7d7a      	ldrb	r2, [r7, #21]
 800d17c:	2301      	movs	r3, #1
 800d17e:	9303      	str	r3, [sp, #12]
 800d180:	2300      	movs	r3, #0
 800d182:	9302      	str	r3, [sp, #8]
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	9301      	str	r3, [sp, #4]
 800d188:	f107 0313 	add.w	r3, r7, #19
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	460b      	mov	r3, r1
 800d190:	2101      	movs	r1, #1
 800d192:	68f8      	ldr	r0, [r7, #12]
 800d194:	f7ff febe 	bl	800cf14 <VL53L0X_ref_calibration_io>
 800d198:	4603      	mov	r3, r0
 800d19a:	75fb      	strb	r3, [r7, #23]
 800d19c:	e002      	b.n	800d1a4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d1a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d112      	bne.n	800d1d2 <VL53L0X_perform_phase_calibration+0xbe>
 800d1ac:	79bb      	ldrb	r3, [r7, #6]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d00f      	beq.n	800d1d2 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d1b2:	7dbb      	ldrb	r3, [r7, #22]
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	2101      	movs	r1, #1
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f002 fbd5 	bl	800f968 <VL53L0X_WrByte>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d1c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d103      	bne.n	800d1d2 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	7dba      	ldrb	r2, [r7, #22]
 800d1ce:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d1d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3718      	adds	r7, #24
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b086      	sub	sp, #24
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	60f8      	str	r0, [r7, #12]
 800d1e6:	60b9      	str	r1, [r7, #8]
 800d1e8:	607a      	str	r2, [r7, #4]
 800d1ea:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d1fa:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800d1fc:	78fa      	ldrb	r2, [r7, #3]
 800d1fe:	2300      	movs	r3, #0
 800d200:	68b9      	ldr	r1, [r7, #8]
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f7ff ff1f 	bl	800d046 <VL53L0X_perform_vhv_calibration>
 800d208:	4603      	mov	r3, r0
 800d20a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800d20c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d107      	bne.n	800d224 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800d214:	78fa      	ldrb	r2, [r7, #3]
 800d216:	2300      	movs	r3, #0
 800d218:	6879      	ldr	r1, [r7, #4]
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f7ff ff7a 	bl	800d114 <VL53L0X_perform_phase_calibration>
 800d220:	4603      	mov	r3, r0
 800d222:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800d224:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d10f      	bne.n	800d24c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d22c:	7dbb      	ldrb	r3, [r7, #22]
 800d22e:	461a      	mov	r2, r3
 800d230:	2101      	movs	r1, #1
 800d232:	68f8      	ldr	r0, [r7, #12]
 800d234:	f002 fb98 	bl	800f968 <VL53L0X_WrByte>
 800d238:	4603      	mov	r3, r0
 800d23a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d23c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d103      	bne.n	800d24c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	7dba      	ldrb	r2, [r7, #22]
 800d248:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d24c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d250:	4618      	mov	r0, r3
 800d252:	3718      	adds	r7, #24
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b086      	sub	sp, #24
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d260:	2300      	movs	r3, #0
 800d262:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800d264:	2300      	movs	r3, #0
 800d266:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800d268:	2300      	movs	r3, #0
 800d26a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800d26c:	f107 030f 	add.w	r3, r7, #15
 800d270:	4619      	mov	r1, r3
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f7fe fdd2 	bl	800be1c <VL53L0X_GetMeasurementDataReady>
 800d278:	4603      	mov	r3, r0
 800d27a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800d27c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d110      	bne.n	800d2a6 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800d284:	7bfb      	ldrb	r3, [r7, #15]
 800d286:	2b01      	cmp	r3, #1
 800d288:	d00f      	beq.n	800d2aa <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	3301      	adds	r3, #1
 800d28e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d296:	d302      	bcc.n	800d29e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800d298:	23f9      	movs	r3, #249	; 0xf9
 800d29a:	75fb      	strb	r3, [r7, #23]
			break;
 800d29c:	e006      	b.n	800d2ac <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f002 fc82 	bl	800fba8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800d2a4:	e7e2      	b.n	800d26c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800d2a6:	bf00      	nop
 800d2a8:	e000      	b.n	800d2ac <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800d2aa:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800d2ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3718      	adds	r7, #24
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	4603      	mov	r3, r0
 800d2c0:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800d2c6:	79fb      	ldrb	r3, [r7, #7]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	005b      	lsls	r3, r3, #1
 800d2ce:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800d2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3714      	adds	r7, #20
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr

0800d2de <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800d2de:	b480      	push	{r7}
 800d2e0:	b085      	sub	sp, #20
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800d2ec:	79fb      	ldrb	r3, [r7, #7]
 800d2ee:	085b      	lsrs	r3, r3, #1
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	3b01      	subs	r3, #1
 800d2f4:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800d2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3714      	adds	r7, #20
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800d304:	b480      	push	{r7}
 800d306:	b085      	sub	sp, #20
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800d30c:	2300      	movs	r3, #0
 800d30e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800d310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d314:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800d316:	e002      	b.n	800d31e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	089b      	lsrs	r3, r3, #2
 800d31c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800d31e:	68ba      	ldr	r2, [r7, #8]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	429a      	cmp	r2, r3
 800d324:	d8f8      	bhi.n	800d318 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800d326:	e017      	b.n	800d358 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	4413      	add	r3, r2
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	429a      	cmp	r2, r3
 800d332:	d30b      	bcc.n	800d34c <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800d334:	68fa      	ldr	r2, [r7, #12]
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	4413      	add	r3, r2
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	1ad3      	subs	r3, r2, r3
 800d33e:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	085b      	lsrs	r3, r3, #1
 800d344:	68ba      	ldr	r2, [r7, #8]
 800d346:	4413      	add	r3, r2
 800d348:	60fb      	str	r3, [r7, #12]
 800d34a:	e002      	b.n	800d352 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	085b      	lsrs	r3, r3, #1
 800d350:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	089b      	lsrs	r3, r3, #2
 800d356:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d1e4      	bne.n	800d328 <VL53L0X_isqrt+0x24>
	}

	return res;
 800d35e:	68fb      	ldr	r3, [r7, #12]
}
 800d360:	4618      	mov	r0, r3
 800d362:	3714      	adds	r7, #20
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr

0800d36c <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b086      	sub	sp, #24
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d374:	2300      	movs	r3, #0
 800d376:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800d378:	2200      	movs	r2, #0
 800d37a:	2183      	movs	r1, #131	; 0x83
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f002 faf3 	bl	800f968 <VL53L0X_WrByte>
 800d382:	4603      	mov	r3, r0
 800d384:	461a      	mov	r2, r3
 800d386:	7dfb      	ldrb	r3, [r7, #23]
 800d388:	4313      	orrs	r3, r2
 800d38a:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800d38c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d11e      	bne.n	800d3d2 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800d394:	2300      	movs	r3, #0
 800d396:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800d398:	f107 030f 	add.w	r3, r7, #15
 800d39c:	461a      	mov	r2, r3
 800d39e:	2183      	movs	r1, #131	; 0x83
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f002 fb63 	bl	800fa6c <VL53L0X_RdByte>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800d3aa:	7bfb      	ldrb	r3, [r7, #15]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d10a      	bne.n	800d3c6 <VL53L0X_device_read_strobe+0x5a>
 800d3b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d106      	bne.n	800d3c6 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d3c4:	d3e8      	bcc.n	800d398 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d3cc:	d301      	bcc.n	800d3d2 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800d3ce:	23f9      	movs	r3, #249	; 0xf9
 800d3d0:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	2183      	movs	r1, #131	; 0x83
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f002 fac6 	bl	800f968 <VL53L0X_WrByte>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	461a      	mov	r2, r3
 800d3e0:	7dfb      	ldrb	r3, [r7, #23]
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800d3e6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3718      	adds	r7, #24
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}

0800d3f2 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b098      	sub	sp, #96	; 0x60
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d3fe:	2300      	movs	r3, #0
 800d400:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800d404:	2300      	movs	r3, #0
 800d406:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800d40a:	2300      	movs	r3, #0
 800d40c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800d410:	2300      	movs	r3, #0
 800d412:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800d414:	2300      	movs	r3, #0
 800d416:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800d418:	2300      	movs	r3, #0
 800d41a:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800d41c:	2300      	movs	r3, #0
 800d41e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800d422:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800d426:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800d428:	2300      	movs	r3, #0
 800d42a:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800d42c:	2300      	movs	r3, #0
 800d42e:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800d430:	2300      	movs	r3, #0
 800d432:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800d43a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800d43e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d442:	2b07      	cmp	r3, #7
 800d444:	f000 8408 	beq.w	800dc58 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800d448:	2201      	movs	r2, #1
 800d44a:	2180      	movs	r1, #128	; 0x80
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f002 fa8b 	bl	800f968 <VL53L0X_WrByte>
 800d452:	4603      	mov	r3, r0
 800d454:	461a      	mov	r2, r3
 800d456:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d45a:	4313      	orrs	r3, r2
 800d45c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d460:	2201      	movs	r2, #1
 800d462:	21ff      	movs	r1, #255	; 0xff
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f002 fa7f 	bl	800f968 <VL53L0X_WrByte>
 800d46a:	4603      	mov	r3, r0
 800d46c:	461a      	mov	r2, r3
 800d46e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d472:	4313      	orrs	r3, r2
 800d474:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d478:	2200      	movs	r2, #0
 800d47a:	2100      	movs	r1, #0
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f002 fa73 	bl	800f968 <VL53L0X_WrByte>
 800d482:	4603      	mov	r3, r0
 800d484:	461a      	mov	r2, r3
 800d486:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d48a:	4313      	orrs	r3, r2
 800d48c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800d490:	2206      	movs	r2, #6
 800d492:	21ff      	movs	r1, #255	; 0xff
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f002 fa67 	bl	800f968 <VL53L0X_WrByte>
 800d49a:	4603      	mov	r3, r0
 800d49c:	461a      	mov	r2, r3
 800d49e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800d4a8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	2183      	movs	r1, #131	; 0x83
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f002 fadb 	bl	800fa6c <VL53L0X_RdByte>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800d4c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d4c8:	f043 0304 	orr.w	r3, r3, #4
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	2183      	movs	r1, #131	; 0x83
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f002 fa48 	bl	800f968 <VL53L0X_WrByte>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	461a      	mov	r2, r3
 800d4dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800d4e6:	2207      	movs	r2, #7
 800d4e8:	21ff      	movs	r1, #255	; 0xff
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f002 fa3c 	bl	800f968 <VL53L0X_WrByte>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800d4fe:	2201      	movs	r2, #1
 800d500:	2181      	movs	r1, #129	; 0x81
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f002 fa30 	bl	800f968 <VL53L0X_WrByte>
 800d508:	4603      	mov	r3, r0
 800d50a:	461a      	mov	r2, r3
 800d50c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d510:	4313      	orrs	r3, r2
 800d512:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f002 fb46 	bl	800fba8 <VL53L0X_PollingDelay>
 800d51c:	4603      	mov	r3, r0
 800d51e:	461a      	mov	r2, r3
 800d520:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d524:	4313      	orrs	r3, r2
 800d526:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800d52a:	2201      	movs	r2, #1
 800d52c:	2180      	movs	r1, #128	; 0x80
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f002 fa1a 	bl	800f968 <VL53L0X_WrByte>
 800d534:	4603      	mov	r3, r0
 800d536:	461a      	mov	r2, r3
 800d538:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d53c:	4313      	orrs	r3, r2
 800d53e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800d542:	78fb      	ldrb	r3, [r7, #3]
 800d544:	f003 0301 	and.w	r3, r3, #1
 800d548:	2b00      	cmp	r3, #0
 800d54a:	f000 8098 	beq.w	800d67e <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800d54e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d552:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800d556:	2b00      	cmp	r3, #0
 800d558:	f040 8091 	bne.w	800d67e <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800d55c:	226b      	movs	r2, #107	; 0x6b
 800d55e:	2194      	movs	r1, #148	; 0x94
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f002 fa01 	bl	800f968 <VL53L0X_WrByte>
 800d566:	4603      	mov	r3, r0
 800d568:	461a      	mov	r2, r3
 800d56a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d56e:	4313      	orrs	r3, r2
 800d570:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f7ff fef9 	bl	800d36c <VL53L0X_device_read_strobe>
 800d57a:	4603      	mov	r3, r0
 800d57c:	461a      	mov	r2, r3
 800d57e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d582:	4313      	orrs	r3, r2
 800d584:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d58c:	461a      	mov	r2, r3
 800d58e:	2190      	movs	r1, #144	; 0x90
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f002 facd 	bl	800fb30 <VL53L0X_RdDWord>
 800d596:	4603      	mov	r3, r0
 800d598:	461a      	mov	r2, r3
 800d59a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800d5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a6:	0a1b      	lsrs	r3, r3, #8
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ae:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800d5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b4:	0bdb      	lsrs	r3, r3, #15
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	f003 0301 	and.w	r3, r3, #1
 800d5bc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800d5c0:	2224      	movs	r2, #36	; 0x24
 800d5c2:	2194      	movs	r1, #148	; 0x94
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f002 f9cf 	bl	800f968 <VL53L0X_WrByte>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f7ff fec7 	bl	800d36c <VL53L0X_device_read_strobe>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d5ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	2190      	movs	r1, #144	; 0x90
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f002 fa9b 	bl	800fb30 <VL53L0X_RdDWord>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d602:	4313      	orrs	r3, r2
 800d604:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800d608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60a:	0e1b      	lsrs	r3, r3, #24
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800d610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d612:	0c1b      	lsrs	r3, r3, #16
 800d614:	b2db      	uxtb	r3, r3
 800d616:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800d618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61a:	0a1b      	lsrs	r3, r3, #8
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800d620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d622:	b2db      	uxtb	r3, r3
 800d624:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800d626:	2225      	movs	r2, #37	; 0x25
 800d628:	2194      	movs	r1, #148	; 0x94
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f002 f99c 	bl	800f968 <VL53L0X_WrByte>
 800d630:	4603      	mov	r3, r0
 800d632:	461a      	mov	r2, r3
 800d634:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d638:	4313      	orrs	r3, r2
 800d63a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f7ff fe94 	bl	800d36c <VL53L0X_device_read_strobe>
 800d644:	4603      	mov	r3, r0
 800d646:	461a      	mov	r2, r3
 800d648:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d64c:	4313      	orrs	r3, r2
 800d64e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d652:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d656:	461a      	mov	r2, r3
 800d658:	2190      	movs	r1, #144	; 0x90
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f002 fa68 	bl	800fb30 <VL53L0X_RdDWord>
 800d660:	4603      	mov	r3, r0
 800d662:	461a      	mov	r2, r3
 800d664:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d668:	4313      	orrs	r3, r2
 800d66a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800d66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d670:	0e1b      	lsrs	r3, r3, #24
 800d672:	b2db      	uxtb	r3, r3
 800d674:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d678:	0c1b      	lsrs	r3, r3, #16
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800d67e:	78fb      	ldrb	r3, [r7, #3]
 800d680:	f003 0302 	and.w	r3, r3, #2
 800d684:	2b00      	cmp	r3, #0
 800d686:	f000 8189 	beq.w	800d99c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800d68a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d68e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800d692:	2b00      	cmp	r3, #0
 800d694:	f040 8182 	bne.w	800d99c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800d698:	2202      	movs	r2, #2
 800d69a:	2194      	movs	r1, #148	; 0x94
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f002 f963 	bl	800f968 <VL53L0X_WrByte>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f7ff fe5b 	bl	800d36c <VL53L0X_device_read_strobe>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800d6c4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800d6c8:	461a      	mov	r2, r3
 800d6ca:	2190      	movs	r1, #144	; 0x90
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f002 f9cd 	bl	800fa6c <VL53L0X_RdByte>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800d6e0:	227b      	movs	r2, #123	; 0x7b
 800d6e2:	2194      	movs	r1, #148	; 0x94
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f002 f93f 	bl	800f968 <VL53L0X_WrByte>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6f2:	4313      	orrs	r3, r2
 800d6f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f7ff fe37 	bl	800d36c <VL53L0X_device_read_strobe>
 800d6fe:	4603      	mov	r3, r0
 800d700:	461a      	mov	r2, r3
 800d702:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d706:	4313      	orrs	r3, r2
 800d708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800d70c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800d710:	461a      	mov	r2, r3
 800d712:	2190      	movs	r1, #144	; 0x90
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f002 f9a9 	bl	800fa6c <VL53L0X_RdByte>
 800d71a:	4603      	mov	r3, r0
 800d71c:	461a      	mov	r2, r3
 800d71e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d722:	4313      	orrs	r3, r2
 800d724:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800d728:	2277      	movs	r2, #119	; 0x77
 800d72a:	2194      	movs	r1, #148	; 0x94
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f002 f91b 	bl	800f968 <VL53L0X_WrByte>
 800d732:	4603      	mov	r3, r0
 800d734:	461a      	mov	r2, r3
 800d736:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d73a:	4313      	orrs	r3, r2
 800d73c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f7ff fe13 	bl	800d36c <VL53L0X_device_read_strobe>
 800d746:	4603      	mov	r3, r0
 800d748:	461a      	mov	r2, r3
 800d74a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d74e:	4313      	orrs	r3, r2
 800d750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d754:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d758:	461a      	mov	r2, r3
 800d75a:	2190      	movs	r1, #144	; 0x90
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f002 f9e7 	bl	800fb30 <VL53L0X_RdDWord>
 800d762:	4603      	mov	r3, r0
 800d764:	461a      	mov	r2, r3
 800d766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d76a:	4313      	orrs	r3, r2
 800d76c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800d770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d772:	0e5b      	lsrs	r3, r3, #25
 800d774:	b2db      	uxtb	r3, r3
 800d776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800d77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d780:	0c9b      	lsrs	r3, r3, #18
 800d782:	b2db      	uxtb	r3, r3
 800d784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800d78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78e:	0adb      	lsrs	r3, r3, #11
 800d790:	b2db      	uxtb	r3, r3
 800d792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d796:	b2db      	uxtb	r3, r3
 800d798:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800d79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79c:	091b      	lsrs	r3, r3, #4
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7a4:	b2db      	uxtb	r3, r3
 800d7a6:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800d7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	00db      	lsls	r3, r3, #3
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800d7ba:	2278      	movs	r2, #120	; 0x78
 800d7bc:	2194      	movs	r1, #148	; 0x94
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f002 f8d2 	bl	800f968 <VL53L0X_WrByte>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7ff fdca 	bl	800d36c <VL53L0X_device_read_strobe>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	461a      	mov	r2, r3
 800d7dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d7e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	2190      	movs	r1, #144	; 0x90
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f002 f99e 	bl	800fb30 <VL53L0X_RdDWord>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800d802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d804:	0f5b      	lsrs	r3, r3, #29
 800d806:	b2db      	uxtb	r3, r3
 800d808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d80c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800d80e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d812:	4413      	add	r3, r2
 800d814:	b2db      	uxtb	r3, r3
 800d816:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800d818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81a:	0d9b      	lsrs	r3, r3, #22
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d822:	b2db      	uxtb	r3, r3
 800d824:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800d826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d828:	0bdb      	lsrs	r3, r3, #15
 800d82a:	b2db      	uxtb	r3, r3
 800d82c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d830:	b2db      	uxtb	r3, r3
 800d832:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800d834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d836:	0a1b      	lsrs	r3, r3, #8
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800d842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d844:	085b      	lsrs	r3, r3, #1
 800d846:	b2db      	uxtb	r3, r3
 800d848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800d850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d852:	b2db      	uxtb	r3, r3
 800d854:	019b      	lsls	r3, r3, #6
 800d856:	b2db      	uxtb	r3, r3
 800d858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800d862:	2279      	movs	r2, #121	; 0x79
 800d864:	2194      	movs	r1, #148	; 0x94
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f002 f87e 	bl	800f968 <VL53L0X_WrByte>
 800d86c:	4603      	mov	r3, r0
 800d86e:	461a      	mov	r2, r3
 800d870:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d874:	4313      	orrs	r3, r2
 800d876:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f7ff fd76 	bl	800d36c <VL53L0X_device_read_strobe>
 800d880:	4603      	mov	r3, r0
 800d882:	461a      	mov	r2, r3
 800d884:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d888:	4313      	orrs	r3, r2
 800d88a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d88e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d892:	461a      	mov	r2, r3
 800d894:	2190      	movs	r1, #144	; 0x90
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f002 f94a 	bl	800fb30 <VL53L0X_RdDWord>
 800d89c:	4603      	mov	r3, r0
 800d89e:	461a      	mov	r2, r3
 800d8a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ac:	0e9b      	lsrs	r3, r3, #26
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8b4:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800d8b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8ba:	4413      	add	r3, r2
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800d8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c2:	0cdb      	lsrs	r3, r3, #19
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800d8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d0:	0b1b      	lsrs	r3, r3, #12
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800d8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8de:	095b      	lsrs	r3, r3, #5
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	009b      	lsls	r3, r3, #2
 800d8f0:	b2db      	uxtb	r3, r3
 800d8f2:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800d8fc:	227a      	movs	r2, #122	; 0x7a
 800d8fe:	2194      	movs	r1, #148	; 0x94
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f002 f831 	bl	800f968 <VL53L0X_WrByte>
 800d906:	4603      	mov	r3, r0
 800d908:	461a      	mov	r2, r3
 800d90a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d90e:	4313      	orrs	r3, r2
 800d910:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f7ff fd29 	bl	800d36c <VL53L0X_device_read_strobe>
 800d91a:	4603      	mov	r3, r0
 800d91c:	461a      	mov	r2, r3
 800d91e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d922:	4313      	orrs	r3, r2
 800d924:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d928:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d92c:	461a      	mov	r2, r3
 800d92e:	2190      	movs	r1, #144	; 0x90
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f002 f8fd 	bl	800fb30 <VL53L0X_RdDWord>
 800d936:	4603      	mov	r3, r0
 800d938:	461a      	mov	r2, r3
 800d93a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d93e:	4313      	orrs	r3, r2
 800d940:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800d944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d946:	0f9b      	lsrs	r3, r3, #30
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d94e:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800d950:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d954:	4413      	add	r3, r2
 800d956:	b2db      	uxtb	r3, r3
 800d958:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800d95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95c:	0ddb      	lsrs	r3, r3, #23
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d964:	b2db      	uxtb	r3, r3
 800d966:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800d968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96a:	0c1b      	lsrs	r3, r3, #16
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d972:	b2db      	uxtb	r3, r3
 800d974:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800d976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d978:	0a5b      	lsrs	r3, r3, #9
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d980:	b2db      	uxtb	r3, r3
 800d982:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800d986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d988:	089b      	lsrs	r3, r3, #2
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d990:	b2db      	uxtb	r3, r3
 800d992:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800d996:	2300      	movs	r3, #0
 800d998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800d99c:	78fb      	ldrb	r3, [r7, #3]
 800d99e:	f003 0304 	and.w	r3, r3, #4
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	f000 80f1 	beq.w	800db8a <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800d9a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d9ac:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	f040 80ea 	bne.w	800db8a <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800d9b6:	227b      	movs	r2, #123	; 0x7b
 800d9b8:	2194      	movs	r1, #148	; 0x94
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f001 ffd4 	bl	800f968 <VL53L0X_WrByte>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f7ff fccc 	bl	800d36c <VL53L0X_device_read_strobe>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9dc:	4313      	orrs	r3, r2
 800d9de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800d9e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	2190      	movs	r1, #144	; 0x90
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f002 f8a0 	bl	800fb30 <VL53L0X_RdDWord>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800d9fe:	227c      	movs	r2, #124	; 0x7c
 800da00:	2194      	movs	r1, #148	; 0x94
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f001 ffb0 	bl	800f968 <VL53L0X_WrByte>
 800da08:	4603      	mov	r3, r0
 800da0a:	461a      	mov	r2, r3
 800da0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da10:	4313      	orrs	r3, r2
 800da12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f7ff fca8 	bl	800d36c <VL53L0X_device_read_strobe>
 800da1c:	4603      	mov	r3, r0
 800da1e:	461a      	mov	r2, r3
 800da20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da24:	4313      	orrs	r3, r2
 800da26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800da2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da2e:	461a      	mov	r2, r3
 800da30:	2190      	movs	r1, #144	; 0x90
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f002 f87c 	bl	800fb30 <VL53L0X_RdDWord>
 800da38:	4603      	mov	r3, r0
 800da3a:	461a      	mov	r2, r3
 800da3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da40:	4313      	orrs	r3, r2
 800da42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800da46:	2273      	movs	r2, #115	; 0x73
 800da48:	2194      	movs	r1, #148	; 0x94
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f001 ff8c 	bl	800f968 <VL53L0X_WrByte>
 800da50:	4603      	mov	r3, r0
 800da52:	461a      	mov	r2, r3
 800da54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da58:	4313      	orrs	r3, r2
 800da5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f7ff fc84 	bl	800d36c <VL53L0X_device_read_strobe>
 800da64:	4603      	mov	r3, r0
 800da66:	461a      	mov	r2, r3
 800da68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da6c:	4313      	orrs	r3, r2
 800da6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800da72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800da76:	461a      	mov	r2, r3
 800da78:	2190      	movs	r1, #144	; 0x90
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f002 f858 	bl	800fb30 <VL53L0X_RdDWord>
 800da80:	4603      	mov	r3, r0
 800da82:	461a      	mov	r2, r3
 800da84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da88:	4313      	orrs	r3, r2
 800da8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800da8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da90:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800da92:	b29b      	uxth	r3, r3
 800da94:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800da96:	2274      	movs	r2, #116	; 0x74
 800da98:	2194      	movs	r1, #148	; 0x94
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f001 ff64 	bl	800f968 <VL53L0X_WrByte>
 800daa0:	4603      	mov	r3, r0
 800daa2:	461a      	mov	r2, r3
 800daa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800daa8:	4313      	orrs	r3, r2
 800daaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f7ff fc5c 	bl	800d36c <VL53L0X_device_read_strobe>
 800dab4:	4603      	mov	r3, r0
 800dab6:	461a      	mov	r2, r3
 800dab8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dabc:	4313      	orrs	r3, r2
 800dabe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dac2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dac6:	461a      	mov	r2, r3
 800dac8:	2190      	movs	r1, #144	; 0x90
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f002 f830 	bl	800fb30 <VL53L0X_RdDWord>
 800dad0:	4603      	mov	r3, r0
 800dad2:	461a      	mov	r2, r3
 800dad4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dad8:	4313      	orrs	r3, r2
 800dada:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800dade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae0:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800dae2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dae4:	4313      	orrs	r3, r2
 800dae6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800dae8:	2275      	movs	r2, #117	; 0x75
 800daea:	2194      	movs	r1, #148	; 0x94
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f001 ff3b 	bl	800f968 <VL53L0X_WrByte>
 800daf2:	4603      	mov	r3, r0
 800daf4:	461a      	mov	r2, r3
 800daf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dafa:	4313      	orrs	r3, r2
 800dafc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f7ff fc33 	bl	800d36c <VL53L0X_device_read_strobe>
 800db06:	4603      	mov	r3, r0
 800db08:	461a      	mov	r2, r3
 800db0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db0e:	4313      	orrs	r3, r2
 800db10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800db14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db18:	461a      	mov	r2, r3
 800db1a:	2190      	movs	r1, #144	; 0x90
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f002 f807 	bl	800fb30 <VL53L0X_RdDWord>
 800db22:	4603      	mov	r3, r0
 800db24:	461a      	mov	r2, r3
 800db26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db2a:	4313      	orrs	r3, r2
 800db2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800db30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db32:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800db34:	b29b      	uxth	r3, r3
 800db36:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800db38:	2276      	movs	r2, #118	; 0x76
 800db3a:	2194      	movs	r1, #148	; 0x94
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f001 ff13 	bl	800f968 <VL53L0X_WrByte>
 800db42:	4603      	mov	r3, r0
 800db44:	461a      	mov	r2, r3
 800db46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db4a:	4313      	orrs	r3, r2
 800db4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f7ff fc0b 	bl	800d36c <VL53L0X_device_read_strobe>
 800db56:	4603      	mov	r3, r0
 800db58:	461a      	mov	r2, r3
 800db5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db5e:	4313      	orrs	r3, r2
 800db60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800db64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db68:	461a      	mov	r2, r3
 800db6a:	2190      	movs	r1, #144	; 0x90
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f001 ffdf 	bl	800fb30 <VL53L0X_RdDWord>
 800db72:	4603      	mov	r3, r0
 800db74:	461a      	mov	r2, r3
 800db76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db7a:	4313      	orrs	r3, r2
 800db7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800db80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db82:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800db84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db86:	4313      	orrs	r3, r2
 800db88:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800db8a:	2200      	movs	r2, #0
 800db8c:	2181      	movs	r1, #129	; 0x81
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f001 feea 	bl	800f968 <VL53L0X_WrByte>
 800db94:	4603      	mov	r3, r0
 800db96:	461a      	mov	r2, r3
 800db98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db9c:	4313      	orrs	r3, r2
 800db9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800dba2:	2206      	movs	r2, #6
 800dba4:	21ff      	movs	r1, #255	; 0xff
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f001 fede 	bl	800f968 <VL53L0X_WrByte>
 800dbac:	4603      	mov	r3, r0
 800dbae:	461a      	mov	r2, r3
 800dbb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800dbba:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	2183      	movs	r1, #131	; 0x83
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f001 ff52 	bl	800fa6c <VL53L0X_RdByte>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	461a      	mov	r2, r3
 800dbcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800dbd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dbda:	f023 0304 	bic.w	r3, r3, #4
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	2183      	movs	r1, #131	; 0x83
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f001 febf 	bl	800f968 <VL53L0X_WrByte>
 800dbea:	4603      	mov	r3, r0
 800dbec:	461a      	mov	r2, r3
 800dbee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	21ff      	movs	r1, #255	; 0xff
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f001 feb3 	bl	800f968 <VL53L0X_WrByte>
 800dc02:	4603      	mov	r3, r0
 800dc04:	461a      	mov	r2, r3
 800dc06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800dc10:	2201      	movs	r2, #1
 800dc12:	2100      	movs	r1, #0
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f001 fea7 	bl	800f968 <VL53L0X_WrByte>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc22:	4313      	orrs	r3, r2
 800dc24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800dc28:	2200      	movs	r2, #0
 800dc2a:	21ff      	movs	r1, #255	; 0xff
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f001 fe9b 	bl	800f968 <VL53L0X_WrByte>
 800dc32:	4603      	mov	r3, r0
 800dc34:	461a      	mov	r2, r3
 800dc36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800dc40:	2200      	movs	r2, #0
 800dc42:	2180      	movs	r1, #128	; 0x80
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f001 fe8f 	bl	800f968 <VL53L0X_WrByte>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc52:	4313      	orrs	r3, r2
 800dc54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800dc58:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	f040 808f 	bne.w	800dd80 <VL53L0X_get_info_from_device+0x98e>
 800dc62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc66:	2b07      	cmp	r3, #7
 800dc68:	f000 808a 	beq.w	800dd80 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800dc6c:	78fb      	ldrb	r3, [r7, #3]
 800dc6e:	f003 0301 	and.w	r3, r3, #1
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d024      	beq.n	800dcc0 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800dc76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc7a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d11e      	bne.n	800dcc0 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800dc88:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800dc92:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800dc96:	2300      	movs	r3, #0
 800dc98:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc9a:	e00e      	b.n	800dcba <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800dc9c:	f107 0208 	add.w	r2, r7, #8
 800dca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dca2:	4413      	add	r3, r2
 800dca4:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcaa:	4413      	add	r3, r2
 800dcac:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800dcb0:	460a      	mov	r2, r1
 800dcb2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800dcb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dcba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcbc:	2b05      	cmp	r3, #5
 800dcbe:	dded      	ble.n	800dc9c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800dcc0:	78fb      	ldrb	r3, [r7, #3]
 800dcc2:	f003 0302 	and.w	r3, r3, #2
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d018      	beq.n	800dcfc <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800dcca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dcce:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d112      	bne.n	800dcfc <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dcd6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dce0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	33f3      	adds	r3, #243	; 0xf3
 800dcee:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800dcf0:	f107 0310 	add.w	r3, r7, #16
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dcf8:	f002 feb7 	bl	8010a6a <strcpy>

		}

		if (((option & 4) == 4) &&
 800dcfc:	78fb      	ldrb	r3, [r7, #3]
 800dcfe:	f003 0304 	and.w	r3, r3, #4
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d030      	beq.n	800dd68 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800dd06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dd0a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d12a      	bne.n	800dd68 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dd12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dd1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800dd22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd24:	025b      	lsls	r3, r3, #9
 800dd26:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd2c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800dd30:	2300      	movs	r3, #0
 800dd32:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800dd36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d011      	beq.n	800dd60 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800dd3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd40:	1ad3      	subs	r3, r2, r3
 800dd42:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800dd44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dd4a:	fb02 f303 	mul.w	r3, r2, r3
 800dd4e:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800dd50:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800dd54:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800dd58:	425b      	negs	r3, r3
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800dd60:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800dd68:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800dd6c:	78fb      	ldrb	r3, [r7, #3]
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800dd76:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800dd80:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3760      	adds	r7, #96	; 0x60
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b087      	sub	sp, #28
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	460b      	mov	r3, r1
 800dd96:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800dd98:	f240 6277 	movw	r2, #1655	; 0x677
 800dd9c:	f04f 0300 	mov.w	r3, #0
 800dda0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800dda4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800dda8:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800ddaa:	78fb      	ldrb	r3, [r7, #3]
 800ddac:	68fa      	ldr	r2, [r7, #12]
 800ddae:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800ddb2:	693a      	ldr	r2, [r7, #16]
 800ddb4:	fb02 f303 	mul.w	r3, r2, r3
 800ddb8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800ddba:	68bb      	ldr	r3, [r7, #8]
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	371c      	adds	r7, #28
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b087      	sub	sp, #28
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d017      	beq.n	800de12 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	3b01      	subs	r3, #1
 800dde6:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800dde8:	e005      	b.n	800ddf6 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	085b      	lsrs	r3, r3, #1
 800ddee:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800ddf0:	89fb      	ldrh	r3, [r7, #14]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d1f4      	bne.n	800ddea <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800de00:	89fb      	ldrh	r3, [r7, #14]
 800de02:	021b      	lsls	r3, r3, #8
 800de04:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	b29b      	uxth	r3, r3
 800de0a:	b2db      	uxtb	r3, r3
 800de0c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800de0e:	4413      	add	r3, r2
 800de10:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800de12:	8afb      	ldrh	r3, [r7, #22]

}
 800de14:	4618      	mov	r0, r3
 800de16:	371c      	adds	r7, #28
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800de20:	b480      	push	{r7}
 800de22:	b085      	sub	sp, #20
 800de24:	af00      	add	r7, sp, #0
 800de26:	4603      	mov	r3, r0
 800de28:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800de2a:	2300      	movs	r3, #0
 800de2c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800de2e:	88fb      	ldrh	r3, [r7, #6]
 800de30:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800de32:	88fa      	ldrh	r2, [r7, #6]
 800de34:	0a12      	lsrs	r2, r2, #8
 800de36:	b292      	uxth	r2, r2
 800de38:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800de3a:	3301      	adds	r3, #1
 800de3c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800de3e:	68fb      	ldr	r3, [r7, #12]
}
 800de40:	4618      	mov	r0, r3
 800de42:	3714      	adds	r7, #20
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b088      	sub	sp, #32
 800de50:	af00      	add	r7, sp, #0
 800de52:	60f8      	str	r0, [r7, #12]
 800de54:	60b9      	str	r1, [r7, #8]
 800de56:	4613      	mov	r3, r2
 800de58:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800de5a:	2300      	movs	r3, #0
 800de5c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800de5e:	79fb      	ldrb	r3, [r7, #7]
 800de60:	4619      	mov	r1, r3
 800de62:	68f8      	ldr	r0, [r7, #12]
 800de64:	f7ff ff92 	bl	800dd8c <VL53L0X_calc_macro_period_ps>
 800de68:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800de6a:	69bb      	ldr	r3, [r7, #24]
 800de6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800de70:	4a0a      	ldr	r2, [pc, #40]	; (800de9c <VL53L0X_calc_timeout_mclks+0x50>)
 800de72:	fba2 2303 	umull	r2, r3, r2, r3
 800de76:	099b      	lsrs	r3, r3, #6
 800de78:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800de80:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	085b      	lsrs	r3, r3, #1
 800de88:	441a      	add	r2, r3
	timeout_period_mclks =
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800de90:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800de92:	69fb      	ldr	r3, [r7, #28]
}
 800de94:	4618      	mov	r0, r3
 800de96:	3720      	adds	r7, #32
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	10624dd3 	.word	0x10624dd3

0800dea0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b086      	sub	sp, #24
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	460b      	mov	r3, r1
 800deaa:	807b      	strh	r3, [r7, #2]
 800deac:	4613      	mov	r3, r2
 800deae:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800deb0:	2300      	movs	r3, #0
 800deb2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800deb4:	787b      	ldrb	r3, [r7, #1]
 800deb6:	4619      	mov	r1, r3
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f7ff ff67 	bl	800dd8c <VL53L0X_calc_macro_period_ps>
 800debe:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800dec6:	4a0a      	ldr	r2, [pc, #40]	; (800def0 <VL53L0X_calc_timeout_us+0x50>)
 800dec8:	fba2 2303 	umull	r2, r3, r2, r3
 800decc:	099b      	lsrs	r3, r3, #6
 800dece:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800ded0:	887b      	ldrh	r3, [r7, #2]
 800ded2:	68fa      	ldr	r2, [r7, #12]
 800ded4:	fb02 f303 	mul.w	r3, r2, r3
 800ded8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800dedc:	4a04      	ldr	r2, [pc, #16]	; (800def0 <VL53L0X_calc_timeout_us+0x50>)
 800dede:	fba2 2303 	umull	r2, r3, r2, r3
 800dee2:	099b      	lsrs	r3, r3, #6
 800dee4:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800dee6:	697b      	ldr	r3, [r7, #20]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3718      	adds	r7, #24
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	10624dd3 	.word	0x10624dd3

0800def4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b08c      	sub	sp, #48	; 0x30
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	460b      	mov	r3, r1
 800defe:	607a      	str	r2, [r7, #4]
 800df00:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800df02:	2300      	movs	r3, #0
 800df04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800df08:	2300      	movs	r3, #0
 800df0a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800df0e:	2300      	movs	r3, #0
 800df10:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800df12:	2300      	movs	r3, #0
 800df14:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800df16:	2300      	movs	r3, #0
 800df18:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800df1a:	7afb      	ldrb	r3, [r7, #11]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d005      	beq.n	800df2c <get_sequence_step_timeout+0x38>
 800df20:	7afb      	ldrb	r3, [r7, #11]
 800df22:	2b01      	cmp	r3, #1
 800df24:	d002      	beq.n	800df2c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800df26:	7afb      	ldrb	r3, [r7, #11]
 800df28:	2b02      	cmp	r3, #2
 800df2a:	d128      	bne.n	800df7e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800df2c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800df30:	461a      	mov	r2, r3
 800df32:	2100      	movs	r1, #0
 800df34:	68f8      	ldr	r0, [r7, #12]
 800df36:	f7fd fa4d 	bl	800b3d4 <VL53L0X_GetVcselPulsePeriod>
 800df3a:	4603      	mov	r3, r0
 800df3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800df40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800df44:	2b00      	cmp	r3, #0
 800df46:	d109      	bne.n	800df5c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800df48:	f107 0320 	add.w	r3, r7, #32
 800df4c:	461a      	mov	r2, r3
 800df4e:	2146      	movs	r1, #70	; 0x46
 800df50:	68f8      	ldr	r0, [r7, #12]
 800df52:	f001 fd8b 	bl	800fa6c <VL53L0X_RdByte>
 800df56:	4603      	mov	r3, r0
 800df58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800df5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800df60:	b29b      	uxth	r3, r3
 800df62:	4618      	mov	r0, r3
 800df64:	f7ff ff5c 	bl	800de20 <VL53L0X_decode_timeout>
 800df68:	4603      	mov	r3, r0
 800df6a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800df6c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800df70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df72:	4619      	mov	r1, r3
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f7ff ff93 	bl	800dea0 <VL53L0X_calc_timeout_us>
 800df7a:	62b8      	str	r0, [r7, #40]	; 0x28
 800df7c:	e092      	b.n	800e0a4 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800df7e:	7afb      	ldrb	r3, [r7, #11]
 800df80:	2b03      	cmp	r3, #3
 800df82:	d135      	bne.n	800dff0 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800df84:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800df88:	461a      	mov	r2, r3
 800df8a:	2100      	movs	r1, #0
 800df8c:	68f8      	ldr	r0, [r7, #12]
 800df8e:	f7fd fa21 	bl	800b3d4 <VL53L0X_GetVcselPulsePeriod>
 800df92:	4603      	mov	r3, r0
 800df94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800df98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	f040 8081 	bne.w	800e0a4 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800dfa2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	2100      	movs	r1, #0
 800dfaa:	68f8      	ldr	r0, [r7, #12]
 800dfac:	f7fd fa12 	bl	800b3d4 <VL53L0X_GetVcselPulsePeriod>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800dfb6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d109      	bne.n	800dfd2 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800dfbe:	f107 031e 	add.w	r3, r7, #30
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	2151      	movs	r1, #81	; 0x51
 800dfc6:	68f8      	ldr	r0, [r7, #12]
 800dfc8:	f001 fd7a 	bl	800fac0 <VL53L0X_RdWord>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800dfd2:	8bfb      	ldrh	r3, [r7, #30]
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7ff ff23 	bl	800de20 <VL53L0X_decode_timeout>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800dfde:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800dfe2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	68f8      	ldr	r0, [r7, #12]
 800dfe8:	f7ff ff5a 	bl	800dea0 <VL53L0X_calc_timeout_us>
 800dfec:	62b8      	str	r0, [r7, #40]	; 0x28
 800dfee:	e059      	b.n	800e0a4 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800dff0:	7afb      	ldrb	r3, [r7, #11]
 800dff2:	2b04      	cmp	r3, #4
 800dff4:	d156      	bne.n	800e0a4 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800dff6:	f107 0314 	add.w	r3, r7, #20
 800dffa:	4619      	mov	r1, r3
 800dffc:	68f8      	ldr	r0, [r7, #12]
 800dffe:	f7fd faf5 	bl	800b5ec <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800e002:	2300      	movs	r3, #0
 800e004:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800e006:	7dfb      	ldrb	r3, [r7, #23]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d01d      	beq.n	800e048 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e00c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e010:	461a      	mov	r2, r3
 800e012:	2100      	movs	r1, #0
 800e014:	68f8      	ldr	r0, [r7, #12]
 800e016:	f7fd f9dd 	bl	800b3d4 <VL53L0X_GetVcselPulsePeriod>
 800e01a:	4603      	mov	r3, r0
 800e01c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800e020:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e024:	2b00      	cmp	r3, #0
 800e026:	d10f      	bne.n	800e048 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800e028:	f107 031e 	add.w	r3, r7, #30
 800e02c:	461a      	mov	r2, r3
 800e02e:	2151      	movs	r1, #81	; 0x51
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f001 fd45 	bl	800fac0 <VL53L0X_RdWord>
 800e036:	4603      	mov	r3, r0
 800e038:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e03c:	8bfb      	ldrh	r3, [r7, #30]
 800e03e:	4618      	mov	r0, r3
 800e040:	f7ff feee 	bl	800de20 <VL53L0X_decode_timeout>
 800e044:	4603      	mov	r3, r0
 800e046:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e048:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d109      	bne.n	800e064 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e050:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e054:	461a      	mov	r2, r3
 800e056:	2101      	movs	r1, #1
 800e058:	68f8      	ldr	r0, [r7, #12]
 800e05a:	f7fd f9bb 	bl	800b3d4 <VL53L0X_GetVcselPulsePeriod>
 800e05e:	4603      	mov	r3, r0
 800e060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e064:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d10f      	bne.n	800e08c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800e06c:	f107 031c 	add.w	r3, r7, #28
 800e070:	461a      	mov	r2, r3
 800e072:	2171      	movs	r1, #113	; 0x71
 800e074:	68f8      	ldr	r0, [r7, #12]
 800e076:	f001 fd23 	bl	800fac0 <VL53L0X_RdWord>
 800e07a:	4603      	mov	r3, r0
 800e07c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e080:	8bbb      	ldrh	r3, [r7, #28]
 800e082:	4618      	mov	r0, r3
 800e084:	f7ff fecc 	bl	800de20 <VL53L0X_decode_timeout>
 800e088:	4603      	mov	r3, r0
 800e08a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800e08c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e08e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e094:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e09a:	4619      	mov	r1, r3
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f7ff feff 	bl	800dea0 <VL53L0X_calc_timeout_us>
 800e0a2:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0a8:	601a      	str	r2, [r3, #0]

	return Status;
 800e0aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3730      	adds	r7, #48	; 0x30
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}

0800e0b6 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b08a      	sub	sp, #40	; 0x28
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	60f8      	str	r0, [r7, #12]
 800e0be:	460b      	mov	r3, r1
 800e0c0:	607a      	str	r2, [r7, #4]
 800e0c2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800e0ca:	7afb      	ldrb	r3, [r7, #11]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d005      	beq.n	800e0dc <set_sequence_step_timeout+0x26>
 800e0d0:	7afb      	ldrb	r3, [r7, #11]
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d002      	beq.n	800e0dc <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800e0d6:	7afb      	ldrb	r3, [r7, #11]
 800e0d8:	2b02      	cmp	r3, #2
 800e0da:	d138      	bne.n	800e14e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e0dc:	f107 031b 	add.w	r3, r7, #27
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	2100      	movs	r1, #0
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f7fd f975 	bl	800b3d4 <VL53L0X_GetVcselPulsePeriod>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800e0f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d11a      	bne.n	800e12e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800e0f8:	7efb      	ldrb	r3, [r7, #27]
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	6879      	ldr	r1, [r7, #4]
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	f7ff fea4 	bl	800de4c <VL53L0X_calc_timeout_mclks>
 800e104:	4603      	mov	r3, r0
 800e106:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800e108:	8bbb      	ldrh	r3, [r7, #28]
 800e10a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e10e:	d903      	bls.n	800e118 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800e110:	23ff      	movs	r3, #255	; 0xff
 800e112:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e116:	e004      	b.n	800e122 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800e118:	8bbb      	ldrh	r3, [r7, #28]
 800e11a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800e11c:	3b01      	subs	r3, #1
 800e11e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e122:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e126:	b29a      	uxth	r2, r3
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e12e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e132:	2b00      	cmp	r3, #0
 800e134:	f040 80ab 	bne.w	800e28e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800e138:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e13c:	461a      	mov	r2, r3
 800e13e:	2146      	movs	r1, #70	; 0x46
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f001 fc11 	bl	800f968 <VL53L0X_WrByte>
 800e146:	4603      	mov	r3, r0
 800e148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800e14c:	e09f      	b.n	800e28e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e14e:	7afb      	ldrb	r3, [r7, #11]
 800e150:	2b03      	cmp	r3, #3
 800e152:	d135      	bne.n	800e1c0 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800e154:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d11b      	bne.n	800e194 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e15c:	f107 031b 	add.w	r3, r7, #27
 800e160:	461a      	mov	r2, r3
 800e162:	2100      	movs	r1, #0
 800e164:	68f8      	ldr	r0, [r7, #12]
 800e166:	f7fd f935 	bl	800b3d4 <VL53L0X_GetVcselPulsePeriod>
 800e16a:	4603      	mov	r3, r0
 800e16c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800e170:	7efb      	ldrb	r3, [r7, #27]
 800e172:	461a      	mov	r2, r3
 800e174:	6879      	ldr	r1, [r7, #4]
 800e176:	68f8      	ldr	r0, [r7, #12]
 800e178:	f7ff fe68 	bl	800de4c <VL53L0X_calc_timeout_mclks>
 800e17c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800e17e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800e180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e182:	4618      	mov	r0, r3
 800e184:	f7ff fe20 	bl	800ddc8 <VL53L0X_encode_timeout>
 800e188:	4603      	mov	r3, r0
 800e18a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e18c:	8b3a      	ldrh	r2, [r7, #24]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e194:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d108      	bne.n	800e1ae <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800e19c:	8b3b      	ldrh	r3, [r7, #24]
 800e19e:	461a      	mov	r2, r3
 800e1a0:	2151      	movs	r1, #81	; 0x51
 800e1a2:	68f8      	ldr	r0, [r7, #12]
 800e1a4:	f001 fc04 	bl	800f9b0 <VL53L0X_WrWord>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e1ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d16b      	bne.n	800e28e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800e1be:	e066      	b.n	800e28e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e1c0:	7afb      	ldrb	r3, [r7, #11]
 800e1c2:	2b04      	cmp	r3, #4
 800e1c4:	d160      	bne.n	800e288 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800e1c6:	f107 0310 	add.w	r3, r7, #16
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	68f8      	ldr	r0, [r7, #12]
 800e1ce:	f7fd fa0d 	bl	800b5ec <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800e1d6:	7cfb      	ldrb	r3, [r7, #19]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d01d      	beq.n	800e218 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e1dc:	f107 031b 	add.w	r3, r7, #27
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	2100      	movs	r1, #0
 800e1e4:	68f8      	ldr	r0, [r7, #12]
 800e1e6:	f7fd f8f5 	bl	800b3d4 <VL53L0X_GetVcselPulsePeriod>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800e1f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d10f      	bne.n	800e218 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800e1f8:	f107 0318 	add.w	r3, r7, #24
 800e1fc:	461a      	mov	r2, r3
 800e1fe:	2151      	movs	r1, #81	; 0x51
 800e200:	68f8      	ldr	r0, [r7, #12]
 800e202:	f001 fc5d 	bl	800fac0 <VL53L0X_RdWord>
 800e206:	4603      	mov	r3, r0
 800e208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800e20c:	8b3b      	ldrh	r3, [r7, #24]
 800e20e:	4618      	mov	r0, r3
 800e210:	f7ff fe06 	bl	800de20 <VL53L0X_decode_timeout>
 800e214:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800e216:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800e218:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d109      	bne.n	800e234 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e220:	f107 031b 	add.w	r3, r7, #27
 800e224:	461a      	mov	r2, r3
 800e226:	2101      	movs	r1, #1
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f7fd f8d3 	bl	800b3d4 <VL53L0X_GetVcselPulsePeriod>
 800e22e:	4603      	mov	r3, r0
 800e230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800e234:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d128      	bne.n	800e28e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800e23c:	7efb      	ldrb	r3, [r7, #27]
 800e23e:	461a      	mov	r2, r3
 800e240:	6879      	ldr	r1, [r7, #4]
 800e242:	68f8      	ldr	r0, [r7, #12]
 800e244:	f7ff fe02 	bl	800de4c <VL53L0X_calc_timeout_mclks>
 800e248:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800e24a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e24c:	6a3a      	ldr	r2, [r7, #32]
 800e24e:	4413      	add	r3, r2
 800e250:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800e252:	6a38      	ldr	r0, [r7, #32]
 800e254:	f7ff fdb8 	bl	800ddc8 <VL53L0X_encode_timeout>
 800e258:	4603      	mov	r3, r0
 800e25a:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800e25c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e260:	2b00      	cmp	r3, #0
 800e262:	d108      	bne.n	800e276 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800e264:	8bfb      	ldrh	r3, [r7, #30]
 800e266:	461a      	mov	r2, r3
 800e268:	2171      	movs	r1, #113	; 0x71
 800e26a:	68f8      	ldr	r0, [r7, #12]
 800e26c:	f001 fba0 	bl	800f9b0 <VL53L0X_WrWord>
 800e270:	4603      	mov	r3, r0
 800e272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800e276:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d107      	bne.n	800e28e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800e286:	e002      	b.n	800e28e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e288:	23fc      	movs	r3, #252	; 0xfc
 800e28a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800e28e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e292:	4618      	mov	r0, r3
 800e294:	3728      	adds	r7, #40	; 0x28
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}

0800e29a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800e29a:	b580      	push	{r7, lr}
 800e29c:	b08a      	sub	sp, #40	; 0x28
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	70fb      	strb	r3, [r7, #3]
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800e2b0:	230c      	movs	r3, #12
 800e2b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800e2b6:	2312      	movs	r3, #18
 800e2b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800e2bc:	2308      	movs	r3, #8
 800e2be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800e2c2:	230e      	movs	r3, #14
 800e2c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800e2cc:	78bb      	ldrb	r3, [r7, #2]
 800e2ce:	f003 0301 	and.w	r3, r3, #1
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d003      	beq.n	800e2e0 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e2d8:	23fc      	movs	r3, #252	; 0xfc
 800e2da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2de:	e020      	b.n	800e322 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800e2e0:	78fb      	ldrb	r3, [r7, #3]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d10d      	bne.n	800e302 <VL53L0X_set_vcsel_pulse_period+0x68>
 800e2e6:	78ba      	ldrb	r2, [r7, #2]
 800e2e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d304      	bcc.n	800e2fa <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800e2f0:	78ba      	ldrb	r2, [r7, #2]
 800e2f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d903      	bls.n	800e302 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e2fa:	23fc      	movs	r3, #252	; 0xfc
 800e2fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e300:	e00f      	b.n	800e322 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800e302:	78fb      	ldrb	r3, [r7, #3]
 800e304:	2b01      	cmp	r3, #1
 800e306:	d10c      	bne.n	800e322 <VL53L0X_set_vcsel_pulse_period+0x88>
 800e308:	78ba      	ldrb	r2, [r7, #2]
 800e30a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e30e:	429a      	cmp	r2, r3
 800e310:	d304      	bcc.n	800e31c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800e312:	78ba      	ldrb	r2, [r7, #2]
 800e314:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e318:	429a      	cmp	r2, r3
 800e31a:	d902      	bls.n	800e322 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e31c:	23fc      	movs	r3, #252	; 0xfc
 800e31e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800e322:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e326:	2b00      	cmp	r3, #0
 800e328:	d002      	beq.n	800e330 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800e32a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e32e:	e239      	b.n	800e7a4 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800e330:	78fb      	ldrb	r3, [r7, #3]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d150      	bne.n	800e3d8 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800e336:	78bb      	ldrb	r3, [r7, #2]
 800e338:	2b0c      	cmp	r3, #12
 800e33a:	d110      	bne.n	800e35e <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800e33c:	2218      	movs	r2, #24
 800e33e:	2157      	movs	r1, #87	; 0x57
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f001 fb11 	bl	800f968 <VL53L0X_WrByte>
 800e346:	4603      	mov	r3, r0
 800e348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800e34c:	2208      	movs	r2, #8
 800e34e:	2156      	movs	r1, #86	; 0x56
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f001 fb09 	bl	800f968 <VL53L0X_WrByte>
 800e356:	4603      	mov	r3, r0
 800e358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e35c:	e17f      	b.n	800e65e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800e35e:	78bb      	ldrb	r3, [r7, #2]
 800e360:	2b0e      	cmp	r3, #14
 800e362:	d110      	bne.n	800e386 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800e364:	2230      	movs	r2, #48	; 0x30
 800e366:	2157      	movs	r1, #87	; 0x57
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f001 fafd 	bl	800f968 <VL53L0X_WrByte>
 800e36e:	4603      	mov	r3, r0
 800e370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800e374:	2208      	movs	r2, #8
 800e376:	2156      	movs	r1, #86	; 0x56
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f001 faf5 	bl	800f968 <VL53L0X_WrByte>
 800e37e:	4603      	mov	r3, r0
 800e380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e384:	e16b      	b.n	800e65e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800e386:	78bb      	ldrb	r3, [r7, #2]
 800e388:	2b10      	cmp	r3, #16
 800e38a:	d110      	bne.n	800e3ae <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800e38c:	2240      	movs	r2, #64	; 0x40
 800e38e:	2157      	movs	r1, #87	; 0x57
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f001 fae9 	bl	800f968 <VL53L0X_WrByte>
 800e396:	4603      	mov	r3, r0
 800e398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800e39c:	2208      	movs	r2, #8
 800e39e:	2156      	movs	r1, #86	; 0x56
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f001 fae1 	bl	800f968 <VL53L0X_WrByte>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e3ac:	e157      	b.n	800e65e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800e3ae:	78bb      	ldrb	r3, [r7, #2]
 800e3b0:	2b12      	cmp	r3, #18
 800e3b2:	f040 8154 	bne.w	800e65e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800e3b6:	2250      	movs	r2, #80	; 0x50
 800e3b8:	2157      	movs	r1, #87	; 0x57
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f001 fad4 	bl	800f968 <VL53L0X_WrByte>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800e3c6:	2208      	movs	r2, #8
 800e3c8:	2156      	movs	r1, #86	; 0x56
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f001 facc 	bl	800f968 <VL53L0X_WrByte>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e3d6:	e142      	b.n	800e65e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800e3d8:	78fb      	ldrb	r3, [r7, #3]
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	f040 813f 	bne.w	800e65e <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800e3e0:	78bb      	ldrb	r3, [r7, #2]
 800e3e2:	2b08      	cmp	r3, #8
 800e3e4:	d14c      	bne.n	800e480 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800e3e6:	2210      	movs	r2, #16
 800e3e8:	2148      	movs	r1, #72	; 0x48
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f001 fabc 	bl	800f968 <VL53L0X_WrByte>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800e3f6:	2208      	movs	r2, #8
 800e3f8:	2147      	movs	r1, #71	; 0x47
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f001 fab4 	bl	800f968 <VL53L0X_WrByte>
 800e400:	4603      	mov	r3, r0
 800e402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e406:	2202      	movs	r2, #2
 800e408:	2132      	movs	r1, #50	; 0x32
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f001 faac 	bl	800f968 <VL53L0X_WrByte>
 800e410:	4603      	mov	r3, r0
 800e412:	461a      	mov	r2, r3
 800e414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e418:	4313      	orrs	r3, r2
 800e41a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800e41e:	220c      	movs	r2, #12
 800e420:	2130      	movs	r1, #48	; 0x30
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f001 faa0 	bl	800f968 <VL53L0X_WrByte>
 800e428:	4603      	mov	r3, r0
 800e42a:	461a      	mov	r2, r3
 800e42c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e430:	4313      	orrs	r3, r2
 800e432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e436:	2201      	movs	r2, #1
 800e438:	21ff      	movs	r1, #255	; 0xff
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f001 fa94 	bl	800f968 <VL53L0X_WrByte>
 800e440:	4603      	mov	r3, r0
 800e442:	461a      	mov	r2, r3
 800e444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e448:	4313      	orrs	r3, r2
 800e44a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800e44e:	2230      	movs	r2, #48	; 0x30
 800e450:	2130      	movs	r1, #48	; 0x30
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f001 fa88 	bl	800f968 <VL53L0X_WrByte>
 800e458:	4603      	mov	r3, r0
 800e45a:	461a      	mov	r2, r3
 800e45c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e460:	4313      	orrs	r3, r2
 800e462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e466:	2200      	movs	r2, #0
 800e468:	21ff      	movs	r1, #255	; 0xff
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f001 fa7c 	bl	800f968 <VL53L0X_WrByte>
 800e470:	4603      	mov	r3, r0
 800e472:	461a      	mov	r2, r3
 800e474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e478:	4313      	orrs	r3, r2
 800e47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e47e:	e0ee      	b.n	800e65e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800e480:	78bb      	ldrb	r3, [r7, #2]
 800e482:	2b0a      	cmp	r3, #10
 800e484:	d14c      	bne.n	800e520 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800e486:	2228      	movs	r2, #40	; 0x28
 800e488:	2148      	movs	r1, #72	; 0x48
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f001 fa6c 	bl	800f968 <VL53L0X_WrByte>
 800e490:	4603      	mov	r3, r0
 800e492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800e496:	2208      	movs	r2, #8
 800e498:	2147      	movs	r1, #71	; 0x47
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f001 fa64 	bl	800f968 <VL53L0X_WrByte>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e4a6:	2203      	movs	r2, #3
 800e4a8:	2132      	movs	r1, #50	; 0x32
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f001 fa5c 	bl	800f968 <VL53L0X_WrByte>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e4be:	2209      	movs	r2, #9
 800e4c0:	2130      	movs	r1, #48	; 0x30
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f001 fa50 	bl	800f968 <VL53L0X_WrByte>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	21ff      	movs	r1, #255	; 0xff
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f001 fa44 	bl	800f968 <VL53L0X_WrByte>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800e4ee:	2220      	movs	r2, #32
 800e4f0:	2130      	movs	r1, #48	; 0x30
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f001 fa38 	bl	800f968 <VL53L0X_WrByte>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e500:	4313      	orrs	r3, r2
 800e502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e506:	2200      	movs	r2, #0
 800e508:	21ff      	movs	r1, #255	; 0xff
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f001 fa2c 	bl	800f968 <VL53L0X_WrByte>
 800e510:	4603      	mov	r3, r0
 800e512:	461a      	mov	r2, r3
 800e514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e518:	4313      	orrs	r3, r2
 800e51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e51e:	e09e      	b.n	800e65e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800e520:	78bb      	ldrb	r3, [r7, #2]
 800e522:	2b0c      	cmp	r3, #12
 800e524:	d14c      	bne.n	800e5c0 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800e526:	2238      	movs	r2, #56	; 0x38
 800e528:	2148      	movs	r1, #72	; 0x48
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f001 fa1c 	bl	800f968 <VL53L0X_WrByte>
 800e530:	4603      	mov	r3, r0
 800e532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800e536:	2208      	movs	r2, #8
 800e538:	2147      	movs	r1, #71	; 0x47
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f001 fa14 	bl	800f968 <VL53L0X_WrByte>
 800e540:	4603      	mov	r3, r0
 800e542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e546:	2203      	movs	r2, #3
 800e548:	2132      	movs	r1, #50	; 0x32
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f001 fa0c 	bl	800f968 <VL53L0X_WrByte>
 800e550:	4603      	mov	r3, r0
 800e552:	461a      	mov	r2, r3
 800e554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e558:	4313      	orrs	r3, r2
 800e55a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e55e:	2208      	movs	r2, #8
 800e560:	2130      	movs	r1, #48	; 0x30
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f001 fa00 	bl	800f968 <VL53L0X_WrByte>
 800e568:	4603      	mov	r3, r0
 800e56a:	461a      	mov	r2, r3
 800e56c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e570:	4313      	orrs	r3, r2
 800e572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e576:	2201      	movs	r2, #1
 800e578:	21ff      	movs	r1, #255	; 0xff
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f001 f9f4 	bl	800f968 <VL53L0X_WrByte>
 800e580:	4603      	mov	r3, r0
 800e582:	461a      	mov	r2, r3
 800e584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e588:	4313      	orrs	r3, r2
 800e58a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800e58e:	2220      	movs	r2, #32
 800e590:	2130      	movs	r1, #48	; 0x30
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f001 f9e8 	bl	800f968 <VL53L0X_WrByte>
 800e598:	4603      	mov	r3, r0
 800e59a:	461a      	mov	r2, r3
 800e59c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5a0:	4313      	orrs	r3, r2
 800e5a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	21ff      	movs	r1, #255	; 0xff
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f001 f9dc 	bl	800f968 <VL53L0X_WrByte>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5b8:	4313      	orrs	r3, r2
 800e5ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e5be:	e04e      	b.n	800e65e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800e5c0:	78bb      	ldrb	r3, [r7, #2]
 800e5c2:	2b0e      	cmp	r3, #14
 800e5c4:	d14b      	bne.n	800e65e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800e5c6:	2248      	movs	r2, #72	; 0x48
 800e5c8:	2148      	movs	r1, #72	; 0x48
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f001 f9cc 	bl	800f968 <VL53L0X_WrByte>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800e5d6:	2208      	movs	r2, #8
 800e5d8:	2147      	movs	r1, #71	; 0x47
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f001 f9c4 	bl	800f968 <VL53L0X_WrByte>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e5e6:	2203      	movs	r2, #3
 800e5e8:	2132      	movs	r1, #50	; 0x32
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f001 f9bc 	bl	800f968 <VL53L0X_WrByte>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5f8:	4313      	orrs	r3, r2
 800e5fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e5fe:	2207      	movs	r2, #7
 800e600:	2130      	movs	r1, #48	; 0x30
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f001 f9b0 	bl	800f968 <VL53L0X_WrByte>
 800e608:	4603      	mov	r3, r0
 800e60a:	461a      	mov	r2, r3
 800e60c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e610:	4313      	orrs	r3, r2
 800e612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e616:	2201      	movs	r2, #1
 800e618:	21ff      	movs	r1, #255	; 0xff
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f001 f9a4 	bl	800f968 <VL53L0X_WrByte>
 800e620:	4603      	mov	r3, r0
 800e622:	461a      	mov	r2, r3
 800e624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e628:	4313      	orrs	r3, r2
 800e62a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800e62e:	2220      	movs	r2, #32
 800e630:	2130      	movs	r1, #48	; 0x30
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f001 f998 	bl	800f968 <VL53L0X_WrByte>
 800e638:	4603      	mov	r3, r0
 800e63a:	461a      	mov	r2, r3
 800e63c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e640:	4313      	orrs	r3, r2
 800e642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e646:	2200      	movs	r2, #0
 800e648:	21ff      	movs	r1, #255	; 0xff
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f001 f98c 	bl	800f968 <VL53L0X_WrByte>
 800e650:	4603      	mov	r3, r0
 800e652:	461a      	mov	r2, r3
 800e654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e658:	4313      	orrs	r3, r2
 800e65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800e65e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e662:	2b00      	cmp	r3, #0
 800e664:	d17f      	bne.n	800e766 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800e666:	78bb      	ldrb	r3, [r7, #2]
 800e668:	4618      	mov	r0, r3
 800e66a:	f7fe fe38 	bl	800d2de <VL53L0X_encode_vcsel_period>
 800e66e:	4603      	mov	r3, r0
 800e670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800e674:	78fb      	ldrb	r3, [r7, #3]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d002      	beq.n	800e680 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d045      	beq.n	800e70a <VL53L0X_set_vcsel_pulse_period+0x470>
 800e67e:	e06e      	b.n	800e75e <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800e680:	f107 0314 	add.w	r3, r7, #20
 800e684:	461a      	mov	r2, r3
 800e686:	2103      	movs	r1, #3
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f7ff fc33 	bl	800def4 <get_sequence_step_timeout>
 800e68e:	4603      	mov	r3, r0
 800e690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800e694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d109      	bne.n	800e6b0 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800e69c:	f107 0310 	add.w	r3, r7, #16
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	2102      	movs	r1, #2
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7ff fc25 	bl	800def4 <get_sequence_step_timeout>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800e6b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d109      	bne.n	800e6cc <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800e6b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e6bc:	461a      	mov	r2, r3
 800e6be:	2150      	movs	r1, #80	; 0x50
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f001 f951 	bl	800f968 <VL53L0X_WrByte>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800e6cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d108      	bne.n	800e6e6 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	2103      	movs	r1, #3
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f7ff fceb 	bl	800e0b6 <set_sequence_step_timeout>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800e6e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d108      	bne.n	800e700 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	2102      	movs	r1, #2
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f7ff fcde 	bl	800e0b6 <set_sequence_step_timeout>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	78ba      	ldrb	r2, [r7, #2]
 800e704:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800e708:	e02e      	b.n	800e768 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800e70a:	f107 0318 	add.w	r3, r7, #24
 800e70e:	461a      	mov	r2, r3
 800e710:	2104      	movs	r1, #4
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f7ff fbee 	bl	800def4 <get_sequence_step_timeout>
 800e718:	4603      	mov	r3, r0
 800e71a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800e71e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e722:	2b00      	cmp	r3, #0
 800e724:	d109      	bne.n	800e73a <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800e726:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e72a:	461a      	mov	r2, r3
 800e72c:	2170      	movs	r1, #112	; 0x70
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f001 f91a 	bl	800f968 <VL53L0X_WrByte>
 800e734:	4603      	mov	r3, r0
 800e736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800e73a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d108      	bne.n	800e754 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	461a      	mov	r2, r3
 800e746:	2104      	movs	r1, #4
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f7ff fcb4 	bl	800e0b6 <set_sequence_step_timeout>
 800e74e:	4603      	mov	r3, r0
 800e750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	78ba      	ldrb	r2, [r7, #2]
 800e758:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800e75c:	e004      	b.n	800e768 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e75e:	23fc      	movs	r3, #252	; 0xfc
 800e760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e764:	e000      	b.n	800e768 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800e766:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800e768:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d109      	bne.n	800e784 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	695b      	ldr	r3, [r3, #20]
 800e774:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800e776:	69f9      	ldr	r1, [r7, #28]
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f7fc fded 	bl	800b358 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800e77e:	4603      	mov	r3, r0
 800e780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800e784:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d109      	bne.n	800e7a0 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800e78c:	f107 010f 	add.w	r1, r7, #15
 800e790:	2301      	movs	r3, #1
 800e792:	2200      	movs	r2, #0
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f7fe fcbd 	bl	800d114 <VL53L0X_perform_phase_calibration>
 800e79a:	4603      	mov	r3, r0
 800e79c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800e7a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3728      	adds	r7, #40	; 0x28
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b086      	sub	sp, #24
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	607a      	str	r2, [r7, #4]
 800e7b8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800e7be:	7afb      	ldrb	r3, [r7, #11]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d002      	beq.n	800e7ca <VL53L0X_get_vcsel_pulse_period+0x1e>
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d00a      	beq.n	800e7de <VL53L0X_get_vcsel_pulse_period+0x32>
 800e7c8:	e013      	b.n	800e7f2 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800e7ca:	f107 0316 	add.w	r3, r7, #22
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	2150      	movs	r1, #80	; 0x50
 800e7d2:	68f8      	ldr	r0, [r7, #12]
 800e7d4:	f001 f94a 	bl	800fa6c <VL53L0X_RdByte>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800e7dc:	e00b      	b.n	800e7f6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800e7de:	f107 0316 	add.w	r3, r7, #22
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	2170      	movs	r1, #112	; 0x70
 800e7e6:	68f8      	ldr	r0, [r7, #12]
 800e7e8:	f001 f940 	bl	800fa6c <VL53L0X_RdByte>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800e7f0:	e001      	b.n	800e7f6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e7f2:	23fc      	movs	r3, #252	; 0xfc
 800e7f4:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800e7f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d107      	bne.n	800e80e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800e7fe:	7dbb      	ldrb	r3, [r7, #22]
 800e800:	4618      	mov	r0, r3
 800e802:	f7fe fd59 	bl	800d2b8 <VL53L0X_decode_vcsel_period>
 800e806:	4603      	mov	r3, r0
 800e808:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	701a      	strb	r2, [r3, #0]

	return Status;
 800e80e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e812:	4618      	mov	r0, r3
 800e814:	3718      	adds	r7, #24
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}

0800e81a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800e81a:	b580      	push	{r7, lr}
 800e81c:	b092      	sub	sp, #72	; 0x48
 800e81e:	af00      	add	r7, sp, #0
 800e820:	6078      	str	r0, [r7, #4]
 800e822:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e824:	2300      	movs	r3, #0
 800e826:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800e82a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e82e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800e830:	f240 7376 	movw	r3, #1910	; 0x776
 800e834:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800e836:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800e83a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800e83c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800e840:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800e842:	f240 234e 	movw	r3, #590	; 0x24e
 800e846:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800e848:	f240 23b2 	movw	r3, #690	; 0x2b2
 800e84c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800e84e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800e852:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800e854:	f240 2326 	movw	r3, #550	; 0x226
 800e858:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800e85a:	2300      	movs	r3, #0
 800e85c:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800e85e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e862:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800e864:	2300      	movs	r3, #0
 800e866:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800e868:	683a      	ldr	r2, [r7, #0]
 800e86a:	6a3b      	ldr	r3, [r7, #32]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d205      	bcs.n	800e87c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e870:	23fc      	movs	r3, #252	; 0xfc
 800e872:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800e876:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e87a:	e0aa      	b.n	800e9d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800e87c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e880:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800e882:	683a      	ldr	r2, [r7, #0]
 800e884:	1ad3      	subs	r3, r2, r3
 800e886:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e888:	f107 0314 	add.w	r3, r7, #20
 800e88c:	4619      	mov	r1, r3
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f7fc feac 	bl	800b5ec <VL53L0X_GetSequenceStepEnables>
 800e894:	4603      	mov	r3, r0
 800e896:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800e89a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d15b      	bne.n	800e95a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800e8a2:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d105      	bne.n	800e8b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800e8a8:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d102      	bne.n	800e8b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800e8ae:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d052      	beq.n	800e95a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800e8b4:	f107 0310 	add.w	r3, r7, #16
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	2102      	movs	r1, #2
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f7ff fb19 	bl	800def4 <get_sequence_step_timeout>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800e8c8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d002      	beq.n	800e8d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800e8d0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e8d4:	e07d      	b.n	800e9d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800e8d6:	7d3b      	ldrb	r3, [r7, #20]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d00f      	beq.n	800e8fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800e8dc:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800e8de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8e0:	4413      	add	r3, r2
 800e8e2:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800e8e4:	69fa      	ldr	r2, [r7, #28]
 800e8e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d204      	bcs.n	800e8f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800e8ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e8ee:	69fb      	ldr	r3, [r7, #28]
 800e8f0:	1ad3      	subs	r3, r2, r3
 800e8f2:	643b      	str	r3, [r7, #64]	; 0x40
 800e8f4:	e002      	b.n	800e8fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e8f6:	23fc      	movs	r3, #252	; 0xfc
 800e8f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800e8fc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e900:	2b00      	cmp	r3, #0
 800e902:	d002      	beq.n	800e90a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800e904:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e908:	e063      	b.n	800e9d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800e90a:	7dbb      	ldrb	r3, [r7, #22]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d011      	beq.n	800e934 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800e910:	693a      	ldr	r2, [r7, #16]
 800e912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e914:	4413      	add	r3, r2
 800e916:	005b      	lsls	r3, r3, #1
 800e918:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e91a:	69fa      	ldr	r2, [r7, #28]
 800e91c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e91e:	429a      	cmp	r2, r3
 800e920:	d204      	bcs.n	800e92c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800e922:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e924:	69fb      	ldr	r3, [r7, #28]
 800e926:	1ad3      	subs	r3, r2, r3
 800e928:	643b      	str	r3, [r7, #64]	; 0x40
 800e92a:	e016      	b.n	800e95a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e92c:	23fc      	movs	r3, #252	; 0xfc
 800e92e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e932:	e012      	b.n	800e95a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800e934:	7d7b      	ldrb	r3, [r7, #21]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d00f      	beq.n	800e95a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e93e:	4413      	add	r3, r2
 800e940:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e942:	69fa      	ldr	r2, [r7, #28]
 800e944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e946:	429a      	cmp	r2, r3
 800e948:	d204      	bcs.n	800e954 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800e94a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	1ad3      	subs	r3, r2, r3
 800e950:	643b      	str	r3, [r7, #64]	; 0x40
 800e952:	e002      	b.n	800e95a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e954:	23fc      	movs	r3, #252	; 0xfc
 800e956:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800e95a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d002      	beq.n	800e968 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800e962:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e966:	e034      	b.n	800e9d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800e968:	7dfb      	ldrb	r3, [r7, #23]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d019      	beq.n	800e9a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800e96e:	f107 030c 	add.w	r3, r7, #12
 800e972:	461a      	mov	r2, r3
 800e974:	2103      	movs	r1, #3
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f7ff fabc 	bl	800def4 <get_sequence_step_timeout>
 800e97c:	4603      	mov	r3, r0
 800e97e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e986:	4413      	add	r3, r2
 800e988:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e98a:	69fa      	ldr	r2, [r7, #28]
 800e98c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e98e:	429a      	cmp	r2, r3
 800e990:	d204      	bcs.n	800e99c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800e992:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	1ad3      	subs	r3, r2, r3
 800e998:	643b      	str	r3, [r7, #64]	; 0x40
 800e99a:	e002      	b.n	800e9a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e99c:	23fc      	movs	r3, #252	; 0xfc
 800e99e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800e9a2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d111      	bne.n	800e9ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800e9aa:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d00e      	beq.n	800e9ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800e9b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b4:	1ad3      	subs	r3, r2, r3
 800e9b6:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800e9b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e9ba:	2104      	movs	r1, #4
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f7ff fb7a 	bl	800e0b6 <set_sequence_step_timeout>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	683a      	ldr	r2, [r7, #0]
 800e9cc:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800e9ce:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3748      	adds	r7, #72	; 0x48
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}

0800e9da <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800e9da:	b580      	push	{r7, lr}
 800e9dc:	b090      	sub	sp, #64	; 0x40
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	6078      	str	r0, [r7, #4]
 800e9e2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800e9ea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e9ee:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800e9f0:	f240 7376 	movw	r3, #1910	; 0x776
 800e9f4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800e9f6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800e9fa:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800e9fc:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ea00:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800ea02:	f240 234e 	movw	r3, #590	; 0x24e
 800ea06:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800ea08:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ea0c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ea0e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ea12:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ea14:	f240 2326 	movw	r3, #550	; 0x226
 800ea18:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800ea1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea22:	441a      	add	r2, r3
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ea28:	f107 0318 	add.w	r3, r7, #24
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f7fc fddc 	bl	800b5ec <VL53L0X_GetSequenceStepEnables>
 800ea34:	4603      	mov	r3, r0
 800ea36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800ea3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d002      	beq.n	800ea48 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ea42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ea46:	e075      	b.n	800eb34 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800ea48:	7e3b      	ldrb	r3, [r7, #24]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d105      	bne.n	800ea5a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800ea4e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d102      	bne.n	800ea5a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800ea54:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d030      	beq.n	800eabc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800ea5a:	f107 0310 	add.w	r3, r7, #16
 800ea5e:	461a      	mov	r2, r3
 800ea60:	2102      	movs	r1, #2
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f7ff fa46 	bl	800def4 <get_sequence_step_timeout>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800ea6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d122      	bne.n	800eabc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800ea76:	7e3b      	ldrb	r3, [r7, #24]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d007      	beq.n	800ea8c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800ea80:	6939      	ldr	r1, [r7, #16]
 800ea82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea84:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ea86:	441a      	add	r2, r3
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800ea8c:	7ebb      	ldrb	r3, [r7, #26]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d009      	beq.n	800eaa6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800ea96:	6939      	ldr	r1, [r7, #16]
 800ea98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9a:	440b      	add	r3, r1
 800ea9c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ea9e:	441a      	add	r2, r3
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	601a      	str	r2, [r3, #0]
 800eaa4:	e00a      	b.n	800eabc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800eaa6:	7e7b      	ldrb	r3, [r7, #25]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d007      	beq.n	800eabc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800eab0:	6939      	ldr	r1, [r7, #16]
 800eab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800eab6:	441a      	add	r2, r3
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800eabc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d114      	bne.n	800eaee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800eac4:	7efb      	ldrb	r3, [r7, #27]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d011      	beq.n	800eaee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800eaca:	f107 030c 	add.w	r3, r7, #12
 800eace:	461a      	mov	r2, r3
 800ead0:	2103      	movs	r1, #3
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f7ff fa0e 	bl	800def4 <get_sequence_step_timeout>
 800ead8:	4603      	mov	r3, r0
 800eada:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800eae2:	68f9      	ldr	r1, [r7, #12]
 800eae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae6:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800eae8:	441a      	add	r2, r3
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800eaee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d114      	bne.n	800eb20 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800eaf6:	7f3b      	ldrb	r3, [r7, #28]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d011      	beq.n	800eb20 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800eafc:	f107 0314 	add.w	r3, r7, #20
 800eb00:	461a      	mov	r2, r3
 800eb02:	2104      	movs	r1, #4
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f7ff f9f5 	bl	800def4 <get_sequence_step_timeout>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800eb14:	6979      	ldr	r1, [r7, #20]
 800eb16:	6a3b      	ldr	r3, [r7, #32]
 800eb18:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800eb1a:	441a      	add	r2, r3
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800eb20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d103      	bne.n	800eb30 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800eb30:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3740      	adds	r7, #64	; 0x40
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b088      	sub	sp, #32
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eb46:	2300      	movs	r3, #0
 800eb48:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800eb4e:	e0c6      	b.n	800ecde <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	683a      	ldr	r2, [r7, #0]
 800eb54:	4413      	add	r3, r2
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	74fb      	strb	r3, [r7, #19]
		Index++;
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800eb60:	7cfb      	ldrb	r3, [r7, #19]
 800eb62:	2bff      	cmp	r3, #255	; 0xff
 800eb64:	f040 808d 	bne.w	800ec82 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	683a      	ldr	r2, [r7, #0]
 800eb6c:	4413      	add	r3, r2
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	747b      	strb	r3, [r7, #17]
			Index++;
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	3301      	adds	r3, #1
 800eb76:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800eb78:	7c7b      	ldrb	r3, [r7, #17]
 800eb7a:	2b03      	cmp	r3, #3
 800eb7c:	d87e      	bhi.n	800ec7c <VL53L0X_load_tuning_settings+0x140>
 800eb7e:	a201      	add	r2, pc, #4	; (adr r2, 800eb84 <VL53L0X_load_tuning_settings+0x48>)
 800eb80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb84:	0800eb95 	.word	0x0800eb95
 800eb88:	0800ebcf 	.word	0x0800ebcf
 800eb8c:	0800ec09 	.word	0x0800ec09
 800eb90:	0800ec43 	.word	0x0800ec43
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	683a      	ldr	r2, [r7, #0]
 800eb98:	4413      	add	r3, r2
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	743b      	strb	r3, [r7, #16]
				Index++;
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	3301      	adds	r3, #1
 800eba2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	683a      	ldr	r2, [r7, #0]
 800eba8:	4413      	add	r3, r2
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ebb4:	7c3b      	ldrb	r3, [r7, #16]
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	021b      	lsls	r3, r3, #8
 800ebba:	b29a      	uxth	r2, r3
 800ebbc:	7bfb      	ldrb	r3, [r7, #15]
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	4413      	add	r3, r2
 800ebc2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	89ba      	ldrh	r2, [r7, #12]
 800ebc8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800ebcc:	e087      	b.n	800ecde <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	683a      	ldr	r2, [r7, #0]
 800ebd2:	4413      	add	r3, r2
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	743b      	strb	r3, [r7, #16]
				Index++;
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	3301      	adds	r3, #1
 800ebdc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	683a      	ldr	r2, [r7, #0]
 800ebe2:	4413      	add	r3, r2
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	3301      	adds	r3, #1
 800ebec:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ebee:	7c3b      	ldrb	r3, [r7, #16]
 800ebf0:	b29b      	uxth	r3, r3
 800ebf2:	021b      	lsls	r3, r3, #8
 800ebf4:	b29a      	uxth	r2, r3
 800ebf6:	7bfb      	ldrb	r3, [r7, #15]
 800ebf8:	b29b      	uxth	r3, r3
 800ebfa:	4413      	add	r3, r2
 800ebfc:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	89ba      	ldrh	r2, [r7, #12]
 800ec02:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800ec06:	e06a      	b.n	800ecde <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	683a      	ldr	r2, [r7, #0]
 800ec0c:	4413      	add	r3, r2
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	743b      	strb	r3, [r7, #16]
				Index++;
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	3301      	adds	r3, #1
 800ec16:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	683a      	ldr	r2, [r7, #0]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	3301      	adds	r3, #1
 800ec26:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ec28:	7c3b      	ldrb	r3, [r7, #16]
 800ec2a:	b29b      	uxth	r3, r3
 800ec2c:	021b      	lsls	r3, r3, #8
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	7bfb      	ldrb	r3, [r7, #15]
 800ec32:	b29b      	uxth	r3, r3
 800ec34:	4413      	add	r3, r2
 800ec36:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	89ba      	ldrh	r2, [r7, #12]
 800ec3c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800ec40:	e04d      	b.n	800ecde <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	683a      	ldr	r2, [r7, #0]
 800ec46:	4413      	add	r3, r2
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	743b      	strb	r3, [r7, #16]
				Index++;
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	3301      	adds	r3, #1
 800ec50:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	683a      	ldr	r2, [r7, #0]
 800ec56:	4413      	add	r3, r2
 800ec58:	781b      	ldrb	r3, [r3, #0]
 800ec5a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	3301      	adds	r3, #1
 800ec60:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ec62:	7c3b      	ldrb	r3, [r7, #16]
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	021b      	lsls	r3, r3, #8
 800ec68:	b29a      	uxth	r2, r3
 800ec6a:	7bfb      	ldrb	r3, [r7, #15]
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	4413      	add	r3, r2
 800ec70:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	89ba      	ldrh	r2, [r7, #12]
 800ec76:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800ec7a:	e030      	b.n	800ecde <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ec7c:	23fc      	movs	r3, #252	; 0xfc
 800ec7e:	77fb      	strb	r3, [r7, #31]
 800ec80:	e02d      	b.n	800ecde <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800ec82:	7cfb      	ldrb	r3, [r7, #19]
 800ec84:	2b04      	cmp	r3, #4
 800ec86:	d828      	bhi.n	800ecda <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	683a      	ldr	r2, [r7, #0]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	74bb      	strb	r3, [r7, #18]
			Index++;
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	3301      	adds	r3, #1
 800ec96:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800ec98:	2300      	movs	r3, #0
 800ec9a:	61bb      	str	r3, [r7, #24]
 800ec9c:	e00f      	b.n	800ecbe <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	683a      	ldr	r2, [r7, #0]
 800eca2:	4413      	add	r3, r2
 800eca4:	7819      	ldrb	r1, [r3, #0]
 800eca6:	f107 0208 	add.w	r2, r7, #8
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	4413      	add	r3, r2
 800ecae:	460a      	mov	r2, r1
 800ecb0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	3301      	adds	r3, #1
 800ecbc:	61bb      	str	r3, [r7, #24]
 800ecbe:	7cfb      	ldrb	r3, [r7, #19]
 800ecc0:	69ba      	ldr	r2, [r7, #24]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	dbeb      	blt.n	800ec9e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800ecc6:	7cfb      	ldrb	r3, [r7, #19]
 800ecc8:	f107 0208 	add.w	r2, r7, #8
 800eccc:	7cb9      	ldrb	r1, [r7, #18]
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 fdee 	bl	800f8b0 <VL53L0X_WriteMulti>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	77fb      	strb	r3, [r7, #31]
 800ecd8:	e001      	b.n	800ecde <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ecda:	23fc      	movs	r3, #252	; 0xfc
 800ecdc:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	683a      	ldr	r2, [r7, #0]
 800ece2:	4413      	add	r3, r2
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d004      	beq.n	800ecf4 <VL53L0X_load_tuning_settings+0x1b8>
 800ecea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	f43f af2e 	beq.w	800eb50 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ecf4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3720      	adds	r7, #32
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b088      	sub	sp, #32
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	60f8      	str	r0, [r7, #12]
 800ed08:	60b9      	str	r1, [r7, #8]
 800ed0a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2200      	movs	r2, #0
 800ed14:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800ed16:	f107 0313 	add.w	r3, r7, #19
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	68f8      	ldr	r0, [r7, #12]
 800ed1e:	f7fc fcf1 	bl	800b704 <VL53L0X_GetXTalkCompensationEnable>
 800ed22:	4603      	mov	r3, r0
 800ed24:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800ed26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d111      	bne.n	800ed52 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800ed2e:	7cfb      	ldrb	r3, [r7, #19]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d00e      	beq.n	800ed52 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	6a1b      	ldr	r3, [r3, #32]
 800ed38:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	8a9b      	ldrh	r3, [r3, #20]
 800ed3e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	fb02 f303 	mul.w	r3, r2, r3
 800ed46:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	3380      	adds	r3, #128	; 0x80
 800ed4c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800ed52:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3720      	adds	r7, #32
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800ed5e:	b580      	push	{r7, lr}
 800ed60:	b086      	sub	sp, #24
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	60f8      	str	r0, [r7, #12]
 800ed66:	60b9      	str	r1, [r7, #8]
 800ed68:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800ed76:	f107 0310 	add.w	r3, r7, #16
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	68b9      	ldr	r1, [r7, #8]
 800ed7e:	68f8      	ldr	r0, [r7, #12]
 800ed80:	f7ff ffbe 	bl	800ed00 <VL53L0X_get_total_xtalk_rate>
 800ed84:	4603      	mov	r3, r0
 800ed86:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800ed88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d105      	bne.n	800ed9c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681a      	ldr	r2, [r3, #0]
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	441a      	add	r2, r3
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	601a      	str	r2, [r3, #0]

	return Status;
 800ed9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3718      	adds	r7, #24
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b09a      	sub	sp, #104	; 0x68
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
 800edb4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800edb6:	2312      	movs	r3, #18
 800edb8:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800edba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800edbe:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800edc0:	2342      	movs	r3, #66	; 0x42
 800edc2:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800edc4:	2306      	movs	r3, #6
 800edc6:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800edc8:	2307      	movs	r3, #7
 800edca:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800edcc:	2300      	movs	r3, #0
 800edce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800edd8:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ede0:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800ede2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ede4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ede6:	fb02 f303 	mul.w	r3, r2, r3
 800edea:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800edec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edee:	3380      	adds	r3, #128	; 0x80
 800edf0:	0a1b      	lsrs	r3, r3, #8
 800edf2:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800edf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800edf8:	fb02 f303 	mul.w	r3, r2, r3
 800edfc:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800edfe:	2300      	movs	r3, #0
 800ee00:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d01a      	beq.n	800ee3e <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	029b      	lsls	r3, r3, #10
 800ee0c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800ee12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee14:	4413      	add	r3, r2
 800ee16:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800ee18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee20:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800ee22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ee24:	4613      	mov	r3, r2
 800ee26:	005b      	lsls	r3, r3, #1
 800ee28:	4413      	add	r3, r2
 800ee2a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800ee2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee2e:	fb03 f303 	mul.w	r3, r3, r3
 800ee32:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800ee34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee36:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ee3a:	0c1b      	lsrs	r3, r3, #16
 800ee3c:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ee42:	fb02 f303 	mul.w	r3, r2, r3
 800ee46:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800ee48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee4a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ee4e:	0c1b      	lsrs	r3, r3, #16
 800ee50:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800ee52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee54:	fb03 f303 	mul.w	r3, r3, r3
 800ee58:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800ee5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee5c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ee60:	0c1b      	lsrs	r3, r3, #16
 800ee62:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800ee64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee66:	085a      	lsrs	r2, r3, #1
 800ee68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6a:	441a      	add	r2, r3
 800ee6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee72:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800ee74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee78:	fb02 f303 	mul.w	r3, r2, r3
 800ee7c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800ee7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee84:	d302      	bcc.n	800ee8c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800ee86:	4b54      	ldr	r3, [pc, #336]	; (800efd8 <VL53L0X_calc_dmax+0x230>)
 800ee88:	663b      	str	r3, [r7, #96]	; 0x60
 800ee8a:	e015      	b.n	800eeb8 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800ee8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee8e:	085a      	lsrs	r2, r3, #1
 800ee90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee92:	441a      	add	r2, r3
 800ee94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee9a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800ee9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eea0:	fb02 f303 	mul.w	r3, r2, r3
 800eea4:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800eea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eea8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800eeac:	0c1b      	lsrs	r3, r3, #16
 800eeae:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800eeb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eeb2:	fb03 f303 	mul.w	r3, r3, r3
 800eeb6:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800eeb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eeba:	039b      	lsls	r3, r3, #14
 800eebc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800eec0:	4a46      	ldr	r2, [pc, #280]	; (800efdc <VL53L0X_calc_dmax+0x234>)
 800eec2:	fba2 2303 	umull	r2, r3, r2, r3
 800eec6:	099b      	lsrs	r3, r3, #6
 800eec8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800eeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eecc:	fb03 f303 	mul.w	r3, r3, r3
 800eed0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800eed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eed4:	fb03 f303 	mul.w	r3, r3, r3
 800eed8:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800eeda:	6a3b      	ldr	r3, [r7, #32]
 800eedc:	3308      	adds	r3, #8
 800eede:	091b      	lsrs	r3, r3, #4
 800eee0:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800eee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eee4:	6a3b      	ldr	r3, [r7, #32]
 800eee6:	1ad3      	subs	r3, r2, r3
 800eee8:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800eeea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeec:	4613      	mov	r3, r2
 800eeee:	005b      	lsls	r3, r3, #1
 800eef0:	4413      	add	r3, r2
 800eef2:	011b      	lsls	r3, r3, #4
 800eef4:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800eef6:	69fb      	ldr	r3, [r7, #28]
 800eef8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800eefc:	0b9b      	lsrs	r3, r3, #14
 800eefe:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800ef00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef04:	4413      	add	r3, r2
 800ef06:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800ef08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef0a:	085b      	lsrs	r3, r3, #1
 800ef0c:	69ba      	ldr	r2, [r7, #24]
 800ef0e:	4413      	add	r3, r2
 800ef10:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800ef12:	69ba      	ldr	r2, [r7, #24]
 800ef14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef1a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800ef1c:	69bb      	ldr	r3, [r7, #24]
 800ef1e:	039b      	lsls	r3, r3, #14
 800ef20:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800ef22:	69fb      	ldr	r3, [r7, #28]
 800ef24:	085b      	lsrs	r3, r3, #1
 800ef26:	69ba      	ldr	r2, [r7, #24]
 800ef28:	4413      	add	r3, r2
 800ef2a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800ef2c:	69ba      	ldr	r2, [r7, #24]
 800ef2e:	69fb      	ldr	r3, [r7, #28]
 800ef30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef34:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800ef36:	69bb      	ldr	r3, [r7, #24]
 800ef38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ef3a:	fb02 f303 	mul.w	r3, r2, r3
 800ef3e:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ef40:	69bb      	ldr	r3, [r7, #24]
 800ef42:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ef46:	4a25      	ldr	r2, [pc, #148]	; (800efdc <VL53L0X_calc_dmax+0x234>)
 800ef48:	fba2 2303 	umull	r2, r3, r2, r3
 800ef4c:	099b      	lsrs	r3, r3, #6
 800ef4e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800ef50:	69bb      	ldr	r3, [r7, #24]
 800ef52:	011b      	lsls	r3, r3, #4
 800ef54:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ef56:	69bb      	ldr	r3, [r7, #24]
 800ef58:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ef5c:	4a1f      	ldr	r2, [pc, #124]	; (800efdc <VL53L0X_calc_dmax+0x234>)
 800ef5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ef62:	099b      	lsrs	r3, r3, #6
 800ef64:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800ef66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef68:	3380      	adds	r3, #128	; 0x80
 800ef6a:	0a1b      	lsrs	r3, r3, #8
 800ef6c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d008      	beq.n	800ef86 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	085a      	lsrs	r2, r3, #1
 800ef78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef7a:	441a      	add	r2, r3
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef82:	65bb      	str	r3, [r7, #88]	; 0x58
 800ef84:	e001      	b.n	800ef8a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800ef86:	2300      	movs	r3, #0
 800ef88:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800ef8a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ef8c:	f7fe f9ba 	bl	800d304 <VL53L0X_isqrt>
 800ef90:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d008      	beq.n	800efaa <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800ef98:	69bb      	ldr	r3, [r7, #24]
 800ef9a:	085a      	lsrs	r2, r3, #1
 800ef9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef9e:	441a      	add	r2, r3
 800efa0:	69bb      	ldr	r3, [r7, #24]
 800efa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800efa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800efa8:	e001      	b.n	800efae <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800efaa:	2300      	movs	r3, #0
 800efac:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800efae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800efb0:	f7fe f9a8 	bl	800d304 <VL53L0X_isqrt>
 800efb4:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800efb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800efb8:	693a      	ldr	r2, [r7, #16]
 800efba:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800efbc:	693a      	ldr	r2, [r7, #16]
 800efbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d902      	bls.n	800efca <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800efc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800efc6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800efc8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800efca:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3768      	adds	r7, #104	; 0x68
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
 800efd6:	bf00      	nop
 800efd8:	fff00000 	.word	0xfff00000
 800efdc:	10624dd3 	.word	0x10624dd3

0800efe0 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b0b4      	sub	sp, #208	; 0xd0
 800efe4:	af04      	add	r7, sp, #16
 800efe6:	60f8      	str	r0, [r7, #12]
 800efe8:	60b9      	str	r1, [r7, #8]
 800efea:	607a      	str	r2, [r7, #4]
 800efec:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800efee:	f44f 7348 	mov.w	r3, #800	; 0x320
 800eff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800eff6:	f44f 7316 	mov.w	r3, #600	; 0x258
 800effa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800effe:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800f002:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800f006:	f241 235c 	movw	r3, #4700	; 0x125c
 800f00a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800f00e:	4b9e      	ldr	r3, [pc, #632]	; (800f288 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800f010:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800f014:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800f018:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800f01a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800f01e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f022:	fbb2 f3f3 	udiv	r3, r2, r3
 800f026:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800f028:	4b98      	ldr	r3, [pc, #608]	; (800f28c <VL53L0X_calc_sigma_estimate+0x2ac>)
 800f02a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800f02c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f030:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800f032:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800f036:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800f038:	f240 6377 	movw	r3, #1655	; 0x677
 800f03c:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f03e:	2300      	movs	r3, #0
 800f040:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	6a1b      	ldr	r3, [r3, #32]
 800f048:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	691b      	ldr	r3, [r3, #16]
 800f04e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f052:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800f056:	0c1b      	lsrs	r3, r3, #16
 800f058:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	68db      	ldr	r3, [r3, #12]
 800f05e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800f060:	f107 0310 	add.w	r3, r7, #16
 800f064:	461a      	mov	r2, r3
 800f066:	68b9      	ldr	r1, [r7, #8]
 800f068:	68f8      	ldr	r0, [r7, #12]
 800f06a:	f7ff fe78 	bl	800ed5e <VL53L0X_get_total_signal_rate>
 800f06e:	4603      	mov	r3, r0
 800f070:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800f074:	f107 0314 	add.w	r3, r7, #20
 800f078:	461a      	mov	r2, r3
 800f07a:	68b9      	ldr	r1, [r7, #8]
 800f07c:	68f8      	ldr	r0, [r7, #12]
 800f07e:	f7ff fe3f 	bl	800ed00 <VL53L0X_get_total_xtalk_rate>
 800f082:	4603      	mov	r3, r0
 800f084:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f08e:	fb02 f303 	mul.w	r3, r2, r3
 800f092:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800f094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f096:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f09a:	0c1b      	lsrs	r3, r3, #16
 800f09c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f0a4:	fb02 f303 	mul.w	r3, r2, r3
 800f0a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800f0ac:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f0b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d902      	bls.n	800f0bc <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800f0b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800f0bc:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d168      	bne.n	800f196 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f0ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800f0d4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f0d8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f0dc:	461a      	mov	r2, r3
 800f0de:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800f0e2:	68f8      	ldr	r0, [r7, #12]
 800f0e4:	f7fe feb2 	bl	800de4c <VL53L0X_calc_timeout_mclks>
 800f0e8:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f0f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800f0fa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f0fe:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f102:	461a      	mov	r2, r3
 800f104:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800f108:	68f8      	ldr	r0, [r7, #12]
 800f10a:	f7fe fe9f 	bl	800de4c <VL53L0X_calc_timeout_mclks>
 800f10e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800f110:	2303      	movs	r3, #3
 800f112:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800f116:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f11a:	2b08      	cmp	r3, #8
 800f11c:	d102      	bne.n	800f124 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800f11e:	2302      	movs	r3, #2
 800f120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800f124:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f128:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800f12a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f12e:	fb02 f303 	mul.w	r3, r2, r3
 800f132:	02db      	lsls	r3, r3, #11
 800f134:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f138:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f13c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f140:	4a53      	ldr	r2, [pc, #332]	; (800f290 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f142:	fba2 2303 	umull	r2, r3, r2, r3
 800f146:	099b      	lsrs	r3, r3, #6
 800f148:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800f14c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f150:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f152:	fb02 f303 	mul.w	r3, r2, r3
 800f156:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f15a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f15e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f162:	4a4b      	ldr	r2, [pc, #300]	; (800f290 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f164:	fba2 2303 	umull	r2, r3, r2, r3
 800f168:	099b      	lsrs	r3, r3, #6
 800f16a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	3380      	adds	r3, #128	; 0x80
 800f172:	0a1b      	lsrs	r3, r3, #8
 800f174:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800f176:	693a      	ldr	r2, [r7, #16]
 800f178:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f17c:	fb02 f303 	mul.w	r3, r2, r3
 800f180:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800f184:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f188:	3380      	adds	r3, #128	; 0x80
 800f18a:	0a1b      	lsrs	r3, r3, #8
 800f18c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	021b      	lsls	r3, r3, #8
 800f194:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800f196:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d002      	beq.n	800f1a4 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800f19e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f1a2:	e15e      	b.n	800f462 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800f1a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d10c      	bne.n	800f1c4 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f1b0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f1b8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	601a      	str	r2, [r3, #0]
 800f1c2:	e14c      	b.n	800f45e <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800f1c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d102      	bne.n	800f1d2 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800f1d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f1d6:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800f1d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f1da:	041a      	lsls	r2, r3, #16
 800f1dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f1de:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800f1e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f1ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d902      	bls.n	800f1f6 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800f1f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f1f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800f1f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f1fa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f1fe:	fb02 f303 	mul.w	r3, r2, r3
 800f202:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800f206:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f20a:	4613      	mov	r3, r2
 800f20c:	005b      	lsls	r3, r3, #1
 800f20e:	4413      	add	r3, r2
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	4618      	mov	r0, r3
 800f214:	f7fe f876 	bl	800d304 <VL53L0X_isqrt>
 800f218:	4603      	mov	r3, r0
 800f21a:	005b      	lsls	r3, r3, #1
 800f21c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	891b      	ldrh	r3, [r3, #8]
 800f222:	461a      	mov	r2, r3
 800f224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f226:	fb02 f303 	mul.w	r3, r2, r3
 800f22a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f22c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f22e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f230:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f234:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f236:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f238:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f23c:	4a14      	ldr	r2, [pc, #80]	; (800f290 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f23e:	fba2 2303 	umull	r2, r3, r2, r3
 800f242:	099b      	lsrs	r3, r3, #6
 800f244:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800f246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f248:	041b      	lsls	r3, r3, #16
 800f24a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f24e:	4a10      	ldr	r2, [pc, #64]	; (800f290 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f250:	fba2 2303 	umull	r2, r3, r2, r3
 800f254:	099b      	lsrs	r3, r3, #6
 800f256:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800f258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f25a:	021b      	lsls	r3, r3, #8
 800f25c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800f25e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f262:	fbb2 f3f3 	udiv	r3, r2, r3
 800f266:	2b00      	cmp	r3, #0
 800f268:	bfb8      	it	lt
 800f26a:	425b      	neglt	r3, r3
 800f26c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800f26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f270:	021b      	lsls	r3, r3, #8
 800f272:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	7e1b      	ldrb	r3, [r3, #24]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d00b      	beq.n	800f294 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800f27c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f284:	e033      	b.n	800f2ee <VL53L0X_calc_sigma_estimate+0x30e>
 800f286:	bf00      	nop
 800f288:	028f87ae 	.word	0x028f87ae
 800f28c:	0006999a 	.word	0x0006999a
 800f290:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800f294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f296:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f29e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800f2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2a4:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800f2a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f2ac:	fb02 f303 	mul.w	r3, r2, r3
 800f2b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800f2b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f2b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f2ba:	4413      	add	r3, r2
 800f2bc:	0c1b      	lsrs	r3, r3, #16
 800f2be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800f2c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f2c6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f2ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800f2ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f2d2:	085b      	lsrs	r3, r3, #1
 800f2d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800f2d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f2dc:	fb03 f303 	mul.w	r3, r3, r3
 800f2e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800f2e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f2e8:	0b9b      	lsrs	r3, r3, #14
 800f2ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800f2ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f2f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2f4:	fb02 f303 	mul.w	r3, r2, r3
 800f2f8:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800f2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f300:	0c1b      	lsrs	r3, r3, #16
 800f302:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800f304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f306:	fb03 f303 	mul.w	r3, r3, r3
 800f30a:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800f30c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f310:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800f312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f314:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f318:	0c1b      	lsrs	r3, r3, #16
 800f31a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800f31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31e:	fb03 f303 	mul.w	r3, r3, r3
 800f322:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800f324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f328:	4413      	add	r3, r2
 800f32a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800f32c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f32e:	f7fd ffe9 	bl	800d304 <VL53L0X_isqrt>
 800f332:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800f334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f336:	041b      	lsls	r3, r3, #16
 800f338:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800f33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33c:	3332      	adds	r3, #50	; 0x32
 800f33e:	4a4b      	ldr	r2, [pc, #300]	; (800f46c <VL53L0X_calc_sigma_estimate+0x48c>)
 800f340:	fba2 2303 	umull	r2, r3, r2, r3
 800f344:	095a      	lsrs	r2, r3, #5
 800f346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f348:	fbb2 f3f3 	udiv	r3, r2, r3
 800f34c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800f350:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f354:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800f358:	fb02 f303 	mul.w	r3, r2, r3
 800f35c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800f360:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f364:	f241 3388 	movw	r3, #5000	; 0x1388
 800f368:	4413      	add	r3, r2
 800f36a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800f36e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f372:	4a3f      	ldr	r2, [pc, #252]	; (800f470 <VL53L0X_calc_sigma_estimate+0x490>)
 800f374:	fba2 2303 	umull	r2, r3, r2, r3
 800f378:	0b5b      	lsrs	r3, r3, #13
 800f37a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800f37e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f382:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f384:	429a      	cmp	r2, r3
 800f386:	d902      	bls.n	800f38e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800f388:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f38a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800f38e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f392:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f396:	4413      	add	r3, r2
 800f398:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800f39c:	4a35      	ldr	r2, [pc, #212]	; (800f474 <VL53L0X_calc_sigma_estimate+0x494>)
 800f39e:	fba2 2303 	umull	r2, r3, r2, r3
 800f3a2:	099b      	lsrs	r3, r3, #6
 800f3a4:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800f3a6:	6a3b      	ldr	r3, [r7, #32]
 800f3a8:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800f3aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f3ae:	441a      	add	r2, r3
 800f3b0:	6a3b      	ldr	r3, [r7, #32]
 800f3b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7fd ffa4 	bl	800d304 <VL53L0X_isqrt>
 800f3bc:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800f3be:	69fb      	ldr	r3, [r7, #28]
 800f3c0:	021b      	lsls	r3, r3, #8
 800f3c2:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800f3c4:	69fb      	ldr	r3, [r7, #28]
 800f3c6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f3ca:	4a2a      	ldr	r2, [pc, #168]	; (800f474 <VL53L0X_calc_sigma_estimate+0x494>)
 800f3cc:	fba2 2303 	umull	r2, r3, r2, r3
 800f3d0:	099b      	lsrs	r3, r3, #6
 800f3d2:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800f3d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f3d8:	fb03 f303 	mul.w	r3, r3, r3
 800f3dc:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800f3de:	69fb      	ldr	r3, [r7, #28]
 800f3e0:	fb03 f303 	mul.w	r3, r3, r3
 800f3e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800f3e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ea:	4413      	add	r3, r2
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7fd ff89 	bl	800d304 <VL53L0X_isqrt>
 800f3f2:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800f3f4:	69bb      	ldr	r3, [r7, #24]
 800f3f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f3fa:	fb02 f303 	mul.w	r3, r2, r3
 800f3fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800f402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f404:	2b00      	cmp	r3, #0
 800f406:	d009      	beq.n	800f41c <VL53L0X_calc_sigma_estimate+0x43c>
 800f408:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d005      	beq.n	800f41c <VL53L0X_calc_sigma_estimate+0x43c>
 800f410:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f414:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f418:	429a      	cmp	r2, r3
 800f41a:	d903      	bls.n	800f424 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800f41c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f420:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f42a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800f436:	6939      	ldr	r1, [r7, #16]
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	9303      	str	r3, [sp, #12]
 800f43c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f440:	9302      	str	r3, [sp, #8]
 800f442:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f446:	9301      	str	r3, [sp, #4]
 800f448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f44a:	9300      	str	r3, [sp, #0]
 800f44c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f450:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f452:	68f8      	ldr	r0, [r7, #12]
 800f454:	f7ff fca8 	bl	800eda8 <VL53L0X_calc_dmax>
 800f458:	4603      	mov	r3, r0
 800f45a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f45e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800f462:	4618      	mov	r0, r3
 800f464:	37c0      	adds	r7, #192	; 0xc0
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
 800f46a:	bf00      	nop
 800f46c:	51eb851f 	.word	0x51eb851f
 800f470:	d1b71759 	.word	0xd1b71759
 800f474:	10624dd3 	.word	0x10624dd3

0800f478 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b090      	sub	sp, #64	; 0x40
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	607a      	str	r2, [r7, #4]
 800f482:	461a      	mov	r2, r3
 800f484:	460b      	mov	r3, r1
 800f486:	72fb      	strb	r3, [r7, #11]
 800f488:	4613      	mov	r3, r2
 800f48a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f48c:	2300      	movs	r3, #0
 800f48e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800f492:	2300      	movs	r3, #0
 800f494:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800f498:	2300      	movs	r3, #0
 800f49a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800f4ca:	7afb      	ldrb	r3, [r7, #11]
 800f4cc:	10db      	asrs	r3, r3, #3
 800f4ce:	b2db      	uxtb	r3, r3
 800f4d0:	f003 030f 	and.w	r3, r3, #15
 800f4d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800f4d8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d017      	beq.n	800f510 <VL53L0X_get_pal_range_status+0x98>
 800f4e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f4e4:	2b05      	cmp	r3, #5
 800f4e6:	d013      	beq.n	800f510 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800f4e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f4ec:	2b07      	cmp	r3, #7
 800f4ee:	d00f      	beq.n	800f510 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800f4f0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f4f4:	2b0c      	cmp	r3, #12
 800f4f6:	d00b      	beq.n	800f510 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800f4f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f4fc:	2b0d      	cmp	r3, #13
 800f4fe:	d007      	beq.n	800f510 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800f500:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f504:	2b0e      	cmp	r3, #14
 800f506:	d003      	beq.n	800f510 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800f508:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f50c:	2b0f      	cmp	r3, #15
 800f50e:	d103      	bne.n	800f518 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800f510:	2301      	movs	r3, #1
 800f512:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800f516:	e002      	b.n	800f51e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800f518:	2300      	movs	r3, #0
 800f51a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800f51e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f522:	2b00      	cmp	r3, #0
 800f524:	d109      	bne.n	800f53a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f526:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800f52a:	461a      	mov	r2, r3
 800f52c:	2100      	movs	r1, #0
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f7fc f9bc 	bl	800b8ac <VL53L0X_GetLimitCheckEnable>
 800f534:	4603      	mov	r3, r0
 800f536:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800f53a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d02e      	beq.n	800f5a0 <VL53L0X_get_pal_range_status+0x128>
 800f542:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f546:	2b00      	cmp	r3, #0
 800f548:	d12a      	bne.n	800f5a0 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800f54a:	f107 0310 	add.w	r3, r7, #16
 800f54e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f552:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f554:	68f8      	ldr	r0, [r7, #12]
 800f556:	f7ff fd43 	bl	800efe0 <VL53L0X_calc_sigma_estimate>
 800f55a:	4603      	mov	r3, r0
 800f55c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800f560:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f564:	2b00      	cmp	r3, #0
 800f566:	d103      	bne.n	800f570 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	b29a      	uxth	r2, r3
 800f56c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f56e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800f570:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f574:	2b00      	cmp	r3, #0
 800f576:	d113      	bne.n	800f5a0 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800f578:	f107 0320 	add.w	r3, r7, #32
 800f57c:	461a      	mov	r2, r3
 800f57e:	2100      	movs	r1, #0
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	f7fc fa19 	bl	800b9b8 <VL53L0X_GetLimitCheckValue>
 800f586:	4603      	mov	r3, r0
 800f588:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800f58c:	6a3b      	ldr	r3, [r7, #32]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d006      	beq.n	800f5a0 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800f592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f594:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800f596:	429a      	cmp	r2, r3
 800f598:	d902      	bls.n	800f5a0 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800f59a:	2301      	movs	r3, #1
 800f59c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800f5a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d109      	bne.n	800f5bc <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f5a8:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	2102      	movs	r1, #2
 800f5b0:	68f8      	ldr	r0, [r7, #12]
 800f5b2:	f7fc f97b 	bl	800b8ac <VL53L0X_GetLimitCheckEnable>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800f5bc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d044      	beq.n	800f64e <VL53L0X_get_pal_range_status+0x1d6>
 800f5c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d140      	bne.n	800f64e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800f5cc:	f107 031c 	add.w	r3, r7, #28
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	2102      	movs	r1, #2
 800f5d4:	68f8      	ldr	r0, [r7, #12]
 800f5d6:	f7fc f9ef 	bl	800b9b8 <VL53L0X_GetLimitCheckValue>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800f5e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d107      	bne.n	800f5f8 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	21ff      	movs	r1, #255	; 0xff
 800f5ec:	68f8      	ldr	r0, [r7, #12]
 800f5ee:	f000 f9bb 	bl	800f968 <VL53L0X_WrByte>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800f5f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d109      	bne.n	800f614 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800f600:	f107 0316 	add.w	r3, r7, #22
 800f604:	461a      	mov	r2, r3
 800f606:	21b6      	movs	r1, #182	; 0xb6
 800f608:	68f8      	ldr	r0, [r7, #12]
 800f60a:	f000 fa59 	bl	800fac0 <VL53L0X_RdWord>
 800f60e:	4603      	mov	r3, r0
 800f610:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800f614:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d107      	bne.n	800f62c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800f61c:	2200      	movs	r2, #0
 800f61e:	21ff      	movs	r1, #255	; 0xff
 800f620:	68f8      	ldr	r0, [r7, #12]
 800f622:	f000 f9a1 	bl	800f968 <VL53L0X_WrByte>
 800f626:	4603      	mov	r3, r0
 800f628:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800f62c:	8afb      	ldrh	r3, [r7, #22]
 800f62e:	025b      	lsls	r3, r3, #9
 800f630:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f636:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800f63a:	69fb      	ldr	r3, [r7, #28]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d006      	beq.n	800f64e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800f640:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800f642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f644:	429a      	cmp	r2, r3
 800f646:	d902      	bls.n	800f64e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800f648:	2301      	movs	r3, #1
 800f64a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800f64e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f652:	2b00      	cmp	r3, #0
 800f654:	d109      	bne.n	800f66a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f65a:	461a      	mov	r2, r3
 800f65c:	2103      	movs	r1, #3
 800f65e:	68f8      	ldr	r0, [r7, #12]
 800f660:	f7fc f924 	bl	800b8ac <VL53L0X_GetLimitCheckEnable>
 800f664:	4603      	mov	r3, r0
 800f666:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800f66a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d023      	beq.n	800f6ba <VL53L0X_get_pal_range_status+0x242>
 800f672:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f676:	2b00      	cmp	r3, #0
 800f678:	d11f      	bne.n	800f6ba <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800f67a:	893b      	ldrh	r3, [r7, #8]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d102      	bne.n	800f686 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800f680:	2300      	movs	r3, #0
 800f682:	637b      	str	r3, [r7, #52]	; 0x34
 800f684:	e005      	b.n	800f692 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	021a      	lsls	r2, r3, #8
 800f68a:	893b      	ldrh	r3, [r7, #8]
 800f68c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f690:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800f692:	f107 0318 	add.w	r3, r7, #24
 800f696:	461a      	mov	r2, r3
 800f698:	2103      	movs	r1, #3
 800f69a:	68f8      	ldr	r0, [r7, #12]
 800f69c:	f7fc f98c 	bl	800b9b8 <VL53L0X_GetLimitCheckValue>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800f6a6:	69bb      	ldr	r3, [r7, #24]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d006      	beq.n	800f6ba <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800f6ac:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800f6ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d202      	bcs.n	800f6ba <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f6ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d14a      	bne.n	800f758 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800f6c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f6c6:	2b01      	cmp	r3, #1
 800f6c8:	d103      	bne.n	800f6d2 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800f6ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6cc:	22ff      	movs	r2, #255	; 0xff
 800f6ce:	701a      	strb	r2, [r3, #0]
 800f6d0:	e042      	b.n	800f758 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800f6d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f6d6:	2b01      	cmp	r3, #1
 800f6d8:	d007      	beq.n	800f6ea <VL53L0X_get_pal_range_status+0x272>
 800f6da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f6de:	2b02      	cmp	r3, #2
 800f6e0:	d003      	beq.n	800f6ea <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800f6e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f6e6:	2b03      	cmp	r3, #3
 800f6e8:	d103      	bne.n	800f6f2 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800f6ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6ec:	2205      	movs	r2, #5
 800f6ee:	701a      	strb	r2, [r3, #0]
 800f6f0:	e032      	b.n	800f758 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800f6f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f6f6:	2b06      	cmp	r3, #6
 800f6f8:	d003      	beq.n	800f702 <VL53L0X_get_pal_range_status+0x28a>
 800f6fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f6fe:	2b09      	cmp	r3, #9
 800f700:	d103      	bne.n	800f70a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800f702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f704:	2204      	movs	r2, #4
 800f706:	701a      	strb	r2, [r3, #0]
 800f708:	e026      	b.n	800f758 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800f70a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f70e:	2b08      	cmp	r3, #8
 800f710:	d007      	beq.n	800f722 <VL53L0X_get_pal_range_status+0x2aa>
 800f712:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f716:	2b0a      	cmp	r3, #10
 800f718:	d003      	beq.n	800f722 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800f71a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f71e:	2b01      	cmp	r3, #1
 800f720:	d103      	bne.n	800f72a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800f722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f724:	2203      	movs	r2, #3
 800f726:	701a      	strb	r2, [r3, #0]
 800f728:	e016      	b.n	800f758 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800f72a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f72e:	2b04      	cmp	r3, #4
 800f730:	d003      	beq.n	800f73a <VL53L0X_get_pal_range_status+0x2c2>
 800f732:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f736:	2b01      	cmp	r3, #1
 800f738:	d103      	bne.n	800f742 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800f73a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f73c:	2202      	movs	r2, #2
 800f73e:	701a      	strb	r2, [r3, #0]
 800f740:	e00a      	b.n	800f758 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800f742:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800f746:	2b01      	cmp	r3, #1
 800f748:	d103      	bne.n	800f752 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800f74a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f74c:	2201      	movs	r2, #1
 800f74e:	701a      	strb	r2, [r3, #0]
 800f750:	e002      	b.n	800f758 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800f752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f754:	2200      	movs	r2, #0
 800f756:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800f758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d102      	bne.n	800f766 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800f760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f762:	2200      	movs	r2, #0
 800f764:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f766:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800f76a:	461a      	mov	r2, r3
 800f76c:	2101      	movs	r1, #1
 800f76e:	68f8      	ldr	r0, [r7, #12]
 800f770:	f7fc f89c 	bl	800b8ac <VL53L0X_GetLimitCheckEnable>
 800f774:	4603      	mov	r3, r0
 800f776:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800f77a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d14f      	bne.n	800f822 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800f782:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f786:	2b00      	cmp	r3, #0
 800f788:	d003      	beq.n	800f792 <VL53L0X_get_pal_range_status+0x31a>
 800f78a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800f78e:	2b01      	cmp	r3, #1
 800f790:	d103      	bne.n	800f79a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800f792:	2301      	movs	r3, #1
 800f794:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f798:	e002      	b.n	800f7a0 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800f79a:	2300      	movs	r3, #0
 800f79c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f7a6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800f7aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f7ae:	2b04      	cmp	r3, #4
 800f7b0:	d003      	beq.n	800f7ba <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800f7b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d103      	bne.n	800f7c2 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f7c0:	e002      	b.n	800f7c8 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f7ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800f7d2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d003      	beq.n	800f7e2 <VL53L0X_get_pal_range_status+0x36a>
 800f7da:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f7de:	2b01      	cmp	r3, #1
 800f7e0:	d103      	bne.n	800f7ea <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f7e8:	e002      	b.n	800f7f0 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f7f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800f7fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d003      	beq.n	800f80a <VL53L0X_get_pal_range_status+0x392>
 800f802:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f806:	2b01      	cmp	r3, #1
 800f808:	d103      	bne.n	800f812 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800f80a:	2301      	movs	r3, #1
 800f80c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f810:	e002      	b.n	800f818 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800f812:	2300      	movs	r3, #0
 800f814:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f81e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f822:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800f826:	4618      	mov	r0, r3
 800f828:	3740      	adds	r7, #64	; 0x40
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}

0800f82e <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f82e:	b580      	push	{r7, lr}
 800f830:	b088      	sub	sp, #32
 800f832:	af02      	add	r7, sp, #8
 800f834:	60f8      	str	r0, [r7, #12]
 800f836:	60b9      	str	r1, [r7, #8]
 800f838:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	330a      	adds	r3, #10
 800f83e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800f84c:	b299      	uxth	r1, r3
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	b29a      	uxth	r2, r3
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	9300      	str	r3, [sp, #0]
 800f856:	4613      	mov	r3, r2
 800f858:	68ba      	ldr	r2, [r7, #8]
 800f85a:	f7f4 fc2f 	bl	80040bc <HAL_I2C_Master_Transmit>
 800f85e:	4603      	mov	r3, r0
 800f860:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f862:	693b      	ldr	r3, [r7, #16]
}
 800f864:	4618      	mov	r0, r3
 800f866:	3718      	adds	r7, #24
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b088      	sub	sp, #32
 800f870:	af02      	add	r7, sp, #8
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	330a      	adds	r3, #10
 800f87c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800f88a:	f043 0301 	orr.w	r3, r3, #1
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	b299      	uxth	r1, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	b29a      	uxth	r2, r3
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	9300      	str	r3, [sp, #0]
 800f89a:	4613      	mov	r3, r2
 800f89c:	68ba      	ldr	r2, [r7, #8]
 800f89e:	f7f4 fd01 	bl	80042a4 <HAL_I2C_Master_Receive>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f8a6:	693b      	ldr	r3, [r7, #16]
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3718      	adds	r7, #24
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}

0800f8b0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b086      	sub	sp, #24
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	60f8      	str	r0, [r7, #12]
 800f8b8:	607a      	str	r2, [r7, #4]
 800f8ba:	603b      	str	r3, [r7, #0]
 800f8bc:	460b      	mov	r3, r1
 800f8be:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	2b3f      	cmp	r3, #63	; 0x3f
 800f8c8:	d902      	bls.n	800f8d0 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800f8ca:	f06f 0303 	mvn.w	r3, #3
 800f8ce:	e016      	b.n	800f8fe <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800f8d0:	4a0d      	ldr	r2, [pc, #52]	; (800f908 <VL53L0X_WriteMulti+0x58>)
 800f8d2:	7afb      	ldrb	r3, [r7, #11]
 800f8d4:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800f8d6:	683a      	ldr	r2, [r7, #0]
 800f8d8:	6879      	ldr	r1, [r7, #4]
 800f8da:	480c      	ldr	r0, [pc, #48]	; (800f90c <VL53L0X_WriteMulti+0x5c>)
 800f8dc:	f000 f99e 	bl	800fc1c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	3301      	adds	r3, #1
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	4908      	ldr	r1, [pc, #32]	; (800f908 <VL53L0X_WriteMulti+0x58>)
 800f8e8:	68f8      	ldr	r0, [r7, #12]
 800f8ea:	f7ff ffa0 	bl	800f82e <_I2CWrite>
 800f8ee:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d001      	beq.n	800f8fa <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f8f6:	23ec      	movs	r3, #236	; 0xec
 800f8f8:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800f8fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3718      	adds	r7, #24
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}
 800f906:	bf00      	nop
 800f908:	2000b640 	.word	0x2000b640
 800f90c:	2000b641 	.word	0x2000b641

0800f910 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800f910:	b580      	push	{r7, lr}
 800f912:	b086      	sub	sp, #24
 800f914:	af00      	add	r7, sp, #0
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	607a      	str	r2, [r7, #4]
 800f91a:	603b      	str	r3, [r7, #0]
 800f91c:	460b      	mov	r3, r1
 800f91e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f920:	2300      	movs	r3, #0
 800f922:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800f924:	f107 030b 	add.w	r3, r7, #11
 800f928:	2201      	movs	r2, #1
 800f92a:	4619      	mov	r1, r3
 800f92c:	68f8      	ldr	r0, [r7, #12]
 800f92e:	f7ff ff7e 	bl	800f82e <_I2CWrite>
 800f932:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d002      	beq.n	800f940 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f93a:	23ec      	movs	r3, #236	; 0xec
 800f93c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f93e:	e00c      	b.n	800f95a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800f940:	683a      	ldr	r2, [r7, #0]
 800f942:	6879      	ldr	r1, [r7, #4]
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	f7ff ff91 	bl	800f86c <_I2CRead>
 800f94a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d002      	beq.n	800f958 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f952:	23ec      	movs	r3, #236	; 0xec
 800f954:	75fb      	strb	r3, [r7, #23]
 800f956:	e000      	b.n	800f95a <VL53L0X_ReadMulti+0x4a>
    }
done:
 800f958:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800f95a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3718      	adds	r7, #24
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
	...

0800f968 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800f968:	b580      	push	{r7, lr}
 800f96a:	b084      	sub	sp, #16
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	460b      	mov	r3, r1
 800f972:	70fb      	strb	r3, [r7, #3]
 800f974:	4613      	mov	r3, r2
 800f976:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f978:	2300      	movs	r3, #0
 800f97a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800f97c:	4a0b      	ldr	r2, [pc, #44]	; (800f9ac <VL53L0X_WrByte+0x44>)
 800f97e:	78fb      	ldrb	r3, [r7, #3]
 800f980:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800f982:	4a0a      	ldr	r2, [pc, #40]	; (800f9ac <VL53L0X_WrByte+0x44>)
 800f984:	78bb      	ldrb	r3, [r7, #2]
 800f986:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800f988:	2202      	movs	r2, #2
 800f98a:	4908      	ldr	r1, [pc, #32]	; (800f9ac <VL53L0X_WrByte+0x44>)
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f7ff ff4e 	bl	800f82e <_I2CWrite>
 800f992:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d001      	beq.n	800f99e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f99a:	23ec      	movs	r3, #236	; 0xec
 800f99c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800f99e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3710      	adds	r7, #16
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	2000b640 	.word	0x2000b640

0800f9b0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b084      	sub	sp, #16
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	70fb      	strb	r3, [r7, #3]
 800f9bc:	4613      	mov	r3, r2
 800f9be:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800f9c4:	4a0e      	ldr	r2, [pc, #56]	; (800fa00 <VL53L0X_WrWord+0x50>)
 800f9c6:	78fb      	ldrb	r3, [r7, #3]
 800f9c8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800f9ca:	883b      	ldrh	r3, [r7, #0]
 800f9cc:	0a1b      	lsrs	r3, r3, #8
 800f9ce:	b29b      	uxth	r3, r3
 800f9d0:	b2da      	uxtb	r2, r3
 800f9d2:	4b0b      	ldr	r3, [pc, #44]	; (800fa00 <VL53L0X_WrWord+0x50>)
 800f9d4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800f9d6:	883b      	ldrh	r3, [r7, #0]
 800f9d8:	b2da      	uxtb	r2, r3
 800f9da:	4b09      	ldr	r3, [pc, #36]	; (800fa00 <VL53L0X_WrWord+0x50>)
 800f9dc:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800f9de:	2203      	movs	r2, #3
 800f9e0:	4907      	ldr	r1, [pc, #28]	; (800fa00 <VL53L0X_WrWord+0x50>)
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f7ff ff23 	bl	800f82e <_I2CWrite>
 800f9e8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d001      	beq.n	800f9f4 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f9f0:	23ec      	movs	r3, #236	; 0xec
 800f9f2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800f9f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3710      	adds	r7, #16
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	2000b640 	.word	0x2000b640

0800fa04 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	4608      	mov	r0, r1
 800fa0e:	4611      	mov	r1, r2
 800fa10:	461a      	mov	r2, r3
 800fa12:	4603      	mov	r3, r0
 800fa14:	70fb      	strb	r3, [r7, #3]
 800fa16:	460b      	mov	r3, r1
 800fa18:	70bb      	strb	r3, [r7, #2]
 800fa1a:	4613      	mov	r3, r2
 800fa1c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800fa22:	f107 020e 	add.w	r2, r7, #14
 800fa26:	78fb      	ldrb	r3, [r7, #3]
 800fa28:	4619      	mov	r1, r3
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f000 f81e 	bl	800fa6c <VL53L0X_RdByte>
 800fa30:	4603      	mov	r3, r0
 800fa32:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800fa34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d110      	bne.n	800fa5e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800fa3c:	7bba      	ldrb	r2, [r7, #14]
 800fa3e:	78bb      	ldrb	r3, [r7, #2]
 800fa40:	4013      	ands	r3, r2
 800fa42:	b2da      	uxtb	r2, r3
 800fa44:	787b      	ldrb	r3, [r7, #1]
 800fa46:	4313      	orrs	r3, r2
 800fa48:	b2db      	uxtb	r3, r3
 800fa4a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800fa4c:	7bba      	ldrb	r2, [r7, #14]
 800fa4e:	78fb      	ldrb	r3, [r7, #3]
 800fa50:	4619      	mov	r1, r3
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f7ff ff88 	bl	800f968 <VL53L0X_WrByte>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	73fb      	strb	r3, [r7, #15]
 800fa5c:	e000      	b.n	800fa60 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800fa5e:	bf00      	nop
done:
    return Status;
 800fa60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	3710      	adds	r7, #16
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b086      	sub	sp, #24
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	60f8      	str	r0, [r7, #12]
 800fa74:	460b      	mov	r3, r1
 800fa76:	607a      	str	r2, [r7, #4]
 800fa78:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fa7e:	f107 030b 	add.w	r3, r7, #11
 800fa82:	2201      	movs	r2, #1
 800fa84:	4619      	mov	r1, r3
 800fa86:	68f8      	ldr	r0, [r7, #12]
 800fa88:	f7ff fed1 	bl	800f82e <_I2CWrite>
 800fa8c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d002      	beq.n	800fa9a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fa94:	23ec      	movs	r3, #236	; 0xec
 800fa96:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fa98:	e00c      	b.n	800fab4 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	6879      	ldr	r1, [r7, #4]
 800fa9e:	68f8      	ldr	r0, [r7, #12]
 800faa0:	f7ff fee4 	bl	800f86c <_I2CRead>
 800faa4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d002      	beq.n	800fab2 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800faac:	23ec      	movs	r3, #236	; 0xec
 800faae:	75fb      	strb	r3, [r7, #23]
 800fab0:	e000      	b.n	800fab4 <VL53L0X_RdByte+0x48>
    }
done:
 800fab2:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800fab4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fab8:	4618      	mov	r0, r3
 800faba:	3718      	adds	r7, #24
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b086      	sub	sp, #24
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	460b      	mov	r3, r1
 800faca:	607a      	str	r2, [r7, #4]
 800facc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800face:	2300      	movs	r3, #0
 800fad0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fad2:	f107 030b 	add.w	r3, r7, #11
 800fad6:	2201      	movs	r2, #1
 800fad8:	4619      	mov	r1, r3
 800fada:	68f8      	ldr	r0, [r7, #12]
 800fadc:	f7ff fea7 	bl	800f82e <_I2CWrite>
 800fae0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d002      	beq.n	800faee <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fae8:	23ec      	movs	r3, #236	; 0xec
 800faea:	75fb      	strb	r3, [r7, #23]
        goto done;
 800faec:	e017      	b.n	800fb1e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800faee:	2202      	movs	r2, #2
 800faf0:	490e      	ldr	r1, [pc, #56]	; (800fb2c <VL53L0X_RdWord+0x6c>)
 800faf2:	68f8      	ldr	r0, [r7, #12]
 800faf4:	f7ff feba 	bl	800f86c <_I2CRead>
 800faf8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d002      	beq.n	800fb06 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fb00:	23ec      	movs	r3, #236	; 0xec
 800fb02:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fb04:	e00b      	b.n	800fb1e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800fb06:	4b09      	ldr	r3, [pc, #36]	; (800fb2c <VL53L0X_RdWord+0x6c>)
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	021b      	lsls	r3, r3, #8
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	4b06      	ldr	r3, [pc, #24]	; (800fb2c <VL53L0X_RdWord+0x6c>)
 800fb12:	785b      	ldrb	r3, [r3, #1]
 800fb14:	b29b      	uxth	r3, r3
 800fb16:	4413      	add	r3, r2
 800fb18:	b29a      	uxth	r2, r3
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800fb1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	3718      	adds	r7, #24
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
 800fb2a:	bf00      	nop
 800fb2c:	2000b640 	.word	0x2000b640

0800fb30 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b086      	sub	sp, #24
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	460b      	mov	r3, r1
 800fb3a:	607a      	str	r2, [r7, #4]
 800fb3c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fb42:	f107 030b 	add.w	r3, r7, #11
 800fb46:	2201      	movs	r2, #1
 800fb48:	4619      	mov	r1, r3
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	f7ff fe6f 	bl	800f82e <_I2CWrite>
 800fb50:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d002      	beq.n	800fb5e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fb58:	23ec      	movs	r3, #236	; 0xec
 800fb5a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fb5c:	e01b      	b.n	800fb96 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800fb5e:	2204      	movs	r2, #4
 800fb60:	4910      	ldr	r1, [pc, #64]	; (800fba4 <VL53L0X_RdDWord+0x74>)
 800fb62:	68f8      	ldr	r0, [r7, #12]
 800fb64:	f7ff fe82 	bl	800f86c <_I2CRead>
 800fb68:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d002      	beq.n	800fb76 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fb70:	23ec      	movs	r3, #236	; 0xec
 800fb72:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fb74:	e00f      	b.n	800fb96 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800fb76:	4b0b      	ldr	r3, [pc, #44]	; (800fba4 <VL53L0X_RdDWord+0x74>)
 800fb78:	781b      	ldrb	r3, [r3, #0]
 800fb7a:	061a      	lsls	r2, r3, #24
 800fb7c:	4b09      	ldr	r3, [pc, #36]	; (800fba4 <VL53L0X_RdDWord+0x74>)
 800fb7e:	785b      	ldrb	r3, [r3, #1]
 800fb80:	041b      	lsls	r3, r3, #16
 800fb82:	441a      	add	r2, r3
 800fb84:	4b07      	ldr	r3, [pc, #28]	; (800fba4 <VL53L0X_RdDWord+0x74>)
 800fb86:	789b      	ldrb	r3, [r3, #2]
 800fb88:	021b      	lsls	r3, r3, #8
 800fb8a:	4413      	add	r3, r2
 800fb8c:	4a05      	ldr	r2, [pc, #20]	; (800fba4 <VL53L0X_RdDWord+0x74>)
 800fb8e:	78d2      	ldrb	r2, [r2, #3]
 800fb90:	441a      	add	r2, r3
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800fb96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3718      	adds	r7, #24
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop
 800fba4:	2000b640 	.word	0x2000b640

0800fba8 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800fbb4:	2002      	movs	r0, #2
 800fbb6:	f7f3 fb7b 	bl	80032b0 <HAL_Delay>
    return status;
 800fbba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
	...

0800fbc8 <__errno>:
 800fbc8:	4b01      	ldr	r3, [pc, #4]	; (800fbd0 <__errno+0x8>)
 800fbca:	6818      	ldr	r0, [r3, #0]
 800fbcc:	4770      	bx	lr
 800fbce:	bf00      	nop
 800fbd0:	200003e0 	.word	0x200003e0

0800fbd4 <__libc_init_array>:
 800fbd4:	b570      	push	{r4, r5, r6, lr}
 800fbd6:	4d0d      	ldr	r5, [pc, #52]	; (800fc0c <__libc_init_array+0x38>)
 800fbd8:	4c0d      	ldr	r4, [pc, #52]	; (800fc10 <__libc_init_array+0x3c>)
 800fbda:	1b64      	subs	r4, r4, r5
 800fbdc:	10a4      	asrs	r4, r4, #2
 800fbde:	2600      	movs	r6, #0
 800fbe0:	42a6      	cmp	r6, r4
 800fbe2:	d109      	bne.n	800fbf8 <__libc_init_array+0x24>
 800fbe4:	4d0b      	ldr	r5, [pc, #44]	; (800fc14 <__libc_init_array+0x40>)
 800fbe6:	4c0c      	ldr	r4, [pc, #48]	; (800fc18 <__libc_init_array+0x44>)
 800fbe8:	f006 f874 	bl	8015cd4 <_init>
 800fbec:	1b64      	subs	r4, r4, r5
 800fbee:	10a4      	asrs	r4, r4, #2
 800fbf0:	2600      	movs	r6, #0
 800fbf2:	42a6      	cmp	r6, r4
 800fbf4:	d105      	bne.n	800fc02 <__libc_init_array+0x2e>
 800fbf6:	bd70      	pop	{r4, r5, r6, pc}
 800fbf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbfc:	4798      	blx	r3
 800fbfe:	3601      	adds	r6, #1
 800fc00:	e7ee      	b.n	800fbe0 <__libc_init_array+0xc>
 800fc02:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc06:	4798      	blx	r3
 800fc08:	3601      	adds	r6, #1
 800fc0a:	e7f2      	b.n	800fbf2 <__libc_init_array+0x1e>
 800fc0c:	080168a0 	.word	0x080168a0
 800fc10:	080168a0 	.word	0x080168a0
 800fc14:	080168a0 	.word	0x080168a0
 800fc18:	080168a4 	.word	0x080168a4

0800fc1c <memcpy>:
 800fc1c:	440a      	add	r2, r1
 800fc1e:	4291      	cmp	r1, r2
 800fc20:	f100 33ff 	add.w	r3, r0, #4294967295
 800fc24:	d100      	bne.n	800fc28 <memcpy+0xc>
 800fc26:	4770      	bx	lr
 800fc28:	b510      	push	{r4, lr}
 800fc2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc32:	4291      	cmp	r1, r2
 800fc34:	d1f9      	bne.n	800fc2a <memcpy+0xe>
 800fc36:	bd10      	pop	{r4, pc}

0800fc38 <memset>:
 800fc38:	4402      	add	r2, r0
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	4293      	cmp	r3, r2
 800fc3e:	d100      	bne.n	800fc42 <memset+0xa>
 800fc40:	4770      	bx	lr
 800fc42:	f803 1b01 	strb.w	r1, [r3], #1
 800fc46:	e7f9      	b.n	800fc3c <memset+0x4>

0800fc48 <__cvt>:
 800fc48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc4c:	ec55 4b10 	vmov	r4, r5, d0
 800fc50:	2d00      	cmp	r5, #0
 800fc52:	460e      	mov	r6, r1
 800fc54:	4619      	mov	r1, r3
 800fc56:	462b      	mov	r3, r5
 800fc58:	bfbb      	ittet	lt
 800fc5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fc5e:	461d      	movlt	r5, r3
 800fc60:	2300      	movge	r3, #0
 800fc62:	232d      	movlt	r3, #45	; 0x2d
 800fc64:	700b      	strb	r3, [r1, #0]
 800fc66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fc6c:	4691      	mov	r9, r2
 800fc6e:	f023 0820 	bic.w	r8, r3, #32
 800fc72:	bfbc      	itt	lt
 800fc74:	4622      	movlt	r2, r4
 800fc76:	4614      	movlt	r4, r2
 800fc78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fc7c:	d005      	beq.n	800fc8a <__cvt+0x42>
 800fc7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fc82:	d100      	bne.n	800fc86 <__cvt+0x3e>
 800fc84:	3601      	adds	r6, #1
 800fc86:	2102      	movs	r1, #2
 800fc88:	e000      	b.n	800fc8c <__cvt+0x44>
 800fc8a:	2103      	movs	r1, #3
 800fc8c:	ab03      	add	r3, sp, #12
 800fc8e:	9301      	str	r3, [sp, #4]
 800fc90:	ab02      	add	r3, sp, #8
 800fc92:	9300      	str	r3, [sp, #0]
 800fc94:	ec45 4b10 	vmov	d0, r4, r5
 800fc98:	4653      	mov	r3, sl
 800fc9a:	4632      	mov	r2, r6
 800fc9c:	f001 fec4 	bl	8011a28 <_dtoa_r>
 800fca0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fca4:	4607      	mov	r7, r0
 800fca6:	d102      	bne.n	800fcae <__cvt+0x66>
 800fca8:	f019 0f01 	tst.w	r9, #1
 800fcac:	d022      	beq.n	800fcf4 <__cvt+0xac>
 800fcae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fcb2:	eb07 0906 	add.w	r9, r7, r6
 800fcb6:	d110      	bne.n	800fcda <__cvt+0x92>
 800fcb8:	783b      	ldrb	r3, [r7, #0]
 800fcba:	2b30      	cmp	r3, #48	; 0x30
 800fcbc:	d10a      	bne.n	800fcd4 <__cvt+0x8c>
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	4629      	mov	r1, r5
 800fcc6:	f7f0 ff2f 	bl	8000b28 <__aeabi_dcmpeq>
 800fcca:	b918      	cbnz	r0, 800fcd4 <__cvt+0x8c>
 800fccc:	f1c6 0601 	rsb	r6, r6, #1
 800fcd0:	f8ca 6000 	str.w	r6, [sl]
 800fcd4:	f8da 3000 	ldr.w	r3, [sl]
 800fcd8:	4499      	add	r9, r3
 800fcda:	2200      	movs	r2, #0
 800fcdc:	2300      	movs	r3, #0
 800fcde:	4620      	mov	r0, r4
 800fce0:	4629      	mov	r1, r5
 800fce2:	f7f0 ff21 	bl	8000b28 <__aeabi_dcmpeq>
 800fce6:	b108      	cbz	r0, 800fcec <__cvt+0xa4>
 800fce8:	f8cd 900c 	str.w	r9, [sp, #12]
 800fcec:	2230      	movs	r2, #48	; 0x30
 800fcee:	9b03      	ldr	r3, [sp, #12]
 800fcf0:	454b      	cmp	r3, r9
 800fcf2:	d307      	bcc.n	800fd04 <__cvt+0xbc>
 800fcf4:	9b03      	ldr	r3, [sp, #12]
 800fcf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fcf8:	1bdb      	subs	r3, r3, r7
 800fcfa:	4638      	mov	r0, r7
 800fcfc:	6013      	str	r3, [r2, #0]
 800fcfe:	b004      	add	sp, #16
 800fd00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd04:	1c59      	adds	r1, r3, #1
 800fd06:	9103      	str	r1, [sp, #12]
 800fd08:	701a      	strb	r2, [r3, #0]
 800fd0a:	e7f0      	b.n	800fcee <__cvt+0xa6>

0800fd0c <__exponent>:
 800fd0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd0e:	4603      	mov	r3, r0
 800fd10:	2900      	cmp	r1, #0
 800fd12:	bfb8      	it	lt
 800fd14:	4249      	neglt	r1, r1
 800fd16:	f803 2b02 	strb.w	r2, [r3], #2
 800fd1a:	bfb4      	ite	lt
 800fd1c:	222d      	movlt	r2, #45	; 0x2d
 800fd1e:	222b      	movge	r2, #43	; 0x2b
 800fd20:	2909      	cmp	r1, #9
 800fd22:	7042      	strb	r2, [r0, #1]
 800fd24:	dd2a      	ble.n	800fd7c <__exponent+0x70>
 800fd26:	f10d 0407 	add.w	r4, sp, #7
 800fd2a:	46a4      	mov	ip, r4
 800fd2c:	270a      	movs	r7, #10
 800fd2e:	46a6      	mov	lr, r4
 800fd30:	460a      	mov	r2, r1
 800fd32:	fb91 f6f7 	sdiv	r6, r1, r7
 800fd36:	fb07 1516 	mls	r5, r7, r6, r1
 800fd3a:	3530      	adds	r5, #48	; 0x30
 800fd3c:	2a63      	cmp	r2, #99	; 0x63
 800fd3e:	f104 34ff 	add.w	r4, r4, #4294967295
 800fd42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fd46:	4631      	mov	r1, r6
 800fd48:	dcf1      	bgt.n	800fd2e <__exponent+0x22>
 800fd4a:	3130      	adds	r1, #48	; 0x30
 800fd4c:	f1ae 0502 	sub.w	r5, lr, #2
 800fd50:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fd54:	1c44      	adds	r4, r0, #1
 800fd56:	4629      	mov	r1, r5
 800fd58:	4561      	cmp	r1, ip
 800fd5a:	d30a      	bcc.n	800fd72 <__exponent+0x66>
 800fd5c:	f10d 0209 	add.w	r2, sp, #9
 800fd60:	eba2 020e 	sub.w	r2, r2, lr
 800fd64:	4565      	cmp	r5, ip
 800fd66:	bf88      	it	hi
 800fd68:	2200      	movhi	r2, #0
 800fd6a:	4413      	add	r3, r2
 800fd6c:	1a18      	subs	r0, r3, r0
 800fd6e:	b003      	add	sp, #12
 800fd70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd76:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fd7a:	e7ed      	b.n	800fd58 <__exponent+0x4c>
 800fd7c:	2330      	movs	r3, #48	; 0x30
 800fd7e:	3130      	adds	r1, #48	; 0x30
 800fd80:	7083      	strb	r3, [r0, #2]
 800fd82:	70c1      	strb	r1, [r0, #3]
 800fd84:	1d03      	adds	r3, r0, #4
 800fd86:	e7f1      	b.n	800fd6c <__exponent+0x60>

0800fd88 <_printf_float>:
 800fd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd8c:	ed2d 8b02 	vpush	{d8}
 800fd90:	b08d      	sub	sp, #52	; 0x34
 800fd92:	460c      	mov	r4, r1
 800fd94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fd98:	4616      	mov	r6, r2
 800fd9a:	461f      	mov	r7, r3
 800fd9c:	4605      	mov	r5, r0
 800fd9e:	f002 ffb3 	bl	8012d08 <_localeconv_r>
 800fda2:	f8d0 a000 	ldr.w	sl, [r0]
 800fda6:	4650      	mov	r0, sl
 800fda8:	f7f0 fa3c 	bl	8000224 <strlen>
 800fdac:	2300      	movs	r3, #0
 800fdae:	930a      	str	r3, [sp, #40]	; 0x28
 800fdb0:	6823      	ldr	r3, [r4, #0]
 800fdb2:	9305      	str	r3, [sp, #20]
 800fdb4:	f8d8 3000 	ldr.w	r3, [r8]
 800fdb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fdbc:	3307      	adds	r3, #7
 800fdbe:	f023 0307 	bic.w	r3, r3, #7
 800fdc2:	f103 0208 	add.w	r2, r3, #8
 800fdc6:	f8c8 2000 	str.w	r2, [r8]
 800fdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fdd2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fdd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fdda:	9307      	str	r3, [sp, #28]
 800fddc:	f8cd 8018 	str.w	r8, [sp, #24]
 800fde0:	ee08 0a10 	vmov	s16, r0
 800fde4:	4b9f      	ldr	r3, [pc, #636]	; (8010064 <_printf_float+0x2dc>)
 800fde6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdea:	f04f 32ff 	mov.w	r2, #4294967295
 800fdee:	f7f0 fecd 	bl	8000b8c <__aeabi_dcmpun>
 800fdf2:	bb88      	cbnz	r0, 800fe58 <_printf_float+0xd0>
 800fdf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdf8:	4b9a      	ldr	r3, [pc, #616]	; (8010064 <_printf_float+0x2dc>)
 800fdfa:	f04f 32ff 	mov.w	r2, #4294967295
 800fdfe:	f7f0 fea7 	bl	8000b50 <__aeabi_dcmple>
 800fe02:	bb48      	cbnz	r0, 800fe58 <_printf_float+0xd0>
 800fe04:	2200      	movs	r2, #0
 800fe06:	2300      	movs	r3, #0
 800fe08:	4640      	mov	r0, r8
 800fe0a:	4649      	mov	r1, r9
 800fe0c:	f7f0 fe96 	bl	8000b3c <__aeabi_dcmplt>
 800fe10:	b110      	cbz	r0, 800fe18 <_printf_float+0x90>
 800fe12:	232d      	movs	r3, #45	; 0x2d
 800fe14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe18:	4b93      	ldr	r3, [pc, #588]	; (8010068 <_printf_float+0x2e0>)
 800fe1a:	4894      	ldr	r0, [pc, #592]	; (801006c <_printf_float+0x2e4>)
 800fe1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fe20:	bf94      	ite	ls
 800fe22:	4698      	movls	r8, r3
 800fe24:	4680      	movhi	r8, r0
 800fe26:	2303      	movs	r3, #3
 800fe28:	6123      	str	r3, [r4, #16]
 800fe2a:	9b05      	ldr	r3, [sp, #20]
 800fe2c:	f023 0204 	bic.w	r2, r3, #4
 800fe30:	6022      	str	r2, [r4, #0]
 800fe32:	f04f 0900 	mov.w	r9, #0
 800fe36:	9700      	str	r7, [sp, #0]
 800fe38:	4633      	mov	r3, r6
 800fe3a:	aa0b      	add	r2, sp, #44	; 0x2c
 800fe3c:	4621      	mov	r1, r4
 800fe3e:	4628      	mov	r0, r5
 800fe40:	f000 f9d8 	bl	80101f4 <_printf_common>
 800fe44:	3001      	adds	r0, #1
 800fe46:	f040 8090 	bne.w	800ff6a <_printf_float+0x1e2>
 800fe4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fe4e:	b00d      	add	sp, #52	; 0x34
 800fe50:	ecbd 8b02 	vpop	{d8}
 800fe54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe58:	4642      	mov	r2, r8
 800fe5a:	464b      	mov	r3, r9
 800fe5c:	4640      	mov	r0, r8
 800fe5e:	4649      	mov	r1, r9
 800fe60:	f7f0 fe94 	bl	8000b8c <__aeabi_dcmpun>
 800fe64:	b140      	cbz	r0, 800fe78 <_printf_float+0xf0>
 800fe66:	464b      	mov	r3, r9
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	bfbc      	itt	lt
 800fe6c:	232d      	movlt	r3, #45	; 0x2d
 800fe6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fe72:	487f      	ldr	r0, [pc, #508]	; (8010070 <_printf_float+0x2e8>)
 800fe74:	4b7f      	ldr	r3, [pc, #508]	; (8010074 <_printf_float+0x2ec>)
 800fe76:	e7d1      	b.n	800fe1c <_printf_float+0x94>
 800fe78:	6863      	ldr	r3, [r4, #4]
 800fe7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fe7e:	9206      	str	r2, [sp, #24]
 800fe80:	1c5a      	adds	r2, r3, #1
 800fe82:	d13f      	bne.n	800ff04 <_printf_float+0x17c>
 800fe84:	2306      	movs	r3, #6
 800fe86:	6063      	str	r3, [r4, #4]
 800fe88:	9b05      	ldr	r3, [sp, #20]
 800fe8a:	6861      	ldr	r1, [r4, #4]
 800fe8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fe90:	2300      	movs	r3, #0
 800fe92:	9303      	str	r3, [sp, #12]
 800fe94:	ab0a      	add	r3, sp, #40	; 0x28
 800fe96:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fe9a:	ab09      	add	r3, sp, #36	; 0x24
 800fe9c:	ec49 8b10 	vmov	d0, r8, r9
 800fea0:	9300      	str	r3, [sp, #0]
 800fea2:	6022      	str	r2, [r4, #0]
 800fea4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fea8:	4628      	mov	r0, r5
 800feaa:	f7ff fecd 	bl	800fc48 <__cvt>
 800feae:	9b06      	ldr	r3, [sp, #24]
 800feb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800feb2:	2b47      	cmp	r3, #71	; 0x47
 800feb4:	4680      	mov	r8, r0
 800feb6:	d108      	bne.n	800feca <_printf_float+0x142>
 800feb8:	1cc8      	adds	r0, r1, #3
 800feba:	db02      	blt.n	800fec2 <_printf_float+0x13a>
 800febc:	6863      	ldr	r3, [r4, #4]
 800febe:	4299      	cmp	r1, r3
 800fec0:	dd41      	ble.n	800ff46 <_printf_float+0x1be>
 800fec2:	f1ab 0b02 	sub.w	fp, fp, #2
 800fec6:	fa5f fb8b 	uxtb.w	fp, fp
 800feca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fece:	d820      	bhi.n	800ff12 <_printf_float+0x18a>
 800fed0:	3901      	subs	r1, #1
 800fed2:	465a      	mov	r2, fp
 800fed4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fed8:	9109      	str	r1, [sp, #36]	; 0x24
 800feda:	f7ff ff17 	bl	800fd0c <__exponent>
 800fede:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fee0:	1813      	adds	r3, r2, r0
 800fee2:	2a01      	cmp	r2, #1
 800fee4:	4681      	mov	r9, r0
 800fee6:	6123      	str	r3, [r4, #16]
 800fee8:	dc02      	bgt.n	800fef0 <_printf_float+0x168>
 800feea:	6822      	ldr	r2, [r4, #0]
 800feec:	07d2      	lsls	r2, r2, #31
 800feee:	d501      	bpl.n	800fef4 <_printf_float+0x16c>
 800fef0:	3301      	adds	r3, #1
 800fef2:	6123      	str	r3, [r4, #16]
 800fef4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d09c      	beq.n	800fe36 <_printf_float+0xae>
 800fefc:	232d      	movs	r3, #45	; 0x2d
 800fefe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff02:	e798      	b.n	800fe36 <_printf_float+0xae>
 800ff04:	9a06      	ldr	r2, [sp, #24]
 800ff06:	2a47      	cmp	r2, #71	; 0x47
 800ff08:	d1be      	bne.n	800fe88 <_printf_float+0x100>
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d1bc      	bne.n	800fe88 <_printf_float+0x100>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	e7b9      	b.n	800fe86 <_printf_float+0xfe>
 800ff12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ff16:	d118      	bne.n	800ff4a <_printf_float+0x1c2>
 800ff18:	2900      	cmp	r1, #0
 800ff1a:	6863      	ldr	r3, [r4, #4]
 800ff1c:	dd0b      	ble.n	800ff36 <_printf_float+0x1ae>
 800ff1e:	6121      	str	r1, [r4, #16]
 800ff20:	b913      	cbnz	r3, 800ff28 <_printf_float+0x1a0>
 800ff22:	6822      	ldr	r2, [r4, #0]
 800ff24:	07d0      	lsls	r0, r2, #31
 800ff26:	d502      	bpl.n	800ff2e <_printf_float+0x1a6>
 800ff28:	3301      	adds	r3, #1
 800ff2a:	440b      	add	r3, r1
 800ff2c:	6123      	str	r3, [r4, #16]
 800ff2e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ff30:	f04f 0900 	mov.w	r9, #0
 800ff34:	e7de      	b.n	800fef4 <_printf_float+0x16c>
 800ff36:	b913      	cbnz	r3, 800ff3e <_printf_float+0x1b6>
 800ff38:	6822      	ldr	r2, [r4, #0]
 800ff3a:	07d2      	lsls	r2, r2, #31
 800ff3c:	d501      	bpl.n	800ff42 <_printf_float+0x1ba>
 800ff3e:	3302      	adds	r3, #2
 800ff40:	e7f4      	b.n	800ff2c <_printf_float+0x1a4>
 800ff42:	2301      	movs	r3, #1
 800ff44:	e7f2      	b.n	800ff2c <_printf_float+0x1a4>
 800ff46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ff4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff4c:	4299      	cmp	r1, r3
 800ff4e:	db05      	blt.n	800ff5c <_printf_float+0x1d4>
 800ff50:	6823      	ldr	r3, [r4, #0]
 800ff52:	6121      	str	r1, [r4, #16]
 800ff54:	07d8      	lsls	r0, r3, #31
 800ff56:	d5ea      	bpl.n	800ff2e <_printf_float+0x1a6>
 800ff58:	1c4b      	adds	r3, r1, #1
 800ff5a:	e7e7      	b.n	800ff2c <_printf_float+0x1a4>
 800ff5c:	2900      	cmp	r1, #0
 800ff5e:	bfd4      	ite	le
 800ff60:	f1c1 0202 	rsble	r2, r1, #2
 800ff64:	2201      	movgt	r2, #1
 800ff66:	4413      	add	r3, r2
 800ff68:	e7e0      	b.n	800ff2c <_printf_float+0x1a4>
 800ff6a:	6823      	ldr	r3, [r4, #0]
 800ff6c:	055a      	lsls	r2, r3, #21
 800ff6e:	d407      	bmi.n	800ff80 <_printf_float+0x1f8>
 800ff70:	6923      	ldr	r3, [r4, #16]
 800ff72:	4642      	mov	r2, r8
 800ff74:	4631      	mov	r1, r6
 800ff76:	4628      	mov	r0, r5
 800ff78:	47b8      	blx	r7
 800ff7a:	3001      	adds	r0, #1
 800ff7c:	d12c      	bne.n	800ffd8 <_printf_float+0x250>
 800ff7e:	e764      	b.n	800fe4a <_printf_float+0xc2>
 800ff80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ff84:	f240 80e0 	bls.w	8010148 <_printf_float+0x3c0>
 800ff88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	2300      	movs	r3, #0
 800ff90:	f7f0 fdca 	bl	8000b28 <__aeabi_dcmpeq>
 800ff94:	2800      	cmp	r0, #0
 800ff96:	d034      	beq.n	8010002 <_printf_float+0x27a>
 800ff98:	4a37      	ldr	r2, [pc, #220]	; (8010078 <_printf_float+0x2f0>)
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	4631      	mov	r1, r6
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	47b8      	blx	r7
 800ffa2:	3001      	adds	r0, #1
 800ffa4:	f43f af51 	beq.w	800fe4a <_printf_float+0xc2>
 800ffa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ffac:	429a      	cmp	r2, r3
 800ffae:	db02      	blt.n	800ffb6 <_printf_float+0x22e>
 800ffb0:	6823      	ldr	r3, [r4, #0]
 800ffb2:	07d8      	lsls	r0, r3, #31
 800ffb4:	d510      	bpl.n	800ffd8 <_printf_float+0x250>
 800ffb6:	ee18 3a10 	vmov	r3, s16
 800ffba:	4652      	mov	r2, sl
 800ffbc:	4631      	mov	r1, r6
 800ffbe:	4628      	mov	r0, r5
 800ffc0:	47b8      	blx	r7
 800ffc2:	3001      	adds	r0, #1
 800ffc4:	f43f af41 	beq.w	800fe4a <_printf_float+0xc2>
 800ffc8:	f04f 0800 	mov.w	r8, #0
 800ffcc:	f104 091a 	add.w	r9, r4, #26
 800ffd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffd2:	3b01      	subs	r3, #1
 800ffd4:	4543      	cmp	r3, r8
 800ffd6:	dc09      	bgt.n	800ffec <_printf_float+0x264>
 800ffd8:	6823      	ldr	r3, [r4, #0]
 800ffda:	079b      	lsls	r3, r3, #30
 800ffdc:	f100 8105 	bmi.w	80101ea <_printf_float+0x462>
 800ffe0:	68e0      	ldr	r0, [r4, #12]
 800ffe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffe4:	4298      	cmp	r0, r3
 800ffe6:	bfb8      	it	lt
 800ffe8:	4618      	movlt	r0, r3
 800ffea:	e730      	b.n	800fe4e <_printf_float+0xc6>
 800ffec:	2301      	movs	r3, #1
 800ffee:	464a      	mov	r2, r9
 800fff0:	4631      	mov	r1, r6
 800fff2:	4628      	mov	r0, r5
 800fff4:	47b8      	blx	r7
 800fff6:	3001      	adds	r0, #1
 800fff8:	f43f af27 	beq.w	800fe4a <_printf_float+0xc2>
 800fffc:	f108 0801 	add.w	r8, r8, #1
 8010000:	e7e6      	b.n	800ffd0 <_printf_float+0x248>
 8010002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010004:	2b00      	cmp	r3, #0
 8010006:	dc39      	bgt.n	801007c <_printf_float+0x2f4>
 8010008:	4a1b      	ldr	r2, [pc, #108]	; (8010078 <_printf_float+0x2f0>)
 801000a:	2301      	movs	r3, #1
 801000c:	4631      	mov	r1, r6
 801000e:	4628      	mov	r0, r5
 8010010:	47b8      	blx	r7
 8010012:	3001      	adds	r0, #1
 8010014:	f43f af19 	beq.w	800fe4a <_printf_float+0xc2>
 8010018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801001c:	4313      	orrs	r3, r2
 801001e:	d102      	bne.n	8010026 <_printf_float+0x29e>
 8010020:	6823      	ldr	r3, [r4, #0]
 8010022:	07d9      	lsls	r1, r3, #31
 8010024:	d5d8      	bpl.n	800ffd8 <_printf_float+0x250>
 8010026:	ee18 3a10 	vmov	r3, s16
 801002a:	4652      	mov	r2, sl
 801002c:	4631      	mov	r1, r6
 801002e:	4628      	mov	r0, r5
 8010030:	47b8      	blx	r7
 8010032:	3001      	adds	r0, #1
 8010034:	f43f af09 	beq.w	800fe4a <_printf_float+0xc2>
 8010038:	f04f 0900 	mov.w	r9, #0
 801003c:	f104 0a1a 	add.w	sl, r4, #26
 8010040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010042:	425b      	negs	r3, r3
 8010044:	454b      	cmp	r3, r9
 8010046:	dc01      	bgt.n	801004c <_printf_float+0x2c4>
 8010048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801004a:	e792      	b.n	800ff72 <_printf_float+0x1ea>
 801004c:	2301      	movs	r3, #1
 801004e:	4652      	mov	r2, sl
 8010050:	4631      	mov	r1, r6
 8010052:	4628      	mov	r0, r5
 8010054:	47b8      	blx	r7
 8010056:	3001      	adds	r0, #1
 8010058:	f43f aef7 	beq.w	800fe4a <_printf_float+0xc2>
 801005c:	f109 0901 	add.w	r9, r9, #1
 8010060:	e7ee      	b.n	8010040 <_printf_float+0x2b8>
 8010062:	bf00      	nop
 8010064:	7fefffff 	.word	0x7fefffff
 8010068:	08016358 	.word	0x08016358
 801006c:	0801635c 	.word	0x0801635c
 8010070:	08016364 	.word	0x08016364
 8010074:	08016360 	.word	0x08016360
 8010078:	080167f1 	.word	0x080167f1
 801007c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801007e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010080:	429a      	cmp	r2, r3
 8010082:	bfa8      	it	ge
 8010084:	461a      	movge	r2, r3
 8010086:	2a00      	cmp	r2, #0
 8010088:	4691      	mov	r9, r2
 801008a:	dc37      	bgt.n	80100fc <_printf_float+0x374>
 801008c:	f04f 0b00 	mov.w	fp, #0
 8010090:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010094:	f104 021a 	add.w	r2, r4, #26
 8010098:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801009a:	9305      	str	r3, [sp, #20]
 801009c:	eba3 0309 	sub.w	r3, r3, r9
 80100a0:	455b      	cmp	r3, fp
 80100a2:	dc33      	bgt.n	801010c <_printf_float+0x384>
 80100a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80100a8:	429a      	cmp	r2, r3
 80100aa:	db3b      	blt.n	8010124 <_printf_float+0x39c>
 80100ac:	6823      	ldr	r3, [r4, #0]
 80100ae:	07da      	lsls	r2, r3, #31
 80100b0:	d438      	bmi.n	8010124 <_printf_float+0x39c>
 80100b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100b4:	9a05      	ldr	r2, [sp, #20]
 80100b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80100b8:	1a9a      	subs	r2, r3, r2
 80100ba:	eba3 0901 	sub.w	r9, r3, r1
 80100be:	4591      	cmp	r9, r2
 80100c0:	bfa8      	it	ge
 80100c2:	4691      	movge	r9, r2
 80100c4:	f1b9 0f00 	cmp.w	r9, #0
 80100c8:	dc35      	bgt.n	8010136 <_printf_float+0x3ae>
 80100ca:	f04f 0800 	mov.w	r8, #0
 80100ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80100d2:	f104 0a1a 	add.w	sl, r4, #26
 80100d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80100da:	1a9b      	subs	r3, r3, r2
 80100dc:	eba3 0309 	sub.w	r3, r3, r9
 80100e0:	4543      	cmp	r3, r8
 80100e2:	f77f af79 	ble.w	800ffd8 <_printf_float+0x250>
 80100e6:	2301      	movs	r3, #1
 80100e8:	4652      	mov	r2, sl
 80100ea:	4631      	mov	r1, r6
 80100ec:	4628      	mov	r0, r5
 80100ee:	47b8      	blx	r7
 80100f0:	3001      	adds	r0, #1
 80100f2:	f43f aeaa 	beq.w	800fe4a <_printf_float+0xc2>
 80100f6:	f108 0801 	add.w	r8, r8, #1
 80100fa:	e7ec      	b.n	80100d6 <_printf_float+0x34e>
 80100fc:	4613      	mov	r3, r2
 80100fe:	4631      	mov	r1, r6
 8010100:	4642      	mov	r2, r8
 8010102:	4628      	mov	r0, r5
 8010104:	47b8      	blx	r7
 8010106:	3001      	adds	r0, #1
 8010108:	d1c0      	bne.n	801008c <_printf_float+0x304>
 801010a:	e69e      	b.n	800fe4a <_printf_float+0xc2>
 801010c:	2301      	movs	r3, #1
 801010e:	4631      	mov	r1, r6
 8010110:	4628      	mov	r0, r5
 8010112:	9205      	str	r2, [sp, #20]
 8010114:	47b8      	blx	r7
 8010116:	3001      	adds	r0, #1
 8010118:	f43f ae97 	beq.w	800fe4a <_printf_float+0xc2>
 801011c:	9a05      	ldr	r2, [sp, #20]
 801011e:	f10b 0b01 	add.w	fp, fp, #1
 8010122:	e7b9      	b.n	8010098 <_printf_float+0x310>
 8010124:	ee18 3a10 	vmov	r3, s16
 8010128:	4652      	mov	r2, sl
 801012a:	4631      	mov	r1, r6
 801012c:	4628      	mov	r0, r5
 801012e:	47b8      	blx	r7
 8010130:	3001      	adds	r0, #1
 8010132:	d1be      	bne.n	80100b2 <_printf_float+0x32a>
 8010134:	e689      	b.n	800fe4a <_printf_float+0xc2>
 8010136:	9a05      	ldr	r2, [sp, #20]
 8010138:	464b      	mov	r3, r9
 801013a:	4442      	add	r2, r8
 801013c:	4631      	mov	r1, r6
 801013e:	4628      	mov	r0, r5
 8010140:	47b8      	blx	r7
 8010142:	3001      	adds	r0, #1
 8010144:	d1c1      	bne.n	80100ca <_printf_float+0x342>
 8010146:	e680      	b.n	800fe4a <_printf_float+0xc2>
 8010148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801014a:	2a01      	cmp	r2, #1
 801014c:	dc01      	bgt.n	8010152 <_printf_float+0x3ca>
 801014e:	07db      	lsls	r3, r3, #31
 8010150:	d538      	bpl.n	80101c4 <_printf_float+0x43c>
 8010152:	2301      	movs	r3, #1
 8010154:	4642      	mov	r2, r8
 8010156:	4631      	mov	r1, r6
 8010158:	4628      	mov	r0, r5
 801015a:	47b8      	blx	r7
 801015c:	3001      	adds	r0, #1
 801015e:	f43f ae74 	beq.w	800fe4a <_printf_float+0xc2>
 8010162:	ee18 3a10 	vmov	r3, s16
 8010166:	4652      	mov	r2, sl
 8010168:	4631      	mov	r1, r6
 801016a:	4628      	mov	r0, r5
 801016c:	47b8      	blx	r7
 801016e:	3001      	adds	r0, #1
 8010170:	f43f ae6b 	beq.w	800fe4a <_printf_float+0xc2>
 8010174:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010178:	2200      	movs	r2, #0
 801017a:	2300      	movs	r3, #0
 801017c:	f7f0 fcd4 	bl	8000b28 <__aeabi_dcmpeq>
 8010180:	b9d8      	cbnz	r0, 80101ba <_printf_float+0x432>
 8010182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010184:	f108 0201 	add.w	r2, r8, #1
 8010188:	3b01      	subs	r3, #1
 801018a:	4631      	mov	r1, r6
 801018c:	4628      	mov	r0, r5
 801018e:	47b8      	blx	r7
 8010190:	3001      	adds	r0, #1
 8010192:	d10e      	bne.n	80101b2 <_printf_float+0x42a>
 8010194:	e659      	b.n	800fe4a <_printf_float+0xc2>
 8010196:	2301      	movs	r3, #1
 8010198:	4652      	mov	r2, sl
 801019a:	4631      	mov	r1, r6
 801019c:	4628      	mov	r0, r5
 801019e:	47b8      	blx	r7
 80101a0:	3001      	adds	r0, #1
 80101a2:	f43f ae52 	beq.w	800fe4a <_printf_float+0xc2>
 80101a6:	f108 0801 	add.w	r8, r8, #1
 80101aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101ac:	3b01      	subs	r3, #1
 80101ae:	4543      	cmp	r3, r8
 80101b0:	dcf1      	bgt.n	8010196 <_printf_float+0x40e>
 80101b2:	464b      	mov	r3, r9
 80101b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80101b8:	e6dc      	b.n	800ff74 <_printf_float+0x1ec>
 80101ba:	f04f 0800 	mov.w	r8, #0
 80101be:	f104 0a1a 	add.w	sl, r4, #26
 80101c2:	e7f2      	b.n	80101aa <_printf_float+0x422>
 80101c4:	2301      	movs	r3, #1
 80101c6:	4642      	mov	r2, r8
 80101c8:	e7df      	b.n	801018a <_printf_float+0x402>
 80101ca:	2301      	movs	r3, #1
 80101cc:	464a      	mov	r2, r9
 80101ce:	4631      	mov	r1, r6
 80101d0:	4628      	mov	r0, r5
 80101d2:	47b8      	blx	r7
 80101d4:	3001      	adds	r0, #1
 80101d6:	f43f ae38 	beq.w	800fe4a <_printf_float+0xc2>
 80101da:	f108 0801 	add.w	r8, r8, #1
 80101de:	68e3      	ldr	r3, [r4, #12]
 80101e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80101e2:	1a5b      	subs	r3, r3, r1
 80101e4:	4543      	cmp	r3, r8
 80101e6:	dcf0      	bgt.n	80101ca <_printf_float+0x442>
 80101e8:	e6fa      	b.n	800ffe0 <_printf_float+0x258>
 80101ea:	f04f 0800 	mov.w	r8, #0
 80101ee:	f104 0919 	add.w	r9, r4, #25
 80101f2:	e7f4      	b.n	80101de <_printf_float+0x456>

080101f4 <_printf_common>:
 80101f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101f8:	4616      	mov	r6, r2
 80101fa:	4699      	mov	r9, r3
 80101fc:	688a      	ldr	r2, [r1, #8]
 80101fe:	690b      	ldr	r3, [r1, #16]
 8010200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010204:	4293      	cmp	r3, r2
 8010206:	bfb8      	it	lt
 8010208:	4613      	movlt	r3, r2
 801020a:	6033      	str	r3, [r6, #0]
 801020c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010210:	4607      	mov	r7, r0
 8010212:	460c      	mov	r4, r1
 8010214:	b10a      	cbz	r2, 801021a <_printf_common+0x26>
 8010216:	3301      	adds	r3, #1
 8010218:	6033      	str	r3, [r6, #0]
 801021a:	6823      	ldr	r3, [r4, #0]
 801021c:	0699      	lsls	r1, r3, #26
 801021e:	bf42      	ittt	mi
 8010220:	6833      	ldrmi	r3, [r6, #0]
 8010222:	3302      	addmi	r3, #2
 8010224:	6033      	strmi	r3, [r6, #0]
 8010226:	6825      	ldr	r5, [r4, #0]
 8010228:	f015 0506 	ands.w	r5, r5, #6
 801022c:	d106      	bne.n	801023c <_printf_common+0x48>
 801022e:	f104 0a19 	add.w	sl, r4, #25
 8010232:	68e3      	ldr	r3, [r4, #12]
 8010234:	6832      	ldr	r2, [r6, #0]
 8010236:	1a9b      	subs	r3, r3, r2
 8010238:	42ab      	cmp	r3, r5
 801023a:	dc26      	bgt.n	801028a <_printf_common+0x96>
 801023c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010240:	1e13      	subs	r3, r2, #0
 8010242:	6822      	ldr	r2, [r4, #0]
 8010244:	bf18      	it	ne
 8010246:	2301      	movne	r3, #1
 8010248:	0692      	lsls	r2, r2, #26
 801024a:	d42b      	bmi.n	80102a4 <_printf_common+0xb0>
 801024c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010250:	4649      	mov	r1, r9
 8010252:	4638      	mov	r0, r7
 8010254:	47c0      	blx	r8
 8010256:	3001      	adds	r0, #1
 8010258:	d01e      	beq.n	8010298 <_printf_common+0xa4>
 801025a:	6823      	ldr	r3, [r4, #0]
 801025c:	68e5      	ldr	r5, [r4, #12]
 801025e:	6832      	ldr	r2, [r6, #0]
 8010260:	f003 0306 	and.w	r3, r3, #6
 8010264:	2b04      	cmp	r3, #4
 8010266:	bf08      	it	eq
 8010268:	1aad      	subeq	r5, r5, r2
 801026a:	68a3      	ldr	r3, [r4, #8]
 801026c:	6922      	ldr	r2, [r4, #16]
 801026e:	bf0c      	ite	eq
 8010270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010274:	2500      	movne	r5, #0
 8010276:	4293      	cmp	r3, r2
 8010278:	bfc4      	itt	gt
 801027a:	1a9b      	subgt	r3, r3, r2
 801027c:	18ed      	addgt	r5, r5, r3
 801027e:	2600      	movs	r6, #0
 8010280:	341a      	adds	r4, #26
 8010282:	42b5      	cmp	r5, r6
 8010284:	d11a      	bne.n	80102bc <_printf_common+0xc8>
 8010286:	2000      	movs	r0, #0
 8010288:	e008      	b.n	801029c <_printf_common+0xa8>
 801028a:	2301      	movs	r3, #1
 801028c:	4652      	mov	r2, sl
 801028e:	4649      	mov	r1, r9
 8010290:	4638      	mov	r0, r7
 8010292:	47c0      	blx	r8
 8010294:	3001      	adds	r0, #1
 8010296:	d103      	bne.n	80102a0 <_printf_common+0xac>
 8010298:	f04f 30ff 	mov.w	r0, #4294967295
 801029c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102a0:	3501      	adds	r5, #1
 80102a2:	e7c6      	b.n	8010232 <_printf_common+0x3e>
 80102a4:	18e1      	adds	r1, r4, r3
 80102a6:	1c5a      	adds	r2, r3, #1
 80102a8:	2030      	movs	r0, #48	; 0x30
 80102aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80102ae:	4422      	add	r2, r4
 80102b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80102b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80102b8:	3302      	adds	r3, #2
 80102ba:	e7c7      	b.n	801024c <_printf_common+0x58>
 80102bc:	2301      	movs	r3, #1
 80102be:	4622      	mov	r2, r4
 80102c0:	4649      	mov	r1, r9
 80102c2:	4638      	mov	r0, r7
 80102c4:	47c0      	blx	r8
 80102c6:	3001      	adds	r0, #1
 80102c8:	d0e6      	beq.n	8010298 <_printf_common+0xa4>
 80102ca:	3601      	adds	r6, #1
 80102cc:	e7d9      	b.n	8010282 <_printf_common+0x8e>
	...

080102d0 <_printf_i>:
 80102d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80102d4:	7e0f      	ldrb	r7, [r1, #24]
 80102d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80102d8:	2f78      	cmp	r7, #120	; 0x78
 80102da:	4691      	mov	r9, r2
 80102dc:	4680      	mov	r8, r0
 80102de:	460c      	mov	r4, r1
 80102e0:	469a      	mov	sl, r3
 80102e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80102e6:	d807      	bhi.n	80102f8 <_printf_i+0x28>
 80102e8:	2f62      	cmp	r7, #98	; 0x62
 80102ea:	d80a      	bhi.n	8010302 <_printf_i+0x32>
 80102ec:	2f00      	cmp	r7, #0
 80102ee:	f000 80d8 	beq.w	80104a2 <_printf_i+0x1d2>
 80102f2:	2f58      	cmp	r7, #88	; 0x58
 80102f4:	f000 80a3 	beq.w	801043e <_printf_i+0x16e>
 80102f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80102fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010300:	e03a      	b.n	8010378 <_printf_i+0xa8>
 8010302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010306:	2b15      	cmp	r3, #21
 8010308:	d8f6      	bhi.n	80102f8 <_printf_i+0x28>
 801030a:	a101      	add	r1, pc, #4	; (adr r1, 8010310 <_printf_i+0x40>)
 801030c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010310:	08010369 	.word	0x08010369
 8010314:	0801037d 	.word	0x0801037d
 8010318:	080102f9 	.word	0x080102f9
 801031c:	080102f9 	.word	0x080102f9
 8010320:	080102f9 	.word	0x080102f9
 8010324:	080102f9 	.word	0x080102f9
 8010328:	0801037d 	.word	0x0801037d
 801032c:	080102f9 	.word	0x080102f9
 8010330:	080102f9 	.word	0x080102f9
 8010334:	080102f9 	.word	0x080102f9
 8010338:	080102f9 	.word	0x080102f9
 801033c:	08010489 	.word	0x08010489
 8010340:	080103ad 	.word	0x080103ad
 8010344:	0801046b 	.word	0x0801046b
 8010348:	080102f9 	.word	0x080102f9
 801034c:	080102f9 	.word	0x080102f9
 8010350:	080104ab 	.word	0x080104ab
 8010354:	080102f9 	.word	0x080102f9
 8010358:	080103ad 	.word	0x080103ad
 801035c:	080102f9 	.word	0x080102f9
 8010360:	080102f9 	.word	0x080102f9
 8010364:	08010473 	.word	0x08010473
 8010368:	682b      	ldr	r3, [r5, #0]
 801036a:	1d1a      	adds	r2, r3, #4
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	602a      	str	r2, [r5, #0]
 8010370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010378:	2301      	movs	r3, #1
 801037a:	e0a3      	b.n	80104c4 <_printf_i+0x1f4>
 801037c:	6820      	ldr	r0, [r4, #0]
 801037e:	6829      	ldr	r1, [r5, #0]
 8010380:	0606      	lsls	r6, r0, #24
 8010382:	f101 0304 	add.w	r3, r1, #4
 8010386:	d50a      	bpl.n	801039e <_printf_i+0xce>
 8010388:	680e      	ldr	r6, [r1, #0]
 801038a:	602b      	str	r3, [r5, #0]
 801038c:	2e00      	cmp	r6, #0
 801038e:	da03      	bge.n	8010398 <_printf_i+0xc8>
 8010390:	232d      	movs	r3, #45	; 0x2d
 8010392:	4276      	negs	r6, r6
 8010394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010398:	485e      	ldr	r0, [pc, #376]	; (8010514 <_printf_i+0x244>)
 801039a:	230a      	movs	r3, #10
 801039c:	e019      	b.n	80103d2 <_printf_i+0x102>
 801039e:	680e      	ldr	r6, [r1, #0]
 80103a0:	602b      	str	r3, [r5, #0]
 80103a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80103a6:	bf18      	it	ne
 80103a8:	b236      	sxthne	r6, r6
 80103aa:	e7ef      	b.n	801038c <_printf_i+0xbc>
 80103ac:	682b      	ldr	r3, [r5, #0]
 80103ae:	6820      	ldr	r0, [r4, #0]
 80103b0:	1d19      	adds	r1, r3, #4
 80103b2:	6029      	str	r1, [r5, #0]
 80103b4:	0601      	lsls	r1, r0, #24
 80103b6:	d501      	bpl.n	80103bc <_printf_i+0xec>
 80103b8:	681e      	ldr	r6, [r3, #0]
 80103ba:	e002      	b.n	80103c2 <_printf_i+0xf2>
 80103bc:	0646      	lsls	r6, r0, #25
 80103be:	d5fb      	bpl.n	80103b8 <_printf_i+0xe8>
 80103c0:	881e      	ldrh	r6, [r3, #0]
 80103c2:	4854      	ldr	r0, [pc, #336]	; (8010514 <_printf_i+0x244>)
 80103c4:	2f6f      	cmp	r7, #111	; 0x6f
 80103c6:	bf0c      	ite	eq
 80103c8:	2308      	moveq	r3, #8
 80103ca:	230a      	movne	r3, #10
 80103cc:	2100      	movs	r1, #0
 80103ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80103d2:	6865      	ldr	r5, [r4, #4]
 80103d4:	60a5      	str	r5, [r4, #8]
 80103d6:	2d00      	cmp	r5, #0
 80103d8:	bfa2      	ittt	ge
 80103da:	6821      	ldrge	r1, [r4, #0]
 80103dc:	f021 0104 	bicge.w	r1, r1, #4
 80103e0:	6021      	strge	r1, [r4, #0]
 80103e2:	b90e      	cbnz	r6, 80103e8 <_printf_i+0x118>
 80103e4:	2d00      	cmp	r5, #0
 80103e6:	d04d      	beq.n	8010484 <_printf_i+0x1b4>
 80103e8:	4615      	mov	r5, r2
 80103ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80103ee:	fb03 6711 	mls	r7, r3, r1, r6
 80103f2:	5dc7      	ldrb	r7, [r0, r7]
 80103f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80103f8:	4637      	mov	r7, r6
 80103fa:	42bb      	cmp	r3, r7
 80103fc:	460e      	mov	r6, r1
 80103fe:	d9f4      	bls.n	80103ea <_printf_i+0x11a>
 8010400:	2b08      	cmp	r3, #8
 8010402:	d10b      	bne.n	801041c <_printf_i+0x14c>
 8010404:	6823      	ldr	r3, [r4, #0]
 8010406:	07de      	lsls	r6, r3, #31
 8010408:	d508      	bpl.n	801041c <_printf_i+0x14c>
 801040a:	6923      	ldr	r3, [r4, #16]
 801040c:	6861      	ldr	r1, [r4, #4]
 801040e:	4299      	cmp	r1, r3
 8010410:	bfde      	ittt	le
 8010412:	2330      	movle	r3, #48	; 0x30
 8010414:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010418:	f105 35ff 	addle.w	r5, r5, #4294967295
 801041c:	1b52      	subs	r2, r2, r5
 801041e:	6122      	str	r2, [r4, #16]
 8010420:	f8cd a000 	str.w	sl, [sp]
 8010424:	464b      	mov	r3, r9
 8010426:	aa03      	add	r2, sp, #12
 8010428:	4621      	mov	r1, r4
 801042a:	4640      	mov	r0, r8
 801042c:	f7ff fee2 	bl	80101f4 <_printf_common>
 8010430:	3001      	adds	r0, #1
 8010432:	d14c      	bne.n	80104ce <_printf_i+0x1fe>
 8010434:	f04f 30ff 	mov.w	r0, #4294967295
 8010438:	b004      	add	sp, #16
 801043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801043e:	4835      	ldr	r0, [pc, #212]	; (8010514 <_printf_i+0x244>)
 8010440:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010444:	6829      	ldr	r1, [r5, #0]
 8010446:	6823      	ldr	r3, [r4, #0]
 8010448:	f851 6b04 	ldr.w	r6, [r1], #4
 801044c:	6029      	str	r1, [r5, #0]
 801044e:	061d      	lsls	r5, r3, #24
 8010450:	d514      	bpl.n	801047c <_printf_i+0x1ac>
 8010452:	07df      	lsls	r7, r3, #31
 8010454:	bf44      	itt	mi
 8010456:	f043 0320 	orrmi.w	r3, r3, #32
 801045a:	6023      	strmi	r3, [r4, #0]
 801045c:	b91e      	cbnz	r6, 8010466 <_printf_i+0x196>
 801045e:	6823      	ldr	r3, [r4, #0]
 8010460:	f023 0320 	bic.w	r3, r3, #32
 8010464:	6023      	str	r3, [r4, #0]
 8010466:	2310      	movs	r3, #16
 8010468:	e7b0      	b.n	80103cc <_printf_i+0xfc>
 801046a:	6823      	ldr	r3, [r4, #0]
 801046c:	f043 0320 	orr.w	r3, r3, #32
 8010470:	6023      	str	r3, [r4, #0]
 8010472:	2378      	movs	r3, #120	; 0x78
 8010474:	4828      	ldr	r0, [pc, #160]	; (8010518 <_printf_i+0x248>)
 8010476:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801047a:	e7e3      	b.n	8010444 <_printf_i+0x174>
 801047c:	0659      	lsls	r1, r3, #25
 801047e:	bf48      	it	mi
 8010480:	b2b6      	uxthmi	r6, r6
 8010482:	e7e6      	b.n	8010452 <_printf_i+0x182>
 8010484:	4615      	mov	r5, r2
 8010486:	e7bb      	b.n	8010400 <_printf_i+0x130>
 8010488:	682b      	ldr	r3, [r5, #0]
 801048a:	6826      	ldr	r6, [r4, #0]
 801048c:	6961      	ldr	r1, [r4, #20]
 801048e:	1d18      	adds	r0, r3, #4
 8010490:	6028      	str	r0, [r5, #0]
 8010492:	0635      	lsls	r5, r6, #24
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	d501      	bpl.n	801049c <_printf_i+0x1cc>
 8010498:	6019      	str	r1, [r3, #0]
 801049a:	e002      	b.n	80104a2 <_printf_i+0x1d2>
 801049c:	0670      	lsls	r0, r6, #25
 801049e:	d5fb      	bpl.n	8010498 <_printf_i+0x1c8>
 80104a0:	8019      	strh	r1, [r3, #0]
 80104a2:	2300      	movs	r3, #0
 80104a4:	6123      	str	r3, [r4, #16]
 80104a6:	4615      	mov	r5, r2
 80104a8:	e7ba      	b.n	8010420 <_printf_i+0x150>
 80104aa:	682b      	ldr	r3, [r5, #0]
 80104ac:	1d1a      	adds	r2, r3, #4
 80104ae:	602a      	str	r2, [r5, #0]
 80104b0:	681d      	ldr	r5, [r3, #0]
 80104b2:	6862      	ldr	r2, [r4, #4]
 80104b4:	2100      	movs	r1, #0
 80104b6:	4628      	mov	r0, r5
 80104b8:	f7ef fec2 	bl	8000240 <memchr>
 80104bc:	b108      	cbz	r0, 80104c2 <_printf_i+0x1f2>
 80104be:	1b40      	subs	r0, r0, r5
 80104c0:	6060      	str	r0, [r4, #4]
 80104c2:	6863      	ldr	r3, [r4, #4]
 80104c4:	6123      	str	r3, [r4, #16]
 80104c6:	2300      	movs	r3, #0
 80104c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104cc:	e7a8      	b.n	8010420 <_printf_i+0x150>
 80104ce:	6923      	ldr	r3, [r4, #16]
 80104d0:	462a      	mov	r2, r5
 80104d2:	4649      	mov	r1, r9
 80104d4:	4640      	mov	r0, r8
 80104d6:	47d0      	blx	sl
 80104d8:	3001      	adds	r0, #1
 80104da:	d0ab      	beq.n	8010434 <_printf_i+0x164>
 80104dc:	6823      	ldr	r3, [r4, #0]
 80104de:	079b      	lsls	r3, r3, #30
 80104e0:	d413      	bmi.n	801050a <_printf_i+0x23a>
 80104e2:	68e0      	ldr	r0, [r4, #12]
 80104e4:	9b03      	ldr	r3, [sp, #12]
 80104e6:	4298      	cmp	r0, r3
 80104e8:	bfb8      	it	lt
 80104ea:	4618      	movlt	r0, r3
 80104ec:	e7a4      	b.n	8010438 <_printf_i+0x168>
 80104ee:	2301      	movs	r3, #1
 80104f0:	4632      	mov	r2, r6
 80104f2:	4649      	mov	r1, r9
 80104f4:	4640      	mov	r0, r8
 80104f6:	47d0      	blx	sl
 80104f8:	3001      	adds	r0, #1
 80104fa:	d09b      	beq.n	8010434 <_printf_i+0x164>
 80104fc:	3501      	adds	r5, #1
 80104fe:	68e3      	ldr	r3, [r4, #12]
 8010500:	9903      	ldr	r1, [sp, #12]
 8010502:	1a5b      	subs	r3, r3, r1
 8010504:	42ab      	cmp	r3, r5
 8010506:	dcf2      	bgt.n	80104ee <_printf_i+0x21e>
 8010508:	e7eb      	b.n	80104e2 <_printf_i+0x212>
 801050a:	2500      	movs	r5, #0
 801050c:	f104 0619 	add.w	r6, r4, #25
 8010510:	e7f5      	b.n	80104fe <_printf_i+0x22e>
 8010512:	bf00      	nop
 8010514:	08016368 	.word	0x08016368
 8010518:	08016379 	.word	0x08016379

0801051c <_scanf_float>:
 801051c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010520:	b087      	sub	sp, #28
 8010522:	4617      	mov	r7, r2
 8010524:	9303      	str	r3, [sp, #12]
 8010526:	688b      	ldr	r3, [r1, #8]
 8010528:	1e5a      	subs	r2, r3, #1
 801052a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801052e:	bf83      	ittte	hi
 8010530:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010534:	195b      	addhi	r3, r3, r5
 8010536:	9302      	strhi	r3, [sp, #8]
 8010538:	2300      	movls	r3, #0
 801053a:	bf86      	itte	hi
 801053c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010540:	608b      	strhi	r3, [r1, #8]
 8010542:	9302      	strls	r3, [sp, #8]
 8010544:	680b      	ldr	r3, [r1, #0]
 8010546:	468b      	mov	fp, r1
 8010548:	2500      	movs	r5, #0
 801054a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801054e:	f84b 3b1c 	str.w	r3, [fp], #28
 8010552:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010556:	4680      	mov	r8, r0
 8010558:	460c      	mov	r4, r1
 801055a:	465e      	mov	r6, fp
 801055c:	46aa      	mov	sl, r5
 801055e:	46a9      	mov	r9, r5
 8010560:	9501      	str	r5, [sp, #4]
 8010562:	68a2      	ldr	r2, [r4, #8]
 8010564:	b152      	cbz	r2, 801057c <_scanf_float+0x60>
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	781b      	ldrb	r3, [r3, #0]
 801056a:	2b4e      	cmp	r3, #78	; 0x4e
 801056c:	d864      	bhi.n	8010638 <_scanf_float+0x11c>
 801056e:	2b40      	cmp	r3, #64	; 0x40
 8010570:	d83c      	bhi.n	80105ec <_scanf_float+0xd0>
 8010572:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010576:	b2c8      	uxtb	r0, r1
 8010578:	280e      	cmp	r0, #14
 801057a:	d93a      	bls.n	80105f2 <_scanf_float+0xd6>
 801057c:	f1b9 0f00 	cmp.w	r9, #0
 8010580:	d003      	beq.n	801058a <_scanf_float+0x6e>
 8010582:	6823      	ldr	r3, [r4, #0]
 8010584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010588:	6023      	str	r3, [r4, #0]
 801058a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801058e:	f1ba 0f01 	cmp.w	sl, #1
 8010592:	f200 8113 	bhi.w	80107bc <_scanf_float+0x2a0>
 8010596:	455e      	cmp	r6, fp
 8010598:	f200 8105 	bhi.w	80107a6 <_scanf_float+0x28a>
 801059c:	2501      	movs	r5, #1
 801059e:	4628      	mov	r0, r5
 80105a0:	b007      	add	sp, #28
 80105a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80105aa:	2a0d      	cmp	r2, #13
 80105ac:	d8e6      	bhi.n	801057c <_scanf_float+0x60>
 80105ae:	a101      	add	r1, pc, #4	; (adr r1, 80105b4 <_scanf_float+0x98>)
 80105b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80105b4:	080106f3 	.word	0x080106f3
 80105b8:	0801057d 	.word	0x0801057d
 80105bc:	0801057d 	.word	0x0801057d
 80105c0:	0801057d 	.word	0x0801057d
 80105c4:	08010753 	.word	0x08010753
 80105c8:	0801072b 	.word	0x0801072b
 80105cc:	0801057d 	.word	0x0801057d
 80105d0:	0801057d 	.word	0x0801057d
 80105d4:	08010701 	.word	0x08010701
 80105d8:	0801057d 	.word	0x0801057d
 80105dc:	0801057d 	.word	0x0801057d
 80105e0:	0801057d 	.word	0x0801057d
 80105e4:	0801057d 	.word	0x0801057d
 80105e8:	080106b9 	.word	0x080106b9
 80105ec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80105f0:	e7db      	b.n	80105aa <_scanf_float+0x8e>
 80105f2:	290e      	cmp	r1, #14
 80105f4:	d8c2      	bhi.n	801057c <_scanf_float+0x60>
 80105f6:	a001      	add	r0, pc, #4	; (adr r0, 80105fc <_scanf_float+0xe0>)
 80105f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80105fc:	080106ab 	.word	0x080106ab
 8010600:	0801057d 	.word	0x0801057d
 8010604:	080106ab 	.word	0x080106ab
 8010608:	0801073f 	.word	0x0801073f
 801060c:	0801057d 	.word	0x0801057d
 8010610:	08010659 	.word	0x08010659
 8010614:	08010695 	.word	0x08010695
 8010618:	08010695 	.word	0x08010695
 801061c:	08010695 	.word	0x08010695
 8010620:	08010695 	.word	0x08010695
 8010624:	08010695 	.word	0x08010695
 8010628:	08010695 	.word	0x08010695
 801062c:	08010695 	.word	0x08010695
 8010630:	08010695 	.word	0x08010695
 8010634:	08010695 	.word	0x08010695
 8010638:	2b6e      	cmp	r3, #110	; 0x6e
 801063a:	d809      	bhi.n	8010650 <_scanf_float+0x134>
 801063c:	2b60      	cmp	r3, #96	; 0x60
 801063e:	d8b2      	bhi.n	80105a6 <_scanf_float+0x8a>
 8010640:	2b54      	cmp	r3, #84	; 0x54
 8010642:	d077      	beq.n	8010734 <_scanf_float+0x218>
 8010644:	2b59      	cmp	r3, #89	; 0x59
 8010646:	d199      	bne.n	801057c <_scanf_float+0x60>
 8010648:	2d07      	cmp	r5, #7
 801064a:	d197      	bne.n	801057c <_scanf_float+0x60>
 801064c:	2508      	movs	r5, #8
 801064e:	e029      	b.n	80106a4 <_scanf_float+0x188>
 8010650:	2b74      	cmp	r3, #116	; 0x74
 8010652:	d06f      	beq.n	8010734 <_scanf_float+0x218>
 8010654:	2b79      	cmp	r3, #121	; 0x79
 8010656:	e7f6      	b.n	8010646 <_scanf_float+0x12a>
 8010658:	6821      	ldr	r1, [r4, #0]
 801065a:	05c8      	lsls	r0, r1, #23
 801065c:	d51a      	bpl.n	8010694 <_scanf_float+0x178>
 801065e:	9b02      	ldr	r3, [sp, #8]
 8010660:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010664:	6021      	str	r1, [r4, #0]
 8010666:	f109 0901 	add.w	r9, r9, #1
 801066a:	b11b      	cbz	r3, 8010674 <_scanf_float+0x158>
 801066c:	3b01      	subs	r3, #1
 801066e:	3201      	adds	r2, #1
 8010670:	9302      	str	r3, [sp, #8]
 8010672:	60a2      	str	r2, [r4, #8]
 8010674:	68a3      	ldr	r3, [r4, #8]
 8010676:	3b01      	subs	r3, #1
 8010678:	60a3      	str	r3, [r4, #8]
 801067a:	6923      	ldr	r3, [r4, #16]
 801067c:	3301      	adds	r3, #1
 801067e:	6123      	str	r3, [r4, #16]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	3b01      	subs	r3, #1
 8010684:	2b00      	cmp	r3, #0
 8010686:	607b      	str	r3, [r7, #4]
 8010688:	f340 8084 	ble.w	8010794 <_scanf_float+0x278>
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	3301      	adds	r3, #1
 8010690:	603b      	str	r3, [r7, #0]
 8010692:	e766      	b.n	8010562 <_scanf_float+0x46>
 8010694:	eb1a 0f05 	cmn.w	sl, r5
 8010698:	f47f af70 	bne.w	801057c <_scanf_float+0x60>
 801069c:	6822      	ldr	r2, [r4, #0]
 801069e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80106a2:	6022      	str	r2, [r4, #0]
 80106a4:	f806 3b01 	strb.w	r3, [r6], #1
 80106a8:	e7e4      	b.n	8010674 <_scanf_float+0x158>
 80106aa:	6822      	ldr	r2, [r4, #0]
 80106ac:	0610      	lsls	r0, r2, #24
 80106ae:	f57f af65 	bpl.w	801057c <_scanf_float+0x60>
 80106b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80106b6:	e7f4      	b.n	80106a2 <_scanf_float+0x186>
 80106b8:	f1ba 0f00 	cmp.w	sl, #0
 80106bc:	d10e      	bne.n	80106dc <_scanf_float+0x1c0>
 80106be:	f1b9 0f00 	cmp.w	r9, #0
 80106c2:	d10e      	bne.n	80106e2 <_scanf_float+0x1c6>
 80106c4:	6822      	ldr	r2, [r4, #0]
 80106c6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80106ca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80106ce:	d108      	bne.n	80106e2 <_scanf_float+0x1c6>
 80106d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80106d4:	6022      	str	r2, [r4, #0]
 80106d6:	f04f 0a01 	mov.w	sl, #1
 80106da:	e7e3      	b.n	80106a4 <_scanf_float+0x188>
 80106dc:	f1ba 0f02 	cmp.w	sl, #2
 80106e0:	d055      	beq.n	801078e <_scanf_float+0x272>
 80106e2:	2d01      	cmp	r5, #1
 80106e4:	d002      	beq.n	80106ec <_scanf_float+0x1d0>
 80106e6:	2d04      	cmp	r5, #4
 80106e8:	f47f af48 	bne.w	801057c <_scanf_float+0x60>
 80106ec:	3501      	adds	r5, #1
 80106ee:	b2ed      	uxtb	r5, r5
 80106f0:	e7d8      	b.n	80106a4 <_scanf_float+0x188>
 80106f2:	f1ba 0f01 	cmp.w	sl, #1
 80106f6:	f47f af41 	bne.w	801057c <_scanf_float+0x60>
 80106fa:	f04f 0a02 	mov.w	sl, #2
 80106fe:	e7d1      	b.n	80106a4 <_scanf_float+0x188>
 8010700:	b97d      	cbnz	r5, 8010722 <_scanf_float+0x206>
 8010702:	f1b9 0f00 	cmp.w	r9, #0
 8010706:	f47f af3c 	bne.w	8010582 <_scanf_float+0x66>
 801070a:	6822      	ldr	r2, [r4, #0]
 801070c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010710:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010714:	f47f af39 	bne.w	801058a <_scanf_float+0x6e>
 8010718:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801071c:	6022      	str	r2, [r4, #0]
 801071e:	2501      	movs	r5, #1
 8010720:	e7c0      	b.n	80106a4 <_scanf_float+0x188>
 8010722:	2d03      	cmp	r5, #3
 8010724:	d0e2      	beq.n	80106ec <_scanf_float+0x1d0>
 8010726:	2d05      	cmp	r5, #5
 8010728:	e7de      	b.n	80106e8 <_scanf_float+0x1cc>
 801072a:	2d02      	cmp	r5, #2
 801072c:	f47f af26 	bne.w	801057c <_scanf_float+0x60>
 8010730:	2503      	movs	r5, #3
 8010732:	e7b7      	b.n	80106a4 <_scanf_float+0x188>
 8010734:	2d06      	cmp	r5, #6
 8010736:	f47f af21 	bne.w	801057c <_scanf_float+0x60>
 801073a:	2507      	movs	r5, #7
 801073c:	e7b2      	b.n	80106a4 <_scanf_float+0x188>
 801073e:	6822      	ldr	r2, [r4, #0]
 8010740:	0591      	lsls	r1, r2, #22
 8010742:	f57f af1b 	bpl.w	801057c <_scanf_float+0x60>
 8010746:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801074a:	6022      	str	r2, [r4, #0]
 801074c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010750:	e7a8      	b.n	80106a4 <_scanf_float+0x188>
 8010752:	6822      	ldr	r2, [r4, #0]
 8010754:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010758:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801075c:	d006      	beq.n	801076c <_scanf_float+0x250>
 801075e:	0550      	lsls	r0, r2, #21
 8010760:	f57f af0c 	bpl.w	801057c <_scanf_float+0x60>
 8010764:	f1b9 0f00 	cmp.w	r9, #0
 8010768:	f43f af0f 	beq.w	801058a <_scanf_float+0x6e>
 801076c:	0591      	lsls	r1, r2, #22
 801076e:	bf58      	it	pl
 8010770:	9901      	ldrpl	r1, [sp, #4]
 8010772:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010776:	bf58      	it	pl
 8010778:	eba9 0101 	subpl.w	r1, r9, r1
 801077c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010780:	bf58      	it	pl
 8010782:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010786:	6022      	str	r2, [r4, #0]
 8010788:	f04f 0900 	mov.w	r9, #0
 801078c:	e78a      	b.n	80106a4 <_scanf_float+0x188>
 801078e:	f04f 0a03 	mov.w	sl, #3
 8010792:	e787      	b.n	80106a4 <_scanf_float+0x188>
 8010794:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010798:	4639      	mov	r1, r7
 801079a:	4640      	mov	r0, r8
 801079c:	4798      	blx	r3
 801079e:	2800      	cmp	r0, #0
 80107a0:	f43f aedf 	beq.w	8010562 <_scanf_float+0x46>
 80107a4:	e6ea      	b.n	801057c <_scanf_float+0x60>
 80107a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80107aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80107ae:	463a      	mov	r2, r7
 80107b0:	4640      	mov	r0, r8
 80107b2:	4798      	blx	r3
 80107b4:	6923      	ldr	r3, [r4, #16]
 80107b6:	3b01      	subs	r3, #1
 80107b8:	6123      	str	r3, [r4, #16]
 80107ba:	e6ec      	b.n	8010596 <_scanf_float+0x7a>
 80107bc:	1e6b      	subs	r3, r5, #1
 80107be:	2b06      	cmp	r3, #6
 80107c0:	d825      	bhi.n	801080e <_scanf_float+0x2f2>
 80107c2:	2d02      	cmp	r5, #2
 80107c4:	d836      	bhi.n	8010834 <_scanf_float+0x318>
 80107c6:	455e      	cmp	r6, fp
 80107c8:	f67f aee8 	bls.w	801059c <_scanf_float+0x80>
 80107cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80107d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80107d4:	463a      	mov	r2, r7
 80107d6:	4640      	mov	r0, r8
 80107d8:	4798      	blx	r3
 80107da:	6923      	ldr	r3, [r4, #16]
 80107dc:	3b01      	subs	r3, #1
 80107de:	6123      	str	r3, [r4, #16]
 80107e0:	e7f1      	b.n	80107c6 <_scanf_float+0x2aa>
 80107e2:	9802      	ldr	r0, [sp, #8]
 80107e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80107e8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80107ec:	9002      	str	r0, [sp, #8]
 80107ee:	463a      	mov	r2, r7
 80107f0:	4640      	mov	r0, r8
 80107f2:	4798      	blx	r3
 80107f4:	6923      	ldr	r3, [r4, #16]
 80107f6:	3b01      	subs	r3, #1
 80107f8:	6123      	str	r3, [r4, #16]
 80107fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80107fe:	fa5f fa8a 	uxtb.w	sl, sl
 8010802:	f1ba 0f02 	cmp.w	sl, #2
 8010806:	d1ec      	bne.n	80107e2 <_scanf_float+0x2c6>
 8010808:	3d03      	subs	r5, #3
 801080a:	b2ed      	uxtb	r5, r5
 801080c:	1b76      	subs	r6, r6, r5
 801080e:	6823      	ldr	r3, [r4, #0]
 8010810:	05da      	lsls	r2, r3, #23
 8010812:	d52f      	bpl.n	8010874 <_scanf_float+0x358>
 8010814:	055b      	lsls	r3, r3, #21
 8010816:	d510      	bpl.n	801083a <_scanf_float+0x31e>
 8010818:	455e      	cmp	r6, fp
 801081a:	f67f aebf 	bls.w	801059c <_scanf_float+0x80>
 801081e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010822:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010826:	463a      	mov	r2, r7
 8010828:	4640      	mov	r0, r8
 801082a:	4798      	blx	r3
 801082c:	6923      	ldr	r3, [r4, #16]
 801082e:	3b01      	subs	r3, #1
 8010830:	6123      	str	r3, [r4, #16]
 8010832:	e7f1      	b.n	8010818 <_scanf_float+0x2fc>
 8010834:	46aa      	mov	sl, r5
 8010836:	9602      	str	r6, [sp, #8]
 8010838:	e7df      	b.n	80107fa <_scanf_float+0x2de>
 801083a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801083e:	6923      	ldr	r3, [r4, #16]
 8010840:	2965      	cmp	r1, #101	; 0x65
 8010842:	f103 33ff 	add.w	r3, r3, #4294967295
 8010846:	f106 35ff 	add.w	r5, r6, #4294967295
 801084a:	6123      	str	r3, [r4, #16]
 801084c:	d00c      	beq.n	8010868 <_scanf_float+0x34c>
 801084e:	2945      	cmp	r1, #69	; 0x45
 8010850:	d00a      	beq.n	8010868 <_scanf_float+0x34c>
 8010852:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010856:	463a      	mov	r2, r7
 8010858:	4640      	mov	r0, r8
 801085a:	4798      	blx	r3
 801085c:	6923      	ldr	r3, [r4, #16]
 801085e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010862:	3b01      	subs	r3, #1
 8010864:	1eb5      	subs	r5, r6, #2
 8010866:	6123      	str	r3, [r4, #16]
 8010868:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801086c:	463a      	mov	r2, r7
 801086e:	4640      	mov	r0, r8
 8010870:	4798      	blx	r3
 8010872:	462e      	mov	r6, r5
 8010874:	6825      	ldr	r5, [r4, #0]
 8010876:	f015 0510 	ands.w	r5, r5, #16
 801087a:	d159      	bne.n	8010930 <_scanf_float+0x414>
 801087c:	7035      	strb	r5, [r6, #0]
 801087e:	6823      	ldr	r3, [r4, #0]
 8010880:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010888:	d11b      	bne.n	80108c2 <_scanf_float+0x3a6>
 801088a:	9b01      	ldr	r3, [sp, #4]
 801088c:	454b      	cmp	r3, r9
 801088e:	eba3 0209 	sub.w	r2, r3, r9
 8010892:	d123      	bne.n	80108dc <_scanf_float+0x3c0>
 8010894:	2200      	movs	r2, #0
 8010896:	4659      	mov	r1, fp
 8010898:	4640      	mov	r0, r8
 801089a:	f000 ff13 	bl	80116c4 <_strtod_r>
 801089e:	6822      	ldr	r2, [r4, #0]
 80108a0:	9b03      	ldr	r3, [sp, #12]
 80108a2:	f012 0f02 	tst.w	r2, #2
 80108a6:	ec57 6b10 	vmov	r6, r7, d0
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	d021      	beq.n	80108f2 <_scanf_float+0x3d6>
 80108ae:	9903      	ldr	r1, [sp, #12]
 80108b0:	1d1a      	adds	r2, r3, #4
 80108b2:	600a      	str	r2, [r1, #0]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	e9c3 6700 	strd	r6, r7, [r3]
 80108ba:	68e3      	ldr	r3, [r4, #12]
 80108bc:	3301      	adds	r3, #1
 80108be:	60e3      	str	r3, [r4, #12]
 80108c0:	e66d      	b.n	801059e <_scanf_float+0x82>
 80108c2:	9b04      	ldr	r3, [sp, #16]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d0e5      	beq.n	8010894 <_scanf_float+0x378>
 80108c8:	9905      	ldr	r1, [sp, #20]
 80108ca:	230a      	movs	r3, #10
 80108cc:	462a      	mov	r2, r5
 80108ce:	3101      	adds	r1, #1
 80108d0:	4640      	mov	r0, r8
 80108d2:	f000 ffdb 	bl	801188c <_strtol_r>
 80108d6:	9b04      	ldr	r3, [sp, #16]
 80108d8:	9e05      	ldr	r6, [sp, #20]
 80108da:	1ac2      	subs	r2, r0, r3
 80108dc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80108e0:	429e      	cmp	r6, r3
 80108e2:	bf28      	it	cs
 80108e4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80108e8:	4912      	ldr	r1, [pc, #72]	; (8010934 <_scanf_float+0x418>)
 80108ea:	4630      	mov	r0, r6
 80108ec:	f000 f82c 	bl	8010948 <siprintf>
 80108f0:	e7d0      	b.n	8010894 <_scanf_float+0x378>
 80108f2:	9903      	ldr	r1, [sp, #12]
 80108f4:	f012 0f04 	tst.w	r2, #4
 80108f8:	f103 0204 	add.w	r2, r3, #4
 80108fc:	600a      	str	r2, [r1, #0]
 80108fe:	d1d9      	bne.n	80108b4 <_scanf_float+0x398>
 8010900:	f8d3 8000 	ldr.w	r8, [r3]
 8010904:	ee10 2a10 	vmov	r2, s0
 8010908:	ee10 0a10 	vmov	r0, s0
 801090c:	463b      	mov	r3, r7
 801090e:	4639      	mov	r1, r7
 8010910:	f7f0 f93c 	bl	8000b8c <__aeabi_dcmpun>
 8010914:	b128      	cbz	r0, 8010922 <_scanf_float+0x406>
 8010916:	4808      	ldr	r0, [pc, #32]	; (8010938 <_scanf_float+0x41c>)
 8010918:	f000 f810 	bl	801093c <nanf>
 801091c:	ed88 0a00 	vstr	s0, [r8]
 8010920:	e7cb      	b.n	80108ba <_scanf_float+0x39e>
 8010922:	4630      	mov	r0, r6
 8010924:	4639      	mov	r1, r7
 8010926:	f7f0 f98f 	bl	8000c48 <__aeabi_d2f>
 801092a:	f8c8 0000 	str.w	r0, [r8]
 801092e:	e7c4      	b.n	80108ba <_scanf_float+0x39e>
 8010930:	2500      	movs	r5, #0
 8010932:	e634      	b.n	801059e <_scanf_float+0x82>
 8010934:	0801638a 	.word	0x0801638a
 8010938:	0801648f 	.word	0x0801648f

0801093c <nanf>:
 801093c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010944 <nanf+0x8>
 8010940:	4770      	bx	lr
 8010942:	bf00      	nop
 8010944:	7fc00000 	.word	0x7fc00000

08010948 <siprintf>:
 8010948:	b40e      	push	{r1, r2, r3}
 801094a:	b500      	push	{lr}
 801094c:	b09c      	sub	sp, #112	; 0x70
 801094e:	ab1d      	add	r3, sp, #116	; 0x74
 8010950:	9002      	str	r0, [sp, #8]
 8010952:	9006      	str	r0, [sp, #24]
 8010954:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010958:	4809      	ldr	r0, [pc, #36]	; (8010980 <siprintf+0x38>)
 801095a:	9107      	str	r1, [sp, #28]
 801095c:	9104      	str	r1, [sp, #16]
 801095e:	4909      	ldr	r1, [pc, #36]	; (8010984 <siprintf+0x3c>)
 8010960:	f853 2b04 	ldr.w	r2, [r3], #4
 8010964:	9105      	str	r1, [sp, #20]
 8010966:	6800      	ldr	r0, [r0, #0]
 8010968:	9301      	str	r3, [sp, #4]
 801096a:	a902      	add	r1, sp, #8
 801096c:	f003 f810 	bl	8013990 <_svfiprintf_r>
 8010970:	9b02      	ldr	r3, [sp, #8]
 8010972:	2200      	movs	r2, #0
 8010974:	701a      	strb	r2, [r3, #0]
 8010976:	b01c      	add	sp, #112	; 0x70
 8010978:	f85d eb04 	ldr.w	lr, [sp], #4
 801097c:	b003      	add	sp, #12
 801097e:	4770      	bx	lr
 8010980:	200003e0 	.word	0x200003e0
 8010984:	ffff0208 	.word	0xffff0208

08010988 <siscanf>:
 8010988:	b40e      	push	{r1, r2, r3}
 801098a:	b510      	push	{r4, lr}
 801098c:	b09f      	sub	sp, #124	; 0x7c
 801098e:	ac21      	add	r4, sp, #132	; 0x84
 8010990:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010994:	f854 2b04 	ldr.w	r2, [r4], #4
 8010998:	9201      	str	r2, [sp, #4]
 801099a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801099e:	9004      	str	r0, [sp, #16]
 80109a0:	9008      	str	r0, [sp, #32]
 80109a2:	f7ef fc3f 	bl	8000224 <strlen>
 80109a6:	4b0c      	ldr	r3, [pc, #48]	; (80109d8 <siscanf+0x50>)
 80109a8:	9005      	str	r0, [sp, #20]
 80109aa:	9009      	str	r0, [sp, #36]	; 0x24
 80109ac:	930d      	str	r3, [sp, #52]	; 0x34
 80109ae:	480b      	ldr	r0, [pc, #44]	; (80109dc <siscanf+0x54>)
 80109b0:	9a01      	ldr	r2, [sp, #4]
 80109b2:	6800      	ldr	r0, [r0, #0]
 80109b4:	9403      	str	r4, [sp, #12]
 80109b6:	2300      	movs	r3, #0
 80109b8:	9311      	str	r3, [sp, #68]	; 0x44
 80109ba:	9316      	str	r3, [sp, #88]	; 0x58
 80109bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80109c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80109c4:	a904      	add	r1, sp, #16
 80109c6:	4623      	mov	r3, r4
 80109c8:	f003 f93c 	bl	8013c44 <__ssvfiscanf_r>
 80109cc:	b01f      	add	sp, #124	; 0x7c
 80109ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109d2:	b003      	add	sp, #12
 80109d4:	4770      	bx	lr
 80109d6:	bf00      	nop
 80109d8:	08010a03 	.word	0x08010a03
 80109dc:	200003e0 	.word	0x200003e0

080109e0 <__sread>:
 80109e0:	b510      	push	{r4, lr}
 80109e2:	460c      	mov	r4, r1
 80109e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109e8:	f003 fd50 	bl	801448c <_read_r>
 80109ec:	2800      	cmp	r0, #0
 80109ee:	bfab      	itete	ge
 80109f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80109f2:	89a3      	ldrhlt	r3, [r4, #12]
 80109f4:	181b      	addge	r3, r3, r0
 80109f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80109fa:	bfac      	ite	ge
 80109fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80109fe:	81a3      	strhlt	r3, [r4, #12]
 8010a00:	bd10      	pop	{r4, pc}

08010a02 <__seofread>:
 8010a02:	2000      	movs	r0, #0
 8010a04:	4770      	bx	lr

08010a06 <__swrite>:
 8010a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a0a:	461f      	mov	r7, r3
 8010a0c:	898b      	ldrh	r3, [r1, #12]
 8010a0e:	05db      	lsls	r3, r3, #23
 8010a10:	4605      	mov	r5, r0
 8010a12:	460c      	mov	r4, r1
 8010a14:	4616      	mov	r6, r2
 8010a16:	d505      	bpl.n	8010a24 <__swrite+0x1e>
 8010a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a1c:	2302      	movs	r3, #2
 8010a1e:	2200      	movs	r2, #0
 8010a20:	f002 f976 	bl	8012d10 <_lseek_r>
 8010a24:	89a3      	ldrh	r3, [r4, #12]
 8010a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a2e:	81a3      	strh	r3, [r4, #12]
 8010a30:	4632      	mov	r2, r6
 8010a32:	463b      	mov	r3, r7
 8010a34:	4628      	mov	r0, r5
 8010a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a3a:	f000 bf29 	b.w	8011890 <_write_r>

08010a3e <__sseek>:
 8010a3e:	b510      	push	{r4, lr}
 8010a40:	460c      	mov	r4, r1
 8010a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a46:	f002 f963 	bl	8012d10 <_lseek_r>
 8010a4a:	1c43      	adds	r3, r0, #1
 8010a4c:	89a3      	ldrh	r3, [r4, #12]
 8010a4e:	bf15      	itete	ne
 8010a50:	6560      	strne	r0, [r4, #84]	; 0x54
 8010a52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010a56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010a5a:	81a3      	strheq	r3, [r4, #12]
 8010a5c:	bf18      	it	ne
 8010a5e:	81a3      	strhne	r3, [r4, #12]
 8010a60:	bd10      	pop	{r4, pc}

08010a62 <__sclose>:
 8010a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a66:	f000 bf43 	b.w	80118f0 <_close_r>

08010a6a <strcpy>:
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a70:	f803 2b01 	strb.w	r2, [r3], #1
 8010a74:	2a00      	cmp	r2, #0
 8010a76:	d1f9      	bne.n	8010a6c <strcpy+0x2>
 8010a78:	4770      	bx	lr

08010a7a <sulp>:
 8010a7a:	b570      	push	{r4, r5, r6, lr}
 8010a7c:	4604      	mov	r4, r0
 8010a7e:	460d      	mov	r5, r1
 8010a80:	ec45 4b10 	vmov	d0, r4, r5
 8010a84:	4616      	mov	r6, r2
 8010a86:	f002 fce1 	bl	801344c <__ulp>
 8010a8a:	ec51 0b10 	vmov	r0, r1, d0
 8010a8e:	b17e      	cbz	r6, 8010ab0 <sulp+0x36>
 8010a90:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010a94:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	dd09      	ble.n	8010ab0 <sulp+0x36>
 8010a9c:	051b      	lsls	r3, r3, #20
 8010a9e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010aa2:	2400      	movs	r4, #0
 8010aa4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010aa8:	4622      	mov	r2, r4
 8010aaa:	462b      	mov	r3, r5
 8010aac:	f7ef fdd4 	bl	8000658 <__aeabi_dmul>
 8010ab0:	bd70      	pop	{r4, r5, r6, pc}
 8010ab2:	0000      	movs	r0, r0
 8010ab4:	0000      	movs	r0, r0
	...

08010ab8 <_strtod_l>:
 8010ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010abc:	ed2d 8b02 	vpush	{d8}
 8010ac0:	b09d      	sub	sp, #116	; 0x74
 8010ac2:	461f      	mov	r7, r3
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	9318      	str	r3, [sp, #96]	; 0x60
 8010ac8:	4ba2      	ldr	r3, [pc, #648]	; (8010d54 <_strtod_l+0x29c>)
 8010aca:	9213      	str	r2, [sp, #76]	; 0x4c
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	9305      	str	r3, [sp, #20]
 8010ad0:	4604      	mov	r4, r0
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	4688      	mov	r8, r1
 8010ad6:	f7ef fba5 	bl	8000224 <strlen>
 8010ada:	f04f 0a00 	mov.w	sl, #0
 8010ade:	4605      	mov	r5, r0
 8010ae0:	f04f 0b00 	mov.w	fp, #0
 8010ae4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010ae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010aea:	781a      	ldrb	r2, [r3, #0]
 8010aec:	2a2b      	cmp	r2, #43	; 0x2b
 8010aee:	d04e      	beq.n	8010b8e <_strtod_l+0xd6>
 8010af0:	d83b      	bhi.n	8010b6a <_strtod_l+0xb2>
 8010af2:	2a0d      	cmp	r2, #13
 8010af4:	d834      	bhi.n	8010b60 <_strtod_l+0xa8>
 8010af6:	2a08      	cmp	r2, #8
 8010af8:	d834      	bhi.n	8010b64 <_strtod_l+0xac>
 8010afa:	2a00      	cmp	r2, #0
 8010afc:	d03e      	beq.n	8010b7c <_strtod_l+0xc4>
 8010afe:	2300      	movs	r3, #0
 8010b00:	930a      	str	r3, [sp, #40]	; 0x28
 8010b02:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010b04:	7833      	ldrb	r3, [r6, #0]
 8010b06:	2b30      	cmp	r3, #48	; 0x30
 8010b08:	f040 80b0 	bne.w	8010c6c <_strtod_l+0x1b4>
 8010b0c:	7873      	ldrb	r3, [r6, #1]
 8010b0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010b12:	2b58      	cmp	r3, #88	; 0x58
 8010b14:	d168      	bne.n	8010be8 <_strtod_l+0x130>
 8010b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b18:	9301      	str	r3, [sp, #4]
 8010b1a:	ab18      	add	r3, sp, #96	; 0x60
 8010b1c:	9702      	str	r7, [sp, #8]
 8010b1e:	9300      	str	r3, [sp, #0]
 8010b20:	4a8d      	ldr	r2, [pc, #564]	; (8010d58 <_strtod_l+0x2a0>)
 8010b22:	ab19      	add	r3, sp, #100	; 0x64
 8010b24:	a917      	add	r1, sp, #92	; 0x5c
 8010b26:	4620      	mov	r0, r4
 8010b28:	f001 fde6 	bl	80126f8 <__gethex>
 8010b2c:	f010 0707 	ands.w	r7, r0, #7
 8010b30:	4605      	mov	r5, r0
 8010b32:	d005      	beq.n	8010b40 <_strtod_l+0x88>
 8010b34:	2f06      	cmp	r7, #6
 8010b36:	d12c      	bne.n	8010b92 <_strtod_l+0xda>
 8010b38:	3601      	adds	r6, #1
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	9617      	str	r6, [sp, #92]	; 0x5c
 8010b3e:	930a      	str	r3, [sp, #40]	; 0x28
 8010b40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	f040 8590 	bne.w	8011668 <_strtod_l+0xbb0>
 8010b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b4a:	b1eb      	cbz	r3, 8010b88 <_strtod_l+0xd0>
 8010b4c:	4652      	mov	r2, sl
 8010b4e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010b52:	ec43 2b10 	vmov	d0, r2, r3
 8010b56:	b01d      	add	sp, #116	; 0x74
 8010b58:	ecbd 8b02 	vpop	{d8}
 8010b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b60:	2a20      	cmp	r2, #32
 8010b62:	d1cc      	bne.n	8010afe <_strtod_l+0x46>
 8010b64:	3301      	adds	r3, #1
 8010b66:	9317      	str	r3, [sp, #92]	; 0x5c
 8010b68:	e7be      	b.n	8010ae8 <_strtod_l+0x30>
 8010b6a:	2a2d      	cmp	r2, #45	; 0x2d
 8010b6c:	d1c7      	bne.n	8010afe <_strtod_l+0x46>
 8010b6e:	2201      	movs	r2, #1
 8010b70:	920a      	str	r2, [sp, #40]	; 0x28
 8010b72:	1c5a      	adds	r2, r3, #1
 8010b74:	9217      	str	r2, [sp, #92]	; 0x5c
 8010b76:	785b      	ldrb	r3, [r3, #1]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d1c2      	bne.n	8010b02 <_strtod_l+0x4a>
 8010b7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010b7e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	f040 856e 	bne.w	8011664 <_strtod_l+0xbac>
 8010b88:	4652      	mov	r2, sl
 8010b8a:	465b      	mov	r3, fp
 8010b8c:	e7e1      	b.n	8010b52 <_strtod_l+0x9a>
 8010b8e:	2200      	movs	r2, #0
 8010b90:	e7ee      	b.n	8010b70 <_strtod_l+0xb8>
 8010b92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010b94:	b13a      	cbz	r2, 8010ba6 <_strtod_l+0xee>
 8010b96:	2135      	movs	r1, #53	; 0x35
 8010b98:	a81a      	add	r0, sp, #104	; 0x68
 8010b9a:	f002 fd62 	bl	8013662 <__copybits>
 8010b9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010ba0:	4620      	mov	r0, r4
 8010ba2:	f002 f921 	bl	8012de8 <_Bfree>
 8010ba6:	3f01      	subs	r7, #1
 8010ba8:	2f04      	cmp	r7, #4
 8010baa:	d806      	bhi.n	8010bba <_strtod_l+0x102>
 8010bac:	e8df f007 	tbb	[pc, r7]
 8010bb0:	1714030a 	.word	0x1714030a
 8010bb4:	0a          	.byte	0x0a
 8010bb5:	00          	.byte	0x00
 8010bb6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8010bba:	0728      	lsls	r0, r5, #28
 8010bbc:	d5c0      	bpl.n	8010b40 <_strtod_l+0x88>
 8010bbe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010bc2:	e7bd      	b.n	8010b40 <_strtod_l+0x88>
 8010bc4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010bc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010bca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010bce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010bd2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010bd6:	e7f0      	b.n	8010bba <_strtod_l+0x102>
 8010bd8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8010d5c <_strtod_l+0x2a4>
 8010bdc:	e7ed      	b.n	8010bba <_strtod_l+0x102>
 8010bde:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010be2:	f04f 3aff 	mov.w	sl, #4294967295
 8010be6:	e7e8      	b.n	8010bba <_strtod_l+0x102>
 8010be8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010bea:	1c5a      	adds	r2, r3, #1
 8010bec:	9217      	str	r2, [sp, #92]	; 0x5c
 8010bee:	785b      	ldrb	r3, [r3, #1]
 8010bf0:	2b30      	cmp	r3, #48	; 0x30
 8010bf2:	d0f9      	beq.n	8010be8 <_strtod_l+0x130>
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d0a3      	beq.n	8010b40 <_strtod_l+0x88>
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	f04f 0900 	mov.w	r9, #0
 8010bfe:	9304      	str	r3, [sp, #16]
 8010c00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010c02:	9308      	str	r3, [sp, #32]
 8010c04:	f8cd 901c 	str.w	r9, [sp, #28]
 8010c08:	464f      	mov	r7, r9
 8010c0a:	220a      	movs	r2, #10
 8010c0c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010c0e:	7806      	ldrb	r6, [r0, #0]
 8010c10:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010c14:	b2d9      	uxtb	r1, r3
 8010c16:	2909      	cmp	r1, #9
 8010c18:	d92a      	bls.n	8010c70 <_strtod_l+0x1b8>
 8010c1a:	9905      	ldr	r1, [sp, #20]
 8010c1c:	462a      	mov	r2, r5
 8010c1e:	f003 fc97 	bl	8014550 <strncmp>
 8010c22:	b398      	cbz	r0, 8010c8c <_strtod_l+0x1d4>
 8010c24:	2000      	movs	r0, #0
 8010c26:	4632      	mov	r2, r6
 8010c28:	463d      	mov	r5, r7
 8010c2a:	9005      	str	r0, [sp, #20]
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	2a65      	cmp	r2, #101	; 0x65
 8010c30:	d001      	beq.n	8010c36 <_strtod_l+0x17e>
 8010c32:	2a45      	cmp	r2, #69	; 0x45
 8010c34:	d118      	bne.n	8010c68 <_strtod_l+0x1b0>
 8010c36:	b91d      	cbnz	r5, 8010c40 <_strtod_l+0x188>
 8010c38:	9a04      	ldr	r2, [sp, #16]
 8010c3a:	4302      	orrs	r2, r0
 8010c3c:	d09e      	beq.n	8010b7c <_strtod_l+0xc4>
 8010c3e:	2500      	movs	r5, #0
 8010c40:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8010c44:	f108 0201 	add.w	r2, r8, #1
 8010c48:	9217      	str	r2, [sp, #92]	; 0x5c
 8010c4a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010c4e:	2a2b      	cmp	r2, #43	; 0x2b
 8010c50:	d075      	beq.n	8010d3e <_strtod_l+0x286>
 8010c52:	2a2d      	cmp	r2, #45	; 0x2d
 8010c54:	d07b      	beq.n	8010d4e <_strtod_l+0x296>
 8010c56:	f04f 0c00 	mov.w	ip, #0
 8010c5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010c5e:	2909      	cmp	r1, #9
 8010c60:	f240 8082 	bls.w	8010d68 <_strtod_l+0x2b0>
 8010c64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010c68:	2600      	movs	r6, #0
 8010c6a:	e09d      	b.n	8010da8 <_strtod_l+0x2f0>
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	e7c4      	b.n	8010bfa <_strtod_l+0x142>
 8010c70:	2f08      	cmp	r7, #8
 8010c72:	bfd8      	it	le
 8010c74:	9907      	ldrle	r1, [sp, #28]
 8010c76:	f100 0001 	add.w	r0, r0, #1
 8010c7a:	bfda      	itte	le
 8010c7c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010c80:	9307      	strle	r3, [sp, #28]
 8010c82:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010c86:	3701      	adds	r7, #1
 8010c88:	9017      	str	r0, [sp, #92]	; 0x5c
 8010c8a:	e7bf      	b.n	8010c0c <_strtod_l+0x154>
 8010c8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010c8e:	195a      	adds	r2, r3, r5
 8010c90:	9217      	str	r2, [sp, #92]	; 0x5c
 8010c92:	5d5a      	ldrb	r2, [r3, r5]
 8010c94:	2f00      	cmp	r7, #0
 8010c96:	d037      	beq.n	8010d08 <_strtod_l+0x250>
 8010c98:	9005      	str	r0, [sp, #20]
 8010c9a:	463d      	mov	r5, r7
 8010c9c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010ca0:	2b09      	cmp	r3, #9
 8010ca2:	d912      	bls.n	8010cca <_strtod_l+0x212>
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	e7c2      	b.n	8010c2e <_strtod_l+0x176>
 8010ca8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010caa:	1c5a      	adds	r2, r3, #1
 8010cac:	9217      	str	r2, [sp, #92]	; 0x5c
 8010cae:	785a      	ldrb	r2, [r3, #1]
 8010cb0:	3001      	adds	r0, #1
 8010cb2:	2a30      	cmp	r2, #48	; 0x30
 8010cb4:	d0f8      	beq.n	8010ca8 <_strtod_l+0x1f0>
 8010cb6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010cba:	2b08      	cmp	r3, #8
 8010cbc:	f200 84d9 	bhi.w	8011672 <_strtod_l+0xbba>
 8010cc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010cc2:	9005      	str	r0, [sp, #20]
 8010cc4:	2000      	movs	r0, #0
 8010cc6:	9308      	str	r3, [sp, #32]
 8010cc8:	4605      	mov	r5, r0
 8010cca:	3a30      	subs	r2, #48	; 0x30
 8010ccc:	f100 0301 	add.w	r3, r0, #1
 8010cd0:	d014      	beq.n	8010cfc <_strtod_l+0x244>
 8010cd2:	9905      	ldr	r1, [sp, #20]
 8010cd4:	4419      	add	r1, r3
 8010cd6:	9105      	str	r1, [sp, #20]
 8010cd8:	462b      	mov	r3, r5
 8010cda:	eb00 0e05 	add.w	lr, r0, r5
 8010cde:	210a      	movs	r1, #10
 8010ce0:	4573      	cmp	r3, lr
 8010ce2:	d113      	bne.n	8010d0c <_strtod_l+0x254>
 8010ce4:	182b      	adds	r3, r5, r0
 8010ce6:	2b08      	cmp	r3, #8
 8010ce8:	f105 0501 	add.w	r5, r5, #1
 8010cec:	4405      	add	r5, r0
 8010cee:	dc1c      	bgt.n	8010d2a <_strtod_l+0x272>
 8010cf0:	9907      	ldr	r1, [sp, #28]
 8010cf2:	230a      	movs	r3, #10
 8010cf4:	fb03 2301 	mla	r3, r3, r1, r2
 8010cf8:	9307      	str	r3, [sp, #28]
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010cfe:	1c51      	adds	r1, r2, #1
 8010d00:	9117      	str	r1, [sp, #92]	; 0x5c
 8010d02:	7852      	ldrb	r2, [r2, #1]
 8010d04:	4618      	mov	r0, r3
 8010d06:	e7c9      	b.n	8010c9c <_strtod_l+0x1e4>
 8010d08:	4638      	mov	r0, r7
 8010d0a:	e7d2      	b.n	8010cb2 <_strtod_l+0x1fa>
 8010d0c:	2b08      	cmp	r3, #8
 8010d0e:	dc04      	bgt.n	8010d1a <_strtod_l+0x262>
 8010d10:	9e07      	ldr	r6, [sp, #28]
 8010d12:	434e      	muls	r6, r1
 8010d14:	9607      	str	r6, [sp, #28]
 8010d16:	3301      	adds	r3, #1
 8010d18:	e7e2      	b.n	8010ce0 <_strtod_l+0x228>
 8010d1a:	f103 0c01 	add.w	ip, r3, #1
 8010d1e:	f1bc 0f10 	cmp.w	ip, #16
 8010d22:	bfd8      	it	le
 8010d24:	fb01 f909 	mulle.w	r9, r1, r9
 8010d28:	e7f5      	b.n	8010d16 <_strtod_l+0x25e>
 8010d2a:	2d10      	cmp	r5, #16
 8010d2c:	bfdc      	itt	le
 8010d2e:	230a      	movle	r3, #10
 8010d30:	fb03 2909 	mlale	r9, r3, r9, r2
 8010d34:	e7e1      	b.n	8010cfa <_strtod_l+0x242>
 8010d36:	2300      	movs	r3, #0
 8010d38:	9305      	str	r3, [sp, #20]
 8010d3a:	2301      	movs	r3, #1
 8010d3c:	e77c      	b.n	8010c38 <_strtod_l+0x180>
 8010d3e:	f04f 0c00 	mov.w	ip, #0
 8010d42:	f108 0202 	add.w	r2, r8, #2
 8010d46:	9217      	str	r2, [sp, #92]	; 0x5c
 8010d48:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010d4c:	e785      	b.n	8010c5a <_strtod_l+0x1a2>
 8010d4e:	f04f 0c01 	mov.w	ip, #1
 8010d52:	e7f6      	b.n	8010d42 <_strtod_l+0x28a>
 8010d54:	08016670 	.word	0x08016670
 8010d58:	08016390 	.word	0x08016390
 8010d5c:	7ff00000 	.word	0x7ff00000
 8010d60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010d62:	1c51      	adds	r1, r2, #1
 8010d64:	9117      	str	r1, [sp, #92]	; 0x5c
 8010d66:	7852      	ldrb	r2, [r2, #1]
 8010d68:	2a30      	cmp	r2, #48	; 0x30
 8010d6a:	d0f9      	beq.n	8010d60 <_strtod_l+0x2a8>
 8010d6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010d70:	2908      	cmp	r1, #8
 8010d72:	f63f af79 	bhi.w	8010c68 <_strtod_l+0x1b0>
 8010d76:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010d7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010d7c:	9206      	str	r2, [sp, #24]
 8010d7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010d80:	1c51      	adds	r1, r2, #1
 8010d82:	9117      	str	r1, [sp, #92]	; 0x5c
 8010d84:	7852      	ldrb	r2, [r2, #1]
 8010d86:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010d8a:	2e09      	cmp	r6, #9
 8010d8c:	d937      	bls.n	8010dfe <_strtod_l+0x346>
 8010d8e:	9e06      	ldr	r6, [sp, #24]
 8010d90:	1b89      	subs	r1, r1, r6
 8010d92:	2908      	cmp	r1, #8
 8010d94:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010d98:	dc02      	bgt.n	8010da0 <_strtod_l+0x2e8>
 8010d9a:	4576      	cmp	r6, lr
 8010d9c:	bfa8      	it	ge
 8010d9e:	4676      	movge	r6, lr
 8010da0:	f1bc 0f00 	cmp.w	ip, #0
 8010da4:	d000      	beq.n	8010da8 <_strtod_l+0x2f0>
 8010da6:	4276      	negs	r6, r6
 8010da8:	2d00      	cmp	r5, #0
 8010daa:	d14d      	bne.n	8010e48 <_strtod_l+0x390>
 8010dac:	9904      	ldr	r1, [sp, #16]
 8010dae:	4301      	orrs	r1, r0
 8010db0:	f47f aec6 	bne.w	8010b40 <_strtod_l+0x88>
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	f47f aee1 	bne.w	8010b7c <_strtod_l+0xc4>
 8010dba:	2a69      	cmp	r2, #105	; 0x69
 8010dbc:	d027      	beq.n	8010e0e <_strtod_l+0x356>
 8010dbe:	dc24      	bgt.n	8010e0a <_strtod_l+0x352>
 8010dc0:	2a49      	cmp	r2, #73	; 0x49
 8010dc2:	d024      	beq.n	8010e0e <_strtod_l+0x356>
 8010dc4:	2a4e      	cmp	r2, #78	; 0x4e
 8010dc6:	f47f aed9 	bne.w	8010b7c <_strtod_l+0xc4>
 8010dca:	499f      	ldr	r1, [pc, #636]	; (8011048 <_strtod_l+0x590>)
 8010dcc:	a817      	add	r0, sp, #92	; 0x5c
 8010dce:	f001 feeb 	bl	8012ba8 <__match>
 8010dd2:	2800      	cmp	r0, #0
 8010dd4:	f43f aed2 	beq.w	8010b7c <_strtod_l+0xc4>
 8010dd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010dda:	781b      	ldrb	r3, [r3, #0]
 8010ddc:	2b28      	cmp	r3, #40	; 0x28
 8010dde:	d12d      	bne.n	8010e3c <_strtod_l+0x384>
 8010de0:	499a      	ldr	r1, [pc, #616]	; (801104c <_strtod_l+0x594>)
 8010de2:	aa1a      	add	r2, sp, #104	; 0x68
 8010de4:	a817      	add	r0, sp, #92	; 0x5c
 8010de6:	f001 fef3 	bl	8012bd0 <__hexnan>
 8010dea:	2805      	cmp	r0, #5
 8010dec:	d126      	bne.n	8010e3c <_strtod_l+0x384>
 8010dee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010df0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8010df4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010df8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010dfc:	e6a0      	b.n	8010b40 <_strtod_l+0x88>
 8010dfe:	210a      	movs	r1, #10
 8010e00:	fb01 2e0e 	mla	lr, r1, lr, r2
 8010e04:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010e08:	e7b9      	b.n	8010d7e <_strtod_l+0x2c6>
 8010e0a:	2a6e      	cmp	r2, #110	; 0x6e
 8010e0c:	e7db      	b.n	8010dc6 <_strtod_l+0x30e>
 8010e0e:	4990      	ldr	r1, [pc, #576]	; (8011050 <_strtod_l+0x598>)
 8010e10:	a817      	add	r0, sp, #92	; 0x5c
 8010e12:	f001 fec9 	bl	8012ba8 <__match>
 8010e16:	2800      	cmp	r0, #0
 8010e18:	f43f aeb0 	beq.w	8010b7c <_strtod_l+0xc4>
 8010e1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e1e:	498d      	ldr	r1, [pc, #564]	; (8011054 <_strtod_l+0x59c>)
 8010e20:	3b01      	subs	r3, #1
 8010e22:	a817      	add	r0, sp, #92	; 0x5c
 8010e24:	9317      	str	r3, [sp, #92]	; 0x5c
 8010e26:	f001 febf 	bl	8012ba8 <__match>
 8010e2a:	b910      	cbnz	r0, 8010e32 <_strtod_l+0x37a>
 8010e2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e2e:	3301      	adds	r3, #1
 8010e30:	9317      	str	r3, [sp, #92]	; 0x5c
 8010e32:	f8df b230 	ldr.w	fp, [pc, #560]	; 8011064 <_strtod_l+0x5ac>
 8010e36:	f04f 0a00 	mov.w	sl, #0
 8010e3a:	e681      	b.n	8010b40 <_strtod_l+0x88>
 8010e3c:	4886      	ldr	r0, [pc, #536]	; (8011058 <_strtod_l+0x5a0>)
 8010e3e:	f003 fb37 	bl	80144b0 <nan>
 8010e42:	ec5b ab10 	vmov	sl, fp, d0
 8010e46:	e67b      	b.n	8010b40 <_strtod_l+0x88>
 8010e48:	9b05      	ldr	r3, [sp, #20]
 8010e4a:	9807      	ldr	r0, [sp, #28]
 8010e4c:	1af3      	subs	r3, r6, r3
 8010e4e:	2f00      	cmp	r7, #0
 8010e50:	bf08      	it	eq
 8010e52:	462f      	moveq	r7, r5
 8010e54:	2d10      	cmp	r5, #16
 8010e56:	9306      	str	r3, [sp, #24]
 8010e58:	46a8      	mov	r8, r5
 8010e5a:	bfa8      	it	ge
 8010e5c:	f04f 0810 	movge.w	r8, #16
 8010e60:	f7ef fb80 	bl	8000564 <__aeabi_ui2d>
 8010e64:	2d09      	cmp	r5, #9
 8010e66:	4682      	mov	sl, r0
 8010e68:	468b      	mov	fp, r1
 8010e6a:	dd13      	ble.n	8010e94 <_strtod_l+0x3dc>
 8010e6c:	4b7b      	ldr	r3, [pc, #492]	; (801105c <_strtod_l+0x5a4>)
 8010e6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010e72:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010e76:	f7ef fbef 	bl	8000658 <__aeabi_dmul>
 8010e7a:	4682      	mov	sl, r0
 8010e7c:	4648      	mov	r0, r9
 8010e7e:	468b      	mov	fp, r1
 8010e80:	f7ef fb70 	bl	8000564 <__aeabi_ui2d>
 8010e84:	4602      	mov	r2, r0
 8010e86:	460b      	mov	r3, r1
 8010e88:	4650      	mov	r0, sl
 8010e8a:	4659      	mov	r1, fp
 8010e8c:	f7ef fa2e 	bl	80002ec <__adddf3>
 8010e90:	4682      	mov	sl, r0
 8010e92:	468b      	mov	fp, r1
 8010e94:	2d0f      	cmp	r5, #15
 8010e96:	dc38      	bgt.n	8010f0a <_strtod_l+0x452>
 8010e98:	9b06      	ldr	r3, [sp, #24]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	f43f ae50 	beq.w	8010b40 <_strtod_l+0x88>
 8010ea0:	dd24      	ble.n	8010eec <_strtod_l+0x434>
 8010ea2:	2b16      	cmp	r3, #22
 8010ea4:	dc0b      	bgt.n	8010ebe <_strtod_l+0x406>
 8010ea6:	496d      	ldr	r1, [pc, #436]	; (801105c <_strtod_l+0x5a4>)
 8010ea8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010eb0:	4652      	mov	r2, sl
 8010eb2:	465b      	mov	r3, fp
 8010eb4:	f7ef fbd0 	bl	8000658 <__aeabi_dmul>
 8010eb8:	4682      	mov	sl, r0
 8010eba:	468b      	mov	fp, r1
 8010ebc:	e640      	b.n	8010b40 <_strtod_l+0x88>
 8010ebe:	9a06      	ldr	r2, [sp, #24]
 8010ec0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	db20      	blt.n	8010f0a <_strtod_l+0x452>
 8010ec8:	4c64      	ldr	r4, [pc, #400]	; (801105c <_strtod_l+0x5a4>)
 8010eca:	f1c5 050f 	rsb	r5, r5, #15
 8010ece:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010ed2:	4652      	mov	r2, sl
 8010ed4:	465b      	mov	r3, fp
 8010ed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010eda:	f7ef fbbd 	bl	8000658 <__aeabi_dmul>
 8010ede:	9b06      	ldr	r3, [sp, #24]
 8010ee0:	1b5d      	subs	r5, r3, r5
 8010ee2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010ee6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010eea:	e7e3      	b.n	8010eb4 <_strtod_l+0x3fc>
 8010eec:	9b06      	ldr	r3, [sp, #24]
 8010eee:	3316      	adds	r3, #22
 8010ef0:	db0b      	blt.n	8010f0a <_strtod_l+0x452>
 8010ef2:	9b05      	ldr	r3, [sp, #20]
 8010ef4:	1b9e      	subs	r6, r3, r6
 8010ef6:	4b59      	ldr	r3, [pc, #356]	; (801105c <_strtod_l+0x5a4>)
 8010ef8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010efc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010f00:	4650      	mov	r0, sl
 8010f02:	4659      	mov	r1, fp
 8010f04:	f7ef fcd2 	bl	80008ac <__aeabi_ddiv>
 8010f08:	e7d6      	b.n	8010eb8 <_strtod_l+0x400>
 8010f0a:	9b06      	ldr	r3, [sp, #24]
 8010f0c:	eba5 0808 	sub.w	r8, r5, r8
 8010f10:	4498      	add	r8, r3
 8010f12:	f1b8 0f00 	cmp.w	r8, #0
 8010f16:	dd74      	ble.n	8011002 <_strtod_l+0x54a>
 8010f18:	f018 030f 	ands.w	r3, r8, #15
 8010f1c:	d00a      	beq.n	8010f34 <_strtod_l+0x47c>
 8010f1e:	494f      	ldr	r1, [pc, #316]	; (801105c <_strtod_l+0x5a4>)
 8010f20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010f24:	4652      	mov	r2, sl
 8010f26:	465b      	mov	r3, fp
 8010f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f2c:	f7ef fb94 	bl	8000658 <__aeabi_dmul>
 8010f30:	4682      	mov	sl, r0
 8010f32:	468b      	mov	fp, r1
 8010f34:	f038 080f 	bics.w	r8, r8, #15
 8010f38:	d04f      	beq.n	8010fda <_strtod_l+0x522>
 8010f3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010f3e:	dd22      	ble.n	8010f86 <_strtod_l+0x4ce>
 8010f40:	2500      	movs	r5, #0
 8010f42:	462e      	mov	r6, r5
 8010f44:	9507      	str	r5, [sp, #28]
 8010f46:	9505      	str	r5, [sp, #20]
 8010f48:	2322      	movs	r3, #34	; 0x22
 8010f4a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8011064 <_strtod_l+0x5ac>
 8010f4e:	6023      	str	r3, [r4, #0]
 8010f50:	f04f 0a00 	mov.w	sl, #0
 8010f54:	9b07      	ldr	r3, [sp, #28]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	f43f adf2 	beq.w	8010b40 <_strtod_l+0x88>
 8010f5c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f001 ff42 	bl	8012de8 <_Bfree>
 8010f64:	9905      	ldr	r1, [sp, #20]
 8010f66:	4620      	mov	r0, r4
 8010f68:	f001 ff3e 	bl	8012de8 <_Bfree>
 8010f6c:	4631      	mov	r1, r6
 8010f6e:	4620      	mov	r0, r4
 8010f70:	f001 ff3a 	bl	8012de8 <_Bfree>
 8010f74:	9907      	ldr	r1, [sp, #28]
 8010f76:	4620      	mov	r0, r4
 8010f78:	f001 ff36 	bl	8012de8 <_Bfree>
 8010f7c:	4629      	mov	r1, r5
 8010f7e:	4620      	mov	r0, r4
 8010f80:	f001 ff32 	bl	8012de8 <_Bfree>
 8010f84:	e5dc      	b.n	8010b40 <_strtod_l+0x88>
 8010f86:	4b36      	ldr	r3, [pc, #216]	; (8011060 <_strtod_l+0x5a8>)
 8010f88:	9304      	str	r3, [sp, #16]
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010f90:	4650      	mov	r0, sl
 8010f92:	4659      	mov	r1, fp
 8010f94:	4699      	mov	r9, r3
 8010f96:	f1b8 0f01 	cmp.w	r8, #1
 8010f9a:	dc21      	bgt.n	8010fe0 <_strtod_l+0x528>
 8010f9c:	b10b      	cbz	r3, 8010fa2 <_strtod_l+0x4ea>
 8010f9e:	4682      	mov	sl, r0
 8010fa0:	468b      	mov	fp, r1
 8010fa2:	4b2f      	ldr	r3, [pc, #188]	; (8011060 <_strtod_l+0x5a8>)
 8010fa4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010fa8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010fac:	4652      	mov	r2, sl
 8010fae:	465b      	mov	r3, fp
 8010fb0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010fb4:	f7ef fb50 	bl	8000658 <__aeabi_dmul>
 8010fb8:	4b2a      	ldr	r3, [pc, #168]	; (8011064 <_strtod_l+0x5ac>)
 8010fba:	460a      	mov	r2, r1
 8010fbc:	400b      	ands	r3, r1
 8010fbe:	492a      	ldr	r1, [pc, #168]	; (8011068 <_strtod_l+0x5b0>)
 8010fc0:	428b      	cmp	r3, r1
 8010fc2:	4682      	mov	sl, r0
 8010fc4:	d8bc      	bhi.n	8010f40 <_strtod_l+0x488>
 8010fc6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010fca:	428b      	cmp	r3, r1
 8010fcc:	bf86      	itte	hi
 8010fce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801106c <_strtod_l+0x5b4>
 8010fd2:	f04f 3aff 	movhi.w	sl, #4294967295
 8010fd6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010fda:	2300      	movs	r3, #0
 8010fdc:	9304      	str	r3, [sp, #16]
 8010fde:	e084      	b.n	80110ea <_strtod_l+0x632>
 8010fe0:	f018 0f01 	tst.w	r8, #1
 8010fe4:	d005      	beq.n	8010ff2 <_strtod_l+0x53a>
 8010fe6:	9b04      	ldr	r3, [sp, #16]
 8010fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fec:	f7ef fb34 	bl	8000658 <__aeabi_dmul>
 8010ff0:	2301      	movs	r3, #1
 8010ff2:	9a04      	ldr	r2, [sp, #16]
 8010ff4:	3208      	adds	r2, #8
 8010ff6:	f109 0901 	add.w	r9, r9, #1
 8010ffa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010ffe:	9204      	str	r2, [sp, #16]
 8011000:	e7c9      	b.n	8010f96 <_strtod_l+0x4de>
 8011002:	d0ea      	beq.n	8010fda <_strtod_l+0x522>
 8011004:	f1c8 0800 	rsb	r8, r8, #0
 8011008:	f018 020f 	ands.w	r2, r8, #15
 801100c:	d00a      	beq.n	8011024 <_strtod_l+0x56c>
 801100e:	4b13      	ldr	r3, [pc, #76]	; (801105c <_strtod_l+0x5a4>)
 8011010:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011014:	4650      	mov	r0, sl
 8011016:	4659      	mov	r1, fp
 8011018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101c:	f7ef fc46 	bl	80008ac <__aeabi_ddiv>
 8011020:	4682      	mov	sl, r0
 8011022:	468b      	mov	fp, r1
 8011024:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011028:	d0d7      	beq.n	8010fda <_strtod_l+0x522>
 801102a:	f1b8 0f1f 	cmp.w	r8, #31
 801102e:	dd1f      	ble.n	8011070 <_strtod_l+0x5b8>
 8011030:	2500      	movs	r5, #0
 8011032:	462e      	mov	r6, r5
 8011034:	9507      	str	r5, [sp, #28]
 8011036:	9505      	str	r5, [sp, #20]
 8011038:	2322      	movs	r3, #34	; 0x22
 801103a:	f04f 0a00 	mov.w	sl, #0
 801103e:	f04f 0b00 	mov.w	fp, #0
 8011042:	6023      	str	r3, [r4, #0]
 8011044:	e786      	b.n	8010f54 <_strtod_l+0x49c>
 8011046:	bf00      	nop
 8011048:	08016365 	.word	0x08016365
 801104c:	080163a4 	.word	0x080163a4
 8011050:	0801635d 	.word	0x0801635d
 8011054:	08016594 	.word	0x08016594
 8011058:	0801648f 	.word	0x0801648f
 801105c:	08016708 	.word	0x08016708
 8011060:	080166e0 	.word	0x080166e0
 8011064:	7ff00000 	.word	0x7ff00000
 8011068:	7ca00000 	.word	0x7ca00000
 801106c:	7fefffff 	.word	0x7fefffff
 8011070:	f018 0310 	ands.w	r3, r8, #16
 8011074:	bf18      	it	ne
 8011076:	236a      	movne	r3, #106	; 0x6a
 8011078:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8011428 <_strtod_l+0x970>
 801107c:	9304      	str	r3, [sp, #16]
 801107e:	4650      	mov	r0, sl
 8011080:	4659      	mov	r1, fp
 8011082:	2300      	movs	r3, #0
 8011084:	f018 0f01 	tst.w	r8, #1
 8011088:	d004      	beq.n	8011094 <_strtod_l+0x5dc>
 801108a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801108e:	f7ef fae3 	bl	8000658 <__aeabi_dmul>
 8011092:	2301      	movs	r3, #1
 8011094:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011098:	f109 0908 	add.w	r9, r9, #8
 801109c:	d1f2      	bne.n	8011084 <_strtod_l+0x5cc>
 801109e:	b10b      	cbz	r3, 80110a4 <_strtod_l+0x5ec>
 80110a0:	4682      	mov	sl, r0
 80110a2:	468b      	mov	fp, r1
 80110a4:	9b04      	ldr	r3, [sp, #16]
 80110a6:	b1c3      	cbz	r3, 80110da <_strtod_l+0x622>
 80110a8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80110ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	4659      	mov	r1, fp
 80110b4:	dd11      	ble.n	80110da <_strtod_l+0x622>
 80110b6:	2b1f      	cmp	r3, #31
 80110b8:	f340 8124 	ble.w	8011304 <_strtod_l+0x84c>
 80110bc:	2b34      	cmp	r3, #52	; 0x34
 80110be:	bfde      	ittt	le
 80110c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80110c4:	f04f 33ff 	movle.w	r3, #4294967295
 80110c8:	fa03 f202 	lslle.w	r2, r3, r2
 80110cc:	f04f 0a00 	mov.w	sl, #0
 80110d0:	bfcc      	ite	gt
 80110d2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80110d6:	ea02 0b01 	andle.w	fp, r2, r1
 80110da:	2200      	movs	r2, #0
 80110dc:	2300      	movs	r3, #0
 80110de:	4650      	mov	r0, sl
 80110e0:	4659      	mov	r1, fp
 80110e2:	f7ef fd21 	bl	8000b28 <__aeabi_dcmpeq>
 80110e6:	2800      	cmp	r0, #0
 80110e8:	d1a2      	bne.n	8011030 <_strtod_l+0x578>
 80110ea:	9b07      	ldr	r3, [sp, #28]
 80110ec:	9300      	str	r3, [sp, #0]
 80110ee:	9908      	ldr	r1, [sp, #32]
 80110f0:	462b      	mov	r3, r5
 80110f2:	463a      	mov	r2, r7
 80110f4:	4620      	mov	r0, r4
 80110f6:	f001 fedf 	bl	8012eb8 <__s2b>
 80110fa:	9007      	str	r0, [sp, #28]
 80110fc:	2800      	cmp	r0, #0
 80110fe:	f43f af1f 	beq.w	8010f40 <_strtod_l+0x488>
 8011102:	9b05      	ldr	r3, [sp, #20]
 8011104:	1b9e      	subs	r6, r3, r6
 8011106:	9b06      	ldr	r3, [sp, #24]
 8011108:	2b00      	cmp	r3, #0
 801110a:	bfb4      	ite	lt
 801110c:	4633      	movlt	r3, r6
 801110e:	2300      	movge	r3, #0
 8011110:	930c      	str	r3, [sp, #48]	; 0x30
 8011112:	9b06      	ldr	r3, [sp, #24]
 8011114:	2500      	movs	r5, #0
 8011116:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801111a:	9312      	str	r3, [sp, #72]	; 0x48
 801111c:	462e      	mov	r6, r5
 801111e:	9b07      	ldr	r3, [sp, #28]
 8011120:	4620      	mov	r0, r4
 8011122:	6859      	ldr	r1, [r3, #4]
 8011124:	f001 fe20 	bl	8012d68 <_Balloc>
 8011128:	9005      	str	r0, [sp, #20]
 801112a:	2800      	cmp	r0, #0
 801112c:	f43f af0c 	beq.w	8010f48 <_strtod_l+0x490>
 8011130:	9b07      	ldr	r3, [sp, #28]
 8011132:	691a      	ldr	r2, [r3, #16]
 8011134:	3202      	adds	r2, #2
 8011136:	f103 010c 	add.w	r1, r3, #12
 801113a:	0092      	lsls	r2, r2, #2
 801113c:	300c      	adds	r0, #12
 801113e:	f7fe fd6d 	bl	800fc1c <memcpy>
 8011142:	ec4b ab10 	vmov	d0, sl, fp
 8011146:	aa1a      	add	r2, sp, #104	; 0x68
 8011148:	a919      	add	r1, sp, #100	; 0x64
 801114a:	4620      	mov	r0, r4
 801114c:	f002 f9fa 	bl	8013544 <__d2b>
 8011150:	ec4b ab18 	vmov	d8, sl, fp
 8011154:	9018      	str	r0, [sp, #96]	; 0x60
 8011156:	2800      	cmp	r0, #0
 8011158:	f43f aef6 	beq.w	8010f48 <_strtod_l+0x490>
 801115c:	2101      	movs	r1, #1
 801115e:	4620      	mov	r0, r4
 8011160:	f001 ff44 	bl	8012fec <__i2b>
 8011164:	4606      	mov	r6, r0
 8011166:	2800      	cmp	r0, #0
 8011168:	f43f aeee 	beq.w	8010f48 <_strtod_l+0x490>
 801116c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801116e:	9904      	ldr	r1, [sp, #16]
 8011170:	2b00      	cmp	r3, #0
 8011172:	bfab      	itete	ge
 8011174:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8011176:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8011178:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801117a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801117e:	bfac      	ite	ge
 8011180:	eb03 0902 	addge.w	r9, r3, r2
 8011184:	1ad7      	sublt	r7, r2, r3
 8011186:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011188:	eba3 0801 	sub.w	r8, r3, r1
 801118c:	4490      	add	r8, r2
 801118e:	4ba1      	ldr	r3, [pc, #644]	; (8011414 <_strtod_l+0x95c>)
 8011190:	f108 38ff 	add.w	r8, r8, #4294967295
 8011194:	4598      	cmp	r8, r3
 8011196:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801119a:	f280 80c7 	bge.w	801132c <_strtod_l+0x874>
 801119e:	eba3 0308 	sub.w	r3, r3, r8
 80111a2:	2b1f      	cmp	r3, #31
 80111a4:	eba2 0203 	sub.w	r2, r2, r3
 80111a8:	f04f 0101 	mov.w	r1, #1
 80111ac:	f300 80b1 	bgt.w	8011312 <_strtod_l+0x85a>
 80111b0:	fa01 f303 	lsl.w	r3, r1, r3
 80111b4:	930d      	str	r3, [sp, #52]	; 0x34
 80111b6:	2300      	movs	r3, #0
 80111b8:	9308      	str	r3, [sp, #32]
 80111ba:	eb09 0802 	add.w	r8, r9, r2
 80111be:	9b04      	ldr	r3, [sp, #16]
 80111c0:	45c1      	cmp	r9, r8
 80111c2:	4417      	add	r7, r2
 80111c4:	441f      	add	r7, r3
 80111c6:	464b      	mov	r3, r9
 80111c8:	bfa8      	it	ge
 80111ca:	4643      	movge	r3, r8
 80111cc:	42bb      	cmp	r3, r7
 80111ce:	bfa8      	it	ge
 80111d0:	463b      	movge	r3, r7
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	bfc2      	ittt	gt
 80111d6:	eba8 0803 	subgt.w	r8, r8, r3
 80111da:	1aff      	subgt	r7, r7, r3
 80111dc:	eba9 0903 	subgt.w	r9, r9, r3
 80111e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	dd17      	ble.n	8011216 <_strtod_l+0x75e>
 80111e6:	4631      	mov	r1, r6
 80111e8:	461a      	mov	r2, r3
 80111ea:	4620      	mov	r0, r4
 80111ec:	f001 ffbe 	bl	801316c <__pow5mult>
 80111f0:	4606      	mov	r6, r0
 80111f2:	2800      	cmp	r0, #0
 80111f4:	f43f aea8 	beq.w	8010f48 <_strtod_l+0x490>
 80111f8:	4601      	mov	r1, r0
 80111fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80111fc:	4620      	mov	r0, r4
 80111fe:	f001 ff0b 	bl	8013018 <__multiply>
 8011202:	900b      	str	r0, [sp, #44]	; 0x2c
 8011204:	2800      	cmp	r0, #0
 8011206:	f43f ae9f 	beq.w	8010f48 <_strtod_l+0x490>
 801120a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801120c:	4620      	mov	r0, r4
 801120e:	f001 fdeb 	bl	8012de8 <_Bfree>
 8011212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011214:	9318      	str	r3, [sp, #96]	; 0x60
 8011216:	f1b8 0f00 	cmp.w	r8, #0
 801121a:	f300 808c 	bgt.w	8011336 <_strtod_l+0x87e>
 801121e:	9b06      	ldr	r3, [sp, #24]
 8011220:	2b00      	cmp	r3, #0
 8011222:	dd08      	ble.n	8011236 <_strtod_l+0x77e>
 8011224:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011226:	9905      	ldr	r1, [sp, #20]
 8011228:	4620      	mov	r0, r4
 801122a:	f001 ff9f 	bl	801316c <__pow5mult>
 801122e:	9005      	str	r0, [sp, #20]
 8011230:	2800      	cmp	r0, #0
 8011232:	f43f ae89 	beq.w	8010f48 <_strtod_l+0x490>
 8011236:	2f00      	cmp	r7, #0
 8011238:	dd08      	ble.n	801124c <_strtod_l+0x794>
 801123a:	9905      	ldr	r1, [sp, #20]
 801123c:	463a      	mov	r2, r7
 801123e:	4620      	mov	r0, r4
 8011240:	f001 ffee 	bl	8013220 <__lshift>
 8011244:	9005      	str	r0, [sp, #20]
 8011246:	2800      	cmp	r0, #0
 8011248:	f43f ae7e 	beq.w	8010f48 <_strtod_l+0x490>
 801124c:	f1b9 0f00 	cmp.w	r9, #0
 8011250:	dd08      	ble.n	8011264 <_strtod_l+0x7ac>
 8011252:	4631      	mov	r1, r6
 8011254:	464a      	mov	r2, r9
 8011256:	4620      	mov	r0, r4
 8011258:	f001 ffe2 	bl	8013220 <__lshift>
 801125c:	4606      	mov	r6, r0
 801125e:	2800      	cmp	r0, #0
 8011260:	f43f ae72 	beq.w	8010f48 <_strtod_l+0x490>
 8011264:	9a05      	ldr	r2, [sp, #20]
 8011266:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011268:	4620      	mov	r0, r4
 801126a:	f002 f865 	bl	8013338 <__mdiff>
 801126e:	4605      	mov	r5, r0
 8011270:	2800      	cmp	r0, #0
 8011272:	f43f ae69 	beq.w	8010f48 <_strtod_l+0x490>
 8011276:	68c3      	ldr	r3, [r0, #12]
 8011278:	930b      	str	r3, [sp, #44]	; 0x2c
 801127a:	2300      	movs	r3, #0
 801127c:	60c3      	str	r3, [r0, #12]
 801127e:	4631      	mov	r1, r6
 8011280:	f002 f83e 	bl	8013300 <__mcmp>
 8011284:	2800      	cmp	r0, #0
 8011286:	da60      	bge.n	801134a <_strtod_l+0x892>
 8011288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801128a:	ea53 030a 	orrs.w	r3, r3, sl
 801128e:	f040 8082 	bne.w	8011396 <_strtod_l+0x8de>
 8011292:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011296:	2b00      	cmp	r3, #0
 8011298:	d17d      	bne.n	8011396 <_strtod_l+0x8de>
 801129a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801129e:	0d1b      	lsrs	r3, r3, #20
 80112a0:	051b      	lsls	r3, r3, #20
 80112a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80112a6:	d976      	bls.n	8011396 <_strtod_l+0x8de>
 80112a8:	696b      	ldr	r3, [r5, #20]
 80112aa:	b913      	cbnz	r3, 80112b2 <_strtod_l+0x7fa>
 80112ac:	692b      	ldr	r3, [r5, #16]
 80112ae:	2b01      	cmp	r3, #1
 80112b0:	dd71      	ble.n	8011396 <_strtod_l+0x8de>
 80112b2:	4629      	mov	r1, r5
 80112b4:	2201      	movs	r2, #1
 80112b6:	4620      	mov	r0, r4
 80112b8:	f001 ffb2 	bl	8013220 <__lshift>
 80112bc:	4631      	mov	r1, r6
 80112be:	4605      	mov	r5, r0
 80112c0:	f002 f81e 	bl	8013300 <__mcmp>
 80112c4:	2800      	cmp	r0, #0
 80112c6:	dd66      	ble.n	8011396 <_strtod_l+0x8de>
 80112c8:	9904      	ldr	r1, [sp, #16]
 80112ca:	4a53      	ldr	r2, [pc, #332]	; (8011418 <_strtod_l+0x960>)
 80112cc:	465b      	mov	r3, fp
 80112ce:	2900      	cmp	r1, #0
 80112d0:	f000 8081 	beq.w	80113d6 <_strtod_l+0x91e>
 80112d4:	ea02 010b 	and.w	r1, r2, fp
 80112d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80112dc:	dc7b      	bgt.n	80113d6 <_strtod_l+0x91e>
 80112de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80112e2:	f77f aea9 	ble.w	8011038 <_strtod_l+0x580>
 80112e6:	4b4d      	ldr	r3, [pc, #308]	; (801141c <_strtod_l+0x964>)
 80112e8:	4650      	mov	r0, sl
 80112ea:	4659      	mov	r1, fp
 80112ec:	2200      	movs	r2, #0
 80112ee:	f7ef f9b3 	bl	8000658 <__aeabi_dmul>
 80112f2:	460b      	mov	r3, r1
 80112f4:	4303      	orrs	r3, r0
 80112f6:	bf08      	it	eq
 80112f8:	2322      	moveq	r3, #34	; 0x22
 80112fa:	4682      	mov	sl, r0
 80112fc:	468b      	mov	fp, r1
 80112fe:	bf08      	it	eq
 8011300:	6023      	streq	r3, [r4, #0]
 8011302:	e62b      	b.n	8010f5c <_strtod_l+0x4a4>
 8011304:	f04f 32ff 	mov.w	r2, #4294967295
 8011308:	fa02 f303 	lsl.w	r3, r2, r3
 801130c:	ea03 0a0a 	and.w	sl, r3, sl
 8011310:	e6e3      	b.n	80110da <_strtod_l+0x622>
 8011312:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011316:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801131a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801131e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011322:	fa01 f308 	lsl.w	r3, r1, r8
 8011326:	9308      	str	r3, [sp, #32]
 8011328:	910d      	str	r1, [sp, #52]	; 0x34
 801132a:	e746      	b.n	80111ba <_strtod_l+0x702>
 801132c:	2300      	movs	r3, #0
 801132e:	9308      	str	r3, [sp, #32]
 8011330:	2301      	movs	r3, #1
 8011332:	930d      	str	r3, [sp, #52]	; 0x34
 8011334:	e741      	b.n	80111ba <_strtod_l+0x702>
 8011336:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011338:	4642      	mov	r2, r8
 801133a:	4620      	mov	r0, r4
 801133c:	f001 ff70 	bl	8013220 <__lshift>
 8011340:	9018      	str	r0, [sp, #96]	; 0x60
 8011342:	2800      	cmp	r0, #0
 8011344:	f47f af6b 	bne.w	801121e <_strtod_l+0x766>
 8011348:	e5fe      	b.n	8010f48 <_strtod_l+0x490>
 801134a:	465f      	mov	r7, fp
 801134c:	d16e      	bne.n	801142c <_strtod_l+0x974>
 801134e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011350:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011354:	b342      	cbz	r2, 80113a8 <_strtod_l+0x8f0>
 8011356:	4a32      	ldr	r2, [pc, #200]	; (8011420 <_strtod_l+0x968>)
 8011358:	4293      	cmp	r3, r2
 801135a:	d128      	bne.n	80113ae <_strtod_l+0x8f6>
 801135c:	9b04      	ldr	r3, [sp, #16]
 801135e:	4651      	mov	r1, sl
 8011360:	b1eb      	cbz	r3, 801139e <_strtod_l+0x8e6>
 8011362:	4b2d      	ldr	r3, [pc, #180]	; (8011418 <_strtod_l+0x960>)
 8011364:	403b      	ands	r3, r7
 8011366:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801136a:	f04f 32ff 	mov.w	r2, #4294967295
 801136e:	d819      	bhi.n	80113a4 <_strtod_l+0x8ec>
 8011370:	0d1b      	lsrs	r3, r3, #20
 8011372:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011376:	fa02 f303 	lsl.w	r3, r2, r3
 801137a:	4299      	cmp	r1, r3
 801137c:	d117      	bne.n	80113ae <_strtod_l+0x8f6>
 801137e:	4b29      	ldr	r3, [pc, #164]	; (8011424 <_strtod_l+0x96c>)
 8011380:	429f      	cmp	r7, r3
 8011382:	d102      	bne.n	801138a <_strtod_l+0x8d2>
 8011384:	3101      	adds	r1, #1
 8011386:	f43f addf 	beq.w	8010f48 <_strtod_l+0x490>
 801138a:	4b23      	ldr	r3, [pc, #140]	; (8011418 <_strtod_l+0x960>)
 801138c:	403b      	ands	r3, r7
 801138e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011392:	f04f 0a00 	mov.w	sl, #0
 8011396:	9b04      	ldr	r3, [sp, #16]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d1a4      	bne.n	80112e6 <_strtod_l+0x82e>
 801139c:	e5de      	b.n	8010f5c <_strtod_l+0x4a4>
 801139e:	f04f 33ff 	mov.w	r3, #4294967295
 80113a2:	e7ea      	b.n	801137a <_strtod_l+0x8c2>
 80113a4:	4613      	mov	r3, r2
 80113a6:	e7e8      	b.n	801137a <_strtod_l+0x8c2>
 80113a8:	ea53 030a 	orrs.w	r3, r3, sl
 80113ac:	d08c      	beq.n	80112c8 <_strtod_l+0x810>
 80113ae:	9b08      	ldr	r3, [sp, #32]
 80113b0:	b1db      	cbz	r3, 80113ea <_strtod_l+0x932>
 80113b2:	423b      	tst	r3, r7
 80113b4:	d0ef      	beq.n	8011396 <_strtod_l+0x8de>
 80113b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113b8:	9a04      	ldr	r2, [sp, #16]
 80113ba:	4650      	mov	r0, sl
 80113bc:	4659      	mov	r1, fp
 80113be:	b1c3      	cbz	r3, 80113f2 <_strtod_l+0x93a>
 80113c0:	f7ff fb5b 	bl	8010a7a <sulp>
 80113c4:	4602      	mov	r2, r0
 80113c6:	460b      	mov	r3, r1
 80113c8:	ec51 0b18 	vmov	r0, r1, d8
 80113cc:	f7ee ff8e 	bl	80002ec <__adddf3>
 80113d0:	4682      	mov	sl, r0
 80113d2:	468b      	mov	fp, r1
 80113d4:	e7df      	b.n	8011396 <_strtod_l+0x8de>
 80113d6:	4013      	ands	r3, r2
 80113d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80113dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80113e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80113e4:	f04f 3aff 	mov.w	sl, #4294967295
 80113e8:	e7d5      	b.n	8011396 <_strtod_l+0x8de>
 80113ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80113ec:	ea13 0f0a 	tst.w	r3, sl
 80113f0:	e7e0      	b.n	80113b4 <_strtod_l+0x8fc>
 80113f2:	f7ff fb42 	bl	8010a7a <sulp>
 80113f6:	4602      	mov	r2, r0
 80113f8:	460b      	mov	r3, r1
 80113fa:	ec51 0b18 	vmov	r0, r1, d8
 80113fe:	f7ee ff73 	bl	80002e8 <__aeabi_dsub>
 8011402:	2200      	movs	r2, #0
 8011404:	2300      	movs	r3, #0
 8011406:	4682      	mov	sl, r0
 8011408:	468b      	mov	fp, r1
 801140a:	f7ef fb8d 	bl	8000b28 <__aeabi_dcmpeq>
 801140e:	2800      	cmp	r0, #0
 8011410:	d0c1      	beq.n	8011396 <_strtod_l+0x8de>
 8011412:	e611      	b.n	8011038 <_strtod_l+0x580>
 8011414:	fffffc02 	.word	0xfffffc02
 8011418:	7ff00000 	.word	0x7ff00000
 801141c:	39500000 	.word	0x39500000
 8011420:	000fffff 	.word	0x000fffff
 8011424:	7fefffff 	.word	0x7fefffff
 8011428:	080163b8 	.word	0x080163b8
 801142c:	4631      	mov	r1, r6
 801142e:	4628      	mov	r0, r5
 8011430:	f002 f8e4 	bl	80135fc <__ratio>
 8011434:	ec59 8b10 	vmov	r8, r9, d0
 8011438:	ee10 0a10 	vmov	r0, s0
 801143c:	2200      	movs	r2, #0
 801143e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011442:	4649      	mov	r1, r9
 8011444:	f7ef fb84 	bl	8000b50 <__aeabi_dcmple>
 8011448:	2800      	cmp	r0, #0
 801144a:	d07a      	beq.n	8011542 <_strtod_l+0xa8a>
 801144c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801144e:	2b00      	cmp	r3, #0
 8011450:	d04a      	beq.n	80114e8 <_strtod_l+0xa30>
 8011452:	4b95      	ldr	r3, [pc, #596]	; (80116a8 <_strtod_l+0xbf0>)
 8011454:	2200      	movs	r2, #0
 8011456:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801145a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80116a8 <_strtod_l+0xbf0>
 801145e:	f04f 0800 	mov.w	r8, #0
 8011462:	4b92      	ldr	r3, [pc, #584]	; (80116ac <_strtod_l+0xbf4>)
 8011464:	403b      	ands	r3, r7
 8011466:	930d      	str	r3, [sp, #52]	; 0x34
 8011468:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801146a:	4b91      	ldr	r3, [pc, #580]	; (80116b0 <_strtod_l+0xbf8>)
 801146c:	429a      	cmp	r2, r3
 801146e:	f040 80b0 	bne.w	80115d2 <_strtod_l+0xb1a>
 8011472:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011476:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801147a:	ec4b ab10 	vmov	d0, sl, fp
 801147e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011482:	f001 ffe3 	bl	801344c <__ulp>
 8011486:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801148a:	ec53 2b10 	vmov	r2, r3, d0
 801148e:	f7ef f8e3 	bl	8000658 <__aeabi_dmul>
 8011492:	4652      	mov	r2, sl
 8011494:	465b      	mov	r3, fp
 8011496:	f7ee ff29 	bl	80002ec <__adddf3>
 801149a:	460b      	mov	r3, r1
 801149c:	4983      	ldr	r1, [pc, #524]	; (80116ac <_strtod_l+0xbf4>)
 801149e:	4a85      	ldr	r2, [pc, #532]	; (80116b4 <_strtod_l+0xbfc>)
 80114a0:	4019      	ands	r1, r3
 80114a2:	4291      	cmp	r1, r2
 80114a4:	4682      	mov	sl, r0
 80114a6:	d960      	bls.n	801156a <_strtod_l+0xab2>
 80114a8:	ee18 3a90 	vmov	r3, s17
 80114ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80114b0:	4293      	cmp	r3, r2
 80114b2:	d104      	bne.n	80114be <_strtod_l+0xa06>
 80114b4:	ee18 3a10 	vmov	r3, s16
 80114b8:	3301      	adds	r3, #1
 80114ba:	f43f ad45 	beq.w	8010f48 <_strtod_l+0x490>
 80114be:	f8df b200 	ldr.w	fp, [pc, #512]	; 80116c0 <_strtod_l+0xc08>
 80114c2:	f04f 3aff 	mov.w	sl, #4294967295
 80114c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80114c8:	4620      	mov	r0, r4
 80114ca:	f001 fc8d 	bl	8012de8 <_Bfree>
 80114ce:	9905      	ldr	r1, [sp, #20]
 80114d0:	4620      	mov	r0, r4
 80114d2:	f001 fc89 	bl	8012de8 <_Bfree>
 80114d6:	4631      	mov	r1, r6
 80114d8:	4620      	mov	r0, r4
 80114da:	f001 fc85 	bl	8012de8 <_Bfree>
 80114de:	4629      	mov	r1, r5
 80114e0:	4620      	mov	r0, r4
 80114e2:	f001 fc81 	bl	8012de8 <_Bfree>
 80114e6:	e61a      	b.n	801111e <_strtod_l+0x666>
 80114e8:	f1ba 0f00 	cmp.w	sl, #0
 80114ec:	d11b      	bne.n	8011526 <_strtod_l+0xa6e>
 80114ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80114f2:	b9f3      	cbnz	r3, 8011532 <_strtod_l+0xa7a>
 80114f4:	4b6c      	ldr	r3, [pc, #432]	; (80116a8 <_strtod_l+0xbf0>)
 80114f6:	2200      	movs	r2, #0
 80114f8:	4640      	mov	r0, r8
 80114fa:	4649      	mov	r1, r9
 80114fc:	f7ef fb1e 	bl	8000b3c <__aeabi_dcmplt>
 8011500:	b9d0      	cbnz	r0, 8011538 <_strtod_l+0xa80>
 8011502:	4640      	mov	r0, r8
 8011504:	4649      	mov	r1, r9
 8011506:	4b6c      	ldr	r3, [pc, #432]	; (80116b8 <_strtod_l+0xc00>)
 8011508:	2200      	movs	r2, #0
 801150a:	f7ef f8a5 	bl	8000658 <__aeabi_dmul>
 801150e:	4680      	mov	r8, r0
 8011510:	4689      	mov	r9, r1
 8011512:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011516:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801151a:	9315      	str	r3, [sp, #84]	; 0x54
 801151c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011520:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011524:	e79d      	b.n	8011462 <_strtod_l+0x9aa>
 8011526:	f1ba 0f01 	cmp.w	sl, #1
 801152a:	d102      	bne.n	8011532 <_strtod_l+0xa7a>
 801152c:	2f00      	cmp	r7, #0
 801152e:	f43f ad83 	beq.w	8011038 <_strtod_l+0x580>
 8011532:	4b62      	ldr	r3, [pc, #392]	; (80116bc <_strtod_l+0xc04>)
 8011534:	2200      	movs	r2, #0
 8011536:	e78e      	b.n	8011456 <_strtod_l+0x99e>
 8011538:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80116b8 <_strtod_l+0xc00>
 801153c:	f04f 0800 	mov.w	r8, #0
 8011540:	e7e7      	b.n	8011512 <_strtod_l+0xa5a>
 8011542:	4b5d      	ldr	r3, [pc, #372]	; (80116b8 <_strtod_l+0xc00>)
 8011544:	4640      	mov	r0, r8
 8011546:	4649      	mov	r1, r9
 8011548:	2200      	movs	r2, #0
 801154a:	f7ef f885 	bl	8000658 <__aeabi_dmul>
 801154e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011550:	4680      	mov	r8, r0
 8011552:	4689      	mov	r9, r1
 8011554:	b933      	cbnz	r3, 8011564 <_strtod_l+0xaac>
 8011556:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801155a:	900e      	str	r0, [sp, #56]	; 0x38
 801155c:	930f      	str	r3, [sp, #60]	; 0x3c
 801155e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011562:	e7dd      	b.n	8011520 <_strtod_l+0xa68>
 8011564:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8011568:	e7f9      	b.n	801155e <_strtod_l+0xaa6>
 801156a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801156e:	9b04      	ldr	r3, [sp, #16]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d1a8      	bne.n	80114c6 <_strtod_l+0xa0e>
 8011574:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011578:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801157a:	0d1b      	lsrs	r3, r3, #20
 801157c:	051b      	lsls	r3, r3, #20
 801157e:	429a      	cmp	r2, r3
 8011580:	d1a1      	bne.n	80114c6 <_strtod_l+0xa0e>
 8011582:	4640      	mov	r0, r8
 8011584:	4649      	mov	r1, r9
 8011586:	f7ef fbc7 	bl	8000d18 <__aeabi_d2lz>
 801158a:	f7ef f837 	bl	80005fc <__aeabi_l2d>
 801158e:	4602      	mov	r2, r0
 8011590:	460b      	mov	r3, r1
 8011592:	4640      	mov	r0, r8
 8011594:	4649      	mov	r1, r9
 8011596:	f7ee fea7 	bl	80002e8 <__aeabi_dsub>
 801159a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801159c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80115a0:	ea43 030a 	orr.w	r3, r3, sl
 80115a4:	4313      	orrs	r3, r2
 80115a6:	4680      	mov	r8, r0
 80115a8:	4689      	mov	r9, r1
 80115aa:	d055      	beq.n	8011658 <_strtod_l+0xba0>
 80115ac:	a336      	add	r3, pc, #216	; (adr r3, 8011688 <_strtod_l+0xbd0>)
 80115ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b2:	f7ef fac3 	bl	8000b3c <__aeabi_dcmplt>
 80115b6:	2800      	cmp	r0, #0
 80115b8:	f47f acd0 	bne.w	8010f5c <_strtod_l+0x4a4>
 80115bc:	a334      	add	r3, pc, #208	; (adr r3, 8011690 <_strtod_l+0xbd8>)
 80115be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c2:	4640      	mov	r0, r8
 80115c4:	4649      	mov	r1, r9
 80115c6:	f7ef fad7 	bl	8000b78 <__aeabi_dcmpgt>
 80115ca:	2800      	cmp	r0, #0
 80115cc:	f43f af7b 	beq.w	80114c6 <_strtod_l+0xa0e>
 80115d0:	e4c4      	b.n	8010f5c <_strtod_l+0x4a4>
 80115d2:	9b04      	ldr	r3, [sp, #16]
 80115d4:	b333      	cbz	r3, 8011624 <_strtod_l+0xb6c>
 80115d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80115dc:	d822      	bhi.n	8011624 <_strtod_l+0xb6c>
 80115de:	a32e      	add	r3, pc, #184	; (adr r3, 8011698 <_strtod_l+0xbe0>)
 80115e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e4:	4640      	mov	r0, r8
 80115e6:	4649      	mov	r1, r9
 80115e8:	f7ef fab2 	bl	8000b50 <__aeabi_dcmple>
 80115ec:	b1a0      	cbz	r0, 8011618 <_strtod_l+0xb60>
 80115ee:	4649      	mov	r1, r9
 80115f0:	4640      	mov	r0, r8
 80115f2:	f7ef fb09 	bl	8000c08 <__aeabi_d2uiz>
 80115f6:	2801      	cmp	r0, #1
 80115f8:	bf38      	it	cc
 80115fa:	2001      	movcc	r0, #1
 80115fc:	f7ee ffb2 	bl	8000564 <__aeabi_ui2d>
 8011600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011602:	4680      	mov	r8, r0
 8011604:	4689      	mov	r9, r1
 8011606:	bb23      	cbnz	r3, 8011652 <_strtod_l+0xb9a>
 8011608:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801160c:	9010      	str	r0, [sp, #64]	; 0x40
 801160e:	9311      	str	r3, [sp, #68]	; 0x44
 8011610:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011614:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801161a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801161c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011620:	1a9b      	subs	r3, r3, r2
 8011622:	9309      	str	r3, [sp, #36]	; 0x24
 8011624:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011628:	eeb0 0a48 	vmov.f32	s0, s16
 801162c:	eef0 0a68 	vmov.f32	s1, s17
 8011630:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011634:	f001 ff0a 	bl	801344c <__ulp>
 8011638:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801163c:	ec53 2b10 	vmov	r2, r3, d0
 8011640:	f7ef f80a 	bl	8000658 <__aeabi_dmul>
 8011644:	ec53 2b18 	vmov	r2, r3, d8
 8011648:	f7ee fe50 	bl	80002ec <__adddf3>
 801164c:	4682      	mov	sl, r0
 801164e:	468b      	mov	fp, r1
 8011650:	e78d      	b.n	801156e <_strtod_l+0xab6>
 8011652:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8011656:	e7db      	b.n	8011610 <_strtod_l+0xb58>
 8011658:	a311      	add	r3, pc, #68	; (adr r3, 80116a0 <_strtod_l+0xbe8>)
 801165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801165e:	f7ef fa6d 	bl	8000b3c <__aeabi_dcmplt>
 8011662:	e7b2      	b.n	80115ca <_strtod_l+0xb12>
 8011664:	2300      	movs	r3, #0
 8011666:	930a      	str	r3, [sp, #40]	; 0x28
 8011668:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801166a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801166c:	6013      	str	r3, [r2, #0]
 801166e:	f7ff ba6b 	b.w	8010b48 <_strtod_l+0x90>
 8011672:	2a65      	cmp	r2, #101	; 0x65
 8011674:	f43f ab5f 	beq.w	8010d36 <_strtod_l+0x27e>
 8011678:	2a45      	cmp	r2, #69	; 0x45
 801167a:	f43f ab5c 	beq.w	8010d36 <_strtod_l+0x27e>
 801167e:	2301      	movs	r3, #1
 8011680:	f7ff bb94 	b.w	8010dac <_strtod_l+0x2f4>
 8011684:	f3af 8000 	nop.w
 8011688:	94a03595 	.word	0x94a03595
 801168c:	3fdfffff 	.word	0x3fdfffff
 8011690:	35afe535 	.word	0x35afe535
 8011694:	3fe00000 	.word	0x3fe00000
 8011698:	ffc00000 	.word	0xffc00000
 801169c:	41dfffff 	.word	0x41dfffff
 80116a0:	94a03595 	.word	0x94a03595
 80116a4:	3fcfffff 	.word	0x3fcfffff
 80116a8:	3ff00000 	.word	0x3ff00000
 80116ac:	7ff00000 	.word	0x7ff00000
 80116b0:	7fe00000 	.word	0x7fe00000
 80116b4:	7c9fffff 	.word	0x7c9fffff
 80116b8:	3fe00000 	.word	0x3fe00000
 80116bc:	bff00000 	.word	0xbff00000
 80116c0:	7fefffff 	.word	0x7fefffff

080116c4 <_strtod_r>:
 80116c4:	4b01      	ldr	r3, [pc, #4]	; (80116cc <_strtod_r+0x8>)
 80116c6:	f7ff b9f7 	b.w	8010ab8 <_strtod_l>
 80116ca:	bf00      	nop
 80116cc:	20000448 	.word	0x20000448

080116d0 <strtok>:
 80116d0:	4b16      	ldr	r3, [pc, #88]	; (801172c <strtok+0x5c>)
 80116d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80116d4:	681e      	ldr	r6, [r3, #0]
 80116d6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80116d8:	4605      	mov	r5, r0
 80116da:	b9fc      	cbnz	r4, 801171c <strtok+0x4c>
 80116dc:	2050      	movs	r0, #80	; 0x50
 80116de:	9101      	str	r1, [sp, #4]
 80116e0:	f001 fb28 	bl	8012d34 <malloc>
 80116e4:	9901      	ldr	r1, [sp, #4]
 80116e6:	65b0      	str	r0, [r6, #88]	; 0x58
 80116e8:	4602      	mov	r2, r0
 80116ea:	b920      	cbnz	r0, 80116f6 <strtok+0x26>
 80116ec:	4b10      	ldr	r3, [pc, #64]	; (8011730 <strtok+0x60>)
 80116ee:	4811      	ldr	r0, [pc, #68]	; (8011734 <strtok+0x64>)
 80116f0:	2157      	movs	r1, #87	; 0x57
 80116f2:	f000 f8df 	bl	80118b4 <__assert_func>
 80116f6:	e9c0 4400 	strd	r4, r4, [r0]
 80116fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80116fe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011702:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011706:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801170a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801170e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011712:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011716:	6184      	str	r4, [r0, #24]
 8011718:	7704      	strb	r4, [r0, #28]
 801171a:	6244      	str	r4, [r0, #36]	; 0x24
 801171c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801171e:	2301      	movs	r3, #1
 8011720:	4628      	mov	r0, r5
 8011722:	b002      	add	sp, #8
 8011724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011728:	f000 b806 	b.w	8011738 <__strtok_r>
 801172c:	200003e0 	.word	0x200003e0
 8011730:	080163e0 	.word	0x080163e0
 8011734:	080163f7 	.word	0x080163f7

08011738 <__strtok_r>:
 8011738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801173a:	b908      	cbnz	r0, 8011740 <__strtok_r+0x8>
 801173c:	6810      	ldr	r0, [r2, #0]
 801173e:	b188      	cbz	r0, 8011764 <__strtok_r+0x2c>
 8011740:	4604      	mov	r4, r0
 8011742:	4620      	mov	r0, r4
 8011744:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011748:	460f      	mov	r7, r1
 801174a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801174e:	b91e      	cbnz	r6, 8011758 <__strtok_r+0x20>
 8011750:	b965      	cbnz	r5, 801176c <__strtok_r+0x34>
 8011752:	6015      	str	r5, [r2, #0]
 8011754:	4628      	mov	r0, r5
 8011756:	e005      	b.n	8011764 <__strtok_r+0x2c>
 8011758:	42b5      	cmp	r5, r6
 801175a:	d1f6      	bne.n	801174a <__strtok_r+0x12>
 801175c:	2b00      	cmp	r3, #0
 801175e:	d1f0      	bne.n	8011742 <__strtok_r+0xa>
 8011760:	6014      	str	r4, [r2, #0]
 8011762:	7003      	strb	r3, [r0, #0]
 8011764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011766:	461c      	mov	r4, r3
 8011768:	e00c      	b.n	8011784 <__strtok_r+0x4c>
 801176a:	b915      	cbnz	r5, 8011772 <__strtok_r+0x3a>
 801176c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011770:	460e      	mov	r6, r1
 8011772:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011776:	42ab      	cmp	r3, r5
 8011778:	d1f7      	bne.n	801176a <__strtok_r+0x32>
 801177a:	2b00      	cmp	r3, #0
 801177c:	d0f3      	beq.n	8011766 <__strtok_r+0x2e>
 801177e:	2300      	movs	r3, #0
 8011780:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011784:	6014      	str	r4, [r2, #0]
 8011786:	e7ed      	b.n	8011764 <__strtok_r+0x2c>

08011788 <_strtol_l.constprop.0>:
 8011788:	2b01      	cmp	r3, #1
 801178a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801178e:	d001      	beq.n	8011794 <_strtol_l.constprop.0+0xc>
 8011790:	2b24      	cmp	r3, #36	; 0x24
 8011792:	d906      	bls.n	80117a2 <_strtol_l.constprop.0+0x1a>
 8011794:	f7fe fa18 	bl	800fbc8 <__errno>
 8011798:	2316      	movs	r3, #22
 801179a:	6003      	str	r3, [r0, #0]
 801179c:	2000      	movs	r0, #0
 801179e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011888 <_strtol_l.constprop.0+0x100>
 80117a6:	460d      	mov	r5, r1
 80117a8:	462e      	mov	r6, r5
 80117aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80117ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 80117b2:	f017 0708 	ands.w	r7, r7, #8
 80117b6:	d1f7      	bne.n	80117a8 <_strtol_l.constprop.0+0x20>
 80117b8:	2c2d      	cmp	r4, #45	; 0x2d
 80117ba:	d132      	bne.n	8011822 <_strtol_l.constprop.0+0x9a>
 80117bc:	782c      	ldrb	r4, [r5, #0]
 80117be:	2701      	movs	r7, #1
 80117c0:	1cb5      	adds	r5, r6, #2
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d05b      	beq.n	801187e <_strtol_l.constprop.0+0xf6>
 80117c6:	2b10      	cmp	r3, #16
 80117c8:	d109      	bne.n	80117de <_strtol_l.constprop.0+0x56>
 80117ca:	2c30      	cmp	r4, #48	; 0x30
 80117cc:	d107      	bne.n	80117de <_strtol_l.constprop.0+0x56>
 80117ce:	782c      	ldrb	r4, [r5, #0]
 80117d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80117d4:	2c58      	cmp	r4, #88	; 0x58
 80117d6:	d14d      	bne.n	8011874 <_strtol_l.constprop.0+0xec>
 80117d8:	786c      	ldrb	r4, [r5, #1]
 80117da:	2310      	movs	r3, #16
 80117dc:	3502      	adds	r5, #2
 80117de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80117e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80117e6:	f04f 0c00 	mov.w	ip, #0
 80117ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80117ee:	4666      	mov	r6, ip
 80117f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80117f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80117f8:	f1be 0f09 	cmp.w	lr, #9
 80117fc:	d816      	bhi.n	801182c <_strtol_l.constprop.0+0xa4>
 80117fe:	4674      	mov	r4, lr
 8011800:	42a3      	cmp	r3, r4
 8011802:	dd24      	ble.n	801184e <_strtol_l.constprop.0+0xc6>
 8011804:	f1bc 0f00 	cmp.w	ip, #0
 8011808:	db1e      	blt.n	8011848 <_strtol_l.constprop.0+0xc0>
 801180a:	45b1      	cmp	r9, r6
 801180c:	d31c      	bcc.n	8011848 <_strtol_l.constprop.0+0xc0>
 801180e:	d101      	bne.n	8011814 <_strtol_l.constprop.0+0x8c>
 8011810:	45a2      	cmp	sl, r4
 8011812:	db19      	blt.n	8011848 <_strtol_l.constprop.0+0xc0>
 8011814:	fb06 4603 	mla	r6, r6, r3, r4
 8011818:	f04f 0c01 	mov.w	ip, #1
 801181c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011820:	e7e8      	b.n	80117f4 <_strtol_l.constprop.0+0x6c>
 8011822:	2c2b      	cmp	r4, #43	; 0x2b
 8011824:	bf04      	itt	eq
 8011826:	782c      	ldrbeq	r4, [r5, #0]
 8011828:	1cb5      	addeq	r5, r6, #2
 801182a:	e7ca      	b.n	80117c2 <_strtol_l.constprop.0+0x3a>
 801182c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011830:	f1be 0f19 	cmp.w	lr, #25
 8011834:	d801      	bhi.n	801183a <_strtol_l.constprop.0+0xb2>
 8011836:	3c37      	subs	r4, #55	; 0x37
 8011838:	e7e2      	b.n	8011800 <_strtol_l.constprop.0+0x78>
 801183a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801183e:	f1be 0f19 	cmp.w	lr, #25
 8011842:	d804      	bhi.n	801184e <_strtol_l.constprop.0+0xc6>
 8011844:	3c57      	subs	r4, #87	; 0x57
 8011846:	e7db      	b.n	8011800 <_strtol_l.constprop.0+0x78>
 8011848:	f04f 3cff 	mov.w	ip, #4294967295
 801184c:	e7e6      	b.n	801181c <_strtol_l.constprop.0+0x94>
 801184e:	f1bc 0f00 	cmp.w	ip, #0
 8011852:	da05      	bge.n	8011860 <_strtol_l.constprop.0+0xd8>
 8011854:	2322      	movs	r3, #34	; 0x22
 8011856:	6003      	str	r3, [r0, #0]
 8011858:	4646      	mov	r6, r8
 801185a:	b942      	cbnz	r2, 801186e <_strtol_l.constprop.0+0xe6>
 801185c:	4630      	mov	r0, r6
 801185e:	e79e      	b.n	801179e <_strtol_l.constprop.0+0x16>
 8011860:	b107      	cbz	r7, 8011864 <_strtol_l.constprop.0+0xdc>
 8011862:	4276      	negs	r6, r6
 8011864:	2a00      	cmp	r2, #0
 8011866:	d0f9      	beq.n	801185c <_strtol_l.constprop.0+0xd4>
 8011868:	f1bc 0f00 	cmp.w	ip, #0
 801186c:	d000      	beq.n	8011870 <_strtol_l.constprop.0+0xe8>
 801186e:	1e69      	subs	r1, r5, #1
 8011870:	6011      	str	r1, [r2, #0]
 8011872:	e7f3      	b.n	801185c <_strtol_l.constprop.0+0xd4>
 8011874:	2430      	movs	r4, #48	; 0x30
 8011876:	2b00      	cmp	r3, #0
 8011878:	d1b1      	bne.n	80117de <_strtol_l.constprop.0+0x56>
 801187a:	2308      	movs	r3, #8
 801187c:	e7af      	b.n	80117de <_strtol_l.constprop.0+0x56>
 801187e:	2c30      	cmp	r4, #48	; 0x30
 8011880:	d0a5      	beq.n	80117ce <_strtol_l.constprop.0+0x46>
 8011882:	230a      	movs	r3, #10
 8011884:	e7ab      	b.n	80117de <_strtol_l.constprop.0+0x56>
 8011886:	bf00      	nop
 8011888:	08016491 	.word	0x08016491

0801188c <_strtol_r>:
 801188c:	f7ff bf7c 	b.w	8011788 <_strtol_l.constprop.0>

08011890 <_write_r>:
 8011890:	b538      	push	{r3, r4, r5, lr}
 8011892:	4d07      	ldr	r5, [pc, #28]	; (80118b0 <_write_r+0x20>)
 8011894:	4604      	mov	r4, r0
 8011896:	4608      	mov	r0, r1
 8011898:	4611      	mov	r1, r2
 801189a:	2200      	movs	r2, #0
 801189c:	602a      	str	r2, [r5, #0]
 801189e:	461a      	mov	r2, r3
 80118a0:	f7f1 f967 	bl	8002b72 <_write>
 80118a4:	1c43      	adds	r3, r0, #1
 80118a6:	d102      	bne.n	80118ae <_write_r+0x1e>
 80118a8:	682b      	ldr	r3, [r5, #0]
 80118aa:	b103      	cbz	r3, 80118ae <_write_r+0x1e>
 80118ac:	6023      	str	r3, [r4, #0]
 80118ae:	bd38      	pop	{r3, r4, r5, pc}
 80118b0:	2000b688 	.word	0x2000b688

080118b4 <__assert_func>:
 80118b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80118b6:	4614      	mov	r4, r2
 80118b8:	461a      	mov	r2, r3
 80118ba:	4b09      	ldr	r3, [pc, #36]	; (80118e0 <__assert_func+0x2c>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	4605      	mov	r5, r0
 80118c0:	68d8      	ldr	r0, [r3, #12]
 80118c2:	b14c      	cbz	r4, 80118d8 <__assert_func+0x24>
 80118c4:	4b07      	ldr	r3, [pc, #28]	; (80118e4 <__assert_func+0x30>)
 80118c6:	9100      	str	r1, [sp, #0]
 80118c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80118cc:	4906      	ldr	r1, [pc, #24]	; (80118e8 <__assert_func+0x34>)
 80118ce:	462b      	mov	r3, r5
 80118d0:	f000 fe98 	bl	8012604 <fiprintf>
 80118d4:	f002 ffcc 	bl	8014870 <abort>
 80118d8:	4b04      	ldr	r3, [pc, #16]	; (80118ec <__assert_func+0x38>)
 80118da:	461c      	mov	r4, r3
 80118dc:	e7f3      	b.n	80118c6 <__assert_func+0x12>
 80118de:	bf00      	nop
 80118e0:	200003e0 	.word	0x200003e0
 80118e4:	08016454 	.word	0x08016454
 80118e8:	08016461 	.word	0x08016461
 80118ec:	0801648f 	.word	0x0801648f

080118f0 <_close_r>:
 80118f0:	b538      	push	{r3, r4, r5, lr}
 80118f2:	4d06      	ldr	r5, [pc, #24]	; (801190c <_close_r+0x1c>)
 80118f4:	2300      	movs	r3, #0
 80118f6:	4604      	mov	r4, r0
 80118f8:	4608      	mov	r0, r1
 80118fa:	602b      	str	r3, [r5, #0]
 80118fc:	f7f1 f955 	bl	8002baa <_close>
 8011900:	1c43      	adds	r3, r0, #1
 8011902:	d102      	bne.n	801190a <_close_r+0x1a>
 8011904:	682b      	ldr	r3, [r5, #0]
 8011906:	b103      	cbz	r3, 801190a <_close_r+0x1a>
 8011908:	6023      	str	r3, [r4, #0]
 801190a:	bd38      	pop	{r3, r4, r5, pc}
 801190c:	2000b688 	.word	0x2000b688

08011910 <quorem>:
 8011910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011914:	6903      	ldr	r3, [r0, #16]
 8011916:	690c      	ldr	r4, [r1, #16]
 8011918:	42a3      	cmp	r3, r4
 801191a:	4607      	mov	r7, r0
 801191c:	f2c0 8081 	blt.w	8011a22 <quorem+0x112>
 8011920:	3c01      	subs	r4, #1
 8011922:	f101 0814 	add.w	r8, r1, #20
 8011926:	f100 0514 	add.w	r5, r0, #20
 801192a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801192e:	9301      	str	r3, [sp, #4]
 8011930:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011934:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011938:	3301      	adds	r3, #1
 801193a:	429a      	cmp	r2, r3
 801193c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011940:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011944:	fbb2 f6f3 	udiv	r6, r2, r3
 8011948:	d331      	bcc.n	80119ae <quorem+0x9e>
 801194a:	f04f 0e00 	mov.w	lr, #0
 801194e:	4640      	mov	r0, r8
 8011950:	46ac      	mov	ip, r5
 8011952:	46f2      	mov	sl, lr
 8011954:	f850 2b04 	ldr.w	r2, [r0], #4
 8011958:	b293      	uxth	r3, r2
 801195a:	fb06 e303 	mla	r3, r6, r3, lr
 801195e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011962:	b29b      	uxth	r3, r3
 8011964:	ebaa 0303 	sub.w	r3, sl, r3
 8011968:	f8dc a000 	ldr.w	sl, [ip]
 801196c:	0c12      	lsrs	r2, r2, #16
 801196e:	fa13 f38a 	uxtah	r3, r3, sl
 8011972:	fb06 e202 	mla	r2, r6, r2, lr
 8011976:	9300      	str	r3, [sp, #0]
 8011978:	9b00      	ldr	r3, [sp, #0]
 801197a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801197e:	b292      	uxth	r2, r2
 8011980:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011984:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011988:	f8bd 3000 	ldrh.w	r3, [sp]
 801198c:	4581      	cmp	r9, r0
 801198e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011992:	f84c 3b04 	str.w	r3, [ip], #4
 8011996:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801199a:	d2db      	bcs.n	8011954 <quorem+0x44>
 801199c:	f855 300b 	ldr.w	r3, [r5, fp]
 80119a0:	b92b      	cbnz	r3, 80119ae <quorem+0x9e>
 80119a2:	9b01      	ldr	r3, [sp, #4]
 80119a4:	3b04      	subs	r3, #4
 80119a6:	429d      	cmp	r5, r3
 80119a8:	461a      	mov	r2, r3
 80119aa:	d32e      	bcc.n	8011a0a <quorem+0xfa>
 80119ac:	613c      	str	r4, [r7, #16]
 80119ae:	4638      	mov	r0, r7
 80119b0:	f001 fca6 	bl	8013300 <__mcmp>
 80119b4:	2800      	cmp	r0, #0
 80119b6:	db24      	blt.n	8011a02 <quorem+0xf2>
 80119b8:	3601      	adds	r6, #1
 80119ba:	4628      	mov	r0, r5
 80119bc:	f04f 0c00 	mov.w	ip, #0
 80119c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80119c4:	f8d0 e000 	ldr.w	lr, [r0]
 80119c8:	b293      	uxth	r3, r2
 80119ca:	ebac 0303 	sub.w	r3, ip, r3
 80119ce:	0c12      	lsrs	r2, r2, #16
 80119d0:	fa13 f38e 	uxtah	r3, r3, lr
 80119d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80119d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80119dc:	b29b      	uxth	r3, r3
 80119de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80119e2:	45c1      	cmp	r9, r8
 80119e4:	f840 3b04 	str.w	r3, [r0], #4
 80119e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80119ec:	d2e8      	bcs.n	80119c0 <quorem+0xb0>
 80119ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80119f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80119f6:	b922      	cbnz	r2, 8011a02 <quorem+0xf2>
 80119f8:	3b04      	subs	r3, #4
 80119fa:	429d      	cmp	r5, r3
 80119fc:	461a      	mov	r2, r3
 80119fe:	d30a      	bcc.n	8011a16 <quorem+0x106>
 8011a00:	613c      	str	r4, [r7, #16]
 8011a02:	4630      	mov	r0, r6
 8011a04:	b003      	add	sp, #12
 8011a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a0a:	6812      	ldr	r2, [r2, #0]
 8011a0c:	3b04      	subs	r3, #4
 8011a0e:	2a00      	cmp	r2, #0
 8011a10:	d1cc      	bne.n	80119ac <quorem+0x9c>
 8011a12:	3c01      	subs	r4, #1
 8011a14:	e7c7      	b.n	80119a6 <quorem+0x96>
 8011a16:	6812      	ldr	r2, [r2, #0]
 8011a18:	3b04      	subs	r3, #4
 8011a1a:	2a00      	cmp	r2, #0
 8011a1c:	d1f0      	bne.n	8011a00 <quorem+0xf0>
 8011a1e:	3c01      	subs	r4, #1
 8011a20:	e7eb      	b.n	80119fa <quorem+0xea>
 8011a22:	2000      	movs	r0, #0
 8011a24:	e7ee      	b.n	8011a04 <quorem+0xf4>
	...

08011a28 <_dtoa_r>:
 8011a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a2c:	ed2d 8b04 	vpush	{d8-d9}
 8011a30:	ec57 6b10 	vmov	r6, r7, d0
 8011a34:	b093      	sub	sp, #76	; 0x4c
 8011a36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011a38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011a3c:	9106      	str	r1, [sp, #24]
 8011a3e:	ee10 aa10 	vmov	sl, s0
 8011a42:	4604      	mov	r4, r0
 8011a44:	9209      	str	r2, [sp, #36]	; 0x24
 8011a46:	930c      	str	r3, [sp, #48]	; 0x30
 8011a48:	46bb      	mov	fp, r7
 8011a4a:	b975      	cbnz	r5, 8011a6a <_dtoa_r+0x42>
 8011a4c:	2010      	movs	r0, #16
 8011a4e:	f001 f971 	bl	8012d34 <malloc>
 8011a52:	4602      	mov	r2, r0
 8011a54:	6260      	str	r0, [r4, #36]	; 0x24
 8011a56:	b920      	cbnz	r0, 8011a62 <_dtoa_r+0x3a>
 8011a58:	4ba7      	ldr	r3, [pc, #668]	; (8011cf8 <_dtoa_r+0x2d0>)
 8011a5a:	21ea      	movs	r1, #234	; 0xea
 8011a5c:	48a7      	ldr	r0, [pc, #668]	; (8011cfc <_dtoa_r+0x2d4>)
 8011a5e:	f7ff ff29 	bl	80118b4 <__assert_func>
 8011a62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011a66:	6005      	str	r5, [r0, #0]
 8011a68:	60c5      	str	r5, [r0, #12]
 8011a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a6c:	6819      	ldr	r1, [r3, #0]
 8011a6e:	b151      	cbz	r1, 8011a86 <_dtoa_r+0x5e>
 8011a70:	685a      	ldr	r2, [r3, #4]
 8011a72:	604a      	str	r2, [r1, #4]
 8011a74:	2301      	movs	r3, #1
 8011a76:	4093      	lsls	r3, r2
 8011a78:	608b      	str	r3, [r1, #8]
 8011a7a:	4620      	mov	r0, r4
 8011a7c:	f001 f9b4 	bl	8012de8 <_Bfree>
 8011a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a82:	2200      	movs	r2, #0
 8011a84:	601a      	str	r2, [r3, #0]
 8011a86:	1e3b      	subs	r3, r7, #0
 8011a88:	bfaa      	itet	ge
 8011a8a:	2300      	movge	r3, #0
 8011a8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011a90:	f8c8 3000 	strge.w	r3, [r8]
 8011a94:	4b9a      	ldr	r3, [pc, #616]	; (8011d00 <_dtoa_r+0x2d8>)
 8011a96:	bfbc      	itt	lt
 8011a98:	2201      	movlt	r2, #1
 8011a9a:	f8c8 2000 	strlt.w	r2, [r8]
 8011a9e:	ea33 030b 	bics.w	r3, r3, fp
 8011aa2:	d11b      	bne.n	8011adc <_dtoa_r+0xb4>
 8011aa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011aa6:	f242 730f 	movw	r3, #9999	; 0x270f
 8011aaa:	6013      	str	r3, [r2, #0]
 8011aac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011ab0:	4333      	orrs	r3, r6
 8011ab2:	f000 8592 	beq.w	80125da <_dtoa_r+0xbb2>
 8011ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ab8:	b963      	cbnz	r3, 8011ad4 <_dtoa_r+0xac>
 8011aba:	4b92      	ldr	r3, [pc, #584]	; (8011d04 <_dtoa_r+0x2dc>)
 8011abc:	e022      	b.n	8011b04 <_dtoa_r+0xdc>
 8011abe:	4b92      	ldr	r3, [pc, #584]	; (8011d08 <_dtoa_r+0x2e0>)
 8011ac0:	9301      	str	r3, [sp, #4]
 8011ac2:	3308      	adds	r3, #8
 8011ac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011ac6:	6013      	str	r3, [r2, #0]
 8011ac8:	9801      	ldr	r0, [sp, #4]
 8011aca:	b013      	add	sp, #76	; 0x4c
 8011acc:	ecbd 8b04 	vpop	{d8-d9}
 8011ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ad4:	4b8b      	ldr	r3, [pc, #556]	; (8011d04 <_dtoa_r+0x2dc>)
 8011ad6:	9301      	str	r3, [sp, #4]
 8011ad8:	3303      	adds	r3, #3
 8011ada:	e7f3      	b.n	8011ac4 <_dtoa_r+0x9c>
 8011adc:	2200      	movs	r2, #0
 8011ade:	2300      	movs	r3, #0
 8011ae0:	4650      	mov	r0, sl
 8011ae2:	4659      	mov	r1, fp
 8011ae4:	f7ef f820 	bl	8000b28 <__aeabi_dcmpeq>
 8011ae8:	ec4b ab19 	vmov	d9, sl, fp
 8011aec:	4680      	mov	r8, r0
 8011aee:	b158      	cbz	r0, 8011b08 <_dtoa_r+0xe0>
 8011af0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011af2:	2301      	movs	r3, #1
 8011af4:	6013      	str	r3, [r2, #0]
 8011af6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	f000 856b 	beq.w	80125d4 <_dtoa_r+0xbac>
 8011afe:	4883      	ldr	r0, [pc, #524]	; (8011d0c <_dtoa_r+0x2e4>)
 8011b00:	6018      	str	r0, [r3, #0]
 8011b02:	1e43      	subs	r3, r0, #1
 8011b04:	9301      	str	r3, [sp, #4]
 8011b06:	e7df      	b.n	8011ac8 <_dtoa_r+0xa0>
 8011b08:	ec4b ab10 	vmov	d0, sl, fp
 8011b0c:	aa10      	add	r2, sp, #64	; 0x40
 8011b0e:	a911      	add	r1, sp, #68	; 0x44
 8011b10:	4620      	mov	r0, r4
 8011b12:	f001 fd17 	bl	8013544 <__d2b>
 8011b16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011b1a:	ee08 0a10 	vmov	s16, r0
 8011b1e:	2d00      	cmp	r5, #0
 8011b20:	f000 8084 	beq.w	8011c2c <_dtoa_r+0x204>
 8011b24:	ee19 3a90 	vmov	r3, s19
 8011b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011b30:	4656      	mov	r6, sl
 8011b32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011b36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011b3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011b3e:	4b74      	ldr	r3, [pc, #464]	; (8011d10 <_dtoa_r+0x2e8>)
 8011b40:	2200      	movs	r2, #0
 8011b42:	4630      	mov	r0, r6
 8011b44:	4639      	mov	r1, r7
 8011b46:	f7ee fbcf 	bl	80002e8 <__aeabi_dsub>
 8011b4a:	a365      	add	r3, pc, #404	; (adr r3, 8011ce0 <_dtoa_r+0x2b8>)
 8011b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b50:	f7ee fd82 	bl	8000658 <__aeabi_dmul>
 8011b54:	a364      	add	r3, pc, #400	; (adr r3, 8011ce8 <_dtoa_r+0x2c0>)
 8011b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b5a:	f7ee fbc7 	bl	80002ec <__adddf3>
 8011b5e:	4606      	mov	r6, r0
 8011b60:	4628      	mov	r0, r5
 8011b62:	460f      	mov	r7, r1
 8011b64:	f7ee fd0e 	bl	8000584 <__aeabi_i2d>
 8011b68:	a361      	add	r3, pc, #388	; (adr r3, 8011cf0 <_dtoa_r+0x2c8>)
 8011b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b6e:	f7ee fd73 	bl	8000658 <__aeabi_dmul>
 8011b72:	4602      	mov	r2, r0
 8011b74:	460b      	mov	r3, r1
 8011b76:	4630      	mov	r0, r6
 8011b78:	4639      	mov	r1, r7
 8011b7a:	f7ee fbb7 	bl	80002ec <__adddf3>
 8011b7e:	4606      	mov	r6, r0
 8011b80:	460f      	mov	r7, r1
 8011b82:	f7ef f819 	bl	8000bb8 <__aeabi_d2iz>
 8011b86:	2200      	movs	r2, #0
 8011b88:	9000      	str	r0, [sp, #0]
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	4630      	mov	r0, r6
 8011b8e:	4639      	mov	r1, r7
 8011b90:	f7ee ffd4 	bl	8000b3c <__aeabi_dcmplt>
 8011b94:	b150      	cbz	r0, 8011bac <_dtoa_r+0x184>
 8011b96:	9800      	ldr	r0, [sp, #0]
 8011b98:	f7ee fcf4 	bl	8000584 <__aeabi_i2d>
 8011b9c:	4632      	mov	r2, r6
 8011b9e:	463b      	mov	r3, r7
 8011ba0:	f7ee ffc2 	bl	8000b28 <__aeabi_dcmpeq>
 8011ba4:	b910      	cbnz	r0, 8011bac <_dtoa_r+0x184>
 8011ba6:	9b00      	ldr	r3, [sp, #0]
 8011ba8:	3b01      	subs	r3, #1
 8011baa:	9300      	str	r3, [sp, #0]
 8011bac:	9b00      	ldr	r3, [sp, #0]
 8011bae:	2b16      	cmp	r3, #22
 8011bb0:	d85a      	bhi.n	8011c68 <_dtoa_r+0x240>
 8011bb2:	9a00      	ldr	r2, [sp, #0]
 8011bb4:	4b57      	ldr	r3, [pc, #348]	; (8011d14 <_dtoa_r+0x2ec>)
 8011bb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bbe:	ec51 0b19 	vmov	r0, r1, d9
 8011bc2:	f7ee ffbb 	bl	8000b3c <__aeabi_dcmplt>
 8011bc6:	2800      	cmp	r0, #0
 8011bc8:	d050      	beq.n	8011c6c <_dtoa_r+0x244>
 8011bca:	9b00      	ldr	r3, [sp, #0]
 8011bcc:	3b01      	subs	r3, #1
 8011bce:	9300      	str	r3, [sp, #0]
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8011bd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011bd6:	1b5d      	subs	r5, r3, r5
 8011bd8:	1e6b      	subs	r3, r5, #1
 8011bda:	9305      	str	r3, [sp, #20]
 8011bdc:	bf45      	ittet	mi
 8011bde:	f1c5 0301 	rsbmi	r3, r5, #1
 8011be2:	9304      	strmi	r3, [sp, #16]
 8011be4:	2300      	movpl	r3, #0
 8011be6:	2300      	movmi	r3, #0
 8011be8:	bf4c      	ite	mi
 8011bea:	9305      	strmi	r3, [sp, #20]
 8011bec:	9304      	strpl	r3, [sp, #16]
 8011bee:	9b00      	ldr	r3, [sp, #0]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	db3d      	blt.n	8011c70 <_dtoa_r+0x248>
 8011bf4:	9b05      	ldr	r3, [sp, #20]
 8011bf6:	9a00      	ldr	r2, [sp, #0]
 8011bf8:	920a      	str	r2, [sp, #40]	; 0x28
 8011bfa:	4413      	add	r3, r2
 8011bfc:	9305      	str	r3, [sp, #20]
 8011bfe:	2300      	movs	r3, #0
 8011c00:	9307      	str	r3, [sp, #28]
 8011c02:	9b06      	ldr	r3, [sp, #24]
 8011c04:	2b09      	cmp	r3, #9
 8011c06:	f200 8089 	bhi.w	8011d1c <_dtoa_r+0x2f4>
 8011c0a:	2b05      	cmp	r3, #5
 8011c0c:	bfc4      	itt	gt
 8011c0e:	3b04      	subgt	r3, #4
 8011c10:	9306      	strgt	r3, [sp, #24]
 8011c12:	9b06      	ldr	r3, [sp, #24]
 8011c14:	f1a3 0302 	sub.w	r3, r3, #2
 8011c18:	bfcc      	ite	gt
 8011c1a:	2500      	movgt	r5, #0
 8011c1c:	2501      	movle	r5, #1
 8011c1e:	2b03      	cmp	r3, #3
 8011c20:	f200 8087 	bhi.w	8011d32 <_dtoa_r+0x30a>
 8011c24:	e8df f003 	tbb	[pc, r3]
 8011c28:	59383a2d 	.word	0x59383a2d
 8011c2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011c30:	441d      	add	r5, r3
 8011c32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011c36:	2b20      	cmp	r3, #32
 8011c38:	bfc1      	itttt	gt
 8011c3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011c3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011c42:	fa0b f303 	lslgt.w	r3, fp, r3
 8011c46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011c4a:	bfda      	itte	le
 8011c4c:	f1c3 0320 	rsble	r3, r3, #32
 8011c50:	fa06 f003 	lslle.w	r0, r6, r3
 8011c54:	4318      	orrgt	r0, r3
 8011c56:	f7ee fc85 	bl	8000564 <__aeabi_ui2d>
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	4606      	mov	r6, r0
 8011c5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011c62:	3d01      	subs	r5, #1
 8011c64:	930e      	str	r3, [sp, #56]	; 0x38
 8011c66:	e76a      	b.n	8011b3e <_dtoa_r+0x116>
 8011c68:	2301      	movs	r3, #1
 8011c6a:	e7b2      	b.n	8011bd2 <_dtoa_r+0x1aa>
 8011c6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8011c6e:	e7b1      	b.n	8011bd4 <_dtoa_r+0x1ac>
 8011c70:	9b04      	ldr	r3, [sp, #16]
 8011c72:	9a00      	ldr	r2, [sp, #0]
 8011c74:	1a9b      	subs	r3, r3, r2
 8011c76:	9304      	str	r3, [sp, #16]
 8011c78:	4253      	negs	r3, r2
 8011c7a:	9307      	str	r3, [sp, #28]
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8011c80:	e7bf      	b.n	8011c02 <_dtoa_r+0x1da>
 8011c82:	2300      	movs	r3, #0
 8011c84:	9308      	str	r3, [sp, #32]
 8011c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	dc55      	bgt.n	8011d38 <_dtoa_r+0x310>
 8011c8c:	2301      	movs	r3, #1
 8011c8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011c92:	461a      	mov	r2, r3
 8011c94:	9209      	str	r2, [sp, #36]	; 0x24
 8011c96:	e00c      	b.n	8011cb2 <_dtoa_r+0x28a>
 8011c98:	2301      	movs	r3, #1
 8011c9a:	e7f3      	b.n	8011c84 <_dtoa_r+0x25c>
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ca0:	9308      	str	r3, [sp, #32]
 8011ca2:	9b00      	ldr	r3, [sp, #0]
 8011ca4:	4413      	add	r3, r2
 8011ca6:	9302      	str	r3, [sp, #8]
 8011ca8:	3301      	adds	r3, #1
 8011caa:	2b01      	cmp	r3, #1
 8011cac:	9303      	str	r3, [sp, #12]
 8011cae:	bfb8      	it	lt
 8011cb0:	2301      	movlt	r3, #1
 8011cb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	6042      	str	r2, [r0, #4]
 8011cb8:	2204      	movs	r2, #4
 8011cba:	f102 0614 	add.w	r6, r2, #20
 8011cbe:	429e      	cmp	r6, r3
 8011cc0:	6841      	ldr	r1, [r0, #4]
 8011cc2:	d93d      	bls.n	8011d40 <_dtoa_r+0x318>
 8011cc4:	4620      	mov	r0, r4
 8011cc6:	f001 f84f 	bl	8012d68 <_Balloc>
 8011cca:	9001      	str	r0, [sp, #4]
 8011ccc:	2800      	cmp	r0, #0
 8011cce:	d13b      	bne.n	8011d48 <_dtoa_r+0x320>
 8011cd0:	4b11      	ldr	r3, [pc, #68]	; (8011d18 <_dtoa_r+0x2f0>)
 8011cd2:	4602      	mov	r2, r0
 8011cd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011cd8:	e6c0      	b.n	8011a5c <_dtoa_r+0x34>
 8011cda:	2301      	movs	r3, #1
 8011cdc:	e7df      	b.n	8011c9e <_dtoa_r+0x276>
 8011cde:	bf00      	nop
 8011ce0:	636f4361 	.word	0x636f4361
 8011ce4:	3fd287a7 	.word	0x3fd287a7
 8011ce8:	8b60c8b3 	.word	0x8b60c8b3
 8011cec:	3fc68a28 	.word	0x3fc68a28
 8011cf0:	509f79fb 	.word	0x509f79fb
 8011cf4:	3fd34413 	.word	0x3fd34413
 8011cf8:	080163e0 	.word	0x080163e0
 8011cfc:	0801659e 	.word	0x0801659e
 8011d00:	7ff00000 	.word	0x7ff00000
 8011d04:	0801659a 	.word	0x0801659a
 8011d08:	08016591 	.word	0x08016591
 8011d0c:	080167f2 	.word	0x080167f2
 8011d10:	3ff80000 	.word	0x3ff80000
 8011d14:	08016708 	.word	0x08016708
 8011d18:	080165f9 	.word	0x080165f9
 8011d1c:	2501      	movs	r5, #1
 8011d1e:	2300      	movs	r3, #0
 8011d20:	9306      	str	r3, [sp, #24]
 8011d22:	9508      	str	r5, [sp, #32]
 8011d24:	f04f 33ff 	mov.w	r3, #4294967295
 8011d28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	2312      	movs	r3, #18
 8011d30:	e7b0      	b.n	8011c94 <_dtoa_r+0x26c>
 8011d32:	2301      	movs	r3, #1
 8011d34:	9308      	str	r3, [sp, #32]
 8011d36:	e7f5      	b.n	8011d24 <_dtoa_r+0x2fc>
 8011d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011d3e:	e7b8      	b.n	8011cb2 <_dtoa_r+0x28a>
 8011d40:	3101      	adds	r1, #1
 8011d42:	6041      	str	r1, [r0, #4]
 8011d44:	0052      	lsls	r2, r2, #1
 8011d46:	e7b8      	b.n	8011cba <_dtoa_r+0x292>
 8011d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d4a:	9a01      	ldr	r2, [sp, #4]
 8011d4c:	601a      	str	r2, [r3, #0]
 8011d4e:	9b03      	ldr	r3, [sp, #12]
 8011d50:	2b0e      	cmp	r3, #14
 8011d52:	f200 809d 	bhi.w	8011e90 <_dtoa_r+0x468>
 8011d56:	2d00      	cmp	r5, #0
 8011d58:	f000 809a 	beq.w	8011e90 <_dtoa_r+0x468>
 8011d5c:	9b00      	ldr	r3, [sp, #0]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	dd32      	ble.n	8011dc8 <_dtoa_r+0x3a0>
 8011d62:	4ab7      	ldr	r2, [pc, #732]	; (8012040 <_dtoa_r+0x618>)
 8011d64:	f003 030f 	and.w	r3, r3, #15
 8011d68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011d6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011d70:	9b00      	ldr	r3, [sp, #0]
 8011d72:	05d8      	lsls	r0, r3, #23
 8011d74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011d78:	d516      	bpl.n	8011da8 <_dtoa_r+0x380>
 8011d7a:	4bb2      	ldr	r3, [pc, #712]	; (8012044 <_dtoa_r+0x61c>)
 8011d7c:	ec51 0b19 	vmov	r0, r1, d9
 8011d80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011d84:	f7ee fd92 	bl	80008ac <__aeabi_ddiv>
 8011d88:	f007 070f 	and.w	r7, r7, #15
 8011d8c:	4682      	mov	sl, r0
 8011d8e:	468b      	mov	fp, r1
 8011d90:	2503      	movs	r5, #3
 8011d92:	4eac      	ldr	r6, [pc, #688]	; (8012044 <_dtoa_r+0x61c>)
 8011d94:	b957      	cbnz	r7, 8011dac <_dtoa_r+0x384>
 8011d96:	4642      	mov	r2, r8
 8011d98:	464b      	mov	r3, r9
 8011d9a:	4650      	mov	r0, sl
 8011d9c:	4659      	mov	r1, fp
 8011d9e:	f7ee fd85 	bl	80008ac <__aeabi_ddiv>
 8011da2:	4682      	mov	sl, r0
 8011da4:	468b      	mov	fp, r1
 8011da6:	e028      	b.n	8011dfa <_dtoa_r+0x3d2>
 8011da8:	2502      	movs	r5, #2
 8011daa:	e7f2      	b.n	8011d92 <_dtoa_r+0x36a>
 8011dac:	07f9      	lsls	r1, r7, #31
 8011dae:	d508      	bpl.n	8011dc2 <_dtoa_r+0x39a>
 8011db0:	4640      	mov	r0, r8
 8011db2:	4649      	mov	r1, r9
 8011db4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011db8:	f7ee fc4e 	bl	8000658 <__aeabi_dmul>
 8011dbc:	3501      	adds	r5, #1
 8011dbe:	4680      	mov	r8, r0
 8011dc0:	4689      	mov	r9, r1
 8011dc2:	107f      	asrs	r7, r7, #1
 8011dc4:	3608      	adds	r6, #8
 8011dc6:	e7e5      	b.n	8011d94 <_dtoa_r+0x36c>
 8011dc8:	f000 809b 	beq.w	8011f02 <_dtoa_r+0x4da>
 8011dcc:	9b00      	ldr	r3, [sp, #0]
 8011dce:	4f9d      	ldr	r7, [pc, #628]	; (8012044 <_dtoa_r+0x61c>)
 8011dd0:	425e      	negs	r6, r3
 8011dd2:	4b9b      	ldr	r3, [pc, #620]	; (8012040 <_dtoa_r+0x618>)
 8011dd4:	f006 020f 	and.w	r2, r6, #15
 8011dd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de0:	ec51 0b19 	vmov	r0, r1, d9
 8011de4:	f7ee fc38 	bl	8000658 <__aeabi_dmul>
 8011de8:	1136      	asrs	r6, r6, #4
 8011dea:	4682      	mov	sl, r0
 8011dec:	468b      	mov	fp, r1
 8011dee:	2300      	movs	r3, #0
 8011df0:	2502      	movs	r5, #2
 8011df2:	2e00      	cmp	r6, #0
 8011df4:	d17a      	bne.n	8011eec <_dtoa_r+0x4c4>
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d1d3      	bne.n	8011da2 <_dtoa_r+0x37a>
 8011dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	f000 8082 	beq.w	8011f06 <_dtoa_r+0x4de>
 8011e02:	4b91      	ldr	r3, [pc, #580]	; (8012048 <_dtoa_r+0x620>)
 8011e04:	2200      	movs	r2, #0
 8011e06:	4650      	mov	r0, sl
 8011e08:	4659      	mov	r1, fp
 8011e0a:	f7ee fe97 	bl	8000b3c <__aeabi_dcmplt>
 8011e0e:	2800      	cmp	r0, #0
 8011e10:	d079      	beq.n	8011f06 <_dtoa_r+0x4de>
 8011e12:	9b03      	ldr	r3, [sp, #12]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d076      	beq.n	8011f06 <_dtoa_r+0x4de>
 8011e18:	9b02      	ldr	r3, [sp, #8]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	dd36      	ble.n	8011e8c <_dtoa_r+0x464>
 8011e1e:	9b00      	ldr	r3, [sp, #0]
 8011e20:	4650      	mov	r0, sl
 8011e22:	4659      	mov	r1, fp
 8011e24:	1e5f      	subs	r7, r3, #1
 8011e26:	2200      	movs	r2, #0
 8011e28:	4b88      	ldr	r3, [pc, #544]	; (801204c <_dtoa_r+0x624>)
 8011e2a:	f7ee fc15 	bl	8000658 <__aeabi_dmul>
 8011e2e:	9e02      	ldr	r6, [sp, #8]
 8011e30:	4682      	mov	sl, r0
 8011e32:	468b      	mov	fp, r1
 8011e34:	3501      	adds	r5, #1
 8011e36:	4628      	mov	r0, r5
 8011e38:	f7ee fba4 	bl	8000584 <__aeabi_i2d>
 8011e3c:	4652      	mov	r2, sl
 8011e3e:	465b      	mov	r3, fp
 8011e40:	f7ee fc0a 	bl	8000658 <__aeabi_dmul>
 8011e44:	4b82      	ldr	r3, [pc, #520]	; (8012050 <_dtoa_r+0x628>)
 8011e46:	2200      	movs	r2, #0
 8011e48:	f7ee fa50 	bl	80002ec <__adddf3>
 8011e4c:	46d0      	mov	r8, sl
 8011e4e:	46d9      	mov	r9, fp
 8011e50:	4682      	mov	sl, r0
 8011e52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011e56:	2e00      	cmp	r6, #0
 8011e58:	d158      	bne.n	8011f0c <_dtoa_r+0x4e4>
 8011e5a:	4b7e      	ldr	r3, [pc, #504]	; (8012054 <_dtoa_r+0x62c>)
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	4640      	mov	r0, r8
 8011e60:	4649      	mov	r1, r9
 8011e62:	f7ee fa41 	bl	80002e8 <__aeabi_dsub>
 8011e66:	4652      	mov	r2, sl
 8011e68:	465b      	mov	r3, fp
 8011e6a:	4680      	mov	r8, r0
 8011e6c:	4689      	mov	r9, r1
 8011e6e:	f7ee fe83 	bl	8000b78 <__aeabi_dcmpgt>
 8011e72:	2800      	cmp	r0, #0
 8011e74:	f040 8295 	bne.w	80123a2 <_dtoa_r+0x97a>
 8011e78:	4652      	mov	r2, sl
 8011e7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011e7e:	4640      	mov	r0, r8
 8011e80:	4649      	mov	r1, r9
 8011e82:	f7ee fe5b 	bl	8000b3c <__aeabi_dcmplt>
 8011e86:	2800      	cmp	r0, #0
 8011e88:	f040 8289 	bne.w	801239e <_dtoa_r+0x976>
 8011e8c:	ec5b ab19 	vmov	sl, fp, d9
 8011e90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	f2c0 8148 	blt.w	8012128 <_dtoa_r+0x700>
 8011e98:	9a00      	ldr	r2, [sp, #0]
 8011e9a:	2a0e      	cmp	r2, #14
 8011e9c:	f300 8144 	bgt.w	8012128 <_dtoa_r+0x700>
 8011ea0:	4b67      	ldr	r3, [pc, #412]	; (8012040 <_dtoa_r+0x618>)
 8011ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ea6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	f280 80d5 	bge.w	801205c <_dtoa_r+0x634>
 8011eb2:	9b03      	ldr	r3, [sp, #12]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	f300 80d1 	bgt.w	801205c <_dtoa_r+0x634>
 8011eba:	f040 826f 	bne.w	801239c <_dtoa_r+0x974>
 8011ebe:	4b65      	ldr	r3, [pc, #404]	; (8012054 <_dtoa_r+0x62c>)
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	4640      	mov	r0, r8
 8011ec4:	4649      	mov	r1, r9
 8011ec6:	f7ee fbc7 	bl	8000658 <__aeabi_dmul>
 8011eca:	4652      	mov	r2, sl
 8011ecc:	465b      	mov	r3, fp
 8011ece:	f7ee fe49 	bl	8000b64 <__aeabi_dcmpge>
 8011ed2:	9e03      	ldr	r6, [sp, #12]
 8011ed4:	4637      	mov	r7, r6
 8011ed6:	2800      	cmp	r0, #0
 8011ed8:	f040 8245 	bne.w	8012366 <_dtoa_r+0x93e>
 8011edc:	9d01      	ldr	r5, [sp, #4]
 8011ede:	2331      	movs	r3, #49	; 0x31
 8011ee0:	f805 3b01 	strb.w	r3, [r5], #1
 8011ee4:	9b00      	ldr	r3, [sp, #0]
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	9300      	str	r3, [sp, #0]
 8011eea:	e240      	b.n	801236e <_dtoa_r+0x946>
 8011eec:	07f2      	lsls	r2, r6, #31
 8011eee:	d505      	bpl.n	8011efc <_dtoa_r+0x4d4>
 8011ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ef4:	f7ee fbb0 	bl	8000658 <__aeabi_dmul>
 8011ef8:	3501      	adds	r5, #1
 8011efa:	2301      	movs	r3, #1
 8011efc:	1076      	asrs	r6, r6, #1
 8011efe:	3708      	adds	r7, #8
 8011f00:	e777      	b.n	8011df2 <_dtoa_r+0x3ca>
 8011f02:	2502      	movs	r5, #2
 8011f04:	e779      	b.n	8011dfa <_dtoa_r+0x3d2>
 8011f06:	9f00      	ldr	r7, [sp, #0]
 8011f08:	9e03      	ldr	r6, [sp, #12]
 8011f0a:	e794      	b.n	8011e36 <_dtoa_r+0x40e>
 8011f0c:	9901      	ldr	r1, [sp, #4]
 8011f0e:	4b4c      	ldr	r3, [pc, #304]	; (8012040 <_dtoa_r+0x618>)
 8011f10:	4431      	add	r1, r6
 8011f12:	910d      	str	r1, [sp, #52]	; 0x34
 8011f14:	9908      	ldr	r1, [sp, #32]
 8011f16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011f1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011f1e:	2900      	cmp	r1, #0
 8011f20:	d043      	beq.n	8011faa <_dtoa_r+0x582>
 8011f22:	494d      	ldr	r1, [pc, #308]	; (8012058 <_dtoa_r+0x630>)
 8011f24:	2000      	movs	r0, #0
 8011f26:	f7ee fcc1 	bl	80008ac <__aeabi_ddiv>
 8011f2a:	4652      	mov	r2, sl
 8011f2c:	465b      	mov	r3, fp
 8011f2e:	f7ee f9db 	bl	80002e8 <__aeabi_dsub>
 8011f32:	9d01      	ldr	r5, [sp, #4]
 8011f34:	4682      	mov	sl, r0
 8011f36:	468b      	mov	fp, r1
 8011f38:	4649      	mov	r1, r9
 8011f3a:	4640      	mov	r0, r8
 8011f3c:	f7ee fe3c 	bl	8000bb8 <__aeabi_d2iz>
 8011f40:	4606      	mov	r6, r0
 8011f42:	f7ee fb1f 	bl	8000584 <__aeabi_i2d>
 8011f46:	4602      	mov	r2, r0
 8011f48:	460b      	mov	r3, r1
 8011f4a:	4640      	mov	r0, r8
 8011f4c:	4649      	mov	r1, r9
 8011f4e:	f7ee f9cb 	bl	80002e8 <__aeabi_dsub>
 8011f52:	3630      	adds	r6, #48	; 0x30
 8011f54:	f805 6b01 	strb.w	r6, [r5], #1
 8011f58:	4652      	mov	r2, sl
 8011f5a:	465b      	mov	r3, fp
 8011f5c:	4680      	mov	r8, r0
 8011f5e:	4689      	mov	r9, r1
 8011f60:	f7ee fdec 	bl	8000b3c <__aeabi_dcmplt>
 8011f64:	2800      	cmp	r0, #0
 8011f66:	d163      	bne.n	8012030 <_dtoa_r+0x608>
 8011f68:	4642      	mov	r2, r8
 8011f6a:	464b      	mov	r3, r9
 8011f6c:	4936      	ldr	r1, [pc, #216]	; (8012048 <_dtoa_r+0x620>)
 8011f6e:	2000      	movs	r0, #0
 8011f70:	f7ee f9ba 	bl	80002e8 <__aeabi_dsub>
 8011f74:	4652      	mov	r2, sl
 8011f76:	465b      	mov	r3, fp
 8011f78:	f7ee fde0 	bl	8000b3c <__aeabi_dcmplt>
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	f040 80b5 	bne.w	80120ec <_dtoa_r+0x6c4>
 8011f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f84:	429d      	cmp	r5, r3
 8011f86:	d081      	beq.n	8011e8c <_dtoa_r+0x464>
 8011f88:	4b30      	ldr	r3, [pc, #192]	; (801204c <_dtoa_r+0x624>)
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	4650      	mov	r0, sl
 8011f8e:	4659      	mov	r1, fp
 8011f90:	f7ee fb62 	bl	8000658 <__aeabi_dmul>
 8011f94:	4b2d      	ldr	r3, [pc, #180]	; (801204c <_dtoa_r+0x624>)
 8011f96:	4682      	mov	sl, r0
 8011f98:	468b      	mov	fp, r1
 8011f9a:	4640      	mov	r0, r8
 8011f9c:	4649      	mov	r1, r9
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	f7ee fb5a 	bl	8000658 <__aeabi_dmul>
 8011fa4:	4680      	mov	r8, r0
 8011fa6:	4689      	mov	r9, r1
 8011fa8:	e7c6      	b.n	8011f38 <_dtoa_r+0x510>
 8011faa:	4650      	mov	r0, sl
 8011fac:	4659      	mov	r1, fp
 8011fae:	f7ee fb53 	bl	8000658 <__aeabi_dmul>
 8011fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fb4:	9d01      	ldr	r5, [sp, #4]
 8011fb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8011fb8:	4682      	mov	sl, r0
 8011fba:	468b      	mov	fp, r1
 8011fbc:	4649      	mov	r1, r9
 8011fbe:	4640      	mov	r0, r8
 8011fc0:	f7ee fdfa 	bl	8000bb8 <__aeabi_d2iz>
 8011fc4:	4606      	mov	r6, r0
 8011fc6:	f7ee fadd 	bl	8000584 <__aeabi_i2d>
 8011fca:	3630      	adds	r6, #48	; 0x30
 8011fcc:	4602      	mov	r2, r0
 8011fce:	460b      	mov	r3, r1
 8011fd0:	4640      	mov	r0, r8
 8011fd2:	4649      	mov	r1, r9
 8011fd4:	f7ee f988 	bl	80002e8 <__aeabi_dsub>
 8011fd8:	f805 6b01 	strb.w	r6, [r5], #1
 8011fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fde:	429d      	cmp	r5, r3
 8011fe0:	4680      	mov	r8, r0
 8011fe2:	4689      	mov	r9, r1
 8011fe4:	f04f 0200 	mov.w	r2, #0
 8011fe8:	d124      	bne.n	8012034 <_dtoa_r+0x60c>
 8011fea:	4b1b      	ldr	r3, [pc, #108]	; (8012058 <_dtoa_r+0x630>)
 8011fec:	4650      	mov	r0, sl
 8011fee:	4659      	mov	r1, fp
 8011ff0:	f7ee f97c 	bl	80002ec <__adddf3>
 8011ff4:	4602      	mov	r2, r0
 8011ff6:	460b      	mov	r3, r1
 8011ff8:	4640      	mov	r0, r8
 8011ffa:	4649      	mov	r1, r9
 8011ffc:	f7ee fdbc 	bl	8000b78 <__aeabi_dcmpgt>
 8012000:	2800      	cmp	r0, #0
 8012002:	d173      	bne.n	80120ec <_dtoa_r+0x6c4>
 8012004:	4652      	mov	r2, sl
 8012006:	465b      	mov	r3, fp
 8012008:	4913      	ldr	r1, [pc, #76]	; (8012058 <_dtoa_r+0x630>)
 801200a:	2000      	movs	r0, #0
 801200c:	f7ee f96c 	bl	80002e8 <__aeabi_dsub>
 8012010:	4602      	mov	r2, r0
 8012012:	460b      	mov	r3, r1
 8012014:	4640      	mov	r0, r8
 8012016:	4649      	mov	r1, r9
 8012018:	f7ee fd90 	bl	8000b3c <__aeabi_dcmplt>
 801201c:	2800      	cmp	r0, #0
 801201e:	f43f af35 	beq.w	8011e8c <_dtoa_r+0x464>
 8012022:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012024:	1e6b      	subs	r3, r5, #1
 8012026:	930f      	str	r3, [sp, #60]	; 0x3c
 8012028:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801202c:	2b30      	cmp	r3, #48	; 0x30
 801202e:	d0f8      	beq.n	8012022 <_dtoa_r+0x5fa>
 8012030:	9700      	str	r7, [sp, #0]
 8012032:	e049      	b.n	80120c8 <_dtoa_r+0x6a0>
 8012034:	4b05      	ldr	r3, [pc, #20]	; (801204c <_dtoa_r+0x624>)
 8012036:	f7ee fb0f 	bl	8000658 <__aeabi_dmul>
 801203a:	4680      	mov	r8, r0
 801203c:	4689      	mov	r9, r1
 801203e:	e7bd      	b.n	8011fbc <_dtoa_r+0x594>
 8012040:	08016708 	.word	0x08016708
 8012044:	080166e0 	.word	0x080166e0
 8012048:	3ff00000 	.word	0x3ff00000
 801204c:	40240000 	.word	0x40240000
 8012050:	401c0000 	.word	0x401c0000
 8012054:	40140000 	.word	0x40140000
 8012058:	3fe00000 	.word	0x3fe00000
 801205c:	9d01      	ldr	r5, [sp, #4]
 801205e:	4656      	mov	r6, sl
 8012060:	465f      	mov	r7, fp
 8012062:	4642      	mov	r2, r8
 8012064:	464b      	mov	r3, r9
 8012066:	4630      	mov	r0, r6
 8012068:	4639      	mov	r1, r7
 801206a:	f7ee fc1f 	bl	80008ac <__aeabi_ddiv>
 801206e:	f7ee fda3 	bl	8000bb8 <__aeabi_d2iz>
 8012072:	4682      	mov	sl, r0
 8012074:	f7ee fa86 	bl	8000584 <__aeabi_i2d>
 8012078:	4642      	mov	r2, r8
 801207a:	464b      	mov	r3, r9
 801207c:	f7ee faec 	bl	8000658 <__aeabi_dmul>
 8012080:	4602      	mov	r2, r0
 8012082:	460b      	mov	r3, r1
 8012084:	4630      	mov	r0, r6
 8012086:	4639      	mov	r1, r7
 8012088:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801208c:	f7ee f92c 	bl	80002e8 <__aeabi_dsub>
 8012090:	f805 6b01 	strb.w	r6, [r5], #1
 8012094:	9e01      	ldr	r6, [sp, #4]
 8012096:	9f03      	ldr	r7, [sp, #12]
 8012098:	1bae      	subs	r6, r5, r6
 801209a:	42b7      	cmp	r7, r6
 801209c:	4602      	mov	r2, r0
 801209e:	460b      	mov	r3, r1
 80120a0:	d135      	bne.n	801210e <_dtoa_r+0x6e6>
 80120a2:	f7ee f923 	bl	80002ec <__adddf3>
 80120a6:	4642      	mov	r2, r8
 80120a8:	464b      	mov	r3, r9
 80120aa:	4606      	mov	r6, r0
 80120ac:	460f      	mov	r7, r1
 80120ae:	f7ee fd63 	bl	8000b78 <__aeabi_dcmpgt>
 80120b2:	b9d0      	cbnz	r0, 80120ea <_dtoa_r+0x6c2>
 80120b4:	4642      	mov	r2, r8
 80120b6:	464b      	mov	r3, r9
 80120b8:	4630      	mov	r0, r6
 80120ba:	4639      	mov	r1, r7
 80120bc:	f7ee fd34 	bl	8000b28 <__aeabi_dcmpeq>
 80120c0:	b110      	cbz	r0, 80120c8 <_dtoa_r+0x6a0>
 80120c2:	f01a 0f01 	tst.w	sl, #1
 80120c6:	d110      	bne.n	80120ea <_dtoa_r+0x6c2>
 80120c8:	4620      	mov	r0, r4
 80120ca:	ee18 1a10 	vmov	r1, s16
 80120ce:	f000 fe8b 	bl	8012de8 <_Bfree>
 80120d2:	2300      	movs	r3, #0
 80120d4:	9800      	ldr	r0, [sp, #0]
 80120d6:	702b      	strb	r3, [r5, #0]
 80120d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120da:	3001      	adds	r0, #1
 80120dc:	6018      	str	r0, [r3, #0]
 80120de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	f43f acf1 	beq.w	8011ac8 <_dtoa_r+0xa0>
 80120e6:	601d      	str	r5, [r3, #0]
 80120e8:	e4ee      	b.n	8011ac8 <_dtoa_r+0xa0>
 80120ea:	9f00      	ldr	r7, [sp, #0]
 80120ec:	462b      	mov	r3, r5
 80120ee:	461d      	mov	r5, r3
 80120f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80120f4:	2a39      	cmp	r2, #57	; 0x39
 80120f6:	d106      	bne.n	8012106 <_dtoa_r+0x6de>
 80120f8:	9a01      	ldr	r2, [sp, #4]
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d1f7      	bne.n	80120ee <_dtoa_r+0x6c6>
 80120fe:	9901      	ldr	r1, [sp, #4]
 8012100:	2230      	movs	r2, #48	; 0x30
 8012102:	3701      	adds	r7, #1
 8012104:	700a      	strb	r2, [r1, #0]
 8012106:	781a      	ldrb	r2, [r3, #0]
 8012108:	3201      	adds	r2, #1
 801210a:	701a      	strb	r2, [r3, #0]
 801210c:	e790      	b.n	8012030 <_dtoa_r+0x608>
 801210e:	4ba6      	ldr	r3, [pc, #664]	; (80123a8 <_dtoa_r+0x980>)
 8012110:	2200      	movs	r2, #0
 8012112:	f7ee faa1 	bl	8000658 <__aeabi_dmul>
 8012116:	2200      	movs	r2, #0
 8012118:	2300      	movs	r3, #0
 801211a:	4606      	mov	r6, r0
 801211c:	460f      	mov	r7, r1
 801211e:	f7ee fd03 	bl	8000b28 <__aeabi_dcmpeq>
 8012122:	2800      	cmp	r0, #0
 8012124:	d09d      	beq.n	8012062 <_dtoa_r+0x63a>
 8012126:	e7cf      	b.n	80120c8 <_dtoa_r+0x6a0>
 8012128:	9a08      	ldr	r2, [sp, #32]
 801212a:	2a00      	cmp	r2, #0
 801212c:	f000 80d7 	beq.w	80122de <_dtoa_r+0x8b6>
 8012130:	9a06      	ldr	r2, [sp, #24]
 8012132:	2a01      	cmp	r2, #1
 8012134:	f300 80ba 	bgt.w	80122ac <_dtoa_r+0x884>
 8012138:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801213a:	2a00      	cmp	r2, #0
 801213c:	f000 80b2 	beq.w	80122a4 <_dtoa_r+0x87c>
 8012140:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012144:	9e07      	ldr	r6, [sp, #28]
 8012146:	9d04      	ldr	r5, [sp, #16]
 8012148:	9a04      	ldr	r2, [sp, #16]
 801214a:	441a      	add	r2, r3
 801214c:	9204      	str	r2, [sp, #16]
 801214e:	9a05      	ldr	r2, [sp, #20]
 8012150:	2101      	movs	r1, #1
 8012152:	441a      	add	r2, r3
 8012154:	4620      	mov	r0, r4
 8012156:	9205      	str	r2, [sp, #20]
 8012158:	f000 ff48 	bl	8012fec <__i2b>
 801215c:	4607      	mov	r7, r0
 801215e:	2d00      	cmp	r5, #0
 8012160:	dd0c      	ble.n	801217c <_dtoa_r+0x754>
 8012162:	9b05      	ldr	r3, [sp, #20]
 8012164:	2b00      	cmp	r3, #0
 8012166:	dd09      	ble.n	801217c <_dtoa_r+0x754>
 8012168:	42ab      	cmp	r3, r5
 801216a:	9a04      	ldr	r2, [sp, #16]
 801216c:	bfa8      	it	ge
 801216e:	462b      	movge	r3, r5
 8012170:	1ad2      	subs	r2, r2, r3
 8012172:	9204      	str	r2, [sp, #16]
 8012174:	9a05      	ldr	r2, [sp, #20]
 8012176:	1aed      	subs	r5, r5, r3
 8012178:	1ad3      	subs	r3, r2, r3
 801217a:	9305      	str	r3, [sp, #20]
 801217c:	9b07      	ldr	r3, [sp, #28]
 801217e:	b31b      	cbz	r3, 80121c8 <_dtoa_r+0x7a0>
 8012180:	9b08      	ldr	r3, [sp, #32]
 8012182:	2b00      	cmp	r3, #0
 8012184:	f000 80af 	beq.w	80122e6 <_dtoa_r+0x8be>
 8012188:	2e00      	cmp	r6, #0
 801218a:	dd13      	ble.n	80121b4 <_dtoa_r+0x78c>
 801218c:	4639      	mov	r1, r7
 801218e:	4632      	mov	r2, r6
 8012190:	4620      	mov	r0, r4
 8012192:	f000 ffeb 	bl	801316c <__pow5mult>
 8012196:	ee18 2a10 	vmov	r2, s16
 801219a:	4601      	mov	r1, r0
 801219c:	4607      	mov	r7, r0
 801219e:	4620      	mov	r0, r4
 80121a0:	f000 ff3a 	bl	8013018 <__multiply>
 80121a4:	ee18 1a10 	vmov	r1, s16
 80121a8:	4680      	mov	r8, r0
 80121aa:	4620      	mov	r0, r4
 80121ac:	f000 fe1c 	bl	8012de8 <_Bfree>
 80121b0:	ee08 8a10 	vmov	s16, r8
 80121b4:	9b07      	ldr	r3, [sp, #28]
 80121b6:	1b9a      	subs	r2, r3, r6
 80121b8:	d006      	beq.n	80121c8 <_dtoa_r+0x7a0>
 80121ba:	ee18 1a10 	vmov	r1, s16
 80121be:	4620      	mov	r0, r4
 80121c0:	f000 ffd4 	bl	801316c <__pow5mult>
 80121c4:	ee08 0a10 	vmov	s16, r0
 80121c8:	2101      	movs	r1, #1
 80121ca:	4620      	mov	r0, r4
 80121cc:	f000 ff0e 	bl	8012fec <__i2b>
 80121d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	4606      	mov	r6, r0
 80121d6:	f340 8088 	ble.w	80122ea <_dtoa_r+0x8c2>
 80121da:	461a      	mov	r2, r3
 80121dc:	4601      	mov	r1, r0
 80121de:	4620      	mov	r0, r4
 80121e0:	f000 ffc4 	bl	801316c <__pow5mult>
 80121e4:	9b06      	ldr	r3, [sp, #24]
 80121e6:	2b01      	cmp	r3, #1
 80121e8:	4606      	mov	r6, r0
 80121ea:	f340 8081 	ble.w	80122f0 <_dtoa_r+0x8c8>
 80121ee:	f04f 0800 	mov.w	r8, #0
 80121f2:	6933      	ldr	r3, [r6, #16]
 80121f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80121f8:	6918      	ldr	r0, [r3, #16]
 80121fa:	f000 fea7 	bl	8012f4c <__hi0bits>
 80121fe:	f1c0 0020 	rsb	r0, r0, #32
 8012202:	9b05      	ldr	r3, [sp, #20]
 8012204:	4418      	add	r0, r3
 8012206:	f010 001f 	ands.w	r0, r0, #31
 801220a:	f000 8092 	beq.w	8012332 <_dtoa_r+0x90a>
 801220e:	f1c0 0320 	rsb	r3, r0, #32
 8012212:	2b04      	cmp	r3, #4
 8012214:	f340 808a 	ble.w	801232c <_dtoa_r+0x904>
 8012218:	f1c0 001c 	rsb	r0, r0, #28
 801221c:	9b04      	ldr	r3, [sp, #16]
 801221e:	4403      	add	r3, r0
 8012220:	9304      	str	r3, [sp, #16]
 8012222:	9b05      	ldr	r3, [sp, #20]
 8012224:	4403      	add	r3, r0
 8012226:	4405      	add	r5, r0
 8012228:	9305      	str	r3, [sp, #20]
 801222a:	9b04      	ldr	r3, [sp, #16]
 801222c:	2b00      	cmp	r3, #0
 801222e:	dd07      	ble.n	8012240 <_dtoa_r+0x818>
 8012230:	ee18 1a10 	vmov	r1, s16
 8012234:	461a      	mov	r2, r3
 8012236:	4620      	mov	r0, r4
 8012238:	f000 fff2 	bl	8013220 <__lshift>
 801223c:	ee08 0a10 	vmov	s16, r0
 8012240:	9b05      	ldr	r3, [sp, #20]
 8012242:	2b00      	cmp	r3, #0
 8012244:	dd05      	ble.n	8012252 <_dtoa_r+0x82a>
 8012246:	4631      	mov	r1, r6
 8012248:	461a      	mov	r2, r3
 801224a:	4620      	mov	r0, r4
 801224c:	f000 ffe8 	bl	8013220 <__lshift>
 8012250:	4606      	mov	r6, r0
 8012252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012254:	2b00      	cmp	r3, #0
 8012256:	d06e      	beq.n	8012336 <_dtoa_r+0x90e>
 8012258:	ee18 0a10 	vmov	r0, s16
 801225c:	4631      	mov	r1, r6
 801225e:	f001 f84f 	bl	8013300 <__mcmp>
 8012262:	2800      	cmp	r0, #0
 8012264:	da67      	bge.n	8012336 <_dtoa_r+0x90e>
 8012266:	9b00      	ldr	r3, [sp, #0]
 8012268:	3b01      	subs	r3, #1
 801226a:	ee18 1a10 	vmov	r1, s16
 801226e:	9300      	str	r3, [sp, #0]
 8012270:	220a      	movs	r2, #10
 8012272:	2300      	movs	r3, #0
 8012274:	4620      	mov	r0, r4
 8012276:	f000 fdd9 	bl	8012e2c <__multadd>
 801227a:	9b08      	ldr	r3, [sp, #32]
 801227c:	ee08 0a10 	vmov	s16, r0
 8012280:	2b00      	cmp	r3, #0
 8012282:	f000 81b1 	beq.w	80125e8 <_dtoa_r+0xbc0>
 8012286:	2300      	movs	r3, #0
 8012288:	4639      	mov	r1, r7
 801228a:	220a      	movs	r2, #10
 801228c:	4620      	mov	r0, r4
 801228e:	f000 fdcd 	bl	8012e2c <__multadd>
 8012292:	9b02      	ldr	r3, [sp, #8]
 8012294:	2b00      	cmp	r3, #0
 8012296:	4607      	mov	r7, r0
 8012298:	f300 808e 	bgt.w	80123b8 <_dtoa_r+0x990>
 801229c:	9b06      	ldr	r3, [sp, #24]
 801229e:	2b02      	cmp	r3, #2
 80122a0:	dc51      	bgt.n	8012346 <_dtoa_r+0x91e>
 80122a2:	e089      	b.n	80123b8 <_dtoa_r+0x990>
 80122a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80122a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80122aa:	e74b      	b.n	8012144 <_dtoa_r+0x71c>
 80122ac:	9b03      	ldr	r3, [sp, #12]
 80122ae:	1e5e      	subs	r6, r3, #1
 80122b0:	9b07      	ldr	r3, [sp, #28]
 80122b2:	42b3      	cmp	r3, r6
 80122b4:	bfbf      	itttt	lt
 80122b6:	9b07      	ldrlt	r3, [sp, #28]
 80122b8:	9607      	strlt	r6, [sp, #28]
 80122ba:	1af2      	sublt	r2, r6, r3
 80122bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80122be:	bfb6      	itet	lt
 80122c0:	189b      	addlt	r3, r3, r2
 80122c2:	1b9e      	subge	r6, r3, r6
 80122c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80122c6:	9b03      	ldr	r3, [sp, #12]
 80122c8:	bfb8      	it	lt
 80122ca:	2600      	movlt	r6, #0
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	bfb7      	itett	lt
 80122d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80122d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80122d8:	1a9d      	sublt	r5, r3, r2
 80122da:	2300      	movlt	r3, #0
 80122dc:	e734      	b.n	8012148 <_dtoa_r+0x720>
 80122de:	9e07      	ldr	r6, [sp, #28]
 80122e0:	9d04      	ldr	r5, [sp, #16]
 80122e2:	9f08      	ldr	r7, [sp, #32]
 80122e4:	e73b      	b.n	801215e <_dtoa_r+0x736>
 80122e6:	9a07      	ldr	r2, [sp, #28]
 80122e8:	e767      	b.n	80121ba <_dtoa_r+0x792>
 80122ea:	9b06      	ldr	r3, [sp, #24]
 80122ec:	2b01      	cmp	r3, #1
 80122ee:	dc18      	bgt.n	8012322 <_dtoa_r+0x8fa>
 80122f0:	f1ba 0f00 	cmp.w	sl, #0
 80122f4:	d115      	bne.n	8012322 <_dtoa_r+0x8fa>
 80122f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80122fa:	b993      	cbnz	r3, 8012322 <_dtoa_r+0x8fa>
 80122fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012300:	0d1b      	lsrs	r3, r3, #20
 8012302:	051b      	lsls	r3, r3, #20
 8012304:	b183      	cbz	r3, 8012328 <_dtoa_r+0x900>
 8012306:	9b04      	ldr	r3, [sp, #16]
 8012308:	3301      	adds	r3, #1
 801230a:	9304      	str	r3, [sp, #16]
 801230c:	9b05      	ldr	r3, [sp, #20]
 801230e:	3301      	adds	r3, #1
 8012310:	9305      	str	r3, [sp, #20]
 8012312:	f04f 0801 	mov.w	r8, #1
 8012316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012318:	2b00      	cmp	r3, #0
 801231a:	f47f af6a 	bne.w	80121f2 <_dtoa_r+0x7ca>
 801231e:	2001      	movs	r0, #1
 8012320:	e76f      	b.n	8012202 <_dtoa_r+0x7da>
 8012322:	f04f 0800 	mov.w	r8, #0
 8012326:	e7f6      	b.n	8012316 <_dtoa_r+0x8ee>
 8012328:	4698      	mov	r8, r3
 801232a:	e7f4      	b.n	8012316 <_dtoa_r+0x8ee>
 801232c:	f43f af7d 	beq.w	801222a <_dtoa_r+0x802>
 8012330:	4618      	mov	r0, r3
 8012332:	301c      	adds	r0, #28
 8012334:	e772      	b.n	801221c <_dtoa_r+0x7f4>
 8012336:	9b03      	ldr	r3, [sp, #12]
 8012338:	2b00      	cmp	r3, #0
 801233a:	dc37      	bgt.n	80123ac <_dtoa_r+0x984>
 801233c:	9b06      	ldr	r3, [sp, #24]
 801233e:	2b02      	cmp	r3, #2
 8012340:	dd34      	ble.n	80123ac <_dtoa_r+0x984>
 8012342:	9b03      	ldr	r3, [sp, #12]
 8012344:	9302      	str	r3, [sp, #8]
 8012346:	9b02      	ldr	r3, [sp, #8]
 8012348:	b96b      	cbnz	r3, 8012366 <_dtoa_r+0x93e>
 801234a:	4631      	mov	r1, r6
 801234c:	2205      	movs	r2, #5
 801234e:	4620      	mov	r0, r4
 8012350:	f000 fd6c 	bl	8012e2c <__multadd>
 8012354:	4601      	mov	r1, r0
 8012356:	4606      	mov	r6, r0
 8012358:	ee18 0a10 	vmov	r0, s16
 801235c:	f000 ffd0 	bl	8013300 <__mcmp>
 8012360:	2800      	cmp	r0, #0
 8012362:	f73f adbb 	bgt.w	8011edc <_dtoa_r+0x4b4>
 8012366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012368:	9d01      	ldr	r5, [sp, #4]
 801236a:	43db      	mvns	r3, r3
 801236c:	9300      	str	r3, [sp, #0]
 801236e:	f04f 0800 	mov.w	r8, #0
 8012372:	4631      	mov	r1, r6
 8012374:	4620      	mov	r0, r4
 8012376:	f000 fd37 	bl	8012de8 <_Bfree>
 801237a:	2f00      	cmp	r7, #0
 801237c:	f43f aea4 	beq.w	80120c8 <_dtoa_r+0x6a0>
 8012380:	f1b8 0f00 	cmp.w	r8, #0
 8012384:	d005      	beq.n	8012392 <_dtoa_r+0x96a>
 8012386:	45b8      	cmp	r8, r7
 8012388:	d003      	beq.n	8012392 <_dtoa_r+0x96a>
 801238a:	4641      	mov	r1, r8
 801238c:	4620      	mov	r0, r4
 801238e:	f000 fd2b 	bl	8012de8 <_Bfree>
 8012392:	4639      	mov	r1, r7
 8012394:	4620      	mov	r0, r4
 8012396:	f000 fd27 	bl	8012de8 <_Bfree>
 801239a:	e695      	b.n	80120c8 <_dtoa_r+0x6a0>
 801239c:	2600      	movs	r6, #0
 801239e:	4637      	mov	r7, r6
 80123a0:	e7e1      	b.n	8012366 <_dtoa_r+0x93e>
 80123a2:	9700      	str	r7, [sp, #0]
 80123a4:	4637      	mov	r7, r6
 80123a6:	e599      	b.n	8011edc <_dtoa_r+0x4b4>
 80123a8:	40240000 	.word	0x40240000
 80123ac:	9b08      	ldr	r3, [sp, #32]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	f000 80ca 	beq.w	8012548 <_dtoa_r+0xb20>
 80123b4:	9b03      	ldr	r3, [sp, #12]
 80123b6:	9302      	str	r3, [sp, #8]
 80123b8:	2d00      	cmp	r5, #0
 80123ba:	dd05      	ble.n	80123c8 <_dtoa_r+0x9a0>
 80123bc:	4639      	mov	r1, r7
 80123be:	462a      	mov	r2, r5
 80123c0:	4620      	mov	r0, r4
 80123c2:	f000 ff2d 	bl	8013220 <__lshift>
 80123c6:	4607      	mov	r7, r0
 80123c8:	f1b8 0f00 	cmp.w	r8, #0
 80123cc:	d05b      	beq.n	8012486 <_dtoa_r+0xa5e>
 80123ce:	6879      	ldr	r1, [r7, #4]
 80123d0:	4620      	mov	r0, r4
 80123d2:	f000 fcc9 	bl	8012d68 <_Balloc>
 80123d6:	4605      	mov	r5, r0
 80123d8:	b928      	cbnz	r0, 80123e6 <_dtoa_r+0x9be>
 80123da:	4b87      	ldr	r3, [pc, #540]	; (80125f8 <_dtoa_r+0xbd0>)
 80123dc:	4602      	mov	r2, r0
 80123de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80123e2:	f7ff bb3b 	b.w	8011a5c <_dtoa_r+0x34>
 80123e6:	693a      	ldr	r2, [r7, #16]
 80123e8:	3202      	adds	r2, #2
 80123ea:	0092      	lsls	r2, r2, #2
 80123ec:	f107 010c 	add.w	r1, r7, #12
 80123f0:	300c      	adds	r0, #12
 80123f2:	f7fd fc13 	bl	800fc1c <memcpy>
 80123f6:	2201      	movs	r2, #1
 80123f8:	4629      	mov	r1, r5
 80123fa:	4620      	mov	r0, r4
 80123fc:	f000 ff10 	bl	8013220 <__lshift>
 8012400:	9b01      	ldr	r3, [sp, #4]
 8012402:	f103 0901 	add.w	r9, r3, #1
 8012406:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801240a:	4413      	add	r3, r2
 801240c:	9305      	str	r3, [sp, #20]
 801240e:	f00a 0301 	and.w	r3, sl, #1
 8012412:	46b8      	mov	r8, r7
 8012414:	9304      	str	r3, [sp, #16]
 8012416:	4607      	mov	r7, r0
 8012418:	4631      	mov	r1, r6
 801241a:	ee18 0a10 	vmov	r0, s16
 801241e:	f7ff fa77 	bl	8011910 <quorem>
 8012422:	4641      	mov	r1, r8
 8012424:	9002      	str	r0, [sp, #8]
 8012426:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801242a:	ee18 0a10 	vmov	r0, s16
 801242e:	f000 ff67 	bl	8013300 <__mcmp>
 8012432:	463a      	mov	r2, r7
 8012434:	9003      	str	r0, [sp, #12]
 8012436:	4631      	mov	r1, r6
 8012438:	4620      	mov	r0, r4
 801243a:	f000 ff7d 	bl	8013338 <__mdiff>
 801243e:	68c2      	ldr	r2, [r0, #12]
 8012440:	f109 3bff 	add.w	fp, r9, #4294967295
 8012444:	4605      	mov	r5, r0
 8012446:	bb02      	cbnz	r2, 801248a <_dtoa_r+0xa62>
 8012448:	4601      	mov	r1, r0
 801244a:	ee18 0a10 	vmov	r0, s16
 801244e:	f000 ff57 	bl	8013300 <__mcmp>
 8012452:	4602      	mov	r2, r0
 8012454:	4629      	mov	r1, r5
 8012456:	4620      	mov	r0, r4
 8012458:	9207      	str	r2, [sp, #28]
 801245a:	f000 fcc5 	bl	8012de8 <_Bfree>
 801245e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012462:	ea43 0102 	orr.w	r1, r3, r2
 8012466:	9b04      	ldr	r3, [sp, #16]
 8012468:	430b      	orrs	r3, r1
 801246a:	464d      	mov	r5, r9
 801246c:	d10f      	bne.n	801248e <_dtoa_r+0xa66>
 801246e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012472:	d02a      	beq.n	80124ca <_dtoa_r+0xaa2>
 8012474:	9b03      	ldr	r3, [sp, #12]
 8012476:	2b00      	cmp	r3, #0
 8012478:	dd02      	ble.n	8012480 <_dtoa_r+0xa58>
 801247a:	9b02      	ldr	r3, [sp, #8]
 801247c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012480:	f88b a000 	strb.w	sl, [fp]
 8012484:	e775      	b.n	8012372 <_dtoa_r+0x94a>
 8012486:	4638      	mov	r0, r7
 8012488:	e7ba      	b.n	8012400 <_dtoa_r+0x9d8>
 801248a:	2201      	movs	r2, #1
 801248c:	e7e2      	b.n	8012454 <_dtoa_r+0xa2c>
 801248e:	9b03      	ldr	r3, [sp, #12]
 8012490:	2b00      	cmp	r3, #0
 8012492:	db04      	blt.n	801249e <_dtoa_r+0xa76>
 8012494:	9906      	ldr	r1, [sp, #24]
 8012496:	430b      	orrs	r3, r1
 8012498:	9904      	ldr	r1, [sp, #16]
 801249a:	430b      	orrs	r3, r1
 801249c:	d122      	bne.n	80124e4 <_dtoa_r+0xabc>
 801249e:	2a00      	cmp	r2, #0
 80124a0:	ddee      	ble.n	8012480 <_dtoa_r+0xa58>
 80124a2:	ee18 1a10 	vmov	r1, s16
 80124a6:	2201      	movs	r2, #1
 80124a8:	4620      	mov	r0, r4
 80124aa:	f000 feb9 	bl	8013220 <__lshift>
 80124ae:	4631      	mov	r1, r6
 80124b0:	ee08 0a10 	vmov	s16, r0
 80124b4:	f000 ff24 	bl	8013300 <__mcmp>
 80124b8:	2800      	cmp	r0, #0
 80124ba:	dc03      	bgt.n	80124c4 <_dtoa_r+0xa9c>
 80124bc:	d1e0      	bne.n	8012480 <_dtoa_r+0xa58>
 80124be:	f01a 0f01 	tst.w	sl, #1
 80124c2:	d0dd      	beq.n	8012480 <_dtoa_r+0xa58>
 80124c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80124c8:	d1d7      	bne.n	801247a <_dtoa_r+0xa52>
 80124ca:	2339      	movs	r3, #57	; 0x39
 80124cc:	f88b 3000 	strb.w	r3, [fp]
 80124d0:	462b      	mov	r3, r5
 80124d2:	461d      	mov	r5, r3
 80124d4:	3b01      	subs	r3, #1
 80124d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80124da:	2a39      	cmp	r2, #57	; 0x39
 80124dc:	d071      	beq.n	80125c2 <_dtoa_r+0xb9a>
 80124de:	3201      	adds	r2, #1
 80124e0:	701a      	strb	r2, [r3, #0]
 80124e2:	e746      	b.n	8012372 <_dtoa_r+0x94a>
 80124e4:	2a00      	cmp	r2, #0
 80124e6:	dd07      	ble.n	80124f8 <_dtoa_r+0xad0>
 80124e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80124ec:	d0ed      	beq.n	80124ca <_dtoa_r+0xaa2>
 80124ee:	f10a 0301 	add.w	r3, sl, #1
 80124f2:	f88b 3000 	strb.w	r3, [fp]
 80124f6:	e73c      	b.n	8012372 <_dtoa_r+0x94a>
 80124f8:	9b05      	ldr	r3, [sp, #20]
 80124fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80124fe:	4599      	cmp	r9, r3
 8012500:	d047      	beq.n	8012592 <_dtoa_r+0xb6a>
 8012502:	ee18 1a10 	vmov	r1, s16
 8012506:	2300      	movs	r3, #0
 8012508:	220a      	movs	r2, #10
 801250a:	4620      	mov	r0, r4
 801250c:	f000 fc8e 	bl	8012e2c <__multadd>
 8012510:	45b8      	cmp	r8, r7
 8012512:	ee08 0a10 	vmov	s16, r0
 8012516:	f04f 0300 	mov.w	r3, #0
 801251a:	f04f 020a 	mov.w	r2, #10
 801251e:	4641      	mov	r1, r8
 8012520:	4620      	mov	r0, r4
 8012522:	d106      	bne.n	8012532 <_dtoa_r+0xb0a>
 8012524:	f000 fc82 	bl	8012e2c <__multadd>
 8012528:	4680      	mov	r8, r0
 801252a:	4607      	mov	r7, r0
 801252c:	f109 0901 	add.w	r9, r9, #1
 8012530:	e772      	b.n	8012418 <_dtoa_r+0x9f0>
 8012532:	f000 fc7b 	bl	8012e2c <__multadd>
 8012536:	4639      	mov	r1, r7
 8012538:	4680      	mov	r8, r0
 801253a:	2300      	movs	r3, #0
 801253c:	220a      	movs	r2, #10
 801253e:	4620      	mov	r0, r4
 8012540:	f000 fc74 	bl	8012e2c <__multadd>
 8012544:	4607      	mov	r7, r0
 8012546:	e7f1      	b.n	801252c <_dtoa_r+0xb04>
 8012548:	9b03      	ldr	r3, [sp, #12]
 801254a:	9302      	str	r3, [sp, #8]
 801254c:	9d01      	ldr	r5, [sp, #4]
 801254e:	ee18 0a10 	vmov	r0, s16
 8012552:	4631      	mov	r1, r6
 8012554:	f7ff f9dc 	bl	8011910 <quorem>
 8012558:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801255c:	9b01      	ldr	r3, [sp, #4]
 801255e:	f805 ab01 	strb.w	sl, [r5], #1
 8012562:	1aea      	subs	r2, r5, r3
 8012564:	9b02      	ldr	r3, [sp, #8]
 8012566:	4293      	cmp	r3, r2
 8012568:	dd09      	ble.n	801257e <_dtoa_r+0xb56>
 801256a:	ee18 1a10 	vmov	r1, s16
 801256e:	2300      	movs	r3, #0
 8012570:	220a      	movs	r2, #10
 8012572:	4620      	mov	r0, r4
 8012574:	f000 fc5a 	bl	8012e2c <__multadd>
 8012578:	ee08 0a10 	vmov	s16, r0
 801257c:	e7e7      	b.n	801254e <_dtoa_r+0xb26>
 801257e:	9b02      	ldr	r3, [sp, #8]
 8012580:	2b00      	cmp	r3, #0
 8012582:	bfc8      	it	gt
 8012584:	461d      	movgt	r5, r3
 8012586:	9b01      	ldr	r3, [sp, #4]
 8012588:	bfd8      	it	le
 801258a:	2501      	movle	r5, #1
 801258c:	441d      	add	r5, r3
 801258e:	f04f 0800 	mov.w	r8, #0
 8012592:	ee18 1a10 	vmov	r1, s16
 8012596:	2201      	movs	r2, #1
 8012598:	4620      	mov	r0, r4
 801259a:	f000 fe41 	bl	8013220 <__lshift>
 801259e:	4631      	mov	r1, r6
 80125a0:	ee08 0a10 	vmov	s16, r0
 80125a4:	f000 feac 	bl	8013300 <__mcmp>
 80125a8:	2800      	cmp	r0, #0
 80125aa:	dc91      	bgt.n	80124d0 <_dtoa_r+0xaa8>
 80125ac:	d102      	bne.n	80125b4 <_dtoa_r+0xb8c>
 80125ae:	f01a 0f01 	tst.w	sl, #1
 80125b2:	d18d      	bne.n	80124d0 <_dtoa_r+0xaa8>
 80125b4:	462b      	mov	r3, r5
 80125b6:	461d      	mov	r5, r3
 80125b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80125bc:	2a30      	cmp	r2, #48	; 0x30
 80125be:	d0fa      	beq.n	80125b6 <_dtoa_r+0xb8e>
 80125c0:	e6d7      	b.n	8012372 <_dtoa_r+0x94a>
 80125c2:	9a01      	ldr	r2, [sp, #4]
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d184      	bne.n	80124d2 <_dtoa_r+0xaaa>
 80125c8:	9b00      	ldr	r3, [sp, #0]
 80125ca:	3301      	adds	r3, #1
 80125cc:	9300      	str	r3, [sp, #0]
 80125ce:	2331      	movs	r3, #49	; 0x31
 80125d0:	7013      	strb	r3, [r2, #0]
 80125d2:	e6ce      	b.n	8012372 <_dtoa_r+0x94a>
 80125d4:	4b09      	ldr	r3, [pc, #36]	; (80125fc <_dtoa_r+0xbd4>)
 80125d6:	f7ff ba95 	b.w	8011b04 <_dtoa_r+0xdc>
 80125da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125dc:	2b00      	cmp	r3, #0
 80125de:	f47f aa6e 	bne.w	8011abe <_dtoa_r+0x96>
 80125e2:	4b07      	ldr	r3, [pc, #28]	; (8012600 <_dtoa_r+0xbd8>)
 80125e4:	f7ff ba8e 	b.w	8011b04 <_dtoa_r+0xdc>
 80125e8:	9b02      	ldr	r3, [sp, #8]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	dcae      	bgt.n	801254c <_dtoa_r+0xb24>
 80125ee:	9b06      	ldr	r3, [sp, #24]
 80125f0:	2b02      	cmp	r3, #2
 80125f2:	f73f aea8 	bgt.w	8012346 <_dtoa_r+0x91e>
 80125f6:	e7a9      	b.n	801254c <_dtoa_r+0xb24>
 80125f8:	080165f9 	.word	0x080165f9
 80125fc:	080167f1 	.word	0x080167f1
 8012600:	08016591 	.word	0x08016591

08012604 <fiprintf>:
 8012604:	b40e      	push	{r1, r2, r3}
 8012606:	b503      	push	{r0, r1, lr}
 8012608:	4601      	mov	r1, r0
 801260a:	ab03      	add	r3, sp, #12
 801260c:	4805      	ldr	r0, [pc, #20]	; (8012624 <fiprintf+0x20>)
 801260e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012612:	6800      	ldr	r0, [r0, #0]
 8012614:	9301      	str	r3, [sp, #4]
 8012616:	f001 fcb7 	bl	8013f88 <_vfiprintf_r>
 801261a:	b002      	add	sp, #8
 801261c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012620:	b003      	add	sp, #12
 8012622:	4770      	bx	lr
 8012624:	200003e0 	.word	0x200003e0

08012628 <rshift>:
 8012628:	6903      	ldr	r3, [r0, #16]
 801262a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801262e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012632:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012636:	f100 0414 	add.w	r4, r0, #20
 801263a:	dd45      	ble.n	80126c8 <rshift+0xa0>
 801263c:	f011 011f 	ands.w	r1, r1, #31
 8012640:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012644:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012648:	d10c      	bne.n	8012664 <rshift+0x3c>
 801264a:	f100 0710 	add.w	r7, r0, #16
 801264e:	4629      	mov	r1, r5
 8012650:	42b1      	cmp	r1, r6
 8012652:	d334      	bcc.n	80126be <rshift+0x96>
 8012654:	1a9b      	subs	r3, r3, r2
 8012656:	009b      	lsls	r3, r3, #2
 8012658:	1eea      	subs	r2, r5, #3
 801265a:	4296      	cmp	r6, r2
 801265c:	bf38      	it	cc
 801265e:	2300      	movcc	r3, #0
 8012660:	4423      	add	r3, r4
 8012662:	e015      	b.n	8012690 <rshift+0x68>
 8012664:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012668:	f1c1 0820 	rsb	r8, r1, #32
 801266c:	40cf      	lsrs	r7, r1
 801266e:	f105 0e04 	add.w	lr, r5, #4
 8012672:	46a1      	mov	r9, r4
 8012674:	4576      	cmp	r6, lr
 8012676:	46f4      	mov	ip, lr
 8012678:	d815      	bhi.n	80126a6 <rshift+0x7e>
 801267a:	1a9a      	subs	r2, r3, r2
 801267c:	0092      	lsls	r2, r2, #2
 801267e:	3a04      	subs	r2, #4
 8012680:	3501      	adds	r5, #1
 8012682:	42ae      	cmp	r6, r5
 8012684:	bf38      	it	cc
 8012686:	2200      	movcc	r2, #0
 8012688:	18a3      	adds	r3, r4, r2
 801268a:	50a7      	str	r7, [r4, r2]
 801268c:	b107      	cbz	r7, 8012690 <rshift+0x68>
 801268e:	3304      	adds	r3, #4
 8012690:	1b1a      	subs	r2, r3, r4
 8012692:	42a3      	cmp	r3, r4
 8012694:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012698:	bf08      	it	eq
 801269a:	2300      	moveq	r3, #0
 801269c:	6102      	str	r2, [r0, #16]
 801269e:	bf08      	it	eq
 80126a0:	6143      	streq	r3, [r0, #20]
 80126a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126a6:	f8dc c000 	ldr.w	ip, [ip]
 80126aa:	fa0c fc08 	lsl.w	ip, ip, r8
 80126ae:	ea4c 0707 	orr.w	r7, ip, r7
 80126b2:	f849 7b04 	str.w	r7, [r9], #4
 80126b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80126ba:	40cf      	lsrs	r7, r1
 80126bc:	e7da      	b.n	8012674 <rshift+0x4c>
 80126be:	f851 cb04 	ldr.w	ip, [r1], #4
 80126c2:	f847 cf04 	str.w	ip, [r7, #4]!
 80126c6:	e7c3      	b.n	8012650 <rshift+0x28>
 80126c8:	4623      	mov	r3, r4
 80126ca:	e7e1      	b.n	8012690 <rshift+0x68>

080126cc <__hexdig_fun>:
 80126cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80126d0:	2b09      	cmp	r3, #9
 80126d2:	d802      	bhi.n	80126da <__hexdig_fun+0xe>
 80126d4:	3820      	subs	r0, #32
 80126d6:	b2c0      	uxtb	r0, r0
 80126d8:	4770      	bx	lr
 80126da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80126de:	2b05      	cmp	r3, #5
 80126e0:	d801      	bhi.n	80126e6 <__hexdig_fun+0x1a>
 80126e2:	3847      	subs	r0, #71	; 0x47
 80126e4:	e7f7      	b.n	80126d6 <__hexdig_fun+0xa>
 80126e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80126ea:	2b05      	cmp	r3, #5
 80126ec:	d801      	bhi.n	80126f2 <__hexdig_fun+0x26>
 80126ee:	3827      	subs	r0, #39	; 0x27
 80126f0:	e7f1      	b.n	80126d6 <__hexdig_fun+0xa>
 80126f2:	2000      	movs	r0, #0
 80126f4:	4770      	bx	lr
	...

080126f8 <__gethex>:
 80126f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126fc:	ed2d 8b02 	vpush	{d8}
 8012700:	b089      	sub	sp, #36	; 0x24
 8012702:	ee08 0a10 	vmov	s16, r0
 8012706:	9304      	str	r3, [sp, #16]
 8012708:	4bb4      	ldr	r3, [pc, #720]	; (80129dc <__gethex+0x2e4>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	9301      	str	r3, [sp, #4]
 801270e:	4618      	mov	r0, r3
 8012710:	468b      	mov	fp, r1
 8012712:	4690      	mov	r8, r2
 8012714:	f7ed fd86 	bl	8000224 <strlen>
 8012718:	9b01      	ldr	r3, [sp, #4]
 801271a:	f8db 2000 	ldr.w	r2, [fp]
 801271e:	4403      	add	r3, r0
 8012720:	4682      	mov	sl, r0
 8012722:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012726:	9305      	str	r3, [sp, #20]
 8012728:	1c93      	adds	r3, r2, #2
 801272a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801272e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012732:	32fe      	adds	r2, #254	; 0xfe
 8012734:	18d1      	adds	r1, r2, r3
 8012736:	461f      	mov	r7, r3
 8012738:	f813 0b01 	ldrb.w	r0, [r3], #1
 801273c:	9100      	str	r1, [sp, #0]
 801273e:	2830      	cmp	r0, #48	; 0x30
 8012740:	d0f8      	beq.n	8012734 <__gethex+0x3c>
 8012742:	f7ff ffc3 	bl	80126cc <__hexdig_fun>
 8012746:	4604      	mov	r4, r0
 8012748:	2800      	cmp	r0, #0
 801274a:	d13a      	bne.n	80127c2 <__gethex+0xca>
 801274c:	9901      	ldr	r1, [sp, #4]
 801274e:	4652      	mov	r2, sl
 8012750:	4638      	mov	r0, r7
 8012752:	f001 fefd 	bl	8014550 <strncmp>
 8012756:	4605      	mov	r5, r0
 8012758:	2800      	cmp	r0, #0
 801275a:	d168      	bne.n	801282e <__gethex+0x136>
 801275c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012760:	eb07 060a 	add.w	r6, r7, sl
 8012764:	f7ff ffb2 	bl	80126cc <__hexdig_fun>
 8012768:	2800      	cmp	r0, #0
 801276a:	d062      	beq.n	8012832 <__gethex+0x13a>
 801276c:	4633      	mov	r3, r6
 801276e:	7818      	ldrb	r0, [r3, #0]
 8012770:	2830      	cmp	r0, #48	; 0x30
 8012772:	461f      	mov	r7, r3
 8012774:	f103 0301 	add.w	r3, r3, #1
 8012778:	d0f9      	beq.n	801276e <__gethex+0x76>
 801277a:	f7ff ffa7 	bl	80126cc <__hexdig_fun>
 801277e:	2301      	movs	r3, #1
 8012780:	fab0 f480 	clz	r4, r0
 8012784:	0964      	lsrs	r4, r4, #5
 8012786:	4635      	mov	r5, r6
 8012788:	9300      	str	r3, [sp, #0]
 801278a:	463a      	mov	r2, r7
 801278c:	4616      	mov	r6, r2
 801278e:	3201      	adds	r2, #1
 8012790:	7830      	ldrb	r0, [r6, #0]
 8012792:	f7ff ff9b 	bl	80126cc <__hexdig_fun>
 8012796:	2800      	cmp	r0, #0
 8012798:	d1f8      	bne.n	801278c <__gethex+0x94>
 801279a:	9901      	ldr	r1, [sp, #4]
 801279c:	4652      	mov	r2, sl
 801279e:	4630      	mov	r0, r6
 80127a0:	f001 fed6 	bl	8014550 <strncmp>
 80127a4:	b980      	cbnz	r0, 80127c8 <__gethex+0xd0>
 80127a6:	b94d      	cbnz	r5, 80127bc <__gethex+0xc4>
 80127a8:	eb06 050a 	add.w	r5, r6, sl
 80127ac:	462a      	mov	r2, r5
 80127ae:	4616      	mov	r6, r2
 80127b0:	3201      	adds	r2, #1
 80127b2:	7830      	ldrb	r0, [r6, #0]
 80127b4:	f7ff ff8a 	bl	80126cc <__hexdig_fun>
 80127b8:	2800      	cmp	r0, #0
 80127ba:	d1f8      	bne.n	80127ae <__gethex+0xb6>
 80127bc:	1bad      	subs	r5, r5, r6
 80127be:	00ad      	lsls	r5, r5, #2
 80127c0:	e004      	b.n	80127cc <__gethex+0xd4>
 80127c2:	2400      	movs	r4, #0
 80127c4:	4625      	mov	r5, r4
 80127c6:	e7e0      	b.n	801278a <__gethex+0x92>
 80127c8:	2d00      	cmp	r5, #0
 80127ca:	d1f7      	bne.n	80127bc <__gethex+0xc4>
 80127cc:	7833      	ldrb	r3, [r6, #0]
 80127ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80127d2:	2b50      	cmp	r3, #80	; 0x50
 80127d4:	d13b      	bne.n	801284e <__gethex+0x156>
 80127d6:	7873      	ldrb	r3, [r6, #1]
 80127d8:	2b2b      	cmp	r3, #43	; 0x2b
 80127da:	d02c      	beq.n	8012836 <__gethex+0x13e>
 80127dc:	2b2d      	cmp	r3, #45	; 0x2d
 80127de:	d02e      	beq.n	801283e <__gethex+0x146>
 80127e0:	1c71      	adds	r1, r6, #1
 80127e2:	f04f 0900 	mov.w	r9, #0
 80127e6:	7808      	ldrb	r0, [r1, #0]
 80127e8:	f7ff ff70 	bl	80126cc <__hexdig_fun>
 80127ec:	1e43      	subs	r3, r0, #1
 80127ee:	b2db      	uxtb	r3, r3
 80127f0:	2b18      	cmp	r3, #24
 80127f2:	d82c      	bhi.n	801284e <__gethex+0x156>
 80127f4:	f1a0 0210 	sub.w	r2, r0, #16
 80127f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80127fc:	f7ff ff66 	bl	80126cc <__hexdig_fun>
 8012800:	1e43      	subs	r3, r0, #1
 8012802:	b2db      	uxtb	r3, r3
 8012804:	2b18      	cmp	r3, #24
 8012806:	d91d      	bls.n	8012844 <__gethex+0x14c>
 8012808:	f1b9 0f00 	cmp.w	r9, #0
 801280c:	d000      	beq.n	8012810 <__gethex+0x118>
 801280e:	4252      	negs	r2, r2
 8012810:	4415      	add	r5, r2
 8012812:	f8cb 1000 	str.w	r1, [fp]
 8012816:	b1e4      	cbz	r4, 8012852 <__gethex+0x15a>
 8012818:	9b00      	ldr	r3, [sp, #0]
 801281a:	2b00      	cmp	r3, #0
 801281c:	bf14      	ite	ne
 801281e:	2700      	movne	r7, #0
 8012820:	2706      	moveq	r7, #6
 8012822:	4638      	mov	r0, r7
 8012824:	b009      	add	sp, #36	; 0x24
 8012826:	ecbd 8b02 	vpop	{d8}
 801282a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801282e:	463e      	mov	r6, r7
 8012830:	4625      	mov	r5, r4
 8012832:	2401      	movs	r4, #1
 8012834:	e7ca      	b.n	80127cc <__gethex+0xd4>
 8012836:	f04f 0900 	mov.w	r9, #0
 801283a:	1cb1      	adds	r1, r6, #2
 801283c:	e7d3      	b.n	80127e6 <__gethex+0xee>
 801283e:	f04f 0901 	mov.w	r9, #1
 8012842:	e7fa      	b.n	801283a <__gethex+0x142>
 8012844:	230a      	movs	r3, #10
 8012846:	fb03 0202 	mla	r2, r3, r2, r0
 801284a:	3a10      	subs	r2, #16
 801284c:	e7d4      	b.n	80127f8 <__gethex+0x100>
 801284e:	4631      	mov	r1, r6
 8012850:	e7df      	b.n	8012812 <__gethex+0x11a>
 8012852:	1bf3      	subs	r3, r6, r7
 8012854:	3b01      	subs	r3, #1
 8012856:	4621      	mov	r1, r4
 8012858:	2b07      	cmp	r3, #7
 801285a:	dc0b      	bgt.n	8012874 <__gethex+0x17c>
 801285c:	ee18 0a10 	vmov	r0, s16
 8012860:	f000 fa82 	bl	8012d68 <_Balloc>
 8012864:	4604      	mov	r4, r0
 8012866:	b940      	cbnz	r0, 801287a <__gethex+0x182>
 8012868:	4b5d      	ldr	r3, [pc, #372]	; (80129e0 <__gethex+0x2e8>)
 801286a:	4602      	mov	r2, r0
 801286c:	21de      	movs	r1, #222	; 0xde
 801286e:	485d      	ldr	r0, [pc, #372]	; (80129e4 <__gethex+0x2ec>)
 8012870:	f7ff f820 	bl	80118b4 <__assert_func>
 8012874:	3101      	adds	r1, #1
 8012876:	105b      	asrs	r3, r3, #1
 8012878:	e7ee      	b.n	8012858 <__gethex+0x160>
 801287a:	f100 0914 	add.w	r9, r0, #20
 801287e:	f04f 0b00 	mov.w	fp, #0
 8012882:	f1ca 0301 	rsb	r3, sl, #1
 8012886:	f8cd 9008 	str.w	r9, [sp, #8]
 801288a:	f8cd b000 	str.w	fp, [sp]
 801288e:	9306      	str	r3, [sp, #24]
 8012890:	42b7      	cmp	r7, r6
 8012892:	d340      	bcc.n	8012916 <__gethex+0x21e>
 8012894:	9802      	ldr	r0, [sp, #8]
 8012896:	9b00      	ldr	r3, [sp, #0]
 8012898:	f840 3b04 	str.w	r3, [r0], #4
 801289c:	eba0 0009 	sub.w	r0, r0, r9
 80128a0:	1080      	asrs	r0, r0, #2
 80128a2:	0146      	lsls	r6, r0, #5
 80128a4:	6120      	str	r0, [r4, #16]
 80128a6:	4618      	mov	r0, r3
 80128a8:	f000 fb50 	bl	8012f4c <__hi0bits>
 80128ac:	1a30      	subs	r0, r6, r0
 80128ae:	f8d8 6000 	ldr.w	r6, [r8]
 80128b2:	42b0      	cmp	r0, r6
 80128b4:	dd63      	ble.n	801297e <__gethex+0x286>
 80128b6:	1b87      	subs	r7, r0, r6
 80128b8:	4639      	mov	r1, r7
 80128ba:	4620      	mov	r0, r4
 80128bc:	f000 fef4 	bl	80136a8 <__any_on>
 80128c0:	4682      	mov	sl, r0
 80128c2:	b1a8      	cbz	r0, 80128f0 <__gethex+0x1f8>
 80128c4:	1e7b      	subs	r3, r7, #1
 80128c6:	1159      	asrs	r1, r3, #5
 80128c8:	f003 021f 	and.w	r2, r3, #31
 80128cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80128d0:	f04f 0a01 	mov.w	sl, #1
 80128d4:	fa0a f202 	lsl.w	r2, sl, r2
 80128d8:	420a      	tst	r2, r1
 80128da:	d009      	beq.n	80128f0 <__gethex+0x1f8>
 80128dc:	4553      	cmp	r3, sl
 80128de:	dd05      	ble.n	80128ec <__gethex+0x1f4>
 80128e0:	1eb9      	subs	r1, r7, #2
 80128e2:	4620      	mov	r0, r4
 80128e4:	f000 fee0 	bl	80136a8 <__any_on>
 80128e8:	2800      	cmp	r0, #0
 80128ea:	d145      	bne.n	8012978 <__gethex+0x280>
 80128ec:	f04f 0a02 	mov.w	sl, #2
 80128f0:	4639      	mov	r1, r7
 80128f2:	4620      	mov	r0, r4
 80128f4:	f7ff fe98 	bl	8012628 <rshift>
 80128f8:	443d      	add	r5, r7
 80128fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80128fe:	42ab      	cmp	r3, r5
 8012900:	da4c      	bge.n	801299c <__gethex+0x2a4>
 8012902:	ee18 0a10 	vmov	r0, s16
 8012906:	4621      	mov	r1, r4
 8012908:	f000 fa6e 	bl	8012de8 <_Bfree>
 801290c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801290e:	2300      	movs	r3, #0
 8012910:	6013      	str	r3, [r2, #0]
 8012912:	27a3      	movs	r7, #163	; 0xa3
 8012914:	e785      	b.n	8012822 <__gethex+0x12a>
 8012916:	1e73      	subs	r3, r6, #1
 8012918:	9a05      	ldr	r2, [sp, #20]
 801291a:	9303      	str	r3, [sp, #12]
 801291c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012920:	4293      	cmp	r3, r2
 8012922:	d019      	beq.n	8012958 <__gethex+0x260>
 8012924:	f1bb 0f20 	cmp.w	fp, #32
 8012928:	d107      	bne.n	801293a <__gethex+0x242>
 801292a:	9b02      	ldr	r3, [sp, #8]
 801292c:	9a00      	ldr	r2, [sp, #0]
 801292e:	f843 2b04 	str.w	r2, [r3], #4
 8012932:	9302      	str	r3, [sp, #8]
 8012934:	2300      	movs	r3, #0
 8012936:	9300      	str	r3, [sp, #0]
 8012938:	469b      	mov	fp, r3
 801293a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801293e:	f7ff fec5 	bl	80126cc <__hexdig_fun>
 8012942:	9b00      	ldr	r3, [sp, #0]
 8012944:	f000 000f 	and.w	r0, r0, #15
 8012948:	fa00 f00b 	lsl.w	r0, r0, fp
 801294c:	4303      	orrs	r3, r0
 801294e:	9300      	str	r3, [sp, #0]
 8012950:	f10b 0b04 	add.w	fp, fp, #4
 8012954:	9b03      	ldr	r3, [sp, #12]
 8012956:	e00d      	b.n	8012974 <__gethex+0x27c>
 8012958:	9b03      	ldr	r3, [sp, #12]
 801295a:	9a06      	ldr	r2, [sp, #24]
 801295c:	4413      	add	r3, r2
 801295e:	42bb      	cmp	r3, r7
 8012960:	d3e0      	bcc.n	8012924 <__gethex+0x22c>
 8012962:	4618      	mov	r0, r3
 8012964:	9901      	ldr	r1, [sp, #4]
 8012966:	9307      	str	r3, [sp, #28]
 8012968:	4652      	mov	r2, sl
 801296a:	f001 fdf1 	bl	8014550 <strncmp>
 801296e:	9b07      	ldr	r3, [sp, #28]
 8012970:	2800      	cmp	r0, #0
 8012972:	d1d7      	bne.n	8012924 <__gethex+0x22c>
 8012974:	461e      	mov	r6, r3
 8012976:	e78b      	b.n	8012890 <__gethex+0x198>
 8012978:	f04f 0a03 	mov.w	sl, #3
 801297c:	e7b8      	b.n	80128f0 <__gethex+0x1f8>
 801297e:	da0a      	bge.n	8012996 <__gethex+0x29e>
 8012980:	1a37      	subs	r7, r6, r0
 8012982:	4621      	mov	r1, r4
 8012984:	ee18 0a10 	vmov	r0, s16
 8012988:	463a      	mov	r2, r7
 801298a:	f000 fc49 	bl	8013220 <__lshift>
 801298e:	1bed      	subs	r5, r5, r7
 8012990:	4604      	mov	r4, r0
 8012992:	f100 0914 	add.w	r9, r0, #20
 8012996:	f04f 0a00 	mov.w	sl, #0
 801299a:	e7ae      	b.n	80128fa <__gethex+0x202>
 801299c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80129a0:	42a8      	cmp	r0, r5
 80129a2:	dd72      	ble.n	8012a8a <__gethex+0x392>
 80129a4:	1b45      	subs	r5, r0, r5
 80129a6:	42ae      	cmp	r6, r5
 80129a8:	dc36      	bgt.n	8012a18 <__gethex+0x320>
 80129aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80129ae:	2b02      	cmp	r3, #2
 80129b0:	d02a      	beq.n	8012a08 <__gethex+0x310>
 80129b2:	2b03      	cmp	r3, #3
 80129b4:	d02c      	beq.n	8012a10 <__gethex+0x318>
 80129b6:	2b01      	cmp	r3, #1
 80129b8:	d11c      	bne.n	80129f4 <__gethex+0x2fc>
 80129ba:	42ae      	cmp	r6, r5
 80129bc:	d11a      	bne.n	80129f4 <__gethex+0x2fc>
 80129be:	2e01      	cmp	r6, #1
 80129c0:	d112      	bne.n	80129e8 <__gethex+0x2f0>
 80129c2:	9a04      	ldr	r2, [sp, #16]
 80129c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80129c8:	6013      	str	r3, [r2, #0]
 80129ca:	2301      	movs	r3, #1
 80129cc:	6123      	str	r3, [r4, #16]
 80129ce:	f8c9 3000 	str.w	r3, [r9]
 80129d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80129d4:	2762      	movs	r7, #98	; 0x62
 80129d6:	601c      	str	r4, [r3, #0]
 80129d8:	e723      	b.n	8012822 <__gethex+0x12a>
 80129da:	bf00      	nop
 80129dc:	08016670 	.word	0x08016670
 80129e0:	080165f9 	.word	0x080165f9
 80129e4:	0801660a 	.word	0x0801660a
 80129e8:	1e71      	subs	r1, r6, #1
 80129ea:	4620      	mov	r0, r4
 80129ec:	f000 fe5c 	bl	80136a8 <__any_on>
 80129f0:	2800      	cmp	r0, #0
 80129f2:	d1e6      	bne.n	80129c2 <__gethex+0x2ca>
 80129f4:	ee18 0a10 	vmov	r0, s16
 80129f8:	4621      	mov	r1, r4
 80129fa:	f000 f9f5 	bl	8012de8 <_Bfree>
 80129fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012a00:	2300      	movs	r3, #0
 8012a02:	6013      	str	r3, [r2, #0]
 8012a04:	2750      	movs	r7, #80	; 0x50
 8012a06:	e70c      	b.n	8012822 <__gethex+0x12a>
 8012a08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d1f2      	bne.n	80129f4 <__gethex+0x2fc>
 8012a0e:	e7d8      	b.n	80129c2 <__gethex+0x2ca>
 8012a10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d1d5      	bne.n	80129c2 <__gethex+0x2ca>
 8012a16:	e7ed      	b.n	80129f4 <__gethex+0x2fc>
 8012a18:	1e6f      	subs	r7, r5, #1
 8012a1a:	f1ba 0f00 	cmp.w	sl, #0
 8012a1e:	d131      	bne.n	8012a84 <__gethex+0x38c>
 8012a20:	b127      	cbz	r7, 8012a2c <__gethex+0x334>
 8012a22:	4639      	mov	r1, r7
 8012a24:	4620      	mov	r0, r4
 8012a26:	f000 fe3f 	bl	80136a8 <__any_on>
 8012a2a:	4682      	mov	sl, r0
 8012a2c:	117b      	asrs	r3, r7, #5
 8012a2e:	2101      	movs	r1, #1
 8012a30:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012a34:	f007 071f 	and.w	r7, r7, #31
 8012a38:	fa01 f707 	lsl.w	r7, r1, r7
 8012a3c:	421f      	tst	r7, r3
 8012a3e:	4629      	mov	r1, r5
 8012a40:	4620      	mov	r0, r4
 8012a42:	bf18      	it	ne
 8012a44:	f04a 0a02 	orrne.w	sl, sl, #2
 8012a48:	1b76      	subs	r6, r6, r5
 8012a4a:	f7ff fded 	bl	8012628 <rshift>
 8012a4e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012a52:	2702      	movs	r7, #2
 8012a54:	f1ba 0f00 	cmp.w	sl, #0
 8012a58:	d048      	beq.n	8012aec <__gethex+0x3f4>
 8012a5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012a5e:	2b02      	cmp	r3, #2
 8012a60:	d015      	beq.n	8012a8e <__gethex+0x396>
 8012a62:	2b03      	cmp	r3, #3
 8012a64:	d017      	beq.n	8012a96 <__gethex+0x39e>
 8012a66:	2b01      	cmp	r3, #1
 8012a68:	d109      	bne.n	8012a7e <__gethex+0x386>
 8012a6a:	f01a 0f02 	tst.w	sl, #2
 8012a6e:	d006      	beq.n	8012a7e <__gethex+0x386>
 8012a70:	f8d9 0000 	ldr.w	r0, [r9]
 8012a74:	ea4a 0a00 	orr.w	sl, sl, r0
 8012a78:	f01a 0f01 	tst.w	sl, #1
 8012a7c:	d10e      	bne.n	8012a9c <__gethex+0x3a4>
 8012a7e:	f047 0710 	orr.w	r7, r7, #16
 8012a82:	e033      	b.n	8012aec <__gethex+0x3f4>
 8012a84:	f04f 0a01 	mov.w	sl, #1
 8012a88:	e7d0      	b.n	8012a2c <__gethex+0x334>
 8012a8a:	2701      	movs	r7, #1
 8012a8c:	e7e2      	b.n	8012a54 <__gethex+0x35c>
 8012a8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a90:	f1c3 0301 	rsb	r3, r3, #1
 8012a94:	9315      	str	r3, [sp, #84]	; 0x54
 8012a96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d0f0      	beq.n	8012a7e <__gethex+0x386>
 8012a9c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012aa0:	f104 0314 	add.w	r3, r4, #20
 8012aa4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012aa8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012aac:	f04f 0c00 	mov.w	ip, #0
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ab6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012aba:	d01c      	beq.n	8012af6 <__gethex+0x3fe>
 8012abc:	3201      	adds	r2, #1
 8012abe:	6002      	str	r2, [r0, #0]
 8012ac0:	2f02      	cmp	r7, #2
 8012ac2:	f104 0314 	add.w	r3, r4, #20
 8012ac6:	d13f      	bne.n	8012b48 <__gethex+0x450>
 8012ac8:	f8d8 2000 	ldr.w	r2, [r8]
 8012acc:	3a01      	subs	r2, #1
 8012ace:	42b2      	cmp	r2, r6
 8012ad0:	d10a      	bne.n	8012ae8 <__gethex+0x3f0>
 8012ad2:	1171      	asrs	r1, r6, #5
 8012ad4:	2201      	movs	r2, #1
 8012ad6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012ada:	f006 061f 	and.w	r6, r6, #31
 8012ade:	fa02 f606 	lsl.w	r6, r2, r6
 8012ae2:	421e      	tst	r6, r3
 8012ae4:	bf18      	it	ne
 8012ae6:	4617      	movne	r7, r2
 8012ae8:	f047 0720 	orr.w	r7, r7, #32
 8012aec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012aee:	601c      	str	r4, [r3, #0]
 8012af0:	9b04      	ldr	r3, [sp, #16]
 8012af2:	601d      	str	r5, [r3, #0]
 8012af4:	e695      	b.n	8012822 <__gethex+0x12a>
 8012af6:	4299      	cmp	r1, r3
 8012af8:	f843 cc04 	str.w	ip, [r3, #-4]
 8012afc:	d8d8      	bhi.n	8012ab0 <__gethex+0x3b8>
 8012afe:	68a3      	ldr	r3, [r4, #8]
 8012b00:	459b      	cmp	fp, r3
 8012b02:	db19      	blt.n	8012b38 <__gethex+0x440>
 8012b04:	6861      	ldr	r1, [r4, #4]
 8012b06:	ee18 0a10 	vmov	r0, s16
 8012b0a:	3101      	adds	r1, #1
 8012b0c:	f000 f92c 	bl	8012d68 <_Balloc>
 8012b10:	4681      	mov	r9, r0
 8012b12:	b918      	cbnz	r0, 8012b1c <__gethex+0x424>
 8012b14:	4b1a      	ldr	r3, [pc, #104]	; (8012b80 <__gethex+0x488>)
 8012b16:	4602      	mov	r2, r0
 8012b18:	2184      	movs	r1, #132	; 0x84
 8012b1a:	e6a8      	b.n	801286e <__gethex+0x176>
 8012b1c:	6922      	ldr	r2, [r4, #16]
 8012b1e:	3202      	adds	r2, #2
 8012b20:	f104 010c 	add.w	r1, r4, #12
 8012b24:	0092      	lsls	r2, r2, #2
 8012b26:	300c      	adds	r0, #12
 8012b28:	f7fd f878 	bl	800fc1c <memcpy>
 8012b2c:	4621      	mov	r1, r4
 8012b2e:	ee18 0a10 	vmov	r0, s16
 8012b32:	f000 f959 	bl	8012de8 <_Bfree>
 8012b36:	464c      	mov	r4, r9
 8012b38:	6923      	ldr	r3, [r4, #16]
 8012b3a:	1c5a      	adds	r2, r3, #1
 8012b3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012b40:	6122      	str	r2, [r4, #16]
 8012b42:	2201      	movs	r2, #1
 8012b44:	615a      	str	r2, [r3, #20]
 8012b46:	e7bb      	b.n	8012ac0 <__gethex+0x3c8>
 8012b48:	6922      	ldr	r2, [r4, #16]
 8012b4a:	455a      	cmp	r2, fp
 8012b4c:	dd0b      	ble.n	8012b66 <__gethex+0x46e>
 8012b4e:	2101      	movs	r1, #1
 8012b50:	4620      	mov	r0, r4
 8012b52:	f7ff fd69 	bl	8012628 <rshift>
 8012b56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012b5a:	3501      	adds	r5, #1
 8012b5c:	42ab      	cmp	r3, r5
 8012b5e:	f6ff aed0 	blt.w	8012902 <__gethex+0x20a>
 8012b62:	2701      	movs	r7, #1
 8012b64:	e7c0      	b.n	8012ae8 <__gethex+0x3f0>
 8012b66:	f016 061f 	ands.w	r6, r6, #31
 8012b6a:	d0fa      	beq.n	8012b62 <__gethex+0x46a>
 8012b6c:	4453      	add	r3, sl
 8012b6e:	f1c6 0620 	rsb	r6, r6, #32
 8012b72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012b76:	f000 f9e9 	bl	8012f4c <__hi0bits>
 8012b7a:	42b0      	cmp	r0, r6
 8012b7c:	dbe7      	blt.n	8012b4e <__gethex+0x456>
 8012b7e:	e7f0      	b.n	8012b62 <__gethex+0x46a>
 8012b80:	080165f9 	.word	0x080165f9

08012b84 <L_shift>:
 8012b84:	f1c2 0208 	rsb	r2, r2, #8
 8012b88:	0092      	lsls	r2, r2, #2
 8012b8a:	b570      	push	{r4, r5, r6, lr}
 8012b8c:	f1c2 0620 	rsb	r6, r2, #32
 8012b90:	6843      	ldr	r3, [r0, #4]
 8012b92:	6804      	ldr	r4, [r0, #0]
 8012b94:	fa03 f506 	lsl.w	r5, r3, r6
 8012b98:	432c      	orrs	r4, r5
 8012b9a:	40d3      	lsrs	r3, r2
 8012b9c:	6004      	str	r4, [r0, #0]
 8012b9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012ba2:	4288      	cmp	r0, r1
 8012ba4:	d3f4      	bcc.n	8012b90 <L_shift+0xc>
 8012ba6:	bd70      	pop	{r4, r5, r6, pc}

08012ba8 <__match>:
 8012ba8:	b530      	push	{r4, r5, lr}
 8012baa:	6803      	ldr	r3, [r0, #0]
 8012bac:	3301      	adds	r3, #1
 8012bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012bb2:	b914      	cbnz	r4, 8012bba <__match+0x12>
 8012bb4:	6003      	str	r3, [r0, #0]
 8012bb6:	2001      	movs	r0, #1
 8012bb8:	bd30      	pop	{r4, r5, pc}
 8012bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012bbe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012bc2:	2d19      	cmp	r5, #25
 8012bc4:	bf98      	it	ls
 8012bc6:	3220      	addls	r2, #32
 8012bc8:	42a2      	cmp	r2, r4
 8012bca:	d0f0      	beq.n	8012bae <__match+0x6>
 8012bcc:	2000      	movs	r0, #0
 8012bce:	e7f3      	b.n	8012bb8 <__match+0x10>

08012bd0 <__hexnan>:
 8012bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bd4:	680b      	ldr	r3, [r1, #0]
 8012bd6:	115e      	asrs	r6, r3, #5
 8012bd8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012bdc:	f013 031f 	ands.w	r3, r3, #31
 8012be0:	b087      	sub	sp, #28
 8012be2:	bf18      	it	ne
 8012be4:	3604      	addne	r6, #4
 8012be6:	2500      	movs	r5, #0
 8012be8:	1f37      	subs	r7, r6, #4
 8012bea:	4690      	mov	r8, r2
 8012bec:	6802      	ldr	r2, [r0, #0]
 8012bee:	9301      	str	r3, [sp, #4]
 8012bf0:	4682      	mov	sl, r0
 8012bf2:	f846 5c04 	str.w	r5, [r6, #-4]
 8012bf6:	46b9      	mov	r9, r7
 8012bf8:	463c      	mov	r4, r7
 8012bfa:	9502      	str	r5, [sp, #8]
 8012bfc:	46ab      	mov	fp, r5
 8012bfe:	7851      	ldrb	r1, [r2, #1]
 8012c00:	1c53      	adds	r3, r2, #1
 8012c02:	9303      	str	r3, [sp, #12]
 8012c04:	b341      	cbz	r1, 8012c58 <__hexnan+0x88>
 8012c06:	4608      	mov	r0, r1
 8012c08:	9205      	str	r2, [sp, #20]
 8012c0a:	9104      	str	r1, [sp, #16]
 8012c0c:	f7ff fd5e 	bl	80126cc <__hexdig_fun>
 8012c10:	2800      	cmp	r0, #0
 8012c12:	d14f      	bne.n	8012cb4 <__hexnan+0xe4>
 8012c14:	9904      	ldr	r1, [sp, #16]
 8012c16:	9a05      	ldr	r2, [sp, #20]
 8012c18:	2920      	cmp	r1, #32
 8012c1a:	d818      	bhi.n	8012c4e <__hexnan+0x7e>
 8012c1c:	9b02      	ldr	r3, [sp, #8]
 8012c1e:	459b      	cmp	fp, r3
 8012c20:	dd13      	ble.n	8012c4a <__hexnan+0x7a>
 8012c22:	454c      	cmp	r4, r9
 8012c24:	d206      	bcs.n	8012c34 <__hexnan+0x64>
 8012c26:	2d07      	cmp	r5, #7
 8012c28:	dc04      	bgt.n	8012c34 <__hexnan+0x64>
 8012c2a:	462a      	mov	r2, r5
 8012c2c:	4649      	mov	r1, r9
 8012c2e:	4620      	mov	r0, r4
 8012c30:	f7ff ffa8 	bl	8012b84 <L_shift>
 8012c34:	4544      	cmp	r4, r8
 8012c36:	d950      	bls.n	8012cda <__hexnan+0x10a>
 8012c38:	2300      	movs	r3, #0
 8012c3a:	f1a4 0904 	sub.w	r9, r4, #4
 8012c3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012c42:	f8cd b008 	str.w	fp, [sp, #8]
 8012c46:	464c      	mov	r4, r9
 8012c48:	461d      	mov	r5, r3
 8012c4a:	9a03      	ldr	r2, [sp, #12]
 8012c4c:	e7d7      	b.n	8012bfe <__hexnan+0x2e>
 8012c4e:	2929      	cmp	r1, #41	; 0x29
 8012c50:	d156      	bne.n	8012d00 <__hexnan+0x130>
 8012c52:	3202      	adds	r2, #2
 8012c54:	f8ca 2000 	str.w	r2, [sl]
 8012c58:	f1bb 0f00 	cmp.w	fp, #0
 8012c5c:	d050      	beq.n	8012d00 <__hexnan+0x130>
 8012c5e:	454c      	cmp	r4, r9
 8012c60:	d206      	bcs.n	8012c70 <__hexnan+0xa0>
 8012c62:	2d07      	cmp	r5, #7
 8012c64:	dc04      	bgt.n	8012c70 <__hexnan+0xa0>
 8012c66:	462a      	mov	r2, r5
 8012c68:	4649      	mov	r1, r9
 8012c6a:	4620      	mov	r0, r4
 8012c6c:	f7ff ff8a 	bl	8012b84 <L_shift>
 8012c70:	4544      	cmp	r4, r8
 8012c72:	d934      	bls.n	8012cde <__hexnan+0x10e>
 8012c74:	f1a8 0204 	sub.w	r2, r8, #4
 8012c78:	4623      	mov	r3, r4
 8012c7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8012c7e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012c82:	429f      	cmp	r7, r3
 8012c84:	d2f9      	bcs.n	8012c7a <__hexnan+0xaa>
 8012c86:	1b3b      	subs	r3, r7, r4
 8012c88:	f023 0303 	bic.w	r3, r3, #3
 8012c8c:	3304      	adds	r3, #4
 8012c8e:	3401      	adds	r4, #1
 8012c90:	3e03      	subs	r6, #3
 8012c92:	42b4      	cmp	r4, r6
 8012c94:	bf88      	it	hi
 8012c96:	2304      	movhi	r3, #4
 8012c98:	4443      	add	r3, r8
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	f843 2b04 	str.w	r2, [r3], #4
 8012ca0:	429f      	cmp	r7, r3
 8012ca2:	d2fb      	bcs.n	8012c9c <__hexnan+0xcc>
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	b91b      	cbnz	r3, 8012cb0 <__hexnan+0xe0>
 8012ca8:	4547      	cmp	r7, r8
 8012caa:	d127      	bne.n	8012cfc <__hexnan+0x12c>
 8012cac:	2301      	movs	r3, #1
 8012cae:	603b      	str	r3, [r7, #0]
 8012cb0:	2005      	movs	r0, #5
 8012cb2:	e026      	b.n	8012d02 <__hexnan+0x132>
 8012cb4:	3501      	adds	r5, #1
 8012cb6:	2d08      	cmp	r5, #8
 8012cb8:	f10b 0b01 	add.w	fp, fp, #1
 8012cbc:	dd06      	ble.n	8012ccc <__hexnan+0xfc>
 8012cbe:	4544      	cmp	r4, r8
 8012cc0:	d9c3      	bls.n	8012c4a <__hexnan+0x7a>
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	f844 3c04 	str.w	r3, [r4, #-4]
 8012cc8:	2501      	movs	r5, #1
 8012cca:	3c04      	subs	r4, #4
 8012ccc:	6822      	ldr	r2, [r4, #0]
 8012cce:	f000 000f 	and.w	r0, r0, #15
 8012cd2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012cd6:	6022      	str	r2, [r4, #0]
 8012cd8:	e7b7      	b.n	8012c4a <__hexnan+0x7a>
 8012cda:	2508      	movs	r5, #8
 8012cdc:	e7b5      	b.n	8012c4a <__hexnan+0x7a>
 8012cde:	9b01      	ldr	r3, [sp, #4]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d0df      	beq.n	8012ca4 <__hexnan+0xd4>
 8012ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8012ce8:	f1c3 0320 	rsb	r3, r3, #32
 8012cec:	fa22 f303 	lsr.w	r3, r2, r3
 8012cf0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012cf4:	401a      	ands	r2, r3
 8012cf6:	f846 2c04 	str.w	r2, [r6, #-4]
 8012cfa:	e7d3      	b.n	8012ca4 <__hexnan+0xd4>
 8012cfc:	3f04      	subs	r7, #4
 8012cfe:	e7d1      	b.n	8012ca4 <__hexnan+0xd4>
 8012d00:	2004      	movs	r0, #4
 8012d02:	b007      	add	sp, #28
 8012d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012d08 <_localeconv_r>:
 8012d08:	4800      	ldr	r0, [pc, #0]	; (8012d0c <_localeconv_r+0x4>)
 8012d0a:	4770      	bx	lr
 8012d0c:	20000538 	.word	0x20000538

08012d10 <_lseek_r>:
 8012d10:	b538      	push	{r3, r4, r5, lr}
 8012d12:	4d07      	ldr	r5, [pc, #28]	; (8012d30 <_lseek_r+0x20>)
 8012d14:	4604      	mov	r4, r0
 8012d16:	4608      	mov	r0, r1
 8012d18:	4611      	mov	r1, r2
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	602a      	str	r2, [r5, #0]
 8012d1e:	461a      	mov	r2, r3
 8012d20:	f7ef ff6a 	bl	8002bf8 <_lseek>
 8012d24:	1c43      	adds	r3, r0, #1
 8012d26:	d102      	bne.n	8012d2e <_lseek_r+0x1e>
 8012d28:	682b      	ldr	r3, [r5, #0]
 8012d2a:	b103      	cbz	r3, 8012d2e <_lseek_r+0x1e>
 8012d2c:	6023      	str	r3, [r4, #0]
 8012d2e:	bd38      	pop	{r3, r4, r5, pc}
 8012d30:	2000b688 	.word	0x2000b688

08012d34 <malloc>:
 8012d34:	4b02      	ldr	r3, [pc, #8]	; (8012d40 <malloc+0xc>)
 8012d36:	4601      	mov	r1, r0
 8012d38:	6818      	ldr	r0, [r3, #0]
 8012d3a:	f000 bd59 	b.w	80137f0 <_malloc_r>
 8012d3e:	bf00      	nop
 8012d40:	200003e0 	.word	0x200003e0

08012d44 <__ascii_mbtowc>:
 8012d44:	b082      	sub	sp, #8
 8012d46:	b901      	cbnz	r1, 8012d4a <__ascii_mbtowc+0x6>
 8012d48:	a901      	add	r1, sp, #4
 8012d4a:	b142      	cbz	r2, 8012d5e <__ascii_mbtowc+0x1a>
 8012d4c:	b14b      	cbz	r3, 8012d62 <__ascii_mbtowc+0x1e>
 8012d4e:	7813      	ldrb	r3, [r2, #0]
 8012d50:	600b      	str	r3, [r1, #0]
 8012d52:	7812      	ldrb	r2, [r2, #0]
 8012d54:	1e10      	subs	r0, r2, #0
 8012d56:	bf18      	it	ne
 8012d58:	2001      	movne	r0, #1
 8012d5a:	b002      	add	sp, #8
 8012d5c:	4770      	bx	lr
 8012d5e:	4610      	mov	r0, r2
 8012d60:	e7fb      	b.n	8012d5a <__ascii_mbtowc+0x16>
 8012d62:	f06f 0001 	mvn.w	r0, #1
 8012d66:	e7f8      	b.n	8012d5a <__ascii_mbtowc+0x16>

08012d68 <_Balloc>:
 8012d68:	b570      	push	{r4, r5, r6, lr}
 8012d6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012d6c:	4604      	mov	r4, r0
 8012d6e:	460d      	mov	r5, r1
 8012d70:	b976      	cbnz	r6, 8012d90 <_Balloc+0x28>
 8012d72:	2010      	movs	r0, #16
 8012d74:	f7ff ffde 	bl	8012d34 <malloc>
 8012d78:	4602      	mov	r2, r0
 8012d7a:	6260      	str	r0, [r4, #36]	; 0x24
 8012d7c:	b920      	cbnz	r0, 8012d88 <_Balloc+0x20>
 8012d7e:	4b18      	ldr	r3, [pc, #96]	; (8012de0 <_Balloc+0x78>)
 8012d80:	4818      	ldr	r0, [pc, #96]	; (8012de4 <_Balloc+0x7c>)
 8012d82:	2166      	movs	r1, #102	; 0x66
 8012d84:	f7fe fd96 	bl	80118b4 <__assert_func>
 8012d88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d8c:	6006      	str	r6, [r0, #0]
 8012d8e:	60c6      	str	r6, [r0, #12]
 8012d90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012d92:	68f3      	ldr	r3, [r6, #12]
 8012d94:	b183      	cbz	r3, 8012db8 <_Balloc+0x50>
 8012d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d98:	68db      	ldr	r3, [r3, #12]
 8012d9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012d9e:	b9b8      	cbnz	r0, 8012dd0 <_Balloc+0x68>
 8012da0:	2101      	movs	r1, #1
 8012da2:	fa01 f605 	lsl.w	r6, r1, r5
 8012da6:	1d72      	adds	r2, r6, #5
 8012da8:	0092      	lsls	r2, r2, #2
 8012daa:	4620      	mov	r0, r4
 8012dac:	f000 fc9d 	bl	80136ea <_calloc_r>
 8012db0:	b160      	cbz	r0, 8012dcc <_Balloc+0x64>
 8012db2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012db6:	e00e      	b.n	8012dd6 <_Balloc+0x6e>
 8012db8:	2221      	movs	r2, #33	; 0x21
 8012dba:	2104      	movs	r1, #4
 8012dbc:	4620      	mov	r0, r4
 8012dbe:	f000 fc94 	bl	80136ea <_calloc_r>
 8012dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012dc4:	60f0      	str	r0, [r6, #12]
 8012dc6:	68db      	ldr	r3, [r3, #12]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d1e4      	bne.n	8012d96 <_Balloc+0x2e>
 8012dcc:	2000      	movs	r0, #0
 8012dce:	bd70      	pop	{r4, r5, r6, pc}
 8012dd0:	6802      	ldr	r2, [r0, #0]
 8012dd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012ddc:	e7f7      	b.n	8012dce <_Balloc+0x66>
 8012dde:	bf00      	nop
 8012de0:	080163e0 	.word	0x080163e0
 8012de4:	08016684 	.word	0x08016684

08012de8 <_Bfree>:
 8012de8:	b570      	push	{r4, r5, r6, lr}
 8012dea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012dec:	4605      	mov	r5, r0
 8012dee:	460c      	mov	r4, r1
 8012df0:	b976      	cbnz	r6, 8012e10 <_Bfree+0x28>
 8012df2:	2010      	movs	r0, #16
 8012df4:	f7ff ff9e 	bl	8012d34 <malloc>
 8012df8:	4602      	mov	r2, r0
 8012dfa:	6268      	str	r0, [r5, #36]	; 0x24
 8012dfc:	b920      	cbnz	r0, 8012e08 <_Bfree+0x20>
 8012dfe:	4b09      	ldr	r3, [pc, #36]	; (8012e24 <_Bfree+0x3c>)
 8012e00:	4809      	ldr	r0, [pc, #36]	; (8012e28 <_Bfree+0x40>)
 8012e02:	218a      	movs	r1, #138	; 0x8a
 8012e04:	f7fe fd56 	bl	80118b4 <__assert_func>
 8012e08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e0c:	6006      	str	r6, [r0, #0]
 8012e0e:	60c6      	str	r6, [r0, #12]
 8012e10:	b13c      	cbz	r4, 8012e22 <_Bfree+0x3a>
 8012e12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012e14:	6862      	ldr	r2, [r4, #4]
 8012e16:	68db      	ldr	r3, [r3, #12]
 8012e18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012e1c:	6021      	str	r1, [r4, #0]
 8012e1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012e22:	bd70      	pop	{r4, r5, r6, pc}
 8012e24:	080163e0 	.word	0x080163e0
 8012e28:	08016684 	.word	0x08016684

08012e2c <__multadd>:
 8012e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e30:	690d      	ldr	r5, [r1, #16]
 8012e32:	4607      	mov	r7, r0
 8012e34:	460c      	mov	r4, r1
 8012e36:	461e      	mov	r6, r3
 8012e38:	f101 0c14 	add.w	ip, r1, #20
 8012e3c:	2000      	movs	r0, #0
 8012e3e:	f8dc 3000 	ldr.w	r3, [ip]
 8012e42:	b299      	uxth	r1, r3
 8012e44:	fb02 6101 	mla	r1, r2, r1, r6
 8012e48:	0c1e      	lsrs	r6, r3, #16
 8012e4a:	0c0b      	lsrs	r3, r1, #16
 8012e4c:	fb02 3306 	mla	r3, r2, r6, r3
 8012e50:	b289      	uxth	r1, r1
 8012e52:	3001      	adds	r0, #1
 8012e54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012e58:	4285      	cmp	r5, r0
 8012e5a:	f84c 1b04 	str.w	r1, [ip], #4
 8012e5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012e62:	dcec      	bgt.n	8012e3e <__multadd+0x12>
 8012e64:	b30e      	cbz	r6, 8012eaa <__multadd+0x7e>
 8012e66:	68a3      	ldr	r3, [r4, #8]
 8012e68:	42ab      	cmp	r3, r5
 8012e6a:	dc19      	bgt.n	8012ea0 <__multadd+0x74>
 8012e6c:	6861      	ldr	r1, [r4, #4]
 8012e6e:	4638      	mov	r0, r7
 8012e70:	3101      	adds	r1, #1
 8012e72:	f7ff ff79 	bl	8012d68 <_Balloc>
 8012e76:	4680      	mov	r8, r0
 8012e78:	b928      	cbnz	r0, 8012e86 <__multadd+0x5a>
 8012e7a:	4602      	mov	r2, r0
 8012e7c:	4b0c      	ldr	r3, [pc, #48]	; (8012eb0 <__multadd+0x84>)
 8012e7e:	480d      	ldr	r0, [pc, #52]	; (8012eb4 <__multadd+0x88>)
 8012e80:	21b5      	movs	r1, #181	; 0xb5
 8012e82:	f7fe fd17 	bl	80118b4 <__assert_func>
 8012e86:	6922      	ldr	r2, [r4, #16]
 8012e88:	3202      	adds	r2, #2
 8012e8a:	f104 010c 	add.w	r1, r4, #12
 8012e8e:	0092      	lsls	r2, r2, #2
 8012e90:	300c      	adds	r0, #12
 8012e92:	f7fc fec3 	bl	800fc1c <memcpy>
 8012e96:	4621      	mov	r1, r4
 8012e98:	4638      	mov	r0, r7
 8012e9a:	f7ff ffa5 	bl	8012de8 <_Bfree>
 8012e9e:	4644      	mov	r4, r8
 8012ea0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012ea4:	3501      	adds	r5, #1
 8012ea6:	615e      	str	r6, [r3, #20]
 8012ea8:	6125      	str	r5, [r4, #16]
 8012eaa:	4620      	mov	r0, r4
 8012eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eb0:	080165f9 	.word	0x080165f9
 8012eb4:	08016684 	.word	0x08016684

08012eb8 <__s2b>:
 8012eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ebc:	460c      	mov	r4, r1
 8012ebe:	4615      	mov	r5, r2
 8012ec0:	461f      	mov	r7, r3
 8012ec2:	2209      	movs	r2, #9
 8012ec4:	3308      	adds	r3, #8
 8012ec6:	4606      	mov	r6, r0
 8012ec8:	fb93 f3f2 	sdiv	r3, r3, r2
 8012ecc:	2100      	movs	r1, #0
 8012ece:	2201      	movs	r2, #1
 8012ed0:	429a      	cmp	r2, r3
 8012ed2:	db09      	blt.n	8012ee8 <__s2b+0x30>
 8012ed4:	4630      	mov	r0, r6
 8012ed6:	f7ff ff47 	bl	8012d68 <_Balloc>
 8012eda:	b940      	cbnz	r0, 8012eee <__s2b+0x36>
 8012edc:	4602      	mov	r2, r0
 8012ede:	4b19      	ldr	r3, [pc, #100]	; (8012f44 <__s2b+0x8c>)
 8012ee0:	4819      	ldr	r0, [pc, #100]	; (8012f48 <__s2b+0x90>)
 8012ee2:	21ce      	movs	r1, #206	; 0xce
 8012ee4:	f7fe fce6 	bl	80118b4 <__assert_func>
 8012ee8:	0052      	lsls	r2, r2, #1
 8012eea:	3101      	adds	r1, #1
 8012eec:	e7f0      	b.n	8012ed0 <__s2b+0x18>
 8012eee:	9b08      	ldr	r3, [sp, #32]
 8012ef0:	6143      	str	r3, [r0, #20]
 8012ef2:	2d09      	cmp	r5, #9
 8012ef4:	f04f 0301 	mov.w	r3, #1
 8012ef8:	6103      	str	r3, [r0, #16]
 8012efa:	dd16      	ble.n	8012f2a <__s2b+0x72>
 8012efc:	f104 0909 	add.w	r9, r4, #9
 8012f00:	46c8      	mov	r8, r9
 8012f02:	442c      	add	r4, r5
 8012f04:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012f08:	4601      	mov	r1, r0
 8012f0a:	3b30      	subs	r3, #48	; 0x30
 8012f0c:	220a      	movs	r2, #10
 8012f0e:	4630      	mov	r0, r6
 8012f10:	f7ff ff8c 	bl	8012e2c <__multadd>
 8012f14:	45a0      	cmp	r8, r4
 8012f16:	d1f5      	bne.n	8012f04 <__s2b+0x4c>
 8012f18:	f1a5 0408 	sub.w	r4, r5, #8
 8012f1c:	444c      	add	r4, r9
 8012f1e:	1b2d      	subs	r5, r5, r4
 8012f20:	1963      	adds	r3, r4, r5
 8012f22:	42bb      	cmp	r3, r7
 8012f24:	db04      	blt.n	8012f30 <__s2b+0x78>
 8012f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f2a:	340a      	adds	r4, #10
 8012f2c:	2509      	movs	r5, #9
 8012f2e:	e7f6      	b.n	8012f1e <__s2b+0x66>
 8012f30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012f34:	4601      	mov	r1, r0
 8012f36:	3b30      	subs	r3, #48	; 0x30
 8012f38:	220a      	movs	r2, #10
 8012f3a:	4630      	mov	r0, r6
 8012f3c:	f7ff ff76 	bl	8012e2c <__multadd>
 8012f40:	e7ee      	b.n	8012f20 <__s2b+0x68>
 8012f42:	bf00      	nop
 8012f44:	080165f9 	.word	0x080165f9
 8012f48:	08016684 	.word	0x08016684

08012f4c <__hi0bits>:
 8012f4c:	0c03      	lsrs	r3, r0, #16
 8012f4e:	041b      	lsls	r3, r3, #16
 8012f50:	b9d3      	cbnz	r3, 8012f88 <__hi0bits+0x3c>
 8012f52:	0400      	lsls	r0, r0, #16
 8012f54:	2310      	movs	r3, #16
 8012f56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012f5a:	bf04      	itt	eq
 8012f5c:	0200      	lsleq	r0, r0, #8
 8012f5e:	3308      	addeq	r3, #8
 8012f60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012f64:	bf04      	itt	eq
 8012f66:	0100      	lsleq	r0, r0, #4
 8012f68:	3304      	addeq	r3, #4
 8012f6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012f6e:	bf04      	itt	eq
 8012f70:	0080      	lsleq	r0, r0, #2
 8012f72:	3302      	addeq	r3, #2
 8012f74:	2800      	cmp	r0, #0
 8012f76:	db05      	blt.n	8012f84 <__hi0bits+0x38>
 8012f78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012f7c:	f103 0301 	add.w	r3, r3, #1
 8012f80:	bf08      	it	eq
 8012f82:	2320      	moveq	r3, #32
 8012f84:	4618      	mov	r0, r3
 8012f86:	4770      	bx	lr
 8012f88:	2300      	movs	r3, #0
 8012f8a:	e7e4      	b.n	8012f56 <__hi0bits+0xa>

08012f8c <__lo0bits>:
 8012f8c:	6803      	ldr	r3, [r0, #0]
 8012f8e:	f013 0207 	ands.w	r2, r3, #7
 8012f92:	4601      	mov	r1, r0
 8012f94:	d00b      	beq.n	8012fae <__lo0bits+0x22>
 8012f96:	07da      	lsls	r2, r3, #31
 8012f98:	d423      	bmi.n	8012fe2 <__lo0bits+0x56>
 8012f9a:	0798      	lsls	r0, r3, #30
 8012f9c:	bf49      	itett	mi
 8012f9e:	085b      	lsrmi	r3, r3, #1
 8012fa0:	089b      	lsrpl	r3, r3, #2
 8012fa2:	2001      	movmi	r0, #1
 8012fa4:	600b      	strmi	r3, [r1, #0]
 8012fa6:	bf5c      	itt	pl
 8012fa8:	600b      	strpl	r3, [r1, #0]
 8012faa:	2002      	movpl	r0, #2
 8012fac:	4770      	bx	lr
 8012fae:	b298      	uxth	r0, r3
 8012fb0:	b9a8      	cbnz	r0, 8012fde <__lo0bits+0x52>
 8012fb2:	0c1b      	lsrs	r3, r3, #16
 8012fb4:	2010      	movs	r0, #16
 8012fb6:	b2da      	uxtb	r2, r3
 8012fb8:	b90a      	cbnz	r2, 8012fbe <__lo0bits+0x32>
 8012fba:	3008      	adds	r0, #8
 8012fbc:	0a1b      	lsrs	r3, r3, #8
 8012fbe:	071a      	lsls	r2, r3, #28
 8012fc0:	bf04      	itt	eq
 8012fc2:	091b      	lsreq	r3, r3, #4
 8012fc4:	3004      	addeq	r0, #4
 8012fc6:	079a      	lsls	r2, r3, #30
 8012fc8:	bf04      	itt	eq
 8012fca:	089b      	lsreq	r3, r3, #2
 8012fcc:	3002      	addeq	r0, #2
 8012fce:	07da      	lsls	r2, r3, #31
 8012fd0:	d403      	bmi.n	8012fda <__lo0bits+0x4e>
 8012fd2:	085b      	lsrs	r3, r3, #1
 8012fd4:	f100 0001 	add.w	r0, r0, #1
 8012fd8:	d005      	beq.n	8012fe6 <__lo0bits+0x5a>
 8012fda:	600b      	str	r3, [r1, #0]
 8012fdc:	4770      	bx	lr
 8012fde:	4610      	mov	r0, r2
 8012fe0:	e7e9      	b.n	8012fb6 <__lo0bits+0x2a>
 8012fe2:	2000      	movs	r0, #0
 8012fe4:	4770      	bx	lr
 8012fe6:	2020      	movs	r0, #32
 8012fe8:	4770      	bx	lr
	...

08012fec <__i2b>:
 8012fec:	b510      	push	{r4, lr}
 8012fee:	460c      	mov	r4, r1
 8012ff0:	2101      	movs	r1, #1
 8012ff2:	f7ff feb9 	bl	8012d68 <_Balloc>
 8012ff6:	4602      	mov	r2, r0
 8012ff8:	b928      	cbnz	r0, 8013006 <__i2b+0x1a>
 8012ffa:	4b05      	ldr	r3, [pc, #20]	; (8013010 <__i2b+0x24>)
 8012ffc:	4805      	ldr	r0, [pc, #20]	; (8013014 <__i2b+0x28>)
 8012ffe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013002:	f7fe fc57 	bl	80118b4 <__assert_func>
 8013006:	2301      	movs	r3, #1
 8013008:	6144      	str	r4, [r0, #20]
 801300a:	6103      	str	r3, [r0, #16]
 801300c:	bd10      	pop	{r4, pc}
 801300e:	bf00      	nop
 8013010:	080165f9 	.word	0x080165f9
 8013014:	08016684 	.word	0x08016684

08013018 <__multiply>:
 8013018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801301c:	4691      	mov	r9, r2
 801301e:	690a      	ldr	r2, [r1, #16]
 8013020:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013024:	429a      	cmp	r2, r3
 8013026:	bfb8      	it	lt
 8013028:	460b      	movlt	r3, r1
 801302a:	460c      	mov	r4, r1
 801302c:	bfbc      	itt	lt
 801302e:	464c      	movlt	r4, r9
 8013030:	4699      	movlt	r9, r3
 8013032:	6927      	ldr	r7, [r4, #16]
 8013034:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013038:	68a3      	ldr	r3, [r4, #8]
 801303a:	6861      	ldr	r1, [r4, #4]
 801303c:	eb07 060a 	add.w	r6, r7, sl
 8013040:	42b3      	cmp	r3, r6
 8013042:	b085      	sub	sp, #20
 8013044:	bfb8      	it	lt
 8013046:	3101      	addlt	r1, #1
 8013048:	f7ff fe8e 	bl	8012d68 <_Balloc>
 801304c:	b930      	cbnz	r0, 801305c <__multiply+0x44>
 801304e:	4602      	mov	r2, r0
 8013050:	4b44      	ldr	r3, [pc, #272]	; (8013164 <__multiply+0x14c>)
 8013052:	4845      	ldr	r0, [pc, #276]	; (8013168 <__multiply+0x150>)
 8013054:	f240 115d 	movw	r1, #349	; 0x15d
 8013058:	f7fe fc2c 	bl	80118b4 <__assert_func>
 801305c:	f100 0514 	add.w	r5, r0, #20
 8013060:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013064:	462b      	mov	r3, r5
 8013066:	2200      	movs	r2, #0
 8013068:	4543      	cmp	r3, r8
 801306a:	d321      	bcc.n	80130b0 <__multiply+0x98>
 801306c:	f104 0314 	add.w	r3, r4, #20
 8013070:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013074:	f109 0314 	add.w	r3, r9, #20
 8013078:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801307c:	9202      	str	r2, [sp, #8]
 801307e:	1b3a      	subs	r2, r7, r4
 8013080:	3a15      	subs	r2, #21
 8013082:	f022 0203 	bic.w	r2, r2, #3
 8013086:	3204      	adds	r2, #4
 8013088:	f104 0115 	add.w	r1, r4, #21
 801308c:	428f      	cmp	r7, r1
 801308e:	bf38      	it	cc
 8013090:	2204      	movcc	r2, #4
 8013092:	9201      	str	r2, [sp, #4]
 8013094:	9a02      	ldr	r2, [sp, #8]
 8013096:	9303      	str	r3, [sp, #12]
 8013098:	429a      	cmp	r2, r3
 801309a:	d80c      	bhi.n	80130b6 <__multiply+0x9e>
 801309c:	2e00      	cmp	r6, #0
 801309e:	dd03      	ble.n	80130a8 <__multiply+0x90>
 80130a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d05a      	beq.n	801315e <__multiply+0x146>
 80130a8:	6106      	str	r6, [r0, #16]
 80130aa:	b005      	add	sp, #20
 80130ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130b0:	f843 2b04 	str.w	r2, [r3], #4
 80130b4:	e7d8      	b.n	8013068 <__multiply+0x50>
 80130b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80130ba:	f1ba 0f00 	cmp.w	sl, #0
 80130be:	d024      	beq.n	801310a <__multiply+0xf2>
 80130c0:	f104 0e14 	add.w	lr, r4, #20
 80130c4:	46a9      	mov	r9, r5
 80130c6:	f04f 0c00 	mov.w	ip, #0
 80130ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80130ce:	f8d9 1000 	ldr.w	r1, [r9]
 80130d2:	fa1f fb82 	uxth.w	fp, r2
 80130d6:	b289      	uxth	r1, r1
 80130d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80130dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80130e0:	f8d9 2000 	ldr.w	r2, [r9]
 80130e4:	4461      	add	r1, ip
 80130e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80130ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80130ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80130f2:	b289      	uxth	r1, r1
 80130f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80130f8:	4577      	cmp	r7, lr
 80130fa:	f849 1b04 	str.w	r1, [r9], #4
 80130fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013102:	d8e2      	bhi.n	80130ca <__multiply+0xb2>
 8013104:	9a01      	ldr	r2, [sp, #4]
 8013106:	f845 c002 	str.w	ip, [r5, r2]
 801310a:	9a03      	ldr	r2, [sp, #12]
 801310c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013110:	3304      	adds	r3, #4
 8013112:	f1b9 0f00 	cmp.w	r9, #0
 8013116:	d020      	beq.n	801315a <__multiply+0x142>
 8013118:	6829      	ldr	r1, [r5, #0]
 801311a:	f104 0c14 	add.w	ip, r4, #20
 801311e:	46ae      	mov	lr, r5
 8013120:	f04f 0a00 	mov.w	sl, #0
 8013124:	f8bc b000 	ldrh.w	fp, [ip]
 8013128:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801312c:	fb09 220b 	mla	r2, r9, fp, r2
 8013130:	4492      	add	sl, r2
 8013132:	b289      	uxth	r1, r1
 8013134:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013138:	f84e 1b04 	str.w	r1, [lr], #4
 801313c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013140:	f8be 1000 	ldrh.w	r1, [lr]
 8013144:	0c12      	lsrs	r2, r2, #16
 8013146:	fb09 1102 	mla	r1, r9, r2, r1
 801314a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801314e:	4567      	cmp	r7, ip
 8013150:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013154:	d8e6      	bhi.n	8013124 <__multiply+0x10c>
 8013156:	9a01      	ldr	r2, [sp, #4]
 8013158:	50a9      	str	r1, [r5, r2]
 801315a:	3504      	adds	r5, #4
 801315c:	e79a      	b.n	8013094 <__multiply+0x7c>
 801315e:	3e01      	subs	r6, #1
 8013160:	e79c      	b.n	801309c <__multiply+0x84>
 8013162:	bf00      	nop
 8013164:	080165f9 	.word	0x080165f9
 8013168:	08016684 	.word	0x08016684

0801316c <__pow5mult>:
 801316c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013170:	4615      	mov	r5, r2
 8013172:	f012 0203 	ands.w	r2, r2, #3
 8013176:	4606      	mov	r6, r0
 8013178:	460f      	mov	r7, r1
 801317a:	d007      	beq.n	801318c <__pow5mult+0x20>
 801317c:	4c25      	ldr	r4, [pc, #148]	; (8013214 <__pow5mult+0xa8>)
 801317e:	3a01      	subs	r2, #1
 8013180:	2300      	movs	r3, #0
 8013182:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013186:	f7ff fe51 	bl	8012e2c <__multadd>
 801318a:	4607      	mov	r7, r0
 801318c:	10ad      	asrs	r5, r5, #2
 801318e:	d03d      	beq.n	801320c <__pow5mult+0xa0>
 8013190:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013192:	b97c      	cbnz	r4, 80131b4 <__pow5mult+0x48>
 8013194:	2010      	movs	r0, #16
 8013196:	f7ff fdcd 	bl	8012d34 <malloc>
 801319a:	4602      	mov	r2, r0
 801319c:	6270      	str	r0, [r6, #36]	; 0x24
 801319e:	b928      	cbnz	r0, 80131ac <__pow5mult+0x40>
 80131a0:	4b1d      	ldr	r3, [pc, #116]	; (8013218 <__pow5mult+0xac>)
 80131a2:	481e      	ldr	r0, [pc, #120]	; (801321c <__pow5mult+0xb0>)
 80131a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80131a8:	f7fe fb84 	bl	80118b4 <__assert_func>
 80131ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80131b0:	6004      	str	r4, [r0, #0]
 80131b2:	60c4      	str	r4, [r0, #12]
 80131b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80131b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80131bc:	b94c      	cbnz	r4, 80131d2 <__pow5mult+0x66>
 80131be:	f240 2171 	movw	r1, #625	; 0x271
 80131c2:	4630      	mov	r0, r6
 80131c4:	f7ff ff12 	bl	8012fec <__i2b>
 80131c8:	2300      	movs	r3, #0
 80131ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80131ce:	4604      	mov	r4, r0
 80131d0:	6003      	str	r3, [r0, #0]
 80131d2:	f04f 0900 	mov.w	r9, #0
 80131d6:	07eb      	lsls	r3, r5, #31
 80131d8:	d50a      	bpl.n	80131f0 <__pow5mult+0x84>
 80131da:	4639      	mov	r1, r7
 80131dc:	4622      	mov	r2, r4
 80131de:	4630      	mov	r0, r6
 80131e0:	f7ff ff1a 	bl	8013018 <__multiply>
 80131e4:	4639      	mov	r1, r7
 80131e6:	4680      	mov	r8, r0
 80131e8:	4630      	mov	r0, r6
 80131ea:	f7ff fdfd 	bl	8012de8 <_Bfree>
 80131ee:	4647      	mov	r7, r8
 80131f0:	106d      	asrs	r5, r5, #1
 80131f2:	d00b      	beq.n	801320c <__pow5mult+0xa0>
 80131f4:	6820      	ldr	r0, [r4, #0]
 80131f6:	b938      	cbnz	r0, 8013208 <__pow5mult+0x9c>
 80131f8:	4622      	mov	r2, r4
 80131fa:	4621      	mov	r1, r4
 80131fc:	4630      	mov	r0, r6
 80131fe:	f7ff ff0b 	bl	8013018 <__multiply>
 8013202:	6020      	str	r0, [r4, #0]
 8013204:	f8c0 9000 	str.w	r9, [r0]
 8013208:	4604      	mov	r4, r0
 801320a:	e7e4      	b.n	80131d6 <__pow5mult+0x6a>
 801320c:	4638      	mov	r0, r7
 801320e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013212:	bf00      	nop
 8013214:	080167d0 	.word	0x080167d0
 8013218:	080163e0 	.word	0x080163e0
 801321c:	08016684 	.word	0x08016684

08013220 <__lshift>:
 8013220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013224:	460c      	mov	r4, r1
 8013226:	6849      	ldr	r1, [r1, #4]
 8013228:	6923      	ldr	r3, [r4, #16]
 801322a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801322e:	68a3      	ldr	r3, [r4, #8]
 8013230:	4607      	mov	r7, r0
 8013232:	4691      	mov	r9, r2
 8013234:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013238:	f108 0601 	add.w	r6, r8, #1
 801323c:	42b3      	cmp	r3, r6
 801323e:	db0b      	blt.n	8013258 <__lshift+0x38>
 8013240:	4638      	mov	r0, r7
 8013242:	f7ff fd91 	bl	8012d68 <_Balloc>
 8013246:	4605      	mov	r5, r0
 8013248:	b948      	cbnz	r0, 801325e <__lshift+0x3e>
 801324a:	4602      	mov	r2, r0
 801324c:	4b2a      	ldr	r3, [pc, #168]	; (80132f8 <__lshift+0xd8>)
 801324e:	482b      	ldr	r0, [pc, #172]	; (80132fc <__lshift+0xdc>)
 8013250:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013254:	f7fe fb2e 	bl	80118b4 <__assert_func>
 8013258:	3101      	adds	r1, #1
 801325a:	005b      	lsls	r3, r3, #1
 801325c:	e7ee      	b.n	801323c <__lshift+0x1c>
 801325e:	2300      	movs	r3, #0
 8013260:	f100 0114 	add.w	r1, r0, #20
 8013264:	f100 0210 	add.w	r2, r0, #16
 8013268:	4618      	mov	r0, r3
 801326a:	4553      	cmp	r3, sl
 801326c:	db37      	blt.n	80132de <__lshift+0xbe>
 801326e:	6920      	ldr	r0, [r4, #16]
 8013270:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013274:	f104 0314 	add.w	r3, r4, #20
 8013278:	f019 091f 	ands.w	r9, r9, #31
 801327c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013280:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013284:	d02f      	beq.n	80132e6 <__lshift+0xc6>
 8013286:	f1c9 0e20 	rsb	lr, r9, #32
 801328a:	468a      	mov	sl, r1
 801328c:	f04f 0c00 	mov.w	ip, #0
 8013290:	681a      	ldr	r2, [r3, #0]
 8013292:	fa02 f209 	lsl.w	r2, r2, r9
 8013296:	ea42 020c 	orr.w	r2, r2, ip
 801329a:	f84a 2b04 	str.w	r2, [sl], #4
 801329e:	f853 2b04 	ldr.w	r2, [r3], #4
 80132a2:	4298      	cmp	r0, r3
 80132a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80132a8:	d8f2      	bhi.n	8013290 <__lshift+0x70>
 80132aa:	1b03      	subs	r3, r0, r4
 80132ac:	3b15      	subs	r3, #21
 80132ae:	f023 0303 	bic.w	r3, r3, #3
 80132b2:	3304      	adds	r3, #4
 80132b4:	f104 0215 	add.w	r2, r4, #21
 80132b8:	4290      	cmp	r0, r2
 80132ba:	bf38      	it	cc
 80132bc:	2304      	movcc	r3, #4
 80132be:	f841 c003 	str.w	ip, [r1, r3]
 80132c2:	f1bc 0f00 	cmp.w	ip, #0
 80132c6:	d001      	beq.n	80132cc <__lshift+0xac>
 80132c8:	f108 0602 	add.w	r6, r8, #2
 80132cc:	3e01      	subs	r6, #1
 80132ce:	4638      	mov	r0, r7
 80132d0:	612e      	str	r6, [r5, #16]
 80132d2:	4621      	mov	r1, r4
 80132d4:	f7ff fd88 	bl	8012de8 <_Bfree>
 80132d8:	4628      	mov	r0, r5
 80132da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132de:	f842 0f04 	str.w	r0, [r2, #4]!
 80132e2:	3301      	adds	r3, #1
 80132e4:	e7c1      	b.n	801326a <__lshift+0x4a>
 80132e6:	3904      	subs	r1, #4
 80132e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80132ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80132f0:	4298      	cmp	r0, r3
 80132f2:	d8f9      	bhi.n	80132e8 <__lshift+0xc8>
 80132f4:	e7ea      	b.n	80132cc <__lshift+0xac>
 80132f6:	bf00      	nop
 80132f8:	080165f9 	.word	0x080165f9
 80132fc:	08016684 	.word	0x08016684

08013300 <__mcmp>:
 8013300:	b530      	push	{r4, r5, lr}
 8013302:	6902      	ldr	r2, [r0, #16]
 8013304:	690c      	ldr	r4, [r1, #16]
 8013306:	1b12      	subs	r2, r2, r4
 8013308:	d10e      	bne.n	8013328 <__mcmp+0x28>
 801330a:	f100 0314 	add.w	r3, r0, #20
 801330e:	3114      	adds	r1, #20
 8013310:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013314:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013318:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801331c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013320:	42a5      	cmp	r5, r4
 8013322:	d003      	beq.n	801332c <__mcmp+0x2c>
 8013324:	d305      	bcc.n	8013332 <__mcmp+0x32>
 8013326:	2201      	movs	r2, #1
 8013328:	4610      	mov	r0, r2
 801332a:	bd30      	pop	{r4, r5, pc}
 801332c:	4283      	cmp	r3, r0
 801332e:	d3f3      	bcc.n	8013318 <__mcmp+0x18>
 8013330:	e7fa      	b.n	8013328 <__mcmp+0x28>
 8013332:	f04f 32ff 	mov.w	r2, #4294967295
 8013336:	e7f7      	b.n	8013328 <__mcmp+0x28>

08013338 <__mdiff>:
 8013338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801333c:	460c      	mov	r4, r1
 801333e:	4606      	mov	r6, r0
 8013340:	4611      	mov	r1, r2
 8013342:	4620      	mov	r0, r4
 8013344:	4690      	mov	r8, r2
 8013346:	f7ff ffdb 	bl	8013300 <__mcmp>
 801334a:	1e05      	subs	r5, r0, #0
 801334c:	d110      	bne.n	8013370 <__mdiff+0x38>
 801334e:	4629      	mov	r1, r5
 8013350:	4630      	mov	r0, r6
 8013352:	f7ff fd09 	bl	8012d68 <_Balloc>
 8013356:	b930      	cbnz	r0, 8013366 <__mdiff+0x2e>
 8013358:	4b3a      	ldr	r3, [pc, #232]	; (8013444 <__mdiff+0x10c>)
 801335a:	4602      	mov	r2, r0
 801335c:	f240 2132 	movw	r1, #562	; 0x232
 8013360:	4839      	ldr	r0, [pc, #228]	; (8013448 <__mdiff+0x110>)
 8013362:	f7fe faa7 	bl	80118b4 <__assert_func>
 8013366:	2301      	movs	r3, #1
 8013368:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801336c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013370:	bfa4      	itt	ge
 8013372:	4643      	movge	r3, r8
 8013374:	46a0      	movge	r8, r4
 8013376:	4630      	mov	r0, r6
 8013378:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801337c:	bfa6      	itte	ge
 801337e:	461c      	movge	r4, r3
 8013380:	2500      	movge	r5, #0
 8013382:	2501      	movlt	r5, #1
 8013384:	f7ff fcf0 	bl	8012d68 <_Balloc>
 8013388:	b920      	cbnz	r0, 8013394 <__mdiff+0x5c>
 801338a:	4b2e      	ldr	r3, [pc, #184]	; (8013444 <__mdiff+0x10c>)
 801338c:	4602      	mov	r2, r0
 801338e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013392:	e7e5      	b.n	8013360 <__mdiff+0x28>
 8013394:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013398:	6926      	ldr	r6, [r4, #16]
 801339a:	60c5      	str	r5, [r0, #12]
 801339c:	f104 0914 	add.w	r9, r4, #20
 80133a0:	f108 0514 	add.w	r5, r8, #20
 80133a4:	f100 0e14 	add.w	lr, r0, #20
 80133a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80133ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80133b0:	f108 0210 	add.w	r2, r8, #16
 80133b4:	46f2      	mov	sl, lr
 80133b6:	2100      	movs	r1, #0
 80133b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80133bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80133c0:	fa1f f883 	uxth.w	r8, r3
 80133c4:	fa11 f18b 	uxtah	r1, r1, fp
 80133c8:	0c1b      	lsrs	r3, r3, #16
 80133ca:	eba1 0808 	sub.w	r8, r1, r8
 80133ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80133d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80133d6:	fa1f f888 	uxth.w	r8, r8
 80133da:	1419      	asrs	r1, r3, #16
 80133dc:	454e      	cmp	r6, r9
 80133de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80133e2:	f84a 3b04 	str.w	r3, [sl], #4
 80133e6:	d8e7      	bhi.n	80133b8 <__mdiff+0x80>
 80133e8:	1b33      	subs	r3, r6, r4
 80133ea:	3b15      	subs	r3, #21
 80133ec:	f023 0303 	bic.w	r3, r3, #3
 80133f0:	3304      	adds	r3, #4
 80133f2:	3415      	adds	r4, #21
 80133f4:	42a6      	cmp	r6, r4
 80133f6:	bf38      	it	cc
 80133f8:	2304      	movcc	r3, #4
 80133fa:	441d      	add	r5, r3
 80133fc:	4473      	add	r3, lr
 80133fe:	469e      	mov	lr, r3
 8013400:	462e      	mov	r6, r5
 8013402:	4566      	cmp	r6, ip
 8013404:	d30e      	bcc.n	8013424 <__mdiff+0xec>
 8013406:	f10c 0203 	add.w	r2, ip, #3
 801340a:	1b52      	subs	r2, r2, r5
 801340c:	f022 0203 	bic.w	r2, r2, #3
 8013410:	3d03      	subs	r5, #3
 8013412:	45ac      	cmp	ip, r5
 8013414:	bf38      	it	cc
 8013416:	2200      	movcc	r2, #0
 8013418:	441a      	add	r2, r3
 801341a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801341e:	b17b      	cbz	r3, 8013440 <__mdiff+0x108>
 8013420:	6107      	str	r7, [r0, #16]
 8013422:	e7a3      	b.n	801336c <__mdiff+0x34>
 8013424:	f856 8b04 	ldr.w	r8, [r6], #4
 8013428:	fa11 f288 	uxtah	r2, r1, r8
 801342c:	1414      	asrs	r4, r2, #16
 801342e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013432:	b292      	uxth	r2, r2
 8013434:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013438:	f84e 2b04 	str.w	r2, [lr], #4
 801343c:	1421      	asrs	r1, r4, #16
 801343e:	e7e0      	b.n	8013402 <__mdiff+0xca>
 8013440:	3f01      	subs	r7, #1
 8013442:	e7ea      	b.n	801341a <__mdiff+0xe2>
 8013444:	080165f9 	.word	0x080165f9
 8013448:	08016684 	.word	0x08016684

0801344c <__ulp>:
 801344c:	b082      	sub	sp, #8
 801344e:	ed8d 0b00 	vstr	d0, [sp]
 8013452:	9b01      	ldr	r3, [sp, #4]
 8013454:	4912      	ldr	r1, [pc, #72]	; (80134a0 <__ulp+0x54>)
 8013456:	4019      	ands	r1, r3
 8013458:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801345c:	2900      	cmp	r1, #0
 801345e:	dd05      	ble.n	801346c <__ulp+0x20>
 8013460:	2200      	movs	r2, #0
 8013462:	460b      	mov	r3, r1
 8013464:	ec43 2b10 	vmov	d0, r2, r3
 8013468:	b002      	add	sp, #8
 801346a:	4770      	bx	lr
 801346c:	4249      	negs	r1, r1
 801346e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013472:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013476:	f04f 0200 	mov.w	r2, #0
 801347a:	f04f 0300 	mov.w	r3, #0
 801347e:	da04      	bge.n	801348a <__ulp+0x3e>
 8013480:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013484:	fa41 f300 	asr.w	r3, r1, r0
 8013488:	e7ec      	b.n	8013464 <__ulp+0x18>
 801348a:	f1a0 0114 	sub.w	r1, r0, #20
 801348e:	291e      	cmp	r1, #30
 8013490:	bfda      	itte	le
 8013492:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013496:	fa20 f101 	lsrle.w	r1, r0, r1
 801349a:	2101      	movgt	r1, #1
 801349c:	460a      	mov	r2, r1
 801349e:	e7e1      	b.n	8013464 <__ulp+0x18>
 80134a0:	7ff00000 	.word	0x7ff00000

080134a4 <__b2d>:
 80134a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134a6:	6905      	ldr	r5, [r0, #16]
 80134a8:	f100 0714 	add.w	r7, r0, #20
 80134ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80134b0:	1f2e      	subs	r6, r5, #4
 80134b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80134b6:	4620      	mov	r0, r4
 80134b8:	f7ff fd48 	bl	8012f4c <__hi0bits>
 80134bc:	f1c0 0320 	rsb	r3, r0, #32
 80134c0:	280a      	cmp	r0, #10
 80134c2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013540 <__b2d+0x9c>
 80134c6:	600b      	str	r3, [r1, #0]
 80134c8:	dc14      	bgt.n	80134f4 <__b2d+0x50>
 80134ca:	f1c0 0e0b 	rsb	lr, r0, #11
 80134ce:	fa24 f10e 	lsr.w	r1, r4, lr
 80134d2:	42b7      	cmp	r7, r6
 80134d4:	ea41 030c 	orr.w	r3, r1, ip
 80134d8:	bf34      	ite	cc
 80134da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80134de:	2100      	movcs	r1, #0
 80134e0:	3015      	adds	r0, #21
 80134e2:	fa04 f000 	lsl.w	r0, r4, r0
 80134e6:	fa21 f10e 	lsr.w	r1, r1, lr
 80134ea:	ea40 0201 	orr.w	r2, r0, r1
 80134ee:	ec43 2b10 	vmov	d0, r2, r3
 80134f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134f4:	42b7      	cmp	r7, r6
 80134f6:	bf3a      	itte	cc
 80134f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80134fc:	f1a5 0608 	subcc.w	r6, r5, #8
 8013500:	2100      	movcs	r1, #0
 8013502:	380b      	subs	r0, #11
 8013504:	d017      	beq.n	8013536 <__b2d+0x92>
 8013506:	f1c0 0c20 	rsb	ip, r0, #32
 801350a:	fa04 f500 	lsl.w	r5, r4, r0
 801350e:	42be      	cmp	r6, r7
 8013510:	fa21 f40c 	lsr.w	r4, r1, ip
 8013514:	ea45 0504 	orr.w	r5, r5, r4
 8013518:	bf8c      	ite	hi
 801351a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801351e:	2400      	movls	r4, #0
 8013520:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013524:	fa01 f000 	lsl.w	r0, r1, r0
 8013528:	fa24 f40c 	lsr.w	r4, r4, ip
 801352c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013530:	ea40 0204 	orr.w	r2, r0, r4
 8013534:	e7db      	b.n	80134ee <__b2d+0x4a>
 8013536:	ea44 030c 	orr.w	r3, r4, ip
 801353a:	460a      	mov	r2, r1
 801353c:	e7d7      	b.n	80134ee <__b2d+0x4a>
 801353e:	bf00      	nop
 8013540:	3ff00000 	.word	0x3ff00000

08013544 <__d2b>:
 8013544:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013548:	4689      	mov	r9, r1
 801354a:	2101      	movs	r1, #1
 801354c:	ec57 6b10 	vmov	r6, r7, d0
 8013550:	4690      	mov	r8, r2
 8013552:	f7ff fc09 	bl	8012d68 <_Balloc>
 8013556:	4604      	mov	r4, r0
 8013558:	b930      	cbnz	r0, 8013568 <__d2b+0x24>
 801355a:	4602      	mov	r2, r0
 801355c:	4b25      	ldr	r3, [pc, #148]	; (80135f4 <__d2b+0xb0>)
 801355e:	4826      	ldr	r0, [pc, #152]	; (80135f8 <__d2b+0xb4>)
 8013560:	f240 310a 	movw	r1, #778	; 0x30a
 8013564:	f7fe f9a6 	bl	80118b4 <__assert_func>
 8013568:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801356c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013570:	bb35      	cbnz	r5, 80135c0 <__d2b+0x7c>
 8013572:	2e00      	cmp	r6, #0
 8013574:	9301      	str	r3, [sp, #4]
 8013576:	d028      	beq.n	80135ca <__d2b+0x86>
 8013578:	4668      	mov	r0, sp
 801357a:	9600      	str	r6, [sp, #0]
 801357c:	f7ff fd06 	bl	8012f8c <__lo0bits>
 8013580:	9900      	ldr	r1, [sp, #0]
 8013582:	b300      	cbz	r0, 80135c6 <__d2b+0x82>
 8013584:	9a01      	ldr	r2, [sp, #4]
 8013586:	f1c0 0320 	rsb	r3, r0, #32
 801358a:	fa02 f303 	lsl.w	r3, r2, r3
 801358e:	430b      	orrs	r3, r1
 8013590:	40c2      	lsrs	r2, r0
 8013592:	6163      	str	r3, [r4, #20]
 8013594:	9201      	str	r2, [sp, #4]
 8013596:	9b01      	ldr	r3, [sp, #4]
 8013598:	61a3      	str	r3, [r4, #24]
 801359a:	2b00      	cmp	r3, #0
 801359c:	bf14      	ite	ne
 801359e:	2202      	movne	r2, #2
 80135a0:	2201      	moveq	r2, #1
 80135a2:	6122      	str	r2, [r4, #16]
 80135a4:	b1d5      	cbz	r5, 80135dc <__d2b+0x98>
 80135a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80135aa:	4405      	add	r5, r0
 80135ac:	f8c9 5000 	str.w	r5, [r9]
 80135b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80135b4:	f8c8 0000 	str.w	r0, [r8]
 80135b8:	4620      	mov	r0, r4
 80135ba:	b003      	add	sp, #12
 80135bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80135c4:	e7d5      	b.n	8013572 <__d2b+0x2e>
 80135c6:	6161      	str	r1, [r4, #20]
 80135c8:	e7e5      	b.n	8013596 <__d2b+0x52>
 80135ca:	a801      	add	r0, sp, #4
 80135cc:	f7ff fcde 	bl	8012f8c <__lo0bits>
 80135d0:	9b01      	ldr	r3, [sp, #4]
 80135d2:	6163      	str	r3, [r4, #20]
 80135d4:	2201      	movs	r2, #1
 80135d6:	6122      	str	r2, [r4, #16]
 80135d8:	3020      	adds	r0, #32
 80135da:	e7e3      	b.n	80135a4 <__d2b+0x60>
 80135dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80135e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80135e4:	f8c9 0000 	str.w	r0, [r9]
 80135e8:	6918      	ldr	r0, [r3, #16]
 80135ea:	f7ff fcaf 	bl	8012f4c <__hi0bits>
 80135ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80135f2:	e7df      	b.n	80135b4 <__d2b+0x70>
 80135f4:	080165f9 	.word	0x080165f9
 80135f8:	08016684 	.word	0x08016684

080135fc <__ratio>:
 80135fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013600:	4688      	mov	r8, r1
 8013602:	4669      	mov	r1, sp
 8013604:	4681      	mov	r9, r0
 8013606:	f7ff ff4d 	bl	80134a4 <__b2d>
 801360a:	a901      	add	r1, sp, #4
 801360c:	4640      	mov	r0, r8
 801360e:	ec55 4b10 	vmov	r4, r5, d0
 8013612:	f7ff ff47 	bl	80134a4 <__b2d>
 8013616:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801361a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801361e:	eba3 0c02 	sub.w	ip, r3, r2
 8013622:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013626:	1a9b      	subs	r3, r3, r2
 8013628:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801362c:	ec51 0b10 	vmov	r0, r1, d0
 8013630:	2b00      	cmp	r3, #0
 8013632:	bfd6      	itet	le
 8013634:	460a      	movle	r2, r1
 8013636:	462a      	movgt	r2, r5
 8013638:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801363c:	468b      	mov	fp, r1
 801363e:	462f      	mov	r7, r5
 8013640:	bfd4      	ite	le
 8013642:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013646:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801364a:	4620      	mov	r0, r4
 801364c:	ee10 2a10 	vmov	r2, s0
 8013650:	465b      	mov	r3, fp
 8013652:	4639      	mov	r1, r7
 8013654:	f7ed f92a 	bl	80008ac <__aeabi_ddiv>
 8013658:	ec41 0b10 	vmov	d0, r0, r1
 801365c:	b003      	add	sp, #12
 801365e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013662 <__copybits>:
 8013662:	3901      	subs	r1, #1
 8013664:	b570      	push	{r4, r5, r6, lr}
 8013666:	1149      	asrs	r1, r1, #5
 8013668:	6914      	ldr	r4, [r2, #16]
 801366a:	3101      	adds	r1, #1
 801366c:	f102 0314 	add.w	r3, r2, #20
 8013670:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013674:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013678:	1f05      	subs	r5, r0, #4
 801367a:	42a3      	cmp	r3, r4
 801367c:	d30c      	bcc.n	8013698 <__copybits+0x36>
 801367e:	1aa3      	subs	r3, r4, r2
 8013680:	3b11      	subs	r3, #17
 8013682:	f023 0303 	bic.w	r3, r3, #3
 8013686:	3211      	adds	r2, #17
 8013688:	42a2      	cmp	r2, r4
 801368a:	bf88      	it	hi
 801368c:	2300      	movhi	r3, #0
 801368e:	4418      	add	r0, r3
 8013690:	2300      	movs	r3, #0
 8013692:	4288      	cmp	r0, r1
 8013694:	d305      	bcc.n	80136a2 <__copybits+0x40>
 8013696:	bd70      	pop	{r4, r5, r6, pc}
 8013698:	f853 6b04 	ldr.w	r6, [r3], #4
 801369c:	f845 6f04 	str.w	r6, [r5, #4]!
 80136a0:	e7eb      	b.n	801367a <__copybits+0x18>
 80136a2:	f840 3b04 	str.w	r3, [r0], #4
 80136a6:	e7f4      	b.n	8013692 <__copybits+0x30>

080136a8 <__any_on>:
 80136a8:	f100 0214 	add.w	r2, r0, #20
 80136ac:	6900      	ldr	r0, [r0, #16]
 80136ae:	114b      	asrs	r3, r1, #5
 80136b0:	4298      	cmp	r0, r3
 80136b2:	b510      	push	{r4, lr}
 80136b4:	db11      	blt.n	80136da <__any_on+0x32>
 80136b6:	dd0a      	ble.n	80136ce <__any_on+0x26>
 80136b8:	f011 011f 	ands.w	r1, r1, #31
 80136bc:	d007      	beq.n	80136ce <__any_on+0x26>
 80136be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80136c2:	fa24 f001 	lsr.w	r0, r4, r1
 80136c6:	fa00 f101 	lsl.w	r1, r0, r1
 80136ca:	428c      	cmp	r4, r1
 80136cc:	d10b      	bne.n	80136e6 <__any_on+0x3e>
 80136ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80136d2:	4293      	cmp	r3, r2
 80136d4:	d803      	bhi.n	80136de <__any_on+0x36>
 80136d6:	2000      	movs	r0, #0
 80136d8:	bd10      	pop	{r4, pc}
 80136da:	4603      	mov	r3, r0
 80136dc:	e7f7      	b.n	80136ce <__any_on+0x26>
 80136de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80136e2:	2900      	cmp	r1, #0
 80136e4:	d0f5      	beq.n	80136d2 <__any_on+0x2a>
 80136e6:	2001      	movs	r0, #1
 80136e8:	e7f6      	b.n	80136d8 <__any_on+0x30>

080136ea <_calloc_r>:
 80136ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80136ec:	fba1 2402 	umull	r2, r4, r1, r2
 80136f0:	b94c      	cbnz	r4, 8013706 <_calloc_r+0x1c>
 80136f2:	4611      	mov	r1, r2
 80136f4:	9201      	str	r2, [sp, #4]
 80136f6:	f000 f87b 	bl	80137f0 <_malloc_r>
 80136fa:	9a01      	ldr	r2, [sp, #4]
 80136fc:	4605      	mov	r5, r0
 80136fe:	b930      	cbnz	r0, 801370e <_calloc_r+0x24>
 8013700:	4628      	mov	r0, r5
 8013702:	b003      	add	sp, #12
 8013704:	bd30      	pop	{r4, r5, pc}
 8013706:	220c      	movs	r2, #12
 8013708:	6002      	str	r2, [r0, #0]
 801370a:	2500      	movs	r5, #0
 801370c:	e7f8      	b.n	8013700 <_calloc_r+0x16>
 801370e:	4621      	mov	r1, r4
 8013710:	f7fc fa92 	bl	800fc38 <memset>
 8013714:	e7f4      	b.n	8013700 <_calloc_r+0x16>
	...

08013718 <_free_r>:
 8013718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801371a:	2900      	cmp	r1, #0
 801371c:	d044      	beq.n	80137a8 <_free_r+0x90>
 801371e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013722:	9001      	str	r0, [sp, #4]
 8013724:	2b00      	cmp	r3, #0
 8013726:	f1a1 0404 	sub.w	r4, r1, #4
 801372a:	bfb8      	it	lt
 801372c:	18e4      	addlt	r4, r4, r3
 801372e:	f001 fae1 	bl	8014cf4 <__malloc_lock>
 8013732:	4a1e      	ldr	r2, [pc, #120]	; (80137ac <_free_r+0x94>)
 8013734:	9801      	ldr	r0, [sp, #4]
 8013736:	6813      	ldr	r3, [r2, #0]
 8013738:	b933      	cbnz	r3, 8013748 <_free_r+0x30>
 801373a:	6063      	str	r3, [r4, #4]
 801373c:	6014      	str	r4, [r2, #0]
 801373e:	b003      	add	sp, #12
 8013740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013744:	f001 badc 	b.w	8014d00 <__malloc_unlock>
 8013748:	42a3      	cmp	r3, r4
 801374a:	d908      	bls.n	801375e <_free_r+0x46>
 801374c:	6825      	ldr	r5, [r4, #0]
 801374e:	1961      	adds	r1, r4, r5
 8013750:	428b      	cmp	r3, r1
 8013752:	bf01      	itttt	eq
 8013754:	6819      	ldreq	r1, [r3, #0]
 8013756:	685b      	ldreq	r3, [r3, #4]
 8013758:	1949      	addeq	r1, r1, r5
 801375a:	6021      	streq	r1, [r4, #0]
 801375c:	e7ed      	b.n	801373a <_free_r+0x22>
 801375e:	461a      	mov	r2, r3
 8013760:	685b      	ldr	r3, [r3, #4]
 8013762:	b10b      	cbz	r3, 8013768 <_free_r+0x50>
 8013764:	42a3      	cmp	r3, r4
 8013766:	d9fa      	bls.n	801375e <_free_r+0x46>
 8013768:	6811      	ldr	r1, [r2, #0]
 801376a:	1855      	adds	r5, r2, r1
 801376c:	42a5      	cmp	r5, r4
 801376e:	d10b      	bne.n	8013788 <_free_r+0x70>
 8013770:	6824      	ldr	r4, [r4, #0]
 8013772:	4421      	add	r1, r4
 8013774:	1854      	adds	r4, r2, r1
 8013776:	42a3      	cmp	r3, r4
 8013778:	6011      	str	r1, [r2, #0]
 801377a:	d1e0      	bne.n	801373e <_free_r+0x26>
 801377c:	681c      	ldr	r4, [r3, #0]
 801377e:	685b      	ldr	r3, [r3, #4]
 8013780:	6053      	str	r3, [r2, #4]
 8013782:	4421      	add	r1, r4
 8013784:	6011      	str	r1, [r2, #0]
 8013786:	e7da      	b.n	801373e <_free_r+0x26>
 8013788:	d902      	bls.n	8013790 <_free_r+0x78>
 801378a:	230c      	movs	r3, #12
 801378c:	6003      	str	r3, [r0, #0]
 801378e:	e7d6      	b.n	801373e <_free_r+0x26>
 8013790:	6825      	ldr	r5, [r4, #0]
 8013792:	1961      	adds	r1, r4, r5
 8013794:	428b      	cmp	r3, r1
 8013796:	bf04      	itt	eq
 8013798:	6819      	ldreq	r1, [r3, #0]
 801379a:	685b      	ldreq	r3, [r3, #4]
 801379c:	6063      	str	r3, [r4, #4]
 801379e:	bf04      	itt	eq
 80137a0:	1949      	addeq	r1, r1, r5
 80137a2:	6021      	streq	r1, [r4, #0]
 80137a4:	6054      	str	r4, [r2, #4]
 80137a6:	e7ca      	b.n	801373e <_free_r+0x26>
 80137a8:	b003      	add	sp, #12
 80137aa:	bd30      	pop	{r4, r5, pc}
 80137ac:	2000b680 	.word	0x2000b680

080137b0 <sbrk_aligned>:
 80137b0:	b570      	push	{r4, r5, r6, lr}
 80137b2:	4e0e      	ldr	r6, [pc, #56]	; (80137ec <sbrk_aligned+0x3c>)
 80137b4:	460c      	mov	r4, r1
 80137b6:	6831      	ldr	r1, [r6, #0]
 80137b8:	4605      	mov	r5, r0
 80137ba:	b911      	cbnz	r1, 80137c2 <sbrk_aligned+0x12>
 80137bc:	f000 fe80 	bl	80144c0 <_sbrk_r>
 80137c0:	6030      	str	r0, [r6, #0]
 80137c2:	4621      	mov	r1, r4
 80137c4:	4628      	mov	r0, r5
 80137c6:	f000 fe7b 	bl	80144c0 <_sbrk_r>
 80137ca:	1c43      	adds	r3, r0, #1
 80137cc:	d00a      	beq.n	80137e4 <sbrk_aligned+0x34>
 80137ce:	1cc4      	adds	r4, r0, #3
 80137d0:	f024 0403 	bic.w	r4, r4, #3
 80137d4:	42a0      	cmp	r0, r4
 80137d6:	d007      	beq.n	80137e8 <sbrk_aligned+0x38>
 80137d8:	1a21      	subs	r1, r4, r0
 80137da:	4628      	mov	r0, r5
 80137dc:	f000 fe70 	bl	80144c0 <_sbrk_r>
 80137e0:	3001      	adds	r0, #1
 80137e2:	d101      	bne.n	80137e8 <sbrk_aligned+0x38>
 80137e4:	f04f 34ff 	mov.w	r4, #4294967295
 80137e8:	4620      	mov	r0, r4
 80137ea:	bd70      	pop	{r4, r5, r6, pc}
 80137ec:	2000b684 	.word	0x2000b684

080137f0 <_malloc_r>:
 80137f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137f4:	1ccd      	adds	r5, r1, #3
 80137f6:	f025 0503 	bic.w	r5, r5, #3
 80137fa:	3508      	adds	r5, #8
 80137fc:	2d0c      	cmp	r5, #12
 80137fe:	bf38      	it	cc
 8013800:	250c      	movcc	r5, #12
 8013802:	2d00      	cmp	r5, #0
 8013804:	4607      	mov	r7, r0
 8013806:	db01      	blt.n	801380c <_malloc_r+0x1c>
 8013808:	42a9      	cmp	r1, r5
 801380a:	d905      	bls.n	8013818 <_malloc_r+0x28>
 801380c:	230c      	movs	r3, #12
 801380e:	603b      	str	r3, [r7, #0]
 8013810:	2600      	movs	r6, #0
 8013812:	4630      	mov	r0, r6
 8013814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013818:	4e2e      	ldr	r6, [pc, #184]	; (80138d4 <_malloc_r+0xe4>)
 801381a:	f001 fa6b 	bl	8014cf4 <__malloc_lock>
 801381e:	6833      	ldr	r3, [r6, #0]
 8013820:	461c      	mov	r4, r3
 8013822:	bb34      	cbnz	r4, 8013872 <_malloc_r+0x82>
 8013824:	4629      	mov	r1, r5
 8013826:	4638      	mov	r0, r7
 8013828:	f7ff ffc2 	bl	80137b0 <sbrk_aligned>
 801382c:	1c43      	adds	r3, r0, #1
 801382e:	4604      	mov	r4, r0
 8013830:	d14d      	bne.n	80138ce <_malloc_r+0xde>
 8013832:	6834      	ldr	r4, [r6, #0]
 8013834:	4626      	mov	r6, r4
 8013836:	2e00      	cmp	r6, #0
 8013838:	d140      	bne.n	80138bc <_malloc_r+0xcc>
 801383a:	6823      	ldr	r3, [r4, #0]
 801383c:	4631      	mov	r1, r6
 801383e:	4638      	mov	r0, r7
 8013840:	eb04 0803 	add.w	r8, r4, r3
 8013844:	f000 fe3c 	bl	80144c0 <_sbrk_r>
 8013848:	4580      	cmp	r8, r0
 801384a:	d13a      	bne.n	80138c2 <_malloc_r+0xd2>
 801384c:	6821      	ldr	r1, [r4, #0]
 801384e:	3503      	adds	r5, #3
 8013850:	1a6d      	subs	r5, r5, r1
 8013852:	f025 0503 	bic.w	r5, r5, #3
 8013856:	3508      	adds	r5, #8
 8013858:	2d0c      	cmp	r5, #12
 801385a:	bf38      	it	cc
 801385c:	250c      	movcc	r5, #12
 801385e:	4629      	mov	r1, r5
 8013860:	4638      	mov	r0, r7
 8013862:	f7ff ffa5 	bl	80137b0 <sbrk_aligned>
 8013866:	3001      	adds	r0, #1
 8013868:	d02b      	beq.n	80138c2 <_malloc_r+0xd2>
 801386a:	6823      	ldr	r3, [r4, #0]
 801386c:	442b      	add	r3, r5
 801386e:	6023      	str	r3, [r4, #0]
 8013870:	e00e      	b.n	8013890 <_malloc_r+0xa0>
 8013872:	6822      	ldr	r2, [r4, #0]
 8013874:	1b52      	subs	r2, r2, r5
 8013876:	d41e      	bmi.n	80138b6 <_malloc_r+0xc6>
 8013878:	2a0b      	cmp	r2, #11
 801387a:	d916      	bls.n	80138aa <_malloc_r+0xba>
 801387c:	1961      	adds	r1, r4, r5
 801387e:	42a3      	cmp	r3, r4
 8013880:	6025      	str	r5, [r4, #0]
 8013882:	bf18      	it	ne
 8013884:	6059      	strne	r1, [r3, #4]
 8013886:	6863      	ldr	r3, [r4, #4]
 8013888:	bf08      	it	eq
 801388a:	6031      	streq	r1, [r6, #0]
 801388c:	5162      	str	r2, [r4, r5]
 801388e:	604b      	str	r3, [r1, #4]
 8013890:	4638      	mov	r0, r7
 8013892:	f104 060b 	add.w	r6, r4, #11
 8013896:	f001 fa33 	bl	8014d00 <__malloc_unlock>
 801389a:	f026 0607 	bic.w	r6, r6, #7
 801389e:	1d23      	adds	r3, r4, #4
 80138a0:	1af2      	subs	r2, r6, r3
 80138a2:	d0b6      	beq.n	8013812 <_malloc_r+0x22>
 80138a4:	1b9b      	subs	r3, r3, r6
 80138a6:	50a3      	str	r3, [r4, r2]
 80138a8:	e7b3      	b.n	8013812 <_malloc_r+0x22>
 80138aa:	6862      	ldr	r2, [r4, #4]
 80138ac:	42a3      	cmp	r3, r4
 80138ae:	bf0c      	ite	eq
 80138b0:	6032      	streq	r2, [r6, #0]
 80138b2:	605a      	strne	r2, [r3, #4]
 80138b4:	e7ec      	b.n	8013890 <_malloc_r+0xa0>
 80138b6:	4623      	mov	r3, r4
 80138b8:	6864      	ldr	r4, [r4, #4]
 80138ba:	e7b2      	b.n	8013822 <_malloc_r+0x32>
 80138bc:	4634      	mov	r4, r6
 80138be:	6876      	ldr	r6, [r6, #4]
 80138c0:	e7b9      	b.n	8013836 <_malloc_r+0x46>
 80138c2:	230c      	movs	r3, #12
 80138c4:	603b      	str	r3, [r7, #0]
 80138c6:	4638      	mov	r0, r7
 80138c8:	f001 fa1a 	bl	8014d00 <__malloc_unlock>
 80138cc:	e7a1      	b.n	8013812 <_malloc_r+0x22>
 80138ce:	6025      	str	r5, [r4, #0]
 80138d0:	e7de      	b.n	8013890 <_malloc_r+0xa0>
 80138d2:	bf00      	nop
 80138d4:	2000b680 	.word	0x2000b680

080138d8 <__ssputs_r>:
 80138d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138dc:	688e      	ldr	r6, [r1, #8]
 80138de:	429e      	cmp	r6, r3
 80138e0:	4682      	mov	sl, r0
 80138e2:	460c      	mov	r4, r1
 80138e4:	4690      	mov	r8, r2
 80138e6:	461f      	mov	r7, r3
 80138e8:	d838      	bhi.n	801395c <__ssputs_r+0x84>
 80138ea:	898a      	ldrh	r2, [r1, #12]
 80138ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80138f0:	d032      	beq.n	8013958 <__ssputs_r+0x80>
 80138f2:	6825      	ldr	r5, [r4, #0]
 80138f4:	6909      	ldr	r1, [r1, #16]
 80138f6:	eba5 0901 	sub.w	r9, r5, r1
 80138fa:	6965      	ldr	r5, [r4, #20]
 80138fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013900:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013904:	3301      	adds	r3, #1
 8013906:	444b      	add	r3, r9
 8013908:	106d      	asrs	r5, r5, #1
 801390a:	429d      	cmp	r5, r3
 801390c:	bf38      	it	cc
 801390e:	461d      	movcc	r5, r3
 8013910:	0553      	lsls	r3, r2, #21
 8013912:	d531      	bpl.n	8013978 <__ssputs_r+0xa0>
 8013914:	4629      	mov	r1, r5
 8013916:	f7ff ff6b 	bl	80137f0 <_malloc_r>
 801391a:	4606      	mov	r6, r0
 801391c:	b950      	cbnz	r0, 8013934 <__ssputs_r+0x5c>
 801391e:	230c      	movs	r3, #12
 8013920:	f8ca 3000 	str.w	r3, [sl]
 8013924:	89a3      	ldrh	r3, [r4, #12]
 8013926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801392a:	81a3      	strh	r3, [r4, #12]
 801392c:	f04f 30ff 	mov.w	r0, #4294967295
 8013930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013934:	6921      	ldr	r1, [r4, #16]
 8013936:	464a      	mov	r2, r9
 8013938:	f7fc f970 	bl	800fc1c <memcpy>
 801393c:	89a3      	ldrh	r3, [r4, #12]
 801393e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013946:	81a3      	strh	r3, [r4, #12]
 8013948:	6126      	str	r6, [r4, #16]
 801394a:	6165      	str	r5, [r4, #20]
 801394c:	444e      	add	r6, r9
 801394e:	eba5 0509 	sub.w	r5, r5, r9
 8013952:	6026      	str	r6, [r4, #0]
 8013954:	60a5      	str	r5, [r4, #8]
 8013956:	463e      	mov	r6, r7
 8013958:	42be      	cmp	r6, r7
 801395a:	d900      	bls.n	801395e <__ssputs_r+0x86>
 801395c:	463e      	mov	r6, r7
 801395e:	6820      	ldr	r0, [r4, #0]
 8013960:	4632      	mov	r2, r6
 8013962:	4641      	mov	r1, r8
 8013964:	f001 f9ac 	bl	8014cc0 <memmove>
 8013968:	68a3      	ldr	r3, [r4, #8]
 801396a:	1b9b      	subs	r3, r3, r6
 801396c:	60a3      	str	r3, [r4, #8]
 801396e:	6823      	ldr	r3, [r4, #0]
 8013970:	4433      	add	r3, r6
 8013972:	6023      	str	r3, [r4, #0]
 8013974:	2000      	movs	r0, #0
 8013976:	e7db      	b.n	8013930 <__ssputs_r+0x58>
 8013978:	462a      	mov	r2, r5
 801397a:	f001 f9c7 	bl	8014d0c <_realloc_r>
 801397e:	4606      	mov	r6, r0
 8013980:	2800      	cmp	r0, #0
 8013982:	d1e1      	bne.n	8013948 <__ssputs_r+0x70>
 8013984:	6921      	ldr	r1, [r4, #16]
 8013986:	4650      	mov	r0, sl
 8013988:	f7ff fec6 	bl	8013718 <_free_r>
 801398c:	e7c7      	b.n	801391e <__ssputs_r+0x46>
	...

08013990 <_svfiprintf_r>:
 8013990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013994:	4698      	mov	r8, r3
 8013996:	898b      	ldrh	r3, [r1, #12]
 8013998:	061b      	lsls	r3, r3, #24
 801399a:	b09d      	sub	sp, #116	; 0x74
 801399c:	4607      	mov	r7, r0
 801399e:	460d      	mov	r5, r1
 80139a0:	4614      	mov	r4, r2
 80139a2:	d50e      	bpl.n	80139c2 <_svfiprintf_r+0x32>
 80139a4:	690b      	ldr	r3, [r1, #16]
 80139a6:	b963      	cbnz	r3, 80139c2 <_svfiprintf_r+0x32>
 80139a8:	2140      	movs	r1, #64	; 0x40
 80139aa:	f7ff ff21 	bl	80137f0 <_malloc_r>
 80139ae:	6028      	str	r0, [r5, #0]
 80139b0:	6128      	str	r0, [r5, #16]
 80139b2:	b920      	cbnz	r0, 80139be <_svfiprintf_r+0x2e>
 80139b4:	230c      	movs	r3, #12
 80139b6:	603b      	str	r3, [r7, #0]
 80139b8:	f04f 30ff 	mov.w	r0, #4294967295
 80139bc:	e0d1      	b.n	8013b62 <_svfiprintf_r+0x1d2>
 80139be:	2340      	movs	r3, #64	; 0x40
 80139c0:	616b      	str	r3, [r5, #20]
 80139c2:	2300      	movs	r3, #0
 80139c4:	9309      	str	r3, [sp, #36]	; 0x24
 80139c6:	2320      	movs	r3, #32
 80139c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80139cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80139d0:	2330      	movs	r3, #48	; 0x30
 80139d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013b7c <_svfiprintf_r+0x1ec>
 80139d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80139da:	f04f 0901 	mov.w	r9, #1
 80139de:	4623      	mov	r3, r4
 80139e0:	469a      	mov	sl, r3
 80139e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80139e6:	b10a      	cbz	r2, 80139ec <_svfiprintf_r+0x5c>
 80139e8:	2a25      	cmp	r2, #37	; 0x25
 80139ea:	d1f9      	bne.n	80139e0 <_svfiprintf_r+0x50>
 80139ec:	ebba 0b04 	subs.w	fp, sl, r4
 80139f0:	d00b      	beq.n	8013a0a <_svfiprintf_r+0x7a>
 80139f2:	465b      	mov	r3, fp
 80139f4:	4622      	mov	r2, r4
 80139f6:	4629      	mov	r1, r5
 80139f8:	4638      	mov	r0, r7
 80139fa:	f7ff ff6d 	bl	80138d8 <__ssputs_r>
 80139fe:	3001      	adds	r0, #1
 8013a00:	f000 80aa 	beq.w	8013b58 <_svfiprintf_r+0x1c8>
 8013a04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a06:	445a      	add	r2, fp
 8013a08:	9209      	str	r2, [sp, #36]	; 0x24
 8013a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	f000 80a2 	beq.w	8013b58 <_svfiprintf_r+0x1c8>
 8013a14:	2300      	movs	r3, #0
 8013a16:	f04f 32ff 	mov.w	r2, #4294967295
 8013a1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a1e:	f10a 0a01 	add.w	sl, sl, #1
 8013a22:	9304      	str	r3, [sp, #16]
 8013a24:	9307      	str	r3, [sp, #28]
 8013a26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013a2a:	931a      	str	r3, [sp, #104]	; 0x68
 8013a2c:	4654      	mov	r4, sl
 8013a2e:	2205      	movs	r2, #5
 8013a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a34:	4851      	ldr	r0, [pc, #324]	; (8013b7c <_svfiprintf_r+0x1ec>)
 8013a36:	f7ec fc03 	bl	8000240 <memchr>
 8013a3a:	9a04      	ldr	r2, [sp, #16]
 8013a3c:	b9d8      	cbnz	r0, 8013a76 <_svfiprintf_r+0xe6>
 8013a3e:	06d0      	lsls	r0, r2, #27
 8013a40:	bf44      	itt	mi
 8013a42:	2320      	movmi	r3, #32
 8013a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a48:	0711      	lsls	r1, r2, #28
 8013a4a:	bf44      	itt	mi
 8013a4c:	232b      	movmi	r3, #43	; 0x2b
 8013a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a52:	f89a 3000 	ldrb.w	r3, [sl]
 8013a56:	2b2a      	cmp	r3, #42	; 0x2a
 8013a58:	d015      	beq.n	8013a86 <_svfiprintf_r+0xf6>
 8013a5a:	9a07      	ldr	r2, [sp, #28]
 8013a5c:	4654      	mov	r4, sl
 8013a5e:	2000      	movs	r0, #0
 8013a60:	f04f 0c0a 	mov.w	ip, #10
 8013a64:	4621      	mov	r1, r4
 8013a66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a6a:	3b30      	subs	r3, #48	; 0x30
 8013a6c:	2b09      	cmp	r3, #9
 8013a6e:	d94e      	bls.n	8013b0e <_svfiprintf_r+0x17e>
 8013a70:	b1b0      	cbz	r0, 8013aa0 <_svfiprintf_r+0x110>
 8013a72:	9207      	str	r2, [sp, #28]
 8013a74:	e014      	b.n	8013aa0 <_svfiprintf_r+0x110>
 8013a76:	eba0 0308 	sub.w	r3, r0, r8
 8013a7a:	fa09 f303 	lsl.w	r3, r9, r3
 8013a7e:	4313      	orrs	r3, r2
 8013a80:	9304      	str	r3, [sp, #16]
 8013a82:	46a2      	mov	sl, r4
 8013a84:	e7d2      	b.n	8013a2c <_svfiprintf_r+0x9c>
 8013a86:	9b03      	ldr	r3, [sp, #12]
 8013a88:	1d19      	adds	r1, r3, #4
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	9103      	str	r1, [sp, #12]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	bfbb      	ittet	lt
 8013a92:	425b      	neglt	r3, r3
 8013a94:	f042 0202 	orrlt.w	r2, r2, #2
 8013a98:	9307      	strge	r3, [sp, #28]
 8013a9a:	9307      	strlt	r3, [sp, #28]
 8013a9c:	bfb8      	it	lt
 8013a9e:	9204      	strlt	r2, [sp, #16]
 8013aa0:	7823      	ldrb	r3, [r4, #0]
 8013aa2:	2b2e      	cmp	r3, #46	; 0x2e
 8013aa4:	d10c      	bne.n	8013ac0 <_svfiprintf_r+0x130>
 8013aa6:	7863      	ldrb	r3, [r4, #1]
 8013aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8013aaa:	d135      	bne.n	8013b18 <_svfiprintf_r+0x188>
 8013aac:	9b03      	ldr	r3, [sp, #12]
 8013aae:	1d1a      	adds	r2, r3, #4
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	9203      	str	r2, [sp, #12]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	bfb8      	it	lt
 8013ab8:	f04f 33ff 	movlt.w	r3, #4294967295
 8013abc:	3402      	adds	r4, #2
 8013abe:	9305      	str	r3, [sp, #20]
 8013ac0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013b8c <_svfiprintf_r+0x1fc>
 8013ac4:	7821      	ldrb	r1, [r4, #0]
 8013ac6:	2203      	movs	r2, #3
 8013ac8:	4650      	mov	r0, sl
 8013aca:	f7ec fbb9 	bl	8000240 <memchr>
 8013ace:	b140      	cbz	r0, 8013ae2 <_svfiprintf_r+0x152>
 8013ad0:	2340      	movs	r3, #64	; 0x40
 8013ad2:	eba0 000a 	sub.w	r0, r0, sl
 8013ad6:	fa03 f000 	lsl.w	r0, r3, r0
 8013ada:	9b04      	ldr	r3, [sp, #16]
 8013adc:	4303      	orrs	r3, r0
 8013ade:	3401      	adds	r4, #1
 8013ae0:	9304      	str	r3, [sp, #16]
 8013ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ae6:	4826      	ldr	r0, [pc, #152]	; (8013b80 <_svfiprintf_r+0x1f0>)
 8013ae8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013aec:	2206      	movs	r2, #6
 8013aee:	f7ec fba7 	bl	8000240 <memchr>
 8013af2:	2800      	cmp	r0, #0
 8013af4:	d038      	beq.n	8013b68 <_svfiprintf_r+0x1d8>
 8013af6:	4b23      	ldr	r3, [pc, #140]	; (8013b84 <_svfiprintf_r+0x1f4>)
 8013af8:	bb1b      	cbnz	r3, 8013b42 <_svfiprintf_r+0x1b2>
 8013afa:	9b03      	ldr	r3, [sp, #12]
 8013afc:	3307      	adds	r3, #7
 8013afe:	f023 0307 	bic.w	r3, r3, #7
 8013b02:	3308      	adds	r3, #8
 8013b04:	9303      	str	r3, [sp, #12]
 8013b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b08:	4433      	add	r3, r6
 8013b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8013b0c:	e767      	b.n	80139de <_svfiprintf_r+0x4e>
 8013b0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b12:	460c      	mov	r4, r1
 8013b14:	2001      	movs	r0, #1
 8013b16:	e7a5      	b.n	8013a64 <_svfiprintf_r+0xd4>
 8013b18:	2300      	movs	r3, #0
 8013b1a:	3401      	adds	r4, #1
 8013b1c:	9305      	str	r3, [sp, #20]
 8013b1e:	4619      	mov	r1, r3
 8013b20:	f04f 0c0a 	mov.w	ip, #10
 8013b24:	4620      	mov	r0, r4
 8013b26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b2a:	3a30      	subs	r2, #48	; 0x30
 8013b2c:	2a09      	cmp	r2, #9
 8013b2e:	d903      	bls.n	8013b38 <_svfiprintf_r+0x1a8>
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d0c5      	beq.n	8013ac0 <_svfiprintf_r+0x130>
 8013b34:	9105      	str	r1, [sp, #20]
 8013b36:	e7c3      	b.n	8013ac0 <_svfiprintf_r+0x130>
 8013b38:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b3c:	4604      	mov	r4, r0
 8013b3e:	2301      	movs	r3, #1
 8013b40:	e7f0      	b.n	8013b24 <_svfiprintf_r+0x194>
 8013b42:	ab03      	add	r3, sp, #12
 8013b44:	9300      	str	r3, [sp, #0]
 8013b46:	462a      	mov	r2, r5
 8013b48:	4b0f      	ldr	r3, [pc, #60]	; (8013b88 <_svfiprintf_r+0x1f8>)
 8013b4a:	a904      	add	r1, sp, #16
 8013b4c:	4638      	mov	r0, r7
 8013b4e:	f7fc f91b 	bl	800fd88 <_printf_float>
 8013b52:	1c42      	adds	r2, r0, #1
 8013b54:	4606      	mov	r6, r0
 8013b56:	d1d6      	bne.n	8013b06 <_svfiprintf_r+0x176>
 8013b58:	89ab      	ldrh	r3, [r5, #12]
 8013b5a:	065b      	lsls	r3, r3, #25
 8013b5c:	f53f af2c 	bmi.w	80139b8 <_svfiprintf_r+0x28>
 8013b60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b62:	b01d      	add	sp, #116	; 0x74
 8013b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b68:	ab03      	add	r3, sp, #12
 8013b6a:	9300      	str	r3, [sp, #0]
 8013b6c:	462a      	mov	r2, r5
 8013b6e:	4b06      	ldr	r3, [pc, #24]	; (8013b88 <_svfiprintf_r+0x1f8>)
 8013b70:	a904      	add	r1, sp, #16
 8013b72:	4638      	mov	r0, r7
 8013b74:	f7fc fbac 	bl	80102d0 <_printf_i>
 8013b78:	e7eb      	b.n	8013b52 <_svfiprintf_r+0x1c2>
 8013b7a:	bf00      	nop
 8013b7c:	080167dc 	.word	0x080167dc
 8013b80:	080167e6 	.word	0x080167e6
 8013b84:	0800fd89 	.word	0x0800fd89
 8013b88:	080138d9 	.word	0x080138d9
 8013b8c:	080167e2 	.word	0x080167e2

08013b90 <_sungetc_r>:
 8013b90:	b538      	push	{r3, r4, r5, lr}
 8013b92:	1c4b      	adds	r3, r1, #1
 8013b94:	4614      	mov	r4, r2
 8013b96:	d103      	bne.n	8013ba0 <_sungetc_r+0x10>
 8013b98:	f04f 35ff 	mov.w	r5, #4294967295
 8013b9c:	4628      	mov	r0, r5
 8013b9e:	bd38      	pop	{r3, r4, r5, pc}
 8013ba0:	8993      	ldrh	r3, [r2, #12]
 8013ba2:	f023 0320 	bic.w	r3, r3, #32
 8013ba6:	8193      	strh	r3, [r2, #12]
 8013ba8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013baa:	6852      	ldr	r2, [r2, #4]
 8013bac:	b2cd      	uxtb	r5, r1
 8013bae:	b18b      	cbz	r3, 8013bd4 <_sungetc_r+0x44>
 8013bb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013bb2:	4293      	cmp	r3, r2
 8013bb4:	dd08      	ble.n	8013bc8 <_sungetc_r+0x38>
 8013bb6:	6823      	ldr	r3, [r4, #0]
 8013bb8:	1e5a      	subs	r2, r3, #1
 8013bba:	6022      	str	r2, [r4, #0]
 8013bbc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013bc0:	6863      	ldr	r3, [r4, #4]
 8013bc2:	3301      	adds	r3, #1
 8013bc4:	6063      	str	r3, [r4, #4]
 8013bc6:	e7e9      	b.n	8013b9c <_sungetc_r+0xc>
 8013bc8:	4621      	mov	r1, r4
 8013bca:	f000 fd49 	bl	8014660 <__submore>
 8013bce:	2800      	cmp	r0, #0
 8013bd0:	d0f1      	beq.n	8013bb6 <_sungetc_r+0x26>
 8013bd2:	e7e1      	b.n	8013b98 <_sungetc_r+0x8>
 8013bd4:	6921      	ldr	r1, [r4, #16]
 8013bd6:	6823      	ldr	r3, [r4, #0]
 8013bd8:	b151      	cbz	r1, 8013bf0 <_sungetc_r+0x60>
 8013bda:	4299      	cmp	r1, r3
 8013bdc:	d208      	bcs.n	8013bf0 <_sungetc_r+0x60>
 8013bde:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013be2:	42a9      	cmp	r1, r5
 8013be4:	d104      	bne.n	8013bf0 <_sungetc_r+0x60>
 8013be6:	3b01      	subs	r3, #1
 8013be8:	3201      	adds	r2, #1
 8013bea:	6023      	str	r3, [r4, #0]
 8013bec:	6062      	str	r2, [r4, #4]
 8013bee:	e7d5      	b.n	8013b9c <_sungetc_r+0xc>
 8013bf0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013bf8:	6363      	str	r3, [r4, #52]	; 0x34
 8013bfa:	2303      	movs	r3, #3
 8013bfc:	63a3      	str	r3, [r4, #56]	; 0x38
 8013bfe:	4623      	mov	r3, r4
 8013c00:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013c04:	6023      	str	r3, [r4, #0]
 8013c06:	2301      	movs	r3, #1
 8013c08:	e7dc      	b.n	8013bc4 <_sungetc_r+0x34>

08013c0a <__ssrefill_r>:
 8013c0a:	b510      	push	{r4, lr}
 8013c0c:	460c      	mov	r4, r1
 8013c0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013c10:	b169      	cbz	r1, 8013c2e <__ssrefill_r+0x24>
 8013c12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c16:	4299      	cmp	r1, r3
 8013c18:	d001      	beq.n	8013c1e <__ssrefill_r+0x14>
 8013c1a:	f7ff fd7d 	bl	8013718 <_free_r>
 8013c1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013c20:	6063      	str	r3, [r4, #4]
 8013c22:	2000      	movs	r0, #0
 8013c24:	6360      	str	r0, [r4, #52]	; 0x34
 8013c26:	b113      	cbz	r3, 8013c2e <__ssrefill_r+0x24>
 8013c28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013c2a:	6023      	str	r3, [r4, #0]
 8013c2c:	bd10      	pop	{r4, pc}
 8013c2e:	6923      	ldr	r3, [r4, #16]
 8013c30:	6023      	str	r3, [r4, #0]
 8013c32:	2300      	movs	r3, #0
 8013c34:	6063      	str	r3, [r4, #4]
 8013c36:	89a3      	ldrh	r3, [r4, #12]
 8013c38:	f043 0320 	orr.w	r3, r3, #32
 8013c3c:	81a3      	strh	r3, [r4, #12]
 8013c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8013c42:	e7f3      	b.n	8013c2c <__ssrefill_r+0x22>

08013c44 <__ssvfiscanf_r>:
 8013c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c48:	460c      	mov	r4, r1
 8013c4a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013c4e:	2100      	movs	r1, #0
 8013c50:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8013c54:	49a6      	ldr	r1, [pc, #664]	; (8013ef0 <__ssvfiscanf_r+0x2ac>)
 8013c56:	91a0      	str	r1, [sp, #640]	; 0x280
 8013c58:	f10d 0804 	add.w	r8, sp, #4
 8013c5c:	49a5      	ldr	r1, [pc, #660]	; (8013ef4 <__ssvfiscanf_r+0x2b0>)
 8013c5e:	4fa6      	ldr	r7, [pc, #664]	; (8013ef8 <__ssvfiscanf_r+0x2b4>)
 8013c60:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8013efc <__ssvfiscanf_r+0x2b8>
 8013c64:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013c68:	4606      	mov	r6, r0
 8013c6a:	91a1      	str	r1, [sp, #644]	; 0x284
 8013c6c:	9300      	str	r3, [sp, #0]
 8013c6e:	7813      	ldrb	r3, [r2, #0]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	f000 815a 	beq.w	8013f2a <__ssvfiscanf_r+0x2e6>
 8013c76:	5dd9      	ldrb	r1, [r3, r7]
 8013c78:	f011 0108 	ands.w	r1, r1, #8
 8013c7c:	f102 0501 	add.w	r5, r2, #1
 8013c80:	d019      	beq.n	8013cb6 <__ssvfiscanf_r+0x72>
 8013c82:	6863      	ldr	r3, [r4, #4]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	dd0f      	ble.n	8013ca8 <__ssvfiscanf_r+0x64>
 8013c88:	6823      	ldr	r3, [r4, #0]
 8013c8a:	781a      	ldrb	r2, [r3, #0]
 8013c8c:	5cba      	ldrb	r2, [r7, r2]
 8013c8e:	0712      	lsls	r2, r2, #28
 8013c90:	d401      	bmi.n	8013c96 <__ssvfiscanf_r+0x52>
 8013c92:	462a      	mov	r2, r5
 8013c94:	e7eb      	b.n	8013c6e <__ssvfiscanf_r+0x2a>
 8013c96:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013c98:	3201      	adds	r2, #1
 8013c9a:	9245      	str	r2, [sp, #276]	; 0x114
 8013c9c:	6862      	ldr	r2, [r4, #4]
 8013c9e:	3301      	adds	r3, #1
 8013ca0:	3a01      	subs	r2, #1
 8013ca2:	6062      	str	r2, [r4, #4]
 8013ca4:	6023      	str	r3, [r4, #0]
 8013ca6:	e7ec      	b.n	8013c82 <__ssvfiscanf_r+0x3e>
 8013ca8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013caa:	4621      	mov	r1, r4
 8013cac:	4630      	mov	r0, r6
 8013cae:	4798      	blx	r3
 8013cb0:	2800      	cmp	r0, #0
 8013cb2:	d0e9      	beq.n	8013c88 <__ssvfiscanf_r+0x44>
 8013cb4:	e7ed      	b.n	8013c92 <__ssvfiscanf_r+0x4e>
 8013cb6:	2b25      	cmp	r3, #37	; 0x25
 8013cb8:	d012      	beq.n	8013ce0 <__ssvfiscanf_r+0x9c>
 8013cba:	469a      	mov	sl, r3
 8013cbc:	6863      	ldr	r3, [r4, #4]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	f340 8091 	ble.w	8013de6 <__ssvfiscanf_r+0x1a2>
 8013cc4:	6822      	ldr	r2, [r4, #0]
 8013cc6:	7813      	ldrb	r3, [r2, #0]
 8013cc8:	4553      	cmp	r3, sl
 8013cca:	f040 812e 	bne.w	8013f2a <__ssvfiscanf_r+0x2e6>
 8013cce:	6863      	ldr	r3, [r4, #4]
 8013cd0:	3b01      	subs	r3, #1
 8013cd2:	6063      	str	r3, [r4, #4]
 8013cd4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8013cd6:	3201      	adds	r2, #1
 8013cd8:	3301      	adds	r3, #1
 8013cda:	6022      	str	r2, [r4, #0]
 8013cdc:	9345      	str	r3, [sp, #276]	; 0x114
 8013cde:	e7d8      	b.n	8013c92 <__ssvfiscanf_r+0x4e>
 8013ce0:	9141      	str	r1, [sp, #260]	; 0x104
 8013ce2:	9143      	str	r1, [sp, #268]	; 0x10c
 8013ce4:	7853      	ldrb	r3, [r2, #1]
 8013ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8013ce8:	bf02      	ittt	eq
 8013cea:	2310      	moveq	r3, #16
 8013cec:	1c95      	addeq	r5, r2, #2
 8013cee:	9341      	streq	r3, [sp, #260]	; 0x104
 8013cf0:	220a      	movs	r2, #10
 8013cf2:	46aa      	mov	sl, r5
 8013cf4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8013cf8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013cfc:	2b09      	cmp	r3, #9
 8013cfe:	d91d      	bls.n	8013d3c <__ssvfiscanf_r+0xf8>
 8013d00:	487e      	ldr	r0, [pc, #504]	; (8013efc <__ssvfiscanf_r+0x2b8>)
 8013d02:	2203      	movs	r2, #3
 8013d04:	f7ec fa9c 	bl	8000240 <memchr>
 8013d08:	b140      	cbz	r0, 8013d1c <__ssvfiscanf_r+0xd8>
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	eba0 0009 	sub.w	r0, r0, r9
 8013d10:	fa03 f000 	lsl.w	r0, r3, r0
 8013d14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013d16:	4318      	orrs	r0, r3
 8013d18:	9041      	str	r0, [sp, #260]	; 0x104
 8013d1a:	4655      	mov	r5, sl
 8013d1c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013d20:	2b78      	cmp	r3, #120	; 0x78
 8013d22:	d806      	bhi.n	8013d32 <__ssvfiscanf_r+0xee>
 8013d24:	2b57      	cmp	r3, #87	; 0x57
 8013d26:	d810      	bhi.n	8013d4a <__ssvfiscanf_r+0x106>
 8013d28:	2b25      	cmp	r3, #37	; 0x25
 8013d2a:	d0c6      	beq.n	8013cba <__ssvfiscanf_r+0x76>
 8013d2c:	d856      	bhi.n	8013ddc <__ssvfiscanf_r+0x198>
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d064      	beq.n	8013dfc <__ssvfiscanf_r+0x1b8>
 8013d32:	2303      	movs	r3, #3
 8013d34:	9347      	str	r3, [sp, #284]	; 0x11c
 8013d36:	230a      	movs	r3, #10
 8013d38:	9342      	str	r3, [sp, #264]	; 0x108
 8013d3a:	e071      	b.n	8013e20 <__ssvfiscanf_r+0x1dc>
 8013d3c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013d3e:	fb02 1103 	mla	r1, r2, r3, r1
 8013d42:	3930      	subs	r1, #48	; 0x30
 8013d44:	9143      	str	r1, [sp, #268]	; 0x10c
 8013d46:	4655      	mov	r5, sl
 8013d48:	e7d3      	b.n	8013cf2 <__ssvfiscanf_r+0xae>
 8013d4a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013d4e:	2a20      	cmp	r2, #32
 8013d50:	d8ef      	bhi.n	8013d32 <__ssvfiscanf_r+0xee>
 8013d52:	a101      	add	r1, pc, #4	; (adr r1, 8013d58 <__ssvfiscanf_r+0x114>)
 8013d54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013d58:	08013e0b 	.word	0x08013e0b
 8013d5c:	08013d33 	.word	0x08013d33
 8013d60:	08013d33 	.word	0x08013d33
 8013d64:	08013e69 	.word	0x08013e69
 8013d68:	08013d33 	.word	0x08013d33
 8013d6c:	08013d33 	.word	0x08013d33
 8013d70:	08013d33 	.word	0x08013d33
 8013d74:	08013d33 	.word	0x08013d33
 8013d78:	08013d33 	.word	0x08013d33
 8013d7c:	08013d33 	.word	0x08013d33
 8013d80:	08013d33 	.word	0x08013d33
 8013d84:	08013e7f 	.word	0x08013e7f
 8013d88:	08013e55 	.word	0x08013e55
 8013d8c:	08013de3 	.word	0x08013de3
 8013d90:	08013de3 	.word	0x08013de3
 8013d94:	08013de3 	.word	0x08013de3
 8013d98:	08013d33 	.word	0x08013d33
 8013d9c:	08013e59 	.word	0x08013e59
 8013da0:	08013d33 	.word	0x08013d33
 8013da4:	08013d33 	.word	0x08013d33
 8013da8:	08013d33 	.word	0x08013d33
 8013dac:	08013d33 	.word	0x08013d33
 8013db0:	08013e8f 	.word	0x08013e8f
 8013db4:	08013e61 	.word	0x08013e61
 8013db8:	08013e03 	.word	0x08013e03
 8013dbc:	08013d33 	.word	0x08013d33
 8013dc0:	08013d33 	.word	0x08013d33
 8013dc4:	08013e8b 	.word	0x08013e8b
 8013dc8:	08013d33 	.word	0x08013d33
 8013dcc:	08013e55 	.word	0x08013e55
 8013dd0:	08013d33 	.word	0x08013d33
 8013dd4:	08013d33 	.word	0x08013d33
 8013dd8:	08013e0b 	.word	0x08013e0b
 8013ddc:	3b45      	subs	r3, #69	; 0x45
 8013dde:	2b02      	cmp	r3, #2
 8013de0:	d8a7      	bhi.n	8013d32 <__ssvfiscanf_r+0xee>
 8013de2:	2305      	movs	r3, #5
 8013de4:	e01b      	b.n	8013e1e <__ssvfiscanf_r+0x1da>
 8013de6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013de8:	4621      	mov	r1, r4
 8013dea:	4630      	mov	r0, r6
 8013dec:	4798      	blx	r3
 8013dee:	2800      	cmp	r0, #0
 8013df0:	f43f af68 	beq.w	8013cc4 <__ssvfiscanf_r+0x80>
 8013df4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013df6:	2800      	cmp	r0, #0
 8013df8:	f040 808d 	bne.w	8013f16 <__ssvfiscanf_r+0x2d2>
 8013dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8013e00:	e08f      	b.n	8013f22 <__ssvfiscanf_r+0x2de>
 8013e02:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013e04:	f042 0220 	orr.w	r2, r2, #32
 8013e08:	9241      	str	r2, [sp, #260]	; 0x104
 8013e0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013e10:	9241      	str	r2, [sp, #260]	; 0x104
 8013e12:	2210      	movs	r2, #16
 8013e14:	2b6f      	cmp	r3, #111	; 0x6f
 8013e16:	9242      	str	r2, [sp, #264]	; 0x108
 8013e18:	bf34      	ite	cc
 8013e1a:	2303      	movcc	r3, #3
 8013e1c:	2304      	movcs	r3, #4
 8013e1e:	9347      	str	r3, [sp, #284]	; 0x11c
 8013e20:	6863      	ldr	r3, [r4, #4]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	dd42      	ble.n	8013eac <__ssvfiscanf_r+0x268>
 8013e26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013e28:	0659      	lsls	r1, r3, #25
 8013e2a:	d404      	bmi.n	8013e36 <__ssvfiscanf_r+0x1f2>
 8013e2c:	6823      	ldr	r3, [r4, #0]
 8013e2e:	781a      	ldrb	r2, [r3, #0]
 8013e30:	5cba      	ldrb	r2, [r7, r2]
 8013e32:	0712      	lsls	r2, r2, #28
 8013e34:	d441      	bmi.n	8013eba <__ssvfiscanf_r+0x276>
 8013e36:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013e38:	2b02      	cmp	r3, #2
 8013e3a:	dc50      	bgt.n	8013ede <__ssvfiscanf_r+0x29a>
 8013e3c:	466b      	mov	r3, sp
 8013e3e:	4622      	mov	r2, r4
 8013e40:	a941      	add	r1, sp, #260	; 0x104
 8013e42:	4630      	mov	r0, r6
 8013e44:	f000 f9d0 	bl	80141e8 <_scanf_chars>
 8013e48:	2801      	cmp	r0, #1
 8013e4a:	d06e      	beq.n	8013f2a <__ssvfiscanf_r+0x2e6>
 8013e4c:	2802      	cmp	r0, #2
 8013e4e:	f47f af20 	bne.w	8013c92 <__ssvfiscanf_r+0x4e>
 8013e52:	e7cf      	b.n	8013df4 <__ssvfiscanf_r+0x1b0>
 8013e54:	220a      	movs	r2, #10
 8013e56:	e7dd      	b.n	8013e14 <__ssvfiscanf_r+0x1d0>
 8013e58:	2300      	movs	r3, #0
 8013e5a:	9342      	str	r3, [sp, #264]	; 0x108
 8013e5c:	2303      	movs	r3, #3
 8013e5e:	e7de      	b.n	8013e1e <__ssvfiscanf_r+0x1da>
 8013e60:	2308      	movs	r3, #8
 8013e62:	9342      	str	r3, [sp, #264]	; 0x108
 8013e64:	2304      	movs	r3, #4
 8013e66:	e7da      	b.n	8013e1e <__ssvfiscanf_r+0x1da>
 8013e68:	4629      	mov	r1, r5
 8013e6a:	4640      	mov	r0, r8
 8013e6c:	f000 fb38 	bl	80144e0 <__sccl>
 8013e70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e76:	9341      	str	r3, [sp, #260]	; 0x104
 8013e78:	4605      	mov	r5, r0
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	e7cf      	b.n	8013e1e <__ssvfiscanf_r+0x1da>
 8013e7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e84:	9341      	str	r3, [sp, #260]	; 0x104
 8013e86:	2300      	movs	r3, #0
 8013e88:	e7c9      	b.n	8013e1e <__ssvfiscanf_r+0x1da>
 8013e8a:	2302      	movs	r3, #2
 8013e8c:	e7c7      	b.n	8013e1e <__ssvfiscanf_r+0x1da>
 8013e8e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013e90:	06c3      	lsls	r3, r0, #27
 8013e92:	f53f aefe 	bmi.w	8013c92 <__ssvfiscanf_r+0x4e>
 8013e96:	9b00      	ldr	r3, [sp, #0]
 8013e98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013e9a:	1d19      	adds	r1, r3, #4
 8013e9c:	9100      	str	r1, [sp, #0]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	f010 0f01 	tst.w	r0, #1
 8013ea4:	bf14      	ite	ne
 8013ea6:	801a      	strhne	r2, [r3, #0]
 8013ea8:	601a      	streq	r2, [r3, #0]
 8013eaa:	e6f2      	b.n	8013c92 <__ssvfiscanf_r+0x4e>
 8013eac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013eae:	4621      	mov	r1, r4
 8013eb0:	4630      	mov	r0, r6
 8013eb2:	4798      	blx	r3
 8013eb4:	2800      	cmp	r0, #0
 8013eb6:	d0b6      	beq.n	8013e26 <__ssvfiscanf_r+0x1e2>
 8013eb8:	e79c      	b.n	8013df4 <__ssvfiscanf_r+0x1b0>
 8013eba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013ebc:	3201      	adds	r2, #1
 8013ebe:	9245      	str	r2, [sp, #276]	; 0x114
 8013ec0:	6862      	ldr	r2, [r4, #4]
 8013ec2:	3a01      	subs	r2, #1
 8013ec4:	2a00      	cmp	r2, #0
 8013ec6:	6062      	str	r2, [r4, #4]
 8013ec8:	dd02      	ble.n	8013ed0 <__ssvfiscanf_r+0x28c>
 8013eca:	3301      	adds	r3, #1
 8013ecc:	6023      	str	r3, [r4, #0]
 8013ece:	e7ad      	b.n	8013e2c <__ssvfiscanf_r+0x1e8>
 8013ed0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013ed2:	4621      	mov	r1, r4
 8013ed4:	4630      	mov	r0, r6
 8013ed6:	4798      	blx	r3
 8013ed8:	2800      	cmp	r0, #0
 8013eda:	d0a7      	beq.n	8013e2c <__ssvfiscanf_r+0x1e8>
 8013edc:	e78a      	b.n	8013df4 <__ssvfiscanf_r+0x1b0>
 8013ede:	2b04      	cmp	r3, #4
 8013ee0:	dc0e      	bgt.n	8013f00 <__ssvfiscanf_r+0x2bc>
 8013ee2:	466b      	mov	r3, sp
 8013ee4:	4622      	mov	r2, r4
 8013ee6:	a941      	add	r1, sp, #260	; 0x104
 8013ee8:	4630      	mov	r0, r6
 8013eea:	f000 f9d7 	bl	801429c <_scanf_i>
 8013eee:	e7ab      	b.n	8013e48 <__ssvfiscanf_r+0x204>
 8013ef0:	08013b91 	.word	0x08013b91
 8013ef4:	08013c0b 	.word	0x08013c0b
 8013ef8:	08016491 	.word	0x08016491
 8013efc:	080167e2 	.word	0x080167e2
 8013f00:	4b0b      	ldr	r3, [pc, #44]	; (8013f30 <__ssvfiscanf_r+0x2ec>)
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	f43f aec5 	beq.w	8013c92 <__ssvfiscanf_r+0x4e>
 8013f08:	466b      	mov	r3, sp
 8013f0a:	4622      	mov	r2, r4
 8013f0c:	a941      	add	r1, sp, #260	; 0x104
 8013f0e:	4630      	mov	r0, r6
 8013f10:	f7fc fb04 	bl	801051c <_scanf_float>
 8013f14:	e798      	b.n	8013e48 <__ssvfiscanf_r+0x204>
 8013f16:	89a3      	ldrh	r3, [r4, #12]
 8013f18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013f1c:	bf18      	it	ne
 8013f1e:	f04f 30ff 	movne.w	r0, #4294967295
 8013f22:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8013f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f2a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013f2c:	e7f9      	b.n	8013f22 <__ssvfiscanf_r+0x2de>
 8013f2e:	bf00      	nop
 8013f30:	0801051d 	.word	0x0801051d

08013f34 <__sfputc_r>:
 8013f34:	6893      	ldr	r3, [r2, #8]
 8013f36:	3b01      	subs	r3, #1
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	b410      	push	{r4}
 8013f3c:	6093      	str	r3, [r2, #8]
 8013f3e:	da08      	bge.n	8013f52 <__sfputc_r+0x1e>
 8013f40:	6994      	ldr	r4, [r2, #24]
 8013f42:	42a3      	cmp	r3, r4
 8013f44:	db01      	blt.n	8013f4a <__sfputc_r+0x16>
 8013f46:	290a      	cmp	r1, #10
 8013f48:	d103      	bne.n	8013f52 <__sfputc_r+0x1e>
 8013f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f4e:	f000 bbc1 	b.w	80146d4 <__swbuf_r>
 8013f52:	6813      	ldr	r3, [r2, #0]
 8013f54:	1c58      	adds	r0, r3, #1
 8013f56:	6010      	str	r0, [r2, #0]
 8013f58:	7019      	strb	r1, [r3, #0]
 8013f5a:	4608      	mov	r0, r1
 8013f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f60:	4770      	bx	lr

08013f62 <__sfputs_r>:
 8013f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f64:	4606      	mov	r6, r0
 8013f66:	460f      	mov	r7, r1
 8013f68:	4614      	mov	r4, r2
 8013f6a:	18d5      	adds	r5, r2, r3
 8013f6c:	42ac      	cmp	r4, r5
 8013f6e:	d101      	bne.n	8013f74 <__sfputs_r+0x12>
 8013f70:	2000      	movs	r0, #0
 8013f72:	e007      	b.n	8013f84 <__sfputs_r+0x22>
 8013f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f78:	463a      	mov	r2, r7
 8013f7a:	4630      	mov	r0, r6
 8013f7c:	f7ff ffda 	bl	8013f34 <__sfputc_r>
 8013f80:	1c43      	adds	r3, r0, #1
 8013f82:	d1f3      	bne.n	8013f6c <__sfputs_r+0xa>
 8013f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013f88 <_vfiprintf_r>:
 8013f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f8c:	460d      	mov	r5, r1
 8013f8e:	b09d      	sub	sp, #116	; 0x74
 8013f90:	4614      	mov	r4, r2
 8013f92:	4698      	mov	r8, r3
 8013f94:	4606      	mov	r6, r0
 8013f96:	b118      	cbz	r0, 8013fa0 <_vfiprintf_r+0x18>
 8013f98:	6983      	ldr	r3, [r0, #24]
 8013f9a:	b90b      	cbnz	r3, 8013fa0 <_vfiprintf_r+0x18>
 8013f9c:	f000 fd8a 	bl	8014ab4 <__sinit>
 8013fa0:	4b89      	ldr	r3, [pc, #548]	; (80141c8 <_vfiprintf_r+0x240>)
 8013fa2:	429d      	cmp	r5, r3
 8013fa4:	d11b      	bne.n	8013fde <_vfiprintf_r+0x56>
 8013fa6:	6875      	ldr	r5, [r6, #4]
 8013fa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013faa:	07d9      	lsls	r1, r3, #31
 8013fac:	d405      	bmi.n	8013fba <_vfiprintf_r+0x32>
 8013fae:	89ab      	ldrh	r3, [r5, #12]
 8013fb0:	059a      	lsls	r2, r3, #22
 8013fb2:	d402      	bmi.n	8013fba <_vfiprintf_r+0x32>
 8013fb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013fb6:	f000 fe1b 	bl	8014bf0 <__retarget_lock_acquire_recursive>
 8013fba:	89ab      	ldrh	r3, [r5, #12]
 8013fbc:	071b      	lsls	r3, r3, #28
 8013fbe:	d501      	bpl.n	8013fc4 <_vfiprintf_r+0x3c>
 8013fc0:	692b      	ldr	r3, [r5, #16]
 8013fc2:	b9eb      	cbnz	r3, 8014000 <_vfiprintf_r+0x78>
 8013fc4:	4629      	mov	r1, r5
 8013fc6:	4630      	mov	r0, r6
 8013fc8:	f000 fbe4 	bl	8014794 <__swsetup_r>
 8013fcc:	b1c0      	cbz	r0, 8014000 <_vfiprintf_r+0x78>
 8013fce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013fd0:	07dc      	lsls	r4, r3, #31
 8013fd2:	d50e      	bpl.n	8013ff2 <_vfiprintf_r+0x6a>
 8013fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8013fd8:	b01d      	add	sp, #116	; 0x74
 8013fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fde:	4b7b      	ldr	r3, [pc, #492]	; (80141cc <_vfiprintf_r+0x244>)
 8013fe0:	429d      	cmp	r5, r3
 8013fe2:	d101      	bne.n	8013fe8 <_vfiprintf_r+0x60>
 8013fe4:	68b5      	ldr	r5, [r6, #8]
 8013fe6:	e7df      	b.n	8013fa8 <_vfiprintf_r+0x20>
 8013fe8:	4b79      	ldr	r3, [pc, #484]	; (80141d0 <_vfiprintf_r+0x248>)
 8013fea:	429d      	cmp	r5, r3
 8013fec:	bf08      	it	eq
 8013fee:	68f5      	ldreq	r5, [r6, #12]
 8013ff0:	e7da      	b.n	8013fa8 <_vfiprintf_r+0x20>
 8013ff2:	89ab      	ldrh	r3, [r5, #12]
 8013ff4:	0598      	lsls	r0, r3, #22
 8013ff6:	d4ed      	bmi.n	8013fd4 <_vfiprintf_r+0x4c>
 8013ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013ffa:	f000 fdfa 	bl	8014bf2 <__retarget_lock_release_recursive>
 8013ffe:	e7e9      	b.n	8013fd4 <_vfiprintf_r+0x4c>
 8014000:	2300      	movs	r3, #0
 8014002:	9309      	str	r3, [sp, #36]	; 0x24
 8014004:	2320      	movs	r3, #32
 8014006:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801400a:	f8cd 800c 	str.w	r8, [sp, #12]
 801400e:	2330      	movs	r3, #48	; 0x30
 8014010:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80141d4 <_vfiprintf_r+0x24c>
 8014014:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014018:	f04f 0901 	mov.w	r9, #1
 801401c:	4623      	mov	r3, r4
 801401e:	469a      	mov	sl, r3
 8014020:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014024:	b10a      	cbz	r2, 801402a <_vfiprintf_r+0xa2>
 8014026:	2a25      	cmp	r2, #37	; 0x25
 8014028:	d1f9      	bne.n	801401e <_vfiprintf_r+0x96>
 801402a:	ebba 0b04 	subs.w	fp, sl, r4
 801402e:	d00b      	beq.n	8014048 <_vfiprintf_r+0xc0>
 8014030:	465b      	mov	r3, fp
 8014032:	4622      	mov	r2, r4
 8014034:	4629      	mov	r1, r5
 8014036:	4630      	mov	r0, r6
 8014038:	f7ff ff93 	bl	8013f62 <__sfputs_r>
 801403c:	3001      	adds	r0, #1
 801403e:	f000 80aa 	beq.w	8014196 <_vfiprintf_r+0x20e>
 8014042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014044:	445a      	add	r2, fp
 8014046:	9209      	str	r2, [sp, #36]	; 0x24
 8014048:	f89a 3000 	ldrb.w	r3, [sl]
 801404c:	2b00      	cmp	r3, #0
 801404e:	f000 80a2 	beq.w	8014196 <_vfiprintf_r+0x20e>
 8014052:	2300      	movs	r3, #0
 8014054:	f04f 32ff 	mov.w	r2, #4294967295
 8014058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801405c:	f10a 0a01 	add.w	sl, sl, #1
 8014060:	9304      	str	r3, [sp, #16]
 8014062:	9307      	str	r3, [sp, #28]
 8014064:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014068:	931a      	str	r3, [sp, #104]	; 0x68
 801406a:	4654      	mov	r4, sl
 801406c:	2205      	movs	r2, #5
 801406e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014072:	4858      	ldr	r0, [pc, #352]	; (80141d4 <_vfiprintf_r+0x24c>)
 8014074:	f7ec f8e4 	bl	8000240 <memchr>
 8014078:	9a04      	ldr	r2, [sp, #16]
 801407a:	b9d8      	cbnz	r0, 80140b4 <_vfiprintf_r+0x12c>
 801407c:	06d1      	lsls	r1, r2, #27
 801407e:	bf44      	itt	mi
 8014080:	2320      	movmi	r3, #32
 8014082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014086:	0713      	lsls	r3, r2, #28
 8014088:	bf44      	itt	mi
 801408a:	232b      	movmi	r3, #43	; 0x2b
 801408c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014090:	f89a 3000 	ldrb.w	r3, [sl]
 8014094:	2b2a      	cmp	r3, #42	; 0x2a
 8014096:	d015      	beq.n	80140c4 <_vfiprintf_r+0x13c>
 8014098:	9a07      	ldr	r2, [sp, #28]
 801409a:	4654      	mov	r4, sl
 801409c:	2000      	movs	r0, #0
 801409e:	f04f 0c0a 	mov.w	ip, #10
 80140a2:	4621      	mov	r1, r4
 80140a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80140a8:	3b30      	subs	r3, #48	; 0x30
 80140aa:	2b09      	cmp	r3, #9
 80140ac:	d94e      	bls.n	801414c <_vfiprintf_r+0x1c4>
 80140ae:	b1b0      	cbz	r0, 80140de <_vfiprintf_r+0x156>
 80140b0:	9207      	str	r2, [sp, #28]
 80140b2:	e014      	b.n	80140de <_vfiprintf_r+0x156>
 80140b4:	eba0 0308 	sub.w	r3, r0, r8
 80140b8:	fa09 f303 	lsl.w	r3, r9, r3
 80140bc:	4313      	orrs	r3, r2
 80140be:	9304      	str	r3, [sp, #16]
 80140c0:	46a2      	mov	sl, r4
 80140c2:	e7d2      	b.n	801406a <_vfiprintf_r+0xe2>
 80140c4:	9b03      	ldr	r3, [sp, #12]
 80140c6:	1d19      	adds	r1, r3, #4
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	9103      	str	r1, [sp, #12]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	bfbb      	ittet	lt
 80140d0:	425b      	neglt	r3, r3
 80140d2:	f042 0202 	orrlt.w	r2, r2, #2
 80140d6:	9307      	strge	r3, [sp, #28]
 80140d8:	9307      	strlt	r3, [sp, #28]
 80140da:	bfb8      	it	lt
 80140dc:	9204      	strlt	r2, [sp, #16]
 80140de:	7823      	ldrb	r3, [r4, #0]
 80140e0:	2b2e      	cmp	r3, #46	; 0x2e
 80140e2:	d10c      	bne.n	80140fe <_vfiprintf_r+0x176>
 80140e4:	7863      	ldrb	r3, [r4, #1]
 80140e6:	2b2a      	cmp	r3, #42	; 0x2a
 80140e8:	d135      	bne.n	8014156 <_vfiprintf_r+0x1ce>
 80140ea:	9b03      	ldr	r3, [sp, #12]
 80140ec:	1d1a      	adds	r2, r3, #4
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	9203      	str	r2, [sp, #12]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	bfb8      	it	lt
 80140f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80140fa:	3402      	adds	r4, #2
 80140fc:	9305      	str	r3, [sp, #20]
 80140fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80141e4 <_vfiprintf_r+0x25c>
 8014102:	7821      	ldrb	r1, [r4, #0]
 8014104:	2203      	movs	r2, #3
 8014106:	4650      	mov	r0, sl
 8014108:	f7ec f89a 	bl	8000240 <memchr>
 801410c:	b140      	cbz	r0, 8014120 <_vfiprintf_r+0x198>
 801410e:	2340      	movs	r3, #64	; 0x40
 8014110:	eba0 000a 	sub.w	r0, r0, sl
 8014114:	fa03 f000 	lsl.w	r0, r3, r0
 8014118:	9b04      	ldr	r3, [sp, #16]
 801411a:	4303      	orrs	r3, r0
 801411c:	3401      	adds	r4, #1
 801411e:	9304      	str	r3, [sp, #16]
 8014120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014124:	482c      	ldr	r0, [pc, #176]	; (80141d8 <_vfiprintf_r+0x250>)
 8014126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801412a:	2206      	movs	r2, #6
 801412c:	f7ec f888 	bl	8000240 <memchr>
 8014130:	2800      	cmp	r0, #0
 8014132:	d03f      	beq.n	80141b4 <_vfiprintf_r+0x22c>
 8014134:	4b29      	ldr	r3, [pc, #164]	; (80141dc <_vfiprintf_r+0x254>)
 8014136:	bb1b      	cbnz	r3, 8014180 <_vfiprintf_r+0x1f8>
 8014138:	9b03      	ldr	r3, [sp, #12]
 801413a:	3307      	adds	r3, #7
 801413c:	f023 0307 	bic.w	r3, r3, #7
 8014140:	3308      	adds	r3, #8
 8014142:	9303      	str	r3, [sp, #12]
 8014144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014146:	443b      	add	r3, r7
 8014148:	9309      	str	r3, [sp, #36]	; 0x24
 801414a:	e767      	b.n	801401c <_vfiprintf_r+0x94>
 801414c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014150:	460c      	mov	r4, r1
 8014152:	2001      	movs	r0, #1
 8014154:	e7a5      	b.n	80140a2 <_vfiprintf_r+0x11a>
 8014156:	2300      	movs	r3, #0
 8014158:	3401      	adds	r4, #1
 801415a:	9305      	str	r3, [sp, #20]
 801415c:	4619      	mov	r1, r3
 801415e:	f04f 0c0a 	mov.w	ip, #10
 8014162:	4620      	mov	r0, r4
 8014164:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014168:	3a30      	subs	r2, #48	; 0x30
 801416a:	2a09      	cmp	r2, #9
 801416c:	d903      	bls.n	8014176 <_vfiprintf_r+0x1ee>
 801416e:	2b00      	cmp	r3, #0
 8014170:	d0c5      	beq.n	80140fe <_vfiprintf_r+0x176>
 8014172:	9105      	str	r1, [sp, #20]
 8014174:	e7c3      	b.n	80140fe <_vfiprintf_r+0x176>
 8014176:	fb0c 2101 	mla	r1, ip, r1, r2
 801417a:	4604      	mov	r4, r0
 801417c:	2301      	movs	r3, #1
 801417e:	e7f0      	b.n	8014162 <_vfiprintf_r+0x1da>
 8014180:	ab03      	add	r3, sp, #12
 8014182:	9300      	str	r3, [sp, #0]
 8014184:	462a      	mov	r2, r5
 8014186:	4b16      	ldr	r3, [pc, #88]	; (80141e0 <_vfiprintf_r+0x258>)
 8014188:	a904      	add	r1, sp, #16
 801418a:	4630      	mov	r0, r6
 801418c:	f7fb fdfc 	bl	800fd88 <_printf_float>
 8014190:	4607      	mov	r7, r0
 8014192:	1c78      	adds	r0, r7, #1
 8014194:	d1d6      	bne.n	8014144 <_vfiprintf_r+0x1bc>
 8014196:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014198:	07d9      	lsls	r1, r3, #31
 801419a:	d405      	bmi.n	80141a8 <_vfiprintf_r+0x220>
 801419c:	89ab      	ldrh	r3, [r5, #12]
 801419e:	059a      	lsls	r2, r3, #22
 80141a0:	d402      	bmi.n	80141a8 <_vfiprintf_r+0x220>
 80141a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80141a4:	f000 fd25 	bl	8014bf2 <__retarget_lock_release_recursive>
 80141a8:	89ab      	ldrh	r3, [r5, #12]
 80141aa:	065b      	lsls	r3, r3, #25
 80141ac:	f53f af12 	bmi.w	8013fd4 <_vfiprintf_r+0x4c>
 80141b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141b2:	e711      	b.n	8013fd8 <_vfiprintf_r+0x50>
 80141b4:	ab03      	add	r3, sp, #12
 80141b6:	9300      	str	r3, [sp, #0]
 80141b8:	462a      	mov	r2, r5
 80141ba:	4b09      	ldr	r3, [pc, #36]	; (80141e0 <_vfiprintf_r+0x258>)
 80141bc:	a904      	add	r1, sp, #16
 80141be:	4630      	mov	r0, r6
 80141c0:	f7fc f886 	bl	80102d0 <_printf_i>
 80141c4:	e7e4      	b.n	8014190 <_vfiprintf_r+0x208>
 80141c6:	bf00      	nop
 80141c8:	08016828 	.word	0x08016828
 80141cc:	08016848 	.word	0x08016848
 80141d0:	08016808 	.word	0x08016808
 80141d4:	080167dc 	.word	0x080167dc
 80141d8:	080167e6 	.word	0x080167e6
 80141dc:	0800fd89 	.word	0x0800fd89
 80141e0:	08013f63 	.word	0x08013f63
 80141e4:	080167e2 	.word	0x080167e2

080141e8 <_scanf_chars>:
 80141e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141ec:	4615      	mov	r5, r2
 80141ee:	688a      	ldr	r2, [r1, #8]
 80141f0:	4680      	mov	r8, r0
 80141f2:	460c      	mov	r4, r1
 80141f4:	b932      	cbnz	r2, 8014204 <_scanf_chars+0x1c>
 80141f6:	698a      	ldr	r2, [r1, #24]
 80141f8:	2a00      	cmp	r2, #0
 80141fa:	bf0c      	ite	eq
 80141fc:	2201      	moveq	r2, #1
 80141fe:	f04f 32ff 	movne.w	r2, #4294967295
 8014202:	608a      	str	r2, [r1, #8]
 8014204:	6822      	ldr	r2, [r4, #0]
 8014206:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8014298 <_scanf_chars+0xb0>
 801420a:	06d1      	lsls	r1, r2, #27
 801420c:	bf5f      	itttt	pl
 801420e:	681a      	ldrpl	r2, [r3, #0]
 8014210:	1d11      	addpl	r1, r2, #4
 8014212:	6019      	strpl	r1, [r3, #0]
 8014214:	6816      	ldrpl	r6, [r2, #0]
 8014216:	2700      	movs	r7, #0
 8014218:	69a0      	ldr	r0, [r4, #24]
 801421a:	b188      	cbz	r0, 8014240 <_scanf_chars+0x58>
 801421c:	2801      	cmp	r0, #1
 801421e:	d107      	bne.n	8014230 <_scanf_chars+0x48>
 8014220:	682a      	ldr	r2, [r5, #0]
 8014222:	7811      	ldrb	r1, [r2, #0]
 8014224:	6962      	ldr	r2, [r4, #20]
 8014226:	5c52      	ldrb	r2, [r2, r1]
 8014228:	b952      	cbnz	r2, 8014240 <_scanf_chars+0x58>
 801422a:	2f00      	cmp	r7, #0
 801422c:	d031      	beq.n	8014292 <_scanf_chars+0xaa>
 801422e:	e022      	b.n	8014276 <_scanf_chars+0x8e>
 8014230:	2802      	cmp	r0, #2
 8014232:	d120      	bne.n	8014276 <_scanf_chars+0x8e>
 8014234:	682b      	ldr	r3, [r5, #0]
 8014236:	781b      	ldrb	r3, [r3, #0]
 8014238:	f813 3009 	ldrb.w	r3, [r3, r9]
 801423c:	071b      	lsls	r3, r3, #28
 801423e:	d41a      	bmi.n	8014276 <_scanf_chars+0x8e>
 8014240:	6823      	ldr	r3, [r4, #0]
 8014242:	06da      	lsls	r2, r3, #27
 8014244:	bf5e      	ittt	pl
 8014246:	682b      	ldrpl	r3, [r5, #0]
 8014248:	781b      	ldrbpl	r3, [r3, #0]
 801424a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801424e:	682a      	ldr	r2, [r5, #0]
 8014250:	686b      	ldr	r3, [r5, #4]
 8014252:	3201      	adds	r2, #1
 8014254:	602a      	str	r2, [r5, #0]
 8014256:	68a2      	ldr	r2, [r4, #8]
 8014258:	3b01      	subs	r3, #1
 801425a:	3a01      	subs	r2, #1
 801425c:	606b      	str	r3, [r5, #4]
 801425e:	3701      	adds	r7, #1
 8014260:	60a2      	str	r2, [r4, #8]
 8014262:	b142      	cbz	r2, 8014276 <_scanf_chars+0x8e>
 8014264:	2b00      	cmp	r3, #0
 8014266:	dcd7      	bgt.n	8014218 <_scanf_chars+0x30>
 8014268:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801426c:	4629      	mov	r1, r5
 801426e:	4640      	mov	r0, r8
 8014270:	4798      	blx	r3
 8014272:	2800      	cmp	r0, #0
 8014274:	d0d0      	beq.n	8014218 <_scanf_chars+0x30>
 8014276:	6823      	ldr	r3, [r4, #0]
 8014278:	f013 0310 	ands.w	r3, r3, #16
 801427c:	d105      	bne.n	801428a <_scanf_chars+0xa2>
 801427e:	68e2      	ldr	r2, [r4, #12]
 8014280:	3201      	adds	r2, #1
 8014282:	60e2      	str	r2, [r4, #12]
 8014284:	69a2      	ldr	r2, [r4, #24]
 8014286:	b102      	cbz	r2, 801428a <_scanf_chars+0xa2>
 8014288:	7033      	strb	r3, [r6, #0]
 801428a:	6923      	ldr	r3, [r4, #16]
 801428c:	443b      	add	r3, r7
 801428e:	6123      	str	r3, [r4, #16]
 8014290:	2000      	movs	r0, #0
 8014292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014296:	bf00      	nop
 8014298:	08016491 	.word	0x08016491

0801429c <_scanf_i>:
 801429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142a0:	4698      	mov	r8, r3
 80142a2:	4b76      	ldr	r3, [pc, #472]	; (801447c <_scanf_i+0x1e0>)
 80142a4:	460c      	mov	r4, r1
 80142a6:	4682      	mov	sl, r0
 80142a8:	4616      	mov	r6, r2
 80142aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80142ae:	b087      	sub	sp, #28
 80142b0:	ab03      	add	r3, sp, #12
 80142b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80142b6:	4b72      	ldr	r3, [pc, #456]	; (8014480 <_scanf_i+0x1e4>)
 80142b8:	69a1      	ldr	r1, [r4, #24]
 80142ba:	4a72      	ldr	r2, [pc, #456]	; (8014484 <_scanf_i+0x1e8>)
 80142bc:	2903      	cmp	r1, #3
 80142be:	bf18      	it	ne
 80142c0:	461a      	movne	r2, r3
 80142c2:	68a3      	ldr	r3, [r4, #8]
 80142c4:	9201      	str	r2, [sp, #4]
 80142c6:	1e5a      	subs	r2, r3, #1
 80142c8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80142cc:	bf88      	it	hi
 80142ce:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80142d2:	4627      	mov	r7, r4
 80142d4:	bf82      	ittt	hi
 80142d6:	eb03 0905 	addhi.w	r9, r3, r5
 80142da:	f240 135d 	movwhi	r3, #349	; 0x15d
 80142de:	60a3      	strhi	r3, [r4, #8]
 80142e0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80142e4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80142e8:	bf98      	it	ls
 80142ea:	f04f 0900 	movls.w	r9, #0
 80142ee:	6023      	str	r3, [r4, #0]
 80142f0:	463d      	mov	r5, r7
 80142f2:	f04f 0b00 	mov.w	fp, #0
 80142f6:	6831      	ldr	r1, [r6, #0]
 80142f8:	ab03      	add	r3, sp, #12
 80142fa:	7809      	ldrb	r1, [r1, #0]
 80142fc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014300:	2202      	movs	r2, #2
 8014302:	f7eb ff9d 	bl	8000240 <memchr>
 8014306:	b328      	cbz	r0, 8014354 <_scanf_i+0xb8>
 8014308:	f1bb 0f01 	cmp.w	fp, #1
 801430c:	d159      	bne.n	80143c2 <_scanf_i+0x126>
 801430e:	6862      	ldr	r2, [r4, #4]
 8014310:	b92a      	cbnz	r2, 801431e <_scanf_i+0x82>
 8014312:	6822      	ldr	r2, [r4, #0]
 8014314:	2308      	movs	r3, #8
 8014316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801431a:	6063      	str	r3, [r4, #4]
 801431c:	6022      	str	r2, [r4, #0]
 801431e:	6822      	ldr	r2, [r4, #0]
 8014320:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8014324:	6022      	str	r2, [r4, #0]
 8014326:	68a2      	ldr	r2, [r4, #8]
 8014328:	1e51      	subs	r1, r2, #1
 801432a:	60a1      	str	r1, [r4, #8]
 801432c:	b192      	cbz	r2, 8014354 <_scanf_i+0xb8>
 801432e:	6832      	ldr	r2, [r6, #0]
 8014330:	1c51      	adds	r1, r2, #1
 8014332:	6031      	str	r1, [r6, #0]
 8014334:	7812      	ldrb	r2, [r2, #0]
 8014336:	f805 2b01 	strb.w	r2, [r5], #1
 801433a:	6872      	ldr	r2, [r6, #4]
 801433c:	3a01      	subs	r2, #1
 801433e:	2a00      	cmp	r2, #0
 8014340:	6072      	str	r2, [r6, #4]
 8014342:	dc07      	bgt.n	8014354 <_scanf_i+0xb8>
 8014344:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014348:	4631      	mov	r1, r6
 801434a:	4650      	mov	r0, sl
 801434c:	4790      	blx	r2
 801434e:	2800      	cmp	r0, #0
 8014350:	f040 8085 	bne.w	801445e <_scanf_i+0x1c2>
 8014354:	f10b 0b01 	add.w	fp, fp, #1
 8014358:	f1bb 0f03 	cmp.w	fp, #3
 801435c:	d1cb      	bne.n	80142f6 <_scanf_i+0x5a>
 801435e:	6863      	ldr	r3, [r4, #4]
 8014360:	b90b      	cbnz	r3, 8014366 <_scanf_i+0xca>
 8014362:	230a      	movs	r3, #10
 8014364:	6063      	str	r3, [r4, #4]
 8014366:	6863      	ldr	r3, [r4, #4]
 8014368:	4947      	ldr	r1, [pc, #284]	; (8014488 <_scanf_i+0x1ec>)
 801436a:	6960      	ldr	r0, [r4, #20]
 801436c:	1ac9      	subs	r1, r1, r3
 801436e:	f000 f8b7 	bl	80144e0 <__sccl>
 8014372:	f04f 0b00 	mov.w	fp, #0
 8014376:	68a3      	ldr	r3, [r4, #8]
 8014378:	6822      	ldr	r2, [r4, #0]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d03d      	beq.n	80143fa <_scanf_i+0x15e>
 801437e:	6831      	ldr	r1, [r6, #0]
 8014380:	6960      	ldr	r0, [r4, #20]
 8014382:	f891 c000 	ldrb.w	ip, [r1]
 8014386:	f810 000c 	ldrb.w	r0, [r0, ip]
 801438a:	2800      	cmp	r0, #0
 801438c:	d035      	beq.n	80143fa <_scanf_i+0x15e>
 801438e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8014392:	d124      	bne.n	80143de <_scanf_i+0x142>
 8014394:	0510      	lsls	r0, r2, #20
 8014396:	d522      	bpl.n	80143de <_scanf_i+0x142>
 8014398:	f10b 0b01 	add.w	fp, fp, #1
 801439c:	f1b9 0f00 	cmp.w	r9, #0
 80143a0:	d003      	beq.n	80143aa <_scanf_i+0x10e>
 80143a2:	3301      	adds	r3, #1
 80143a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80143a8:	60a3      	str	r3, [r4, #8]
 80143aa:	6873      	ldr	r3, [r6, #4]
 80143ac:	3b01      	subs	r3, #1
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	6073      	str	r3, [r6, #4]
 80143b2:	dd1b      	ble.n	80143ec <_scanf_i+0x150>
 80143b4:	6833      	ldr	r3, [r6, #0]
 80143b6:	3301      	adds	r3, #1
 80143b8:	6033      	str	r3, [r6, #0]
 80143ba:	68a3      	ldr	r3, [r4, #8]
 80143bc:	3b01      	subs	r3, #1
 80143be:	60a3      	str	r3, [r4, #8]
 80143c0:	e7d9      	b.n	8014376 <_scanf_i+0xda>
 80143c2:	f1bb 0f02 	cmp.w	fp, #2
 80143c6:	d1ae      	bne.n	8014326 <_scanf_i+0x8a>
 80143c8:	6822      	ldr	r2, [r4, #0]
 80143ca:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80143ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80143d2:	d1bf      	bne.n	8014354 <_scanf_i+0xb8>
 80143d4:	2310      	movs	r3, #16
 80143d6:	6063      	str	r3, [r4, #4]
 80143d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80143dc:	e7a2      	b.n	8014324 <_scanf_i+0x88>
 80143de:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80143e2:	6022      	str	r2, [r4, #0]
 80143e4:	780b      	ldrb	r3, [r1, #0]
 80143e6:	f805 3b01 	strb.w	r3, [r5], #1
 80143ea:	e7de      	b.n	80143aa <_scanf_i+0x10e>
 80143ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80143f0:	4631      	mov	r1, r6
 80143f2:	4650      	mov	r0, sl
 80143f4:	4798      	blx	r3
 80143f6:	2800      	cmp	r0, #0
 80143f8:	d0df      	beq.n	80143ba <_scanf_i+0x11e>
 80143fa:	6823      	ldr	r3, [r4, #0]
 80143fc:	05db      	lsls	r3, r3, #23
 80143fe:	d50d      	bpl.n	801441c <_scanf_i+0x180>
 8014400:	42bd      	cmp	r5, r7
 8014402:	d909      	bls.n	8014418 <_scanf_i+0x17c>
 8014404:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014408:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801440c:	4632      	mov	r2, r6
 801440e:	4650      	mov	r0, sl
 8014410:	4798      	blx	r3
 8014412:	f105 39ff 	add.w	r9, r5, #4294967295
 8014416:	464d      	mov	r5, r9
 8014418:	42bd      	cmp	r5, r7
 801441a:	d02d      	beq.n	8014478 <_scanf_i+0x1dc>
 801441c:	6822      	ldr	r2, [r4, #0]
 801441e:	f012 0210 	ands.w	r2, r2, #16
 8014422:	d113      	bne.n	801444c <_scanf_i+0x1b0>
 8014424:	702a      	strb	r2, [r5, #0]
 8014426:	6863      	ldr	r3, [r4, #4]
 8014428:	9e01      	ldr	r6, [sp, #4]
 801442a:	4639      	mov	r1, r7
 801442c:	4650      	mov	r0, sl
 801442e:	47b0      	blx	r6
 8014430:	6821      	ldr	r1, [r4, #0]
 8014432:	f8d8 3000 	ldr.w	r3, [r8]
 8014436:	f011 0f20 	tst.w	r1, #32
 801443a:	d013      	beq.n	8014464 <_scanf_i+0x1c8>
 801443c:	1d1a      	adds	r2, r3, #4
 801443e:	f8c8 2000 	str.w	r2, [r8]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	6018      	str	r0, [r3, #0]
 8014446:	68e3      	ldr	r3, [r4, #12]
 8014448:	3301      	adds	r3, #1
 801444a:	60e3      	str	r3, [r4, #12]
 801444c:	1bed      	subs	r5, r5, r7
 801444e:	44ab      	add	fp, r5
 8014450:	6925      	ldr	r5, [r4, #16]
 8014452:	445d      	add	r5, fp
 8014454:	6125      	str	r5, [r4, #16]
 8014456:	2000      	movs	r0, #0
 8014458:	b007      	add	sp, #28
 801445a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801445e:	f04f 0b00 	mov.w	fp, #0
 8014462:	e7ca      	b.n	80143fa <_scanf_i+0x15e>
 8014464:	1d1a      	adds	r2, r3, #4
 8014466:	f8c8 2000 	str.w	r2, [r8]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	f011 0f01 	tst.w	r1, #1
 8014470:	bf14      	ite	ne
 8014472:	8018      	strhne	r0, [r3, #0]
 8014474:	6018      	streq	r0, [r3, #0]
 8014476:	e7e6      	b.n	8014446 <_scanf_i+0x1aa>
 8014478:	2001      	movs	r0, #1
 801447a:	e7ed      	b.n	8014458 <_scanf_i+0x1bc>
 801447c:	08016330 	.word	0x08016330
 8014480:	0801465d 	.word	0x0801465d
 8014484:	0801188d 	.word	0x0801188d
 8014488:	08016806 	.word	0x08016806

0801448c <_read_r>:
 801448c:	b538      	push	{r3, r4, r5, lr}
 801448e:	4d07      	ldr	r5, [pc, #28]	; (80144ac <_read_r+0x20>)
 8014490:	4604      	mov	r4, r0
 8014492:	4608      	mov	r0, r1
 8014494:	4611      	mov	r1, r2
 8014496:	2200      	movs	r2, #0
 8014498:	602a      	str	r2, [r5, #0]
 801449a:	461a      	mov	r2, r3
 801449c:	f7ee fb4c 	bl	8002b38 <_read>
 80144a0:	1c43      	adds	r3, r0, #1
 80144a2:	d102      	bne.n	80144aa <_read_r+0x1e>
 80144a4:	682b      	ldr	r3, [r5, #0]
 80144a6:	b103      	cbz	r3, 80144aa <_read_r+0x1e>
 80144a8:	6023      	str	r3, [r4, #0]
 80144aa:	bd38      	pop	{r3, r4, r5, pc}
 80144ac:	2000b688 	.word	0x2000b688

080144b0 <nan>:
 80144b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80144b8 <nan+0x8>
 80144b4:	4770      	bx	lr
 80144b6:	bf00      	nop
 80144b8:	00000000 	.word	0x00000000
 80144bc:	7ff80000 	.word	0x7ff80000

080144c0 <_sbrk_r>:
 80144c0:	b538      	push	{r3, r4, r5, lr}
 80144c2:	4d06      	ldr	r5, [pc, #24]	; (80144dc <_sbrk_r+0x1c>)
 80144c4:	2300      	movs	r3, #0
 80144c6:	4604      	mov	r4, r0
 80144c8:	4608      	mov	r0, r1
 80144ca:	602b      	str	r3, [r5, #0]
 80144cc:	f7ee fba2 	bl	8002c14 <_sbrk>
 80144d0:	1c43      	adds	r3, r0, #1
 80144d2:	d102      	bne.n	80144da <_sbrk_r+0x1a>
 80144d4:	682b      	ldr	r3, [r5, #0]
 80144d6:	b103      	cbz	r3, 80144da <_sbrk_r+0x1a>
 80144d8:	6023      	str	r3, [r4, #0]
 80144da:	bd38      	pop	{r3, r4, r5, pc}
 80144dc:	2000b688 	.word	0x2000b688

080144e0 <__sccl>:
 80144e0:	b570      	push	{r4, r5, r6, lr}
 80144e2:	780b      	ldrb	r3, [r1, #0]
 80144e4:	4604      	mov	r4, r0
 80144e6:	2b5e      	cmp	r3, #94	; 0x5e
 80144e8:	bf0b      	itete	eq
 80144ea:	784b      	ldrbeq	r3, [r1, #1]
 80144ec:	1c48      	addne	r0, r1, #1
 80144ee:	1c88      	addeq	r0, r1, #2
 80144f0:	2200      	movne	r2, #0
 80144f2:	bf08      	it	eq
 80144f4:	2201      	moveq	r2, #1
 80144f6:	1e61      	subs	r1, r4, #1
 80144f8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80144fc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014500:	42a9      	cmp	r1, r5
 8014502:	d1fb      	bne.n	80144fc <__sccl+0x1c>
 8014504:	b90b      	cbnz	r3, 801450a <__sccl+0x2a>
 8014506:	3801      	subs	r0, #1
 8014508:	bd70      	pop	{r4, r5, r6, pc}
 801450a:	f082 0201 	eor.w	r2, r2, #1
 801450e:	54e2      	strb	r2, [r4, r3]
 8014510:	4605      	mov	r5, r0
 8014512:	4628      	mov	r0, r5
 8014514:	f810 1b01 	ldrb.w	r1, [r0], #1
 8014518:	292d      	cmp	r1, #45	; 0x2d
 801451a:	d006      	beq.n	801452a <__sccl+0x4a>
 801451c:	295d      	cmp	r1, #93	; 0x5d
 801451e:	d0f3      	beq.n	8014508 <__sccl+0x28>
 8014520:	b909      	cbnz	r1, 8014526 <__sccl+0x46>
 8014522:	4628      	mov	r0, r5
 8014524:	e7f0      	b.n	8014508 <__sccl+0x28>
 8014526:	460b      	mov	r3, r1
 8014528:	e7f1      	b.n	801450e <__sccl+0x2e>
 801452a:	786e      	ldrb	r6, [r5, #1]
 801452c:	2e5d      	cmp	r6, #93	; 0x5d
 801452e:	d0fa      	beq.n	8014526 <__sccl+0x46>
 8014530:	42b3      	cmp	r3, r6
 8014532:	dcf8      	bgt.n	8014526 <__sccl+0x46>
 8014534:	3502      	adds	r5, #2
 8014536:	4619      	mov	r1, r3
 8014538:	3101      	adds	r1, #1
 801453a:	428e      	cmp	r6, r1
 801453c:	5462      	strb	r2, [r4, r1]
 801453e:	dcfb      	bgt.n	8014538 <__sccl+0x58>
 8014540:	1af1      	subs	r1, r6, r3
 8014542:	3901      	subs	r1, #1
 8014544:	1c58      	adds	r0, r3, #1
 8014546:	42b3      	cmp	r3, r6
 8014548:	bfa8      	it	ge
 801454a:	2100      	movge	r1, #0
 801454c:	1843      	adds	r3, r0, r1
 801454e:	e7e0      	b.n	8014512 <__sccl+0x32>

08014550 <strncmp>:
 8014550:	b510      	push	{r4, lr}
 8014552:	b17a      	cbz	r2, 8014574 <strncmp+0x24>
 8014554:	4603      	mov	r3, r0
 8014556:	3901      	subs	r1, #1
 8014558:	1884      	adds	r4, r0, r2
 801455a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801455e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014562:	4290      	cmp	r0, r2
 8014564:	d101      	bne.n	801456a <strncmp+0x1a>
 8014566:	42a3      	cmp	r3, r4
 8014568:	d101      	bne.n	801456e <strncmp+0x1e>
 801456a:	1a80      	subs	r0, r0, r2
 801456c:	bd10      	pop	{r4, pc}
 801456e:	2800      	cmp	r0, #0
 8014570:	d1f3      	bne.n	801455a <strncmp+0xa>
 8014572:	e7fa      	b.n	801456a <strncmp+0x1a>
 8014574:	4610      	mov	r0, r2
 8014576:	e7f9      	b.n	801456c <strncmp+0x1c>

08014578 <_strtoul_l.constprop.0>:
 8014578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801457c:	4f36      	ldr	r7, [pc, #216]	; (8014658 <_strtoul_l.constprop.0+0xe0>)
 801457e:	4686      	mov	lr, r0
 8014580:	460d      	mov	r5, r1
 8014582:	4628      	mov	r0, r5
 8014584:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014588:	5de6      	ldrb	r6, [r4, r7]
 801458a:	f016 0608 	ands.w	r6, r6, #8
 801458e:	d1f8      	bne.n	8014582 <_strtoul_l.constprop.0+0xa>
 8014590:	2c2d      	cmp	r4, #45	; 0x2d
 8014592:	d12f      	bne.n	80145f4 <_strtoul_l.constprop.0+0x7c>
 8014594:	782c      	ldrb	r4, [r5, #0]
 8014596:	2601      	movs	r6, #1
 8014598:	1c85      	adds	r5, r0, #2
 801459a:	2b00      	cmp	r3, #0
 801459c:	d057      	beq.n	801464e <_strtoul_l.constprop.0+0xd6>
 801459e:	2b10      	cmp	r3, #16
 80145a0:	d109      	bne.n	80145b6 <_strtoul_l.constprop.0+0x3e>
 80145a2:	2c30      	cmp	r4, #48	; 0x30
 80145a4:	d107      	bne.n	80145b6 <_strtoul_l.constprop.0+0x3e>
 80145a6:	7828      	ldrb	r0, [r5, #0]
 80145a8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80145ac:	2858      	cmp	r0, #88	; 0x58
 80145ae:	d149      	bne.n	8014644 <_strtoul_l.constprop.0+0xcc>
 80145b0:	786c      	ldrb	r4, [r5, #1]
 80145b2:	2310      	movs	r3, #16
 80145b4:	3502      	adds	r5, #2
 80145b6:	f04f 38ff 	mov.w	r8, #4294967295
 80145ba:	2700      	movs	r7, #0
 80145bc:	fbb8 f8f3 	udiv	r8, r8, r3
 80145c0:	fb03 f908 	mul.w	r9, r3, r8
 80145c4:	ea6f 0909 	mvn.w	r9, r9
 80145c8:	4638      	mov	r0, r7
 80145ca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80145ce:	f1bc 0f09 	cmp.w	ip, #9
 80145d2:	d814      	bhi.n	80145fe <_strtoul_l.constprop.0+0x86>
 80145d4:	4664      	mov	r4, ip
 80145d6:	42a3      	cmp	r3, r4
 80145d8:	dd22      	ble.n	8014620 <_strtoul_l.constprop.0+0xa8>
 80145da:	2f00      	cmp	r7, #0
 80145dc:	db1d      	blt.n	801461a <_strtoul_l.constprop.0+0xa2>
 80145de:	4580      	cmp	r8, r0
 80145e0:	d31b      	bcc.n	801461a <_strtoul_l.constprop.0+0xa2>
 80145e2:	d101      	bne.n	80145e8 <_strtoul_l.constprop.0+0x70>
 80145e4:	45a1      	cmp	r9, r4
 80145e6:	db18      	blt.n	801461a <_strtoul_l.constprop.0+0xa2>
 80145e8:	fb00 4003 	mla	r0, r0, r3, r4
 80145ec:	2701      	movs	r7, #1
 80145ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80145f2:	e7ea      	b.n	80145ca <_strtoul_l.constprop.0+0x52>
 80145f4:	2c2b      	cmp	r4, #43	; 0x2b
 80145f6:	bf04      	itt	eq
 80145f8:	782c      	ldrbeq	r4, [r5, #0]
 80145fa:	1c85      	addeq	r5, r0, #2
 80145fc:	e7cd      	b.n	801459a <_strtoul_l.constprop.0+0x22>
 80145fe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014602:	f1bc 0f19 	cmp.w	ip, #25
 8014606:	d801      	bhi.n	801460c <_strtoul_l.constprop.0+0x94>
 8014608:	3c37      	subs	r4, #55	; 0x37
 801460a:	e7e4      	b.n	80145d6 <_strtoul_l.constprop.0+0x5e>
 801460c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014610:	f1bc 0f19 	cmp.w	ip, #25
 8014614:	d804      	bhi.n	8014620 <_strtoul_l.constprop.0+0xa8>
 8014616:	3c57      	subs	r4, #87	; 0x57
 8014618:	e7dd      	b.n	80145d6 <_strtoul_l.constprop.0+0x5e>
 801461a:	f04f 37ff 	mov.w	r7, #4294967295
 801461e:	e7e6      	b.n	80145ee <_strtoul_l.constprop.0+0x76>
 8014620:	2f00      	cmp	r7, #0
 8014622:	da07      	bge.n	8014634 <_strtoul_l.constprop.0+0xbc>
 8014624:	2322      	movs	r3, #34	; 0x22
 8014626:	f8ce 3000 	str.w	r3, [lr]
 801462a:	f04f 30ff 	mov.w	r0, #4294967295
 801462e:	b932      	cbnz	r2, 801463e <_strtoul_l.constprop.0+0xc6>
 8014630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014634:	b106      	cbz	r6, 8014638 <_strtoul_l.constprop.0+0xc0>
 8014636:	4240      	negs	r0, r0
 8014638:	2a00      	cmp	r2, #0
 801463a:	d0f9      	beq.n	8014630 <_strtoul_l.constprop.0+0xb8>
 801463c:	b107      	cbz	r7, 8014640 <_strtoul_l.constprop.0+0xc8>
 801463e:	1e69      	subs	r1, r5, #1
 8014640:	6011      	str	r1, [r2, #0]
 8014642:	e7f5      	b.n	8014630 <_strtoul_l.constprop.0+0xb8>
 8014644:	2430      	movs	r4, #48	; 0x30
 8014646:	2b00      	cmp	r3, #0
 8014648:	d1b5      	bne.n	80145b6 <_strtoul_l.constprop.0+0x3e>
 801464a:	2308      	movs	r3, #8
 801464c:	e7b3      	b.n	80145b6 <_strtoul_l.constprop.0+0x3e>
 801464e:	2c30      	cmp	r4, #48	; 0x30
 8014650:	d0a9      	beq.n	80145a6 <_strtoul_l.constprop.0+0x2e>
 8014652:	230a      	movs	r3, #10
 8014654:	e7af      	b.n	80145b6 <_strtoul_l.constprop.0+0x3e>
 8014656:	bf00      	nop
 8014658:	08016491 	.word	0x08016491

0801465c <_strtoul_r>:
 801465c:	f7ff bf8c 	b.w	8014578 <_strtoul_l.constprop.0>

08014660 <__submore>:
 8014660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014664:	460c      	mov	r4, r1
 8014666:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801466c:	4299      	cmp	r1, r3
 801466e:	d11d      	bne.n	80146ac <__submore+0x4c>
 8014670:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014674:	f7ff f8bc 	bl	80137f0 <_malloc_r>
 8014678:	b918      	cbnz	r0, 8014682 <__submore+0x22>
 801467a:	f04f 30ff 	mov.w	r0, #4294967295
 801467e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014686:	63a3      	str	r3, [r4, #56]	; 0x38
 8014688:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801468c:	6360      	str	r0, [r4, #52]	; 0x34
 801468e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8014692:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014696:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801469a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801469e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80146a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80146a6:	6020      	str	r0, [r4, #0]
 80146a8:	2000      	movs	r0, #0
 80146aa:	e7e8      	b.n	801467e <__submore+0x1e>
 80146ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80146ae:	0077      	lsls	r7, r6, #1
 80146b0:	463a      	mov	r2, r7
 80146b2:	f000 fb2b 	bl	8014d0c <_realloc_r>
 80146b6:	4605      	mov	r5, r0
 80146b8:	2800      	cmp	r0, #0
 80146ba:	d0de      	beq.n	801467a <__submore+0x1a>
 80146bc:	eb00 0806 	add.w	r8, r0, r6
 80146c0:	4601      	mov	r1, r0
 80146c2:	4632      	mov	r2, r6
 80146c4:	4640      	mov	r0, r8
 80146c6:	f7fb faa9 	bl	800fc1c <memcpy>
 80146ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80146ce:	f8c4 8000 	str.w	r8, [r4]
 80146d2:	e7e9      	b.n	80146a8 <__submore+0x48>

080146d4 <__swbuf_r>:
 80146d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146d6:	460e      	mov	r6, r1
 80146d8:	4614      	mov	r4, r2
 80146da:	4605      	mov	r5, r0
 80146dc:	b118      	cbz	r0, 80146e6 <__swbuf_r+0x12>
 80146de:	6983      	ldr	r3, [r0, #24]
 80146e0:	b90b      	cbnz	r3, 80146e6 <__swbuf_r+0x12>
 80146e2:	f000 f9e7 	bl	8014ab4 <__sinit>
 80146e6:	4b21      	ldr	r3, [pc, #132]	; (801476c <__swbuf_r+0x98>)
 80146e8:	429c      	cmp	r4, r3
 80146ea:	d12b      	bne.n	8014744 <__swbuf_r+0x70>
 80146ec:	686c      	ldr	r4, [r5, #4]
 80146ee:	69a3      	ldr	r3, [r4, #24]
 80146f0:	60a3      	str	r3, [r4, #8]
 80146f2:	89a3      	ldrh	r3, [r4, #12]
 80146f4:	071a      	lsls	r2, r3, #28
 80146f6:	d52f      	bpl.n	8014758 <__swbuf_r+0x84>
 80146f8:	6923      	ldr	r3, [r4, #16]
 80146fa:	b36b      	cbz	r3, 8014758 <__swbuf_r+0x84>
 80146fc:	6923      	ldr	r3, [r4, #16]
 80146fe:	6820      	ldr	r0, [r4, #0]
 8014700:	1ac0      	subs	r0, r0, r3
 8014702:	6963      	ldr	r3, [r4, #20]
 8014704:	b2f6      	uxtb	r6, r6
 8014706:	4283      	cmp	r3, r0
 8014708:	4637      	mov	r7, r6
 801470a:	dc04      	bgt.n	8014716 <__swbuf_r+0x42>
 801470c:	4621      	mov	r1, r4
 801470e:	4628      	mov	r0, r5
 8014710:	f000 f93c 	bl	801498c <_fflush_r>
 8014714:	bb30      	cbnz	r0, 8014764 <__swbuf_r+0x90>
 8014716:	68a3      	ldr	r3, [r4, #8]
 8014718:	3b01      	subs	r3, #1
 801471a:	60a3      	str	r3, [r4, #8]
 801471c:	6823      	ldr	r3, [r4, #0]
 801471e:	1c5a      	adds	r2, r3, #1
 8014720:	6022      	str	r2, [r4, #0]
 8014722:	701e      	strb	r6, [r3, #0]
 8014724:	6963      	ldr	r3, [r4, #20]
 8014726:	3001      	adds	r0, #1
 8014728:	4283      	cmp	r3, r0
 801472a:	d004      	beq.n	8014736 <__swbuf_r+0x62>
 801472c:	89a3      	ldrh	r3, [r4, #12]
 801472e:	07db      	lsls	r3, r3, #31
 8014730:	d506      	bpl.n	8014740 <__swbuf_r+0x6c>
 8014732:	2e0a      	cmp	r6, #10
 8014734:	d104      	bne.n	8014740 <__swbuf_r+0x6c>
 8014736:	4621      	mov	r1, r4
 8014738:	4628      	mov	r0, r5
 801473a:	f000 f927 	bl	801498c <_fflush_r>
 801473e:	b988      	cbnz	r0, 8014764 <__swbuf_r+0x90>
 8014740:	4638      	mov	r0, r7
 8014742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014744:	4b0a      	ldr	r3, [pc, #40]	; (8014770 <__swbuf_r+0x9c>)
 8014746:	429c      	cmp	r4, r3
 8014748:	d101      	bne.n	801474e <__swbuf_r+0x7a>
 801474a:	68ac      	ldr	r4, [r5, #8]
 801474c:	e7cf      	b.n	80146ee <__swbuf_r+0x1a>
 801474e:	4b09      	ldr	r3, [pc, #36]	; (8014774 <__swbuf_r+0xa0>)
 8014750:	429c      	cmp	r4, r3
 8014752:	bf08      	it	eq
 8014754:	68ec      	ldreq	r4, [r5, #12]
 8014756:	e7ca      	b.n	80146ee <__swbuf_r+0x1a>
 8014758:	4621      	mov	r1, r4
 801475a:	4628      	mov	r0, r5
 801475c:	f000 f81a 	bl	8014794 <__swsetup_r>
 8014760:	2800      	cmp	r0, #0
 8014762:	d0cb      	beq.n	80146fc <__swbuf_r+0x28>
 8014764:	f04f 37ff 	mov.w	r7, #4294967295
 8014768:	e7ea      	b.n	8014740 <__swbuf_r+0x6c>
 801476a:	bf00      	nop
 801476c:	08016828 	.word	0x08016828
 8014770:	08016848 	.word	0x08016848
 8014774:	08016808 	.word	0x08016808

08014778 <__ascii_wctomb>:
 8014778:	b149      	cbz	r1, 801478e <__ascii_wctomb+0x16>
 801477a:	2aff      	cmp	r2, #255	; 0xff
 801477c:	bf85      	ittet	hi
 801477e:	238a      	movhi	r3, #138	; 0x8a
 8014780:	6003      	strhi	r3, [r0, #0]
 8014782:	700a      	strbls	r2, [r1, #0]
 8014784:	f04f 30ff 	movhi.w	r0, #4294967295
 8014788:	bf98      	it	ls
 801478a:	2001      	movls	r0, #1
 801478c:	4770      	bx	lr
 801478e:	4608      	mov	r0, r1
 8014790:	4770      	bx	lr
	...

08014794 <__swsetup_r>:
 8014794:	4b32      	ldr	r3, [pc, #200]	; (8014860 <__swsetup_r+0xcc>)
 8014796:	b570      	push	{r4, r5, r6, lr}
 8014798:	681d      	ldr	r5, [r3, #0]
 801479a:	4606      	mov	r6, r0
 801479c:	460c      	mov	r4, r1
 801479e:	b125      	cbz	r5, 80147aa <__swsetup_r+0x16>
 80147a0:	69ab      	ldr	r3, [r5, #24]
 80147a2:	b913      	cbnz	r3, 80147aa <__swsetup_r+0x16>
 80147a4:	4628      	mov	r0, r5
 80147a6:	f000 f985 	bl	8014ab4 <__sinit>
 80147aa:	4b2e      	ldr	r3, [pc, #184]	; (8014864 <__swsetup_r+0xd0>)
 80147ac:	429c      	cmp	r4, r3
 80147ae:	d10f      	bne.n	80147d0 <__swsetup_r+0x3c>
 80147b0:	686c      	ldr	r4, [r5, #4]
 80147b2:	89a3      	ldrh	r3, [r4, #12]
 80147b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80147b8:	0719      	lsls	r1, r3, #28
 80147ba:	d42c      	bmi.n	8014816 <__swsetup_r+0x82>
 80147bc:	06dd      	lsls	r5, r3, #27
 80147be:	d411      	bmi.n	80147e4 <__swsetup_r+0x50>
 80147c0:	2309      	movs	r3, #9
 80147c2:	6033      	str	r3, [r6, #0]
 80147c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80147c8:	81a3      	strh	r3, [r4, #12]
 80147ca:	f04f 30ff 	mov.w	r0, #4294967295
 80147ce:	e03e      	b.n	801484e <__swsetup_r+0xba>
 80147d0:	4b25      	ldr	r3, [pc, #148]	; (8014868 <__swsetup_r+0xd4>)
 80147d2:	429c      	cmp	r4, r3
 80147d4:	d101      	bne.n	80147da <__swsetup_r+0x46>
 80147d6:	68ac      	ldr	r4, [r5, #8]
 80147d8:	e7eb      	b.n	80147b2 <__swsetup_r+0x1e>
 80147da:	4b24      	ldr	r3, [pc, #144]	; (801486c <__swsetup_r+0xd8>)
 80147dc:	429c      	cmp	r4, r3
 80147de:	bf08      	it	eq
 80147e0:	68ec      	ldreq	r4, [r5, #12]
 80147e2:	e7e6      	b.n	80147b2 <__swsetup_r+0x1e>
 80147e4:	0758      	lsls	r0, r3, #29
 80147e6:	d512      	bpl.n	801480e <__swsetup_r+0x7a>
 80147e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80147ea:	b141      	cbz	r1, 80147fe <__swsetup_r+0x6a>
 80147ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80147f0:	4299      	cmp	r1, r3
 80147f2:	d002      	beq.n	80147fa <__swsetup_r+0x66>
 80147f4:	4630      	mov	r0, r6
 80147f6:	f7fe ff8f 	bl	8013718 <_free_r>
 80147fa:	2300      	movs	r3, #0
 80147fc:	6363      	str	r3, [r4, #52]	; 0x34
 80147fe:	89a3      	ldrh	r3, [r4, #12]
 8014800:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014804:	81a3      	strh	r3, [r4, #12]
 8014806:	2300      	movs	r3, #0
 8014808:	6063      	str	r3, [r4, #4]
 801480a:	6923      	ldr	r3, [r4, #16]
 801480c:	6023      	str	r3, [r4, #0]
 801480e:	89a3      	ldrh	r3, [r4, #12]
 8014810:	f043 0308 	orr.w	r3, r3, #8
 8014814:	81a3      	strh	r3, [r4, #12]
 8014816:	6923      	ldr	r3, [r4, #16]
 8014818:	b94b      	cbnz	r3, 801482e <__swsetup_r+0x9a>
 801481a:	89a3      	ldrh	r3, [r4, #12]
 801481c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014824:	d003      	beq.n	801482e <__swsetup_r+0x9a>
 8014826:	4621      	mov	r1, r4
 8014828:	4630      	mov	r0, r6
 801482a:	f000 fa09 	bl	8014c40 <__smakebuf_r>
 801482e:	89a0      	ldrh	r0, [r4, #12]
 8014830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014834:	f010 0301 	ands.w	r3, r0, #1
 8014838:	d00a      	beq.n	8014850 <__swsetup_r+0xbc>
 801483a:	2300      	movs	r3, #0
 801483c:	60a3      	str	r3, [r4, #8]
 801483e:	6963      	ldr	r3, [r4, #20]
 8014840:	425b      	negs	r3, r3
 8014842:	61a3      	str	r3, [r4, #24]
 8014844:	6923      	ldr	r3, [r4, #16]
 8014846:	b943      	cbnz	r3, 801485a <__swsetup_r+0xc6>
 8014848:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801484c:	d1ba      	bne.n	80147c4 <__swsetup_r+0x30>
 801484e:	bd70      	pop	{r4, r5, r6, pc}
 8014850:	0781      	lsls	r1, r0, #30
 8014852:	bf58      	it	pl
 8014854:	6963      	ldrpl	r3, [r4, #20]
 8014856:	60a3      	str	r3, [r4, #8]
 8014858:	e7f4      	b.n	8014844 <__swsetup_r+0xb0>
 801485a:	2000      	movs	r0, #0
 801485c:	e7f7      	b.n	801484e <__swsetup_r+0xba>
 801485e:	bf00      	nop
 8014860:	200003e0 	.word	0x200003e0
 8014864:	08016828 	.word	0x08016828
 8014868:	08016848 	.word	0x08016848
 801486c:	08016808 	.word	0x08016808

08014870 <abort>:
 8014870:	b508      	push	{r3, lr}
 8014872:	2006      	movs	r0, #6
 8014874:	f000 faa2 	bl	8014dbc <raise>
 8014878:	2001      	movs	r0, #1
 801487a:	f7ee f953 	bl	8002b24 <_exit>
	...

08014880 <__sflush_r>:
 8014880:	898a      	ldrh	r2, [r1, #12]
 8014882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014886:	4605      	mov	r5, r0
 8014888:	0710      	lsls	r0, r2, #28
 801488a:	460c      	mov	r4, r1
 801488c:	d458      	bmi.n	8014940 <__sflush_r+0xc0>
 801488e:	684b      	ldr	r3, [r1, #4]
 8014890:	2b00      	cmp	r3, #0
 8014892:	dc05      	bgt.n	80148a0 <__sflush_r+0x20>
 8014894:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014896:	2b00      	cmp	r3, #0
 8014898:	dc02      	bgt.n	80148a0 <__sflush_r+0x20>
 801489a:	2000      	movs	r0, #0
 801489c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80148a2:	2e00      	cmp	r6, #0
 80148a4:	d0f9      	beq.n	801489a <__sflush_r+0x1a>
 80148a6:	2300      	movs	r3, #0
 80148a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80148ac:	682f      	ldr	r7, [r5, #0]
 80148ae:	602b      	str	r3, [r5, #0]
 80148b0:	d032      	beq.n	8014918 <__sflush_r+0x98>
 80148b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80148b4:	89a3      	ldrh	r3, [r4, #12]
 80148b6:	075a      	lsls	r2, r3, #29
 80148b8:	d505      	bpl.n	80148c6 <__sflush_r+0x46>
 80148ba:	6863      	ldr	r3, [r4, #4]
 80148bc:	1ac0      	subs	r0, r0, r3
 80148be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80148c0:	b10b      	cbz	r3, 80148c6 <__sflush_r+0x46>
 80148c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80148c4:	1ac0      	subs	r0, r0, r3
 80148c6:	2300      	movs	r3, #0
 80148c8:	4602      	mov	r2, r0
 80148ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80148cc:	6a21      	ldr	r1, [r4, #32]
 80148ce:	4628      	mov	r0, r5
 80148d0:	47b0      	blx	r6
 80148d2:	1c43      	adds	r3, r0, #1
 80148d4:	89a3      	ldrh	r3, [r4, #12]
 80148d6:	d106      	bne.n	80148e6 <__sflush_r+0x66>
 80148d8:	6829      	ldr	r1, [r5, #0]
 80148da:	291d      	cmp	r1, #29
 80148dc:	d82c      	bhi.n	8014938 <__sflush_r+0xb8>
 80148de:	4a2a      	ldr	r2, [pc, #168]	; (8014988 <__sflush_r+0x108>)
 80148e0:	40ca      	lsrs	r2, r1
 80148e2:	07d6      	lsls	r6, r2, #31
 80148e4:	d528      	bpl.n	8014938 <__sflush_r+0xb8>
 80148e6:	2200      	movs	r2, #0
 80148e8:	6062      	str	r2, [r4, #4]
 80148ea:	04d9      	lsls	r1, r3, #19
 80148ec:	6922      	ldr	r2, [r4, #16]
 80148ee:	6022      	str	r2, [r4, #0]
 80148f0:	d504      	bpl.n	80148fc <__sflush_r+0x7c>
 80148f2:	1c42      	adds	r2, r0, #1
 80148f4:	d101      	bne.n	80148fa <__sflush_r+0x7a>
 80148f6:	682b      	ldr	r3, [r5, #0]
 80148f8:	b903      	cbnz	r3, 80148fc <__sflush_r+0x7c>
 80148fa:	6560      	str	r0, [r4, #84]	; 0x54
 80148fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80148fe:	602f      	str	r7, [r5, #0]
 8014900:	2900      	cmp	r1, #0
 8014902:	d0ca      	beq.n	801489a <__sflush_r+0x1a>
 8014904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014908:	4299      	cmp	r1, r3
 801490a:	d002      	beq.n	8014912 <__sflush_r+0x92>
 801490c:	4628      	mov	r0, r5
 801490e:	f7fe ff03 	bl	8013718 <_free_r>
 8014912:	2000      	movs	r0, #0
 8014914:	6360      	str	r0, [r4, #52]	; 0x34
 8014916:	e7c1      	b.n	801489c <__sflush_r+0x1c>
 8014918:	6a21      	ldr	r1, [r4, #32]
 801491a:	2301      	movs	r3, #1
 801491c:	4628      	mov	r0, r5
 801491e:	47b0      	blx	r6
 8014920:	1c41      	adds	r1, r0, #1
 8014922:	d1c7      	bne.n	80148b4 <__sflush_r+0x34>
 8014924:	682b      	ldr	r3, [r5, #0]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d0c4      	beq.n	80148b4 <__sflush_r+0x34>
 801492a:	2b1d      	cmp	r3, #29
 801492c:	d001      	beq.n	8014932 <__sflush_r+0xb2>
 801492e:	2b16      	cmp	r3, #22
 8014930:	d101      	bne.n	8014936 <__sflush_r+0xb6>
 8014932:	602f      	str	r7, [r5, #0]
 8014934:	e7b1      	b.n	801489a <__sflush_r+0x1a>
 8014936:	89a3      	ldrh	r3, [r4, #12]
 8014938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801493c:	81a3      	strh	r3, [r4, #12]
 801493e:	e7ad      	b.n	801489c <__sflush_r+0x1c>
 8014940:	690f      	ldr	r7, [r1, #16]
 8014942:	2f00      	cmp	r7, #0
 8014944:	d0a9      	beq.n	801489a <__sflush_r+0x1a>
 8014946:	0793      	lsls	r3, r2, #30
 8014948:	680e      	ldr	r6, [r1, #0]
 801494a:	bf08      	it	eq
 801494c:	694b      	ldreq	r3, [r1, #20]
 801494e:	600f      	str	r7, [r1, #0]
 8014950:	bf18      	it	ne
 8014952:	2300      	movne	r3, #0
 8014954:	eba6 0807 	sub.w	r8, r6, r7
 8014958:	608b      	str	r3, [r1, #8]
 801495a:	f1b8 0f00 	cmp.w	r8, #0
 801495e:	dd9c      	ble.n	801489a <__sflush_r+0x1a>
 8014960:	6a21      	ldr	r1, [r4, #32]
 8014962:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014964:	4643      	mov	r3, r8
 8014966:	463a      	mov	r2, r7
 8014968:	4628      	mov	r0, r5
 801496a:	47b0      	blx	r6
 801496c:	2800      	cmp	r0, #0
 801496e:	dc06      	bgt.n	801497e <__sflush_r+0xfe>
 8014970:	89a3      	ldrh	r3, [r4, #12]
 8014972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014976:	81a3      	strh	r3, [r4, #12]
 8014978:	f04f 30ff 	mov.w	r0, #4294967295
 801497c:	e78e      	b.n	801489c <__sflush_r+0x1c>
 801497e:	4407      	add	r7, r0
 8014980:	eba8 0800 	sub.w	r8, r8, r0
 8014984:	e7e9      	b.n	801495a <__sflush_r+0xda>
 8014986:	bf00      	nop
 8014988:	20400001 	.word	0x20400001

0801498c <_fflush_r>:
 801498c:	b538      	push	{r3, r4, r5, lr}
 801498e:	690b      	ldr	r3, [r1, #16]
 8014990:	4605      	mov	r5, r0
 8014992:	460c      	mov	r4, r1
 8014994:	b913      	cbnz	r3, 801499c <_fflush_r+0x10>
 8014996:	2500      	movs	r5, #0
 8014998:	4628      	mov	r0, r5
 801499a:	bd38      	pop	{r3, r4, r5, pc}
 801499c:	b118      	cbz	r0, 80149a6 <_fflush_r+0x1a>
 801499e:	6983      	ldr	r3, [r0, #24]
 80149a0:	b90b      	cbnz	r3, 80149a6 <_fflush_r+0x1a>
 80149a2:	f000 f887 	bl	8014ab4 <__sinit>
 80149a6:	4b14      	ldr	r3, [pc, #80]	; (80149f8 <_fflush_r+0x6c>)
 80149a8:	429c      	cmp	r4, r3
 80149aa:	d11b      	bne.n	80149e4 <_fflush_r+0x58>
 80149ac:	686c      	ldr	r4, [r5, #4]
 80149ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d0ef      	beq.n	8014996 <_fflush_r+0xa>
 80149b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80149b8:	07d0      	lsls	r0, r2, #31
 80149ba:	d404      	bmi.n	80149c6 <_fflush_r+0x3a>
 80149bc:	0599      	lsls	r1, r3, #22
 80149be:	d402      	bmi.n	80149c6 <_fflush_r+0x3a>
 80149c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149c2:	f000 f915 	bl	8014bf0 <__retarget_lock_acquire_recursive>
 80149c6:	4628      	mov	r0, r5
 80149c8:	4621      	mov	r1, r4
 80149ca:	f7ff ff59 	bl	8014880 <__sflush_r>
 80149ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80149d0:	07da      	lsls	r2, r3, #31
 80149d2:	4605      	mov	r5, r0
 80149d4:	d4e0      	bmi.n	8014998 <_fflush_r+0xc>
 80149d6:	89a3      	ldrh	r3, [r4, #12]
 80149d8:	059b      	lsls	r3, r3, #22
 80149da:	d4dd      	bmi.n	8014998 <_fflush_r+0xc>
 80149dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149de:	f000 f908 	bl	8014bf2 <__retarget_lock_release_recursive>
 80149e2:	e7d9      	b.n	8014998 <_fflush_r+0xc>
 80149e4:	4b05      	ldr	r3, [pc, #20]	; (80149fc <_fflush_r+0x70>)
 80149e6:	429c      	cmp	r4, r3
 80149e8:	d101      	bne.n	80149ee <_fflush_r+0x62>
 80149ea:	68ac      	ldr	r4, [r5, #8]
 80149ec:	e7df      	b.n	80149ae <_fflush_r+0x22>
 80149ee:	4b04      	ldr	r3, [pc, #16]	; (8014a00 <_fflush_r+0x74>)
 80149f0:	429c      	cmp	r4, r3
 80149f2:	bf08      	it	eq
 80149f4:	68ec      	ldreq	r4, [r5, #12]
 80149f6:	e7da      	b.n	80149ae <_fflush_r+0x22>
 80149f8:	08016828 	.word	0x08016828
 80149fc:	08016848 	.word	0x08016848
 8014a00:	08016808 	.word	0x08016808

08014a04 <std>:
 8014a04:	2300      	movs	r3, #0
 8014a06:	b510      	push	{r4, lr}
 8014a08:	4604      	mov	r4, r0
 8014a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8014a0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014a12:	6083      	str	r3, [r0, #8]
 8014a14:	8181      	strh	r1, [r0, #12]
 8014a16:	6643      	str	r3, [r0, #100]	; 0x64
 8014a18:	81c2      	strh	r2, [r0, #14]
 8014a1a:	6183      	str	r3, [r0, #24]
 8014a1c:	4619      	mov	r1, r3
 8014a1e:	2208      	movs	r2, #8
 8014a20:	305c      	adds	r0, #92	; 0x5c
 8014a22:	f7fb f909 	bl	800fc38 <memset>
 8014a26:	4b05      	ldr	r3, [pc, #20]	; (8014a3c <std+0x38>)
 8014a28:	6263      	str	r3, [r4, #36]	; 0x24
 8014a2a:	4b05      	ldr	r3, [pc, #20]	; (8014a40 <std+0x3c>)
 8014a2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8014a2e:	4b05      	ldr	r3, [pc, #20]	; (8014a44 <std+0x40>)
 8014a30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014a32:	4b05      	ldr	r3, [pc, #20]	; (8014a48 <std+0x44>)
 8014a34:	6224      	str	r4, [r4, #32]
 8014a36:	6323      	str	r3, [r4, #48]	; 0x30
 8014a38:	bd10      	pop	{r4, pc}
 8014a3a:	bf00      	nop
 8014a3c:	080109e1 	.word	0x080109e1
 8014a40:	08010a07 	.word	0x08010a07
 8014a44:	08010a3f 	.word	0x08010a3f
 8014a48:	08010a63 	.word	0x08010a63

08014a4c <_cleanup_r>:
 8014a4c:	4901      	ldr	r1, [pc, #4]	; (8014a54 <_cleanup_r+0x8>)
 8014a4e:	f000 b8af 	b.w	8014bb0 <_fwalk_reent>
 8014a52:	bf00      	nop
 8014a54:	0801498d 	.word	0x0801498d

08014a58 <__sfmoreglue>:
 8014a58:	b570      	push	{r4, r5, r6, lr}
 8014a5a:	2268      	movs	r2, #104	; 0x68
 8014a5c:	1e4d      	subs	r5, r1, #1
 8014a5e:	4355      	muls	r5, r2
 8014a60:	460e      	mov	r6, r1
 8014a62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014a66:	f7fe fec3 	bl	80137f0 <_malloc_r>
 8014a6a:	4604      	mov	r4, r0
 8014a6c:	b140      	cbz	r0, 8014a80 <__sfmoreglue+0x28>
 8014a6e:	2100      	movs	r1, #0
 8014a70:	e9c0 1600 	strd	r1, r6, [r0]
 8014a74:	300c      	adds	r0, #12
 8014a76:	60a0      	str	r0, [r4, #8]
 8014a78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014a7c:	f7fb f8dc 	bl	800fc38 <memset>
 8014a80:	4620      	mov	r0, r4
 8014a82:	bd70      	pop	{r4, r5, r6, pc}

08014a84 <__sfp_lock_acquire>:
 8014a84:	4801      	ldr	r0, [pc, #4]	; (8014a8c <__sfp_lock_acquire+0x8>)
 8014a86:	f000 b8b3 	b.w	8014bf0 <__retarget_lock_acquire_recursive>
 8014a8a:	bf00      	nop
 8014a8c:	2000b68d 	.word	0x2000b68d

08014a90 <__sfp_lock_release>:
 8014a90:	4801      	ldr	r0, [pc, #4]	; (8014a98 <__sfp_lock_release+0x8>)
 8014a92:	f000 b8ae 	b.w	8014bf2 <__retarget_lock_release_recursive>
 8014a96:	bf00      	nop
 8014a98:	2000b68d 	.word	0x2000b68d

08014a9c <__sinit_lock_acquire>:
 8014a9c:	4801      	ldr	r0, [pc, #4]	; (8014aa4 <__sinit_lock_acquire+0x8>)
 8014a9e:	f000 b8a7 	b.w	8014bf0 <__retarget_lock_acquire_recursive>
 8014aa2:	bf00      	nop
 8014aa4:	2000b68e 	.word	0x2000b68e

08014aa8 <__sinit_lock_release>:
 8014aa8:	4801      	ldr	r0, [pc, #4]	; (8014ab0 <__sinit_lock_release+0x8>)
 8014aaa:	f000 b8a2 	b.w	8014bf2 <__retarget_lock_release_recursive>
 8014aae:	bf00      	nop
 8014ab0:	2000b68e 	.word	0x2000b68e

08014ab4 <__sinit>:
 8014ab4:	b510      	push	{r4, lr}
 8014ab6:	4604      	mov	r4, r0
 8014ab8:	f7ff fff0 	bl	8014a9c <__sinit_lock_acquire>
 8014abc:	69a3      	ldr	r3, [r4, #24]
 8014abe:	b11b      	cbz	r3, 8014ac8 <__sinit+0x14>
 8014ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ac4:	f7ff bff0 	b.w	8014aa8 <__sinit_lock_release>
 8014ac8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014acc:	6523      	str	r3, [r4, #80]	; 0x50
 8014ace:	4b13      	ldr	r3, [pc, #76]	; (8014b1c <__sinit+0x68>)
 8014ad0:	4a13      	ldr	r2, [pc, #76]	; (8014b20 <__sinit+0x6c>)
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	62a2      	str	r2, [r4, #40]	; 0x28
 8014ad6:	42a3      	cmp	r3, r4
 8014ad8:	bf04      	itt	eq
 8014ada:	2301      	moveq	r3, #1
 8014adc:	61a3      	streq	r3, [r4, #24]
 8014ade:	4620      	mov	r0, r4
 8014ae0:	f000 f820 	bl	8014b24 <__sfp>
 8014ae4:	6060      	str	r0, [r4, #4]
 8014ae6:	4620      	mov	r0, r4
 8014ae8:	f000 f81c 	bl	8014b24 <__sfp>
 8014aec:	60a0      	str	r0, [r4, #8]
 8014aee:	4620      	mov	r0, r4
 8014af0:	f000 f818 	bl	8014b24 <__sfp>
 8014af4:	2200      	movs	r2, #0
 8014af6:	60e0      	str	r0, [r4, #12]
 8014af8:	2104      	movs	r1, #4
 8014afa:	6860      	ldr	r0, [r4, #4]
 8014afc:	f7ff ff82 	bl	8014a04 <std>
 8014b00:	68a0      	ldr	r0, [r4, #8]
 8014b02:	2201      	movs	r2, #1
 8014b04:	2109      	movs	r1, #9
 8014b06:	f7ff ff7d 	bl	8014a04 <std>
 8014b0a:	68e0      	ldr	r0, [r4, #12]
 8014b0c:	2202      	movs	r2, #2
 8014b0e:	2112      	movs	r1, #18
 8014b10:	f7ff ff78 	bl	8014a04 <std>
 8014b14:	2301      	movs	r3, #1
 8014b16:	61a3      	str	r3, [r4, #24]
 8014b18:	e7d2      	b.n	8014ac0 <__sinit+0xc>
 8014b1a:	bf00      	nop
 8014b1c:	08016354 	.word	0x08016354
 8014b20:	08014a4d 	.word	0x08014a4d

08014b24 <__sfp>:
 8014b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b26:	4607      	mov	r7, r0
 8014b28:	f7ff ffac 	bl	8014a84 <__sfp_lock_acquire>
 8014b2c:	4b1e      	ldr	r3, [pc, #120]	; (8014ba8 <__sfp+0x84>)
 8014b2e:	681e      	ldr	r6, [r3, #0]
 8014b30:	69b3      	ldr	r3, [r6, #24]
 8014b32:	b913      	cbnz	r3, 8014b3a <__sfp+0x16>
 8014b34:	4630      	mov	r0, r6
 8014b36:	f7ff ffbd 	bl	8014ab4 <__sinit>
 8014b3a:	3648      	adds	r6, #72	; 0x48
 8014b3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014b40:	3b01      	subs	r3, #1
 8014b42:	d503      	bpl.n	8014b4c <__sfp+0x28>
 8014b44:	6833      	ldr	r3, [r6, #0]
 8014b46:	b30b      	cbz	r3, 8014b8c <__sfp+0x68>
 8014b48:	6836      	ldr	r6, [r6, #0]
 8014b4a:	e7f7      	b.n	8014b3c <__sfp+0x18>
 8014b4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014b50:	b9d5      	cbnz	r5, 8014b88 <__sfp+0x64>
 8014b52:	4b16      	ldr	r3, [pc, #88]	; (8014bac <__sfp+0x88>)
 8014b54:	60e3      	str	r3, [r4, #12]
 8014b56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014b5a:	6665      	str	r5, [r4, #100]	; 0x64
 8014b5c:	f000 f847 	bl	8014bee <__retarget_lock_init_recursive>
 8014b60:	f7ff ff96 	bl	8014a90 <__sfp_lock_release>
 8014b64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014b68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014b6c:	6025      	str	r5, [r4, #0]
 8014b6e:	61a5      	str	r5, [r4, #24]
 8014b70:	2208      	movs	r2, #8
 8014b72:	4629      	mov	r1, r5
 8014b74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014b78:	f7fb f85e 	bl	800fc38 <memset>
 8014b7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014b80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014b84:	4620      	mov	r0, r4
 8014b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b88:	3468      	adds	r4, #104	; 0x68
 8014b8a:	e7d9      	b.n	8014b40 <__sfp+0x1c>
 8014b8c:	2104      	movs	r1, #4
 8014b8e:	4638      	mov	r0, r7
 8014b90:	f7ff ff62 	bl	8014a58 <__sfmoreglue>
 8014b94:	4604      	mov	r4, r0
 8014b96:	6030      	str	r0, [r6, #0]
 8014b98:	2800      	cmp	r0, #0
 8014b9a:	d1d5      	bne.n	8014b48 <__sfp+0x24>
 8014b9c:	f7ff ff78 	bl	8014a90 <__sfp_lock_release>
 8014ba0:	230c      	movs	r3, #12
 8014ba2:	603b      	str	r3, [r7, #0]
 8014ba4:	e7ee      	b.n	8014b84 <__sfp+0x60>
 8014ba6:	bf00      	nop
 8014ba8:	08016354 	.word	0x08016354
 8014bac:	ffff0001 	.word	0xffff0001

08014bb0 <_fwalk_reent>:
 8014bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bb4:	4606      	mov	r6, r0
 8014bb6:	4688      	mov	r8, r1
 8014bb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014bbc:	2700      	movs	r7, #0
 8014bbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014bc2:	f1b9 0901 	subs.w	r9, r9, #1
 8014bc6:	d505      	bpl.n	8014bd4 <_fwalk_reent+0x24>
 8014bc8:	6824      	ldr	r4, [r4, #0]
 8014bca:	2c00      	cmp	r4, #0
 8014bcc:	d1f7      	bne.n	8014bbe <_fwalk_reent+0xe>
 8014bce:	4638      	mov	r0, r7
 8014bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014bd4:	89ab      	ldrh	r3, [r5, #12]
 8014bd6:	2b01      	cmp	r3, #1
 8014bd8:	d907      	bls.n	8014bea <_fwalk_reent+0x3a>
 8014bda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014bde:	3301      	adds	r3, #1
 8014be0:	d003      	beq.n	8014bea <_fwalk_reent+0x3a>
 8014be2:	4629      	mov	r1, r5
 8014be4:	4630      	mov	r0, r6
 8014be6:	47c0      	blx	r8
 8014be8:	4307      	orrs	r7, r0
 8014bea:	3568      	adds	r5, #104	; 0x68
 8014bec:	e7e9      	b.n	8014bc2 <_fwalk_reent+0x12>

08014bee <__retarget_lock_init_recursive>:
 8014bee:	4770      	bx	lr

08014bf0 <__retarget_lock_acquire_recursive>:
 8014bf0:	4770      	bx	lr

08014bf2 <__retarget_lock_release_recursive>:
 8014bf2:	4770      	bx	lr

08014bf4 <__swhatbuf_r>:
 8014bf4:	b570      	push	{r4, r5, r6, lr}
 8014bf6:	460e      	mov	r6, r1
 8014bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bfc:	2900      	cmp	r1, #0
 8014bfe:	b096      	sub	sp, #88	; 0x58
 8014c00:	4614      	mov	r4, r2
 8014c02:	461d      	mov	r5, r3
 8014c04:	da08      	bge.n	8014c18 <__swhatbuf_r+0x24>
 8014c06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	602a      	str	r2, [r5, #0]
 8014c0e:	061a      	lsls	r2, r3, #24
 8014c10:	d410      	bmi.n	8014c34 <__swhatbuf_r+0x40>
 8014c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c16:	e00e      	b.n	8014c36 <__swhatbuf_r+0x42>
 8014c18:	466a      	mov	r2, sp
 8014c1a:	f000 f8eb 	bl	8014df4 <_fstat_r>
 8014c1e:	2800      	cmp	r0, #0
 8014c20:	dbf1      	blt.n	8014c06 <__swhatbuf_r+0x12>
 8014c22:	9a01      	ldr	r2, [sp, #4]
 8014c24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014c28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014c2c:	425a      	negs	r2, r3
 8014c2e:	415a      	adcs	r2, r3
 8014c30:	602a      	str	r2, [r5, #0]
 8014c32:	e7ee      	b.n	8014c12 <__swhatbuf_r+0x1e>
 8014c34:	2340      	movs	r3, #64	; 0x40
 8014c36:	2000      	movs	r0, #0
 8014c38:	6023      	str	r3, [r4, #0]
 8014c3a:	b016      	add	sp, #88	; 0x58
 8014c3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014c40 <__smakebuf_r>:
 8014c40:	898b      	ldrh	r3, [r1, #12]
 8014c42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014c44:	079d      	lsls	r5, r3, #30
 8014c46:	4606      	mov	r6, r0
 8014c48:	460c      	mov	r4, r1
 8014c4a:	d507      	bpl.n	8014c5c <__smakebuf_r+0x1c>
 8014c4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014c50:	6023      	str	r3, [r4, #0]
 8014c52:	6123      	str	r3, [r4, #16]
 8014c54:	2301      	movs	r3, #1
 8014c56:	6163      	str	r3, [r4, #20]
 8014c58:	b002      	add	sp, #8
 8014c5a:	bd70      	pop	{r4, r5, r6, pc}
 8014c5c:	ab01      	add	r3, sp, #4
 8014c5e:	466a      	mov	r2, sp
 8014c60:	f7ff ffc8 	bl	8014bf4 <__swhatbuf_r>
 8014c64:	9900      	ldr	r1, [sp, #0]
 8014c66:	4605      	mov	r5, r0
 8014c68:	4630      	mov	r0, r6
 8014c6a:	f7fe fdc1 	bl	80137f0 <_malloc_r>
 8014c6e:	b948      	cbnz	r0, 8014c84 <__smakebuf_r+0x44>
 8014c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c74:	059a      	lsls	r2, r3, #22
 8014c76:	d4ef      	bmi.n	8014c58 <__smakebuf_r+0x18>
 8014c78:	f023 0303 	bic.w	r3, r3, #3
 8014c7c:	f043 0302 	orr.w	r3, r3, #2
 8014c80:	81a3      	strh	r3, [r4, #12]
 8014c82:	e7e3      	b.n	8014c4c <__smakebuf_r+0xc>
 8014c84:	4b0d      	ldr	r3, [pc, #52]	; (8014cbc <__smakebuf_r+0x7c>)
 8014c86:	62b3      	str	r3, [r6, #40]	; 0x28
 8014c88:	89a3      	ldrh	r3, [r4, #12]
 8014c8a:	6020      	str	r0, [r4, #0]
 8014c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c90:	81a3      	strh	r3, [r4, #12]
 8014c92:	9b00      	ldr	r3, [sp, #0]
 8014c94:	6163      	str	r3, [r4, #20]
 8014c96:	9b01      	ldr	r3, [sp, #4]
 8014c98:	6120      	str	r0, [r4, #16]
 8014c9a:	b15b      	cbz	r3, 8014cb4 <__smakebuf_r+0x74>
 8014c9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ca0:	4630      	mov	r0, r6
 8014ca2:	f000 f8b9 	bl	8014e18 <_isatty_r>
 8014ca6:	b128      	cbz	r0, 8014cb4 <__smakebuf_r+0x74>
 8014ca8:	89a3      	ldrh	r3, [r4, #12]
 8014caa:	f023 0303 	bic.w	r3, r3, #3
 8014cae:	f043 0301 	orr.w	r3, r3, #1
 8014cb2:	81a3      	strh	r3, [r4, #12]
 8014cb4:	89a0      	ldrh	r0, [r4, #12]
 8014cb6:	4305      	orrs	r5, r0
 8014cb8:	81a5      	strh	r5, [r4, #12]
 8014cba:	e7cd      	b.n	8014c58 <__smakebuf_r+0x18>
 8014cbc:	08014a4d 	.word	0x08014a4d

08014cc0 <memmove>:
 8014cc0:	4288      	cmp	r0, r1
 8014cc2:	b510      	push	{r4, lr}
 8014cc4:	eb01 0402 	add.w	r4, r1, r2
 8014cc8:	d902      	bls.n	8014cd0 <memmove+0x10>
 8014cca:	4284      	cmp	r4, r0
 8014ccc:	4623      	mov	r3, r4
 8014cce:	d807      	bhi.n	8014ce0 <memmove+0x20>
 8014cd0:	1e43      	subs	r3, r0, #1
 8014cd2:	42a1      	cmp	r1, r4
 8014cd4:	d008      	beq.n	8014ce8 <memmove+0x28>
 8014cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014cda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014cde:	e7f8      	b.n	8014cd2 <memmove+0x12>
 8014ce0:	4402      	add	r2, r0
 8014ce2:	4601      	mov	r1, r0
 8014ce4:	428a      	cmp	r2, r1
 8014ce6:	d100      	bne.n	8014cea <memmove+0x2a>
 8014ce8:	bd10      	pop	{r4, pc}
 8014cea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014cee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014cf2:	e7f7      	b.n	8014ce4 <memmove+0x24>

08014cf4 <__malloc_lock>:
 8014cf4:	4801      	ldr	r0, [pc, #4]	; (8014cfc <__malloc_lock+0x8>)
 8014cf6:	f7ff bf7b 	b.w	8014bf0 <__retarget_lock_acquire_recursive>
 8014cfa:	bf00      	nop
 8014cfc:	2000b68c 	.word	0x2000b68c

08014d00 <__malloc_unlock>:
 8014d00:	4801      	ldr	r0, [pc, #4]	; (8014d08 <__malloc_unlock+0x8>)
 8014d02:	f7ff bf76 	b.w	8014bf2 <__retarget_lock_release_recursive>
 8014d06:	bf00      	nop
 8014d08:	2000b68c 	.word	0x2000b68c

08014d0c <_realloc_r>:
 8014d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d10:	4680      	mov	r8, r0
 8014d12:	4614      	mov	r4, r2
 8014d14:	460e      	mov	r6, r1
 8014d16:	b921      	cbnz	r1, 8014d22 <_realloc_r+0x16>
 8014d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d1c:	4611      	mov	r1, r2
 8014d1e:	f7fe bd67 	b.w	80137f0 <_malloc_r>
 8014d22:	b92a      	cbnz	r2, 8014d30 <_realloc_r+0x24>
 8014d24:	f7fe fcf8 	bl	8013718 <_free_r>
 8014d28:	4625      	mov	r5, r4
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d30:	f000 f882 	bl	8014e38 <_malloc_usable_size_r>
 8014d34:	4284      	cmp	r4, r0
 8014d36:	4607      	mov	r7, r0
 8014d38:	d802      	bhi.n	8014d40 <_realloc_r+0x34>
 8014d3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014d3e:	d812      	bhi.n	8014d66 <_realloc_r+0x5a>
 8014d40:	4621      	mov	r1, r4
 8014d42:	4640      	mov	r0, r8
 8014d44:	f7fe fd54 	bl	80137f0 <_malloc_r>
 8014d48:	4605      	mov	r5, r0
 8014d4a:	2800      	cmp	r0, #0
 8014d4c:	d0ed      	beq.n	8014d2a <_realloc_r+0x1e>
 8014d4e:	42bc      	cmp	r4, r7
 8014d50:	4622      	mov	r2, r4
 8014d52:	4631      	mov	r1, r6
 8014d54:	bf28      	it	cs
 8014d56:	463a      	movcs	r2, r7
 8014d58:	f7fa ff60 	bl	800fc1c <memcpy>
 8014d5c:	4631      	mov	r1, r6
 8014d5e:	4640      	mov	r0, r8
 8014d60:	f7fe fcda 	bl	8013718 <_free_r>
 8014d64:	e7e1      	b.n	8014d2a <_realloc_r+0x1e>
 8014d66:	4635      	mov	r5, r6
 8014d68:	e7df      	b.n	8014d2a <_realloc_r+0x1e>

08014d6a <_raise_r>:
 8014d6a:	291f      	cmp	r1, #31
 8014d6c:	b538      	push	{r3, r4, r5, lr}
 8014d6e:	4604      	mov	r4, r0
 8014d70:	460d      	mov	r5, r1
 8014d72:	d904      	bls.n	8014d7e <_raise_r+0x14>
 8014d74:	2316      	movs	r3, #22
 8014d76:	6003      	str	r3, [r0, #0]
 8014d78:	f04f 30ff 	mov.w	r0, #4294967295
 8014d7c:	bd38      	pop	{r3, r4, r5, pc}
 8014d7e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014d80:	b112      	cbz	r2, 8014d88 <_raise_r+0x1e>
 8014d82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014d86:	b94b      	cbnz	r3, 8014d9c <_raise_r+0x32>
 8014d88:	4620      	mov	r0, r4
 8014d8a:	f000 f831 	bl	8014df0 <_getpid_r>
 8014d8e:	462a      	mov	r2, r5
 8014d90:	4601      	mov	r1, r0
 8014d92:	4620      	mov	r0, r4
 8014d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d98:	f000 b818 	b.w	8014dcc <_kill_r>
 8014d9c:	2b01      	cmp	r3, #1
 8014d9e:	d00a      	beq.n	8014db6 <_raise_r+0x4c>
 8014da0:	1c59      	adds	r1, r3, #1
 8014da2:	d103      	bne.n	8014dac <_raise_r+0x42>
 8014da4:	2316      	movs	r3, #22
 8014da6:	6003      	str	r3, [r0, #0]
 8014da8:	2001      	movs	r0, #1
 8014daa:	e7e7      	b.n	8014d7c <_raise_r+0x12>
 8014dac:	2400      	movs	r4, #0
 8014dae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014db2:	4628      	mov	r0, r5
 8014db4:	4798      	blx	r3
 8014db6:	2000      	movs	r0, #0
 8014db8:	e7e0      	b.n	8014d7c <_raise_r+0x12>
	...

08014dbc <raise>:
 8014dbc:	4b02      	ldr	r3, [pc, #8]	; (8014dc8 <raise+0xc>)
 8014dbe:	4601      	mov	r1, r0
 8014dc0:	6818      	ldr	r0, [r3, #0]
 8014dc2:	f7ff bfd2 	b.w	8014d6a <_raise_r>
 8014dc6:	bf00      	nop
 8014dc8:	200003e0 	.word	0x200003e0

08014dcc <_kill_r>:
 8014dcc:	b538      	push	{r3, r4, r5, lr}
 8014dce:	4d07      	ldr	r5, [pc, #28]	; (8014dec <_kill_r+0x20>)
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	4604      	mov	r4, r0
 8014dd4:	4608      	mov	r0, r1
 8014dd6:	4611      	mov	r1, r2
 8014dd8:	602b      	str	r3, [r5, #0]
 8014dda:	f7ed fe93 	bl	8002b04 <_kill>
 8014dde:	1c43      	adds	r3, r0, #1
 8014de0:	d102      	bne.n	8014de8 <_kill_r+0x1c>
 8014de2:	682b      	ldr	r3, [r5, #0]
 8014de4:	b103      	cbz	r3, 8014de8 <_kill_r+0x1c>
 8014de6:	6023      	str	r3, [r4, #0]
 8014de8:	bd38      	pop	{r3, r4, r5, pc}
 8014dea:	bf00      	nop
 8014dec:	2000b688 	.word	0x2000b688

08014df0 <_getpid_r>:
 8014df0:	f7ed be80 	b.w	8002af4 <_getpid>

08014df4 <_fstat_r>:
 8014df4:	b538      	push	{r3, r4, r5, lr}
 8014df6:	4d07      	ldr	r5, [pc, #28]	; (8014e14 <_fstat_r+0x20>)
 8014df8:	2300      	movs	r3, #0
 8014dfa:	4604      	mov	r4, r0
 8014dfc:	4608      	mov	r0, r1
 8014dfe:	4611      	mov	r1, r2
 8014e00:	602b      	str	r3, [r5, #0]
 8014e02:	f7ed fede 	bl	8002bc2 <_fstat>
 8014e06:	1c43      	adds	r3, r0, #1
 8014e08:	d102      	bne.n	8014e10 <_fstat_r+0x1c>
 8014e0a:	682b      	ldr	r3, [r5, #0]
 8014e0c:	b103      	cbz	r3, 8014e10 <_fstat_r+0x1c>
 8014e0e:	6023      	str	r3, [r4, #0]
 8014e10:	bd38      	pop	{r3, r4, r5, pc}
 8014e12:	bf00      	nop
 8014e14:	2000b688 	.word	0x2000b688

08014e18 <_isatty_r>:
 8014e18:	b538      	push	{r3, r4, r5, lr}
 8014e1a:	4d06      	ldr	r5, [pc, #24]	; (8014e34 <_isatty_r+0x1c>)
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	4604      	mov	r4, r0
 8014e20:	4608      	mov	r0, r1
 8014e22:	602b      	str	r3, [r5, #0]
 8014e24:	f7ed fedd 	bl	8002be2 <_isatty>
 8014e28:	1c43      	adds	r3, r0, #1
 8014e2a:	d102      	bne.n	8014e32 <_isatty_r+0x1a>
 8014e2c:	682b      	ldr	r3, [r5, #0]
 8014e2e:	b103      	cbz	r3, 8014e32 <_isatty_r+0x1a>
 8014e30:	6023      	str	r3, [r4, #0]
 8014e32:	bd38      	pop	{r3, r4, r5, pc}
 8014e34:	2000b688 	.word	0x2000b688

08014e38 <_malloc_usable_size_r>:
 8014e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e3c:	1f18      	subs	r0, r3, #4
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	bfbc      	itt	lt
 8014e42:	580b      	ldrlt	r3, [r1, r0]
 8014e44:	18c0      	addlt	r0, r0, r3
 8014e46:	4770      	bx	lr

08014e48 <pow>:
 8014e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e4a:	ed2d 8b02 	vpush	{d8}
 8014e4e:	eeb0 8a40 	vmov.f32	s16, s0
 8014e52:	eef0 8a60 	vmov.f32	s17, s1
 8014e56:	ec55 4b11 	vmov	r4, r5, d1
 8014e5a:	f000 f891 	bl	8014f80 <__ieee754_pow>
 8014e5e:	4622      	mov	r2, r4
 8014e60:	462b      	mov	r3, r5
 8014e62:	4620      	mov	r0, r4
 8014e64:	4629      	mov	r1, r5
 8014e66:	ec57 6b10 	vmov	r6, r7, d0
 8014e6a:	f7eb fe8f 	bl	8000b8c <__aeabi_dcmpun>
 8014e6e:	2800      	cmp	r0, #0
 8014e70:	d13b      	bne.n	8014eea <pow+0xa2>
 8014e72:	ec51 0b18 	vmov	r0, r1, d8
 8014e76:	2200      	movs	r2, #0
 8014e78:	2300      	movs	r3, #0
 8014e7a:	f7eb fe55 	bl	8000b28 <__aeabi_dcmpeq>
 8014e7e:	b1b8      	cbz	r0, 8014eb0 <pow+0x68>
 8014e80:	2200      	movs	r2, #0
 8014e82:	2300      	movs	r3, #0
 8014e84:	4620      	mov	r0, r4
 8014e86:	4629      	mov	r1, r5
 8014e88:	f7eb fe4e 	bl	8000b28 <__aeabi_dcmpeq>
 8014e8c:	2800      	cmp	r0, #0
 8014e8e:	d146      	bne.n	8014f1e <pow+0xd6>
 8014e90:	ec45 4b10 	vmov	d0, r4, r5
 8014e94:	f000 fe8d 	bl	8015bb2 <finite>
 8014e98:	b338      	cbz	r0, 8014eea <pow+0xa2>
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	4620      	mov	r0, r4
 8014ea0:	4629      	mov	r1, r5
 8014ea2:	f7eb fe4b 	bl	8000b3c <__aeabi_dcmplt>
 8014ea6:	b300      	cbz	r0, 8014eea <pow+0xa2>
 8014ea8:	f7fa fe8e 	bl	800fbc8 <__errno>
 8014eac:	2322      	movs	r3, #34	; 0x22
 8014eae:	e01b      	b.n	8014ee8 <pow+0xa0>
 8014eb0:	ec47 6b10 	vmov	d0, r6, r7
 8014eb4:	f000 fe7d 	bl	8015bb2 <finite>
 8014eb8:	b9e0      	cbnz	r0, 8014ef4 <pow+0xac>
 8014eba:	eeb0 0a48 	vmov.f32	s0, s16
 8014ebe:	eef0 0a68 	vmov.f32	s1, s17
 8014ec2:	f000 fe76 	bl	8015bb2 <finite>
 8014ec6:	b1a8      	cbz	r0, 8014ef4 <pow+0xac>
 8014ec8:	ec45 4b10 	vmov	d0, r4, r5
 8014ecc:	f000 fe71 	bl	8015bb2 <finite>
 8014ed0:	b180      	cbz	r0, 8014ef4 <pow+0xac>
 8014ed2:	4632      	mov	r2, r6
 8014ed4:	463b      	mov	r3, r7
 8014ed6:	4630      	mov	r0, r6
 8014ed8:	4639      	mov	r1, r7
 8014eda:	f7eb fe57 	bl	8000b8c <__aeabi_dcmpun>
 8014ede:	2800      	cmp	r0, #0
 8014ee0:	d0e2      	beq.n	8014ea8 <pow+0x60>
 8014ee2:	f7fa fe71 	bl	800fbc8 <__errno>
 8014ee6:	2321      	movs	r3, #33	; 0x21
 8014ee8:	6003      	str	r3, [r0, #0]
 8014eea:	ecbd 8b02 	vpop	{d8}
 8014eee:	ec47 6b10 	vmov	d0, r6, r7
 8014ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	4630      	mov	r0, r6
 8014efa:	4639      	mov	r1, r7
 8014efc:	f7eb fe14 	bl	8000b28 <__aeabi_dcmpeq>
 8014f00:	2800      	cmp	r0, #0
 8014f02:	d0f2      	beq.n	8014eea <pow+0xa2>
 8014f04:	eeb0 0a48 	vmov.f32	s0, s16
 8014f08:	eef0 0a68 	vmov.f32	s1, s17
 8014f0c:	f000 fe51 	bl	8015bb2 <finite>
 8014f10:	2800      	cmp	r0, #0
 8014f12:	d0ea      	beq.n	8014eea <pow+0xa2>
 8014f14:	ec45 4b10 	vmov	d0, r4, r5
 8014f18:	f000 fe4b 	bl	8015bb2 <finite>
 8014f1c:	e7c3      	b.n	8014ea6 <pow+0x5e>
 8014f1e:	4f01      	ldr	r7, [pc, #4]	; (8014f24 <pow+0xdc>)
 8014f20:	2600      	movs	r6, #0
 8014f22:	e7e2      	b.n	8014eea <pow+0xa2>
 8014f24:	3ff00000 	.word	0x3ff00000

08014f28 <sqrt>:
 8014f28:	b538      	push	{r3, r4, r5, lr}
 8014f2a:	ed2d 8b02 	vpush	{d8}
 8014f2e:	ec55 4b10 	vmov	r4, r5, d0
 8014f32:	f000 fd53 	bl	80159dc <__ieee754_sqrt>
 8014f36:	4622      	mov	r2, r4
 8014f38:	462b      	mov	r3, r5
 8014f3a:	4620      	mov	r0, r4
 8014f3c:	4629      	mov	r1, r5
 8014f3e:	eeb0 8a40 	vmov.f32	s16, s0
 8014f42:	eef0 8a60 	vmov.f32	s17, s1
 8014f46:	f7eb fe21 	bl	8000b8c <__aeabi_dcmpun>
 8014f4a:	b990      	cbnz	r0, 8014f72 <sqrt+0x4a>
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	2300      	movs	r3, #0
 8014f50:	4620      	mov	r0, r4
 8014f52:	4629      	mov	r1, r5
 8014f54:	f7eb fdf2 	bl	8000b3c <__aeabi_dcmplt>
 8014f58:	b158      	cbz	r0, 8014f72 <sqrt+0x4a>
 8014f5a:	f7fa fe35 	bl	800fbc8 <__errno>
 8014f5e:	2321      	movs	r3, #33	; 0x21
 8014f60:	6003      	str	r3, [r0, #0]
 8014f62:	2200      	movs	r2, #0
 8014f64:	2300      	movs	r3, #0
 8014f66:	4610      	mov	r0, r2
 8014f68:	4619      	mov	r1, r3
 8014f6a:	f7eb fc9f 	bl	80008ac <__aeabi_ddiv>
 8014f6e:	ec41 0b18 	vmov	d8, r0, r1
 8014f72:	eeb0 0a48 	vmov.f32	s0, s16
 8014f76:	eef0 0a68 	vmov.f32	s1, s17
 8014f7a:	ecbd 8b02 	vpop	{d8}
 8014f7e:	bd38      	pop	{r3, r4, r5, pc}

08014f80 <__ieee754_pow>:
 8014f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f84:	ed2d 8b06 	vpush	{d8-d10}
 8014f88:	b089      	sub	sp, #36	; 0x24
 8014f8a:	ed8d 1b00 	vstr	d1, [sp]
 8014f8e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8014f92:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8014f96:	ea58 0102 	orrs.w	r1, r8, r2
 8014f9a:	ec57 6b10 	vmov	r6, r7, d0
 8014f9e:	d115      	bne.n	8014fcc <__ieee754_pow+0x4c>
 8014fa0:	19b3      	adds	r3, r6, r6
 8014fa2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8014fa6:	4152      	adcs	r2, r2
 8014fa8:	4299      	cmp	r1, r3
 8014faa:	4b89      	ldr	r3, [pc, #548]	; (80151d0 <__ieee754_pow+0x250>)
 8014fac:	4193      	sbcs	r3, r2
 8014fae:	f080 84d2 	bcs.w	8015956 <__ieee754_pow+0x9d6>
 8014fb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014fb6:	4630      	mov	r0, r6
 8014fb8:	4639      	mov	r1, r7
 8014fba:	f7eb f997 	bl	80002ec <__adddf3>
 8014fbe:	ec41 0b10 	vmov	d0, r0, r1
 8014fc2:	b009      	add	sp, #36	; 0x24
 8014fc4:	ecbd 8b06 	vpop	{d8-d10}
 8014fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fcc:	4b81      	ldr	r3, [pc, #516]	; (80151d4 <__ieee754_pow+0x254>)
 8014fce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8014fd2:	429c      	cmp	r4, r3
 8014fd4:	ee10 aa10 	vmov	sl, s0
 8014fd8:	463d      	mov	r5, r7
 8014fda:	dc06      	bgt.n	8014fea <__ieee754_pow+0x6a>
 8014fdc:	d101      	bne.n	8014fe2 <__ieee754_pow+0x62>
 8014fde:	2e00      	cmp	r6, #0
 8014fe0:	d1e7      	bne.n	8014fb2 <__ieee754_pow+0x32>
 8014fe2:	4598      	cmp	r8, r3
 8014fe4:	dc01      	bgt.n	8014fea <__ieee754_pow+0x6a>
 8014fe6:	d10f      	bne.n	8015008 <__ieee754_pow+0x88>
 8014fe8:	b172      	cbz	r2, 8015008 <__ieee754_pow+0x88>
 8014fea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8014fee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8014ff2:	ea55 050a 	orrs.w	r5, r5, sl
 8014ff6:	d1dc      	bne.n	8014fb2 <__ieee754_pow+0x32>
 8014ff8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014ffc:	18db      	adds	r3, r3, r3
 8014ffe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8015002:	4152      	adcs	r2, r2
 8015004:	429d      	cmp	r5, r3
 8015006:	e7d0      	b.n	8014faa <__ieee754_pow+0x2a>
 8015008:	2d00      	cmp	r5, #0
 801500a:	da3b      	bge.n	8015084 <__ieee754_pow+0x104>
 801500c:	4b72      	ldr	r3, [pc, #456]	; (80151d8 <__ieee754_pow+0x258>)
 801500e:	4598      	cmp	r8, r3
 8015010:	dc51      	bgt.n	80150b6 <__ieee754_pow+0x136>
 8015012:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8015016:	4598      	cmp	r8, r3
 8015018:	f340 84ac 	ble.w	8015974 <__ieee754_pow+0x9f4>
 801501c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015020:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015024:	2b14      	cmp	r3, #20
 8015026:	dd0f      	ble.n	8015048 <__ieee754_pow+0xc8>
 8015028:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801502c:	fa22 f103 	lsr.w	r1, r2, r3
 8015030:	fa01 f303 	lsl.w	r3, r1, r3
 8015034:	4293      	cmp	r3, r2
 8015036:	f040 849d 	bne.w	8015974 <__ieee754_pow+0x9f4>
 801503a:	f001 0101 	and.w	r1, r1, #1
 801503e:	f1c1 0302 	rsb	r3, r1, #2
 8015042:	9304      	str	r3, [sp, #16]
 8015044:	b182      	cbz	r2, 8015068 <__ieee754_pow+0xe8>
 8015046:	e05f      	b.n	8015108 <__ieee754_pow+0x188>
 8015048:	2a00      	cmp	r2, #0
 801504a:	d15b      	bne.n	8015104 <__ieee754_pow+0x184>
 801504c:	f1c3 0314 	rsb	r3, r3, #20
 8015050:	fa48 f103 	asr.w	r1, r8, r3
 8015054:	fa01 f303 	lsl.w	r3, r1, r3
 8015058:	4543      	cmp	r3, r8
 801505a:	f040 8488 	bne.w	801596e <__ieee754_pow+0x9ee>
 801505e:	f001 0101 	and.w	r1, r1, #1
 8015062:	f1c1 0302 	rsb	r3, r1, #2
 8015066:	9304      	str	r3, [sp, #16]
 8015068:	4b5c      	ldr	r3, [pc, #368]	; (80151dc <__ieee754_pow+0x25c>)
 801506a:	4598      	cmp	r8, r3
 801506c:	d132      	bne.n	80150d4 <__ieee754_pow+0x154>
 801506e:	f1b9 0f00 	cmp.w	r9, #0
 8015072:	f280 8478 	bge.w	8015966 <__ieee754_pow+0x9e6>
 8015076:	4959      	ldr	r1, [pc, #356]	; (80151dc <__ieee754_pow+0x25c>)
 8015078:	4632      	mov	r2, r6
 801507a:	463b      	mov	r3, r7
 801507c:	2000      	movs	r0, #0
 801507e:	f7eb fc15 	bl	80008ac <__aeabi_ddiv>
 8015082:	e79c      	b.n	8014fbe <__ieee754_pow+0x3e>
 8015084:	2300      	movs	r3, #0
 8015086:	9304      	str	r3, [sp, #16]
 8015088:	2a00      	cmp	r2, #0
 801508a:	d13d      	bne.n	8015108 <__ieee754_pow+0x188>
 801508c:	4b51      	ldr	r3, [pc, #324]	; (80151d4 <__ieee754_pow+0x254>)
 801508e:	4598      	cmp	r8, r3
 8015090:	d1ea      	bne.n	8015068 <__ieee754_pow+0xe8>
 8015092:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8015096:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801509a:	ea53 030a 	orrs.w	r3, r3, sl
 801509e:	f000 845a 	beq.w	8015956 <__ieee754_pow+0x9d6>
 80150a2:	4b4f      	ldr	r3, [pc, #316]	; (80151e0 <__ieee754_pow+0x260>)
 80150a4:	429c      	cmp	r4, r3
 80150a6:	dd08      	ble.n	80150ba <__ieee754_pow+0x13a>
 80150a8:	f1b9 0f00 	cmp.w	r9, #0
 80150ac:	f2c0 8457 	blt.w	801595e <__ieee754_pow+0x9de>
 80150b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150b4:	e783      	b.n	8014fbe <__ieee754_pow+0x3e>
 80150b6:	2302      	movs	r3, #2
 80150b8:	e7e5      	b.n	8015086 <__ieee754_pow+0x106>
 80150ba:	f1b9 0f00 	cmp.w	r9, #0
 80150be:	f04f 0000 	mov.w	r0, #0
 80150c2:	f04f 0100 	mov.w	r1, #0
 80150c6:	f6bf af7a 	bge.w	8014fbe <__ieee754_pow+0x3e>
 80150ca:	e9dd 0300 	ldrd	r0, r3, [sp]
 80150ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80150d2:	e774      	b.n	8014fbe <__ieee754_pow+0x3e>
 80150d4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80150d8:	d106      	bne.n	80150e8 <__ieee754_pow+0x168>
 80150da:	4632      	mov	r2, r6
 80150dc:	463b      	mov	r3, r7
 80150de:	4630      	mov	r0, r6
 80150e0:	4639      	mov	r1, r7
 80150e2:	f7eb fab9 	bl	8000658 <__aeabi_dmul>
 80150e6:	e76a      	b.n	8014fbe <__ieee754_pow+0x3e>
 80150e8:	4b3e      	ldr	r3, [pc, #248]	; (80151e4 <__ieee754_pow+0x264>)
 80150ea:	4599      	cmp	r9, r3
 80150ec:	d10c      	bne.n	8015108 <__ieee754_pow+0x188>
 80150ee:	2d00      	cmp	r5, #0
 80150f0:	db0a      	blt.n	8015108 <__ieee754_pow+0x188>
 80150f2:	ec47 6b10 	vmov	d0, r6, r7
 80150f6:	b009      	add	sp, #36	; 0x24
 80150f8:	ecbd 8b06 	vpop	{d8-d10}
 80150fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015100:	f000 bc6c 	b.w	80159dc <__ieee754_sqrt>
 8015104:	2300      	movs	r3, #0
 8015106:	9304      	str	r3, [sp, #16]
 8015108:	ec47 6b10 	vmov	d0, r6, r7
 801510c:	f000 fd48 	bl	8015ba0 <fabs>
 8015110:	ec51 0b10 	vmov	r0, r1, d0
 8015114:	f1ba 0f00 	cmp.w	sl, #0
 8015118:	d129      	bne.n	801516e <__ieee754_pow+0x1ee>
 801511a:	b124      	cbz	r4, 8015126 <__ieee754_pow+0x1a6>
 801511c:	4b2f      	ldr	r3, [pc, #188]	; (80151dc <__ieee754_pow+0x25c>)
 801511e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8015122:	429a      	cmp	r2, r3
 8015124:	d123      	bne.n	801516e <__ieee754_pow+0x1ee>
 8015126:	f1b9 0f00 	cmp.w	r9, #0
 801512a:	da05      	bge.n	8015138 <__ieee754_pow+0x1b8>
 801512c:	4602      	mov	r2, r0
 801512e:	460b      	mov	r3, r1
 8015130:	2000      	movs	r0, #0
 8015132:	492a      	ldr	r1, [pc, #168]	; (80151dc <__ieee754_pow+0x25c>)
 8015134:	f7eb fbba 	bl	80008ac <__aeabi_ddiv>
 8015138:	2d00      	cmp	r5, #0
 801513a:	f6bf af40 	bge.w	8014fbe <__ieee754_pow+0x3e>
 801513e:	9b04      	ldr	r3, [sp, #16]
 8015140:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015144:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015148:	4323      	orrs	r3, r4
 801514a:	d108      	bne.n	801515e <__ieee754_pow+0x1de>
 801514c:	4602      	mov	r2, r0
 801514e:	460b      	mov	r3, r1
 8015150:	4610      	mov	r0, r2
 8015152:	4619      	mov	r1, r3
 8015154:	f7eb f8c8 	bl	80002e8 <__aeabi_dsub>
 8015158:	4602      	mov	r2, r0
 801515a:	460b      	mov	r3, r1
 801515c:	e78f      	b.n	801507e <__ieee754_pow+0xfe>
 801515e:	9b04      	ldr	r3, [sp, #16]
 8015160:	2b01      	cmp	r3, #1
 8015162:	f47f af2c 	bne.w	8014fbe <__ieee754_pow+0x3e>
 8015166:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801516a:	4619      	mov	r1, r3
 801516c:	e727      	b.n	8014fbe <__ieee754_pow+0x3e>
 801516e:	0feb      	lsrs	r3, r5, #31
 8015170:	3b01      	subs	r3, #1
 8015172:	9306      	str	r3, [sp, #24]
 8015174:	9a06      	ldr	r2, [sp, #24]
 8015176:	9b04      	ldr	r3, [sp, #16]
 8015178:	4313      	orrs	r3, r2
 801517a:	d102      	bne.n	8015182 <__ieee754_pow+0x202>
 801517c:	4632      	mov	r2, r6
 801517e:	463b      	mov	r3, r7
 8015180:	e7e6      	b.n	8015150 <__ieee754_pow+0x1d0>
 8015182:	4b19      	ldr	r3, [pc, #100]	; (80151e8 <__ieee754_pow+0x268>)
 8015184:	4598      	cmp	r8, r3
 8015186:	f340 80fb 	ble.w	8015380 <__ieee754_pow+0x400>
 801518a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801518e:	4598      	cmp	r8, r3
 8015190:	4b13      	ldr	r3, [pc, #76]	; (80151e0 <__ieee754_pow+0x260>)
 8015192:	dd0c      	ble.n	80151ae <__ieee754_pow+0x22e>
 8015194:	429c      	cmp	r4, r3
 8015196:	dc0f      	bgt.n	80151b8 <__ieee754_pow+0x238>
 8015198:	f1b9 0f00 	cmp.w	r9, #0
 801519c:	da0f      	bge.n	80151be <__ieee754_pow+0x23e>
 801519e:	2000      	movs	r0, #0
 80151a0:	b009      	add	sp, #36	; 0x24
 80151a2:	ecbd 8b06 	vpop	{d8-d10}
 80151a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151aa:	f000 bcf0 	b.w	8015b8e <__math_oflow>
 80151ae:	429c      	cmp	r4, r3
 80151b0:	dbf2      	blt.n	8015198 <__ieee754_pow+0x218>
 80151b2:	4b0a      	ldr	r3, [pc, #40]	; (80151dc <__ieee754_pow+0x25c>)
 80151b4:	429c      	cmp	r4, r3
 80151b6:	dd19      	ble.n	80151ec <__ieee754_pow+0x26c>
 80151b8:	f1b9 0f00 	cmp.w	r9, #0
 80151bc:	dcef      	bgt.n	801519e <__ieee754_pow+0x21e>
 80151be:	2000      	movs	r0, #0
 80151c0:	b009      	add	sp, #36	; 0x24
 80151c2:	ecbd 8b06 	vpop	{d8-d10}
 80151c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151ca:	f000 bcd7 	b.w	8015b7c <__math_uflow>
 80151ce:	bf00      	nop
 80151d0:	fff00000 	.word	0xfff00000
 80151d4:	7ff00000 	.word	0x7ff00000
 80151d8:	433fffff 	.word	0x433fffff
 80151dc:	3ff00000 	.word	0x3ff00000
 80151e0:	3fefffff 	.word	0x3fefffff
 80151e4:	3fe00000 	.word	0x3fe00000
 80151e8:	41e00000 	.word	0x41e00000
 80151ec:	4b60      	ldr	r3, [pc, #384]	; (8015370 <__ieee754_pow+0x3f0>)
 80151ee:	2200      	movs	r2, #0
 80151f0:	f7eb f87a 	bl	80002e8 <__aeabi_dsub>
 80151f4:	a354      	add	r3, pc, #336	; (adr r3, 8015348 <__ieee754_pow+0x3c8>)
 80151f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151fa:	4604      	mov	r4, r0
 80151fc:	460d      	mov	r5, r1
 80151fe:	f7eb fa2b 	bl	8000658 <__aeabi_dmul>
 8015202:	a353      	add	r3, pc, #332	; (adr r3, 8015350 <__ieee754_pow+0x3d0>)
 8015204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015208:	4606      	mov	r6, r0
 801520a:	460f      	mov	r7, r1
 801520c:	4620      	mov	r0, r4
 801520e:	4629      	mov	r1, r5
 8015210:	f7eb fa22 	bl	8000658 <__aeabi_dmul>
 8015214:	4b57      	ldr	r3, [pc, #348]	; (8015374 <__ieee754_pow+0x3f4>)
 8015216:	4682      	mov	sl, r0
 8015218:	468b      	mov	fp, r1
 801521a:	2200      	movs	r2, #0
 801521c:	4620      	mov	r0, r4
 801521e:	4629      	mov	r1, r5
 8015220:	f7eb fa1a 	bl	8000658 <__aeabi_dmul>
 8015224:	4602      	mov	r2, r0
 8015226:	460b      	mov	r3, r1
 8015228:	a14b      	add	r1, pc, #300	; (adr r1, 8015358 <__ieee754_pow+0x3d8>)
 801522a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801522e:	f7eb f85b 	bl	80002e8 <__aeabi_dsub>
 8015232:	4622      	mov	r2, r4
 8015234:	462b      	mov	r3, r5
 8015236:	f7eb fa0f 	bl	8000658 <__aeabi_dmul>
 801523a:	4602      	mov	r2, r0
 801523c:	460b      	mov	r3, r1
 801523e:	2000      	movs	r0, #0
 8015240:	494d      	ldr	r1, [pc, #308]	; (8015378 <__ieee754_pow+0x3f8>)
 8015242:	f7eb f851 	bl	80002e8 <__aeabi_dsub>
 8015246:	4622      	mov	r2, r4
 8015248:	4680      	mov	r8, r0
 801524a:	4689      	mov	r9, r1
 801524c:	462b      	mov	r3, r5
 801524e:	4620      	mov	r0, r4
 8015250:	4629      	mov	r1, r5
 8015252:	f7eb fa01 	bl	8000658 <__aeabi_dmul>
 8015256:	4602      	mov	r2, r0
 8015258:	460b      	mov	r3, r1
 801525a:	4640      	mov	r0, r8
 801525c:	4649      	mov	r1, r9
 801525e:	f7eb f9fb 	bl	8000658 <__aeabi_dmul>
 8015262:	a33f      	add	r3, pc, #252	; (adr r3, 8015360 <__ieee754_pow+0x3e0>)
 8015264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015268:	f7eb f9f6 	bl	8000658 <__aeabi_dmul>
 801526c:	4602      	mov	r2, r0
 801526e:	460b      	mov	r3, r1
 8015270:	4650      	mov	r0, sl
 8015272:	4659      	mov	r1, fp
 8015274:	f7eb f838 	bl	80002e8 <__aeabi_dsub>
 8015278:	4602      	mov	r2, r0
 801527a:	460b      	mov	r3, r1
 801527c:	4680      	mov	r8, r0
 801527e:	4689      	mov	r9, r1
 8015280:	4630      	mov	r0, r6
 8015282:	4639      	mov	r1, r7
 8015284:	f7eb f832 	bl	80002ec <__adddf3>
 8015288:	2000      	movs	r0, #0
 801528a:	4632      	mov	r2, r6
 801528c:	463b      	mov	r3, r7
 801528e:	4604      	mov	r4, r0
 8015290:	460d      	mov	r5, r1
 8015292:	f7eb f829 	bl	80002e8 <__aeabi_dsub>
 8015296:	4602      	mov	r2, r0
 8015298:	460b      	mov	r3, r1
 801529a:	4640      	mov	r0, r8
 801529c:	4649      	mov	r1, r9
 801529e:	f7eb f823 	bl	80002e8 <__aeabi_dsub>
 80152a2:	9b04      	ldr	r3, [sp, #16]
 80152a4:	9a06      	ldr	r2, [sp, #24]
 80152a6:	3b01      	subs	r3, #1
 80152a8:	4313      	orrs	r3, r2
 80152aa:	4682      	mov	sl, r0
 80152ac:	468b      	mov	fp, r1
 80152ae:	f040 81e7 	bne.w	8015680 <__ieee754_pow+0x700>
 80152b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8015368 <__ieee754_pow+0x3e8>
 80152b6:	eeb0 8a47 	vmov.f32	s16, s14
 80152ba:	eef0 8a67 	vmov.f32	s17, s15
 80152be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80152c2:	2600      	movs	r6, #0
 80152c4:	4632      	mov	r2, r6
 80152c6:	463b      	mov	r3, r7
 80152c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80152cc:	f7eb f80c 	bl	80002e8 <__aeabi_dsub>
 80152d0:	4622      	mov	r2, r4
 80152d2:	462b      	mov	r3, r5
 80152d4:	f7eb f9c0 	bl	8000658 <__aeabi_dmul>
 80152d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80152dc:	4680      	mov	r8, r0
 80152de:	4689      	mov	r9, r1
 80152e0:	4650      	mov	r0, sl
 80152e2:	4659      	mov	r1, fp
 80152e4:	f7eb f9b8 	bl	8000658 <__aeabi_dmul>
 80152e8:	4602      	mov	r2, r0
 80152ea:	460b      	mov	r3, r1
 80152ec:	4640      	mov	r0, r8
 80152ee:	4649      	mov	r1, r9
 80152f0:	f7ea fffc 	bl	80002ec <__adddf3>
 80152f4:	4632      	mov	r2, r6
 80152f6:	463b      	mov	r3, r7
 80152f8:	4680      	mov	r8, r0
 80152fa:	4689      	mov	r9, r1
 80152fc:	4620      	mov	r0, r4
 80152fe:	4629      	mov	r1, r5
 8015300:	f7eb f9aa 	bl	8000658 <__aeabi_dmul>
 8015304:	460b      	mov	r3, r1
 8015306:	4604      	mov	r4, r0
 8015308:	460d      	mov	r5, r1
 801530a:	4602      	mov	r2, r0
 801530c:	4649      	mov	r1, r9
 801530e:	4640      	mov	r0, r8
 8015310:	f7ea ffec 	bl	80002ec <__adddf3>
 8015314:	4b19      	ldr	r3, [pc, #100]	; (801537c <__ieee754_pow+0x3fc>)
 8015316:	4299      	cmp	r1, r3
 8015318:	ec45 4b19 	vmov	d9, r4, r5
 801531c:	4606      	mov	r6, r0
 801531e:	460f      	mov	r7, r1
 8015320:	468b      	mov	fp, r1
 8015322:	f340 82f1 	ble.w	8015908 <__ieee754_pow+0x988>
 8015326:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801532a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801532e:	4303      	orrs	r3, r0
 8015330:	f000 81e4 	beq.w	80156fc <__ieee754_pow+0x77c>
 8015334:	ec51 0b18 	vmov	r0, r1, d8
 8015338:	2200      	movs	r2, #0
 801533a:	2300      	movs	r3, #0
 801533c:	f7eb fbfe 	bl	8000b3c <__aeabi_dcmplt>
 8015340:	3800      	subs	r0, #0
 8015342:	bf18      	it	ne
 8015344:	2001      	movne	r0, #1
 8015346:	e72b      	b.n	80151a0 <__ieee754_pow+0x220>
 8015348:	60000000 	.word	0x60000000
 801534c:	3ff71547 	.word	0x3ff71547
 8015350:	f85ddf44 	.word	0xf85ddf44
 8015354:	3e54ae0b 	.word	0x3e54ae0b
 8015358:	55555555 	.word	0x55555555
 801535c:	3fd55555 	.word	0x3fd55555
 8015360:	652b82fe 	.word	0x652b82fe
 8015364:	3ff71547 	.word	0x3ff71547
 8015368:	00000000 	.word	0x00000000
 801536c:	bff00000 	.word	0xbff00000
 8015370:	3ff00000 	.word	0x3ff00000
 8015374:	3fd00000 	.word	0x3fd00000
 8015378:	3fe00000 	.word	0x3fe00000
 801537c:	408fffff 	.word	0x408fffff
 8015380:	4bd5      	ldr	r3, [pc, #852]	; (80156d8 <__ieee754_pow+0x758>)
 8015382:	402b      	ands	r3, r5
 8015384:	2200      	movs	r2, #0
 8015386:	b92b      	cbnz	r3, 8015394 <__ieee754_pow+0x414>
 8015388:	4bd4      	ldr	r3, [pc, #848]	; (80156dc <__ieee754_pow+0x75c>)
 801538a:	f7eb f965 	bl	8000658 <__aeabi_dmul>
 801538e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8015392:	460c      	mov	r4, r1
 8015394:	1523      	asrs	r3, r4, #20
 8015396:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801539a:	4413      	add	r3, r2
 801539c:	9305      	str	r3, [sp, #20]
 801539e:	4bd0      	ldr	r3, [pc, #832]	; (80156e0 <__ieee754_pow+0x760>)
 80153a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80153a4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80153a8:	429c      	cmp	r4, r3
 80153aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80153ae:	dd08      	ble.n	80153c2 <__ieee754_pow+0x442>
 80153b0:	4bcc      	ldr	r3, [pc, #816]	; (80156e4 <__ieee754_pow+0x764>)
 80153b2:	429c      	cmp	r4, r3
 80153b4:	f340 8162 	ble.w	801567c <__ieee754_pow+0x6fc>
 80153b8:	9b05      	ldr	r3, [sp, #20]
 80153ba:	3301      	adds	r3, #1
 80153bc:	9305      	str	r3, [sp, #20]
 80153be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80153c2:	2400      	movs	r4, #0
 80153c4:	00e3      	lsls	r3, r4, #3
 80153c6:	9307      	str	r3, [sp, #28]
 80153c8:	4bc7      	ldr	r3, [pc, #796]	; (80156e8 <__ieee754_pow+0x768>)
 80153ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80153ce:	ed93 7b00 	vldr	d7, [r3]
 80153d2:	4629      	mov	r1, r5
 80153d4:	ec53 2b17 	vmov	r2, r3, d7
 80153d8:	eeb0 9a47 	vmov.f32	s18, s14
 80153dc:	eef0 9a67 	vmov.f32	s19, s15
 80153e0:	4682      	mov	sl, r0
 80153e2:	f7ea ff81 	bl	80002e8 <__aeabi_dsub>
 80153e6:	4652      	mov	r2, sl
 80153e8:	4606      	mov	r6, r0
 80153ea:	460f      	mov	r7, r1
 80153ec:	462b      	mov	r3, r5
 80153ee:	ec51 0b19 	vmov	r0, r1, d9
 80153f2:	f7ea ff7b 	bl	80002ec <__adddf3>
 80153f6:	4602      	mov	r2, r0
 80153f8:	460b      	mov	r3, r1
 80153fa:	2000      	movs	r0, #0
 80153fc:	49bb      	ldr	r1, [pc, #748]	; (80156ec <__ieee754_pow+0x76c>)
 80153fe:	f7eb fa55 	bl	80008ac <__aeabi_ddiv>
 8015402:	ec41 0b1a 	vmov	d10, r0, r1
 8015406:	4602      	mov	r2, r0
 8015408:	460b      	mov	r3, r1
 801540a:	4630      	mov	r0, r6
 801540c:	4639      	mov	r1, r7
 801540e:	f7eb f923 	bl	8000658 <__aeabi_dmul>
 8015412:	2300      	movs	r3, #0
 8015414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015418:	9302      	str	r3, [sp, #8]
 801541a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801541e:	46ab      	mov	fp, r5
 8015420:	106d      	asrs	r5, r5, #1
 8015422:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015426:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801542a:	ec41 0b18 	vmov	d8, r0, r1
 801542e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8015432:	2200      	movs	r2, #0
 8015434:	4640      	mov	r0, r8
 8015436:	4649      	mov	r1, r9
 8015438:	4614      	mov	r4, r2
 801543a:	461d      	mov	r5, r3
 801543c:	f7eb f90c 	bl	8000658 <__aeabi_dmul>
 8015440:	4602      	mov	r2, r0
 8015442:	460b      	mov	r3, r1
 8015444:	4630      	mov	r0, r6
 8015446:	4639      	mov	r1, r7
 8015448:	f7ea ff4e 	bl	80002e8 <__aeabi_dsub>
 801544c:	ec53 2b19 	vmov	r2, r3, d9
 8015450:	4606      	mov	r6, r0
 8015452:	460f      	mov	r7, r1
 8015454:	4620      	mov	r0, r4
 8015456:	4629      	mov	r1, r5
 8015458:	f7ea ff46 	bl	80002e8 <__aeabi_dsub>
 801545c:	4602      	mov	r2, r0
 801545e:	460b      	mov	r3, r1
 8015460:	4650      	mov	r0, sl
 8015462:	4659      	mov	r1, fp
 8015464:	f7ea ff40 	bl	80002e8 <__aeabi_dsub>
 8015468:	4642      	mov	r2, r8
 801546a:	464b      	mov	r3, r9
 801546c:	f7eb f8f4 	bl	8000658 <__aeabi_dmul>
 8015470:	4602      	mov	r2, r0
 8015472:	460b      	mov	r3, r1
 8015474:	4630      	mov	r0, r6
 8015476:	4639      	mov	r1, r7
 8015478:	f7ea ff36 	bl	80002e8 <__aeabi_dsub>
 801547c:	ec53 2b1a 	vmov	r2, r3, d10
 8015480:	f7eb f8ea 	bl	8000658 <__aeabi_dmul>
 8015484:	ec53 2b18 	vmov	r2, r3, d8
 8015488:	ec41 0b19 	vmov	d9, r0, r1
 801548c:	ec51 0b18 	vmov	r0, r1, d8
 8015490:	f7eb f8e2 	bl	8000658 <__aeabi_dmul>
 8015494:	a37c      	add	r3, pc, #496	; (adr r3, 8015688 <__ieee754_pow+0x708>)
 8015496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801549a:	4604      	mov	r4, r0
 801549c:	460d      	mov	r5, r1
 801549e:	f7eb f8db 	bl	8000658 <__aeabi_dmul>
 80154a2:	a37b      	add	r3, pc, #492	; (adr r3, 8015690 <__ieee754_pow+0x710>)
 80154a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154a8:	f7ea ff20 	bl	80002ec <__adddf3>
 80154ac:	4622      	mov	r2, r4
 80154ae:	462b      	mov	r3, r5
 80154b0:	f7eb f8d2 	bl	8000658 <__aeabi_dmul>
 80154b4:	a378      	add	r3, pc, #480	; (adr r3, 8015698 <__ieee754_pow+0x718>)
 80154b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154ba:	f7ea ff17 	bl	80002ec <__adddf3>
 80154be:	4622      	mov	r2, r4
 80154c0:	462b      	mov	r3, r5
 80154c2:	f7eb f8c9 	bl	8000658 <__aeabi_dmul>
 80154c6:	a376      	add	r3, pc, #472	; (adr r3, 80156a0 <__ieee754_pow+0x720>)
 80154c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154cc:	f7ea ff0e 	bl	80002ec <__adddf3>
 80154d0:	4622      	mov	r2, r4
 80154d2:	462b      	mov	r3, r5
 80154d4:	f7eb f8c0 	bl	8000658 <__aeabi_dmul>
 80154d8:	a373      	add	r3, pc, #460	; (adr r3, 80156a8 <__ieee754_pow+0x728>)
 80154da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154de:	f7ea ff05 	bl	80002ec <__adddf3>
 80154e2:	4622      	mov	r2, r4
 80154e4:	462b      	mov	r3, r5
 80154e6:	f7eb f8b7 	bl	8000658 <__aeabi_dmul>
 80154ea:	a371      	add	r3, pc, #452	; (adr r3, 80156b0 <__ieee754_pow+0x730>)
 80154ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154f0:	f7ea fefc 	bl	80002ec <__adddf3>
 80154f4:	4622      	mov	r2, r4
 80154f6:	4606      	mov	r6, r0
 80154f8:	460f      	mov	r7, r1
 80154fa:	462b      	mov	r3, r5
 80154fc:	4620      	mov	r0, r4
 80154fe:	4629      	mov	r1, r5
 8015500:	f7eb f8aa 	bl	8000658 <__aeabi_dmul>
 8015504:	4602      	mov	r2, r0
 8015506:	460b      	mov	r3, r1
 8015508:	4630      	mov	r0, r6
 801550a:	4639      	mov	r1, r7
 801550c:	f7eb f8a4 	bl	8000658 <__aeabi_dmul>
 8015510:	4642      	mov	r2, r8
 8015512:	4604      	mov	r4, r0
 8015514:	460d      	mov	r5, r1
 8015516:	464b      	mov	r3, r9
 8015518:	ec51 0b18 	vmov	r0, r1, d8
 801551c:	f7ea fee6 	bl	80002ec <__adddf3>
 8015520:	ec53 2b19 	vmov	r2, r3, d9
 8015524:	f7eb f898 	bl	8000658 <__aeabi_dmul>
 8015528:	4622      	mov	r2, r4
 801552a:	462b      	mov	r3, r5
 801552c:	f7ea fede 	bl	80002ec <__adddf3>
 8015530:	4642      	mov	r2, r8
 8015532:	4682      	mov	sl, r0
 8015534:	468b      	mov	fp, r1
 8015536:	464b      	mov	r3, r9
 8015538:	4640      	mov	r0, r8
 801553a:	4649      	mov	r1, r9
 801553c:	f7eb f88c 	bl	8000658 <__aeabi_dmul>
 8015540:	4b6b      	ldr	r3, [pc, #428]	; (80156f0 <__ieee754_pow+0x770>)
 8015542:	2200      	movs	r2, #0
 8015544:	4606      	mov	r6, r0
 8015546:	460f      	mov	r7, r1
 8015548:	f7ea fed0 	bl	80002ec <__adddf3>
 801554c:	4652      	mov	r2, sl
 801554e:	465b      	mov	r3, fp
 8015550:	f7ea fecc 	bl	80002ec <__adddf3>
 8015554:	2000      	movs	r0, #0
 8015556:	4604      	mov	r4, r0
 8015558:	460d      	mov	r5, r1
 801555a:	4602      	mov	r2, r0
 801555c:	460b      	mov	r3, r1
 801555e:	4640      	mov	r0, r8
 8015560:	4649      	mov	r1, r9
 8015562:	f7eb f879 	bl	8000658 <__aeabi_dmul>
 8015566:	4b62      	ldr	r3, [pc, #392]	; (80156f0 <__ieee754_pow+0x770>)
 8015568:	4680      	mov	r8, r0
 801556a:	4689      	mov	r9, r1
 801556c:	2200      	movs	r2, #0
 801556e:	4620      	mov	r0, r4
 8015570:	4629      	mov	r1, r5
 8015572:	f7ea feb9 	bl	80002e8 <__aeabi_dsub>
 8015576:	4632      	mov	r2, r6
 8015578:	463b      	mov	r3, r7
 801557a:	f7ea feb5 	bl	80002e8 <__aeabi_dsub>
 801557e:	4602      	mov	r2, r0
 8015580:	460b      	mov	r3, r1
 8015582:	4650      	mov	r0, sl
 8015584:	4659      	mov	r1, fp
 8015586:	f7ea feaf 	bl	80002e8 <__aeabi_dsub>
 801558a:	ec53 2b18 	vmov	r2, r3, d8
 801558e:	f7eb f863 	bl	8000658 <__aeabi_dmul>
 8015592:	4622      	mov	r2, r4
 8015594:	4606      	mov	r6, r0
 8015596:	460f      	mov	r7, r1
 8015598:	462b      	mov	r3, r5
 801559a:	ec51 0b19 	vmov	r0, r1, d9
 801559e:	f7eb f85b 	bl	8000658 <__aeabi_dmul>
 80155a2:	4602      	mov	r2, r0
 80155a4:	460b      	mov	r3, r1
 80155a6:	4630      	mov	r0, r6
 80155a8:	4639      	mov	r1, r7
 80155aa:	f7ea fe9f 	bl	80002ec <__adddf3>
 80155ae:	4606      	mov	r6, r0
 80155b0:	460f      	mov	r7, r1
 80155b2:	4602      	mov	r2, r0
 80155b4:	460b      	mov	r3, r1
 80155b6:	4640      	mov	r0, r8
 80155b8:	4649      	mov	r1, r9
 80155ba:	f7ea fe97 	bl	80002ec <__adddf3>
 80155be:	a33e      	add	r3, pc, #248	; (adr r3, 80156b8 <__ieee754_pow+0x738>)
 80155c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155c4:	2000      	movs	r0, #0
 80155c6:	4604      	mov	r4, r0
 80155c8:	460d      	mov	r5, r1
 80155ca:	f7eb f845 	bl	8000658 <__aeabi_dmul>
 80155ce:	4642      	mov	r2, r8
 80155d0:	ec41 0b18 	vmov	d8, r0, r1
 80155d4:	464b      	mov	r3, r9
 80155d6:	4620      	mov	r0, r4
 80155d8:	4629      	mov	r1, r5
 80155da:	f7ea fe85 	bl	80002e8 <__aeabi_dsub>
 80155de:	4602      	mov	r2, r0
 80155e0:	460b      	mov	r3, r1
 80155e2:	4630      	mov	r0, r6
 80155e4:	4639      	mov	r1, r7
 80155e6:	f7ea fe7f 	bl	80002e8 <__aeabi_dsub>
 80155ea:	a335      	add	r3, pc, #212	; (adr r3, 80156c0 <__ieee754_pow+0x740>)
 80155ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155f0:	f7eb f832 	bl	8000658 <__aeabi_dmul>
 80155f4:	a334      	add	r3, pc, #208	; (adr r3, 80156c8 <__ieee754_pow+0x748>)
 80155f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155fa:	4606      	mov	r6, r0
 80155fc:	460f      	mov	r7, r1
 80155fe:	4620      	mov	r0, r4
 8015600:	4629      	mov	r1, r5
 8015602:	f7eb f829 	bl	8000658 <__aeabi_dmul>
 8015606:	4602      	mov	r2, r0
 8015608:	460b      	mov	r3, r1
 801560a:	4630      	mov	r0, r6
 801560c:	4639      	mov	r1, r7
 801560e:	f7ea fe6d 	bl	80002ec <__adddf3>
 8015612:	9a07      	ldr	r2, [sp, #28]
 8015614:	4b37      	ldr	r3, [pc, #220]	; (80156f4 <__ieee754_pow+0x774>)
 8015616:	4413      	add	r3, r2
 8015618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801561c:	f7ea fe66 	bl	80002ec <__adddf3>
 8015620:	4682      	mov	sl, r0
 8015622:	9805      	ldr	r0, [sp, #20]
 8015624:	468b      	mov	fp, r1
 8015626:	f7ea ffad 	bl	8000584 <__aeabi_i2d>
 801562a:	9a07      	ldr	r2, [sp, #28]
 801562c:	4b32      	ldr	r3, [pc, #200]	; (80156f8 <__ieee754_pow+0x778>)
 801562e:	4413      	add	r3, r2
 8015630:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015634:	4606      	mov	r6, r0
 8015636:	460f      	mov	r7, r1
 8015638:	4652      	mov	r2, sl
 801563a:	465b      	mov	r3, fp
 801563c:	ec51 0b18 	vmov	r0, r1, d8
 8015640:	f7ea fe54 	bl	80002ec <__adddf3>
 8015644:	4642      	mov	r2, r8
 8015646:	464b      	mov	r3, r9
 8015648:	f7ea fe50 	bl	80002ec <__adddf3>
 801564c:	4632      	mov	r2, r6
 801564e:	463b      	mov	r3, r7
 8015650:	f7ea fe4c 	bl	80002ec <__adddf3>
 8015654:	2000      	movs	r0, #0
 8015656:	4632      	mov	r2, r6
 8015658:	463b      	mov	r3, r7
 801565a:	4604      	mov	r4, r0
 801565c:	460d      	mov	r5, r1
 801565e:	f7ea fe43 	bl	80002e8 <__aeabi_dsub>
 8015662:	4642      	mov	r2, r8
 8015664:	464b      	mov	r3, r9
 8015666:	f7ea fe3f 	bl	80002e8 <__aeabi_dsub>
 801566a:	ec53 2b18 	vmov	r2, r3, d8
 801566e:	f7ea fe3b 	bl	80002e8 <__aeabi_dsub>
 8015672:	4602      	mov	r2, r0
 8015674:	460b      	mov	r3, r1
 8015676:	4650      	mov	r0, sl
 8015678:	4659      	mov	r1, fp
 801567a:	e610      	b.n	801529e <__ieee754_pow+0x31e>
 801567c:	2401      	movs	r4, #1
 801567e:	e6a1      	b.n	80153c4 <__ieee754_pow+0x444>
 8015680:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80156d0 <__ieee754_pow+0x750>
 8015684:	e617      	b.n	80152b6 <__ieee754_pow+0x336>
 8015686:	bf00      	nop
 8015688:	4a454eef 	.word	0x4a454eef
 801568c:	3fca7e28 	.word	0x3fca7e28
 8015690:	93c9db65 	.word	0x93c9db65
 8015694:	3fcd864a 	.word	0x3fcd864a
 8015698:	a91d4101 	.word	0xa91d4101
 801569c:	3fd17460 	.word	0x3fd17460
 80156a0:	518f264d 	.word	0x518f264d
 80156a4:	3fd55555 	.word	0x3fd55555
 80156a8:	db6fabff 	.word	0xdb6fabff
 80156ac:	3fdb6db6 	.word	0x3fdb6db6
 80156b0:	33333303 	.word	0x33333303
 80156b4:	3fe33333 	.word	0x3fe33333
 80156b8:	e0000000 	.word	0xe0000000
 80156bc:	3feec709 	.word	0x3feec709
 80156c0:	dc3a03fd 	.word	0xdc3a03fd
 80156c4:	3feec709 	.word	0x3feec709
 80156c8:	145b01f5 	.word	0x145b01f5
 80156cc:	be3e2fe0 	.word	0xbe3e2fe0
 80156d0:	00000000 	.word	0x00000000
 80156d4:	3ff00000 	.word	0x3ff00000
 80156d8:	7ff00000 	.word	0x7ff00000
 80156dc:	43400000 	.word	0x43400000
 80156e0:	0003988e 	.word	0x0003988e
 80156e4:	000bb679 	.word	0x000bb679
 80156e8:	08016868 	.word	0x08016868
 80156ec:	3ff00000 	.word	0x3ff00000
 80156f0:	40080000 	.word	0x40080000
 80156f4:	08016888 	.word	0x08016888
 80156f8:	08016878 	.word	0x08016878
 80156fc:	a3b5      	add	r3, pc, #724	; (adr r3, 80159d4 <__ieee754_pow+0xa54>)
 80156fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015702:	4640      	mov	r0, r8
 8015704:	4649      	mov	r1, r9
 8015706:	f7ea fdf1 	bl	80002ec <__adddf3>
 801570a:	4622      	mov	r2, r4
 801570c:	ec41 0b1a 	vmov	d10, r0, r1
 8015710:	462b      	mov	r3, r5
 8015712:	4630      	mov	r0, r6
 8015714:	4639      	mov	r1, r7
 8015716:	f7ea fde7 	bl	80002e8 <__aeabi_dsub>
 801571a:	4602      	mov	r2, r0
 801571c:	460b      	mov	r3, r1
 801571e:	ec51 0b1a 	vmov	r0, r1, d10
 8015722:	f7eb fa29 	bl	8000b78 <__aeabi_dcmpgt>
 8015726:	2800      	cmp	r0, #0
 8015728:	f47f ae04 	bne.w	8015334 <__ieee754_pow+0x3b4>
 801572c:	4aa4      	ldr	r2, [pc, #656]	; (80159c0 <__ieee754_pow+0xa40>)
 801572e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015732:	4293      	cmp	r3, r2
 8015734:	f340 8108 	ble.w	8015948 <__ieee754_pow+0x9c8>
 8015738:	151b      	asrs	r3, r3, #20
 801573a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801573e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8015742:	fa4a f303 	asr.w	r3, sl, r3
 8015746:	445b      	add	r3, fp
 8015748:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801574c:	4e9d      	ldr	r6, [pc, #628]	; (80159c4 <__ieee754_pow+0xa44>)
 801574e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015752:	4116      	asrs	r6, r2
 8015754:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8015758:	2000      	movs	r0, #0
 801575a:	ea23 0106 	bic.w	r1, r3, r6
 801575e:	f1c2 0214 	rsb	r2, r2, #20
 8015762:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8015766:	fa4a fa02 	asr.w	sl, sl, r2
 801576a:	f1bb 0f00 	cmp.w	fp, #0
 801576e:	4602      	mov	r2, r0
 8015770:	460b      	mov	r3, r1
 8015772:	4620      	mov	r0, r4
 8015774:	4629      	mov	r1, r5
 8015776:	bfb8      	it	lt
 8015778:	f1ca 0a00 	rsblt	sl, sl, #0
 801577c:	f7ea fdb4 	bl	80002e8 <__aeabi_dsub>
 8015780:	ec41 0b19 	vmov	d9, r0, r1
 8015784:	4642      	mov	r2, r8
 8015786:	464b      	mov	r3, r9
 8015788:	ec51 0b19 	vmov	r0, r1, d9
 801578c:	f7ea fdae 	bl	80002ec <__adddf3>
 8015790:	a37b      	add	r3, pc, #492	; (adr r3, 8015980 <__ieee754_pow+0xa00>)
 8015792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015796:	2000      	movs	r0, #0
 8015798:	4604      	mov	r4, r0
 801579a:	460d      	mov	r5, r1
 801579c:	f7ea ff5c 	bl	8000658 <__aeabi_dmul>
 80157a0:	ec53 2b19 	vmov	r2, r3, d9
 80157a4:	4606      	mov	r6, r0
 80157a6:	460f      	mov	r7, r1
 80157a8:	4620      	mov	r0, r4
 80157aa:	4629      	mov	r1, r5
 80157ac:	f7ea fd9c 	bl	80002e8 <__aeabi_dsub>
 80157b0:	4602      	mov	r2, r0
 80157b2:	460b      	mov	r3, r1
 80157b4:	4640      	mov	r0, r8
 80157b6:	4649      	mov	r1, r9
 80157b8:	f7ea fd96 	bl	80002e8 <__aeabi_dsub>
 80157bc:	a372      	add	r3, pc, #456	; (adr r3, 8015988 <__ieee754_pow+0xa08>)
 80157be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157c2:	f7ea ff49 	bl	8000658 <__aeabi_dmul>
 80157c6:	a372      	add	r3, pc, #456	; (adr r3, 8015990 <__ieee754_pow+0xa10>)
 80157c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157cc:	4680      	mov	r8, r0
 80157ce:	4689      	mov	r9, r1
 80157d0:	4620      	mov	r0, r4
 80157d2:	4629      	mov	r1, r5
 80157d4:	f7ea ff40 	bl	8000658 <__aeabi_dmul>
 80157d8:	4602      	mov	r2, r0
 80157da:	460b      	mov	r3, r1
 80157dc:	4640      	mov	r0, r8
 80157de:	4649      	mov	r1, r9
 80157e0:	f7ea fd84 	bl	80002ec <__adddf3>
 80157e4:	4604      	mov	r4, r0
 80157e6:	460d      	mov	r5, r1
 80157e8:	4602      	mov	r2, r0
 80157ea:	460b      	mov	r3, r1
 80157ec:	4630      	mov	r0, r6
 80157ee:	4639      	mov	r1, r7
 80157f0:	f7ea fd7c 	bl	80002ec <__adddf3>
 80157f4:	4632      	mov	r2, r6
 80157f6:	463b      	mov	r3, r7
 80157f8:	4680      	mov	r8, r0
 80157fa:	4689      	mov	r9, r1
 80157fc:	f7ea fd74 	bl	80002e8 <__aeabi_dsub>
 8015800:	4602      	mov	r2, r0
 8015802:	460b      	mov	r3, r1
 8015804:	4620      	mov	r0, r4
 8015806:	4629      	mov	r1, r5
 8015808:	f7ea fd6e 	bl	80002e8 <__aeabi_dsub>
 801580c:	4642      	mov	r2, r8
 801580e:	4606      	mov	r6, r0
 8015810:	460f      	mov	r7, r1
 8015812:	464b      	mov	r3, r9
 8015814:	4640      	mov	r0, r8
 8015816:	4649      	mov	r1, r9
 8015818:	f7ea ff1e 	bl	8000658 <__aeabi_dmul>
 801581c:	a35e      	add	r3, pc, #376	; (adr r3, 8015998 <__ieee754_pow+0xa18>)
 801581e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015822:	4604      	mov	r4, r0
 8015824:	460d      	mov	r5, r1
 8015826:	f7ea ff17 	bl	8000658 <__aeabi_dmul>
 801582a:	a35d      	add	r3, pc, #372	; (adr r3, 80159a0 <__ieee754_pow+0xa20>)
 801582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015830:	f7ea fd5a 	bl	80002e8 <__aeabi_dsub>
 8015834:	4622      	mov	r2, r4
 8015836:	462b      	mov	r3, r5
 8015838:	f7ea ff0e 	bl	8000658 <__aeabi_dmul>
 801583c:	a35a      	add	r3, pc, #360	; (adr r3, 80159a8 <__ieee754_pow+0xa28>)
 801583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015842:	f7ea fd53 	bl	80002ec <__adddf3>
 8015846:	4622      	mov	r2, r4
 8015848:	462b      	mov	r3, r5
 801584a:	f7ea ff05 	bl	8000658 <__aeabi_dmul>
 801584e:	a358      	add	r3, pc, #352	; (adr r3, 80159b0 <__ieee754_pow+0xa30>)
 8015850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015854:	f7ea fd48 	bl	80002e8 <__aeabi_dsub>
 8015858:	4622      	mov	r2, r4
 801585a:	462b      	mov	r3, r5
 801585c:	f7ea fefc 	bl	8000658 <__aeabi_dmul>
 8015860:	a355      	add	r3, pc, #340	; (adr r3, 80159b8 <__ieee754_pow+0xa38>)
 8015862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015866:	f7ea fd41 	bl	80002ec <__adddf3>
 801586a:	4622      	mov	r2, r4
 801586c:	462b      	mov	r3, r5
 801586e:	f7ea fef3 	bl	8000658 <__aeabi_dmul>
 8015872:	4602      	mov	r2, r0
 8015874:	460b      	mov	r3, r1
 8015876:	4640      	mov	r0, r8
 8015878:	4649      	mov	r1, r9
 801587a:	f7ea fd35 	bl	80002e8 <__aeabi_dsub>
 801587e:	4604      	mov	r4, r0
 8015880:	460d      	mov	r5, r1
 8015882:	4602      	mov	r2, r0
 8015884:	460b      	mov	r3, r1
 8015886:	4640      	mov	r0, r8
 8015888:	4649      	mov	r1, r9
 801588a:	f7ea fee5 	bl	8000658 <__aeabi_dmul>
 801588e:	2200      	movs	r2, #0
 8015890:	ec41 0b19 	vmov	d9, r0, r1
 8015894:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015898:	4620      	mov	r0, r4
 801589a:	4629      	mov	r1, r5
 801589c:	f7ea fd24 	bl	80002e8 <__aeabi_dsub>
 80158a0:	4602      	mov	r2, r0
 80158a2:	460b      	mov	r3, r1
 80158a4:	ec51 0b19 	vmov	r0, r1, d9
 80158a8:	f7eb f800 	bl	80008ac <__aeabi_ddiv>
 80158ac:	4632      	mov	r2, r6
 80158ae:	4604      	mov	r4, r0
 80158b0:	460d      	mov	r5, r1
 80158b2:	463b      	mov	r3, r7
 80158b4:	4640      	mov	r0, r8
 80158b6:	4649      	mov	r1, r9
 80158b8:	f7ea fece 	bl	8000658 <__aeabi_dmul>
 80158bc:	4632      	mov	r2, r6
 80158be:	463b      	mov	r3, r7
 80158c0:	f7ea fd14 	bl	80002ec <__adddf3>
 80158c4:	4602      	mov	r2, r0
 80158c6:	460b      	mov	r3, r1
 80158c8:	4620      	mov	r0, r4
 80158ca:	4629      	mov	r1, r5
 80158cc:	f7ea fd0c 	bl	80002e8 <__aeabi_dsub>
 80158d0:	4642      	mov	r2, r8
 80158d2:	464b      	mov	r3, r9
 80158d4:	f7ea fd08 	bl	80002e8 <__aeabi_dsub>
 80158d8:	460b      	mov	r3, r1
 80158da:	4602      	mov	r2, r0
 80158dc:	493a      	ldr	r1, [pc, #232]	; (80159c8 <__ieee754_pow+0xa48>)
 80158de:	2000      	movs	r0, #0
 80158e0:	f7ea fd02 	bl	80002e8 <__aeabi_dsub>
 80158e4:	ec41 0b10 	vmov	d0, r0, r1
 80158e8:	ee10 3a90 	vmov	r3, s1
 80158ec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80158f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80158f4:	da2b      	bge.n	801594e <__ieee754_pow+0x9ce>
 80158f6:	4650      	mov	r0, sl
 80158f8:	f000 f966 	bl	8015bc8 <scalbn>
 80158fc:	ec51 0b10 	vmov	r0, r1, d0
 8015900:	ec53 2b18 	vmov	r2, r3, d8
 8015904:	f7ff bbed 	b.w	80150e2 <__ieee754_pow+0x162>
 8015908:	4b30      	ldr	r3, [pc, #192]	; (80159cc <__ieee754_pow+0xa4c>)
 801590a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801590e:	429e      	cmp	r6, r3
 8015910:	f77f af0c 	ble.w	801572c <__ieee754_pow+0x7ac>
 8015914:	4b2e      	ldr	r3, [pc, #184]	; (80159d0 <__ieee754_pow+0xa50>)
 8015916:	440b      	add	r3, r1
 8015918:	4303      	orrs	r3, r0
 801591a:	d009      	beq.n	8015930 <__ieee754_pow+0x9b0>
 801591c:	ec51 0b18 	vmov	r0, r1, d8
 8015920:	2200      	movs	r2, #0
 8015922:	2300      	movs	r3, #0
 8015924:	f7eb f90a 	bl	8000b3c <__aeabi_dcmplt>
 8015928:	3800      	subs	r0, #0
 801592a:	bf18      	it	ne
 801592c:	2001      	movne	r0, #1
 801592e:	e447      	b.n	80151c0 <__ieee754_pow+0x240>
 8015930:	4622      	mov	r2, r4
 8015932:	462b      	mov	r3, r5
 8015934:	f7ea fcd8 	bl	80002e8 <__aeabi_dsub>
 8015938:	4642      	mov	r2, r8
 801593a:	464b      	mov	r3, r9
 801593c:	f7eb f912 	bl	8000b64 <__aeabi_dcmpge>
 8015940:	2800      	cmp	r0, #0
 8015942:	f43f aef3 	beq.w	801572c <__ieee754_pow+0x7ac>
 8015946:	e7e9      	b.n	801591c <__ieee754_pow+0x99c>
 8015948:	f04f 0a00 	mov.w	sl, #0
 801594c:	e71a      	b.n	8015784 <__ieee754_pow+0x804>
 801594e:	ec51 0b10 	vmov	r0, r1, d0
 8015952:	4619      	mov	r1, r3
 8015954:	e7d4      	b.n	8015900 <__ieee754_pow+0x980>
 8015956:	491c      	ldr	r1, [pc, #112]	; (80159c8 <__ieee754_pow+0xa48>)
 8015958:	2000      	movs	r0, #0
 801595a:	f7ff bb30 	b.w	8014fbe <__ieee754_pow+0x3e>
 801595e:	2000      	movs	r0, #0
 8015960:	2100      	movs	r1, #0
 8015962:	f7ff bb2c 	b.w	8014fbe <__ieee754_pow+0x3e>
 8015966:	4630      	mov	r0, r6
 8015968:	4639      	mov	r1, r7
 801596a:	f7ff bb28 	b.w	8014fbe <__ieee754_pow+0x3e>
 801596e:	9204      	str	r2, [sp, #16]
 8015970:	f7ff bb7a 	b.w	8015068 <__ieee754_pow+0xe8>
 8015974:	2300      	movs	r3, #0
 8015976:	f7ff bb64 	b.w	8015042 <__ieee754_pow+0xc2>
 801597a:	bf00      	nop
 801597c:	f3af 8000 	nop.w
 8015980:	00000000 	.word	0x00000000
 8015984:	3fe62e43 	.word	0x3fe62e43
 8015988:	fefa39ef 	.word	0xfefa39ef
 801598c:	3fe62e42 	.word	0x3fe62e42
 8015990:	0ca86c39 	.word	0x0ca86c39
 8015994:	be205c61 	.word	0xbe205c61
 8015998:	72bea4d0 	.word	0x72bea4d0
 801599c:	3e663769 	.word	0x3e663769
 80159a0:	c5d26bf1 	.word	0xc5d26bf1
 80159a4:	3ebbbd41 	.word	0x3ebbbd41
 80159a8:	af25de2c 	.word	0xaf25de2c
 80159ac:	3f11566a 	.word	0x3f11566a
 80159b0:	16bebd93 	.word	0x16bebd93
 80159b4:	3f66c16c 	.word	0x3f66c16c
 80159b8:	5555553e 	.word	0x5555553e
 80159bc:	3fc55555 	.word	0x3fc55555
 80159c0:	3fe00000 	.word	0x3fe00000
 80159c4:	000fffff 	.word	0x000fffff
 80159c8:	3ff00000 	.word	0x3ff00000
 80159cc:	4090cbff 	.word	0x4090cbff
 80159d0:	3f6f3400 	.word	0x3f6f3400
 80159d4:	652b82fe 	.word	0x652b82fe
 80159d8:	3c971547 	.word	0x3c971547

080159dc <__ieee754_sqrt>:
 80159dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159e0:	ec55 4b10 	vmov	r4, r5, d0
 80159e4:	4e55      	ldr	r6, [pc, #340]	; (8015b3c <__ieee754_sqrt+0x160>)
 80159e6:	43ae      	bics	r6, r5
 80159e8:	ee10 0a10 	vmov	r0, s0
 80159ec:	ee10 3a10 	vmov	r3, s0
 80159f0:	462a      	mov	r2, r5
 80159f2:	4629      	mov	r1, r5
 80159f4:	d110      	bne.n	8015a18 <__ieee754_sqrt+0x3c>
 80159f6:	ee10 2a10 	vmov	r2, s0
 80159fa:	462b      	mov	r3, r5
 80159fc:	f7ea fe2c 	bl	8000658 <__aeabi_dmul>
 8015a00:	4602      	mov	r2, r0
 8015a02:	460b      	mov	r3, r1
 8015a04:	4620      	mov	r0, r4
 8015a06:	4629      	mov	r1, r5
 8015a08:	f7ea fc70 	bl	80002ec <__adddf3>
 8015a0c:	4604      	mov	r4, r0
 8015a0e:	460d      	mov	r5, r1
 8015a10:	ec45 4b10 	vmov	d0, r4, r5
 8015a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a18:	2d00      	cmp	r5, #0
 8015a1a:	dc10      	bgt.n	8015a3e <__ieee754_sqrt+0x62>
 8015a1c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015a20:	4330      	orrs	r0, r6
 8015a22:	d0f5      	beq.n	8015a10 <__ieee754_sqrt+0x34>
 8015a24:	b15d      	cbz	r5, 8015a3e <__ieee754_sqrt+0x62>
 8015a26:	ee10 2a10 	vmov	r2, s0
 8015a2a:	462b      	mov	r3, r5
 8015a2c:	ee10 0a10 	vmov	r0, s0
 8015a30:	f7ea fc5a 	bl	80002e8 <__aeabi_dsub>
 8015a34:	4602      	mov	r2, r0
 8015a36:	460b      	mov	r3, r1
 8015a38:	f7ea ff38 	bl	80008ac <__aeabi_ddiv>
 8015a3c:	e7e6      	b.n	8015a0c <__ieee754_sqrt+0x30>
 8015a3e:	1512      	asrs	r2, r2, #20
 8015a40:	d074      	beq.n	8015b2c <__ieee754_sqrt+0x150>
 8015a42:	07d4      	lsls	r4, r2, #31
 8015a44:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8015a48:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8015a4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8015a50:	bf5e      	ittt	pl
 8015a52:	0fda      	lsrpl	r2, r3, #31
 8015a54:	005b      	lslpl	r3, r3, #1
 8015a56:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8015a5a:	2400      	movs	r4, #0
 8015a5c:	0fda      	lsrs	r2, r3, #31
 8015a5e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8015a62:	107f      	asrs	r7, r7, #1
 8015a64:	005b      	lsls	r3, r3, #1
 8015a66:	2516      	movs	r5, #22
 8015a68:	4620      	mov	r0, r4
 8015a6a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8015a6e:	1886      	adds	r6, r0, r2
 8015a70:	428e      	cmp	r6, r1
 8015a72:	bfde      	ittt	le
 8015a74:	1b89      	suble	r1, r1, r6
 8015a76:	18b0      	addle	r0, r6, r2
 8015a78:	18a4      	addle	r4, r4, r2
 8015a7a:	0049      	lsls	r1, r1, #1
 8015a7c:	3d01      	subs	r5, #1
 8015a7e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8015a82:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8015a86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015a8a:	d1f0      	bne.n	8015a6e <__ieee754_sqrt+0x92>
 8015a8c:	462a      	mov	r2, r5
 8015a8e:	f04f 0e20 	mov.w	lr, #32
 8015a92:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015a96:	4281      	cmp	r1, r0
 8015a98:	eb06 0c05 	add.w	ip, r6, r5
 8015a9c:	dc02      	bgt.n	8015aa4 <__ieee754_sqrt+0xc8>
 8015a9e:	d113      	bne.n	8015ac8 <__ieee754_sqrt+0xec>
 8015aa0:	459c      	cmp	ip, r3
 8015aa2:	d811      	bhi.n	8015ac8 <__ieee754_sqrt+0xec>
 8015aa4:	f1bc 0f00 	cmp.w	ip, #0
 8015aa8:	eb0c 0506 	add.w	r5, ip, r6
 8015aac:	da43      	bge.n	8015b36 <__ieee754_sqrt+0x15a>
 8015aae:	2d00      	cmp	r5, #0
 8015ab0:	db41      	blt.n	8015b36 <__ieee754_sqrt+0x15a>
 8015ab2:	f100 0801 	add.w	r8, r0, #1
 8015ab6:	1a09      	subs	r1, r1, r0
 8015ab8:	459c      	cmp	ip, r3
 8015aba:	bf88      	it	hi
 8015abc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8015ac0:	eba3 030c 	sub.w	r3, r3, ip
 8015ac4:	4432      	add	r2, r6
 8015ac6:	4640      	mov	r0, r8
 8015ac8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8015acc:	f1be 0e01 	subs.w	lr, lr, #1
 8015ad0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8015ad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015ad8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015adc:	d1db      	bne.n	8015a96 <__ieee754_sqrt+0xba>
 8015ade:	430b      	orrs	r3, r1
 8015ae0:	d006      	beq.n	8015af0 <__ieee754_sqrt+0x114>
 8015ae2:	1c50      	adds	r0, r2, #1
 8015ae4:	bf13      	iteet	ne
 8015ae6:	3201      	addne	r2, #1
 8015ae8:	3401      	addeq	r4, #1
 8015aea:	4672      	moveq	r2, lr
 8015aec:	f022 0201 	bicne.w	r2, r2, #1
 8015af0:	1063      	asrs	r3, r4, #1
 8015af2:	0852      	lsrs	r2, r2, #1
 8015af4:	07e1      	lsls	r1, r4, #31
 8015af6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015afa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8015afe:	bf48      	it	mi
 8015b00:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8015b04:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8015b08:	4614      	mov	r4, r2
 8015b0a:	e781      	b.n	8015a10 <__ieee754_sqrt+0x34>
 8015b0c:	0ad9      	lsrs	r1, r3, #11
 8015b0e:	3815      	subs	r0, #21
 8015b10:	055b      	lsls	r3, r3, #21
 8015b12:	2900      	cmp	r1, #0
 8015b14:	d0fa      	beq.n	8015b0c <__ieee754_sqrt+0x130>
 8015b16:	02cd      	lsls	r5, r1, #11
 8015b18:	d50a      	bpl.n	8015b30 <__ieee754_sqrt+0x154>
 8015b1a:	f1c2 0420 	rsb	r4, r2, #32
 8015b1e:	fa23 f404 	lsr.w	r4, r3, r4
 8015b22:	1e55      	subs	r5, r2, #1
 8015b24:	4093      	lsls	r3, r2
 8015b26:	4321      	orrs	r1, r4
 8015b28:	1b42      	subs	r2, r0, r5
 8015b2a:	e78a      	b.n	8015a42 <__ieee754_sqrt+0x66>
 8015b2c:	4610      	mov	r0, r2
 8015b2e:	e7f0      	b.n	8015b12 <__ieee754_sqrt+0x136>
 8015b30:	0049      	lsls	r1, r1, #1
 8015b32:	3201      	adds	r2, #1
 8015b34:	e7ef      	b.n	8015b16 <__ieee754_sqrt+0x13a>
 8015b36:	4680      	mov	r8, r0
 8015b38:	e7bd      	b.n	8015ab6 <__ieee754_sqrt+0xda>
 8015b3a:	bf00      	nop
 8015b3c:	7ff00000 	.word	0x7ff00000

08015b40 <with_errno>:
 8015b40:	b570      	push	{r4, r5, r6, lr}
 8015b42:	4604      	mov	r4, r0
 8015b44:	460d      	mov	r5, r1
 8015b46:	4616      	mov	r6, r2
 8015b48:	f7fa f83e 	bl	800fbc8 <__errno>
 8015b4c:	4629      	mov	r1, r5
 8015b4e:	6006      	str	r6, [r0, #0]
 8015b50:	4620      	mov	r0, r4
 8015b52:	bd70      	pop	{r4, r5, r6, pc}

08015b54 <xflow>:
 8015b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015b56:	4614      	mov	r4, r2
 8015b58:	461d      	mov	r5, r3
 8015b5a:	b108      	cbz	r0, 8015b60 <xflow+0xc>
 8015b5c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015b60:	e9cd 2300 	strd	r2, r3, [sp]
 8015b64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015b68:	4620      	mov	r0, r4
 8015b6a:	4629      	mov	r1, r5
 8015b6c:	f7ea fd74 	bl	8000658 <__aeabi_dmul>
 8015b70:	2222      	movs	r2, #34	; 0x22
 8015b72:	b003      	add	sp, #12
 8015b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015b78:	f7ff bfe2 	b.w	8015b40 <with_errno>

08015b7c <__math_uflow>:
 8015b7c:	b508      	push	{r3, lr}
 8015b7e:	2200      	movs	r2, #0
 8015b80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015b84:	f7ff ffe6 	bl	8015b54 <xflow>
 8015b88:	ec41 0b10 	vmov	d0, r0, r1
 8015b8c:	bd08      	pop	{r3, pc}

08015b8e <__math_oflow>:
 8015b8e:	b508      	push	{r3, lr}
 8015b90:	2200      	movs	r2, #0
 8015b92:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8015b96:	f7ff ffdd 	bl	8015b54 <xflow>
 8015b9a:	ec41 0b10 	vmov	d0, r0, r1
 8015b9e:	bd08      	pop	{r3, pc}

08015ba0 <fabs>:
 8015ba0:	ec51 0b10 	vmov	r0, r1, d0
 8015ba4:	ee10 2a10 	vmov	r2, s0
 8015ba8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015bac:	ec43 2b10 	vmov	d0, r2, r3
 8015bb0:	4770      	bx	lr

08015bb2 <finite>:
 8015bb2:	b082      	sub	sp, #8
 8015bb4:	ed8d 0b00 	vstr	d0, [sp]
 8015bb8:	9801      	ldr	r0, [sp, #4]
 8015bba:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8015bbe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8015bc2:	0fc0      	lsrs	r0, r0, #31
 8015bc4:	b002      	add	sp, #8
 8015bc6:	4770      	bx	lr

08015bc8 <scalbn>:
 8015bc8:	b570      	push	{r4, r5, r6, lr}
 8015bca:	ec55 4b10 	vmov	r4, r5, d0
 8015bce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015bd2:	4606      	mov	r6, r0
 8015bd4:	462b      	mov	r3, r5
 8015bd6:	b99a      	cbnz	r2, 8015c00 <scalbn+0x38>
 8015bd8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015bdc:	4323      	orrs	r3, r4
 8015bde:	d036      	beq.n	8015c4e <scalbn+0x86>
 8015be0:	4b39      	ldr	r3, [pc, #228]	; (8015cc8 <scalbn+0x100>)
 8015be2:	4629      	mov	r1, r5
 8015be4:	ee10 0a10 	vmov	r0, s0
 8015be8:	2200      	movs	r2, #0
 8015bea:	f7ea fd35 	bl	8000658 <__aeabi_dmul>
 8015bee:	4b37      	ldr	r3, [pc, #220]	; (8015ccc <scalbn+0x104>)
 8015bf0:	429e      	cmp	r6, r3
 8015bf2:	4604      	mov	r4, r0
 8015bf4:	460d      	mov	r5, r1
 8015bf6:	da10      	bge.n	8015c1a <scalbn+0x52>
 8015bf8:	a32b      	add	r3, pc, #172	; (adr r3, 8015ca8 <scalbn+0xe0>)
 8015bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bfe:	e03a      	b.n	8015c76 <scalbn+0xae>
 8015c00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015c04:	428a      	cmp	r2, r1
 8015c06:	d10c      	bne.n	8015c22 <scalbn+0x5a>
 8015c08:	ee10 2a10 	vmov	r2, s0
 8015c0c:	4620      	mov	r0, r4
 8015c0e:	4629      	mov	r1, r5
 8015c10:	f7ea fb6c 	bl	80002ec <__adddf3>
 8015c14:	4604      	mov	r4, r0
 8015c16:	460d      	mov	r5, r1
 8015c18:	e019      	b.n	8015c4e <scalbn+0x86>
 8015c1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015c1e:	460b      	mov	r3, r1
 8015c20:	3a36      	subs	r2, #54	; 0x36
 8015c22:	4432      	add	r2, r6
 8015c24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015c28:	428a      	cmp	r2, r1
 8015c2a:	dd08      	ble.n	8015c3e <scalbn+0x76>
 8015c2c:	2d00      	cmp	r5, #0
 8015c2e:	a120      	add	r1, pc, #128	; (adr r1, 8015cb0 <scalbn+0xe8>)
 8015c30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c34:	da1c      	bge.n	8015c70 <scalbn+0xa8>
 8015c36:	a120      	add	r1, pc, #128	; (adr r1, 8015cb8 <scalbn+0xf0>)
 8015c38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c3c:	e018      	b.n	8015c70 <scalbn+0xa8>
 8015c3e:	2a00      	cmp	r2, #0
 8015c40:	dd08      	ble.n	8015c54 <scalbn+0x8c>
 8015c42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015c46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015c4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015c4e:	ec45 4b10 	vmov	d0, r4, r5
 8015c52:	bd70      	pop	{r4, r5, r6, pc}
 8015c54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015c58:	da19      	bge.n	8015c8e <scalbn+0xc6>
 8015c5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015c5e:	429e      	cmp	r6, r3
 8015c60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8015c64:	dd0a      	ble.n	8015c7c <scalbn+0xb4>
 8015c66:	a112      	add	r1, pc, #72	; (adr r1, 8015cb0 <scalbn+0xe8>)
 8015c68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d1e2      	bne.n	8015c36 <scalbn+0x6e>
 8015c70:	a30f      	add	r3, pc, #60	; (adr r3, 8015cb0 <scalbn+0xe8>)
 8015c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c76:	f7ea fcef 	bl	8000658 <__aeabi_dmul>
 8015c7a:	e7cb      	b.n	8015c14 <scalbn+0x4c>
 8015c7c:	a10a      	add	r1, pc, #40	; (adr r1, 8015ca8 <scalbn+0xe0>)
 8015c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d0b8      	beq.n	8015bf8 <scalbn+0x30>
 8015c86:	a10e      	add	r1, pc, #56	; (adr r1, 8015cc0 <scalbn+0xf8>)
 8015c88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c8c:	e7b4      	b.n	8015bf8 <scalbn+0x30>
 8015c8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015c92:	3236      	adds	r2, #54	; 0x36
 8015c94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015c98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	4b0c      	ldr	r3, [pc, #48]	; (8015cd0 <scalbn+0x108>)
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	e7e8      	b.n	8015c76 <scalbn+0xae>
 8015ca4:	f3af 8000 	nop.w
 8015ca8:	c2f8f359 	.word	0xc2f8f359
 8015cac:	01a56e1f 	.word	0x01a56e1f
 8015cb0:	8800759c 	.word	0x8800759c
 8015cb4:	7e37e43c 	.word	0x7e37e43c
 8015cb8:	8800759c 	.word	0x8800759c
 8015cbc:	fe37e43c 	.word	0xfe37e43c
 8015cc0:	c2f8f359 	.word	0xc2f8f359
 8015cc4:	81a56e1f 	.word	0x81a56e1f
 8015cc8:	43500000 	.word	0x43500000
 8015ccc:	ffff3cb0 	.word	0xffff3cb0
 8015cd0:	3c900000 	.word	0x3c900000

08015cd4 <_init>:
 8015cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cd6:	bf00      	nop
 8015cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015cda:	bc08      	pop	{r3}
 8015cdc:	469e      	mov	lr, r3
 8015cde:	4770      	bx	lr

08015ce0 <_fini>:
 8015ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ce2:	bf00      	nop
 8015ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ce6:	bc08      	pop	{r3}
 8015ce8:	469e      	mov	lr, r3
 8015cea:	4770      	bx	lr
